
STM32_Nucleo_F103RB_MPU9250.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000df94  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d8  0800e0a8  0800e0a8  0001e0a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e780  0800e780  000200b8  2**0
                  CONTENTS
  4 .ARM          00000000  0800e780  0800e780  000200b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e780  0800e780  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e780  0800e780  0001e780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e784  0800e784  0001e784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800e788  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003548  200000b8  0800e840  000200b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003600  0800e840  00023600  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014d8b  00000000  00000000  000200e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000335f  00000000  00000000  00034e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fa0  00000000  00000000  000381d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e18  00000000  00000000  00039170  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001683a  00000000  00000000  00039f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000efe6  00000000  00000000  000507c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00076ac8  00000000  00000000  0005f7a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d6270  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000482c  00000000  00000000  000d62ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000b8 	.word	0x200000b8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e08c 	.word	0x0800e08c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000bc 	.word	0x200000bc
 800014c:	0800e08c 	.word	0x0800e08c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bd4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd8:	d1ed      	bne.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_f2iz>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010c8:	d30f      	bcc.n	80010ea <__aeabi_f2iz+0x2a>
 80010ca:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010ce:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010d2:	d90d      	bls.n	80010f0 <__aeabi_f2iz+0x30>
 80010d4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010dc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e0:	fa23 f002 	lsr.w	r0, r3, r2
 80010e4:	bf18      	it	ne
 80010e6:	4240      	negne	r0, r0
 80010e8:	4770      	bx	lr
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	4770      	bx	lr
 80010f0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010f4:	d101      	bne.n	80010fa <__aeabi_f2iz+0x3a>
 80010f6:	0242      	lsls	r2, r0, #9
 80010f8:	d105      	bne.n	8001106 <__aeabi_f2iz+0x46>
 80010fa:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010fe:	bf08      	it	eq
 8001100:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001104:	4770      	bx	lr
 8001106:	f04f 0000 	mov.w	r0, #0
 800110a:	4770      	bx	lr

0800110c <MadgwickAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float beta, float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz, float dt) {
 800110c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800110e:	b0ad      	sub	sp, #180	; 0xb4
 8001110:	af04      	add	r7, sp, #16
 8001112:	60f8      	str	r0, [r7, #12]
 8001114:	60b9      	str	r1, [r7, #8]
 8001116:	607a      	str	r2, [r7, #4]
 8001118:	603b      	str	r3, [r7, #0]

	float sampleFreq = 1 /dt;
 800111a:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800111e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001122:	f7ff febb 	bl	8000e9c <__aeabi_fdiv>
 8001126:	4603      	mov	r3, r0
 8001128:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	float recipNorm = 0;
 800112c:	f04f 0300 	mov.w	r3, #0
 8001130:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	float s0 = 0, s1 = 0, s2 = 0, s3 = 0;
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800113c:	f04f 0300 	mov.w	r3, #0
 8001140:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	67fb      	str	r3, [r7, #124]	; 0x7c
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	67bb      	str	r3, [r7, #120]	; 0x78
	float qDot1 = 0, qDot2 = 0, qDot3 = 0, qDot4 = 0;
 8001150:	f04f 0300 	mov.w	r3, #0
 8001154:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001158:	f04f 0300 	mov.w	r3, #0
 800115c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001168:	f04f 0300 	mov.w	r3, #0
 800116c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	float hx = 0, hy = 0;
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	677b      	str	r3, [r7, #116]	; 0x74
 8001176:	f04f 0300 	mov.w	r3, #0
 800117a:	673b      	str	r3, [r7, #112]	; 0x70
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 800117c:	f04f 0100 	mov.w	r1, #0
 8001180:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001184:	f7ff ff6a 	bl	800105c <__aeabi_fcmpeq>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d025      	beq.n	80011da <MadgwickAHRSupdate+0xce>
 800118e:	f04f 0100 	mov.w	r1, #0
 8001192:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001196:	f7ff ff61 	bl	800105c <__aeabi_fcmpeq>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d01c      	beq.n	80011da <MadgwickAHRSupdate+0xce>
 80011a0:	f04f 0100 	mov.w	r1, #0
 80011a4:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80011a8:	f7ff ff58 	bl	800105c <__aeabi_fcmpeq>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d013      	beq.n	80011da <MadgwickAHRSupdate+0xce>
		MadgwickAHRSupdateIMU(beta, gx, gy, gz, ax, ay, az, dt);
 80011b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80011b6:	9303      	str	r3, [sp, #12]
 80011b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80011bc:	9302      	str	r3, [sp, #8]
 80011be:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80011c2:	9301      	str	r3, [sp, #4]
 80011c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80011c8:	9300      	str	r3, [sp, #0]
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	68b9      	ldr	r1, [r7, #8]
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f001 f95b 	bl	800248c <MadgwickAHRSupdateIMU>
		return;
 80011d6:	f001 b94d 	b.w	8002474 <MadgwickAHRSupdate+0x1368>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80011da:	4bb2      	ldr	r3, [pc, #712]	; (80014a4 <MadgwickAHRSupdate+0x398>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80011e2:	68b9      	ldr	r1, [r7, #8]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fda5 	bl	8000d34 <__aeabi_fmul>
 80011ea:	4603      	mov	r3, r0
 80011ec:	461c      	mov	r4, r3
 80011ee:	4bae      	ldr	r3, [pc, #696]	; (80014a8 <MadgwickAHRSupdate+0x39c>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fd9d 	bl	8000d34 <__aeabi_fmul>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4619      	mov	r1, r3
 80011fe:	4620      	mov	r0, r4
 8001200:	f7ff fc8e 	bl	8000b20 <__aeabi_fsub>
 8001204:	4603      	mov	r3, r0
 8001206:	461c      	mov	r4, r3
 8001208:	4ba8      	ldr	r3, [pc, #672]	; (80014ac <MadgwickAHRSupdate+0x3a0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6839      	ldr	r1, [r7, #0]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff fd90 	bl	8000d34 <__aeabi_fmul>
 8001214:	4603      	mov	r3, r0
 8001216:	4619      	mov	r1, r3
 8001218:	4620      	mov	r0, r4
 800121a:	f7ff fc81 	bl	8000b20 <__aeabi_fsub>
 800121e:	4603      	mov	r3, r0
 8001220:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff fd85 	bl	8000d34 <__aeabi_fmul>
 800122a:	4603      	mov	r3, r0
 800122c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 8001230:	4b9f      	ldr	r3, [pc, #636]	; (80014b0 <MadgwickAHRSupdate+0x3a4>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fd7c 	bl	8000d34 <__aeabi_fmul>
 800123c:	4603      	mov	r3, r0
 800123e:	461c      	mov	r4, r3
 8001240:	4b99      	ldr	r3, [pc, #612]	; (80014a8 <MadgwickAHRSupdate+0x39c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6839      	ldr	r1, [r7, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fd74 	bl	8000d34 <__aeabi_fmul>
 800124c:	4603      	mov	r3, r0
 800124e:	4619      	mov	r1, r3
 8001250:	4620      	mov	r0, r4
 8001252:	f7ff fc67 	bl	8000b24 <__addsf3>
 8001256:	4603      	mov	r3, r0
 8001258:	461c      	mov	r4, r3
 800125a:	4b94      	ldr	r3, [pc, #592]	; (80014ac <MadgwickAHRSupdate+0x3a0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fd67 	bl	8000d34 <__aeabi_fmul>
 8001266:	4603      	mov	r3, r0
 8001268:	4619      	mov	r1, r3
 800126a:	4620      	mov	r0, r4
 800126c:	f7ff fc58 	bl	8000b20 <__aeabi_fsub>
 8001270:	4603      	mov	r3, r0
 8001272:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff fd5c 	bl	8000d34 <__aeabi_fmul>
 800127c:	4603      	mov	r3, r0
 800127e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 8001282:	4b8b      	ldr	r3, [pc, #556]	; (80014b0 <MadgwickAHRSupdate+0x3a4>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	6879      	ldr	r1, [r7, #4]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff fd53 	bl	8000d34 <__aeabi_fmul>
 800128e:	4603      	mov	r3, r0
 8001290:	461c      	mov	r4, r3
 8001292:	4b84      	ldr	r3, [pc, #528]	; (80014a4 <MadgwickAHRSupdate+0x398>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	6839      	ldr	r1, [r7, #0]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff fd4b 	bl	8000d34 <__aeabi_fmul>
 800129e:	4603      	mov	r3, r0
 80012a0:	4619      	mov	r1, r3
 80012a2:	4620      	mov	r0, r4
 80012a4:	f7ff fc3c 	bl	8000b20 <__aeabi_fsub>
 80012a8:	4603      	mov	r3, r0
 80012aa:	461c      	mov	r4, r3
 80012ac:	4b7f      	ldr	r3, [pc, #508]	; (80014ac <MadgwickAHRSupdate+0x3a0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68b9      	ldr	r1, [r7, #8]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fd3e 	bl	8000d34 <__aeabi_fmul>
 80012b8:	4603      	mov	r3, r0
 80012ba:	4619      	mov	r1, r3
 80012bc:	4620      	mov	r0, r4
 80012be:	f7ff fc31 	bl	8000b24 <__addsf3>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fd33 	bl	8000d34 <__aeabi_fmul>
 80012ce:	4603      	mov	r3, r0
 80012d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80012d4:	4b76      	ldr	r3, [pc, #472]	; (80014b0 <MadgwickAHRSupdate+0x3a4>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6839      	ldr	r1, [r7, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fd2a 	bl	8000d34 <__aeabi_fmul>
 80012e0:	4603      	mov	r3, r0
 80012e2:	461c      	mov	r4, r3
 80012e4:	4b6f      	ldr	r3, [pc, #444]	; (80014a4 <MadgwickAHRSupdate+0x398>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	6879      	ldr	r1, [r7, #4]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f7ff fd22 	bl	8000d34 <__aeabi_fmul>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4619      	mov	r1, r3
 80012f4:	4620      	mov	r0, r4
 80012f6:	f7ff fc15 	bl	8000b24 <__addsf3>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461c      	mov	r4, r3
 80012fe:	4b6a      	ldr	r3, [pc, #424]	; (80014a8 <MadgwickAHRSupdate+0x39c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	68b9      	ldr	r1, [r7, #8]
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fd15 	bl	8000d34 <__aeabi_fmul>
 800130a:	4603      	mov	r3, r0
 800130c:	4619      	mov	r1, r3
 800130e:	4620      	mov	r0, r4
 8001310:	f7ff fc06 	bl	8000b20 <__aeabi_fsub>
 8001314:	4603      	mov	r3, r0
 8001316:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fd0a 	bl	8000d34 <__aeabi_fmul>
 8001320:	4603      	mov	r3, r0
 8001322:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001326:	f04f 0100 	mov.w	r1, #0
 800132a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800132e:	f7ff fe95 	bl	800105c <__aeabi_fcmpeq>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d012      	beq.n	800135e <MadgwickAHRSupdate+0x252>
 8001338:	f04f 0100 	mov.w	r1, #0
 800133c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001340:	f7ff fe8c 	bl	800105c <__aeabi_fcmpeq>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d009      	beq.n	800135e <MadgwickAHRSupdate+0x252>
 800134a:	f04f 0100 	mov.w	r1, #0
 800134e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001352:	f7ff fe83 	bl	800105c <__aeabi_fcmpeq>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	f040 87c4 	bne.w	80022e6 <MadgwickAHRSupdate+0x11da>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800135e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001362:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001366:	f7ff fce5 	bl	8000d34 <__aeabi_fmul>
 800136a:	4603      	mov	r3, r0
 800136c:	461c      	mov	r4, r3
 800136e:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001372:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001376:	f7ff fcdd 	bl	8000d34 <__aeabi_fmul>
 800137a:	4603      	mov	r3, r0
 800137c:	4619      	mov	r1, r3
 800137e:	4620      	mov	r0, r4
 8001380:	f7ff fbd0 	bl	8000b24 <__addsf3>
 8001384:	4603      	mov	r3, r0
 8001386:	461c      	mov	r4, r3
 8001388:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800138c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001390:	f7ff fcd0 	bl	8000d34 <__aeabi_fmul>
 8001394:	4603      	mov	r3, r0
 8001396:	4619      	mov	r1, r3
 8001398:	4620      	mov	r0, r4
 800139a:	f7ff fbc3 	bl	8000b24 <__addsf3>
 800139e:	4603      	mov	r3, r0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f001 fc4f 	bl	8002c44 <invSqrt>
 80013a6:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		ax *= recipNorm;
 80013aa:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80013ae:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80013b2:	f7ff fcbf 	bl	8000d34 <__aeabi_fmul>
 80013b6:	4603      	mov	r3, r0
 80013b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		ay *= recipNorm;
 80013bc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80013c0:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80013c4:	f7ff fcb6 	bl	8000d34 <__aeabi_fmul>
 80013c8:	4603      	mov	r3, r0
 80013ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		az *= recipNorm;   
 80013ce:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80013d2:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80013d6:	f7ff fcad 	bl	8000d34 <__aeabi_fmul>
 80013da:	4603      	mov	r3, r0
 80013dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 80013e0:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80013e4:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80013e8:	f7ff fca4 	bl	8000d34 <__aeabi_fmul>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461c      	mov	r4, r3
 80013f0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80013f4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80013f8:	f7ff fc9c 	bl	8000d34 <__aeabi_fmul>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4619      	mov	r1, r3
 8001400:	4620      	mov	r0, r4
 8001402:	f7ff fb8f 	bl	8000b24 <__addsf3>
 8001406:	4603      	mov	r3, r0
 8001408:	461c      	mov	r4, r3
 800140a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800140e:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8001412:	f7ff fc8f 	bl	8000d34 <__aeabi_fmul>
 8001416:	4603      	mov	r3, r0
 8001418:	4619      	mov	r1, r3
 800141a:	4620      	mov	r0, r4
 800141c:	f7ff fb82 	bl	8000b24 <__addsf3>
 8001420:	4603      	mov	r3, r0
 8001422:	4618      	mov	r0, r3
 8001424:	f001 fc0e 	bl	8002c44 <invSqrt>
 8001428:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		mx *= recipNorm;
 800142c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001430:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001434:	f7ff fc7e 	bl	8000d34 <__aeabi_fmul>
 8001438:	4603      	mov	r3, r0
 800143a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		my *= recipNorm;
 800143e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001442:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001446:	f7ff fc75 	bl	8000d34 <__aeabi_fmul>
 800144a:	4603      	mov	r3, r0
 800144c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
		mz *= recipNorm;
 8001450:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001454:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8001458:	f7ff fc6c 	bl	8000d34 <__aeabi_fmul>
 800145c:	4603      	mov	r3, r0
 800145e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 8001462:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <MadgwickAHRSupdate+0x3a4>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4619      	mov	r1, r3
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff fb5b 	bl	8000b24 <__addsf3>
 800146e:	4603      	mov	r3, r0
 8001470:	4619      	mov	r1, r3
 8001472:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001476:	f7ff fc5d 	bl	8000d34 <__aeabi_fmul>
 800147a:	4603      	mov	r3, r0
 800147c:	66fb      	str	r3, [r7, #108]	; 0x6c
		_2q0my = 2.0f * q0 * my;
 800147e:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <MadgwickAHRSupdate+0x3a4>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4619      	mov	r1, r3
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fb4d 	bl	8000b24 <__addsf3>
 800148a:	4603      	mov	r3, r0
 800148c:	4619      	mov	r1, r3
 800148e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001492:	f7ff fc4f 	bl	8000d34 <__aeabi_fmul>
 8001496:	4603      	mov	r3, r0
 8001498:	66bb      	str	r3, [r7, #104]	; 0x68
		_2q0mz = 2.0f * q0 * mz;
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <MadgwickAHRSupdate+0x3a4>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4619      	mov	r1, r3
 80014a0:	4618      	mov	r0, r3
 80014a2:	e007      	b.n	80014b4 <MadgwickAHRSupdate+0x3a8>
 80014a4:	200000d4 	.word	0x200000d4
 80014a8:	200000d8 	.word	0x200000d8
 80014ac:	200000dc 	.word	0x200000dc
 80014b0:	20000000 	.word	0x20000000
 80014b4:	f7ff fb36 	bl	8000b24 <__addsf3>
 80014b8:	4603      	mov	r3, r0
 80014ba:	4619      	mov	r1, r3
 80014bc:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80014c0:	f7ff fc38 	bl	8000d34 <__aeabi_fmul>
 80014c4:	4603      	mov	r3, r0
 80014c6:	667b      	str	r3, [r7, #100]	; 0x64
		_2q1mx = 2.0f * q1 * mx;
 80014c8:	4b96      	ldr	r3, [pc, #600]	; (8001724 <MadgwickAHRSupdate+0x618>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4619      	mov	r1, r3
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fb28 	bl	8000b24 <__addsf3>
 80014d4:	4603      	mov	r3, r0
 80014d6:	4619      	mov	r1, r3
 80014d8:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80014dc:	f7ff fc2a 	bl	8000d34 <__aeabi_fmul>
 80014e0:	4603      	mov	r3, r0
 80014e2:	663b      	str	r3, [r7, #96]	; 0x60
		_2q0 = 2.0f * q0;
 80014e4:	4b90      	ldr	r3, [pc, #576]	; (8001728 <MadgwickAHRSupdate+0x61c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4619      	mov	r1, r3
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fb1a 	bl	8000b24 <__addsf3>
 80014f0:	4603      	mov	r3, r0
 80014f2:	65fb      	str	r3, [r7, #92]	; 0x5c
		_2q1 = 2.0f * q1;
 80014f4:	4b8b      	ldr	r3, [pc, #556]	; (8001724 <MadgwickAHRSupdate+0x618>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fb12 	bl	8000b24 <__addsf3>
 8001500:	4603      	mov	r3, r0
 8001502:	65bb      	str	r3, [r7, #88]	; 0x58
		_2q2 = 2.0f * q2;
 8001504:	4b89      	ldr	r3, [pc, #548]	; (800172c <MadgwickAHRSupdate+0x620>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4619      	mov	r1, r3
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fb0a 	bl	8000b24 <__addsf3>
 8001510:	4603      	mov	r3, r0
 8001512:	657b      	str	r3, [r7, #84]	; 0x54
		_2q3 = 2.0f * q3;
 8001514:	4b86      	ldr	r3, [pc, #536]	; (8001730 <MadgwickAHRSupdate+0x624>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	4618      	mov	r0, r3
 800151c:	f7ff fb02 	bl	8000b24 <__addsf3>
 8001520:	4603      	mov	r3, r0
 8001522:	653b      	str	r3, [r7, #80]	; 0x50
		_2q0q2 = 2.0f * q0 * q2;
 8001524:	4b80      	ldr	r3, [pc, #512]	; (8001728 <MadgwickAHRSupdate+0x61c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4619      	mov	r1, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fafa 	bl	8000b24 <__addsf3>
 8001530:	4603      	mov	r3, r0
 8001532:	461a      	mov	r2, r3
 8001534:	4b7d      	ldr	r3, [pc, #500]	; (800172c <MadgwickAHRSupdate+0x620>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4619      	mov	r1, r3
 800153a:	4610      	mov	r0, r2
 800153c:	f7ff fbfa 	bl	8000d34 <__aeabi_fmul>
 8001540:	4603      	mov	r3, r0
 8001542:	64fb      	str	r3, [r7, #76]	; 0x4c
		_2q2q3 = 2.0f * q2 * q3;
 8001544:	4b79      	ldr	r3, [pc, #484]	; (800172c <MadgwickAHRSupdate+0x620>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f7ff faea 	bl	8000b24 <__addsf3>
 8001550:	4603      	mov	r3, r0
 8001552:	461a      	mov	r2, r3
 8001554:	4b76      	ldr	r3, [pc, #472]	; (8001730 <MadgwickAHRSupdate+0x624>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	4610      	mov	r0, r2
 800155c:	f7ff fbea 	bl	8000d34 <__aeabi_fmul>
 8001560:	4603      	mov	r3, r0
 8001562:	64bb      	str	r3, [r7, #72]	; 0x48
		q0q0 = q0 * q0;
 8001564:	4b70      	ldr	r3, [pc, #448]	; (8001728 <MadgwickAHRSupdate+0x61c>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b6f      	ldr	r3, [pc, #444]	; (8001728 <MadgwickAHRSupdate+0x61c>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	4610      	mov	r0, r2
 8001570:	f7ff fbe0 	bl	8000d34 <__aeabi_fmul>
 8001574:	4603      	mov	r3, r0
 8001576:	647b      	str	r3, [r7, #68]	; 0x44
		q0q1 = q0 * q1;
 8001578:	4b6b      	ldr	r3, [pc, #428]	; (8001728 <MadgwickAHRSupdate+0x61c>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b69      	ldr	r3, [pc, #420]	; (8001724 <MadgwickAHRSupdate+0x618>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4619      	mov	r1, r3
 8001582:	4610      	mov	r0, r2
 8001584:	f7ff fbd6 	bl	8000d34 <__aeabi_fmul>
 8001588:	4603      	mov	r3, r0
 800158a:	643b      	str	r3, [r7, #64]	; 0x40
		q0q2 = q0 * q2;
 800158c:	4b66      	ldr	r3, [pc, #408]	; (8001728 <MadgwickAHRSupdate+0x61c>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b66      	ldr	r3, [pc, #408]	; (800172c <MadgwickAHRSupdate+0x620>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	4610      	mov	r0, r2
 8001598:	f7ff fbcc 	bl	8000d34 <__aeabi_fmul>
 800159c:	4603      	mov	r3, r0
 800159e:	63fb      	str	r3, [r7, #60]	; 0x3c
		q0q3 = q0 * q3;
 80015a0:	4b61      	ldr	r3, [pc, #388]	; (8001728 <MadgwickAHRSupdate+0x61c>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b62      	ldr	r3, [pc, #392]	; (8001730 <MadgwickAHRSupdate+0x624>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4619      	mov	r1, r3
 80015aa:	4610      	mov	r0, r2
 80015ac:	f7ff fbc2 	bl	8000d34 <__aeabi_fmul>
 80015b0:	4603      	mov	r3, r0
 80015b2:	63bb      	str	r3, [r7, #56]	; 0x38
		q1q1 = q1 * q1;
 80015b4:	4b5b      	ldr	r3, [pc, #364]	; (8001724 <MadgwickAHRSupdate+0x618>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	4b5a      	ldr	r3, [pc, #360]	; (8001724 <MadgwickAHRSupdate+0x618>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4619      	mov	r1, r3
 80015be:	4610      	mov	r0, r2
 80015c0:	f7ff fbb8 	bl	8000d34 <__aeabi_fmul>
 80015c4:	4603      	mov	r3, r0
 80015c6:	637b      	str	r3, [r7, #52]	; 0x34
		q1q2 = q1 * q2;
 80015c8:	4b56      	ldr	r3, [pc, #344]	; (8001724 <MadgwickAHRSupdate+0x618>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b57      	ldr	r3, [pc, #348]	; (800172c <MadgwickAHRSupdate+0x620>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4619      	mov	r1, r3
 80015d2:	4610      	mov	r0, r2
 80015d4:	f7ff fbae 	bl	8000d34 <__aeabi_fmul>
 80015d8:	4603      	mov	r3, r0
 80015da:	633b      	str	r3, [r7, #48]	; 0x30
		q1q3 = q1 * q3;
 80015dc:	4b51      	ldr	r3, [pc, #324]	; (8001724 <MadgwickAHRSupdate+0x618>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b53      	ldr	r3, [pc, #332]	; (8001730 <MadgwickAHRSupdate+0x624>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4619      	mov	r1, r3
 80015e6:	4610      	mov	r0, r2
 80015e8:	f7ff fba4 	bl	8000d34 <__aeabi_fmul>
 80015ec:	4603      	mov	r3, r0
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		q2q2 = q2 * q2;
 80015f0:	4b4e      	ldr	r3, [pc, #312]	; (800172c <MadgwickAHRSupdate+0x620>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b4d      	ldr	r3, [pc, #308]	; (800172c <MadgwickAHRSupdate+0x620>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	4610      	mov	r0, r2
 80015fc:	f7ff fb9a 	bl	8000d34 <__aeabi_fmul>
 8001600:	4603      	mov	r3, r0
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
		q2q3 = q2 * q3;
 8001604:	4b49      	ldr	r3, [pc, #292]	; (800172c <MadgwickAHRSupdate+0x620>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	4b49      	ldr	r3, [pc, #292]	; (8001730 <MadgwickAHRSupdate+0x624>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	4610      	mov	r0, r2
 8001610:	f7ff fb90 	bl	8000d34 <__aeabi_fmul>
 8001614:	4603      	mov	r3, r0
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
		q3q3 = q3 * q3;
 8001618:	4b45      	ldr	r3, [pc, #276]	; (8001730 <MadgwickAHRSupdate+0x624>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	4b44      	ldr	r3, [pc, #272]	; (8001730 <MadgwickAHRSupdate+0x624>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4619      	mov	r1, r3
 8001622:	4610      	mov	r0, r2
 8001624:	f7ff fb86 	bl	8000d34 <__aeabi_fmul>
 8001628:	4603      	mov	r3, r0
 800162a:	623b      	str	r3, [r7, #32]

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 800162c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800162e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001632:	f7ff fb7f 	bl	8000d34 <__aeabi_fmul>
 8001636:	4603      	mov	r3, r0
 8001638:	461c      	mov	r4, r3
 800163a:	4b3d      	ldr	r3, [pc, #244]	; (8001730 <MadgwickAHRSupdate+0x624>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff fb77 	bl	8000d34 <__aeabi_fmul>
 8001646:	4603      	mov	r3, r0
 8001648:	4619      	mov	r1, r3
 800164a:	4620      	mov	r0, r4
 800164c:	f7ff fa68 	bl	8000b20 <__aeabi_fsub>
 8001650:	4603      	mov	r3, r0
 8001652:	461c      	mov	r4, r3
 8001654:	4b35      	ldr	r3, [pc, #212]	; (800172c <MadgwickAHRSupdate+0x620>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fb6a 	bl	8000d34 <__aeabi_fmul>
 8001660:	4603      	mov	r3, r0
 8001662:	4619      	mov	r1, r3
 8001664:	4620      	mov	r0, r4
 8001666:	f7ff fa5d 	bl	8000b24 <__addsf3>
 800166a:	4603      	mov	r3, r0
 800166c:	461c      	mov	r4, r3
 800166e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001670:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001674:	f7ff fb5e 	bl	8000d34 <__aeabi_fmul>
 8001678:	4603      	mov	r3, r0
 800167a:	4619      	mov	r1, r3
 800167c:	4620      	mov	r0, r4
 800167e:	f7ff fa51 	bl	8000b24 <__addsf3>
 8001682:	4603      	mov	r3, r0
 8001684:	461c      	mov	r4, r3
 8001686:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 800168a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800168c:	f7ff fb52 	bl	8000d34 <__aeabi_fmul>
 8001690:	4603      	mov	r3, r0
 8001692:	461a      	mov	r2, r3
 8001694:	4b25      	ldr	r3, [pc, #148]	; (800172c <MadgwickAHRSupdate+0x620>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	4610      	mov	r0, r2
 800169c:	f7ff fb4a 	bl	8000d34 <__aeabi_fmul>
 80016a0:	4603      	mov	r3, r0
 80016a2:	4619      	mov	r1, r3
 80016a4:	4620      	mov	r0, r4
 80016a6:	f7ff fa3d 	bl	8000b24 <__addsf3>
 80016aa:	4603      	mov	r3, r0
 80016ac:	461c      	mov	r4, r3
 80016ae:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80016b2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80016b4:	f7ff fb3e 	bl	8000d34 <__aeabi_fmul>
 80016b8:	4603      	mov	r3, r0
 80016ba:	461a      	mov	r2, r3
 80016bc:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <MadgwickAHRSupdate+0x624>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	4610      	mov	r0, r2
 80016c4:	f7ff fb36 	bl	8000d34 <__aeabi_fmul>
 80016c8:	4603      	mov	r3, r0
 80016ca:	4619      	mov	r1, r3
 80016cc:	4620      	mov	r0, r4
 80016ce:	f7ff fa29 	bl	8000b24 <__addsf3>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461c      	mov	r4, r3
 80016d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016d8:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80016dc:	f7ff fb2a 	bl	8000d34 <__aeabi_fmul>
 80016e0:	4603      	mov	r3, r0
 80016e2:	4619      	mov	r1, r3
 80016e4:	4620      	mov	r0, r4
 80016e6:	f7ff fa1b 	bl	8000b20 <__aeabi_fsub>
 80016ea:	4603      	mov	r3, r0
 80016ec:	461c      	mov	r4, r3
 80016ee:	6a39      	ldr	r1, [r7, #32]
 80016f0:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80016f4:	f7ff fb1e 	bl	8000d34 <__aeabi_fmul>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4619      	mov	r1, r3
 80016fc:	4620      	mov	r0, r4
 80016fe:	f7ff fa0f 	bl	8000b20 <__aeabi_fsub>
 8001702:	4603      	mov	r3, r0
 8001704:	677b      	str	r3, [r7, #116]	; 0x74
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8001706:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <MadgwickAHRSupdate+0x624>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fb11 	bl	8000d34 <__aeabi_fmul>
 8001712:	4603      	mov	r3, r0
 8001714:	461c      	mov	r4, r3
 8001716:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001718:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800171c:	f7ff fb0a 	bl	8000d34 <__aeabi_fmul>
 8001720:	4603      	mov	r3, r0
 8001722:	e007      	b.n	8001734 <MadgwickAHRSupdate+0x628>
 8001724:	200000d4 	.word	0x200000d4
 8001728:	20000000 	.word	0x20000000
 800172c:	200000d8 	.word	0x200000d8
 8001730:	200000dc 	.word	0x200000dc
 8001734:	4619      	mov	r1, r3
 8001736:	4620      	mov	r0, r4
 8001738:	f7ff f9f4 	bl	8000b24 <__addsf3>
 800173c:	4603      	mov	r3, r0
 800173e:	461c      	mov	r4, r3
 8001740:	4ba2      	ldr	r3, [pc, #648]	; (80019cc <MadgwickAHRSupdate+0x8c0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff faf4 	bl	8000d34 <__aeabi_fmul>
 800174c:	4603      	mov	r3, r0
 800174e:	4619      	mov	r1, r3
 8001750:	4620      	mov	r0, r4
 8001752:	f7ff f9e5 	bl	8000b20 <__aeabi_fsub>
 8001756:	4603      	mov	r3, r0
 8001758:	461c      	mov	r4, r3
 800175a:	4b9d      	ldr	r3, [pc, #628]	; (80019d0 <MadgwickAHRSupdate+0x8c4>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fae7 	bl	8000d34 <__aeabi_fmul>
 8001766:	4603      	mov	r3, r0
 8001768:	4619      	mov	r1, r3
 800176a:	4620      	mov	r0, r4
 800176c:	f7ff f9da 	bl	8000b24 <__addsf3>
 8001770:	4603      	mov	r3, r0
 8001772:	461c      	mov	r4, r3
 8001774:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001776:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800177a:	f7ff fadb 	bl	8000d34 <__aeabi_fmul>
 800177e:	4603      	mov	r3, r0
 8001780:	4619      	mov	r1, r3
 8001782:	4620      	mov	r0, r4
 8001784:	f7ff f9cc 	bl	8000b20 <__aeabi_fsub>
 8001788:	4603      	mov	r3, r0
 800178a:	461c      	mov	r4, r3
 800178c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800178e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001792:	f7ff facf 	bl	8000d34 <__aeabi_fmul>
 8001796:	4603      	mov	r3, r0
 8001798:	4619      	mov	r1, r3
 800179a:	4620      	mov	r0, r4
 800179c:	f7ff f9c2 	bl	8000b24 <__addsf3>
 80017a0:	4603      	mov	r3, r0
 80017a2:	461c      	mov	r4, r3
 80017a4:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80017a8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80017aa:	f7ff fac3 	bl	8000d34 <__aeabi_fmul>
 80017ae:	4603      	mov	r3, r0
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b88      	ldr	r3, [pc, #544]	; (80019d4 <MadgwickAHRSupdate+0x8c8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4619      	mov	r1, r3
 80017b8:	4610      	mov	r0, r2
 80017ba:	f7ff fabb 	bl	8000d34 <__aeabi_fmul>
 80017be:	4603      	mov	r3, r0
 80017c0:	4619      	mov	r1, r3
 80017c2:	4620      	mov	r0, r4
 80017c4:	f7ff f9ae 	bl	8000b24 <__addsf3>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461c      	mov	r4, r3
 80017cc:	6a39      	ldr	r1, [r7, #32]
 80017ce:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80017d2:	f7ff faaf 	bl	8000d34 <__aeabi_fmul>
 80017d6:	4603      	mov	r3, r0
 80017d8:	4619      	mov	r1, r3
 80017da:	4620      	mov	r0, r4
 80017dc:	f7ff f9a0 	bl	8000b20 <__aeabi_fsub>
 80017e0:	4603      	mov	r3, r0
 80017e2:	673b      	str	r3, [r7, #112]	; 0x70
		_2bx = sqrt(hx * hx + hy * hy);
 80017e4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80017e6:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80017e8:	f7ff faa4 	bl	8000d34 <__aeabi_fmul>
 80017ec:	4603      	mov	r3, r0
 80017ee:	461c      	mov	r4, r3
 80017f0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80017f2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80017f4:	f7ff fa9e 	bl	8000d34 <__aeabi_fmul>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4619      	mov	r1, r3
 80017fc:	4620      	mov	r0, r4
 80017fe:	f7ff f991 	bl	8000b24 <__addsf3>
 8001802:	4603      	mov	r3, r0
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fe07 	bl	8000418 <__aeabi_f2d>
 800180a:	4603      	mov	r3, r0
 800180c:	460c      	mov	r4, r1
 800180e:	4618      	mov	r0, r3
 8001810:	4621      	mov	r1, r4
 8001812:	f009 fc59 	bl	800b0c8 <sqrt>
 8001816:	4603      	mov	r3, r0
 8001818:	460c      	mov	r4, r1
 800181a:	4618      	mov	r0, r3
 800181c:	4621      	mov	r1, r4
 800181e:	f7ff f92b 	bl	8000a78 <__aeabi_d2f>
 8001822:	4603      	mov	r3, r0
 8001824:	61fb      	str	r3, [r7, #28]
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8001826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001828:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800182c:	4b68      	ldr	r3, [pc, #416]	; (80019d0 <MadgwickAHRSupdate+0x8c4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4619      	mov	r1, r3
 8001832:	4610      	mov	r0, r2
 8001834:	f7ff fa7e 	bl	8000d34 <__aeabi_fmul>
 8001838:	4603      	mov	r3, r0
 800183a:	461c      	mov	r4, r3
 800183c:	4b63      	ldr	r3, [pc, #396]	; (80019cc <MadgwickAHRSupdate+0x8c0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fa76 	bl	8000d34 <__aeabi_fmul>
 8001848:	4603      	mov	r3, r0
 800184a:	4619      	mov	r1, r3
 800184c:	4620      	mov	r0, r4
 800184e:	f7ff f969 	bl	8000b24 <__addsf3>
 8001852:	4603      	mov	r3, r0
 8001854:	461c      	mov	r4, r3
 8001856:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001858:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800185c:	f7ff fa6a 	bl	8000d34 <__aeabi_fmul>
 8001860:	4603      	mov	r3, r0
 8001862:	4619      	mov	r1, r3
 8001864:	4620      	mov	r0, r4
 8001866:	f7ff f95d 	bl	8000b24 <__addsf3>
 800186a:	4603      	mov	r3, r0
 800186c:	461c      	mov	r4, r3
 800186e:	4b59      	ldr	r3, [pc, #356]	; (80019d4 <MadgwickAHRSupdate+0x8c8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fa5d 	bl	8000d34 <__aeabi_fmul>
 800187a:	4603      	mov	r3, r0
 800187c:	4619      	mov	r1, r3
 800187e:	4620      	mov	r0, r4
 8001880:	f7ff f950 	bl	8000b24 <__addsf3>
 8001884:	4603      	mov	r3, r0
 8001886:	461c      	mov	r4, r3
 8001888:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800188a:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800188e:	f7ff fa51 	bl	8000d34 <__aeabi_fmul>
 8001892:	4603      	mov	r3, r0
 8001894:	4619      	mov	r1, r3
 8001896:	4620      	mov	r0, r4
 8001898:	f7ff f942 	bl	8000b20 <__aeabi_fsub>
 800189c:	4603      	mov	r3, r0
 800189e:	461c      	mov	r4, r3
 80018a0:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80018a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80018a6:	f7ff fa45 	bl	8000d34 <__aeabi_fmul>
 80018aa:	4603      	mov	r3, r0
 80018ac:	461a      	mov	r2, r3
 80018ae:	4b49      	ldr	r3, [pc, #292]	; (80019d4 <MadgwickAHRSupdate+0x8c8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4619      	mov	r1, r3
 80018b4:	4610      	mov	r0, r2
 80018b6:	f7ff fa3d 	bl	8000d34 <__aeabi_fmul>
 80018ba:	4603      	mov	r3, r0
 80018bc:	4619      	mov	r1, r3
 80018be:	4620      	mov	r0, r4
 80018c0:	f7ff f930 	bl	8000b24 <__addsf3>
 80018c4:	4603      	mov	r3, r0
 80018c6:	461c      	mov	r4, r3
 80018c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018ca:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80018ce:	f7ff fa31 	bl	8000d34 <__aeabi_fmul>
 80018d2:	4603      	mov	r3, r0
 80018d4:	4619      	mov	r1, r3
 80018d6:	4620      	mov	r0, r4
 80018d8:	f7ff f922 	bl	8000b20 <__aeabi_fsub>
 80018dc:	4603      	mov	r3, r0
 80018de:	461c      	mov	r4, r3
 80018e0:	6a39      	ldr	r1, [r7, #32]
 80018e2:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80018e6:	f7ff fa25 	bl	8000d34 <__aeabi_fmul>
 80018ea:	4603      	mov	r3, r0
 80018ec:	4619      	mov	r1, r3
 80018ee:	4620      	mov	r0, r4
 80018f0:	f7ff f918 	bl	8000b24 <__addsf3>
 80018f4:	4603      	mov	r3, r0
 80018f6:	61bb      	str	r3, [r7, #24]
		_4bx = 2.0f * _2bx;
 80018f8:	69fb      	ldr	r3, [r7, #28]
 80018fa:	4619      	mov	r1, r3
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff f911 	bl	8000b24 <__addsf3>
 8001902:	4603      	mov	r3, r0
 8001904:	617b      	str	r3, [r7, #20]
		_4bz = 2.0f * _2bz;
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	4619      	mov	r1, r3
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff f90a 	bl	8000b24 <__addsf3>
 8001910:	4603      	mov	r3, r0
 8001912:	613b      	str	r3, [r7, #16]

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001914:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001916:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800191a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191c:	4619      	mov	r1, r3
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff f900 	bl	8000b24 <__addsf3>
 8001924:	4603      	mov	r3, r0
 8001926:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff f8f9 	bl	8000b20 <__aeabi_fsub>
 800192e:	4603      	mov	r3, r0
 8001930:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff f8f3 	bl	8000b20 <__aeabi_fsub>
 800193a:	4603      	mov	r3, r0
 800193c:	4619      	mov	r1, r3
 800193e:	4620      	mov	r0, r4
 8001940:	f7ff f9f8 	bl	8000d34 <__aeabi_fmul>
 8001944:	4603      	mov	r3, r0
 8001946:	461c      	mov	r4, r3
 8001948:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800194a:	4619      	mov	r1, r3
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff f8e9 	bl	8000b24 <__addsf3>
 8001952:	4603      	mov	r3, r0
 8001954:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff f8e4 	bl	8000b24 <__addsf3>
 800195c:	4603      	mov	r3, r0
 800195e:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff f8dc 	bl	8000b20 <__aeabi_fsub>
 8001968:	4603      	mov	r3, r0
 800196a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff f9e1 	bl	8000d34 <__aeabi_fmul>
 8001972:	4603      	mov	r3, r0
 8001974:	4619      	mov	r1, r3
 8001976:	4620      	mov	r0, r4
 8001978:	f7ff f8d4 	bl	8000b24 <__addsf3>
 800197c:	4603      	mov	r3, r0
 800197e:	461c      	mov	r4, r3
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <MadgwickAHRSupdate+0x8c4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	69b9      	ldr	r1, [r7, #24]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff f9d4 	bl	8000d34 <__aeabi_fmul>
 800198c:	4603      	mov	r3, r0
 800198e:	461d      	mov	r5, r3
 8001990:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001992:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001996:	f7ff f8c3 	bl	8000b20 <__aeabi_fsub>
 800199a:	4603      	mov	r3, r0
 800199c:	6a39      	ldr	r1, [r7, #32]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff f8be 	bl	8000b20 <__aeabi_fsub>
 80019a4:	4603      	mov	r3, r0
 80019a6:	69f9      	ldr	r1, [r7, #28]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff f9c3 	bl	8000d34 <__aeabi_fmul>
 80019ae:	4603      	mov	r3, r0
 80019b0:	461e      	mov	r6, r3
 80019b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80019b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019b6:	f7ff f8b3 	bl	8000b20 <__aeabi_fsub>
 80019ba:	4603      	mov	r3, r0
 80019bc:	69b9      	ldr	r1, [r7, #24]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff f9b8 	bl	8000d34 <__aeabi_fmul>
 80019c4:	4603      	mov	r3, r0
 80019c6:	4619      	mov	r1, r3
 80019c8:	e006      	b.n	80019d8 <MadgwickAHRSupdate+0x8cc>
 80019ca:	bf00      	nop
 80019cc:	200000d4 	.word	0x200000d4
 80019d0:	200000d8 	.word	0x200000d8
 80019d4:	200000dc 	.word	0x200000dc
 80019d8:	4630      	mov	r0, r6
 80019da:	f7ff f8a3 	bl	8000b24 <__addsf3>
 80019de:	4603      	mov	r3, r0
 80019e0:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff f89b 	bl	8000b20 <__aeabi_fsub>
 80019ea:	4603      	mov	r3, r0
 80019ec:	4619      	mov	r1, r3
 80019ee:	4628      	mov	r0, r5
 80019f0:	f7ff f9a0 	bl	8000d34 <__aeabi_fmul>
 80019f4:	4603      	mov	r3, r0
 80019f6:	4619      	mov	r1, r3
 80019f8:	4620      	mov	r0, r4
 80019fa:	f7ff f891 	bl	8000b20 <__aeabi_fsub>
 80019fe:	4603      	mov	r3, r0
 8001a00:	461c      	mov	r4, r3
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001a08:	4b9f      	ldr	r3, [pc, #636]	; (8001c88 <MadgwickAHRSupdate+0xb7c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4610      	mov	r0, r2
 8001a10:	f7ff f990 	bl	8000d34 <__aeabi_fmul>
 8001a14:	4603      	mov	r3, r0
 8001a16:	461d      	mov	r5, r3
 8001a18:	4b9c      	ldr	r3, [pc, #624]	; (8001c8c <MadgwickAHRSupdate+0xb80>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	69b9      	ldr	r1, [r7, #24]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7ff f988 	bl	8000d34 <__aeabi_fmul>
 8001a24:	4603      	mov	r3, r0
 8001a26:	4619      	mov	r1, r3
 8001a28:	4628      	mov	r0, r5
 8001a2a:	f7ff f87b 	bl	8000b24 <__addsf3>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	461d      	mov	r5, r3
 8001a32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a36:	f7ff f873 	bl	8000b20 <__aeabi_fsub>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	69f9      	ldr	r1, [r7, #28]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff f978 	bl	8000d34 <__aeabi_fmul>
 8001a44:	4603      	mov	r3, r0
 8001a46:	461e      	mov	r6, r3
 8001a48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a4a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001a4c:	f7ff f86a 	bl	8000b24 <__addsf3>
 8001a50:	4603      	mov	r3, r0
 8001a52:	69b9      	ldr	r1, [r7, #24]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff f96d 	bl	8000d34 <__aeabi_fmul>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4630      	mov	r0, r6
 8001a60:	f7ff f860 	bl	8000b24 <__addsf3>
 8001a64:	4603      	mov	r3, r0
 8001a66:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff f858 	bl	8000b20 <__aeabi_fsub>
 8001a70:	4603      	mov	r3, r0
 8001a72:	4619      	mov	r1, r3
 8001a74:	4628      	mov	r0, r5
 8001a76:	f7ff f95d 	bl	8000d34 <__aeabi_fmul>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4620      	mov	r0, r4
 8001a80:	f7ff f850 	bl	8000b24 <__addsf3>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461c      	mov	r4, r3
 8001a88:	4b81      	ldr	r3, [pc, #516]	; (8001c90 <MadgwickAHRSupdate+0xb84>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	69f9      	ldr	r1, [r7, #28]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff f950 	bl	8000d34 <__aeabi_fmul>
 8001a94:	4603      	mov	r3, r0
 8001a96:	461d      	mov	r5, r3
 8001a98:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a9a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001a9c:	f7ff f842 	bl	8000b24 <__addsf3>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	69f9      	ldr	r1, [r7, #28]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff f945 	bl	8000d34 <__aeabi_fmul>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	461e      	mov	r6, r3
 8001aae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ab0:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001ab4:	f7ff f834 	bl	8000b20 <__aeabi_fsub>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff f82f 	bl	8000b20 <__aeabi_fsub>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	69b9      	ldr	r1, [r7, #24]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff f934 	bl	8000d34 <__aeabi_fmul>
 8001acc:	4603      	mov	r3, r0
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4630      	mov	r0, r6
 8001ad2:	f7ff f827 	bl	8000b24 <__addsf3>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff f81f 	bl	8000b20 <__aeabi_fsub>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	4628      	mov	r0, r5
 8001ae8:	f7ff f924 	bl	8000d34 <__aeabi_fmul>
 8001aec:	4603      	mov	r3, r0
 8001aee:	4619      	mov	r1, r3
 8001af0:	4620      	mov	r0, r4
 8001af2:	f7ff f817 	bl	8000b24 <__addsf3>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afe:	4619      	mov	r1, r3
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff f80f 	bl	8000b24 <__addsf3>
 8001b06:	4603      	mov	r3, r0
 8001b08:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff f808 	bl	8000b20 <__aeabi_fsub>
 8001b10:	4603      	mov	r3, r0
 8001b12:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff f802 	bl	8000b20 <__aeabi_fsub>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff f907 	bl	8000d34 <__aeabi_fmul>
 8001b26:	4603      	mov	r3, r0
 8001b28:	461c      	mov	r4, r3
 8001b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe fff8 	bl	8000b24 <__addsf3>
 8001b34:	4603      	mov	r3, r0
 8001b36:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7fe fff3 	bl	8000b24 <__addsf3>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe ffeb 	bl	8000b20 <__aeabi_fsub>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff f8f0 	bl	8000d34 <__aeabi_fmul>
 8001b54:	4603      	mov	r3, r0
 8001b56:	4619      	mov	r1, r3
 8001b58:	4620      	mov	r0, r4
 8001b5a:	f7fe ffe3 	bl	8000b24 <__addsf3>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	461c      	mov	r4, r3
 8001b62:	4b4a      	ldr	r3, [pc, #296]	; (8001c8c <MadgwickAHRSupdate+0xb80>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff f8e2 	bl	8000d34 <__aeabi_fmul>
 8001b70:	4603      	mov	r3, r0
 8001b72:	461d      	mov	r5, r3
 8001b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b76:	4619      	mov	r1, r3
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe ffd3 	bl	8000b24 <__addsf3>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4619      	mov	r1, r3
 8001b82:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001b86:	f7fe ffcb 	bl	8000b20 <__aeabi_fsub>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	461e      	mov	r6, r3
 8001b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b90:	4619      	mov	r1, r3
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe ffc6 	bl	8000b24 <__addsf3>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4630      	mov	r0, r6
 8001b9e:	f7fe ffbf 	bl	8000b20 <__aeabi_fsub>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe ffb9 	bl	8000b20 <__aeabi_fsub>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4628      	mov	r0, r5
 8001bb4:	f7ff f8be 	bl	8000d34 <__aeabi_fmul>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	f7fe ffaf 	bl	8000b20 <__aeabi_fsub>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	461c      	mov	r4, r3
 8001bc6:	4b30      	ldr	r3, [pc, #192]	; (8001c88 <MadgwickAHRSupdate+0xb7c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	69b9      	ldr	r1, [r7, #24]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff f8b1 	bl	8000d34 <__aeabi_fmul>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	461d      	mov	r5, r3
 8001bd6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bd8:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001bdc:	f7fe ffa0 	bl	8000b20 <__aeabi_fsub>
 8001be0:	4603      	mov	r3, r0
 8001be2:	6a39      	ldr	r1, [r7, #32]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7fe ff9b 	bl	8000b20 <__aeabi_fsub>
 8001bea:	4603      	mov	r3, r0
 8001bec:	69f9      	ldr	r1, [r7, #28]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff f8a0 	bl	8000d34 <__aeabi_fmul>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	461e      	mov	r6, r3
 8001bf8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001bfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001bfc:	f7fe ff90 	bl	8000b20 <__aeabi_fsub>
 8001c00:	4603      	mov	r3, r0
 8001c02:	69b9      	ldr	r1, [r7, #24]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff f895 	bl	8000d34 <__aeabi_fmul>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4630      	mov	r0, r6
 8001c10:	f7fe ff88 	bl	8000b24 <__addsf3>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe ff80 	bl	8000b20 <__aeabi_fsub>
 8001c20:	4603      	mov	r3, r0
 8001c22:	4619      	mov	r1, r3
 8001c24:	4628      	mov	r0, r5
 8001c26:	f7ff f885 	bl	8000d34 <__aeabi_fmul>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4620      	mov	r0, r4
 8001c30:	f7fe ff78 	bl	8000b24 <__addsf3>
 8001c34:	4603      	mov	r3, r0
 8001c36:	461c      	mov	r4, r3
 8001c38:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <MadgwickAHRSupdate+0xb84>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	69f9      	ldr	r1, [r7, #28]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff f878 	bl	8000d34 <__aeabi_fmul>
 8001c44:	4603      	mov	r3, r0
 8001c46:	461d      	mov	r5, r3
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <MadgwickAHRSupdate+0xb88>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	69b9      	ldr	r1, [r7, #24]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff f870 	bl	8000d34 <__aeabi_fmul>
 8001c54:	4603      	mov	r3, r0
 8001c56:	4619      	mov	r1, r3
 8001c58:	4628      	mov	r0, r5
 8001c5a:	f7fe ff63 	bl	8000b24 <__addsf3>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	461d      	mov	r5, r3
 8001c62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c66:	f7fe ff5b 	bl	8000b20 <__aeabi_fsub>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	69f9      	ldr	r1, [r7, #28]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7ff f860 	bl	8000d34 <__aeabi_fmul>
 8001c74:	4603      	mov	r3, r0
 8001c76:	461e      	mov	r6, r3
 8001c78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c7a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001c7c:	f7fe ff52 	bl	8000b24 <__addsf3>
 8001c80:	4603      	mov	r3, r0
 8001c82:	69b9      	ldr	r1, [r7, #24]
 8001c84:	4618      	mov	r0, r3
 8001c86:	e007      	b.n	8001c98 <MadgwickAHRSupdate+0xb8c>
 8001c88:	200000dc 	.word	0x200000dc
 8001c8c:	200000d4 	.word	0x200000d4
 8001c90:	200000d8 	.word	0x200000d8
 8001c94:	20000000 	.word	0x20000000
 8001c98:	f7ff f84c 	bl	8000d34 <__aeabi_fmul>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4630      	mov	r0, r6
 8001ca2:	f7fe ff3f 	bl	8000b24 <__addsf3>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe ff37 	bl	8000b20 <__aeabi_fsub>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4628      	mov	r0, r5
 8001cb8:	f7ff f83c 	bl	8000d34 <__aeabi_fmul>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	f7fe ff2f 	bl	8000b24 <__addsf3>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	461c      	mov	r4, r3
 8001cca:	4ba0      	ldr	r3, [pc, #640]	; (8001f4c <MadgwickAHRSupdate+0xe40>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	69f9      	ldr	r1, [r7, #28]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff f82f 	bl	8000d34 <__aeabi_fmul>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	461d      	mov	r5, r3
 8001cda:	4b9d      	ldr	r3, [pc, #628]	; (8001f50 <MadgwickAHRSupdate+0xe44>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6939      	ldr	r1, [r7, #16]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff f827 	bl	8000d34 <__aeabi_fmul>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4628      	mov	r0, r5
 8001cec:	f7fe ff18 	bl	8000b20 <__aeabi_fsub>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	461d      	mov	r5, r3
 8001cf4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001cf6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001cf8:	f7fe ff14 	bl	8000b24 <__addsf3>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	69f9      	ldr	r1, [r7, #28]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff f817 	bl	8000d34 <__aeabi_fmul>
 8001d06:	4603      	mov	r3, r0
 8001d08:	461e      	mov	r6, r3
 8001d0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001d0c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001d10:	f7fe ff06 	bl	8000b20 <__aeabi_fsub>
 8001d14:	4603      	mov	r3, r0
 8001d16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7fe ff01 	bl	8000b20 <__aeabi_fsub>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	69b9      	ldr	r1, [r7, #24]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff f806 	bl	8000d34 <__aeabi_fmul>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4630      	mov	r0, r6
 8001d2e:	f7fe fef9 	bl	8000b24 <__addsf3>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7fe fef1 	bl	8000b20 <__aeabi_fsub>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	4619      	mov	r1, r3
 8001d42:	4628      	mov	r0, r5
 8001d44:	f7fe fff6 	bl	8000d34 <__aeabi_fmul>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4620      	mov	r0, r4
 8001d4e:	f7fe fee9 	bl	8000b24 <__addsf3>
 8001d52:	4603      	mov	r3, r0
 8001d54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001d58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d5a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d60:	4619      	mov	r1, r3
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7fe fede 	bl	8000b24 <__addsf3>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fed7 	bl	8000b20 <__aeabi_fsub>
 8001d72:	4603      	mov	r3, r0
 8001d74:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7fe fed1 	bl	8000b20 <__aeabi_fsub>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	4619      	mov	r1, r3
 8001d82:	4620      	mov	r0, r4
 8001d84:	f7fe ffd6 	bl	8000d34 <__aeabi_fmul>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461c      	mov	r4, r3
 8001d8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7fe fec7 	bl	8000b24 <__addsf3>
 8001d96:	4603      	mov	r3, r0
 8001d98:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f7fe fec2 	bl	8000b24 <__addsf3>
 8001da0:	4603      	mov	r3, r0
 8001da2:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe feba 	bl	8000b20 <__aeabi_fsub>
 8001dac:	4603      	mov	r3, r0
 8001dae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001db0:	4618      	mov	r0, r3
 8001db2:	f7fe ffbf 	bl	8000d34 <__aeabi_fmul>
 8001db6:	4603      	mov	r3, r0
 8001db8:	4619      	mov	r1, r3
 8001dba:	4620      	mov	r0, r4
 8001dbc:	f7fe feb2 	bl	8000b24 <__addsf3>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	461c      	mov	r4, r3
 8001dc4:	4b63      	ldr	r3, [pc, #396]	; (8001f54 <MadgwickAHRSupdate+0xe48>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7fe ffb1 	bl	8000d34 <__aeabi_fmul>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	461d      	mov	r5, r3
 8001dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fea2 	bl	8000b24 <__addsf3>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4619      	mov	r1, r3
 8001de4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001de8:	f7fe fe9a 	bl	8000b20 <__aeabi_fsub>
 8001dec:	4603      	mov	r3, r0
 8001dee:	461e      	mov	r6, r3
 8001df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001df2:	4619      	mov	r1, r3
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe fe95 	bl	8000b24 <__addsf3>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4630      	mov	r0, r6
 8001e00:	f7fe fe8e 	bl	8000b20 <__aeabi_fsub>
 8001e04:	4603      	mov	r3, r0
 8001e06:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fe88 	bl	8000b20 <__aeabi_fsub>
 8001e10:	4603      	mov	r3, r0
 8001e12:	4619      	mov	r1, r3
 8001e14:	4628      	mov	r0, r5
 8001e16:	f7fe ff8d 	bl	8000d34 <__aeabi_fmul>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4620      	mov	r0, r4
 8001e20:	f7fe fe7e 	bl	8000b20 <__aeabi_fsub>
 8001e24:	4603      	mov	r3, r0
 8001e26:	461c      	mov	r4, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001e2e:	4b49      	ldr	r3, [pc, #292]	; (8001f54 <MadgwickAHRSupdate+0xe48>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4619      	mov	r1, r3
 8001e34:	4610      	mov	r0, r2
 8001e36:	f7fe ff7d 	bl	8000d34 <__aeabi_fmul>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	461d      	mov	r5, r3
 8001e3e:	4b46      	ldr	r3, [pc, #280]	; (8001f58 <MadgwickAHRSupdate+0xe4c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	69b9      	ldr	r1, [r7, #24]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe ff75 	bl	8000d34 <__aeabi_fmul>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4628      	mov	r0, r5
 8001e50:	f7fe fe66 	bl	8000b20 <__aeabi_fsub>
 8001e54:	4603      	mov	r3, r0
 8001e56:	461d      	mov	r5, r3
 8001e58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e5a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001e5e:	f7fe fe5f 	bl	8000b20 <__aeabi_fsub>
 8001e62:	4603      	mov	r3, r0
 8001e64:	6a39      	ldr	r1, [r7, #32]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fe5a 	bl	8000b20 <__aeabi_fsub>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	69f9      	ldr	r1, [r7, #28]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe ff5f 	bl	8000d34 <__aeabi_fmul>
 8001e76:	4603      	mov	r3, r0
 8001e78:	461e      	mov	r6, r3
 8001e7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001e7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e7e:	f7fe fe4f 	bl	8000b20 <__aeabi_fsub>
 8001e82:	4603      	mov	r3, r0
 8001e84:	69b9      	ldr	r1, [r7, #24]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe ff54 	bl	8000d34 <__aeabi_fmul>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4630      	mov	r0, r6
 8001e92:	f7fe fe47 	bl	8000b24 <__addsf3>
 8001e96:	4603      	mov	r3, r0
 8001e98:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe fe3f 	bl	8000b20 <__aeabi_fsub>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4628      	mov	r0, r5
 8001ea8:	f7fe ff44 	bl	8000d34 <__aeabi_fmul>
 8001eac:	4603      	mov	r3, r0
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	f7fe fe37 	bl	8000b24 <__addsf3>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	461c      	mov	r4, r3
 8001eba:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <MadgwickAHRSupdate+0xe44>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	69f9      	ldr	r1, [r7, #28]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7fe ff37 	bl	8000d34 <__aeabi_fmul>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	461d      	mov	r5, r3
 8001eca:	4b20      	ldr	r3, [pc, #128]	; (8001f4c <MadgwickAHRSupdate+0xe40>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	69b9      	ldr	r1, [r7, #24]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe ff2f 	bl	8000d34 <__aeabi_fmul>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4628      	mov	r0, r5
 8001edc:	f7fe fe22 	bl	8000b24 <__addsf3>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	461d      	mov	r5, r3
 8001ee4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ee6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ee8:	f7fe fe1a 	bl	8000b20 <__aeabi_fsub>
 8001eec:	4603      	mov	r3, r0
 8001eee:	69f9      	ldr	r1, [r7, #28]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe ff1f 	bl	8000d34 <__aeabi_fmul>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	461e      	mov	r6, r3
 8001efa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001efc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001efe:	f7fe fe11 	bl	8000b24 <__addsf3>
 8001f02:	4603      	mov	r3, r0
 8001f04:	69b9      	ldr	r1, [r7, #24]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe ff14 	bl	8000d34 <__aeabi_fmul>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4630      	mov	r0, r6
 8001f12:	f7fe fe07 	bl	8000b24 <__addsf3>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe fdff 	bl	8000b20 <__aeabi_fsub>
 8001f22:	4603      	mov	r3, r0
 8001f24:	4619      	mov	r1, r3
 8001f26:	4628      	mov	r0, r5
 8001f28:	f7fe ff04 	bl	8000d34 <__aeabi_fmul>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4620      	mov	r0, r4
 8001f32:	f7fe fdf7 	bl	8000b24 <__addsf3>
 8001f36:	4603      	mov	r3, r0
 8001f38:	461c      	mov	r4, r3
 8001f3a:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <MadgwickAHRSupdate+0xe4c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	69f9      	ldr	r1, [r7, #28]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7fe fef7 	bl	8000d34 <__aeabi_fmul>
 8001f46:	4603      	mov	r3, r0
 8001f48:	461d      	mov	r5, r3
 8001f4a:	e007      	b.n	8001f5c <MadgwickAHRSupdate+0xe50>
 8001f4c:	200000dc 	.word	0x200000dc
 8001f50:	200000d4 	.word	0x200000d4
 8001f54:	200000d8 	.word	0x200000d8
 8001f58:	20000000 	.word	0x20000000
 8001f5c:	4ba2      	ldr	r3, [pc, #648]	; (80021e8 <MadgwickAHRSupdate+0x10dc>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6939      	ldr	r1, [r7, #16]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe fee6 	bl	8000d34 <__aeabi_fmul>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	4628      	mov	r0, r5
 8001f6e:	f7fe fdd7 	bl	8000b20 <__aeabi_fsub>
 8001f72:	4603      	mov	r3, r0
 8001f74:	461d      	mov	r5, r3
 8001f76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f78:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001f7a:	f7fe fdd3 	bl	8000b24 <__addsf3>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	69f9      	ldr	r1, [r7, #28]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe fed6 	bl	8000d34 <__aeabi_fmul>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	461e      	mov	r6, r3
 8001f8c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001f8e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001f92:	f7fe fdc5 	bl	8000b20 <__aeabi_fsub>
 8001f96:	4603      	mov	r3, r0
 8001f98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe fdc0 	bl	8000b20 <__aeabi_fsub>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	69b9      	ldr	r1, [r7, #24]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7fe fec5 	bl	8000d34 <__aeabi_fmul>
 8001faa:	4603      	mov	r3, r0
 8001fac:	4619      	mov	r1, r3
 8001fae:	4630      	mov	r0, r6
 8001fb0:	f7fe fdb8 	bl	8000b24 <__addsf3>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7fe fdb0 	bl	8000b20 <__aeabi_fsub>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	4628      	mov	r0, r5
 8001fc6:	f7fe feb5 	bl	8000d34 <__aeabi_fmul>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4620      	mov	r0, r4
 8001fd0:	f7fe fda8 	bl	8000b24 <__addsf3>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	67fb      	str	r3, [r7, #124]	; 0x7c
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe fda1 	bl	8000b24 <__addsf3>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fd9a 	bl	8000b20 <__aeabi_fsub>
 8001fec:	4603      	mov	r3, r0
 8001fee:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe fd94 	bl	8000b20 <__aeabi_fsub>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fe99 	bl	8000d34 <__aeabi_fmul>
 8002002:	4603      	mov	r3, r0
 8002004:	461c      	mov	r4, r3
 8002006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002008:	4619      	mov	r1, r3
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fd8a 	bl	8000b24 <__addsf3>
 8002010:	4603      	mov	r3, r0
 8002012:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002014:	4618      	mov	r0, r3
 8002016:	f7fe fd85 	bl	8000b24 <__addsf3>
 800201a:	4603      	mov	r3, r0
 800201c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe fd7d 	bl	8000b20 <__aeabi_fsub>
 8002026:	4603      	mov	r3, r0
 8002028:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fe82 	bl	8000d34 <__aeabi_fmul>
 8002030:	4603      	mov	r3, r0
 8002032:	4619      	mov	r1, r3
 8002034:	4620      	mov	r0, r4
 8002036:	f7fe fd75 	bl	8000b24 <__addsf3>
 800203a:	4603      	mov	r3, r0
 800203c:	461c      	mov	r4, r3
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8002044:	4b69      	ldr	r3, [pc, #420]	; (80021ec <MadgwickAHRSupdate+0x10e0>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4619      	mov	r1, r3
 800204a:	4610      	mov	r0, r2
 800204c:	f7fe fe72 	bl	8000d34 <__aeabi_fmul>
 8002050:	4603      	mov	r3, r0
 8002052:	461d      	mov	r5, r3
 8002054:	4b66      	ldr	r3, [pc, #408]	; (80021f0 <MadgwickAHRSupdate+0x10e4>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	69b9      	ldr	r1, [r7, #24]
 800205a:	4618      	mov	r0, r3
 800205c:	f7fe fe6a 	bl	8000d34 <__aeabi_fmul>
 8002060:	4603      	mov	r3, r0
 8002062:	4619      	mov	r1, r3
 8002064:	4628      	mov	r0, r5
 8002066:	f7fe fd5d 	bl	8000b24 <__addsf3>
 800206a:	4603      	mov	r3, r0
 800206c:	461d      	mov	r5, r3
 800206e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002070:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002074:	f7fe fd54 	bl	8000b20 <__aeabi_fsub>
 8002078:	4603      	mov	r3, r0
 800207a:	6a39      	ldr	r1, [r7, #32]
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fd4f 	bl	8000b20 <__aeabi_fsub>
 8002082:	4603      	mov	r3, r0
 8002084:	69f9      	ldr	r1, [r7, #28]
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fe54 	bl	8000d34 <__aeabi_fmul>
 800208c:	4603      	mov	r3, r0
 800208e:	461e      	mov	r6, r3
 8002090:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002092:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002094:	f7fe fd44 	bl	8000b20 <__aeabi_fsub>
 8002098:	4603      	mov	r3, r0
 800209a:	69b9      	ldr	r1, [r7, #24]
 800209c:	4618      	mov	r0, r3
 800209e:	f7fe fe49 	bl	8000d34 <__aeabi_fmul>
 80020a2:	4603      	mov	r3, r0
 80020a4:	4619      	mov	r1, r3
 80020a6:	4630      	mov	r0, r6
 80020a8:	f7fe fd3c 	bl	8000b24 <__addsf3>
 80020ac:	4603      	mov	r3, r0
 80020ae:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fd34 	bl	8000b20 <__aeabi_fsub>
 80020b8:	4603      	mov	r3, r0
 80020ba:	4619      	mov	r1, r3
 80020bc:	4628      	mov	r0, r5
 80020be:	f7fe fe39 	bl	8000d34 <__aeabi_fmul>
 80020c2:	4603      	mov	r3, r0
 80020c4:	4619      	mov	r1, r3
 80020c6:	4620      	mov	r0, r4
 80020c8:	f7fe fd2c 	bl	8000b24 <__addsf3>
 80020cc:	4603      	mov	r3, r0
 80020ce:	461c      	mov	r4, r3
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80020d6:	4b47      	ldr	r3, [pc, #284]	; (80021f4 <MadgwickAHRSupdate+0x10e8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4619      	mov	r1, r3
 80020dc:	4610      	mov	r0, r2
 80020de:	f7fe fe29 	bl	8000d34 <__aeabi_fmul>
 80020e2:	4603      	mov	r3, r0
 80020e4:	461d      	mov	r5, r3
 80020e6:	4b40      	ldr	r3, [pc, #256]	; (80021e8 <MadgwickAHRSupdate+0x10dc>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	69b9      	ldr	r1, [r7, #24]
 80020ec:	4618      	mov	r0, r3
 80020ee:	f7fe fe21 	bl	8000d34 <__aeabi_fmul>
 80020f2:	4603      	mov	r3, r0
 80020f4:	4619      	mov	r1, r3
 80020f6:	4628      	mov	r0, r5
 80020f8:	f7fe fd14 	bl	8000b24 <__addsf3>
 80020fc:	4603      	mov	r3, r0
 80020fe:	461d      	mov	r5, r3
 8002100:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002102:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002104:	f7fe fd0c 	bl	8000b20 <__aeabi_fsub>
 8002108:	4603      	mov	r3, r0
 800210a:	69f9      	ldr	r1, [r7, #28]
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe fe11 	bl	8000d34 <__aeabi_fmul>
 8002112:	4603      	mov	r3, r0
 8002114:	461e      	mov	r6, r3
 8002116:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002118:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800211a:	f7fe fd03 	bl	8000b24 <__addsf3>
 800211e:	4603      	mov	r3, r0
 8002120:	69b9      	ldr	r1, [r7, #24]
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fe06 	bl	8000d34 <__aeabi_fmul>
 8002128:	4603      	mov	r3, r0
 800212a:	4619      	mov	r1, r3
 800212c:	4630      	mov	r0, r6
 800212e:	f7fe fcf9 	bl	8000b24 <__addsf3>
 8002132:	4603      	mov	r3, r0
 8002134:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe fcf1 	bl	8000b20 <__aeabi_fsub>
 800213e:	4603      	mov	r3, r0
 8002140:	4619      	mov	r1, r3
 8002142:	4628      	mov	r0, r5
 8002144:	f7fe fdf6 	bl	8000d34 <__aeabi_fmul>
 8002148:	4603      	mov	r3, r0
 800214a:	4619      	mov	r1, r3
 800214c:	4620      	mov	r0, r4
 800214e:	f7fe fce9 	bl	8000b24 <__addsf3>
 8002152:	4603      	mov	r3, r0
 8002154:	461c      	mov	r4, r3
 8002156:	4b26      	ldr	r3, [pc, #152]	; (80021f0 <MadgwickAHRSupdate+0x10e4>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	69f9      	ldr	r1, [r7, #28]
 800215c:	4618      	mov	r0, r3
 800215e:	f7fe fde9 	bl	8000d34 <__aeabi_fmul>
 8002162:	4603      	mov	r3, r0
 8002164:	461d      	mov	r5, r3
 8002166:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002168:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800216a:	f7fe fcdb 	bl	8000b24 <__addsf3>
 800216e:	4603      	mov	r3, r0
 8002170:	69f9      	ldr	r1, [r7, #28]
 8002172:	4618      	mov	r0, r3
 8002174:	f7fe fdde 	bl	8000d34 <__aeabi_fmul>
 8002178:	4603      	mov	r3, r0
 800217a:	461e      	mov	r6, r3
 800217c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800217e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002182:	f7fe fccd 	bl	8000b20 <__aeabi_fsub>
 8002186:	4603      	mov	r3, r0
 8002188:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe fcc8 	bl	8000b20 <__aeabi_fsub>
 8002190:	4603      	mov	r3, r0
 8002192:	69b9      	ldr	r1, [r7, #24]
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe fdcd 	bl	8000d34 <__aeabi_fmul>
 800219a:	4603      	mov	r3, r0
 800219c:	4619      	mov	r1, r3
 800219e:	4630      	mov	r0, r6
 80021a0:	f7fe fcc0 	bl	8000b24 <__addsf3>
 80021a4:	4603      	mov	r3, r0
 80021a6:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7fe fcb8 	bl	8000b20 <__aeabi_fsub>
 80021b0:	4603      	mov	r3, r0
 80021b2:	4619      	mov	r1, r3
 80021b4:	4628      	mov	r0, r5
 80021b6:	f7fe fdbd 	bl	8000d34 <__aeabi_fmul>
 80021ba:	4603      	mov	r3, r0
 80021bc:	4619      	mov	r1, r3
 80021be:	4620      	mov	r0, r4
 80021c0:	f7fe fcb0 	bl	8000b24 <__addsf3>
 80021c4:	4603      	mov	r3, r0
 80021c6:	67bb      	str	r3, [r7, #120]	; 0x78
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80021c8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80021cc:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80021d0:	f7fe fdb0 	bl	8000d34 <__aeabi_fmul>
 80021d4:	4603      	mov	r3, r0
 80021d6:	461c      	mov	r4, r3
 80021d8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80021dc:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80021e0:	f7fe fda8 	bl	8000d34 <__aeabi_fmul>
 80021e4:	e008      	b.n	80021f8 <MadgwickAHRSupdate+0x10ec>
 80021e6:	bf00      	nop
 80021e8:	200000d8 	.word	0x200000d8
 80021ec:	200000dc 	.word	0x200000dc
 80021f0:	200000d4 	.word	0x200000d4
 80021f4:	20000000 	.word	0x20000000
 80021f8:	4603      	mov	r3, r0
 80021fa:	4619      	mov	r1, r3
 80021fc:	4620      	mov	r0, r4
 80021fe:	f7fe fc91 	bl	8000b24 <__addsf3>
 8002202:	4603      	mov	r3, r0
 8002204:	461c      	mov	r4, r3
 8002206:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002208:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800220a:	f7fe fd93 	bl	8000d34 <__aeabi_fmul>
 800220e:	4603      	mov	r3, r0
 8002210:	4619      	mov	r1, r3
 8002212:	4620      	mov	r0, r4
 8002214:	f7fe fc86 	bl	8000b24 <__addsf3>
 8002218:	4603      	mov	r3, r0
 800221a:	461c      	mov	r4, r3
 800221c:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800221e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002220:	f7fe fd88 	bl	8000d34 <__aeabi_fmul>
 8002224:	4603      	mov	r3, r0
 8002226:	4619      	mov	r1, r3
 8002228:	4620      	mov	r0, r4
 800222a:	f7fe fc7b 	bl	8000b24 <__addsf3>
 800222e:	4603      	mov	r3, r0
 8002230:	4618      	mov	r0, r3
 8002232:	f000 fd07 	bl	8002c44 <invSqrt>
 8002236:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		s0 *= recipNorm;
 800223a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800223e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002242:	f7fe fd77 	bl	8000d34 <__aeabi_fmul>
 8002246:	4603      	mov	r3, r0
 8002248:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		s1 *= recipNorm;
 800224c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002250:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002254:	f7fe fd6e 	bl	8000d34 <__aeabi_fmul>
 8002258:	4603      	mov	r3, r0
 800225a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		s2 *= recipNorm;
 800225e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002262:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002264:	f7fe fd66 	bl	8000d34 <__aeabi_fmul>
 8002268:	4603      	mov	r3, r0
 800226a:	67fb      	str	r3, [r7, #124]	; 0x7c
		s3 *= recipNorm;
 800226c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002270:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8002272:	f7fe fd5f 	bl	8000d34 <__aeabi_fmul>
 8002276:	4603      	mov	r3, r0
 8002278:	67bb      	str	r3, [r7, #120]	; 0x78

		// Apply feedback step
		qDot1 -= beta * s0;
 800227a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f7fe fd58 	bl	8000d34 <__aeabi_fmul>
 8002284:	4603      	mov	r3, r0
 8002286:	4619      	mov	r1, r3
 8002288:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800228c:	f7fe fc48 	bl	8000b20 <__aeabi_fsub>
 8002290:	4603      	mov	r3, r0
 8002292:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		qDot2 -= beta * s1;
 8002296:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f7fe fd4a 	bl	8000d34 <__aeabi_fmul>
 80022a0:	4603      	mov	r3, r0
 80022a2:	4619      	mov	r1, r3
 80022a4:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80022a8:	f7fe fc3a 	bl	8000b20 <__aeabi_fsub>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		qDot3 -= beta * s2;
 80022b2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f7fe fd3d 	bl	8000d34 <__aeabi_fmul>
 80022ba:	4603      	mov	r3, r0
 80022bc:	4619      	mov	r1, r3
 80022be:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80022c2:	f7fe fc2d 	bl	8000b20 <__aeabi_fsub>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		qDot4 -= beta * s3;
 80022cc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f7fe fd30 	bl	8000d34 <__aeabi_fmul>
 80022d4:	4603      	mov	r3, r0
 80022d6:	4619      	mov	r1, r3
 80022d8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80022dc:	f7fe fc20 	bl	8000b20 <__aeabi_fsub>
 80022e0:	4603      	mov	r3, r0
 80022e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 80022e6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80022ea:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80022ee:	f7fe fdd5 	bl	8000e9c <__aeabi_fdiv>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe fd1b 	bl	8000d34 <__aeabi_fmul>
 80022fe:	4603      	mov	r3, r0
 8002300:	461a      	mov	r2, r3
 8002302:	4b5e      	ldr	r3, [pc, #376]	; (800247c <MadgwickAHRSupdate+0x1370>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4619      	mov	r1, r3
 8002308:	4610      	mov	r0, r2
 800230a:	f7fe fc0b 	bl	8000b24 <__addsf3>
 800230e:	4603      	mov	r3, r0
 8002310:	461a      	mov	r2, r3
 8002312:	4b5a      	ldr	r3, [pc, #360]	; (800247c <MadgwickAHRSupdate+0x1370>)
 8002314:	601a      	str	r2, [r3, #0]
	q1 += qDot2 * (1.0f / sampleFreq);
 8002316:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800231a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800231e:	f7fe fdbd 	bl	8000e9c <__aeabi_fdiv>
 8002322:	4603      	mov	r3, r0
 8002324:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe fd03 	bl	8000d34 <__aeabi_fmul>
 800232e:	4603      	mov	r3, r0
 8002330:	461a      	mov	r2, r3
 8002332:	4b53      	ldr	r3, [pc, #332]	; (8002480 <MadgwickAHRSupdate+0x1374>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4619      	mov	r1, r3
 8002338:	4610      	mov	r0, r2
 800233a:	f7fe fbf3 	bl	8000b24 <__addsf3>
 800233e:	4603      	mov	r3, r0
 8002340:	461a      	mov	r2, r3
 8002342:	4b4f      	ldr	r3, [pc, #316]	; (8002480 <MadgwickAHRSupdate+0x1374>)
 8002344:	601a      	str	r2, [r3, #0]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002346:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800234a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800234e:	f7fe fda5 	bl	8000e9c <__aeabi_fdiv>
 8002352:	4603      	mov	r3, r0
 8002354:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe fceb 	bl	8000d34 <__aeabi_fmul>
 800235e:	4603      	mov	r3, r0
 8002360:	461a      	mov	r2, r3
 8002362:	4b48      	ldr	r3, [pc, #288]	; (8002484 <MadgwickAHRSupdate+0x1378>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4619      	mov	r1, r3
 8002368:	4610      	mov	r0, r2
 800236a:	f7fe fbdb 	bl	8000b24 <__addsf3>
 800236e:	4603      	mov	r3, r0
 8002370:	461a      	mov	r2, r3
 8002372:	4b44      	ldr	r3, [pc, #272]	; (8002484 <MadgwickAHRSupdate+0x1378>)
 8002374:	601a      	str	r2, [r3, #0]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002376:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800237a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800237e:	f7fe fd8d 	bl	8000e9c <__aeabi_fdiv>
 8002382:	4603      	mov	r3, r0
 8002384:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe fcd3 	bl	8000d34 <__aeabi_fmul>
 800238e:	4603      	mov	r3, r0
 8002390:	461a      	mov	r2, r3
 8002392:	4b3d      	ldr	r3, [pc, #244]	; (8002488 <MadgwickAHRSupdate+0x137c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4619      	mov	r1, r3
 8002398:	4610      	mov	r0, r2
 800239a:	f7fe fbc3 	bl	8000b24 <__addsf3>
 800239e:	4603      	mov	r3, r0
 80023a0:	461a      	mov	r2, r3
 80023a2:	4b39      	ldr	r3, [pc, #228]	; (8002488 <MadgwickAHRSupdate+0x137c>)
 80023a4:	601a      	str	r2, [r3, #0]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80023a6:	4b35      	ldr	r3, [pc, #212]	; (800247c <MadgwickAHRSupdate+0x1370>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	4b34      	ldr	r3, [pc, #208]	; (800247c <MadgwickAHRSupdate+0x1370>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4619      	mov	r1, r3
 80023b0:	4610      	mov	r0, r2
 80023b2:	f7fe fcbf 	bl	8000d34 <__aeabi_fmul>
 80023b6:	4603      	mov	r3, r0
 80023b8:	461c      	mov	r4, r3
 80023ba:	4b31      	ldr	r3, [pc, #196]	; (8002480 <MadgwickAHRSupdate+0x1374>)
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	4b30      	ldr	r3, [pc, #192]	; (8002480 <MadgwickAHRSupdate+0x1374>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4619      	mov	r1, r3
 80023c4:	4610      	mov	r0, r2
 80023c6:	f7fe fcb5 	bl	8000d34 <__aeabi_fmul>
 80023ca:	4603      	mov	r3, r0
 80023cc:	4619      	mov	r1, r3
 80023ce:	4620      	mov	r0, r4
 80023d0:	f7fe fba8 	bl	8000b24 <__addsf3>
 80023d4:	4603      	mov	r3, r0
 80023d6:	461c      	mov	r4, r3
 80023d8:	4b2a      	ldr	r3, [pc, #168]	; (8002484 <MadgwickAHRSupdate+0x1378>)
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	4b29      	ldr	r3, [pc, #164]	; (8002484 <MadgwickAHRSupdate+0x1378>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4619      	mov	r1, r3
 80023e2:	4610      	mov	r0, r2
 80023e4:	f7fe fca6 	bl	8000d34 <__aeabi_fmul>
 80023e8:	4603      	mov	r3, r0
 80023ea:	4619      	mov	r1, r3
 80023ec:	4620      	mov	r0, r4
 80023ee:	f7fe fb99 	bl	8000b24 <__addsf3>
 80023f2:	4603      	mov	r3, r0
 80023f4:	461c      	mov	r4, r3
 80023f6:	4b24      	ldr	r3, [pc, #144]	; (8002488 <MadgwickAHRSupdate+0x137c>)
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	4b23      	ldr	r3, [pc, #140]	; (8002488 <MadgwickAHRSupdate+0x137c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4619      	mov	r1, r3
 8002400:	4610      	mov	r0, r2
 8002402:	f7fe fc97 	bl	8000d34 <__aeabi_fmul>
 8002406:	4603      	mov	r3, r0
 8002408:	4619      	mov	r1, r3
 800240a:	4620      	mov	r0, r4
 800240c:	f7fe fb8a 	bl	8000b24 <__addsf3>
 8002410:	4603      	mov	r3, r0
 8002412:	4618      	mov	r0, r3
 8002414:	f000 fc16 	bl	8002c44 <invSqrt>
 8002418:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	q0 *= recipNorm;
 800241c:	4b17      	ldr	r3, [pc, #92]	; (800247c <MadgwickAHRSupdate+0x1370>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe fc85 	bl	8000d34 <__aeabi_fmul>
 800242a:	4603      	mov	r3, r0
 800242c:	461a      	mov	r2, r3
 800242e:	4b13      	ldr	r3, [pc, #76]	; (800247c <MadgwickAHRSupdate+0x1370>)
 8002430:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 8002432:	4b13      	ldr	r3, [pc, #76]	; (8002480 <MadgwickAHRSupdate+0x1374>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe fc7a 	bl	8000d34 <__aeabi_fmul>
 8002440:	4603      	mov	r3, r0
 8002442:	461a      	mov	r2, r3
 8002444:	4b0e      	ldr	r3, [pc, #56]	; (8002480 <MadgwickAHRSupdate+0x1374>)
 8002446:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 8002448:	4b0e      	ldr	r3, [pc, #56]	; (8002484 <MadgwickAHRSupdate+0x1378>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe fc6f 	bl	8000d34 <__aeabi_fmul>
 8002456:	4603      	mov	r3, r0
 8002458:	461a      	mov	r2, r3
 800245a:	4b0a      	ldr	r3, [pc, #40]	; (8002484 <MadgwickAHRSupdate+0x1378>)
 800245c:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 800245e:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <MadgwickAHRSupdate+0x137c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe fc64 	bl	8000d34 <__aeabi_fmul>
 800246c:	4603      	mov	r3, r0
 800246e:	461a      	mov	r2, r3
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <MadgwickAHRSupdate+0x137c>)
 8002472:	601a      	str	r2, [r3, #0]
}
 8002474:	37a4      	adds	r7, #164	; 0xa4
 8002476:	46bd      	mov	sp, r7
 8002478:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247a:	bf00      	nop
 800247c:	20000000 	.word	0x20000000
 8002480:	200000d4 	.word	0x200000d4
 8002484:	200000d8 	.word	0x200000d8
 8002488:	200000dc 	.word	0x200000dc

0800248c <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float beta, float gx, float gy, float gz, float ax, float ay, float az, float dt) {
 800248c:	b590      	push	{r4, r7, lr}
 800248e:	b09d      	sub	sp, #116	; 0x74
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
 8002498:	603b      	str	r3, [r7, #0]

	float sampleFreq = 1 /dt;
 800249a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800249e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80024a2:	f7fe fcfb 	bl	8000e9c <__aeabi_fdiv>
 80024a6:	4603      	mov	r3, r0
 80024a8:	65fb      	str	r3, [r7, #92]	; 0x5c
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80024aa:	4ba5      	ldr	r3, [pc, #660]	; (8002740 <MadgwickAHRSupdateIMU+0x2b4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80024b2:	68b9      	ldr	r1, [r7, #8]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fc3d 	bl	8000d34 <__aeabi_fmul>
 80024ba:	4603      	mov	r3, r0
 80024bc:	461c      	mov	r4, r3
 80024be:	4ba1      	ldr	r3, [pc, #644]	; (8002744 <MadgwickAHRSupdateIMU+0x2b8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe fc35 	bl	8000d34 <__aeabi_fmul>
 80024ca:	4603      	mov	r3, r0
 80024cc:	4619      	mov	r1, r3
 80024ce:	4620      	mov	r0, r4
 80024d0:	f7fe fb26 	bl	8000b20 <__aeabi_fsub>
 80024d4:	4603      	mov	r3, r0
 80024d6:	461c      	mov	r4, r3
 80024d8:	4b9b      	ldr	r3, [pc, #620]	; (8002748 <MadgwickAHRSupdateIMU+0x2bc>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	6839      	ldr	r1, [r7, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe fc28 	bl	8000d34 <__aeabi_fmul>
 80024e4:	4603      	mov	r3, r0
 80024e6:	4619      	mov	r1, r3
 80024e8:	4620      	mov	r0, r4
 80024ea:	f7fe fb19 	bl	8000b20 <__aeabi_fsub>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe fc1d 	bl	8000d34 <__aeabi_fmul>
 80024fa:	4603      	mov	r3, r0
 80024fc:	66fb      	str	r3, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80024fe:	4b93      	ldr	r3, [pc, #588]	; (800274c <MadgwickAHRSupdateIMU+0x2c0>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68b9      	ldr	r1, [r7, #8]
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe fc15 	bl	8000d34 <__aeabi_fmul>
 800250a:	4603      	mov	r3, r0
 800250c:	461c      	mov	r4, r3
 800250e:	4b8d      	ldr	r3, [pc, #564]	; (8002744 <MadgwickAHRSupdateIMU+0x2b8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6839      	ldr	r1, [r7, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f7fe fc0d 	bl	8000d34 <__aeabi_fmul>
 800251a:	4603      	mov	r3, r0
 800251c:	4619      	mov	r1, r3
 800251e:	4620      	mov	r0, r4
 8002520:	f7fe fb00 	bl	8000b24 <__addsf3>
 8002524:	4603      	mov	r3, r0
 8002526:	461c      	mov	r4, r3
 8002528:	4b87      	ldr	r3, [pc, #540]	; (8002748 <MadgwickAHRSupdateIMU+0x2bc>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6879      	ldr	r1, [r7, #4]
 800252e:	4618      	mov	r0, r3
 8002530:	f7fe fc00 	bl	8000d34 <__aeabi_fmul>
 8002534:	4603      	mov	r3, r0
 8002536:	4619      	mov	r1, r3
 8002538:	4620      	mov	r0, r4
 800253a:	f7fe faf1 	bl	8000b20 <__aeabi_fsub>
 800253e:	4603      	mov	r3, r0
 8002540:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002544:	4618      	mov	r0, r3
 8002546:	f7fe fbf5 	bl	8000d34 <__aeabi_fmul>
 800254a:	4603      	mov	r3, r0
 800254c:	66bb      	str	r3, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800254e:	4b7f      	ldr	r3, [pc, #508]	; (800274c <MadgwickAHRSupdateIMU+0x2c0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4618      	mov	r0, r3
 8002556:	f7fe fbed 	bl	8000d34 <__aeabi_fmul>
 800255a:	4603      	mov	r3, r0
 800255c:	461c      	mov	r4, r3
 800255e:	4b78      	ldr	r3, [pc, #480]	; (8002740 <MadgwickAHRSupdateIMU+0x2b4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6839      	ldr	r1, [r7, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f7fe fbe5 	bl	8000d34 <__aeabi_fmul>
 800256a:	4603      	mov	r3, r0
 800256c:	4619      	mov	r1, r3
 800256e:	4620      	mov	r0, r4
 8002570:	f7fe fad6 	bl	8000b20 <__aeabi_fsub>
 8002574:	4603      	mov	r3, r0
 8002576:	461c      	mov	r4, r3
 8002578:	4b73      	ldr	r3, [pc, #460]	; (8002748 <MadgwickAHRSupdateIMU+0x2bc>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe fbd8 	bl	8000d34 <__aeabi_fmul>
 8002584:	4603      	mov	r3, r0
 8002586:	4619      	mov	r1, r3
 8002588:	4620      	mov	r0, r4
 800258a:	f7fe facb 	bl	8000b24 <__addsf3>
 800258e:	4603      	mov	r3, r0
 8002590:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002594:	4618      	mov	r0, r3
 8002596:	f7fe fbcd 	bl	8000d34 <__aeabi_fmul>
 800259a:	4603      	mov	r3, r0
 800259c:	667b      	str	r3, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800259e:	4b6b      	ldr	r3, [pc, #428]	; (800274c <MadgwickAHRSupdateIMU+0x2c0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6839      	ldr	r1, [r7, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7fe fbc5 	bl	8000d34 <__aeabi_fmul>
 80025aa:	4603      	mov	r3, r0
 80025ac:	461c      	mov	r4, r3
 80025ae:	4b64      	ldr	r3, [pc, #400]	; (8002740 <MadgwickAHRSupdateIMU+0x2b4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7fe fbbd 	bl	8000d34 <__aeabi_fmul>
 80025ba:	4603      	mov	r3, r0
 80025bc:	4619      	mov	r1, r3
 80025be:	4620      	mov	r0, r4
 80025c0:	f7fe fab0 	bl	8000b24 <__addsf3>
 80025c4:	4603      	mov	r3, r0
 80025c6:	461c      	mov	r4, r3
 80025c8:	4b5e      	ldr	r3, [pc, #376]	; (8002744 <MadgwickAHRSupdateIMU+0x2b8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe fbb0 	bl	8000d34 <__aeabi_fmul>
 80025d4:	4603      	mov	r3, r0
 80025d6:	4619      	mov	r1, r3
 80025d8:	4620      	mov	r0, r4
 80025da:	f7fe faa1 	bl	8000b20 <__aeabi_fsub>
 80025de:	4603      	mov	r3, r0
 80025e0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fe fba5 	bl	8000d34 <__aeabi_fmul>
 80025ea:	4603      	mov	r3, r0
 80025ec:	663b      	str	r3, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80025ee:	f04f 0100 	mov.w	r1, #0
 80025f2:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80025f6:	f7fe fd31 	bl	800105c <__aeabi_fcmpeq>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d012      	beq.n	8002626 <MadgwickAHRSupdateIMU+0x19a>
 8002600:	f04f 0100 	mov.w	r1, #0
 8002604:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002608:	f7fe fd28 	bl	800105c <__aeabi_fcmpeq>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d009      	beq.n	8002626 <MadgwickAHRSupdateIMU+0x19a>
 8002612:	f04f 0100 	mov.w	r1, #0
 8002616:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800261a:	f7fe fd1f 	bl	800105c <__aeabi_fcmpeq>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	f040 8249 	bne.w	8002ab8 <MadgwickAHRSupdateIMU+0x62c>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8002626:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800262a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800262e:	f7fe fb81 	bl	8000d34 <__aeabi_fmul>
 8002632:	4603      	mov	r3, r0
 8002634:	461c      	mov	r4, r3
 8002636:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800263a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800263e:	f7fe fb79 	bl	8000d34 <__aeabi_fmul>
 8002642:	4603      	mov	r3, r0
 8002644:	4619      	mov	r1, r3
 8002646:	4620      	mov	r0, r4
 8002648:	f7fe fa6c 	bl	8000b24 <__addsf3>
 800264c:	4603      	mov	r3, r0
 800264e:	461c      	mov	r4, r3
 8002650:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002654:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002658:	f7fe fb6c 	bl	8000d34 <__aeabi_fmul>
 800265c:	4603      	mov	r3, r0
 800265e:	4619      	mov	r1, r3
 8002660:	4620      	mov	r0, r4
 8002662:	f7fe fa5f 	bl	8000b24 <__addsf3>
 8002666:	4603      	mov	r3, r0
 8002668:	4618      	mov	r0, r3
 800266a:	f000 faeb 	bl	8002c44 <invSqrt>
 800266e:	65b8      	str	r0, [r7, #88]	; 0x58
		ax *= recipNorm;
 8002670:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002672:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002676:	f7fe fb5d 	bl	8000d34 <__aeabi_fmul>
 800267a:	4603      	mov	r3, r0
 800267c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		ay *= recipNorm;
 8002680:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002682:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002686:	f7fe fb55 	bl	8000d34 <__aeabi_fmul>
 800268a:	4603      	mov	r3, r0
 800268c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		az *= recipNorm;   
 8002690:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002692:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002696:	f7fe fb4d 	bl	8000d34 <__aeabi_fmul>
 800269a:	4603      	mov	r3, r0
 800269c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 80026a0:	4b2a      	ldr	r3, [pc, #168]	; (800274c <MadgwickAHRSupdateIMU+0x2c0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4619      	mov	r1, r3
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7fe fa3c 	bl	8000b24 <__addsf3>
 80026ac:	4603      	mov	r3, r0
 80026ae:	657b      	str	r3, [r7, #84]	; 0x54
		_2q1 = 2.0f * q1;
 80026b0:	4b23      	ldr	r3, [pc, #140]	; (8002740 <MadgwickAHRSupdateIMU+0x2b4>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4619      	mov	r1, r3
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7fe fa34 	bl	8000b24 <__addsf3>
 80026bc:	4603      	mov	r3, r0
 80026be:	653b      	str	r3, [r7, #80]	; 0x50
		_2q2 = 2.0f * q2;
 80026c0:	4b20      	ldr	r3, [pc, #128]	; (8002744 <MadgwickAHRSupdateIMU+0x2b8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4619      	mov	r1, r3
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7fe fa2c 	bl	8000b24 <__addsf3>
 80026cc:	4603      	mov	r3, r0
 80026ce:	64fb      	str	r3, [r7, #76]	; 0x4c
		_2q3 = 2.0f * q3;
 80026d0:	4b1d      	ldr	r3, [pc, #116]	; (8002748 <MadgwickAHRSupdateIMU+0x2bc>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4619      	mov	r1, r3
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fa24 	bl	8000b24 <__addsf3>
 80026dc:	4603      	mov	r3, r0
 80026de:	64bb      	str	r3, [r7, #72]	; 0x48
		_4q0 = 4.0f * q0;
 80026e0:	4b1a      	ldr	r3, [pc, #104]	; (800274c <MadgwickAHRSupdateIMU+0x2c0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe fb23 	bl	8000d34 <__aeabi_fmul>
 80026ee:	4603      	mov	r3, r0
 80026f0:	647b      	str	r3, [r7, #68]	; 0x44
		_4q1 = 4.0f * q1;
 80026f2:	4b13      	ldr	r3, [pc, #76]	; (8002740 <MadgwickAHRSupdateIMU+0x2b4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fe fb1a 	bl	8000d34 <__aeabi_fmul>
 8002700:	4603      	mov	r3, r0
 8002702:	643b      	str	r3, [r7, #64]	; 0x40
		_4q2 = 4.0f * q2;
 8002704:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <MadgwickAHRSupdateIMU+0x2b8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe fb11 	bl	8000d34 <__aeabi_fmul>
 8002712:	4603      	mov	r3, r0
 8002714:	63fb      	str	r3, [r7, #60]	; 0x3c
		_8q1 = 8.0f * q1;
 8002716:	4b0a      	ldr	r3, [pc, #40]	; (8002740 <MadgwickAHRSupdateIMU+0x2b4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800271e:	4618      	mov	r0, r3
 8002720:	f7fe fb08 	bl	8000d34 <__aeabi_fmul>
 8002724:	4603      	mov	r3, r0
 8002726:	63bb      	str	r3, [r7, #56]	; 0x38
		_8q2 = 8.0f * q2;
 8002728:	4b06      	ldr	r3, [pc, #24]	; (8002744 <MadgwickAHRSupdateIMU+0x2b8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 8002730:	4618      	mov	r0, r3
 8002732:	f7fe faff 	bl	8000d34 <__aeabi_fmul>
 8002736:	4603      	mov	r3, r0
 8002738:	637b      	str	r3, [r7, #52]	; 0x34
		q0q0 = q0 * q0;
 800273a:	4b04      	ldr	r3, [pc, #16]	; (800274c <MadgwickAHRSupdateIMU+0x2c0>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	e007      	b.n	8002750 <MadgwickAHRSupdateIMU+0x2c4>
 8002740:	200000d4 	.word	0x200000d4
 8002744:	200000d8 	.word	0x200000d8
 8002748:	200000dc 	.word	0x200000dc
 800274c:	20000000 	.word	0x20000000
 8002750:	4b9f      	ldr	r3, [pc, #636]	; (80029d0 <MadgwickAHRSupdateIMU+0x544>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4619      	mov	r1, r3
 8002756:	4610      	mov	r0, r2
 8002758:	f7fe faec 	bl	8000d34 <__aeabi_fmul>
 800275c:	4603      	mov	r3, r0
 800275e:	633b      	str	r3, [r7, #48]	; 0x30
		q1q1 = q1 * q1;
 8002760:	4b9c      	ldr	r3, [pc, #624]	; (80029d4 <MadgwickAHRSupdateIMU+0x548>)
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	4b9b      	ldr	r3, [pc, #620]	; (80029d4 <MadgwickAHRSupdateIMU+0x548>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4619      	mov	r1, r3
 800276a:	4610      	mov	r0, r2
 800276c:	f7fe fae2 	bl	8000d34 <__aeabi_fmul>
 8002770:	4603      	mov	r3, r0
 8002772:	62fb      	str	r3, [r7, #44]	; 0x2c
		q2q2 = q2 * q2;
 8002774:	4b98      	ldr	r3, [pc, #608]	; (80029d8 <MadgwickAHRSupdateIMU+0x54c>)
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	4b97      	ldr	r3, [pc, #604]	; (80029d8 <MadgwickAHRSupdateIMU+0x54c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4619      	mov	r1, r3
 800277e:	4610      	mov	r0, r2
 8002780:	f7fe fad8 	bl	8000d34 <__aeabi_fmul>
 8002784:	4603      	mov	r3, r0
 8002786:	62bb      	str	r3, [r7, #40]	; 0x28
		q3q3 = q3 * q3;
 8002788:	4b94      	ldr	r3, [pc, #592]	; (80029dc <MadgwickAHRSupdateIMU+0x550>)
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b93      	ldr	r3, [pc, #588]	; (80029dc <MadgwickAHRSupdateIMU+0x550>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4619      	mov	r1, r3
 8002792:	4610      	mov	r0, r2
 8002794:	f7fe face 	bl	8000d34 <__aeabi_fmul>
 8002798:	4603      	mov	r3, r0
 800279a:	627b      	str	r3, [r7, #36]	; 0x24

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 800279c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800279e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80027a0:	f7fe fac8 	bl	8000d34 <__aeabi_fmul>
 80027a4:	4603      	mov	r3, r0
 80027a6:	461c      	mov	r4, r3
 80027a8:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80027ac:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80027ae:	f7fe fac1 	bl	8000d34 <__aeabi_fmul>
 80027b2:	4603      	mov	r3, r0
 80027b4:	4619      	mov	r1, r3
 80027b6:	4620      	mov	r0, r4
 80027b8:	f7fe f9b4 	bl	8000b24 <__addsf3>
 80027bc:	4603      	mov	r3, r0
 80027be:	461c      	mov	r4, r3
 80027c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80027c4:	f7fe fab6 	bl	8000d34 <__aeabi_fmul>
 80027c8:	4603      	mov	r3, r0
 80027ca:	4619      	mov	r1, r3
 80027cc:	4620      	mov	r0, r4
 80027ce:	f7fe f9a9 	bl	8000b24 <__addsf3>
 80027d2:	4603      	mov	r3, r0
 80027d4:	461c      	mov	r4, r3
 80027d6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80027da:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80027dc:	f7fe faaa 	bl	8000d34 <__aeabi_fmul>
 80027e0:	4603      	mov	r3, r0
 80027e2:	4619      	mov	r1, r3
 80027e4:	4620      	mov	r0, r4
 80027e6:	f7fe f99b 	bl	8000b20 <__aeabi_fsub>
 80027ea:	4603      	mov	r3, r0
 80027ec:	623b      	str	r3, [r7, #32]
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80027ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027f0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80027f2:	f7fe fa9f 	bl	8000d34 <__aeabi_fmul>
 80027f6:	4603      	mov	r3, r0
 80027f8:	461c      	mov	r4, r3
 80027fa:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80027fe:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002800:	f7fe fa98 	bl	8000d34 <__aeabi_fmul>
 8002804:	4603      	mov	r3, r0
 8002806:	4619      	mov	r1, r3
 8002808:	4620      	mov	r0, r4
 800280a:	f7fe f989 	bl	8000b20 <__aeabi_fsub>
 800280e:	4603      	mov	r3, r0
 8002810:	461c      	mov	r4, r3
 8002812:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002816:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002818:	f7fe fa8c 	bl	8000d34 <__aeabi_fmul>
 800281c:	4603      	mov	r3, r0
 800281e:	461a      	mov	r2, r3
 8002820:	4b6c      	ldr	r3, [pc, #432]	; (80029d4 <MadgwickAHRSupdateIMU+0x548>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4619      	mov	r1, r3
 8002826:	4610      	mov	r0, r2
 8002828:	f7fe fa84 	bl	8000d34 <__aeabi_fmul>
 800282c:	4603      	mov	r3, r0
 800282e:	4619      	mov	r1, r3
 8002830:	4620      	mov	r0, r4
 8002832:	f7fe f977 	bl	8000b24 <__addsf3>
 8002836:	4603      	mov	r3, r0
 8002838:	461c      	mov	r4, r3
 800283a:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800283e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002840:	f7fe fa78 	bl	8000d34 <__aeabi_fmul>
 8002844:	4603      	mov	r3, r0
 8002846:	4619      	mov	r1, r3
 8002848:	4620      	mov	r0, r4
 800284a:	f7fe f969 	bl	8000b20 <__aeabi_fsub>
 800284e:	4603      	mov	r3, r0
 8002850:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe f964 	bl	8000b20 <__aeabi_fsub>
 8002858:	4603      	mov	r3, r0
 800285a:	461c      	mov	r4, r3
 800285c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800285e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002860:	f7fe fa68 	bl	8000d34 <__aeabi_fmul>
 8002864:	4603      	mov	r3, r0
 8002866:	4619      	mov	r1, r3
 8002868:	4620      	mov	r0, r4
 800286a:	f7fe f95b 	bl	8000b24 <__addsf3>
 800286e:	4603      	mov	r3, r0
 8002870:	461c      	mov	r4, r3
 8002872:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002874:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002876:	f7fe fa5d 	bl	8000d34 <__aeabi_fmul>
 800287a:	4603      	mov	r3, r0
 800287c:	4619      	mov	r1, r3
 800287e:	4620      	mov	r0, r4
 8002880:	f7fe f950 	bl	8000b24 <__addsf3>
 8002884:	4603      	mov	r3, r0
 8002886:	461c      	mov	r4, r3
 8002888:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800288c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800288e:	f7fe fa51 	bl	8000d34 <__aeabi_fmul>
 8002892:	4603      	mov	r3, r0
 8002894:	4619      	mov	r1, r3
 8002896:	4620      	mov	r0, r4
 8002898:	f7fe f944 	bl	8000b24 <__addsf3>
 800289c:	4603      	mov	r3, r0
 800289e:	61fb      	str	r3, [r7, #28]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80028a0:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80028a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028a6:	f7fe fa45 	bl	8000d34 <__aeabi_fmul>
 80028aa:	4603      	mov	r3, r0
 80028ac:	461a      	mov	r2, r3
 80028ae:	4b4a      	ldr	r3, [pc, #296]	; (80029d8 <MadgwickAHRSupdateIMU+0x54c>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4619      	mov	r1, r3
 80028b4:	4610      	mov	r0, r2
 80028b6:	f7fe fa3d 	bl	8000d34 <__aeabi_fmul>
 80028ba:	4603      	mov	r3, r0
 80028bc:	461c      	mov	r4, r3
 80028be:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80028c2:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80028c4:	f7fe fa36 	bl	8000d34 <__aeabi_fmul>
 80028c8:	4603      	mov	r3, r0
 80028ca:	4619      	mov	r1, r3
 80028cc:	4620      	mov	r0, r4
 80028ce:	f7fe f929 	bl	8000b24 <__addsf3>
 80028d2:	4603      	mov	r3, r0
 80028d4:	461c      	mov	r4, r3
 80028d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80028da:	f7fe fa2b 	bl	8000d34 <__aeabi_fmul>
 80028de:	4603      	mov	r3, r0
 80028e0:	4619      	mov	r1, r3
 80028e2:	4620      	mov	r0, r4
 80028e4:	f7fe f91e 	bl	8000b24 <__addsf3>
 80028e8:	4603      	mov	r3, r0
 80028ea:	461c      	mov	r4, r3
 80028ec:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80028f0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80028f2:	f7fe fa1f 	bl	8000d34 <__aeabi_fmul>
 80028f6:	4603      	mov	r3, r0
 80028f8:	4619      	mov	r1, r3
 80028fa:	4620      	mov	r0, r4
 80028fc:	f7fe f910 	bl	8000b20 <__aeabi_fsub>
 8002900:	4603      	mov	r3, r0
 8002902:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002904:	4618      	mov	r0, r3
 8002906:	f7fe f90b 	bl	8000b20 <__aeabi_fsub>
 800290a:	4603      	mov	r3, r0
 800290c:	461c      	mov	r4, r3
 800290e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002910:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002912:	f7fe fa0f 	bl	8000d34 <__aeabi_fmul>
 8002916:	4603      	mov	r3, r0
 8002918:	4619      	mov	r1, r3
 800291a:	4620      	mov	r0, r4
 800291c:	f7fe f902 	bl	8000b24 <__addsf3>
 8002920:	4603      	mov	r3, r0
 8002922:	461c      	mov	r4, r3
 8002924:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002926:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002928:	f7fe fa04 	bl	8000d34 <__aeabi_fmul>
 800292c:	4603      	mov	r3, r0
 800292e:	4619      	mov	r1, r3
 8002930:	4620      	mov	r0, r4
 8002932:	f7fe f8f7 	bl	8000b24 <__addsf3>
 8002936:	4603      	mov	r3, r0
 8002938:	461c      	mov	r4, r3
 800293a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800293e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002940:	f7fe f9f8 	bl	8000d34 <__aeabi_fmul>
 8002944:	4603      	mov	r3, r0
 8002946:	4619      	mov	r1, r3
 8002948:	4620      	mov	r0, r4
 800294a:	f7fe f8eb 	bl	8000b24 <__addsf3>
 800294e:	4603      	mov	r3, r0
 8002950:	61bb      	str	r3, [r7, #24]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 8002952:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002956:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002958:	f7fe f9ec 	bl	8000d34 <__aeabi_fmul>
 800295c:	4603      	mov	r3, r0
 800295e:	461a      	mov	r2, r3
 8002960:	4b1e      	ldr	r3, [pc, #120]	; (80029dc <MadgwickAHRSupdateIMU+0x550>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4619      	mov	r1, r3
 8002966:	4610      	mov	r0, r2
 8002968:	f7fe f9e4 	bl	8000d34 <__aeabi_fmul>
 800296c:	4603      	mov	r3, r0
 800296e:	461c      	mov	r4, r3
 8002970:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002974:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002976:	f7fe f9dd 	bl	8000d34 <__aeabi_fmul>
 800297a:	4603      	mov	r3, r0
 800297c:	4619      	mov	r1, r3
 800297e:	4620      	mov	r0, r4
 8002980:	f7fe f8ce 	bl	8000b20 <__aeabi_fsub>
 8002984:	4603      	mov	r3, r0
 8002986:	461c      	mov	r4, r3
 8002988:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800298c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800298e:	f7fe f9d1 	bl	8000d34 <__aeabi_fmul>
 8002992:	4603      	mov	r3, r0
 8002994:	461a      	mov	r2, r3
 8002996:	4b11      	ldr	r3, [pc, #68]	; (80029dc <MadgwickAHRSupdateIMU+0x550>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4619      	mov	r1, r3
 800299c:	4610      	mov	r0, r2
 800299e:	f7fe f9c9 	bl	8000d34 <__aeabi_fmul>
 80029a2:	4603      	mov	r3, r0
 80029a4:	4619      	mov	r1, r3
 80029a6:	4620      	mov	r0, r4
 80029a8:	f7fe f8bc 	bl	8000b24 <__addsf3>
 80029ac:	4603      	mov	r3, r0
 80029ae:	461c      	mov	r4, r3
 80029b0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80029b4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80029b6:	f7fe f9bd 	bl	8000d34 <__aeabi_fmul>
 80029ba:	4603      	mov	r3, r0
 80029bc:	4619      	mov	r1, r3
 80029be:	4620      	mov	r0, r4
 80029c0:	f7fe f8ae 	bl	8000b20 <__aeabi_fsub>
 80029c4:	4603      	mov	r3, r0
 80029c6:	617b      	str	r3, [r7, #20]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80029c8:	6a39      	ldr	r1, [r7, #32]
 80029ca:	6a38      	ldr	r0, [r7, #32]
 80029cc:	e008      	b.n	80029e0 <MadgwickAHRSupdateIMU+0x554>
 80029ce:	bf00      	nop
 80029d0:	20000000 	.word	0x20000000
 80029d4:	200000d4 	.word	0x200000d4
 80029d8:	200000d8 	.word	0x200000d8
 80029dc:	200000dc 	.word	0x200000dc
 80029e0:	f7fe f9a8 	bl	8000d34 <__aeabi_fmul>
 80029e4:	4603      	mov	r3, r0
 80029e6:	461c      	mov	r4, r3
 80029e8:	69f9      	ldr	r1, [r7, #28]
 80029ea:	69f8      	ldr	r0, [r7, #28]
 80029ec:	f7fe f9a2 	bl	8000d34 <__aeabi_fmul>
 80029f0:	4603      	mov	r3, r0
 80029f2:	4619      	mov	r1, r3
 80029f4:	4620      	mov	r0, r4
 80029f6:	f7fe f895 	bl	8000b24 <__addsf3>
 80029fa:	4603      	mov	r3, r0
 80029fc:	461c      	mov	r4, r3
 80029fe:	69b9      	ldr	r1, [r7, #24]
 8002a00:	69b8      	ldr	r0, [r7, #24]
 8002a02:	f7fe f997 	bl	8000d34 <__aeabi_fmul>
 8002a06:	4603      	mov	r3, r0
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4620      	mov	r0, r4
 8002a0c:	f7fe f88a 	bl	8000b24 <__addsf3>
 8002a10:	4603      	mov	r3, r0
 8002a12:	461c      	mov	r4, r3
 8002a14:	6979      	ldr	r1, [r7, #20]
 8002a16:	6978      	ldr	r0, [r7, #20]
 8002a18:	f7fe f98c 	bl	8000d34 <__aeabi_fmul>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4620      	mov	r0, r4
 8002a22:	f7fe f87f 	bl	8000b24 <__addsf3>
 8002a26:	4603      	mov	r3, r0
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f000 f90b 	bl	8002c44 <invSqrt>
 8002a2e:	65b8      	str	r0, [r7, #88]	; 0x58
		s0 *= recipNorm;
 8002a30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002a32:	6a38      	ldr	r0, [r7, #32]
 8002a34:	f7fe f97e 	bl	8000d34 <__aeabi_fmul>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	623b      	str	r3, [r7, #32]
		s1 *= recipNorm;
 8002a3c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002a3e:	69f8      	ldr	r0, [r7, #28]
 8002a40:	f7fe f978 	bl	8000d34 <__aeabi_fmul>
 8002a44:	4603      	mov	r3, r0
 8002a46:	61fb      	str	r3, [r7, #28]
		s2 *= recipNorm;
 8002a48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002a4a:	69b8      	ldr	r0, [r7, #24]
 8002a4c:	f7fe f972 	bl	8000d34 <__aeabi_fmul>
 8002a50:	4603      	mov	r3, r0
 8002a52:	61bb      	str	r3, [r7, #24]
		s3 *= recipNorm;
 8002a54:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002a56:	6978      	ldr	r0, [r7, #20]
 8002a58:	f7fe f96c 	bl	8000d34 <__aeabi_fmul>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	617b      	str	r3, [r7, #20]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002a60:	6a39      	ldr	r1, [r7, #32]
 8002a62:	68f8      	ldr	r0, [r7, #12]
 8002a64:	f7fe f966 	bl	8000d34 <__aeabi_fmul>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002a6e:	f7fe f857 	bl	8000b20 <__aeabi_fsub>
 8002a72:	4603      	mov	r3, r0
 8002a74:	66fb      	str	r3, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 8002a76:	69f9      	ldr	r1, [r7, #28]
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f7fe f95b 	bl	8000d34 <__aeabi_fmul>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	4619      	mov	r1, r3
 8002a82:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002a84:	f7fe f84c 	bl	8000b20 <__aeabi_fsub>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	66bb      	str	r3, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 8002a8c:	69b9      	ldr	r1, [r7, #24]
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f7fe f950 	bl	8000d34 <__aeabi_fmul>
 8002a94:	4603      	mov	r3, r0
 8002a96:	4619      	mov	r1, r3
 8002a98:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002a9a:	f7fe f841 	bl	8000b20 <__aeabi_fsub>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	667b      	str	r3, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 8002aa2:	6979      	ldr	r1, [r7, #20]
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f7fe f945 	bl	8000d34 <__aeabi_fmul>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	4619      	mov	r1, r3
 8002aae:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002ab0:	f7fe f836 	bl	8000b20 <__aeabi_fsub>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	663b      	str	r3, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8002ab8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002aba:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002abe:	f7fe f9ed 	bl	8000e9c <__aeabi_fdiv>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7fe f934 	bl	8000d34 <__aeabi_fmul>
 8002acc:	4603      	mov	r3, r0
 8002ace:	461a      	mov	r2, r3
 8002ad0:	4b58      	ldr	r3, [pc, #352]	; (8002c34 <MadgwickAHRSupdateIMU+0x7a8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	f7fe f824 	bl	8000b24 <__addsf3>
 8002adc:	4603      	mov	r3, r0
 8002ade:	461a      	mov	r2, r3
 8002ae0:	4b54      	ldr	r3, [pc, #336]	; (8002c34 <MadgwickAHRSupdateIMU+0x7a8>)
 8002ae2:	601a      	str	r2, [r3, #0]
	q1 += qDot2 * (1.0f / sampleFreq);
 8002ae4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002ae6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002aea:	f7fe f9d7 	bl	8000e9c <__aeabi_fdiv>
 8002aee:	4603      	mov	r3, r0
 8002af0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fe f91e 	bl	8000d34 <__aeabi_fmul>
 8002af8:	4603      	mov	r3, r0
 8002afa:	461a      	mov	r2, r3
 8002afc:	4b4e      	ldr	r3, [pc, #312]	; (8002c38 <MadgwickAHRSupdateIMU+0x7ac>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4619      	mov	r1, r3
 8002b02:	4610      	mov	r0, r2
 8002b04:	f7fe f80e 	bl	8000b24 <__addsf3>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4b4a      	ldr	r3, [pc, #296]	; (8002c38 <MadgwickAHRSupdateIMU+0x7ac>)
 8002b0e:	601a      	str	r2, [r3, #0]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002b10:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002b12:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002b16:	f7fe f9c1 	bl	8000e9c <__aeabi_fdiv>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fe f908 	bl	8000d34 <__aeabi_fmul>
 8002b24:	4603      	mov	r3, r0
 8002b26:	461a      	mov	r2, r3
 8002b28:	4b44      	ldr	r3, [pc, #272]	; (8002c3c <MadgwickAHRSupdateIMU+0x7b0>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4610      	mov	r0, r2
 8002b30:	f7fd fff8 	bl	8000b24 <__addsf3>
 8002b34:	4603      	mov	r3, r0
 8002b36:	461a      	mov	r2, r3
 8002b38:	4b40      	ldr	r3, [pc, #256]	; (8002c3c <MadgwickAHRSupdateIMU+0x7b0>)
 8002b3a:	601a      	str	r2, [r3, #0]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002b3c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002b3e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002b42:	f7fe f9ab 	bl	8000e9c <__aeabi_fdiv>
 8002b46:	4603      	mov	r3, r0
 8002b48:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe f8f2 	bl	8000d34 <__aeabi_fmul>
 8002b50:	4603      	mov	r3, r0
 8002b52:	461a      	mov	r2, r3
 8002b54:	4b3a      	ldr	r3, [pc, #232]	; (8002c40 <MadgwickAHRSupdateIMU+0x7b4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	f7fd ffe2 	bl	8000b24 <__addsf3>
 8002b60:	4603      	mov	r3, r0
 8002b62:	461a      	mov	r2, r3
 8002b64:	4b36      	ldr	r3, [pc, #216]	; (8002c40 <MadgwickAHRSupdateIMU+0x7b4>)
 8002b66:	601a      	str	r2, [r3, #0]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002b68:	4b32      	ldr	r3, [pc, #200]	; (8002c34 <MadgwickAHRSupdateIMU+0x7a8>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	4b31      	ldr	r3, [pc, #196]	; (8002c34 <MadgwickAHRSupdateIMU+0x7a8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4619      	mov	r1, r3
 8002b72:	4610      	mov	r0, r2
 8002b74:	f7fe f8de 	bl	8000d34 <__aeabi_fmul>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	461c      	mov	r4, r3
 8002b7c:	4b2e      	ldr	r3, [pc, #184]	; (8002c38 <MadgwickAHRSupdateIMU+0x7ac>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	4b2d      	ldr	r3, [pc, #180]	; (8002c38 <MadgwickAHRSupdateIMU+0x7ac>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4619      	mov	r1, r3
 8002b86:	4610      	mov	r0, r2
 8002b88:	f7fe f8d4 	bl	8000d34 <__aeabi_fmul>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4620      	mov	r0, r4
 8002b92:	f7fd ffc7 	bl	8000b24 <__addsf3>
 8002b96:	4603      	mov	r3, r0
 8002b98:	461c      	mov	r4, r3
 8002b9a:	4b28      	ldr	r3, [pc, #160]	; (8002c3c <MadgwickAHRSupdateIMU+0x7b0>)
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	4b27      	ldr	r3, [pc, #156]	; (8002c3c <MadgwickAHRSupdateIMU+0x7b0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	f7fe f8c5 	bl	8000d34 <__aeabi_fmul>
 8002baa:	4603      	mov	r3, r0
 8002bac:	4619      	mov	r1, r3
 8002bae:	4620      	mov	r0, r4
 8002bb0:	f7fd ffb8 	bl	8000b24 <__addsf3>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	461c      	mov	r4, r3
 8002bb8:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <MadgwickAHRSupdateIMU+0x7b4>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	4b20      	ldr	r3, [pc, #128]	; (8002c40 <MadgwickAHRSupdateIMU+0x7b4>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4610      	mov	r0, r2
 8002bc4:	f7fe f8b6 	bl	8000d34 <__aeabi_fmul>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	4619      	mov	r1, r3
 8002bcc:	4620      	mov	r0, r4
 8002bce:	f7fd ffa9 	bl	8000b24 <__addsf3>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f000 f835 	bl	8002c44 <invSqrt>
 8002bda:	65b8      	str	r0, [r7, #88]	; 0x58
	q0 *= recipNorm;
 8002bdc:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <MadgwickAHRSupdateIMU+0x7a8>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002be2:	4618      	mov	r0, r3
 8002be4:	f7fe f8a6 	bl	8000d34 <__aeabi_fmul>
 8002be8:	4603      	mov	r3, r0
 8002bea:	461a      	mov	r2, r3
 8002bec:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <MadgwickAHRSupdateIMU+0x7a8>)
 8002bee:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 8002bf0:	4b11      	ldr	r3, [pc, #68]	; (8002c38 <MadgwickAHRSupdateIMU+0x7ac>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe f89c 	bl	8000d34 <__aeabi_fmul>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	461a      	mov	r2, r3
 8002c00:	4b0d      	ldr	r3, [pc, #52]	; (8002c38 <MadgwickAHRSupdateIMU+0x7ac>)
 8002c02:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 8002c04:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <MadgwickAHRSupdateIMU+0x7b0>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fe f892 	bl	8000d34 <__aeabi_fmul>
 8002c10:	4603      	mov	r3, r0
 8002c12:	461a      	mov	r2, r3
 8002c14:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <MadgwickAHRSupdateIMU+0x7b0>)
 8002c16:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 8002c18:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <MadgwickAHRSupdateIMU+0x7b4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe f888 	bl	8000d34 <__aeabi_fmul>
 8002c24:	4603      	mov	r3, r0
 8002c26:	461a      	mov	r2, r3
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <MadgwickAHRSupdateIMU+0x7b4>)
 8002c2a:	601a      	str	r2, [r3, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	3774      	adds	r7, #116	; 0x74
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd90      	pop	{r4, r7, pc}
 8002c34:	20000000 	.word	0x20000000
 8002c38:	200000d4 	.word	0x200000d4
 8002c3c:	200000d8 	.word	0x200000d8
 8002c40:	200000dc 	.word	0x200000dc

08002c44 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 8002c4c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7fe f86f 	bl	8000d34 <__aeabi_fmul>
 8002c56:	4603      	mov	r3, r0
 8002c58:	617b      	str	r3, [r7, #20]
	float y = x;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002c5e:	f107 0310 	add.w	r3, r7, #16
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	105a      	asrs	r2, r3, #1
 8002c6a:	4b13      	ldr	r3, [pc, #76]	; (8002cb8 <invSqrt+0x74>)
 8002c6c:	1a9b      	subs	r3, r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002c70:	f107 030c 	add.w	r3, r7, #12
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	6979      	ldr	r1, [r7, #20]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe f859 	bl	8000d34 <__aeabi_fmul>
 8002c82:	4603      	mov	r3, r0
 8002c84:	461a      	mov	r2, r3
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4610      	mov	r0, r2
 8002c8c:	f7fe f852 	bl	8000d34 <__aeabi_fmul>
 8002c90:	4603      	mov	r3, r0
 8002c92:	4619      	mov	r1, r3
 8002c94:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8002c98:	f7fd ff42 	bl	8000b20 <__aeabi_fsub>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	f7fe f845 	bl	8000d34 <__aeabi_fmul>
 8002caa:	4603      	mov	r3, r0
 8002cac:	613b      	str	r3, [r7, #16]
	return y;
 8002cae:	693b      	ldr	r3, [r7, #16]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	5f3759df 	.word	0x5f3759df

08002cbc <CRC8_SingleByte>:
 *      Author: mnowak5
 */

#include "crc.h"

byte CRC8_SingleByte(byte CRC_prev, byte Data) {
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	460a      	mov	r2, r1
 8002cc6:	71fb      	strb	r3, [r7, #7]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	71bb      	strb	r3, [r7, #6]

	CRC_prev ^= Data;
 8002ccc:	79fa      	ldrb	r2, [r7, #7]
 8002cce:	79bb      	ldrb	r3, [r7, #6]
 8002cd0:	4053      	eors	r3, r2
 8002cd2:	71fb      	strb	r3, [r7, #7]

	for(byte Idx = 0; Idx < 8; ++Idx) {
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	73fb      	strb	r3, [r7, #15]
 8002cd8:	e011      	b.n	8002cfe <CRC8_SingleByte+0x42>

		if( (CRC_prev & 0x80) != 0 ) {
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	da07      	bge.n	8002cf2 <CRC8_SingleByte+0x36>

			CRC_prev = (byte)( (CRC_prev << 1) ^ POLYNOMIAL_9 );
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	b25b      	sxtb	r3, r3
 8002ce8:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8002cec:	b25b      	sxtb	r3, r3
 8002cee:	71fb      	strb	r3, [r7, #7]
 8002cf0:	e002      	b.n	8002cf8 <CRC8_SingleByte+0x3c>
		} else {

			CRC_prev = (byte)(CRC_prev << 1);
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	71fb      	strb	r3, [r7, #7]
	for(byte Idx = 0; Idx < 8; ++Idx) {
 8002cf8:	7bfb      	ldrb	r3, [r7, #15]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	73fb      	strb	r3, [r7, #15]
 8002cfe:	7bfb      	ldrb	r3, [r7, #15]
 8002d00:	2b07      	cmp	r3, #7
 8002d02:	d9ea      	bls.n	8002cda <CRC8_SingleByte+0x1e>
		}
	}

	return CRC_prev;
 8002d04:	79fb      	ldrb	r3, [r7, #7]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr

08002d10 <CRC8_DataArray>:

byte CRC8_DataArray(byte *pData, byte Len) {
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	70fb      	strb	r3, [r7, #3]

	byte CRC_final = 0xFF;
 8002d1c:	23ff      	movs	r3, #255	; 0xff
 8002d1e:	73fb      	strb	r3, [r7, #15]

	for(byte Idx = 0; Idx < Len; ++Idx) {
 8002d20:	2300      	movs	r3, #0
 8002d22:	73bb      	strb	r3, [r7, #14]
 8002d24:	e00d      	b.n	8002d42 <CRC8_DataArray+0x32>

		CRC_final = CRC8_SingleByte(CRC_final, pData[Idx]);
 8002d26:	7bbb      	ldrb	r3, [r7, #14]
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	781a      	ldrb	r2, [r3, #0]
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	4611      	mov	r1, r2
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7ff ffc2 	bl	8002cbc <CRC8_SingleByte>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	73fb      	strb	r3, [r7, #15]
	for(byte Idx = 0; Idx < Len; ++Idx) {
 8002d3c:	7bbb      	ldrb	r3, [r7, #14]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	73bb      	strb	r3, [r7, #14]
 8002d42:	7bba      	ldrb	r2, [r7, #14]
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d3ed      	bcc.n	8002d26 <CRC8_DataArray+0x16>
	}

	return CRC_final;
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3710      	adds	r7, #16
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d5a:	4b18      	ldr	r3, [pc, #96]	; (8002dbc <MX_DMA_Init+0x68>)
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	4a17      	ldr	r2, [pc, #92]	; (8002dbc <MX_DMA_Init+0x68>)
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	6153      	str	r3, [r2, #20]
 8002d66:	4b15      	ldr	r3, [pc, #84]	; (8002dbc <MX_DMA_Init+0x68>)
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	607b      	str	r3, [r7, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8002d72:	2200      	movs	r2, #0
 8002d74:	2105      	movs	r1, #5
 8002d76:	200e      	movs	r0, #14
 8002d78:	f003 ff93 	bl	8006ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002d7c:	200e      	movs	r0, #14
 8002d7e:	f003 ffac 	bl	8006cda <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8002d82:	2200      	movs	r2, #0
 8002d84:	2105      	movs	r1, #5
 8002d86:	200f      	movs	r0, #15
 8002d88:	f003 ff8b 	bl	8006ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002d8c:	200f      	movs	r0, #15
 8002d8e:	f003 ffa4 	bl	8006cda <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8002d92:	2200      	movs	r2, #0
 8002d94:	2105      	movs	r1, #5
 8002d96:	2010      	movs	r0, #16
 8002d98:	f003 ff83 	bl	8006ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002d9c:	2010      	movs	r0, #16
 8002d9e:	f003 ff9c 	bl	8006cda <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8002da2:	2200      	movs	r2, #0
 8002da4:	2105      	movs	r1, #5
 8002da6:	2011      	movs	r0, #17
 8002da8:	f003 ff7b 	bl	8006ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002dac:	2011      	movs	r0, #17
 8002dae:	f003 ff94 	bl	8006cda <HAL_NVIC_EnableIRQ>

}
 8002db2:	bf00      	nop
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	40021000 	.word	0x40021000

08002dc0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4a06      	ldr	r2, [pc, #24]	; (8002de8 <vApplicationGetIdleTaskMemory+0x28>)
 8002dd0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	4a05      	ldr	r2, [pc, #20]	; (8002dec <vApplicationGetIdleTaskMemory+0x2c>)
 8002dd6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2280      	movs	r2, #128	; 0x80
 8002ddc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8002dde:	bf00      	nop
 8002de0:	3714      	adds	r7, #20
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bc80      	pop	{r7}
 8002de6:	4770      	bx	lr
 8002de8:	20000184 	.word	0x20000184
 8002dec:	200001d8 	.word	0x200001d8

08002df0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002df0:	b5b0      	push	{r4, r5, r7, lr}
 8002df2:	b08e      	sub	sp, #56	; 0x38
 8002df4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of USART_Task */
  osThreadDef(USART_Task, Start_USART_Task, osPriorityNormal, 0, 512);
 8002df6:	4b14      	ldr	r3, [pc, #80]	; (8002e48 <MX_FREERTOS_Init+0x58>)
 8002df8:	f107 041c 	add.w	r4, r7, #28
 8002dfc:	461d      	mov	r5, r3
 8002dfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USART_TaskHandle = osThreadCreate(osThread(USART_Task), NULL);
 8002e0a:	f107 031c 	add.w	r3, r7, #28
 8002e0e:	2100      	movs	r1, #0
 8002e10:	4618      	mov	r0, r3
 8002e12:	f006 fda3 	bl	800995c <osThreadCreate>
 8002e16:	4602      	mov	r2, r0
 8002e18:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <MX_FREERTOS_Init+0x5c>)
 8002e1a:	601a      	str	r2, [r3, #0]

  /* definition and creation of IMU_Task */
  osThreadDef(IMU_Task, Start_IMU_Task, osPriorityRealtime, 0, 512);
 8002e1c:	4b0c      	ldr	r3, [pc, #48]	; (8002e50 <MX_FREERTOS_Init+0x60>)
 8002e1e:	463c      	mov	r4, r7
 8002e20:	461d      	mov	r5, r3
 8002e22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IMU_TaskHandle = osThreadCreate(osThread(IMU_Task), NULL);
 8002e2e:	463b      	mov	r3, r7
 8002e30:	2100      	movs	r1, #0
 8002e32:	4618      	mov	r0, r3
 8002e34:	f006 fd92 	bl	800995c <osThreadCreate>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <MX_FREERTOS_Init+0x64>)
 8002e3c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002e3e:	bf00      	nop
 8002e40:	3738      	adds	r7, #56	; 0x38
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bdb0      	pop	{r4, r5, r7, pc}
 8002e46:	bf00      	nop
 8002e48:	0800e0b4 	.word	0x0800e0b4
 8002e4c:	20003418 	.word	0x20003418
 8002e50:	0800e0dc 	.word	0x0800e0dc
 8002e54:	20003414 	.word	0x20003414

08002e58 <Start_USART_Task>:
* @brief Function implementing the USART_Task thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USART_Task */
void Start_USART_Task(void const *argument) {
 8002e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e5c:	b0a7      	sub	sp, #156	; 0x9c
 8002e5e:	af16      	add	r7, sp, #88	; 0x58
 8002e60:	63f8      	str	r0, [r7, #60]	; 0x3c
	/* USER CODE BEGIN Start_USART_Task */

	/* Start receiving */
	HAL_UART_Receive_DMA(HC05_handle, Data_from_PC, DATA_FRAME_FROM_PC_SIZE);
 8002e62:	4b35      	ldr	r3, [pc, #212]	; (8002f38 <Start_USART_Task+0xe0>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	220a      	movs	r2, #10
 8002e68:	4934      	ldr	r1, [pc, #208]	; (8002f3c <Start_USART_Task+0xe4>)
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f006 f8e6 	bl	800903c <HAL_UART_Receive_DMA>

	/* Infinite loop */
	for (;;) {

		HC05_Fill_Data_frame_to_PC(&DT_PC, Data_to_PC,
 8002e70:	4b33      	ldr	r3, [pc, #204]	; (8002f40 <Start_USART_Task+0xe8>)
 8002e72:	cb18      	ldmia	r3, {r3, r4}
 8002e74:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8002e78:	4b32      	ldr	r3, [pc, #200]	; (8002f44 <Start_USART_Task+0xec>)
 8002e7a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002e7e:	e9c7 120a 	strd	r1, r2, [r7, #40]	; 0x28
 8002e82:	4b31      	ldr	r3, [pc, #196]	; (8002f48 <Start_USART_Task+0xf0>)
 8002e84:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e88:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8002e8c:	4b2f      	ldr	r3, [pc, #188]	; (8002f4c <Start_USART_Task+0xf4>)
 8002e8e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002e92:	e9c7 4506 	strd	r4, r5, [r7, #24]
 8002e96:	4b2e      	ldr	r3, [pc, #184]	; (8002f50 <Start_USART_Task+0xf8>)
 8002e98:	e9d3 5600 	ldrd	r5, r6, [r3]
 8002e9c:	e9c7 5604 	strd	r5, r6, [r7, #16]
 8002ea0:	4b2c      	ldr	r3, [pc, #176]	; (8002f54 <Start_USART_Task+0xfc>)
 8002ea2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002ea6:	e9c7 8902 	strd	r8, r9, [r7, #8]
 8002eaa:	4b2b      	ldr	r3, [pc, #172]	; (8002f58 <Start_USART_Task+0x100>)
 8002eac:	e9d3 9a00 	ldrd	r9, sl, [r3]
 8002eb0:	e9c7 9a00 	strd	r9, sl, [r7]
 8002eb4:	4b29      	ldr	r3, [pc, #164]	; (8002f5c <Start_USART_Task+0x104>)
 8002eb6:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8002eba:	4b29      	ldr	r3, [pc, #164]	; (8002f60 <Start_USART_Task+0x108>)
 8002ebc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002ec0:	4b28      	ldr	r3, [pc, #160]	; (8002f64 <Start_USART_Task+0x10c>)
 8002ec2:	e9d3 5600 	ldrd	r5, r6, [r3]
 8002ec6:	4b28      	ldr	r3, [pc, #160]	; (8002f68 <Start_USART_Task+0x110>)
 8002ec8:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002ecc:	4b27      	ldr	r3, [pc, #156]	; (8002f6c <Start_USART_Task+0x114>)
 8002ece:	cb18      	ldmia	r3, {r3, r4}
 8002ed0:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
 8002ed4:	e9cd 1212 	strd	r1, r2, [sp, #72]	; 0x48
 8002ed8:	e9cd 5610 	strd	r5, r6, [sp, #64]	; 0x40
 8002edc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8002ee0:	e9cd ab0c 	strd	sl, fp, [sp, #48]	; 0x30
 8002ee4:	e9d7 9a00 	ldrd	r9, sl, [r7]
 8002ee8:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 8002eec:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002ef0:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8002ef4:	e9d7 5604 	ldrd	r5, r6, [r7, #16]
 8002ef8:	e9cd 5606 	strd	r5, r6, [sp, #24]
 8002efc:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8002f00:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002f04:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002f08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f0c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002f10:	e9cd 1200 	strd	r1, r2, [sp]
 8002f14:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f18:	4915      	ldr	r1, [pc, #84]	; (8002f70 <Start_USART_Task+0x118>)
 8002f1a:	4816      	ldr	r0, [pc, #88]	; (8002f74 <Start_USART_Task+0x11c>)
 8002f1c:	f000 fb34 	bl	8003588 <HC05_Fill_Data_frame_to_PC>
									Complementary_q_w, Complementary_q_x, Complementary_q_y, Complementary_q_z,
									Kalman_q_w, Kalman_q_x, Kalman_q_y, Kalman_q_z,
									Madgwick_q_w, Madgwick_q_x, Madgwick_q_y, Madgwick_q_z);

		HAL_UART_Transmit_DMA(HC05_handle, Data_to_PC, DATA_FRAME_TO_PC_SIZE);
 8002f20:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <Start_USART_Task+0xe0>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	221b      	movs	r2, #27
 8002f26:	4912      	ldr	r1, [pc, #72]	; (8002f70 <Start_USART_Task+0x118>)
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f006 f81b 	bl	8008f64 <HAL_UART_Transmit_DMA>

		osDelay(10);
 8002f2e:	200a      	movs	r0, #10
 8002f30:	f006 fd60 	bl	80099f4 <osDelay>
		HC05_Fill_Data_frame_to_PC(&DT_PC, Data_to_PC,
 8002f34:	e79c      	b.n	8002e70 <Start_USART_Task+0x18>
 8002f36:	bf00      	nop
 8002f38:	2000003c 	.word	0x2000003c
 8002f3c:	2000341c 	.word	0x2000341c
 8002f40:	20000008 	.word	0x20000008
 8002f44:	20000130 	.word	0x20000130
 8002f48:	20000138 	.word	0x20000138
 8002f4c:	20000140 	.word	0x20000140
 8002f50:	20000010 	.word	0x20000010
 8002f54:	20000148 	.word	0x20000148
 8002f58:	20000150 	.word	0x20000150
 8002f5c:	20000158 	.word	0x20000158
 8002f60:	20000018 	.word	0x20000018
 8002f64:	20000160 	.word	0x20000160
 8002f68:	20000168 	.word	0x20000168
 8002f6c:	20000170 	.word	0x20000170
 8002f70:	20003428 	.word	0x20003428
 8002f74:	20003444 	.word	0x20003444

08002f78 <Start_IMU_Task>:
* @brief Function implementing the IMU_Task thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_IMU_Task */
void Start_IMU_Task(void const *argument) {
 8002f78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f7c:	f5ad 7d29 	sub.w	sp, sp, #676	; 0x2a4
 8002f80:	af02      	add	r7, sp, #8
 8002f82:	1d3b      	adds	r3, r7, #4
 8002f84:	6018      	str	r0, [r3, #0]
	/* USER CODE BEGIN Start_IMU_Task */

	/* IMU task variables */
	uint8_t mpu9250_correct_init_global = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	f887 3297 	strb.w	r3, [r7, #663]	; 0x297

	struct MPU9250 mpu1;

	uint32_t I_Time_Stop = 0;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
	uint32_t I_Time_Start = 0;
 8002f92:	2300      	movs	r3, #0
 8002f94:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288

	/* IMU task initialization */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002f98:	2120      	movs	r1, #32
 8002f9a:	485c      	ldr	r0, [pc, #368]	; (800310c <Start_IMU_Task+0x194>)
 8002f9c:	f004 fa8e 	bl	80074bc <HAL_GPIO_TogglePin>
	osDelay(100);
 8002fa0:	2064      	movs	r0, #100	; 0x64
 8002fa2:	f006 fd27 	bl	80099f4 <osDelay>

	if (MPU9250_Init(&hi2c1, &mpu1, MPU9250_Device_1, MPU9250_Acce_2G,
 8002fa6:	f107 0108 	add.w	r1, r7, #8
 8002faa:	2303      	movs	r3, #3
 8002fac:	9300      	str	r3, [sp, #0]
 8002fae:	2300      	movs	r3, #0
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	4857      	ldr	r0, [pc, #348]	; (8003110 <Start_IMU_Task+0x198>)
 8002fb4:	f001 f902 	bl	80041bc <MPU9250_Init>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f040 80be 	bne.w	800313c <Start_IMU_Task+0x1c4>
			MPU9250_Gyro_2000s) == MPU9250_Init_OK) {

		//MPU9250_Set_Offsets(&hi2c1, &mpu1, 0,0,0, 0,0,0, 27.5,0.97,0.95, 1.07,1,1);

		MPU9250_Calibration_Acce(&hi2c1, &mpu1);
 8002fc0:	f107 0308 	add.w	r3, r7, #8
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4852      	ldr	r0, [pc, #328]	; (8003110 <Start_IMU_Task+0x198>)
 8002fc8:	f001 fc04 	bl	80047d4 <MPU9250_Calibration_Acce>
		MPU9250_Calibration_Gyro(&hi2c1, &mpu1);
 8002fcc:	f107 0308 	add.w	r3, r7, #8
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	484f      	ldr	r0, [pc, #316]	; (8003110 <Start_IMU_Task+0x198>)
 8002fd4:	f001 fc82 	bl	80048dc <MPU9250_Calibration_Gyro>
		MPU9250_Calibration_Mag(&hi2c1, &mpu1);
 8002fd8:	f107 0308 	add.w	r3, r7, #8
 8002fdc:	4619      	mov	r1, r3
 8002fde:	484c      	ldr	r0, [pc, #304]	; (8003110 <Start_IMU_Task+0x198>)
 8002fe0:	f001 fd02 	bl	80049e8 <MPU9250_Calibration_Mag>

		a_x_offset_global = mpu1.Accelerometer_X_offset, a_y_offset_global = mpu1.Accelerometer_Y_offset, a_z_offset_global = mpu1.Accelerometer_Z_offset;
 8002fe4:	f107 0308 	add.w	r3, r7, #8
 8002fe8:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8002fec:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	4621      	mov	r1, r4
 8002ff4:	f7fd fd40 	bl	8000a78 <__aeabi_d2f>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	4b46      	ldr	r3, [pc, #280]	; (8003114 <Start_IMU_Task+0x19c>)
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	f107 0308 	add.w	r3, r7, #8
 8003002:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8003006:	e9d4 3400 	ldrd	r3, r4, [r4]
 800300a:	4618      	mov	r0, r3
 800300c:	4621      	mov	r1, r4
 800300e:	f7fd fd33 	bl	8000a78 <__aeabi_d2f>
 8003012:	4602      	mov	r2, r0
 8003014:	4b40      	ldr	r3, [pc, #256]	; (8003118 <Start_IMU_Task+0x1a0>)
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	f107 0308 	add.w	r3, r7, #8
 800301c:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8003020:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003024:	4618      	mov	r0, r3
 8003026:	4621      	mov	r1, r4
 8003028:	f7fd fd26 	bl	8000a78 <__aeabi_d2f>
 800302c:	4602      	mov	r2, r0
 800302e:	4b3b      	ldr	r3, [pc, #236]	; (800311c <Start_IMU_Task+0x1a4>)
 8003030:	601a      	str	r2, [r3, #0]
		g_x_offset_global = mpu1.Gyroscope_X_offset, g_y_offset_global = mpu1.Gyroscope_Y_offset, g_z_offset_global = mpu1.Gyroscope_Z_offset;
 8003032:	f107 0308 	add.w	r3, r7, #8
 8003036:	f103 0410 	add.w	r4, r3, #16
 800303a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800303e:	4618      	mov	r0, r3
 8003040:	4621      	mov	r1, r4
 8003042:	f7fd fd19 	bl	8000a78 <__aeabi_d2f>
 8003046:	4602      	mov	r2, r0
 8003048:	4b35      	ldr	r3, [pc, #212]	; (8003120 <Start_IMU_Task+0x1a8>)
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	f107 0308 	add.w	r3, r7, #8
 8003050:	f103 0418 	add.w	r4, r3, #24
 8003054:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003058:	4618      	mov	r0, r3
 800305a:	4621      	mov	r1, r4
 800305c:	f7fd fd0c 	bl	8000a78 <__aeabi_d2f>
 8003060:	4602      	mov	r2, r0
 8003062:	4b30      	ldr	r3, [pc, #192]	; (8003124 <Start_IMU_Task+0x1ac>)
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	f107 0308 	add.w	r3, r7, #8
 800306a:	f103 0420 	add.w	r4, r3, #32
 800306e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003072:	4618      	mov	r0, r3
 8003074:	4621      	mov	r1, r4
 8003076:	f7fd fcff 	bl	8000a78 <__aeabi_d2f>
 800307a:	4602      	mov	r2, r0
 800307c:	4b2a      	ldr	r3, [pc, #168]	; (8003128 <Start_IMU_Task+0x1b0>)
 800307e:	601a      	str	r2, [r3, #0]
		m_x_offset_global = mpu1.Magnetometer_X_offset, m_y_offset_global = mpu1.Magnetometer_Y_offset, m_z_offset_global = mpu1.Magnetometer_Z_offset;
 8003080:	f107 0308 	add.w	r3, r7, #8
 8003084:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8003088:	4a28      	ldr	r2, [pc, #160]	; (800312c <Start_IMU_Task+0x1b4>)
 800308a:	6013      	str	r3, [r2, #0]
 800308c:	f107 0308 	add.w	r3, r7, #8
 8003090:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8003094:	4a26      	ldr	r2, [pc, #152]	; (8003130 <Start_IMU_Task+0x1b8>)
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	f107 0308 	add.w	r3, r7, #8
 800309c:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 80030a0:	4a24      	ldr	r2, [pc, #144]	; (8003134 <Start_IMU_Task+0x1bc>)
 80030a2:	6013      	str	r3, [r2, #0]
		m_x_scale_global = mpu1.Magnetometer_X_scale, m_y_offset_global = mpu1.Magnetometer_Y_scale, m_z_offset_global = mpu1.Magnetometer_Z_scale;
 80030a4:	f107 0308 	add.w	r3, r7, #8
 80030a8:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80030ac:	4a22      	ldr	r2, [pc, #136]	; (8003138 <Start_IMU_Task+0x1c0>)
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	f107 0308 	add.w	r3, r7, #8
 80030b4:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 80030b8:	4a1d      	ldr	r2, [pc, #116]	; (8003130 <Start_IMU_Task+0x1b8>)
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	f107 0308 	add.w	r3, r7, #8
 80030c0:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80030c4:	4a1b      	ldr	r2, [pc, #108]	; (8003134 <Start_IMU_Task+0x1bc>)
 80030c6:	6013      	str	r3, [r2, #0]

		for (int i = 0; i < 3; ++i) {
 80030c8:	2300      	movs	r3, #0
 80030ca:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80030ce:	e014      	b.n	80030fa <Start_IMU_Task+0x182>

			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80030d0:	2201      	movs	r2, #1
 80030d2:	2120      	movs	r1, #32
 80030d4:	480d      	ldr	r0, [pc, #52]	; (800310c <Start_IMU_Task+0x194>)
 80030d6:	f004 f9d9 	bl	800748c <HAL_GPIO_WritePin>
			osDelay(200);
 80030da:	20c8      	movs	r0, #200	; 0xc8
 80030dc:	f006 fc8a 	bl	80099f4 <osDelay>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80030e0:	2200      	movs	r2, #0
 80030e2:	2120      	movs	r1, #32
 80030e4:	4809      	ldr	r0, [pc, #36]	; (800310c <Start_IMU_Task+0x194>)
 80030e6:	f004 f9d1 	bl	800748c <HAL_GPIO_WritePin>
			osDelay(200);
 80030ea:	20c8      	movs	r0, #200	; 0xc8
 80030ec:	f006 fc82 	bl	80099f4 <osDelay>
		for (int i = 0; i < 3; ++i) {
 80030f0:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80030f4:	3301      	adds	r3, #1
 80030f6:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 80030fa:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 80030fe:	2b02      	cmp	r3, #2
 8003100:	dde6      	ble.n	80030d0 <Start_IMU_Task+0x158>
		}

		mpu9250_correct_init_global = 1;
 8003102:	2301      	movs	r3, #1
 8003104:	f887 3297 	strb.w	r3, [r7, #663]	; 0x297
 8003108:	e01b      	b.n	8003142 <Start_IMU_Task+0x1ca>
 800310a:	bf00      	nop
 800310c:	40010800 	.word	0x40010800
 8003110:	2000349c 	.word	0x2000349c
 8003114:	20000104 	.word	0x20000104
 8003118:	20000108 	.word	0x20000108
 800311c:	2000010c 	.word	0x2000010c
 8003120:	20000110 	.word	0x20000110
 8003124:	20000114 	.word	0x20000114
 8003128:	20000118 	.word	0x20000118
 800312c:	2000011c 	.word	0x2000011c
 8003130:	20000120 	.word	0x20000120
 8003134:	20000124 	.word	0x20000124
 8003138:	20000128 	.word	0x20000128
	} else {

		mpu9250_correct_init_global = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	f887 3297 	strb.w	r3, [r7, #663]	; 0x297
	}

	osDelay(100);
 8003142:	2064      	movs	r0, #100	; 0x64
 8003144:	f006 fc56 	bl	80099f4 <osDelay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8003148:	2120      	movs	r1, #32
 800314a:	4883      	ldr	r0, [pc, #524]	; (8003358 <Start_IMU_Task+0x3e0>)
 800314c:	f004 f9b6 	bl	80074bc <HAL_GPIO_TogglePin>
	mpu1.Magnetometer_Yaw_offset = mpu1.Magnetometer_Yaw_offset / 1000;
	*/

	/* Infinite loop */
	for (;;) {
		if (mpu9250_correct_init_global == 1) {
 8003150:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 8003154:	2b01      	cmp	r3, #1
 8003156:	f040 80fb 	bne.w	8003350 <Start_IMU_Task+0x3d8>

			/* Case 1: Time measurement */
			I_Time_Start = I_Time_Stop;
 800315a:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800315e:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
			I_Time_Stop = HAL_GetTick();
 8003162:	f003 fc9b 	bl	8006a9c <HAL_GetTick>
 8003166:	f8c7 0290 	str.w	r0, [r7, #656]	; 0x290

			dt = (double) (I_Time_Stop - I_Time_Start) / 1000;
 800316a:	f8d7 2290 	ldr.w	r2, [r7, #656]	; 0x290
 800316e:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 8003172:	1ad3      	subs	r3, r2, r3
 8003174:	4618      	mov	r0, r3
 8003176:	f7fd f92d 	bl	80003d4 <__aeabi_ui2d>
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	4b77      	ldr	r3, [pc, #476]	; (800335c <Start_IMU_Task+0x3e4>)
 8003180:	f7fd facc 	bl	800071c <__aeabi_ddiv>
 8003184:	4603      	mov	r3, r0
 8003186:	460c      	mov	r4, r1
 8003188:	4a75      	ldr	r2, [pc, #468]	; (8003360 <Start_IMU_Task+0x3e8>)
 800318a:	e9c2 3400 	strd	r3, r4, [r2]

			/* Case 2: RPY calculation */
			MPU9250_Calculate_RPY(&hi2c1, &mpu1, dt);
 800318e:	4b74      	ldr	r3, [pc, #464]	; (8003360 <Start_IMU_Task+0x3e8>)
 8003190:	cb18      	ldmia	r3, {r3, r4}
 8003192:	f107 0108 	add.w	r1, r7, #8
 8003196:	461a      	mov	r2, r3
 8003198:	4623      	mov	r3, r4
 800319a:	4872      	ldr	r0, [pc, #456]	; (8003364 <Start_IMU_Task+0x3ec>)
 800319c:	f001 fd54 	bl	8004c48 <MPU9250_Calculate_RPY>

			a_x_g_global = mpu1.Accelerometer_X_g, a_y_g_global = mpu1.Accelerometer_Y_g, a_z_g_global = mpu1.Accelerometer_Z_g;
 80031a0:	f107 0308 	add.w	r3, r7, #8
 80031a4:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 80031a8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80031ac:	4618      	mov	r0, r3
 80031ae:	4621      	mov	r1, r4
 80031b0:	f7fd fc62 	bl	8000a78 <__aeabi_d2f>
 80031b4:	4602      	mov	r2, r0
 80031b6:	4b6c      	ldr	r3, [pc, #432]	; (8003368 <Start_IMU_Task+0x3f0>)
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	f107 0308 	add.w	r3, r7, #8
 80031be:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 80031c2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80031c6:	4618      	mov	r0, r3
 80031c8:	4621      	mov	r1, r4
 80031ca:	f7fd fc55 	bl	8000a78 <__aeabi_d2f>
 80031ce:	4602      	mov	r2, r0
 80031d0:	4b66      	ldr	r3, [pc, #408]	; (800336c <Start_IMU_Task+0x3f4>)
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	f107 0308 	add.w	r3, r7, #8
 80031d8:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 80031dc:	e9d4 3400 	ldrd	r3, r4, [r4]
 80031e0:	4618      	mov	r0, r3
 80031e2:	4621      	mov	r1, r4
 80031e4:	f7fd fc48 	bl	8000a78 <__aeabi_d2f>
 80031e8:	4602      	mov	r2, r0
 80031ea:	4b61      	ldr	r3, [pc, #388]	; (8003370 <Start_IMU_Task+0x3f8>)
 80031ec:	601a      	str	r2, [r3, #0]
			g_x_dgs_global = mpu1.Gyroscope_X_dgs, g_y_dgs_global = mpu1.Gyroscope_Y_dgs, g_z_dgs_global = mpu1.Gyroscope_Z_dgs;
 80031ee:	f107 0308 	add.w	r3, r7, #8
 80031f2:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80031f6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80031fa:	4618      	mov	r0, r3
 80031fc:	4621      	mov	r1, r4
 80031fe:	f7fd fc3b 	bl	8000a78 <__aeabi_d2f>
 8003202:	4602      	mov	r2, r0
 8003204:	4b5b      	ldr	r3, [pc, #364]	; (8003374 <Start_IMU_Task+0x3fc>)
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	f107 0308 	add.w	r3, r7, #8
 800320c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8003210:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003214:	4618      	mov	r0, r3
 8003216:	4621      	mov	r1, r4
 8003218:	f7fd fc2e 	bl	8000a78 <__aeabi_d2f>
 800321c:	4602      	mov	r2, r0
 800321e:	4b56      	ldr	r3, [pc, #344]	; (8003378 <Start_IMU_Task+0x400>)
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	f107 0308 	add.w	r3, r7, #8
 8003226:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800322a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800322e:	4618      	mov	r0, r3
 8003230:	4621      	mov	r1, r4
 8003232:	f7fd fc21 	bl	8000a78 <__aeabi_d2f>
 8003236:	4602      	mov	r2, r0
 8003238:	4b50      	ldr	r3, [pc, #320]	; (800337c <Start_IMU_Task+0x404>)
 800323a:	601a      	str	r2, [r3, #0]
			m_x_uT_global = mpu1.Magnetometer_X_uT, m_y_uT_global = mpu1.Magnetometer_Y_uT, m_z_uT_global = mpu1.Magnetometer_Z_uT;
 800323c:	f107 0308 	add.w	r3, r7, #8
 8003240:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8003244:	4a4e      	ldr	r2, [pc, #312]	; (8003380 <Start_IMU_Task+0x408>)
 8003246:	6013      	str	r3, [r2, #0]
 8003248:	f107 0308 	add.w	r3, r7, #8
 800324c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8003250:	4a4c      	ldr	r2, [pc, #304]	; (8003384 <Start_IMU_Task+0x40c>)
 8003252:	6013      	str	r3, [r2, #0]
 8003254:	f107 0308 	add.w	r3, r7, #8
 8003258:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800325c:	4a4a      	ldr	r2, [pc, #296]	; (8003388 <Start_IMU_Task+0x410>)
 800325e:	6013      	str	r3, [r2, #0]
			//a_roll_global = mpu1.Accelerometer_Roll, a_pitch_global = mpu1.Accelerometer_Pitch;
			//g_roll_global = mpu1.Gyroscope_Roll, g_pitch_global = mpu1.Gyroscope_Pitch, g_yaw_global = mpu1.Gyroscope_Yaw;
			//m_yaw_global = mpu1.Magnetometer_Yaw;

			/* Case 3: Filters using */
			Complementary_filter(&mpu1, Filter_weight_RP_global, Filter_weight_Y_global, dt);
 8003260:	4b4a      	ldr	r3, [pc, #296]	; (800338c <Start_IMU_Task+0x414>)
 8003262:	681d      	ldr	r5, [r3, #0]
 8003264:	4b4a      	ldr	r3, [pc, #296]	; (8003390 <Start_IMU_Task+0x418>)
 8003266:	681e      	ldr	r6, [r3, #0]
 8003268:	4b3d      	ldr	r3, [pc, #244]	; (8003360 <Start_IMU_Task+0x3e8>)
 800326a:	cb18      	ldmia	r3, {r3, r4}
 800326c:	4618      	mov	r0, r3
 800326e:	4621      	mov	r1, r4
 8003270:	f7fd fc02 	bl	8000a78 <__aeabi_d2f>
 8003274:	4603      	mov	r3, r0
 8003276:	f107 0008 	add.w	r0, r7, #8
 800327a:	4632      	mov	r2, r6
 800327c:	4629      	mov	r1, r5
 800327e:	f002 fa11 	bl	80056a4 <Complementary_filter>
			Kalman_filter(&mpu1,
 8003282:	4b44      	ldr	r3, [pc, #272]	; (8003394 <Start_IMU_Task+0x41c>)
 8003284:	681e      	ldr	r6, [r3, #0]
 8003286:	4b44      	ldr	r3, [pc, #272]	; (8003398 <Start_IMU_Task+0x420>)
 8003288:	f8d3 8000 	ldr.w	r8, [r3]
 800328c:	4b43      	ldr	r3, [pc, #268]	; (800339c <Start_IMU_Task+0x424>)
 800328e:	f8d3 9000 	ldr.w	r9, [r3]
 8003292:	4b43      	ldr	r3, [pc, #268]	; (80033a0 <Start_IMU_Task+0x428>)
 8003294:	681d      	ldr	r5, [r3, #0]
 8003296:	4b32      	ldr	r3, [pc, #200]	; (8003360 <Start_IMU_Task+0x3e8>)
 8003298:	cb18      	ldmia	r3, {r3, r4}
 800329a:	4618      	mov	r0, r3
 800329c:	4621      	mov	r1, r4
 800329e:	f7fd fbeb 	bl	8000a78 <__aeabi_d2f>
 80032a2:	4603      	mov	r3, r0
 80032a4:	f107 0008 	add.w	r0, r7, #8
 80032a8:	9301      	str	r3, [sp, #4]
 80032aa:	9500      	str	r5, [sp, #0]
 80032ac:	464b      	mov	r3, r9
 80032ae:	4642      	mov	r2, r8
 80032b0:	4631      	mov	r1, r6
 80032b2:	f002 fc1d 	bl	8005af0 <Kalman_filter>
						  Kalman_filter_process_variance_RP, Kalman_filter_measure_variance_RP,
						  Kalman_filter_process_variance_Y, Kalman_filter_measure_variance_Y,
						  dt);
			Madgwick_filter(&mpu1, Madgwick_filter_beta, dt);
 80032b6:	4b3b      	ldr	r3, [pc, #236]	; (80033a4 <Start_IMU_Task+0x42c>)
 80032b8:	681d      	ldr	r5, [r3, #0]
 80032ba:	4b29      	ldr	r3, [pc, #164]	; (8003360 <Start_IMU_Task+0x3e8>)
 80032bc:	cb18      	ldmia	r3, {r3, r4}
 80032be:	4618      	mov	r0, r3
 80032c0:	4621      	mov	r1, r4
 80032c2:	f7fd fbd9 	bl	8000a78 <__aeabi_d2f>
 80032c6:	4602      	mov	r2, r0
 80032c8:	f107 0308 	add.w	r3, r7, #8
 80032cc:	4629      	mov	r1, r5
 80032ce:	4618      	mov	r0, r3
 80032d0:	f002 fc1a 	bl	8005b08 <Madgwick_filter>
			//Kalman_q_w = mpu1.Accelerometer_quaternion.w;
			//Kalman_q_x = mpu1.Accelerometer_quaternion.x;
			//Kalman_q_y = mpu1.Accelerometer_quaternion.y;
			//Kalman_q_z = mpu1.Accelerometer_quaternion.z;

			Kalman_q_w = mpu1.Accelerometer_X_position;
 80032d4:	f107 0308 	add.w	r3, r7, #8
 80032d8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80032dc:	cb18      	ldmia	r3, {r3, r4}
 80032de:	4a32      	ldr	r2, [pc, #200]	; (80033a8 <Start_IMU_Task+0x430>)
 80032e0:	e9c2 3400 	strd	r3, r4, [r2]
			Kalman_q_x = mpu1.Accelerometer_Y_position;
 80032e4:	f107 0308 	add.w	r3, r7, #8
 80032e8:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80032ec:	cb18      	ldmia	r3, {r3, r4}
 80032ee:	4a2f      	ldr	r2, [pc, #188]	; (80033ac <Start_IMU_Task+0x434>)
 80032f0:	e9c2 3400 	strd	r3, r4, [r2]
			Kalman_q_y = mpu1.Accelerometer_Z_position;
 80032f4:	f107 0308 	add.w	r3, r7, #8
 80032f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80032fc:	cb18      	ldmia	r3, {r3, r4}
 80032fe:	4a2c      	ldr	r2, [pc, #176]	; (80033b0 <Start_IMU_Task+0x438>)
 8003300:	e9c2 3400 	strd	r3, r4, [r2]
			Kalman_q_z = 0;
 8003304:	4a2b      	ldr	r2, [pc, #172]	; (80033b4 <Start_IMU_Task+0x43c>)
 8003306:	f04f 0300 	mov.w	r3, #0
 800330a:	f04f 0400 	mov.w	r4, #0
 800330e:	e9c2 3400 	strd	r3, r4, [r2]
			//Madgwick_q_w = mpu1.Magnetometer_quaternion.w;
			//Madgwick_q_x = mpu1.Magnetometer_quaternion.x;
			//Madgwick_q_y = mpu1.Magnetometer_quaternion.y;
			//Madgwick_q_z = mpu1.Magnetometer_quaternion.z;

			Madgwick_q_w = mpu1.Accelerometer_X_velocity;
 8003312:	f107 0308 	add.w	r3, r7, #8
 8003316:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800331a:	cb18      	ldmia	r3, {r3, r4}
 800331c:	4a26      	ldr	r2, [pc, #152]	; (80033b8 <Start_IMU_Task+0x440>)
 800331e:	e9c2 3400 	strd	r3, r4, [r2]
			Madgwick_q_x = mpu1.Accelerometer_Y_velocity;
 8003322:	f107 0308 	add.w	r3, r7, #8
 8003326:	f503 738c 	add.w	r3, r3, #280	; 0x118
 800332a:	cb18      	ldmia	r3, {r3, r4}
 800332c:	4a23      	ldr	r2, [pc, #140]	; (80033bc <Start_IMU_Task+0x444>)
 800332e:	e9c2 3400 	strd	r3, r4, [r2]
			Madgwick_q_y = mpu1.Accelerometer_Z_velocity;
 8003332:	f107 0308 	add.w	r3, r7, #8
 8003336:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800333a:	cb18      	ldmia	r3, {r3, r4}
 800333c:	4a20      	ldr	r2, [pc, #128]	; (80033c0 <Start_IMU_Task+0x448>)
 800333e:	e9c2 3400 	strd	r3, r4, [r2]
			Madgwick_q_z = 0;
 8003342:	4a20      	ldr	r2, [pc, #128]	; (80033c4 <Start_IMU_Task+0x44c>)
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	f04f 0400 	mov.w	r4, #0
 800334c:	e9c2 3400 	strd	r3, r4, [r2]
		}

		osDelay(10);
 8003350:	200a      	movs	r0, #10
 8003352:	f006 fb4f 	bl	80099f4 <osDelay>
		if (mpu9250_correct_init_global == 1) {
 8003356:	e6fb      	b.n	8003150 <Start_IMU_Task+0x1d8>
 8003358:	40010800 	.word	0x40010800
 800335c:	408f4000 	.word	0x408f4000
 8003360:	20000178 	.word	0x20000178
 8003364:	2000349c 	.word	0x2000349c
 8003368:	200000e0 	.word	0x200000e0
 800336c:	200000e4 	.word	0x200000e4
 8003370:	200000e8 	.word	0x200000e8
 8003374:	200000ec 	.word	0x200000ec
 8003378:	200000f0 	.word	0x200000f0
 800337c:	200000f4 	.word	0x200000f4
 8003380:	200000f8 	.word	0x200000f8
 8003384:	200000fc 	.word	0x200000fc
 8003388:	20000100 	.word	0x20000100
 800338c:	20000020 	.word	0x20000020
 8003390:	20000024 	.word	0x20000024
 8003394:	20000028 	.word	0x20000028
 8003398:	2000002c 	.word	0x2000002c
 800339c:	20000030 	.word	0x20000030
 80033a0:	20000034 	.word	0x20000034
 80033a4:	20000038 	.word	0x20000038
 80033a8:	20000010 	.word	0x20000010
 80033ac:	20000148 	.word	0x20000148
 80033b0:	20000150 	.word	0x20000150
 80033b4:	20000158 	.word	0x20000158
 80033b8:	20000018 	.word	0x20000018
 80033bc:	20000160 	.word	0x20000160
 80033c0:	20000168 	.word	0x20000168
 80033c4:	20000170 	.word	0x20000170

080033c8 <HAL_UART_RxCpltCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
     
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART1) {
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a0f      	ldr	r2, [pc, #60]	; (8003414 <HAL_UART_RxCpltCallback+0x4c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d117      	bne.n	800340a <HAL_UART_RxCpltCallback+0x42>

		HAL_UART_Receive_DMA(HC05_handle, Data_from_PC, DATA_FRAME_FROM_PC_SIZE);
 80033da:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <HAL_UART_RxCpltCallback+0x50>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	220a      	movs	r2, #10
 80033e0:	490e      	ldr	r1, [pc, #56]	; (800341c <HAL_UART_RxCpltCallback+0x54>)
 80033e2:	4618      	mov	r0, r3
 80033e4:	f005 fe2a 	bl	800903c <HAL_UART_Receive_DMA>

		if( HC05_Parse_Data_frame(&DF_PC, Data_from_PC) == 0 ) {
 80033e8:	490c      	ldr	r1, [pc, #48]	; (800341c <HAL_UART_RxCpltCallback+0x54>)
 80033ea:	480d      	ldr	r0, [pc, #52]	; (8003420 <HAL_UART_RxCpltCallback+0x58>)
 80033ec:	f000 fb32 	bl	8003a54 <HC05_Parse_Data_frame>
 80033f0:	4603      	mov	r3, r0
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d109      	bne.n	800340a <HAL_UART_RxCpltCallback+0x42>

			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80033f6:	2120      	movs	r1, #32
 80033f8:	480a      	ldr	r0, [pc, #40]	; (8003424 <HAL_UART_RxCpltCallback+0x5c>)
 80033fa:	f004 f85f 	bl	80074bc <HAL_GPIO_TogglePin>
			//Kalman_filter_measure_variance = DF_PC.Kalman_filter_measure_variance;

			//Madgwick_filter_beta           = (float) DF_PC.Madgwick_filter_beta / 1000;

			/* Additional data from PC */
			Which_filter_global = DF_PC.Which_filter;
 80033fe:	4b08      	ldr	r3, [pc, #32]	; (8003420 <HAL_UART_RxCpltCallback+0x58>)
 8003400:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003404:	b2da      	uxtb	r2, r3
 8003406:	4b08      	ldr	r3, [pc, #32]	; (8003428 <HAL_UART_RxCpltCallback+0x60>)
 8003408:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40013800 	.word	0x40013800
 8003418:	2000003c 	.word	0x2000003c
 800341c:	2000341c 	.word	0x2000341c
 8003420:	20003404 	.word	0x20003404
 8003424:	40010800 	.word	0x40010800
 8003428:	20000180 	.word	0x20000180

0800342c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003432:	f107 0310 	add.w	r3, r7, #16
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
 800343a:	605a      	str	r2, [r3, #4]
 800343c:	609a      	str	r2, [r3, #8]
 800343e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003440:	4b2d      	ldr	r3, [pc, #180]	; (80034f8 <MX_GPIO_Init+0xcc>)
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	4a2c      	ldr	r2, [pc, #176]	; (80034f8 <MX_GPIO_Init+0xcc>)
 8003446:	f043 0310 	orr.w	r3, r3, #16
 800344a:	6193      	str	r3, [r2, #24]
 800344c:	4b2a      	ldr	r3, [pc, #168]	; (80034f8 <MX_GPIO_Init+0xcc>)
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003458:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <MX_GPIO_Init+0xcc>)
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	4a26      	ldr	r2, [pc, #152]	; (80034f8 <MX_GPIO_Init+0xcc>)
 800345e:	f043 0320 	orr.w	r3, r3, #32
 8003462:	6193      	str	r3, [r2, #24]
 8003464:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <MX_GPIO_Init+0xcc>)
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	f003 0320 	and.w	r3, r3, #32
 800346c:	60bb      	str	r3, [r7, #8]
 800346e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003470:	4b21      	ldr	r3, [pc, #132]	; (80034f8 <MX_GPIO_Init+0xcc>)
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	4a20      	ldr	r2, [pc, #128]	; (80034f8 <MX_GPIO_Init+0xcc>)
 8003476:	f043 0304 	orr.w	r3, r3, #4
 800347a:	6193      	str	r3, [r2, #24]
 800347c:	4b1e      	ldr	r3, [pc, #120]	; (80034f8 <MX_GPIO_Init+0xcc>)
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	607b      	str	r3, [r7, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003488:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <MX_GPIO_Init+0xcc>)
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	4a1a      	ldr	r2, [pc, #104]	; (80034f8 <MX_GPIO_Init+0xcc>)
 800348e:	f043 0308 	orr.w	r3, r3, #8
 8003492:	6193      	str	r3, [r2, #24]
 8003494:	4b18      	ldr	r3, [pc, #96]	; (80034f8 <MX_GPIO_Init+0xcc>)
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	603b      	str	r3, [r7, #0]
 800349e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80034a0:	2200      	movs	r2, #0
 80034a2:	2120      	movs	r1, #32
 80034a4:	4815      	ldr	r0, [pc, #84]	; (80034fc <MX_GPIO_Init+0xd0>)
 80034a6:	f003 fff1 	bl	800748c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80034aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80034ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034b0:	4b13      	ldr	r3, [pc, #76]	; (8003500 <MX_GPIO_Init+0xd4>)
 80034b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80034b8:	f107 0310 	add.w	r3, r7, #16
 80034bc:	4619      	mov	r1, r3
 80034be:	4811      	ldr	r0, [pc, #68]	; (8003504 <MX_GPIO_Init+0xd8>)
 80034c0:	f003 fe8a 	bl	80071d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80034c4:	2320      	movs	r3, #32
 80034c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034c8:	2301      	movs	r3, #1
 80034ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d0:	2302      	movs	r3, #2
 80034d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80034d4:	f107 0310 	add.w	r3, r7, #16
 80034d8:	4619      	mov	r1, r3
 80034da:	4808      	ldr	r0, [pc, #32]	; (80034fc <MX_GPIO_Init+0xd0>)
 80034dc:	f003 fe7c 	bl	80071d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80034e0:	2200      	movs	r2, #0
 80034e2:	2105      	movs	r1, #5
 80034e4:	2028      	movs	r0, #40	; 0x28
 80034e6:	f003 fbdc 	bl	8006ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80034ea:	2028      	movs	r0, #40	; 0x28
 80034ec:	f003 fbf5 	bl	8006cda <HAL_NVIC_EnableIRQ>

}
 80034f0:	bf00      	nop
 80034f2:	3720      	adds	r7, #32
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40021000 	.word	0x40021000
 80034fc:	40010800 	.word	0x40010800
 8003500:	10110000 	.word	0x10110000
 8003504:	40011000 	.word	0x40011000

08003508 <HC05_Divide_int16>:

#include "hc05.h"

/* --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

uint8_t HC05_Divide_int16(int16_t _data, uint8_t _which_byte) {
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	460a      	mov	r2, r1
 8003512:	80fb      	strh	r3, [r7, #6]
 8003514:	4613      	mov	r3, r2
 8003516:	717b      	strb	r3, [r7, #5]

	if(_which_byte == 'L') {
 8003518:	797b      	ldrb	r3, [r7, #5]
 800351a:	2b4c      	cmp	r3, #76	; 0x4c
 800351c:	d102      	bne.n	8003524 <HC05_Divide_int16+0x1c>

		return (_data & 0xFF); // return lower byte
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	b2db      	uxtb	r3, r3
 8003522:	e009      	b.n	8003538 <HC05_Divide_int16+0x30>
	}
	else if(_which_byte == 'H'){
 8003524:	797b      	ldrb	r3, [r7, #5]
 8003526:	2b48      	cmp	r3, #72	; 0x48
 8003528:	d105      	bne.n	8003536 <HC05_Divide_int16+0x2e>

		return (_data >> 8);   // return higher byte
 800352a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800352e:	121b      	asrs	r3, r3, #8
 8003530:	b21b      	sxth	r3, r3
 8003532:	b2db      	uxtb	r3, r3
 8003534:	e000      	b.n	8003538 <HC05_Divide_int16+0x30>
	}

	return 0;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	bc80      	pop	{r7}
 8003540:	4770      	bx	lr

08003542 <HC05_Merge_bytes>:

/* --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

int16_t HC05_Merge_bytes(uint8_t _lower_byte, uint8_t _higher_byte) {
 8003542:	b480      	push	{r7}
 8003544:	b085      	sub	sp, #20
 8003546:	af00      	add	r7, sp, #0
 8003548:	4603      	mov	r3, r0
 800354a:	460a      	mov	r2, r1
 800354c:	71fb      	strb	r3, [r7, #7]
 800354e:	4613      	mov	r3, r2
 8003550:	71bb      	strb	r3, [r7, #6]

	int16_t uint16t_byte = ( (_higher_byte << 8) + _lower_byte );
 8003552:	79bb      	ldrb	r3, [r7, #6]
 8003554:	b29b      	uxth	r3, r3
 8003556:	021b      	lsls	r3, r3, #8
 8003558:	b29a      	uxth	r2, r3
 800355a:	79fb      	ldrb	r3, [r7, #7]
 800355c:	b29b      	uxth	r3, r3
 800355e:	4413      	add	r3, r2
 8003560:	b29b      	uxth	r3, r3
 8003562:	81fb      	strh	r3, [r7, #14]

	if(uint16t_byte >= 32767) {
 8003564:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003568:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800356c:	4293      	cmp	r3, r2
 800356e:	d104      	bne.n	800357a <HC05_Merge_bytes+0x38>

		int16_t int_byte = uint16t_byte - ( 2 * 32768);
 8003570:	89fb      	ldrh	r3, [r7, #14]
 8003572:	81bb      	strh	r3, [r7, #12]
		return int_byte;
 8003574:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003578:	e001      	b.n	800357e <HC05_Merge_bytes+0x3c>
	}
	else  return uint16t_byte;
 800357a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

	return 0;
}
 800357e:	4618      	mov	r0, r3
 8003580:	3714      	adds	r7, #20
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr

08003588 <HC05_Fill_Data_frame_to_PC>:
/* --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

void HC05_Fill_Data_frame_to_PC(struct Data_frame_to_PC *_data, uint8_t *_frame,
								double Complementary_q_w, double Complementary_q_x, double Complementary_q_y, double Complementary_q_z,
								double Kalman_q_w, 		  double Kalman_q_x, 		double Kalman_q_y, 		  double Kalman_q_z,
								double Madgwick_q_w, 	  double Madgwick_q_x, 		double Madgwick_q_y, 	  double Madgwick_q_z) {
 8003588:	b590      	push	{r4, r7, lr}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	e9c7 2300 	strd	r2, r3, [r7]

	/* Complementary filter data */
	_frame[0] = HC05_Divide_int16(Complementary_q_w * 1000, 'L');
 8003596:	f04f 0200 	mov.w	r2, #0
 800359a:	4bd1      	ldr	r3, [pc, #836]	; (80038e0 <HC05_Fill_Data_frame_to_PC+0x358>)
 800359c:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035a0:	f7fc ff92 	bl	80004c8 <__aeabi_dmul>
 80035a4:	4603      	mov	r3, r0
 80035a6:	460c      	mov	r4, r1
 80035a8:	4618      	mov	r0, r3
 80035aa:	4621      	mov	r1, r4
 80035ac:	f7fd fa3c 	bl	8000a28 <__aeabi_d2iz>
 80035b0:	4603      	mov	r3, r0
 80035b2:	b21b      	sxth	r3, r3
 80035b4:	214c      	movs	r1, #76	; 0x4c
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7ff ffa6 	bl	8003508 <HC05_Divide_int16>
 80035bc:	4603      	mov	r3, r0
 80035be:	461a      	mov	r2, r3
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	701a      	strb	r2, [r3, #0]
	_frame[1] = HC05_Divide_int16(Complementary_q_w * 1000, 'H');
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	4bc5      	ldr	r3, [pc, #788]	; (80038e0 <HC05_Fill_Data_frame_to_PC+0x358>)
 80035ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80035ce:	f7fc ff7b 	bl	80004c8 <__aeabi_dmul>
 80035d2:	4603      	mov	r3, r0
 80035d4:	460c      	mov	r4, r1
 80035d6:	4618      	mov	r0, r3
 80035d8:	4621      	mov	r1, r4
 80035da:	f7fd fa25 	bl	8000a28 <__aeabi_d2iz>
 80035de:	4603      	mov	r3, r0
 80035e0:	b21a      	sxth	r2, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	1c5c      	adds	r4, r3, #1
 80035e6:	2148      	movs	r1, #72	; 0x48
 80035e8:	4610      	mov	r0, r2
 80035ea:	f7ff ff8d 	bl	8003508 <HC05_Divide_int16>
 80035ee:	4603      	mov	r3, r0
 80035f0:	7023      	strb	r3, [r4, #0]

	_frame[2] = HC05_Divide_int16(Complementary_q_x * 1000, 'L');
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	4bba      	ldr	r3, [pc, #744]	; (80038e0 <HC05_Fill_Data_frame_to_PC+0x358>)
 80035f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80035fc:	f7fc ff64 	bl	80004c8 <__aeabi_dmul>
 8003600:	4603      	mov	r3, r0
 8003602:	460c      	mov	r4, r1
 8003604:	4618      	mov	r0, r3
 8003606:	4621      	mov	r1, r4
 8003608:	f7fd fa0e 	bl	8000a28 <__aeabi_d2iz>
 800360c:	4603      	mov	r3, r0
 800360e:	b21a      	sxth	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	1c9c      	adds	r4, r3, #2
 8003614:	214c      	movs	r1, #76	; 0x4c
 8003616:	4610      	mov	r0, r2
 8003618:	f7ff ff76 	bl	8003508 <HC05_Divide_int16>
 800361c:	4603      	mov	r3, r0
 800361e:	7023      	strb	r3, [r4, #0]
	_frame[3] = HC05_Divide_int16(Complementary_q_x * 1000, 'H');
 8003620:	f04f 0200 	mov.w	r2, #0
 8003624:	4bae      	ldr	r3, [pc, #696]	; (80038e0 <HC05_Fill_Data_frame_to_PC+0x358>)
 8003626:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800362a:	f7fc ff4d 	bl	80004c8 <__aeabi_dmul>
 800362e:	4603      	mov	r3, r0
 8003630:	460c      	mov	r4, r1
 8003632:	4618      	mov	r0, r3
 8003634:	4621      	mov	r1, r4
 8003636:	f7fd f9f7 	bl	8000a28 <__aeabi_d2iz>
 800363a:	4603      	mov	r3, r0
 800363c:	b21a      	sxth	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	1cdc      	adds	r4, r3, #3
 8003642:	2148      	movs	r1, #72	; 0x48
 8003644:	4610      	mov	r0, r2
 8003646:	f7ff ff5f 	bl	8003508 <HC05_Divide_int16>
 800364a:	4603      	mov	r3, r0
 800364c:	7023      	strb	r3, [r4, #0]

	_frame[4] = HC05_Divide_int16(Complementary_q_y * 1000, 'L');
 800364e:	f04f 0200 	mov.w	r2, #0
 8003652:	4ba3      	ldr	r3, [pc, #652]	; (80038e0 <HC05_Fill_Data_frame_to_PC+0x358>)
 8003654:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003658:	f7fc ff36 	bl	80004c8 <__aeabi_dmul>
 800365c:	4603      	mov	r3, r0
 800365e:	460c      	mov	r4, r1
 8003660:	4618      	mov	r0, r3
 8003662:	4621      	mov	r1, r4
 8003664:	f7fd f9e0 	bl	8000a28 <__aeabi_d2iz>
 8003668:	4603      	mov	r3, r0
 800366a:	b21a      	sxth	r2, r3
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	1d1c      	adds	r4, r3, #4
 8003670:	214c      	movs	r1, #76	; 0x4c
 8003672:	4610      	mov	r0, r2
 8003674:	f7ff ff48 	bl	8003508 <HC05_Divide_int16>
 8003678:	4603      	mov	r3, r0
 800367a:	7023      	strb	r3, [r4, #0]
	_frame[5] = HC05_Divide_int16(Complementary_q_y * 1000, 'H');
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	4b97      	ldr	r3, [pc, #604]	; (80038e0 <HC05_Fill_Data_frame_to_PC+0x358>)
 8003682:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003686:	f7fc ff1f 	bl	80004c8 <__aeabi_dmul>
 800368a:	4603      	mov	r3, r0
 800368c:	460c      	mov	r4, r1
 800368e:	4618      	mov	r0, r3
 8003690:	4621      	mov	r1, r4
 8003692:	f7fd f9c9 	bl	8000a28 <__aeabi_d2iz>
 8003696:	4603      	mov	r3, r0
 8003698:	b21a      	sxth	r2, r3
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	1d5c      	adds	r4, r3, #5
 800369e:	2148      	movs	r1, #72	; 0x48
 80036a0:	4610      	mov	r0, r2
 80036a2:	f7ff ff31 	bl	8003508 <HC05_Divide_int16>
 80036a6:	4603      	mov	r3, r0
 80036a8:	7023      	strb	r3, [r4, #0]

	_frame[6] = HC05_Divide_int16(Complementary_q_z * 1000, 'L');
 80036aa:	f04f 0200 	mov.w	r2, #0
 80036ae:	4b8c      	ldr	r3, [pc, #560]	; (80038e0 <HC05_Fill_Data_frame_to_PC+0x358>)
 80036b0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80036b4:	f7fc ff08 	bl	80004c8 <__aeabi_dmul>
 80036b8:	4603      	mov	r3, r0
 80036ba:	460c      	mov	r4, r1
 80036bc:	4618      	mov	r0, r3
 80036be:	4621      	mov	r1, r4
 80036c0:	f7fd f9b2 	bl	8000a28 <__aeabi_d2iz>
 80036c4:	4603      	mov	r3, r0
 80036c6:	b21a      	sxth	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	1d9c      	adds	r4, r3, #6
 80036cc:	214c      	movs	r1, #76	; 0x4c
 80036ce:	4610      	mov	r0, r2
 80036d0:	f7ff ff1a 	bl	8003508 <HC05_Divide_int16>
 80036d4:	4603      	mov	r3, r0
 80036d6:	7023      	strb	r3, [r4, #0]
	_frame[7] = HC05_Divide_int16(Complementary_q_z * 1000, 'H');
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	4b80      	ldr	r3, [pc, #512]	; (80038e0 <HC05_Fill_Data_frame_to_PC+0x358>)
 80036de:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80036e2:	f7fc fef1 	bl	80004c8 <__aeabi_dmul>
 80036e6:	4603      	mov	r3, r0
 80036e8:	460c      	mov	r4, r1
 80036ea:	4618      	mov	r0, r3
 80036ec:	4621      	mov	r1, r4
 80036ee:	f7fd f99b 	bl	8000a28 <__aeabi_d2iz>
 80036f2:	4603      	mov	r3, r0
 80036f4:	b21a      	sxth	r2, r3
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	1ddc      	adds	r4, r3, #7
 80036fa:	2148      	movs	r1, #72	; 0x48
 80036fc:	4610      	mov	r0, r2
 80036fe:	f7ff ff03 	bl	8003508 <HC05_Divide_int16>
 8003702:	4603      	mov	r3, r0
 8003704:	7023      	strb	r3, [r4, #0]

	/* Kalman filter data */
	_frame[8] = HC05_Divide_int16(Kalman_q_w * 1000, 'L');
 8003706:	f04f 0200 	mov.w	r2, #0
 800370a:	4b75      	ldr	r3, [pc, #468]	; (80038e0 <HC05_Fill_Data_frame_to_PC+0x358>)
 800370c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003710:	f7fc feda 	bl	80004c8 <__aeabi_dmul>
 8003714:	4603      	mov	r3, r0
 8003716:	460c      	mov	r4, r1
 8003718:	4618      	mov	r0, r3
 800371a:	4621      	mov	r1, r4
 800371c:	f7fd f984 	bl	8000a28 <__aeabi_d2iz>
 8003720:	4603      	mov	r3, r0
 8003722:	b21a      	sxth	r2, r3
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f103 0408 	add.w	r4, r3, #8
 800372a:	214c      	movs	r1, #76	; 0x4c
 800372c:	4610      	mov	r0, r2
 800372e:	f7ff feeb 	bl	8003508 <HC05_Divide_int16>
 8003732:	4603      	mov	r3, r0
 8003734:	7023      	strb	r3, [r4, #0]
	_frame[9] = HC05_Divide_int16(Kalman_q_w * 1000, 'H');
 8003736:	f04f 0200 	mov.w	r2, #0
 800373a:	4b69      	ldr	r3, [pc, #420]	; (80038e0 <HC05_Fill_Data_frame_to_PC+0x358>)
 800373c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8003740:	f7fc fec2 	bl	80004c8 <__aeabi_dmul>
 8003744:	4603      	mov	r3, r0
 8003746:	460c      	mov	r4, r1
 8003748:	4618      	mov	r0, r3
 800374a:	4621      	mov	r1, r4
 800374c:	f7fd f96c 	bl	8000a28 <__aeabi_d2iz>
 8003750:	4603      	mov	r3, r0
 8003752:	b21a      	sxth	r2, r3
 8003754:	68bb      	ldr	r3, [r7, #8]
 8003756:	f103 0409 	add.w	r4, r3, #9
 800375a:	2148      	movs	r1, #72	; 0x48
 800375c:	4610      	mov	r0, r2
 800375e:	f7ff fed3 	bl	8003508 <HC05_Divide_int16>
 8003762:	4603      	mov	r3, r0
 8003764:	7023      	strb	r3, [r4, #0]

	_frame[10] = HC05_Divide_int16(Kalman_q_x * 1000, 'L');
 8003766:	f04f 0200 	mov.w	r2, #0
 800376a:	4b5d      	ldr	r3, [pc, #372]	; (80038e0 <HC05_Fill_Data_frame_to_PC+0x358>)
 800376c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8003770:	f7fc feaa 	bl	80004c8 <__aeabi_dmul>
 8003774:	4603      	mov	r3, r0
 8003776:	460c      	mov	r4, r1
 8003778:	4618      	mov	r0, r3
 800377a:	4621      	mov	r1, r4
 800377c:	f7fd f954 	bl	8000a28 <__aeabi_d2iz>
 8003780:	4603      	mov	r3, r0
 8003782:	b21a      	sxth	r2, r3
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f103 040a 	add.w	r4, r3, #10
 800378a:	214c      	movs	r1, #76	; 0x4c
 800378c:	4610      	mov	r0, r2
 800378e:	f7ff febb 	bl	8003508 <HC05_Divide_int16>
 8003792:	4603      	mov	r3, r0
 8003794:	7023      	strb	r3, [r4, #0]
	_frame[11] = HC05_Divide_int16(Kalman_q_x * 1000, 'H');
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	4b51      	ldr	r3, [pc, #324]	; (80038e0 <HC05_Fill_Data_frame_to_PC+0x358>)
 800379c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80037a0:	f7fc fe92 	bl	80004c8 <__aeabi_dmul>
 80037a4:	4603      	mov	r3, r0
 80037a6:	460c      	mov	r4, r1
 80037a8:	4618      	mov	r0, r3
 80037aa:	4621      	mov	r1, r4
 80037ac:	f7fd f93c 	bl	8000a28 <__aeabi_d2iz>
 80037b0:	4603      	mov	r3, r0
 80037b2:	b21a      	sxth	r2, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f103 040b 	add.w	r4, r3, #11
 80037ba:	2148      	movs	r1, #72	; 0x48
 80037bc:	4610      	mov	r0, r2
 80037be:	f7ff fea3 	bl	8003508 <HC05_Divide_int16>
 80037c2:	4603      	mov	r3, r0
 80037c4:	7023      	strb	r3, [r4, #0]

	_frame[12] = HC05_Divide_int16(Kalman_q_y * 1000, 'L');
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	4b45      	ldr	r3, [pc, #276]	; (80038e0 <HC05_Fill_Data_frame_to_PC+0x358>)
 80037cc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80037d0:	f7fc fe7a 	bl	80004c8 <__aeabi_dmul>
 80037d4:	4603      	mov	r3, r0
 80037d6:	460c      	mov	r4, r1
 80037d8:	4618      	mov	r0, r3
 80037da:	4621      	mov	r1, r4
 80037dc:	f7fd f924 	bl	8000a28 <__aeabi_d2iz>
 80037e0:	4603      	mov	r3, r0
 80037e2:	b21a      	sxth	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f103 040c 	add.w	r4, r3, #12
 80037ea:	214c      	movs	r1, #76	; 0x4c
 80037ec:	4610      	mov	r0, r2
 80037ee:	f7ff fe8b 	bl	8003508 <HC05_Divide_int16>
 80037f2:	4603      	mov	r3, r0
 80037f4:	7023      	strb	r3, [r4, #0]
	_frame[13] = HC05_Divide_int16(Kalman_q_y * 1000, 'H');
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	4b39      	ldr	r3, [pc, #228]	; (80038e0 <HC05_Fill_Data_frame_to_PC+0x358>)
 80037fc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003800:	f7fc fe62 	bl	80004c8 <__aeabi_dmul>
 8003804:	4603      	mov	r3, r0
 8003806:	460c      	mov	r4, r1
 8003808:	4618      	mov	r0, r3
 800380a:	4621      	mov	r1, r4
 800380c:	f7fd f90c 	bl	8000a28 <__aeabi_d2iz>
 8003810:	4603      	mov	r3, r0
 8003812:	b21a      	sxth	r2, r3
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f103 040d 	add.w	r4, r3, #13
 800381a:	2148      	movs	r1, #72	; 0x48
 800381c:	4610      	mov	r0, r2
 800381e:	f7ff fe73 	bl	8003508 <HC05_Divide_int16>
 8003822:	4603      	mov	r3, r0
 8003824:	7023      	strb	r3, [r4, #0]

	_frame[14] = HC05_Divide_int16(Kalman_q_z * 1000, 'L');
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	4b2d      	ldr	r3, [pc, #180]	; (80038e0 <HC05_Fill_Data_frame_to_PC+0x358>)
 800382c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003830:	f7fc fe4a 	bl	80004c8 <__aeabi_dmul>
 8003834:	4603      	mov	r3, r0
 8003836:	460c      	mov	r4, r1
 8003838:	4618      	mov	r0, r3
 800383a:	4621      	mov	r1, r4
 800383c:	f7fd f8f4 	bl	8000a28 <__aeabi_d2iz>
 8003840:	4603      	mov	r3, r0
 8003842:	b21a      	sxth	r2, r3
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	f103 040e 	add.w	r4, r3, #14
 800384a:	214c      	movs	r1, #76	; 0x4c
 800384c:	4610      	mov	r0, r2
 800384e:	f7ff fe5b 	bl	8003508 <HC05_Divide_int16>
 8003852:	4603      	mov	r3, r0
 8003854:	7023      	strb	r3, [r4, #0]
	_frame[15] = HC05_Divide_int16(Kalman_q_z * 1000, 'H');
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	4b21      	ldr	r3, [pc, #132]	; (80038e0 <HC05_Fill_Data_frame_to_PC+0x358>)
 800385c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003860:	f7fc fe32 	bl	80004c8 <__aeabi_dmul>
 8003864:	4603      	mov	r3, r0
 8003866:	460c      	mov	r4, r1
 8003868:	4618      	mov	r0, r3
 800386a:	4621      	mov	r1, r4
 800386c:	f7fd f8dc 	bl	8000a28 <__aeabi_d2iz>
 8003870:	4603      	mov	r3, r0
 8003872:	b21a      	sxth	r2, r3
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	f103 040f 	add.w	r4, r3, #15
 800387a:	2148      	movs	r1, #72	; 0x48
 800387c:	4610      	mov	r0, r2
 800387e:	f7ff fe43 	bl	8003508 <HC05_Divide_int16>
 8003882:	4603      	mov	r3, r0
 8003884:	7023      	strb	r3, [r4, #0]

	/* Madgwick filter data */
	_frame[16] = HC05_Divide_int16(Madgwick_q_w * 1000, 'L');
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	4b15      	ldr	r3, [pc, #84]	; (80038e0 <HC05_Fill_Data_frame_to_PC+0x358>)
 800388c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003890:	f7fc fe1a 	bl	80004c8 <__aeabi_dmul>
 8003894:	4603      	mov	r3, r0
 8003896:	460c      	mov	r4, r1
 8003898:	4618      	mov	r0, r3
 800389a:	4621      	mov	r1, r4
 800389c:	f7fd f8c4 	bl	8000a28 <__aeabi_d2iz>
 80038a0:	4603      	mov	r3, r0
 80038a2:	b21a      	sxth	r2, r3
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	f103 0410 	add.w	r4, r3, #16
 80038aa:	214c      	movs	r1, #76	; 0x4c
 80038ac:	4610      	mov	r0, r2
 80038ae:	f7ff fe2b 	bl	8003508 <HC05_Divide_int16>
 80038b2:	4603      	mov	r3, r0
 80038b4:	7023      	strb	r3, [r4, #0]
	_frame[17] = HC05_Divide_int16(Madgwick_q_w * 1000, 'H');
 80038b6:	f04f 0200 	mov.w	r2, #0
 80038ba:	4b09      	ldr	r3, [pc, #36]	; (80038e0 <HC05_Fill_Data_frame_to_PC+0x358>)
 80038bc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80038c0:	f7fc fe02 	bl	80004c8 <__aeabi_dmul>
 80038c4:	4603      	mov	r3, r0
 80038c6:	460c      	mov	r4, r1
 80038c8:	4618      	mov	r0, r3
 80038ca:	4621      	mov	r1, r4
 80038cc:	f7fd f8ac 	bl	8000a28 <__aeabi_d2iz>
 80038d0:	4603      	mov	r3, r0
 80038d2:	b21a      	sxth	r2, r3
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f103 0411 	add.w	r4, r3, #17
 80038da:	2148      	movs	r1, #72	; 0x48
 80038dc:	4610      	mov	r0, r2
 80038de:	e001      	b.n	80038e4 <HC05_Fill_Data_frame_to_PC+0x35c>
 80038e0:	408f4000 	.word	0x408f4000
 80038e4:	f7ff fe10 	bl	8003508 <HC05_Divide_int16>
 80038e8:	4603      	mov	r3, r0
 80038ea:	7023      	strb	r3, [r4, #0]

	_frame[18] = HC05_Divide_int16(Madgwick_q_x * 1000, 'L');
 80038ec:	f04f 0200 	mov.w	r2, #0
 80038f0:	4b56      	ldr	r3, [pc, #344]	; (8003a4c <HC05_Fill_Data_frame_to_PC+0x4c4>)
 80038f2:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80038f6:	f7fc fde7 	bl	80004c8 <__aeabi_dmul>
 80038fa:	4603      	mov	r3, r0
 80038fc:	460c      	mov	r4, r1
 80038fe:	4618      	mov	r0, r3
 8003900:	4621      	mov	r1, r4
 8003902:	f7fd f891 	bl	8000a28 <__aeabi_d2iz>
 8003906:	4603      	mov	r3, r0
 8003908:	b21a      	sxth	r2, r3
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	f103 0412 	add.w	r4, r3, #18
 8003910:	214c      	movs	r1, #76	; 0x4c
 8003912:	4610      	mov	r0, r2
 8003914:	f7ff fdf8 	bl	8003508 <HC05_Divide_int16>
 8003918:	4603      	mov	r3, r0
 800391a:	7023      	strb	r3, [r4, #0]
	_frame[19] = HC05_Divide_int16(Madgwick_q_x * 1000, 'H');
 800391c:	f04f 0200 	mov.w	r2, #0
 8003920:	4b4a      	ldr	r3, [pc, #296]	; (8003a4c <HC05_Fill_Data_frame_to_PC+0x4c4>)
 8003922:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003926:	f7fc fdcf 	bl	80004c8 <__aeabi_dmul>
 800392a:	4603      	mov	r3, r0
 800392c:	460c      	mov	r4, r1
 800392e:	4618      	mov	r0, r3
 8003930:	4621      	mov	r1, r4
 8003932:	f7fd f879 	bl	8000a28 <__aeabi_d2iz>
 8003936:	4603      	mov	r3, r0
 8003938:	b21a      	sxth	r2, r3
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	f103 0413 	add.w	r4, r3, #19
 8003940:	2148      	movs	r1, #72	; 0x48
 8003942:	4610      	mov	r0, r2
 8003944:	f7ff fde0 	bl	8003508 <HC05_Divide_int16>
 8003948:	4603      	mov	r3, r0
 800394a:	7023      	strb	r3, [r4, #0]

	_frame[20] = HC05_Divide_int16(Madgwick_q_y * 1000, 'L');
 800394c:	f04f 0200 	mov.w	r2, #0
 8003950:	4b3e      	ldr	r3, [pc, #248]	; (8003a4c <HC05_Fill_Data_frame_to_PC+0x4c4>)
 8003952:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003956:	f7fc fdb7 	bl	80004c8 <__aeabi_dmul>
 800395a:	4603      	mov	r3, r0
 800395c:	460c      	mov	r4, r1
 800395e:	4618      	mov	r0, r3
 8003960:	4621      	mov	r1, r4
 8003962:	f7fd f861 	bl	8000a28 <__aeabi_d2iz>
 8003966:	4603      	mov	r3, r0
 8003968:	b21a      	sxth	r2, r3
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	f103 0414 	add.w	r4, r3, #20
 8003970:	214c      	movs	r1, #76	; 0x4c
 8003972:	4610      	mov	r0, r2
 8003974:	f7ff fdc8 	bl	8003508 <HC05_Divide_int16>
 8003978:	4603      	mov	r3, r0
 800397a:	7023      	strb	r3, [r4, #0]
	_frame[21] = HC05_Divide_int16(Madgwick_q_y * 1000, 'H');
 800397c:	f04f 0200 	mov.w	r2, #0
 8003980:	4b32      	ldr	r3, [pc, #200]	; (8003a4c <HC05_Fill_Data_frame_to_PC+0x4c4>)
 8003982:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003986:	f7fc fd9f 	bl	80004c8 <__aeabi_dmul>
 800398a:	4603      	mov	r3, r0
 800398c:	460c      	mov	r4, r1
 800398e:	4618      	mov	r0, r3
 8003990:	4621      	mov	r1, r4
 8003992:	f7fd f849 	bl	8000a28 <__aeabi_d2iz>
 8003996:	4603      	mov	r3, r0
 8003998:	b21a      	sxth	r2, r3
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	f103 0415 	add.w	r4, r3, #21
 80039a0:	2148      	movs	r1, #72	; 0x48
 80039a2:	4610      	mov	r0, r2
 80039a4:	f7ff fdb0 	bl	8003508 <HC05_Divide_int16>
 80039a8:	4603      	mov	r3, r0
 80039aa:	7023      	strb	r3, [r4, #0]

	_frame[22] = HC05_Divide_int16(Madgwick_q_z * 1000, 'L');
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	4b26      	ldr	r3, [pc, #152]	; (8003a4c <HC05_Fill_Data_frame_to_PC+0x4c4>)
 80039b2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80039b6:	f7fc fd87 	bl	80004c8 <__aeabi_dmul>
 80039ba:	4603      	mov	r3, r0
 80039bc:	460c      	mov	r4, r1
 80039be:	4618      	mov	r0, r3
 80039c0:	4621      	mov	r1, r4
 80039c2:	f7fd f831 	bl	8000a28 <__aeabi_d2iz>
 80039c6:	4603      	mov	r3, r0
 80039c8:	b21a      	sxth	r2, r3
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	f103 0416 	add.w	r4, r3, #22
 80039d0:	214c      	movs	r1, #76	; 0x4c
 80039d2:	4610      	mov	r0, r2
 80039d4:	f7ff fd98 	bl	8003508 <HC05_Divide_int16>
 80039d8:	4603      	mov	r3, r0
 80039da:	7023      	strb	r3, [r4, #0]
	_frame[23] = HC05_Divide_int16(Madgwick_q_z * 1000, 'H');
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	4b1a      	ldr	r3, [pc, #104]	; (8003a4c <HC05_Fill_Data_frame_to_PC+0x4c4>)
 80039e2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 80039e6:	f7fc fd6f 	bl	80004c8 <__aeabi_dmul>
 80039ea:	4603      	mov	r3, r0
 80039ec:	460c      	mov	r4, r1
 80039ee:	4618      	mov	r0, r3
 80039f0:	4621      	mov	r1, r4
 80039f2:	f7fd f819 	bl	8000a28 <__aeabi_d2iz>
 80039f6:	4603      	mov	r3, r0
 80039f8:	b21a      	sxth	r2, r3
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f103 0417 	add.w	r4, r3, #23
 8003a00:	2148      	movs	r1, #72	; 0x48
 8003a02:	4610      	mov	r0, r2
 8003a04:	f7ff fd80 	bl	8003508 <HC05_Divide_int16>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	7023      	strb	r3, [r4, #0]

	/* Test int */
	_frame[24] = HC05_Divide_int16(32768, 'L');
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f103 0418 	add.w	r4, r3, #24
 8003a12:	214c      	movs	r1, #76	; 0x4c
 8003a14:	480e      	ldr	r0, [pc, #56]	; (8003a50 <HC05_Fill_Data_frame_to_PC+0x4c8>)
 8003a16:	f7ff fd77 	bl	8003508 <HC05_Divide_int16>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	7023      	strb	r3, [r4, #0]
	_frame[25] = HC05_Divide_int16(32768, 'H');
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	f103 0419 	add.w	r4, r3, #25
 8003a24:	2148      	movs	r1, #72	; 0x48
 8003a26:	480a      	ldr	r0, [pc, #40]	; (8003a50 <HC05_Fill_Data_frame_to_PC+0x4c8>)
 8003a28:	f7ff fd6e 	bl	8003508 <HC05_Divide_int16>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	7023      	strb	r3, [r4, #0]

	/* CRC */
	_frame[26] = CRC8_DataArray(_frame, DATA_FRAME_TO_PC_SIZE - 1);
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	f103 041a 	add.w	r4, r3, #26
 8003a36:	211a      	movs	r1, #26
 8003a38:	68b8      	ldr	r0, [r7, #8]
 8003a3a:	f7ff f969 	bl	8002d10 <CRC8_DataArray>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	7023      	strb	r3, [r4, #0]
}
 8003a42:	bf00      	nop
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd90      	pop	{r4, r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	408f4000 	.word	0x408f4000
 8003a50:	ffff8000 	.word	0xffff8000

08003a54 <HC05_Parse_Data_frame>:

/* --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

int HC05_Parse_Data_frame(struct Data_frame_from_PC *_data, uint8_t *_frame) {
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]

	uint8_t Actual_CRC = 0;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	73fb      	strb	r3, [r7, #15]
	uint8_t Received_CRC = 0;
 8003a62:	2300      	movs	r3, #0
 8003a64:	73bb      	strb	r3, [r7, #14]

	/* Filters data */
	_data->Complementary_filter_weight = HC05_Merge_bytes(_frame[0], _frame[1]);
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	781a      	ldrb	r2, [r3, #0]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	4619      	mov	r1, r3
 8003a72:	4610      	mov	r0, r2
 8003a74:	f7ff fd65 	bl	8003542 <HC05_Merge_bytes>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	801a      	strh	r2, [r3, #0]
	_data->Kalman_filter_process_variance = HC05_Merge_bytes(_frame[2], _frame[3]);
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	3302      	adds	r3, #2
 8003a84:	781a      	ldrb	r2, [r3, #0]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	3303      	adds	r3, #3
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4610      	mov	r0, r2
 8003a90:	f7ff fd57 	bl	8003542 <HC05_Merge_bytes>
 8003a94:	4603      	mov	r3, r0
 8003a96:	461a      	mov	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	805a      	strh	r2, [r3, #2]
	_data->Kalman_filter_measure_variance = HC05_Merge_bytes(_frame[4], _frame[5]);
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	781a      	ldrb	r2, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	3305      	adds	r3, #5
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	4610      	mov	r0, r2
 8003aac:	f7ff fd49 	bl	8003542 <HC05_Merge_bytes>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	809a      	strh	r2, [r3, #4]
	_data->Madgwick_filter_beta = HC05_Merge_bytes(_frame[6], _frame[7]);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	3306      	adds	r3, #6
 8003abc:	781a      	ldrb	r2, [r3, #0]
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	3307      	adds	r3, #7
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	f7ff fd3b 	bl	8003542 <HC05_Merge_bytes>
 8003acc:	4603      	mov	r3, r0
 8003ace:	461a      	mov	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	80da      	strh	r2, [r3, #6]

	/* Additional data */
	_data->Which_filter = _frame[8];
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	3308      	adds	r3, #8
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	b25a      	sxtb	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	731a      	strb	r2, [r3, #12]

	/* CRC test */
	Received_CRC = _frame[9];
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	7a5b      	ldrb	r3, [r3, #9]
 8003ae4:	73bb      	strb	r3, [r7, #14]
	Actual_CRC = CRC8_DataArray(_frame, DATA_FRAME_FROM_PC_SIZE - 1);
 8003ae6:	2109      	movs	r1, #9
 8003ae8:	6838      	ldr	r0, [r7, #0]
 8003aea:	f7ff f911 	bl	8002d10 <CRC8_DataArray>
 8003aee:	4603      	mov	r3, r0
 8003af0:	73fb      	strb	r3, [r7, #15]

	if( Actual_CRC != Received_CRC ) {
 8003af2:	7bfa      	ldrb	r2, [r7, #15]
 8003af4:	7bbb      	ldrb	r3, [r7, #14]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d002      	beq.n	8003b00 <HC05_Parse_Data_frame+0xac>

		return -1;
 8003afa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003afe:	e000      	b.n	8003b02 <HC05_Parse_Data_frame+0xae>
	}

	return 0;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
	...

08003b0c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8003b10:	4b12      	ldr	r3, [pc, #72]	; (8003b5c <MX_I2C1_Init+0x50>)
 8003b12:	4a13      	ldr	r2, [pc, #76]	; (8003b60 <MX_I2C1_Init+0x54>)
 8003b14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003b16:	4b11      	ldr	r3, [pc, #68]	; (8003b5c <MX_I2C1_Init+0x50>)
 8003b18:	4a12      	ldr	r2, [pc, #72]	; (8003b64 <MX_I2C1_Init+0x58>)
 8003b1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b1c:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <MX_I2C1_Init+0x50>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003b22:	4b0e      	ldr	r3, [pc, #56]	; (8003b5c <MX_I2C1_Init+0x50>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b28:	4b0c      	ldr	r3, [pc, #48]	; (8003b5c <MX_I2C1_Init+0x50>)
 8003b2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003b2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b30:	4b0a      	ldr	r3, [pc, #40]	; (8003b5c <MX_I2C1_Init+0x50>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003b36:	4b09      	ldr	r3, [pc, #36]	; (8003b5c <MX_I2C1_Init+0x50>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b3c:	4b07      	ldr	r3, [pc, #28]	; (8003b5c <MX_I2C1_Init+0x50>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b42:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <MX_I2C1_Init+0x50>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003b48:	4804      	ldr	r0, [pc, #16]	; (8003b5c <MX_I2C1_Init+0x50>)
 8003b4a:	f003 fcf1 	bl	8007530 <HAL_I2C_Init>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003b54:	f000 f8ee 	bl	8003d34 <Error_Handler>
  }

}
 8003b58:	bf00      	nop
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	2000349c 	.word	0x2000349c
 8003b60:	40005400 	.word	0x40005400
 8003b64:	000186a0 	.word	0x000186a0

08003b68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b088      	sub	sp, #32
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b70:	f107 0310 	add.w	r3, r7, #16
 8003b74:	2200      	movs	r2, #0
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	605a      	str	r2, [r3, #4]
 8003b7a:	609a      	str	r2, [r3, #8]
 8003b7c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a3b      	ldr	r2, [pc, #236]	; (8003c70 <HAL_I2C_MspInit+0x108>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d16f      	bne.n	8003c68 <HAL_I2C_MspInit+0x100>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b88:	4b3a      	ldr	r3, [pc, #232]	; (8003c74 <HAL_I2C_MspInit+0x10c>)
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	4a39      	ldr	r2, [pc, #228]	; (8003c74 <HAL_I2C_MspInit+0x10c>)
 8003b8e:	f043 0308 	orr.w	r3, r3, #8
 8003b92:	6193      	str	r3, [r2, #24]
 8003b94:	4b37      	ldr	r3, [pc, #220]	; (8003c74 <HAL_I2C_MspInit+0x10c>)
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_MPU9250_SCL_Pin|I2C1_MPU9250_SDA_Pin;
 8003ba0:	23c0      	movs	r3, #192	; 0xc0
 8003ba2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ba4:	2312      	movs	r3, #18
 8003ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bac:	f107 0310 	add.w	r3, r7, #16
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4831      	ldr	r0, [pc, #196]	; (8003c78 <HAL_I2C_MspInit+0x110>)
 8003bb4:	f003 fb10 	bl	80071d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003bb8:	4b2e      	ldr	r3, [pc, #184]	; (8003c74 <HAL_I2C_MspInit+0x10c>)
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	4a2d      	ldr	r2, [pc, #180]	; (8003c74 <HAL_I2C_MspInit+0x10c>)
 8003bbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bc2:	61d3      	str	r3, [r2, #28]
 8003bc4:	4b2b      	ldr	r3, [pc, #172]	; (8003c74 <HAL_I2C_MspInit+0x10c>)
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bcc:	60bb      	str	r3, [r7, #8]
 8003bce:	68bb      	ldr	r3, [r7, #8]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8003bd0:	4b2a      	ldr	r3, [pc, #168]	; (8003c7c <HAL_I2C_MspInit+0x114>)
 8003bd2:	4a2b      	ldr	r2, [pc, #172]	; (8003c80 <HAL_I2C_MspInit+0x118>)
 8003bd4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003bd6:	4b29      	ldr	r3, [pc, #164]	; (8003c7c <HAL_I2C_MspInit+0x114>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003bdc:	4b27      	ldr	r3, [pc, #156]	; (8003c7c <HAL_I2C_MspInit+0x114>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003be2:	4b26      	ldr	r3, [pc, #152]	; (8003c7c <HAL_I2C_MspInit+0x114>)
 8003be4:	2280      	movs	r2, #128	; 0x80
 8003be6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003be8:	4b24      	ldr	r3, [pc, #144]	; (8003c7c <HAL_I2C_MspInit+0x114>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003bee:	4b23      	ldr	r3, [pc, #140]	; (8003c7c <HAL_I2C_MspInit+0x114>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003bf4:	4b21      	ldr	r3, [pc, #132]	; (8003c7c <HAL_I2C_MspInit+0x114>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003bfa:	4b20      	ldr	r3, [pc, #128]	; (8003c7c <HAL_I2C_MspInit+0x114>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003c00:	481e      	ldr	r0, [pc, #120]	; (8003c7c <HAL_I2C_MspInit+0x114>)
 8003c02:	f003 f885 	bl	8006d10 <HAL_DMA_Init>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8003c0c:	f000 f892 	bl	8003d34 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a1a      	ldr	r2, [pc, #104]	; (8003c7c <HAL_I2C_MspInit+0x114>)
 8003c14:	639a      	str	r2, [r3, #56]	; 0x38
 8003c16:	4a19      	ldr	r2, [pc, #100]	; (8003c7c <HAL_I2C_MspInit+0x114>)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8003c1c:	4b19      	ldr	r3, [pc, #100]	; (8003c84 <HAL_I2C_MspInit+0x11c>)
 8003c1e:	4a1a      	ldr	r2, [pc, #104]	; (8003c88 <HAL_I2C_MspInit+0x120>)
 8003c20:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003c22:	4b18      	ldr	r3, [pc, #96]	; (8003c84 <HAL_I2C_MspInit+0x11c>)
 8003c24:	2210      	movs	r2, #16
 8003c26:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c28:	4b16      	ldr	r3, [pc, #88]	; (8003c84 <HAL_I2C_MspInit+0x11c>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003c2e:	4b15      	ldr	r3, [pc, #84]	; (8003c84 <HAL_I2C_MspInit+0x11c>)
 8003c30:	2280      	movs	r2, #128	; 0x80
 8003c32:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c34:	4b13      	ldr	r3, [pc, #76]	; (8003c84 <HAL_I2C_MspInit+0x11c>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c3a:	4b12      	ldr	r3, [pc, #72]	; (8003c84 <HAL_I2C_MspInit+0x11c>)
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003c40:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <HAL_I2C_MspInit+0x11c>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003c46:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <HAL_I2C_MspInit+0x11c>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003c4c:	480d      	ldr	r0, [pc, #52]	; (8003c84 <HAL_I2C_MspInit+0x11c>)
 8003c4e:	f003 f85f 	bl	8006d10 <HAL_DMA_Init>
 8003c52:	4603      	mov	r3, r0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 8003c58:	f000 f86c 	bl	8003d34 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a09      	ldr	r2, [pc, #36]	; (8003c84 <HAL_I2C_MspInit+0x11c>)
 8003c60:	635a      	str	r2, [r3, #52]	; 0x34
 8003c62:	4a08      	ldr	r2, [pc, #32]	; (8003c84 <HAL_I2C_MspInit+0x11c>)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003c68:	bf00      	nop
 8003c6a:	3720      	adds	r7, #32
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40005400 	.word	0x40005400
 8003c74:	40021000 	.word	0x40021000
 8003c78:	40010c00 	.word	0x40010c00
 8003c7c:	200034f0 	.word	0x200034f0
 8003c80:	40020080 	.word	0x40020080
 8003c84:	20003458 	.word	0x20003458
 8003c88:	4002006c 	.word	0x4002006c

08003c8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c90:	f002 feac 	bl	80069ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c94:	f000 f80d 	bl	8003cb2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c98:	f7ff fbc8 	bl	800342c <MX_GPIO_Init>
  MX_DMA_Init();
 8003c9c:	f7ff f85a 	bl	8002d54 <MX_DMA_Init>
  MX_I2C1_Init();
 8003ca0:	f7ff ff34 	bl	8003b0c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8003ca4:	f002 fda8 	bl	80067f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8003ca8:	f7ff f8a2 	bl	8002df0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003cac:	f005 fe4f 	bl	800994e <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003cb0:	e7fe      	b.n	8003cb0 <main+0x24>

08003cb2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003cb2:	b580      	push	{r7, lr}
 8003cb4:	b090      	sub	sp, #64	; 0x40
 8003cb6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cb8:	f107 0318 	add.w	r3, r7, #24
 8003cbc:	2228      	movs	r2, #40	; 0x28
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f007 f831 	bl	800ad28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003cc6:	1d3b      	adds	r3, r7, #4
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	605a      	str	r2, [r3, #4]
 8003cce:	609a      	str	r2, [r3, #8]
 8003cd0:	60da      	str	r2, [r3, #12]
 8003cd2:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003cdc:	2310      	movs	r3, #16
 8003cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8003ce8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8003cec:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003cee:	f107 0318 	add.w	r3, r7, #24
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f004 fccc 	bl	8008690 <HAL_RCC_OscConfig>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8003cfe:	f000 f819 	bl	8003d34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d02:	230f      	movs	r3, #15
 8003d04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d06:	2302      	movs	r3, #2
 8003d08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003d18:	1d3b      	adds	r3, r7, #4
 8003d1a:	2102      	movs	r1, #2
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f004 ff37 	bl	8008b90 <HAL_RCC_ClockConfig>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8003d28:	f000 f804 	bl	8003d34 <Error_Handler>
  }
}
 8003d2c:	bf00      	nop
 8003d2e:	3740      	adds	r7, #64	; 0x40
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d34:	b480      	push	{r7}
 8003d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003d38:	bf00      	nop
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bc80      	pop	{r7}
 8003d3e:	4770      	bx	lr

08003d40 <MPU9250_Accelerometer_Configuration>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

MPU9250_Error_code MPU9250_Accelerometer_Configuration(I2C_HandleTypeDef *I2Cx,
													   struct MPU9250 *DataStructure,
													   MPU9250_Acce_range Range) {
 8003d40:	b590      	push	{r4, r7, lr}
 8003d42:	b08b      	sub	sp, #44	; 0x2c
 8003d44:	af04      	add	r7, sp, #16
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	4613      	mov	r3, r2
 8003d4c:	71fb      	strb	r3, [r7, #7]

	uint8_t Byte_temp = 0x00;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	75fb      	strb	r3, [r7, #23]

	/* Case 1: Set accelerometer sensitivity range */
	Byte_temp = Range << 3;
 8003d52:	79fb      	ldrb	r3, [r7, #7]
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	75fb      	strb	r3, [r7, #23]

	if( HAL_I2C_Mem_Write(I2Cx, DataStructure->Device_addres, MPU9250_ACCEL_CONFIG, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	785b      	ldrb	r3, [r3, #1]
 8003d5e:	b299      	uxth	r1, r3
 8003d60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d64:	9302      	str	r3, [sp, #8]
 8003d66:	2301      	movs	r3, #1
 8003d68:	9301      	str	r3, [sp, #4]
 8003d6a:	f107 0317 	add.w	r3, r7, #23
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	2301      	movs	r3, #1
 8003d72:	221c      	movs	r2, #28
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f003 fd03 	bl	8007780 <HAL_I2C_Mem_Write>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <MPU9250_Accelerometer_Configuration+0x44>

		return MPU9250_Accelerometer_Config_FAIL;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e038      	b.n	8003df6 <MPU9250_Accelerometer_Configuration+0xb6>
		return MPU9250_Accelerometer_Config_FAIL;
	}
	*/

	/* Case 3: Save configuration to data structure */
	if(      Range == MPU9250_Acce_2G )     DataStructure->Accelerometer_sensitivity_factor = MPU9250_ACCE_SENSITIVITY_FACTOR_2G;
 8003d84:	79fb      	ldrb	r3, [r7, #7]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d105      	bne.n	8003d96 <MPU9250_Accelerometer_Configuration+0x56>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d90:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8003d94:	e019      	b.n	8003dca <MPU9250_Accelerometer_Configuration+0x8a>
	else if( Range == MPU9250_Acce_4G )		DataStructure->Accelerometer_sensitivity_factor = MPU9250_ACCE_SENSITIVITY_FACTOR_4G;
 8003d96:	79fb      	ldrb	r3, [r7, #7]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d105      	bne.n	8003da8 <MPU9250_Accelerometer_Configuration+0x68>
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003da2:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8003da6:	e010      	b.n	8003dca <MPU9250_Accelerometer_Configuration+0x8a>
	else if( Range == MPU9250_Acce_8G )		DataStructure->Accelerometer_sensitivity_factor = MPU9250_ACCE_SENSITIVITY_FACTOR_8G;
 8003da8:	79fb      	ldrb	r3, [r7, #7]
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d105      	bne.n	8003dba <MPU9250_Accelerometer_Configuration+0x7a>
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003db4:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
 8003db8:	e007      	b.n	8003dca <MPU9250_Accelerometer_Configuration+0x8a>
	else if( Range == MPU9250_Acce_16G )	DataStructure->Accelerometer_sensitivity_factor = MPU9250_ACCE_SENSITIVITY_FACTOR_16G;
 8003dba:	79fb      	ldrb	r3, [r7, #7]
 8003dbc:	2b03      	cmp	r3, #3
 8003dbe:	d104      	bne.n	8003dca <MPU9250_Accelerometer_Configuration+0x8a>
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dc6:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c

	DataStructure->Accelerometer_X_offset = 0;
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	f04f 0300 	mov.w	r3, #0
 8003dd0:	f04f 0400 	mov.w	r4, #0
 8003dd4:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	DataStructure->Accelerometer_Y_offset = 0;
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	f04f 0300 	mov.w	r3, #0
 8003dde:	f04f 0400 	mov.w	r4, #0
 8003de2:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	DataStructure->Accelerometer_Z_offset = 0;
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	f04f 0400 	mov.w	r4, #0
 8003df0:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8

	return MPU9250_Accelerometer_Config_OK;
 8003df4:	2302      	movs	r3, #2
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd90      	pop	{r4, r7, pc}

08003dfe <MPU9250_Gyroscope_Configuration>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

MPU9250_Error_code MPU9250_Gyroscope_Configuration(I2C_HandleTypeDef *I2Cx,
												   struct MPU9250 *DataStructure,
												   MPU9250_Gyro_range Range) {
 8003dfe:	b590      	push	{r4, r7, lr}
 8003e00:	b08b      	sub	sp, #44	; 0x2c
 8003e02:	af04      	add	r7, sp, #16
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	71fb      	strb	r3, [r7, #7]

	uint8_t Byte_temp = 0x00;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	75fb      	strb	r3, [r7, #23]


	/* Case 1: Set gyroscope sensitivity range */
	Byte_temp = Range << 3;
 8003e10:	79fb      	ldrb	r3, [r7, #7]
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	75fb      	strb	r3, [r7, #23]

	if( HAL_I2C_Mem_Write(I2Cx, DataStructure->Device_addres, MPU9250_GYRO_CONFIG, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	785b      	ldrb	r3, [r3, #1]
 8003e1c:	b299      	uxth	r1, r3
 8003e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e22:	9302      	str	r3, [sp, #8]
 8003e24:	2301      	movs	r3, #1
 8003e26:	9301      	str	r3, [sp, #4]
 8003e28:	f107 0317 	add.w	r3, r7, #23
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	2301      	movs	r3, #1
 8003e30:	221b      	movs	r2, #27
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f003 fca4 	bl	8007780 <HAL_I2C_Mem_Write>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <MPU9250_Gyroscope_Configuration+0x44>

		return MPU9250_Gyroscope_Config_FAIL;
 8003e3e:	2305      	movs	r3, #5
 8003e40:	e047      	b.n	8003ed2 <MPU9250_Gyroscope_Configuration+0xd4>
	}

	/* Case 2: Set gyroscope low pass filter cut-off frequency */
	Byte_temp = 0x0E;
 8003e42:	230e      	movs	r3, #14
 8003e44:	75fb      	strb	r3, [r7, #23]

	if( HAL_I2C_Mem_Write(I2Cx, DataStructure->Device_addres, MPU9250_CONFIG, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	785b      	ldrb	r3, [r3, #1]
 8003e4a:	b299      	uxth	r1, r3
 8003e4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e50:	9302      	str	r3, [sp, #8]
 8003e52:	2301      	movs	r3, #1
 8003e54:	9301      	str	r3, [sp, #4]
 8003e56:	f107 0317 	add.w	r3, r7, #23
 8003e5a:	9300      	str	r3, [sp, #0]
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	221a      	movs	r2, #26
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f003 fc8d 	bl	8007780 <HAL_I2C_Mem_Write>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <MPU9250_Gyroscope_Configuration+0x72>

		return MPU9250_Gyroscope_Config_FAIL;
 8003e6c:	2305      	movs	r3, #5
 8003e6e:	e030      	b.n	8003ed2 <MPU9250_Gyroscope_Configuration+0xd4>
	}

	/* Case 3: Save configuration to data structure */
	if(      Range == MPU9250_Gyro_250s )   DataStructure->Gyroscope_sensitivity_factor = MPU9250_GYRO_SENSITIVITY_FACTOR_250s;
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d103      	bne.n	8003e7e <MPU9250_Gyroscope_Configuration+0x80>
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2283      	movs	r2, #131	; 0x83
 8003e7a:	805a      	strh	r2, [r3, #2]
 8003e7c:	e013      	b.n	8003ea6 <MPU9250_Gyroscope_Configuration+0xa8>
	else if( Range == MPU9250_Gyro_500s )	DataStructure->Gyroscope_sensitivity_factor = MPU9250_GYRO_SENSITIVITY_FACTOR_500s;
 8003e7e:	79fb      	ldrb	r3, [r7, #7]
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d103      	bne.n	8003e8c <MPU9250_Gyroscope_Configuration+0x8e>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2241      	movs	r2, #65	; 0x41
 8003e88:	805a      	strh	r2, [r3, #2]
 8003e8a:	e00c      	b.n	8003ea6 <MPU9250_Gyroscope_Configuration+0xa8>
	else if( Range == MPU9250_Gyro_1000s )	DataStructure->Gyroscope_sensitivity_factor = MPU9250_GYRO_SENSITIVITY_FACTOR_1000s;
 8003e8c:	79fb      	ldrb	r3, [r7, #7]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d103      	bne.n	8003e9a <MPU9250_Gyroscope_Configuration+0x9c>
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	2220      	movs	r2, #32
 8003e96:	805a      	strh	r2, [r3, #2]
 8003e98:	e005      	b.n	8003ea6 <MPU9250_Gyroscope_Configuration+0xa8>
	else if( Range == MPU9250_Gyro_2000s )	DataStructure->Gyroscope_sensitivity_factor = MPU9250_GYRO_SENSITIVITY_FACTOR_2000s;
 8003e9a:	79fb      	ldrb	r3, [r7, #7]
 8003e9c:	2b03      	cmp	r3, #3
 8003e9e:	d102      	bne.n	8003ea6 <MPU9250_Gyroscope_Configuration+0xa8>
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2210      	movs	r2, #16
 8003ea4:	805a      	strh	r2, [r3, #2]

	DataStructure->Gyroscope_X_offset = 0;
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	f04f 0400 	mov.w	r4, #0
 8003eb0:	e9c2 3404 	strd	r3, r4, [r2, #16]
	DataStructure->Gyroscope_Y_offset = 0;
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	f04f 0400 	mov.w	r4, #0
 8003ebe:	e9c2 3406 	strd	r3, r4, [r2, #24]
	DataStructure->Gyroscope_Z_offset = 0;
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	f04f 0400 	mov.w	r4, #0
 8003ecc:	e9c2 3408 	strd	r3, r4, [r2, #32]

	return MPU9250_Gyroscope_Config_OK;
 8003ed0:	2304      	movs	r3, #4

}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	371c      	adds	r7, #28
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd90      	pop	{r4, r7, pc}
	...

08003edc <MPU9250_Magnetometer_Configuration>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

MPU9250_Error_code MPU9250_Magnetometer_Configuration(I2C_HandleTypeDef *I2Cx,
												      struct MPU9250 *DataStructure) {
 8003edc:	b590      	push	{r4, r7, lr}
 8003ede:	b089      	sub	sp, #36	; 0x24
 8003ee0:	af04      	add	r7, sp, #16
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]


	uint8_t Byte_temp = 0x00;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	73fb      	strb	r3, [r7, #15]
	uint8_t Bytes_temp[3] = {0};
 8003eea:	f107 030c 	add.w	r3, r7, #12
 8003eee:	2100      	movs	r1, #0
 8003ef0:	460a      	mov	r2, r1
 8003ef2:	801a      	strh	r2, [r3, #0]
 8003ef4:	460a      	mov	r2, r1
 8003ef6:	709a      	strb	r2, [r3, #2]

	DataStructure->Magnetometer_addres = 0x0C << 1;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	2218      	movs	r2, #24
 8003efc:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
	DataStructure->Magnetometer_sesitivity_factor = 0.1499; /* 4912/32768 */
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	4aaa      	ldr	r2, [pc, #680]	; (80041ac <MPU9250_Magnetometer_Configuration+0x2d0>)
 8003f04:	f8c3 2178 	str.w	r2, [r3, #376]	; 0x178

	// Case 2: Disable the I2C master interface
	Byte_temp = 0x00;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	73fb      	strb	r3, [r7, #15]

	if( HAL_I2C_Mem_Write(I2Cx, DataStructure->Device_addres, MPU9250_USER_CTRL, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	785b      	ldrb	r3, [r3, #1]
 8003f10:	b299      	uxth	r1, r3
 8003f12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f16:	9302      	str	r3, [sp, #8]
 8003f18:	2301      	movs	r3, #1
 8003f1a:	9301      	str	r3, [sp, #4]
 8003f1c:	f107 030f 	add.w	r3, r7, #15
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	2301      	movs	r3, #1
 8003f24:	226a      	movs	r2, #106	; 0x6a
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f003 fc2a 	bl	8007780 <HAL_I2C_Mem_Write>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <MPU9250_Magnetometer_Configuration+0x5a>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 8003f32:	2307      	movs	r3, #7
 8003f34:	e135      	b.n	80041a2 <MPU9250_Magnetometer_Configuration+0x2c6>
	}

	// Case 3: Enable the bypass multiplexer
	Byte_temp = 0x02;
 8003f36:	2302      	movs	r3, #2
 8003f38:	73fb      	strb	r3, [r7, #15]

	if( HAL_I2C_Mem_Write(I2Cx, DataStructure->Device_addres, MPU9250_INT_PIN_CFG, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	785b      	ldrb	r3, [r3, #1]
 8003f3e:	b299      	uxth	r1, r3
 8003f40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f44:	9302      	str	r3, [sp, #8]
 8003f46:	2301      	movs	r3, #1
 8003f48:	9301      	str	r3, [sp, #4]
 8003f4a:	f107 030f 	add.w	r3, r7, #15
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	2301      	movs	r3, #1
 8003f52:	2237      	movs	r2, #55	; 0x37
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f003 fc13 	bl	8007780 <HAL_I2C_Mem_Write>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d001      	beq.n	8003f64 <MPU9250_Magnetometer_Configuration+0x88>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 8003f60:	2307      	movs	r3, #7
 8003f62:	e11e      	b.n	80041a2 <MPU9250_Magnetometer_Configuration+0x2c6>
	}

	// Case 1: Is device connected ?
	if( HAL_I2C_IsDeviceReady(I2Cx, DataStructure->Magnetometer_addres, 1, 1000) != HAL_OK ) {
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 8003f6a:	b299      	uxth	r1, r3
 8003f6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f70:	2201      	movs	r2, #1
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f003 ff34 	bl	8007de0 <HAL_I2C_IsDeviceReady>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <MPU9250_Magnetometer_Configuration+0xa6>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 8003f7e:	2307      	movs	r3, #7
 8003f80:	e10f      	b.n	80041a2 <MPU9250_Magnetometer_Configuration+0x2c6>
	}

	// Case 2: Who am i test
	if( HAL_I2C_Mem_Read(I2Cx, DataStructure->Magnetometer_addres, AK9863_WIA, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 8003f88:	b299      	uxth	r1, r3
 8003f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f8e:	9302      	str	r3, [sp, #8]
 8003f90:	2301      	movs	r3, #1
 8003f92:	9301      	str	r3, [sp, #4]
 8003f94:	f107 030f 	add.w	r3, r7, #15
 8003f98:	9300      	str	r3, [sp, #0]
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f003 fce8 	bl	8007974 <HAL_I2C_Mem_Read>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <MPU9250_Magnetometer_Configuration+0xd2>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Init_FAIL;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e0f9      	b.n	80041a2 <MPU9250_Magnetometer_Configuration+0x2c6>
	}

	if( Byte_temp != 0x48 ) {
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	2b48      	cmp	r3, #72	; 0x48
 8003fb2:	d001      	beq.n	8003fb8 <MPU9250_Magnetometer_Configuration+0xdc>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Init_FAIL;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0f4      	b.n	80041a2 <MPU9250_Magnetometer_Configuration+0x2c6>
	}

	// Case 4: Setup to fuse ROM access mode and 16-bit output
	Byte_temp = 0x1F;
 8003fb8:	231f      	movs	r3, #31
 8003fba:	73fb      	strb	r3, [r7, #15]

	if( HAL_I2C_Mem_Write(I2Cx, DataStructure->Magnetometer_addres, AK9863_CNTL1, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 8003fc2:	b299      	uxth	r1, r3
 8003fc4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fc8:	9302      	str	r3, [sp, #8]
 8003fca:	2301      	movs	r3, #1
 8003fcc:	9301      	str	r3, [sp, #4]
 8003fce:	f107 030f 	add.w	r3, r7, #15
 8003fd2:	9300      	str	r3, [sp, #0]
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	220a      	movs	r2, #10
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f003 fbd1 	bl	8007780 <HAL_I2C_Mem_Write>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <MPU9250_Magnetometer_Configuration+0x10c>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 8003fe4:	2307      	movs	r3, #7
 8003fe6:	e0dc      	b.n	80041a2 <MPU9250_Magnetometer_Configuration+0x2c6>
	}

	HAL_Delay(100);
 8003fe8:	2064      	movs	r0, #100	; 0x64
 8003fea:	f002 fd61 	bl	8006ab0 <HAL_Delay>

	// Case 5: Read from the fuse ROM sensitivity adjustment values
	if( HAL_I2C_Mem_Read(I2Cx, DataStructure->Magnetometer_addres, AK9863_ASAX | 0x80, 1, Bytes_temp, 3, 1000) != HAL_OK ) {
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 8003ff4:	b299      	uxth	r1, r3
 8003ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ffa:	9302      	str	r3, [sp, #8]
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	9301      	str	r3, [sp, #4]
 8004000:	f107 030c 	add.w	r3, r7, #12
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	2301      	movs	r3, #1
 8004008:	2290      	movs	r2, #144	; 0x90
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f003 fcb2 	bl	8007974 <HAL_I2C_Mem_Read>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <MPU9250_Magnetometer_Configuration+0x13e>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 8004016:	2307      	movs	r3, #7
 8004018:	e0c3      	b.n	80041a2 <MPU9250_Magnetometer_Configuration+0x2c6>
	}

	DataStructure->Magnetometer_ASAX = ( ( (Bytes_temp[0] - 128) * 0.5 ) / 128 ) + 1;
 800401a:	7b3b      	ldrb	r3, [r7, #12]
 800401c:	3b80      	subs	r3, #128	; 0x80
 800401e:	4618      	mov	r0, r3
 8004020:	f7fc f9e8 	bl	80003f4 <__aeabi_i2d>
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	4b61      	ldr	r3, [pc, #388]	; (80041b0 <MPU9250_Magnetometer_Configuration+0x2d4>)
 800402a:	f7fc fa4d 	bl	80004c8 <__aeabi_dmul>
 800402e:	4603      	mov	r3, r0
 8004030:	460c      	mov	r4, r1
 8004032:	4618      	mov	r0, r3
 8004034:	4621      	mov	r1, r4
 8004036:	f04f 0200 	mov.w	r2, #0
 800403a:	4b5e      	ldr	r3, [pc, #376]	; (80041b4 <MPU9250_Magnetometer_Configuration+0x2d8>)
 800403c:	f7fc fb6e 	bl	800071c <__aeabi_ddiv>
 8004040:	4603      	mov	r3, r0
 8004042:	460c      	mov	r4, r1
 8004044:	4618      	mov	r0, r3
 8004046:	4621      	mov	r1, r4
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	4b5a      	ldr	r3, [pc, #360]	; (80041b8 <MPU9250_Magnetometer_Configuration+0x2dc>)
 800404e:	f7fc f885 	bl	800015c <__adddf3>
 8004052:	4603      	mov	r3, r0
 8004054:	460c      	mov	r4, r1
 8004056:	4618      	mov	r0, r3
 8004058:	4621      	mov	r1, r4
 800405a:	f7fc fd0d 	bl	8000a78 <__aeabi_d2f>
 800405e:	4602      	mov	r2, r0
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
	DataStructure->Magnetometer_ASAY = ( ( (Bytes_temp[1] - 128) * 0.5 ) / 128 ) + 1;
 8004066:	7b7b      	ldrb	r3, [r7, #13]
 8004068:	3b80      	subs	r3, #128	; 0x80
 800406a:	4618      	mov	r0, r3
 800406c:	f7fc f9c2 	bl	80003f4 <__aeabi_i2d>
 8004070:	f04f 0200 	mov.w	r2, #0
 8004074:	4b4e      	ldr	r3, [pc, #312]	; (80041b0 <MPU9250_Magnetometer_Configuration+0x2d4>)
 8004076:	f7fc fa27 	bl	80004c8 <__aeabi_dmul>
 800407a:	4603      	mov	r3, r0
 800407c:	460c      	mov	r4, r1
 800407e:	4618      	mov	r0, r3
 8004080:	4621      	mov	r1, r4
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	4b4b      	ldr	r3, [pc, #300]	; (80041b4 <MPU9250_Magnetometer_Configuration+0x2d8>)
 8004088:	f7fc fb48 	bl	800071c <__aeabi_ddiv>
 800408c:	4603      	mov	r3, r0
 800408e:	460c      	mov	r4, r1
 8004090:	4618      	mov	r0, r3
 8004092:	4621      	mov	r1, r4
 8004094:	f04f 0200 	mov.w	r2, #0
 8004098:	4b47      	ldr	r3, [pc, #284]	; (80041b8 <MPU9250_Magnetometer_Configuration+0x2dc>)
 800409a:	f7fc f85f 	bl	800015c <__adddf3>
 800409e:	4603      	mov	r3, r0
 80040a0:	460c      	mov	r4, r1
 80040a2:	4618      	mov	r0, r3
 80040a4:	4621      	mov	r1, r4
 80040a6:	f7fc fce7 	bl	8000a78 <__aeabi_d2f>
 80040aa:	4602      	mov	r2, r0
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	DataStructure->Magnetometer_ASAZ = ( ( (Bytes_temp[2] - 128) * 0.5 ) / 128 ) + 1;
 80040b2:	7bbb      	ldrb	r3, [r7, #14]
 80040b4:	3b80      	subs	r3, #128	; 0x80
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fc f99c 	bl	80003f4 <__aeabi_i2d>
 80040bc:	f04f 0200 	mov.w	r2, #0
 80040c0:	4b3b      	ldr	r3, [pc, #236]	; (80041b0 <MPU9250_Magnetometer_Configuration+0x2d4>)
 80040c2:	f7fc fa01 	bl	80004c8 <__aeabi_dmul>
 80040c6:	4603      	mov	r3, r0
 80040c8:	460c      	mov	r4, r1
 80040ca:	4618      	mov	r0, r3
 80040cc:	4621      	mov	r1, r4
 80040ce:	f04f 0200 	mov.w	r2, #0
 80040d2:	4b38      	ldr	r3, [pc, #224]	; (80041b4 <MPU9250_Magnetometer_Configuration+0x2d8>)
 80040d4:	f7fc fb22 	bl	800071c <__aeabi_ddiv>
 80040d8:	4603      	mov	r3, r0
 80040da:	460c      	mov	r4, r1
 80040dc:	4618      	mov	r0, r3
 80040de:	4621      	mov	r1, r4
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	4b34      	ldr	r3, [pc, #208]	; (80041b8 <MPU9250_Magnetometer_Configuration+0x2dc>)
 80040e6:	f7fc f839 	bl	800015c <__adddf3>
 80040ea:	4603      	mov	r3, r0
 80040ec:	460c      	mov	r4, r1
 80040ee:	4618      	mov	r0, r3
 80040f0:	4621      	mov	r1, r4
 80040f2:	f7fc fcc1 	bl	8000a78 <__aeabi_d2f>
 80040f6:	4602      	mov	r2, r0
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

	// Case 6: Reset to power down mode
	Byte_temp = 0x00;
 80040fe:	2300      	movs	r3, #0
 8004100:	73fb      	strb	r3, [r7, #15]

	if( HAL_I2C_Mem_Write(I2Cx, DataStructure->Magnetometer_addres, AK9863_CNTL1, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 8004108:	b299      	uxth	r1, r3
 800410a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800410e:	9302      	str	r3, [sp, #8]
 8004110:	2301      	movs	r3, #1
 8004112:	9301      	str	r3, [sp, #4]
 8004114:	f107 030f 	add.w	r3, r7, #15
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	2301      	movs	r3, #1
 800411c:	220a      	movs	r2, #10
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f003 fb2e 	bl	8007780 <HAL_I2C_Mem_Write>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <MPU9250_Magnetometer_Configuration+0x252>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 800412a:	2307      	movs	r3, #7
 800412c:	e039      	b.n	80041a2 <MPU9250_Magnetometer_Configuration+0x2c6>
	}

	// Case 7: Enable continuous mode 2 and 16-bit output
	Byte_temp = 0x16; // 0x16
 800412e:	2316      	movs	r3, #22
 8004130:	73fb      	strb	r3, [r7, #15]

	if( HAL_I2C_Mem_Write(I2Cx, DataStructure->Magnetometer_addres, AK9863_CNTL1, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 8004138:	b299      	uxth	r1, r3
 800413a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800413e:	9302      	str	r3, [sp, #8]
 8004140:	2301      	movs	r3, #1
 8004142:	9301      	str	r3, [sp, #4]
 8004144:	f107 030f 	add.w	r3, r7, #15
 8004148:	9300      	str	r3, [sp, #0]
 800414a:	2301      	movs	r3, #1
 800414c:	220a      	movs	r2, #10
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f003 fb16 	bl	8007780 <HAL_I2C_Mem_Write>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <MPU9250_Magnetometer_Configuration+0x282>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 800415a:	2307      	movs	r3, #7
 800415c:	e021      	b.n	80041a2 <MPU9250_Magnetometer_Configuration+0x2c6>
	}

	HAL_Delay(100);
 800415e:	2064      	movs	r0, #100	; 0x64
 8004160:	f002 fca6 	bl	8006ab0 <HAL_Delay>

	/* Default variables value */
	DataStructure->Magnetometer_X_scale = 1;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800416a:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	DataStructure->Magnetometer_Y_scale = 1;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004174:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	DataStructure->Magnetometer_Z_scale = 1;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800417e:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

	DataStructure->Magnetometer_X_offset = 0;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	DataStructure->Magnetometer_Y_offset = 0;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	f04f 0200 	mov.w	r2, #0
 8004192:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	DataStructure->Magnetometer_Z_offset = 0;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	f04f 0200 	mov.w	r2, #0
 800419c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198

	return MPU9250_Magnetometer_Config_OK;
 80041a0:	2306      	movs	r3, #6
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd90      	pop	{r4, r7, pc}
 80041aa:	bf00      	nop
 80041ac:	3e197f63 	.word	0x3e197f63
 80041b0:	3fe00000 	.word	0x3fe00000
 80041b4:	40600000 	.word	0x40600000
 80041b8:	3ff00000 	.word	0x3ff00000

080041bc <MPU9250_Init>:

MPU9250_Error_code MPU9250_Init(I2C_HandleTypeDef *I2Cx,
								struct MPU9250 *DataStructure,
								MPU9250_Device_number Number,
								MPU9250_Acce_range Acce_range,
								MPU9250_Gyro_range Gyro_range) {
 80041bc:	b580      	push	{r7, lr}
 80041be:	b08a      	sub	sp, #40	; 0x28
 80041c0:	af04      	add	r7, sp, #16
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	4611      	mov	r1, r2
 80041c8:	461a      	mov	r2, r3
 80041ca:	460b      	mov	r3, r1
 80041cc:	71fb      	strb	r3, [r7, #7]
 80041ce:	4613      	mov	r3, r2
 80041d0:	71bb      	strb	r3, [r7, #6]

	uint8_t Byte_temp = 0x00;
 80041d2:	2300      	movs	r3, #0
 80041d4:	75fb      	strb	r3, [r7, #23]

	DataStructure->Device_number = Number;
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	79fa      	ldrb	r2, [r7, #7]
 80041da:	701a      	strb	r2, [r3, #0]
	DataStructure->Device_addres = (0x68 | DataStructure->Device_number) << 1;
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	f063 032f 	orn	r3, r3, #47	; 0x2f
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	705a      	strb	r2, [r3, #1]

	/* Case 1: Is device connected ? */
	if( HAL_I2C_IsDeviceReady(I2Cx, DataStructure->Device_addres, 1, 1000) != HAL_OK ) {
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	785b      	ldrb	r3, [r3, #1]
 80041f2:	b299      	uxth	r1, r3
 80041f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041f8:	2201      	movs	r2, #1
 80041fa:	68f8      	ldr	r0, [r7, #12]
 80041fc:	f003 fdf0 	bl	8007de0 <HAL_I2C_IsDeviceReady>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <MPU9250_Init+0x4e>

		return MPU9250_Init_FAIL;
 8004206:	2301      	movs	r3, #1
 8004208:	e067      	b.n	80042da <MPU9250_Init+0x11e>
	}

	/* Case 2: Who am i test */
	if( HAL_I2C_Mem_Read(I2Cx, DataStructure->Device_addres, MPU9250_WHO_AM_I, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	785b      	ldrb	r3, [r3, #1]
 800420e:	b299      	uxth	r1, r3
 8004210:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004214:	9302      	str	r3, [sp, #8]
 8004216:	2301      	movs	r3, #1
 8004218:	9301      	str	r3, [sp, #4]
 800421a:	f107 0317 	add.w	r3, r7, #23
 800421e:	9300      	str	r3, [sp, #0]
 8004220:	2301      	movs	r3, #1
 8004222:	2275      	movs	r2, #117	; 0x75
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f003 fba5 	bl	8007974 <HAL_I2C_Mem_Read>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <MPU9250_Init+0x78>

		return MPU9250_Init_FAIL;
 8004230:	2301      	movs	r3, #1
 8004232:	e052      	b.n	80042da <MPU9250_Init+0x11e>
	}

	if( Byte_temp != 0x71 ) {
 8004234:	7dfb      	ldrb	r3, [r7, #23]
 8004236:	2b71      	cmp	r3, #113	; 0x71
 8004238:	d001      	beq.n	800423e <MPU9250_Init+0x82>

		return MPU9250_Init_FAIL;
 800423a:	2301      	movs	r3, #1
 800423c:	e04d      	b.n	80042da <MPU9250_Init+0x11e>
	}

	/* Case 3: Wake up */
	Byte_temp = 0x01;
 800423e:	2301      	movs	r3, #1
 8004240:	75fb      	strb	r3, [r7, #23]

	if( HAL_I2C_Mem_Write(I2Cx, DataStructure->Device_addres, MPU9250_PWR_MGMT_1, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	785b      	ldrb	r3, [r3, #1]
 8004246:	b299      	uxth	r1, r3
 8004248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800424c:	9302      	str	r3, [sp, #8]
 800424e:	2301      	movs	r3, #1
 8004250:	9301      	str	r3, [sp, #4]
 8004252:	f107 0317 	add.w	r3, r7, #23
 8004256:	9300      	str	r3, [sp, #0]
 8004258:	2301      	movs	r3, #1
 800425a:	226b      	movs	r2, #107	; 0x6b
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f003 fa8f 	bl	8007780 <HAL_I2C_Mem_Write>
 8004262:	4603      	mov	r3, r0
 8004264:	2b00      	cmp	r3, #0
 8004266:	d001      	beq.n	800426c <MPU9250_Init+0xb0>

		return MPU9250_Init_FAIL;
 8004268:	2301      	movs	r3, #1
 800426a:	e036      	b.n	80042da <MPU9250_Init+0x11e>
	}

	/* Case 4: Accelerometer configuration */
	if( MPU9250_Accelerometer_Configuration(I2Cx, DataStructure, Acce_range) != MPU9250_Accelerometer_Config_OK ) {
 800426c:	79bb      	ldrb	r3, [r7, #6]
 800426e:	461a      	mov	r2, r3
 8004270:	68b9      	ldr	r1, [r7, #8]
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f7ff fd64 	bl	8003d40 <MPU9250_Accelerometer_Configuration>
 8004278:	4603      	mov	r3, r0
 800427a:	2b02      	cmp	r3, #2
 800427c:	d001      	beq.n	8004282 <MPU9250_Init+0xc6>

		return MPU9250_Accelerometer_Config_FAIL;
 800427e:	2303      	movs	r3, #3
 8004280:	e02b      	b.n	80042da <MPU9250_Init+0x11e>
	}

	/* Case 5: Gyroscope configuration */
	if( MPU9250_Gyroscope_Configuration(I2Cx, DataStructure, Gyro_range) != MPU9250_Gyroscope_Config_OK ) {
 8004282:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004286:	461a      	mov	r2, r3
 8004288:	68b9      	ldr	r1, [r7, #8]
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f7ff fdb7 	bl	8003dfe <MPU9250_Gyroscope_Configuration>
 8004290:	4603      	mov	r3, r0
 8004292:	2b04      	cmp	r3, #4
 8004294:	d001      	beq.n	800429a <MPU9250_Init+0xde>

		return MPU9250_Gyroscope_Config_FAIL;
 8004296:	2305      	movs	r3, #5
 8004298:	e01f      	b.n	80042da <MPU9250_Init+0x11e>
	}

	/* Case 6: Magnetometer configuration */
	if( MPU9250_Magnetometer_Configuration(I2Cx, DataStructure) != MPU9250_Magnetometer_Config_OK ) {
 800429a:	68b9      	ldr	r1, [r7, #8]
 800429c:	68f8      	ldr	r0, [r7, #12]
 800429e:	f7ff fe1d 	bl	8003edc <MPU9250_Magnetometer_Configuration>
 80042a2:	4603      	mov	r3, r0
 80042a4:	2b06      	cmp	r3, #6
 80042a6:	d001      	beq.n	80042ac <MPU9250_Init+0xf0>

		return MPU9250_Magnetometer_Config_FAIL;
 80042a8:	2307      	movs	r3, #7
 80042aa:	e016      	b.n	80042da <MPU9250_Init+0x11e>
	}

	/* Case 7: Default values of variables */

	quaternion_init( &(DataStructure->Gyroscope_quaternion) );
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	3340      	adds	r3, #64	; 0x40
 80042b0:	4618      	mov	r0, r3
 80042b2:	f001 fced 	bl	8005c90 <quaternion_init>
	euler_init( &(DataStructure->Gyroscope_euler) );
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	3380      	adds	r3, #128	; 0x80
 80042ba:	4618      	mov	r0, r3
 80042bc:	f001 fd0e 	bl	8005cdc <euler_init>

	quaternion_init( &(DataStructure->Madgwick_quaternion) );
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80042c6:	4618      	mov	r0, r3
 80042c8:	f001 fce2 	bl	8005c90 <quaternion_init>
	euler_init( &(DataStructure->Madgwick_euler) );
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f503 731a 	add.w	r3, r3, #616	; 0x268
 80042d2:	4618      	mov	r0, r3
 80042d4:	f001 fd02 	bl	8005cdc <euler_init>

	return MPU9250_Init_OK;
 80042d8:	2300      	movs	r3, #0
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <MPU9250_Read_Accelerometer>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

MPU9250_Error_code MPU9250_Read_Accelerometer(I2C_HandleTypeDef *I2Cx,
											  struct MPU9250 *DataStructure) {
 80042e2:	b590      	push	{r4, r7, lr}
 80042e4:	b089      	sub	sp, #36	; 0x24
 80042e6:	af04      	add	r7, sp, #16
 80042e8:	6078      	str	r0, [r7, #4]
 80042ea:	6039      	str	r1, [r7, #0]

	uint8_t Bytes_temp[6] = {0x00};
 80042ec:	f107 0308 	add.w	r3, r7, #8
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	809a      	strh	r2, [r3, #4]

	if( HAL_I2C_Mem_Read(I2Cx, DataStructure->Device_addres, MPU9250_ACCEL_XOUT_H, 1, Bytes_temp , 6, 1000) != HAL_OK ) {
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	785b      	ldrb	r3, [r3, #1]
 80042fa:	b299      	uxth	r1, r3
 80042fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004300:	9302      	str	r3, [sp, #8]
 8004302:	2306      	movs	r3, #6
 8004304:	9301      	str	r3, [sp, #4]
 8004306:	f107 0308 	add.w	r3, r7, #8
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	2301      	movs	r3, #1
 800430e:	223b      	movs	r2, #59	; 0x3b
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f003 fb2f 	bl	8007974 <HAL_I2C_Mem_Read>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d001      	beq.n	8004320 <MPU9250_Read_Accelerometer+0x3e>

		return MPU9250_Read_Accelerometer_FAIL;
 800431c:	230f      	movs	r3, #15
 800431e:	e0a2      	b.n	8004466 <MPU9250_Read_Accelerometer+0x184>
	}

	DataStructure->Accelerometer_X = ( Bytes_temp[0] << 8 | Bytes_temp[1] ) - DataStructure->Accelerometer_X_offset;
 8004320:	7a3b      	ldrb	r3, [r7, #8]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	7a7a      	ldrb	r2, [r7, #9]
 8004326:	4313      	orrs	r3, r2
 8004328:	4618      	mov	r0, r3
 800432a:	f7fc f863 	bl	80003f4 <__aeabi_i2d>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8004334:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004338:	461a      	mov	r2, r3
 800433a:	4623      	mov	r3, r4
 800433c:	f7fb ff0c 	bl	8000158 <__aeabi_dsub>
 8004340:	4603      	mov	r3, r0
 8004342:	460c      	mov	r4, r1
 8004344:	4618      	mov	r0, r3
 8004346:	4621      	mov	r1, r4
 8004348:	f7fc fb6e 	bl	8000a28 <__aeabi_d2iz>
 800434c:	4603      	mov	r3, r0
 800434e:	b21a      	sxth	r2, r3
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
	DataStructure->Accelerometer_Y = ( Bytes_temp[2] << 8 | Bytes_temp[3] ) - DataStructure->Accelerometer_Y_offset;
 8004356:	7abb      	ldrb	r3, [r7, #10]
 8004358:	021b      	lsls	r3, r3, #8
 800435a:	7afa      	ldrb	r2, [r7, #11]
 800435c:	4313      	orrs	r3, r2
 800435e:	4618      	mov	r0, r3
 8004360:	f7fc f848 	bl	80003f4 <__aeabi_i2d>
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800436a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800436e:	461a      	mov	r2, r3
 8004370:	4623      	mov	r3, r4
 8004372:	f7fb fef1 	bl	8000158 <__aeabi_dsub>
 8004376:	4603      	mov	r3, r0
 8004378:	460c      	mov	r4, r1
 800437a:	4618      	mov	r0, r3
 800437c:	4621      	mov	r1, r4
 800437e:	f7fc fb53 	bl	8000a28 <__aeabi_d2iz>
 8004382:	4603      	mov	r3, r0
 8004384:	b21a      	sxth	r2, r3
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
	DataStructure->Accelerometer_Z = ( Bytes_temp[4] << 8 | Bytes_temp[5] ) - DataStructure->Accelerometer_Z_offset;
 800438c:	7b3b      	ldrb	r3, [r7, #12]
 800438e:	021b      	lsls	r3, r3, #8
 8004390:	7b7a      	ldrb	r2, [r7, #13]
 8004392:	4313      	orrs	r3, r2
 8004394:	4618      	mov	r0, r3
 8004396:	f7fc f82d 	bl	80003f4 <__aeabi_i2d>
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 80043a0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80043a4:	461a      	mov	r2, r3
 80043a6:	4623      	mov	r3, r4
 80043a8:	f7fb fed6 	bl	8000158 <__aeabi_dsub>
 80043ac:	4603      	mov	r3, r0
 80043ae:	460c      	mov	r4, r1
 80043b0:	4618      	mov	r0, r3
 80043b2:	4621      	mov	r1, r4
 80043b4:	f7fc fb38 	bl	8000a28 <__aeabi_d2iz>
 80043b8:	4603      	mov	r3, r0
 80043ba:	b21a      	sxth	r2, r3
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92

	/* Case x: Calculate g-force values for XYZ axis */
	DataStructure->Accelerometer_X_g = (float)(DataStructure->Accelerometer_X) / DataStructure->Accelerometer_sensitivity_factor;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fc fc5f 	bl	8000c8c <__aeabi_i2f>
 80043ce:	4604      	mov	r4, r0
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fc fc58 	bl	8000c8c <__aeabi_i2f>
 80043dc:	4603      	mov	r3, r0
 80043de:	4619      	mov	r1, r3
 80043e0:	4620      	mov	r0, r4
 80043e2:	f7fc fd5b 	bl	8000e9c <__aeabi_fdiv>
 80043e6:	4603      	mov	r3, r0
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fc f815 	bl	8000418 <__aeabi_f2d>
 80043ee:	4603      	mov	r3, r0
 80043f0:	460c      	mov	r4, r1
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
	DataStructure->Accelerometer_Y_g = (float)(DataStructure->Accelerometer_Y) / DataStructure->Accelerometer_sensitivity_factor;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fc fc44 	bl	8000c8c <__aeabi_i2f>
 8004404:	4604      	mov	r4, r0
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 800440c:	4618      	mov	r0, r3
 800440e:	f7fc fc3d 	bl	8000c8c <__aeabi_i2f>
 8004412:	4603      	mov	r3, r0
 8004414:	4619      	mov	r1, r3
 8004416:	4620      	mov	r0, r4
 8004418:	f7fc fd40 	bl	8000e9c <__aeabi_fdiv>
 800441c:	4603      	mov	r3, r0
 800441e:	4618      	mov	r0, r3
 8004420:	f7fb fffa 	bl	8000418 <__aeabi_f2d>
 8004424:	4603      	mov	r3, r0
 8004426:	460c      	mov	r4, r1
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	DataStructure->Accelerometer_Z_g = (float)(DataStructure->Accelerometer_Z) / DataStructure->Accelerometer_sensitivity_factor;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8004434:	4618      	mov	r0, r3
 8004436:	f7fc fc29 	bl	8000c8c <__aeabi_i2f>
 800443a:	4604      	mov	r4, r0
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8004442:	4618      	mov	r0, r3
 8004444:	f7fc fc22 	bl	8000c8c <__aeabi_i2f>
 8004448:	4603      	mov	r3, r0
 800444a:	4619      	mov	r1, r3
 800444c:	4620      	mov	r0, r4
 800444e:	f7fc fd25 	bl	8000e9c <__aeabi_fdiv>
 8004452:	4603      	mov	r3, r0
 8004454:	4618      	mov	r0, r3
 8004456:	f7fb ffdf 	bl	8000418 <__aeabi_f2d>
 800445a:	4603      	mov	r3, r0
 800445c:	460c      	mov	r4, r1
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0

	return MPU9250_Read_Accelerometer_OK;
 8004464:	230e      	movs	r3, #14
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	bd90      	pop	{r4, r7, pc}

0800446e <MPU9250_Read_Gyroscope>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

MPU9250_Error_code MPU9250_Read_Gyroscope(I2C_HandleTypeDef *I2Cx,
										  struct MPU9250 *DataStructure) {
 800446e:	b5b0      	push	{r4, r5, r7, lr}
 8004470:	b088      	sub	sp, #32
 8004472:	af04      	add	r7, sp, #16
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	6039      	str	r1, [r7, #0]

	uint8_t Bytes_temp[6] = { 0x00 };
 8004478:	f107 0308 	add.w	r3, r7, #8
 800447c:	2200      	movs	r2, #0
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	809a      	strh	r2, [r3, #4]

	if (HAL_I2C_Mem_Read(I2Cx, DataStructure->Device_addres, MPU9250_GYRO_XOUT_H, 1, Bytes_temp, 6, 1000) != HAL_OK) {
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	785b      	ldrb	r3, [r3, #1]
 8004486:	b299      	uxth	r1, r3
 8004488:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800448c:	9302      	str	r3, [sp, #8]
 800448e:	2306      	movs	r3, #6
 8004490:	9301      	str	r3, [sp, #4]
 8004492:	f107 0308 	add.w	r3, r7, #8
 8004496:	9300      	str	r3, [sp, #0]
 8004498:	2301      	movs	r3, #1
 800449a:	2243      	movs	r2, #67	; 0x43
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f003 fa69 	bl	8007974 <HAL_I2C_Mem_Read>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <MPU9250_Read_Gyroscope+0x3e>

		return MPU9250_Read_Gyroscope_FAIL;
 80044a8:	2311      	movs	r3, #17
 80044aa:	e099      	b.n	80045e0 <MPU9250_Read_Gyroscope+0x172>
	}

	DataStructure->Gyroscope_X = ( Bytes_temp[0] << 8 | Bytes_temp[1] ) - DataStructure->Gyroscope_X_offset;
 80044ac:	7a3b      	ldrb	r3, [r7, #8]
 80044ae:	021b      	lsls	r3, r3, #8
 80044b0:	7a7a      	ldrb	r2, [r7, #9]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7fb ff9d 	bl	80003f4 <__aeabi_i2d>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	f103 0410 	add.w	r4, r3, #16
 80044c0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80044c4:	461a      	mov	r2, r3
 80044c6:	4623      	mov	r3, r4
 80044c8:	f7fb fe46 	bl	8000158 <__aeabi_dsub>
 80044cc:	4603      	mov	r3, r0
 80044ce:	460c      	mov	r4, r1
 80044d0:	4618      	mov	r0, r3
 80044d2:	4621      	mov	r1, r4
 80044d4:	f7fc faa8 	bl	8000a28 <__aeabi_d2iz>
 80044d8:	4603      	mov	r3, r0
 80044da:	b21a      	sxth	r2, r3
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	809a      	strh	r2, [r3, #4]
	DataStructure->Gyroscope_Y = ( Bytes_temp[2] << 8 | Bytes_temp[3] ) - DataStructure->Gyroscope_Y_offset;
 80044e0:	7abb      	ldrb	r3, [r7, #10]
 80044e2:	021b      	lsls	r3, r3, #8
 80044e4:	7afa      	ldrb	r2, [r7, #11]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7fb ff83 	bl	80003f4 <__aeabi_i2d>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	f103 0418 	add.w	r4, r3, #24
 80044f4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80044f8:	461a      	mov	r2, r3
 80044fa:	4623      	mov	r3, r4
 80044fc:	f7fb fe2c 	bl	8000158 <__aeabi_dsub>
 8004500:	4603      	mov	r3, r0
 8004502:	460c      	mov	r4, r1
 8004504:	4618      	mov	r0, r3
 8004506:	4621      	mov	r1, r4
 8004508:	f7fc fa8e 	bl	8000a28 <__aeabi_d2iz>
 800450c:	4603      	mov	r3, r0
 800450e:	b21a      	sxth	r2, r3
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	80da      	strh	r2, [r3, #6]
	DataStructure->Gyroscope_Z = ( Bytes_temp[4] << 8 | Bytes_temp[5] ) - DataStructure->Gyroscope_Z_offset;
 8004514:	7b3b      	ldrb	r3, [r7, #12]
 8004516:	021b      	lsls	r3, r3, #8
 8004518:	7b7a      	ldrb	r2, [r7, #13]
 800451a:	4313      	orrs	r3, r2
 800451c:	4618      	mov	r0, r3
 800451e:	f7fb ff69 	bl	80003f4 <__aeabi_i2d>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	f103 0420 	add.w	r4, r3, #32
 8004528:	e9d4 3400 	ldrd	r3, r4, [r4]
 800452c:	461a      	mov	r2, r3
 800452e:	4623      	mov	r3, r4
 8004530:	f7fb fe12 	bl	8000158 <__aeabi_dsub>
 8004534:	4603      	mov	r3, r0
 8004536:	460c      	mov	r4, r1
 8004538:	4618      	mov	r0, r3
 800453a:	4621      	mov	r1, r4
 800453c:	f7fc fa74 	bl	8000a28 <__aeabi_d2iz>
 8004540:	4603      	mov	r3, r0
 8004542:	b21a      	sxth	r2, r3
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	811a      	strh	r2, [r3, #8]

	/* Case x: Calculate dgs/s values for XYZ axis */
	DataStructure->Gyroscope_X_dgs =  (double)(DataStructure->Gyroscope_X) / DataStructure->Gyroscope_sensitivity_factor;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800454e:	4618      	mov	r0, r3
 8004550:	f7fb ff50 	bl	80003f4 <__aeabi_i2d>
 8004554:	4604      	mov	r4, r0
 8004556:	460d      	mov	r5, r1
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800455e:	4618      	mov	r0, r3
 8004560:	f7fb ff48 	bl	80003f4 <__aeabi_i2d>
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	4620      	mov	r0, r4
 800456a:	4629      	mov	r1, r5
 800456c:	f7fc f8d6 	bl	800071c <__aeabi_ddiv>
 8004570:	4603      	mov	r3, r0
 8004572:	460c      	mov	r4, r1
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	DataStructure->Gyroscope_Y_dgs =  (double)(DataStructure->Gyroscope_Y) / DataStructure->Gyroscope_sensitivity_factor;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004580:	4618      	mov	r0, r3
 8004582:	f7fb ff37 	bl	80003f4 <__aeabi_i2d>
 8004586:	4604      	mov	r4, r0
 8004588:	460d      	mov	r5, r1
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004590:	4618      	mov	r0, r3
 8004592:	f7fb ff2f 	bl	80003f4 <__aeabi_i2d>
 8004596:	4602      	mov	r2, r0
 8004598:	460b      	mov	r3, r1
 800459a:	4620      	mov	r0, r4
 800459c:	4629      	mov	r1, r5
 800459e:	f7fc f8bd 	bl	800071c <__aeabi_ddiv>
 80045a2:	4603      	mov	r3, r0
 80045a4:	460c      	mov	r4, r1
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	DataStructure->Gyroscope_Z_dgs =  (double)(DataStructure->Gyroscope_Z) / DataStructure->Gyroscope_sensitivity_factor;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7fb ff1e 	bl	80003f4 <__aeabi_i2d>
 80045b8:	4604      	mov	r4, r0
 80045ba:	460d      	mov	r5, r1
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f7fb ff16 	bl	80003f4 <__aeabi_i2d>
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	4620      	mov	r0, r4
 80045ce:	4629      	mov	r1, r5
 80045d0:	f7fc f8a4 	bl	800071c <__aeabi_ddiv>
 80045d4:	4603      	mov	r3, r0
 80045d6:	460c      	mov	r4, r1
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	return MPU9250_Read_Gyroscope_OK;
 80045de:	2310      	movs	r3, #16
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bdb0      	pop	{r4, r5, r7, pc}

080045e8 <MPU9250_Read_Magnetometer>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

MPU9250_Error_code MPU9250_Read_Magnetometer(I2C_HandleTypeDef *I2Cx,
										     struct MPU9250 *DataStructure) {
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08c      	sub	sp, #48	; 0x30
 80045ec:	af04      	add	r7, sp, #16
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	6039      	str	r1, [r7, #0]

	uint8_t Bytes_temp[8] = { 0x00 };
 80045f2:	f107 030c 	add.w	r3, r7, #12
 80045f6:	2200      	movs	r2, #0
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	605a      	str	r2, [r3, #4]

	/* Case x: Read measured values from registers */
	if( HAL_I2C_Mem_Read(I2Cx, DataStructure->Magnetometer_addres, AK9863_ST1, 1, Bytes_temp, 8, 1000) != HAL_OK ) {
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
 8004602:	b299      	uxth	r1, r3
 8004604:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004608:	9302      	str	r3, [sp, #8]
 800460a:	2308      	movs	r3, #8
 800460c:	9301      	str	r3, [sp, #4]
 800460e:	f107 030c 	add.w	r3, r7, #12
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	2301      	movs	r3, #1
 8004616:	2202      	movs	r2, #2
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f003 f9ab 	bl	8007974 <HAL_I2C_Mem_Read>
 800461e:	4603      	mov	r3, r0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d001      	beq.n	8004628 <MPU9250_Read_Magnetometer+0x40>

		return MPU9250_Read_Magnetometer_FAIL;
 8004624:	2313      	movs	r3, #19
 8004626:	e0d1      	b.n	80047cc <MPU9250_Read_Magnetometer+0x1e4>
	if( Bytes_temp[0] & 0x00 ) {

		return MPU9250_Read_Magnetometer_FAIL;
	}

	DataStructure->Magnetometer_X = ( ( Bytes_temp[2] << 8 | Bytes_temp[1] ) - DataStructure->Magnetometer_X_offset );
 8004628:	7bbb      	ldrb	r3, [r7, #14]
 800462a:	021b      	lsls	r3, r3, #8
 800462c:	7b7a      	ldrb	r2, [r7, #13]
 800462e:	4313      	orrs	r3, r2
 8004630:	4618      	mov	r0, r3
 8004632:	f7fc fb2b 	bl	8000c8c <__aeabi_i2f>
 8004636:	4602      	mov	r2, r0
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 800463e:	4619      	mov	r1, r3
 8004640:	4610      	mov	r0, r2
 8004642:	f7fc fa6d 	bl	8000b20 <__aeabi_fsub>
 8004646:	4603      	mov	r3, r0
 8004648:	4618      	mov	r0, r3
 800464a:	f7fc fd39 	bl	80010c0 <__aeabi_f2iz>
 800464e:	4603      	mov	r3, r0
 8004650:	b21a      	sxth	r2, r3
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	f8a3 2188 	strh.w	r2, [r3, #392]	; 0x188
	DataStructure->Magnetometer_Y = ( ( Bytes_temp[4] << 8 | Bytes_temp[3] ) - DataStructure->Magnetometer_Y_offset );
 8004658:	7c3b      	ldrb	r3, [r7, #16]
 800465a:	021b      	lsls	r3, r3, #8
 800465c:	7bfa      	ldrb	r2, [r7, #15]
 800465e:	4313      	orrs	r3, r2
 8004660:	4618      	mov	r0, r3
 8004662:	f7fc fb13 	bl	8000c8c <__aeabi_i2f>
 8004666:	4602      	mov	r2, r0
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800466e:	4619      	mov	r1, r3
 8004670:	4610      	mov	r0, r2
 8004672:	f7fc fa55 	bl	8000b20 <__aeabi_fsub>
 8004676:	4603      	mov	r3, r0
 8004678:	4618      	mov	r0, r3
 800467a:	f7fc fd21 	bl	80010c0 <__aeabi_f2iz>
 800467e:	4603      	mov	r3, r0
 8004680:	b21a      	sxth	r2, r3
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	f8a3 218a 	strh.w	r2, [r3, #394]	; 0x18a
	DataStructure->Magnetometer_Z = ( ( Bytes_temp[6] << 8 | Bytes_temp[5] ) - DataStructure->Magnetometer_Z_offset );
 8004688:	7cbb      	ldrb	r3, [r7, #18]
 800468a:	021b      	lsls	r3, r3, #8
 800468c:	7c7a      	ldrb	r2, [r7, #17]
 800468e:	4313      	orrs	r3, r2
 8004690:	4618      	mov	r0, r3
 8004692:	f7fc fafb 	bl	8000c8c <__aeabi_i2f>
 8004696:	4602      	mov	r2, r0
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800469e:	4619      	mov	r1, r3
 80046a0:	4610      	mov	r0, r2
 80046a2:	f7fc fa3d 	bl	8000b20 <__aeabi_fsub>
 80046a6:	4603      	mov	r3, r0
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7fc fd09 	bl	80010c0 <__aeabi_f2iz>
 80046ae:	4603      	mov	r3, r0
 80046b0:	b21a      	sxth	r2, r3
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	f8a3 218c 	strh.w	r2, [r3, #396]	; 0x18c

	/* Case x: Calculate uT (micro Tesla) value for XYZ axis */
	DataStructure->Magnetometer_X_uT = DataStructure->Magnetometer_X * DataStructure->Magnetometer_ASAX * DataStructure->Magnetometer_sesitivity_factor * DataStructure->Magnetometer_X_scale;
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	f9b3 3188 	ldrsh.w	r3, [r3, #392]	; 0x188
 80046be:	4618      	mov	r0, r3
 80046c0:	f7fc fae4 	bl	8000c8c <__aeabi_i2f>
 80046c4:	4602      	mov	r2, r0
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
 80046cc:	4619      	mov	r1, r3
 80046ce:	4610      	mov	r0, r2
 80046d0:	f7fc fb30 	bl	8000d34 <__aeabi_fmul>
 80046d4:	4603      	mov	r3, r0
 80046d6:	461a      	mov	r2, r3
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 80046de:	4619      	mov	r1, r3
 80046e0:	4610      	mov	r0, r2
 80046e2:	f7fc fb27 	bl	8000d34 <__aeabi_fmul>
 80046e6:	4603      	mov	r3, r0
 80046e8:	461a      	mov	r2, r3
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80046f0:	4619      	mov	r1, r3
 80046f2:	4610      	mov	r0, r2
 80046f4:	f7fc fb1e 	bl	8000d34 <__aeabi_fmul>
 80046f8:	4603      	mov	r3, r0
 80046fa:	461a      	mov	r2, r3
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	DataStructure->Magnetometer_Y_uT = DataStructure->Magnetometer_Y * DataStructure->Magnetometer_ASAY * DataStructure->Magnetometer_sesitivity_factor * DataStructure->Magnetometer_Y_scale;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	f9b3 318a 	ldrsh.w	r3, [r3, #394]	; 0x18a
 8004708:	4618      	mov	r0, r3
 800470a:	f7fc fabf 	bl	8000c8c <__aeabi_i2f>
 800470e:	4602      	mov	r2, r0
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 8004716:	4619      	mov	r1, r3
 8004718:	4610      	mov	r0, r2
 800471a:	f7fc fb0b 	bl	8000d34 <__aeabi_fmul>
 800471e:	4603      	mov	r3, r0
 8004720:	461a      	mov	r2, r3
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8004728:	4619      	mov	r1, r3
 800472a:	4610      	mov	r0, r2
 800472c:	f7fc fb02 	bl	8000d34 <__aeabi_fmul>
 8004730:	4603      	mov	r3, r0
 8004732:	461a      	mov	r2, r3
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 800473a:	4619      	mov	r1, r3
 800473c:	4610      	mov	r0, r2
 800473e:	f7fc faf9 	bl	8000d34 <__aeabi_fmul>
 8004742:	4603      	mov	r3, r0
 8004744:	461a      	mov	r2, r3
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	DataStructure->Magnetometer_Z_uT = DataStructure->Magnetometer_Z * DataStructure->Magnetometer_ASAZ * DataStructure->Magnetometer_sesitivity_factor * DataStructure->Magnetometer_Z_scale;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	f9b3 318c 	ldrsh.w	r3, [r3, #396]	; 0x18c
 8004752:	4618      	mov	r0, r3
 8004754:	f7fc fa9a 	bl	8000c8c <__aeabi_i2f>
 8004758:	4602      	mov	r2, r0
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 8004760:	4619      	mov	r1, r3
 8004762:	4610      	mov	r0, r2
 8004764:	f7fc fae6 	bl	8000d34 <__aeabi_fmul>
 8004768:	4603      	mov	r3, r0
 800476a:	461a      	mov	r2, r3
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	f8d3 3178 	ldr.w	r3, [r3, #376]	; 0x178
 8004772:	4619      	mov	r1, r3
 8004774:	4610      	mov	r0, r2
 8004776:	f7fc fadd 	bl	8000d34 <__aeabi_fmul>
 800477a:	4603      	mov	r3, r0
 800477c:	461a      	mov	r2, r3
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004784:	4619      	mov	r1, r3
 8004786:	4610      	mov	r0, r2
 8004788:	f7fc fad4 	bl	8000d34 <__aeabi_fmul>
 800478c:	4603      	mov	r3, r0
 800478e:	461a      	mov	r2, r3
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4

	float a = DataStructure->Magnetometer_X_uT;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800479c:	61fb      	str	r3, [r7, #28]
	float b = DataStructure->Magnetometer_Y_uT;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80047a4:	61bb      	str	r3, [r7, #24]
	float c = DataStructure->Magnetometer_Z_uT;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 80047ac:	617b      	str	r3, [r7, #20]

	DataStructure->Magnetometer_X_uT = b;
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
	DataStructure->Magnetometer_Y_uT = a;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	69fa      	ldr	r2, [r7, #28]
 80047ba:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
	DataStructure->Magnetometer_Z_uT = -c;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4

	return MPU9250_Read_Magnetometer_OK;
 80047ca:	2312      	movs	r3, #18
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3720      	adds	r7, #32
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <MPU9250_Calibration_Acce>:

/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

void MPU9250_Calibration_Acce(I2C_HandleTypeDef *I2Cx,
	      	  	  	  	  	  	  	        struct MPU9250 *DataStructure) {
 80047d4:	b5b0      	push	{r4, r5, r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]

	float Acce_X_offset = 0, Acce_Y_offset = 0, Acce_Z_offset = 0;
 80047de:	f04f 0300 	mov.w	r3, #0
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	f04f 0300 	mov.w	r3, #0
 80047ee:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 1000; ++i) {
 80047f0:	2300      	movs	r3, #0
 80047f2:	60bb      	str	r3, [r7, #8]
 80047f4:	e02d      	b.n	8004852 <MPU9250_Calibration_Acce+0x7e>

		MPU9250_Read_Accelerometer(I2Cx, DataStructure);
 80047f6:	6839      	ldr	r1, [r7, #0]
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f7ff fd72 	bl	80042e2 <MPU9250_Read_Accelerometer>

		Acce_X_offset = Acce_X_offset + DataStructure->Accelerometer_X;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8004804:	4618      	mov	r0, r3
 8004806:	f7fc fa41 	bl	8000c8c <__aeabi_i2f>
 800480a:	4603      	mov	r3, r0
 800480c:	4619      	mov	r1, r3
 800480e:	6978      	ldr	r0, [r7, #20]
 8004810:	f7fc f988 	bl	8000b24 <__addsf3>
 8004814:	4603      	mov	r3, r0
 8004816:	617b      	str	r3, [r7, #20]
		Acce_Y_offset = Acce_Y_offset + DataStructure->Accelerometer_Y;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	f9b3 3090 	ldrsh.w	r3, [r3, #144]	; 0x90
 800481e:	4618      	mov	r0, r3
 8004820:	f7fc fa34 	bl	8000c8c <__aeabi_i2f>
 8004824:	4603      	mov	r3, r0
 8004826:	4619      	mov	r1, r3
 8004828:	6938      	ldr	r0, [r7, #16]
 800482a:	f7fc f97b 	bl	8000b24 <__addsf3>
 800482e:	4603      	mov	r3, r0
 8004830:	613b      	str	r3, [r7, #16]
		Acce_Z_offset = Acce_Z_offset + DataStructure->Accelerometer_Z;
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	f9b3 3092 	ldrsh.w	r3, [r3, #146]	; 0x92
 8004838:	4618      	mov	r0, r3
 800483a:	f7fc fa27 	bl	8000c8c <__aeabi_i2f>
 800483e:	4603      	mov	r3, r0
 8004840:	4619      	mov	r1, r3
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f7fc f96e 	bl	8000b24 <__addsf3>
 8004848:	4603      	mov	r3, r0
 800484a:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 1000; ++i) {
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	3301      	adds	r3, #1
 8004850:	60bb      	str	r3, [r7, #8]
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004858:	dbcd      	blt.n	80047f6 <MPU9250_Calibration_Acce+0x22>
	}

	DataStructure->Accelerometer_X_offset = Acce_X_offset / 1000;
 800485a:	491f      	ldr	r1, [pc, #124]	; (80048d8 <MPU9250_Calibration_Acce+0x104>)
 800485c:	6978      	ldr	r0, [r7, #20]
 800485e:	f7fc fb1d 	bl	8000e9c <__aeabi_fdiv>
 8004862:	4603      	mov	r3, r0
 8004864:	4618      	mov	r0, r3
 8004866:	f7fb fdd7 	bl	8000418 <__aeabi_f2d>
 800486a:	4603      	mov	r3, r0
 800486c:	460c      	mov	r4, r1
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	DataStructure->Accelerometer_Y_offset = Acce_Y_offset / 1000;
 8004874:	4918      	ldr	r1, [pc, #96]	; (80048d8 <MPU9250_Calibration_Acce+0x104>)
 8004876:	6938      	ldr	r0, [r7, #16]
 8004878:	f7fc fb10 	bl	8000e9c <__aeabi_fdiv>
 800487c:	4603      	mov	r3, r0
 800487e:	4618      	mov	r0, r3
 8004880:	f7fb fdca 	bl	8000418 <__aeabi_f2d>
 8004884:	4603      	mov	r3, r0
 8004886:	460c      	mov	r4, r1
 8004888:	683a      	ldr	r2, [r7, #0]
 800488a:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0
	DataStructure->Accelerometer_Z_offset = Acce_Z_offset / 1000;
 800488e:	4912      	ldr	r1, [pc, #72]	; (80048d8 <MPU9250_Calibration_Acce+0x104>)
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f7fc fb03 	bl	8000e9c <__aeabi_fdiv>
 8004896:	4603      	mov	r3, r0
 8004898:	4618      	mov	r0, r3
 800489a:	f7fb fdbd 	bl	8000418 <__aeabi_f2d>
 800489e:	4603      	mov	r3, r0
 80048a0:	460c      	mov	r4, r1
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8


	DataStructure->Accelerometer_Z_offset = DataStructure->Accelerometer_Z_offset - DataStructure->Accelerometer_sensitivity_factor;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	e9d3 452a 	ldrd	r4, r5, [r3, #168]	; 0xa8
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7fb fd9d 	bl	80003f4 <__aeabi_i2d>
 80048ba:	4602      	mov	r2, r0
 80048bc:	460b      	mov	r3, r1
 80048be:	4620      	mov	r0, r4
 80048c0:	4629      	mov	r1, r5
 80048c2:	f7fb fc49 	bl	8000158 <__aeabi_dsub>
 80048c6:	4603      	mov	r3, r0
 80048c8:	460c      	mov	r4, r1
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
}
 80048d0:	bf00      	nop
 80048d2:	3718      	adds	r7, #24
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bdb0      	pop	{r4, r5, r7, pc}
 80048d8:	447a0000 	.word	0x447a0000

080048dc <MPU9250_Calibration_Gyro>:

/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

void MPU9250_Calibration_Gyro(I2C_HandleTypeDef *I2Cx,
	      	  	  	  	  	  	  	        struct MPU9250 *DataStructure) {
 80048dc:	b590      	push	{r4, r7, lr}
 80048de:	b08b      	sub	sp, #44	; 0x2c
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]

	double Gyro_X_offset = 0, Gyro_Y_offset = 0, Gyro_Z_offset = 0;
 80048e6:	f04f 0300 	mov.w	r3, #0
 80048ea:	f04f 0400 	mov.w	r4, #0
 80048ee:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	f04f 0400 	mov.w	r4, #0
 80048fa:	e9c7 3406 	strd	r3, r4, [r7, #24]
 80048fe:	f04f 0300 	mov.w	r3, #0
 8004902:	f04f 0400 	mov.w	r4, #0
 8004906:	e9c7 3404 	strd	r3, r4, [r7, #16]

	for (int i = 0; i < 1000; ++i) {
 800490a:	2300      	movs	r3, #0
 800490c:	60fb      	str	r3, [r7, #12]
 800490e:	e03c      	b.n	800498a <MPU9250_Calibration_Gyro+0xae>

		MPU9250_Read_Gyroscope(I2Cx, DataStructure);
 8004910:	6839      	ldr	r1, [r7, #0]
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f7ff fdab 	bl	800446e <MPU9250_Read_Gyroscope>

		Gyro_X_offset += DataStructure->Gyroscope_X;
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800491e:	4618      	mov	r0, r3
 8004920:	f7fb fd68 	bl	80003f4 <__aeabi_i2d>
 8004924:	4603      	mov	r3, r0
 8004926:	460c      	mov	r4, r1
 8004928:	461a      	mov	r2, r3
 800492a:	4623      	mov	r3, r4
 800492c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004930:	f7fb fc14 	bl	800015c <__adddf3>
 8004934:	4603      	mov	r3, r0
 8004936:	460c      	mov	r4, r1
 8004938:	e9c7 3408 	strd	r3, r4, [r7, #32]
		Gyro_Y_offset += DataStructure->Gyroscope_Y;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004942:	4618      	mov	r0, r3
 8004944:	f7fb fd56 	bl	80003f4 <__aeabi_i2d>
 8004948:	4603      	mov	r3, r0
 800494a:	460c      	mov	r4, r1
 800494c:	461a      	mov	r2, r3
 800494e:	4623      	mov	r3, r4
 8004950:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004954:	f7fb fc02 	bl	800015c <__adddf3>
 8004958:	4603      	mov	r3, r0
 800495a:	460c      	mov	r4, r1
 800495c:	e9c7 3406 	strd	r3, r4, [r7, #24]
		Gyro_Z_offset += DataStructure->Gyroscope_Z;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004966:	4618      	mov	r0, r3
 8004968:	f7fb fd44 	bl	80003f4 <__aeabi_i2d>
 800496c:	4603      	mov	r3, r0
 800496e:	460c      	mov	r4, r1
 8004970:	461a      	mov	r2, r3
 8004972:	4623      	mov	r3, r4
 8004974:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004978:	f7fb fbf0 	bl	800015c <__adddf3>
 800497c:	4603      	mov	r3, r0
 800497e:	460c      	mov	r4, r1
 8004980:	e9c7 3404 	strd	r3, r4, [r7, #16]
	for (int i = 0; i < 1000; ++i) {
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	3301      	adds	r3, #1
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004990:	dbbe      	blt.n	8004910 <MPU9250_Calibration_Gyro+0x34>
	}

	DataStructure->Gyroscope_X_offset = Gyro_X_offset / 1000;
 8004992:	f04f 0200 	mov.w	r2, #0
 8004996:	4b13      	ldr	r3, [pc, #76]	; (80049e4 <MPU9250_Calibration_Gyro+0x108>)
 8004998:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800499c:	f7fb febe 	bl	800071c <__aeabi_ddiv>
 80049a0:	4603      	mov	r3, r0
 80049a2:	460c      	mov	r4, r1
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	e9c2 3404 	strd	r3, r4, [r2, #16]
	DataStructure->Gyroscope_Y_offset = Gyro_Y_offset / 1000;
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	4b0d      	ldr	r3, [pc, #52]	; (80049e4 <MPU9250_Calibration_Gyro+0x108>)
 80049b0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80049b4:	f7fb feb2 	bl	800071c <__aeabi_ddiv>
 80049b8:	4603      	mov	r3, r0
 80049ba:	460c      	mov	r4, r1
 80049bc:	683a      	ldr	r2, [r7, #0]
 80049be:	e9c2 3406 	strd	r3, r4, [r2, #24]
	DataStructure->Gyroscope_Z_offset = Gyro_Z_offset / 1000;
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	4b07      	ldr	r3, [pc, #28]	; (80049e4 <MPU9250_Calibration_Gyro+0x108>)
 80049c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80049cc:	f7fb fea6 	bl	800071c <__aeabi_ddiv>
 80049d0:	4603      	mov	r3, r0
 80049d2:	460c      	mov	r4, r1
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	e9c2 3408 	strd	r3, r4, [r2, #32]

}
 80049da:	bf00      	nop
 80049dc:	372c      	adds	r7, #44	; 0x2c
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd90      	pop	{r4, r7, pc}
 80049e2:	bf00      	nop
 80049e4:	408f4000 	.word	0x408f4000

080049e8 <MPU9250_Calibration_Mag>:

/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
void MPU9250_Calibration_Mag(I2C_HandleTypeDef *I2Cx,
	      	  	  	  	  	  	  	        struct MPU9250 *DataStructure) {
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08e      	sub	sp, #56	; 0x38
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]

	float X_max = -99999, X_min = 99999, Y_max = -99999, Y_min = 99999, Z_max = -99999, Z_min = 99999;
 80049f2:	4b91      	ldr	r3, [pc, #580]	; (8004c38 <MPU9250_Calibration_Mag+0x250>)
 80049f4:	637b      	str	r3, [r7, #52]	; 0x34
 80049f6:	4b91      	ldr	r3, [pc, #580]	; (8004c3c <MPU9250_Calibration_Mag+0x254>)
 80049f8:	633b      	str	r3, [r7, #48]	; 0x30
 80049fa:	4b8f      	ldr	r3, [pc, #572]	; (8004c38 <MPU9250_Calibration_Mag+0x250>)
 80049fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049fe:	4b8f      	ldr	r3, [pc, #572]	; (8004c3c <MPU9250_Calibration_Mag+0x254>)
 8004a00:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a02:	4b8d      	ldr	r3, [pc, #564]	; (8004c38 <MPU9250_Calibration_Mag+0x250>)
 8004a04:	627b      	str	r3, [r7, #36]	; 0x24
 8004a06:	4b8d      	ldr	r3, [pc, #564]	; (8004c3c <MPU9250_Calibration_Mag+0x254>)
 8004a08:	623b      	str	r3, [r7, #32]

	/* Hard Iron effect compensation */
	for (int i = 0; i < 1000; ++i) {
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	61fb      	str	r3, [r7, #28]
 8004a0e:	e08d      	b.n	8004b2c <MPU9250_Calibration_Mag+0x144>

		MPU9250_Read_Magnetometer(I2Cx, DataStructure);
 8004a10:	6839      	ldr	r1, [r7, #0]
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff fde8 	bl	80045e8 <MPU9250_Read_Magnetometer>

		if (DataStructure->Magnetometer_X > X_max)
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	f9b3 3188 	ldrsh.w	r3, [r3, #392]	; 0x188
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fc f934 	bl	8000c8c <__aeabi_i2f>
 8004a24:	4603      	mov	r3, r0
 8004a26:	4619      	mov	r1, r3
 8004a28:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004a2a:	f7fc fb21 	bl	8001070 <__aeabi_fcmplt>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d007      	beq.n	8004a44 <MPU9250_Calibration_Mag+0x5c>
			X_max = DataStructure->Magnetometer_X;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	f9b3 3188 	ldrsh.w	r3, [r3, #392]	; 0x188
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fc f926 	bl	8000c8c <__aeabi_i2f>
 8004a40:	4603      	mov	r3, r0
 8004a42:	637b      	str	r3, [r7, #52]	; 0x34
		if (DataStructure->Magnetometer_Y > Y_max)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	f9b3 318a 	ldrsh.w	r3, [r3, #394]	; 0x18a
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fc f91e 	bl	8000c8c <__aeabi_i2f>
 8004a50:	4603      	mov	r3, r0
 8004a52:	4619      	mov	r1, r3
 8004a54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a56:	f7fc fb0b 	bl	8001070 <__aeabi_fcmplt>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d007      	beq.n	8004a70 <MPU9250_Calibration_Mag+0x88>
			Y_max = DataStructure->Magnetometer_Y;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	f9b3 318a 	ldrsh.w	r3, [r3, #394]	; 0x18a
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fc f910 	bl	8000c8c <__aeabi_i2f>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (DataStructure->Magnetometer_Z > Z_max)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	f9b3 318c 	ldrsh.w	r3, [r3, #396]	; 0x18c
 8004a76:	4618      	mov	r0, r3
 8004a78:	f7fc f908 	bl	8000c8c <__aeabi_i2f>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	4619      	mov	r1, r3
 8004a80:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004a82:	f7fc faf5 	bl	8001070 <__aeabi_fcmplt>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d007      	beq.n	8004a9c <MPU9250_Calibration_Mag+0xb4>
			Z_max = DataStructure->Magnetometer_Z;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	f9b3 318c 	ldrsh.w	r3, [r3, #396]	; 0x18c
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7fc f8fa 	bl	8000c8c <__aeabi_i2f>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24

		if (DataStructure->Magnetometer_X < X_min)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	f9b3 3188 	ldrsh.w	r3, [r3, #392]	; 0x188
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7fc f8f2 	bl	8000c8c <__aeabi_i2f>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	4619      	mov	r1, r3
 8004aac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004aae:	f7fc fafd 	bl	80010ac <__aeabi_fcmpgt>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d007      	beq.n	8004ac8 <MPU9250_Calibration_Mag+0xe0>
			X_min = DataStructure->Magnetometer_X;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	f9b3 3188 	ldrsh.w	r3, [r3, #392]	; 0x188
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fc f8e4 	bl	8000c8c <__aeabi_i2f>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	633b      	str	r3, [r7, #48]	; 0x30
		if (DataStructure->Magnetometer_Y < Y_min)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	f9b3 318a 	ldrsh.w	r3, [r3, #394]	; 0x18a
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7fc f8dc 	bl	8000c8c <__aeabi_i2f>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ada:	f7fc fae7 	bl	80010ac <__aeabi_fcmpgt>
 8004ade:	4603      	mov	r3, r0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d007      	beq.n	8004af4 <MPU9250_Calibration_Mag+0x10c>
			Y_min = DataStructure->Magnetometer_Y;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	f9b3 318a 	ldrsh.w	r3, [r3, #394]	; 0x18a
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fc f8ce 	bl	8000c8c <__aeabi_i2f>
 8004af0:	4603      	mov	r3, r0
 8004af2:	62bb      	str	r3, [r7, #40]	; 0x28
		if (DataStructure->Magnetometer_Z < Z_min)
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	f9b3 318c 	ldrsh.w	r3, [r3, #396]	; 0x18c
 8004afa:	4618      	mov	r0, r3
 8004afc:	f7fc f8c6 	bl	8000c8c <__aeabi_i2f>
 8004b00:	4603      	mov	r3, r0
 8004b02:	4619      	mov	r1, r3
 8004b04:	6a38      	ldr	r0, [r7, #32]
 8004b06:	f7fc fad1 	bl	80010ac <__aeabi_fcmpgt>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d007      	beq.n	8004b20 <MPU9250_Calibration_Mag+0x138>
			Z_min = DataStructure->Magnetometer_Z;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	f9b3 318c 	ldrsh.w	r3, [r3, #396]	; 0x18c
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fc f8b8 	bl	8000c8c <__aeabi_i2f>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	623b      	str	r3, [r7, #32]

		HAL_Delay(20);
 8004b20:	2014      	movs	r0, #20
 8004b22:	f001 ffc5 	bl	8006ab0 <HAL_Delay>
	for (int i = 0; i < 1000; ++i) {
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	61fb      	str	r3, [r7, #28]
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b32:	f6ff af6d 	blt.w	8004a10 <MPU9250_Calibration_Mag+0x28>
	}

	DataStructure->Magnetometer_X_offset = (X_max + X_min) / 2;
 8004b36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b38:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004b3a:	f7fb fff3 	bl	8000b24 <__addsf3>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fc f9a9 	bl	8000e9c <__aeabi_fdiv>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	DataStructure->Magnetometer_Y_offset = (Y_max + Y_min) / 2;
 8004b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b56:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004b58:	f7fb ffe4 	bl	8000b24 <__addsf3>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fc f99a 	bl	8000e9c <__aeabi_fdiv>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
	DataStructure->Magnetometer_Z_offset = (Z_max + Z_min) / 2;
 8004b72:	6a39      	ldr	r1, [r7, #32]
 8004b74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b76:	f7fb ffd5 	bl	8000b24 <__addsf3>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fc f98b 	bl	8000e9c <__aeabi_fdiv>
 8004b86:	4603      	mov	r3, r0
 8004b88:	461a      	mov	r2, r3
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198

	/* Soft Iron effect compensation */
	float delta_x = (X_max - X_min) / 2;
 8004b90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b92:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004b94:	f7fb ffc4 	bl	8000b20 <__aeabi_fsub>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	f7fc f97c 	bl	8000e9c <__aeabi_fdiv>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	61bb      	str	r3, [r7, #24]
	float delta_y = (Y_max - Y_min) / 2;
 8004ba8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004baa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bac:	f7fb ffb8 	bl	8000b20 <__aeabi_fsub>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7fc f970 	bl	8000e9c <__aeabi_fdiv>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	617b      	str	r3, [r7, #20]
	float delta_z = (Z_max - Z_min) / 2;
 8004bc0:	6a39      	ldr	r1, [r7, #32]
 8004bc2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bc4:	f7fb ffac 	bl	8000b20 <__aeabi_fsub>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f7fc f964 	bl	8000e9c <__aeabi_fdiv>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	613b      	str	r3, [r7, #16]

	float delta = (delta_x + delta_y + delta_z) / 3;
 8004bd8:	6979      	ldr	r1, [r7, #20]
 8004bda:	69b8      	ldr	r0, [r7, #24]
 8004bdc:	f7fb ffa2 	bl	8000b24 <__addsf3>
 8004be0:	4603      	mov	r3, r0
 8004be2:	6939      	ldr	r1, [r7, #16]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f7fb ff9d 	bl	8000b24 <__addsf3>
 8004bea:	4603      	mov	r3, r0
 8004bec:	4914      	ldr	r1, [pc, #80]	; (8004c40 <MPU9250_Calibration_Mag+0x258>)
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fc f954 	bl	8000e9c <__aeabi_fdiv>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	60fb      	str	r3, [r7, #12]

	DataStructure->Magnetometer_X_scale = delta / delta_x;
 8004bf8:	69b9      	ldr	r1, [r7, #24]
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f7fc f94e 	bl	8000e9c <__aeabi_fdiv>
 8004c00:	4603      	mov	r3, r0
 8004c02:	461a      	mov	r2, r3
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
	DataStructure->Magnetometer_Y_scale = delta / delta_y;
 8004c0a:	6979      	ldr	r1, [r7, #20]
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f7fc f945 	bl	8000e9c <__aeabi_fdiv>
 8004c12:	4603      	mov	r3, r0
 8004c14:	461a      	mov	r2, r3
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
	DataStructure->Magnetometer_Z_scale = delta / delta_z;
 8004c1c:	6939      	ldr	r1, [r7, #16]
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f7fc f93c 	bl	8000e9c <__aeabi_fdiv>
 8004c24:	4603      	mov	r3, r0
 8004c26:	461a      	mov	r2, r3
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4
}
 8004c2e:	bf00      	nop
 8004c30:	3738      	adds	r7, #56	; 0x38
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	c7c34f80 	.word	0xc7c34f80
 8004c3c:	47c34f80 	.word	0x47c34f80
 8004c40:	40400000 	.word	0x40400000
 8004c44:	00000000 	.word	0x00000000

08004c48 <MPU9250_Calculate_RPY>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

void MPU9250_Calculate_RPY(I2C_HandleTypeDef *I2Cx,
	      	  	  	  	  	  	  		 struct MPU9250 *DataStructure,
										 double dt) {
 8004c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c4c:	b0bb      	sub	sp, #236	; 0xec
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004c52:	63b9      	str	r1, [r7, #56]	; 0x38
 8004c54:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

	/* Case 1: Read data from AHRS */
	MPU9250_Read_Accelerometer(I2Cx, DataStructure);
 8004c58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c5a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004c5c:	f7ff fb41 	bl	80042e2 <MPU9250_Read_Accelerometer>
	MPU9250_Read_Gyroscope(I2Cx, DataStructure);
 8004c60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c62:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004c64:	f7ff fc03 	bl	800446e <MPU9250_Read_Gyroscope>
	MPU9250_Read_Magnetometer(I2Cx, DataStructure);
 8004c68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004c6a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004c6c:	f7ff fcbc 	bl	80045e8 <MPU9250_Read_Magnetometer>

	/* Case 2: Calculate accelerometer quaternion */
	double norm = sqrt( pow(DataStructure->Accelerometer_X_g,2) + pow(DataStructure->Accelerometer_Y_g,2) + pow(DataStructure->Accelerometer_Z_g,2) );
 8004c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c72:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	; 0xb0
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c7e:	f006 f8c7 	bl	800ae10 <pow>
 8004c82:	e9c7 0100 	strd	r0, r1, [r7]
 8004c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c88:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	; 0xb8
 8004c8c:	f04f 0200 	mov.w	r2, #0
 8004c90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004c94:	f006 f8bc 	bl	800ae10 <pow>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	460c      	mov	r4, r1
 8004c9c:	461a      	mov	r2, r3
 8004c9e:	4623      	mov	r3, r4
 8004ca0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ca4:	f7fb fa5a 	bl	800015c <__adddf3>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	460c      	mov	r4, r1
 8004cac:	e9c7 3400 	strd	r3, r4, [r7]
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	; 0xc0
 8004cb6:	f04f 0200 	mov.w	r2, #0
 8004cba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004cbe:	f006 f8a7 	bl	800ae10 <pow>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	460c      	mov	r4, r1
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	4623      	mov	r3, r4
 8004cca:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cce:	f7fb fa45 	bl	800015c <__adddf3>
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	460c      	mov	r4, r1
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	4621      	mov	r1, r4
 8004cda:	f006 f9f5 	bl	800b0c8 <sqrt>
 8004cde:	e9c7 0138 	strd	r0, r1, [r7, #224]	; 0xe0
	DataStructure->Accelerometer_X_g = DataStructure->Accelerometer_X_g / norm;
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce4:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	; 0xb0
 8004ce8:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8004cec:	f7fb fd16 	bl	800071c <__aeabi_ddiv>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	460c      	mov	r4, r1
 8004cf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cf6:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
	DataStructure->Accelerometer_Y_g = DataStructure->Accelerometer_Y_g / norm;
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cfc:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	; 0xb8
 8004d00:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8004d04:	f7fb fd0a 	bl	800071c <__aeabi_ddiv>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	460c      	mov	r4, r1
 8004d0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d0e:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8
	DataStructure->Accelerometer_Z_g = DataStructure->Accelerometer_Z_g / norm;
 8004d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d14:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	; 0xc0
 8004d18:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8004d1c:	f7fb fcfe 	bl	800071c <__aeabi_ddiv>
 8004d20:	4603      	mov	r3, r0
 8004d22:	460c      	mov	r4, r1
 8004d24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d26:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0

	if( DataStructure->Accelerometer_Z_g >= 0 ) {
 8004d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2c:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	; 0xc0
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	f7fb fe4c 	bl	80009d4 <__aeabi_dcmpge>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d05e      	beq.n	8004e00 <MPU9250_Calculate_RPY+0x1b8>

		double a = sqrt( 2 * ( DataStructure->Accelerometer_Z_g + 1 ) );
 8004d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d44:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	; 0xc0
 8004d48:	f04f 0200 	mov.w	r2, #0
 8004d4c:	4b2b      	ldr	r3, [pc, #172]	; (8004dfc <MPU9250_Calculate_RPY+0x1b4>)
 8004d4e:	f7fb fa05 	bl	800015c <__adddf3>
 8004d52:	4603      	mov	r3, r0
 8004d54:	460c      	mov	r4, r1
 8004d56:	4618      	mov	r0, r3
 8004d58:	4621      	mov	r1, r4
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	f7fb f9fd 	bl	800015c <__adddf3>
 8004d62:	4603      	mov	r3, r0
 8004d64:	460c      	mov	r4, r1
 8004d66:	4618      	mov	r0, r3
 8004d68:	4621      	mov	r1, r4
 8004d6a:	f006 f9ad 	bl	800b0c8 <sqrt>
 8004d6e:	e9c7 0134 	strd	r0, r1, [r7, #208]	; 0xd0

		DataStructure->Accelerometer_quaternion.w = sqrt( (DataStructure->Accelerometer_Z_g + 1) / 2 );
 8004d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d74:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	; 0xc0
 8004d78:	f04f 0200 	mov.w	r2, #0
 8004d7c:	4b1f      	ldr	r3, [pc, #124]	; (8004dfc <MPU9250_Calculate_RPY+0x1b4>)
 8004d7e:	f7fb f9ed 	bl	800015c <__adddf3>
 8004d82:	4603      	mov	r3, r0
 8004d84:	460c      	mov	r4, r1
 8004d86:	4618      	mov	r0, r3
 8004d88:	4621      	mov	r1, r4
 8004d8a:	f04f 0200 	mov.w	r2, #0
 8004d8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d92:	f7fb fcc3 	bl	800071c <__aeabi_ddiv>
 8004d96:	4603      	mov	r3, r0
 8004d98:	460c      	mov	r4, r1
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	4621      	mov	r1, r4
 8004d9e:	f006 f993 	bl	800b0c8 <sqrt>
 8004da2:	4603      	mov	r3, r0
 8004da4:	460c      	mov	r4, r1
 8004da6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004da8:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
		DataStructure->Accelerometer_quaternion.x = DataStructure->Accelerometer_Y_g / a;
 8004dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dae:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	; 0xb8
 8004db2:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8004db6:	f7fb fcb1 	bl	800071c <__aeabi_ddiv>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	460c      	mov	r4, r1
 8004dbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dc0:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8
		DataStructure->Accelerometer_quaternion.y = -DataStructure->Accelerometer_X_g / a;
 8004dc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc6:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 8004dca:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004dce:	60bb      	str	r3, [r7, #8]
 8004dd0:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 8004dd4:	60fb      	str	r3, [r7, #12]
 8004dd6:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8004dda:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004dde:	f7fb fc9d 	bl	800071c <__aeabi_ddiv>
 8004de2:	4603      	mov	r3, r0
 8004de4:	460c      	mov	r4, r1
 8004de6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004de8:	e9c2 343c 	strd	r3, r4, [r2, #240]	; 0xf0
		DataStructure->Accelerometer_quaternion.z = 0;
 8004dec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dee:	f04f 0300 	mov.w	r3, #0
 8004df2:	f04f 0400 	mov.w	r4, #0
 8004df6:	e9c2 343e 	strd	r3, r4, [r2, #248]	; 0xf8
 8004dfa:	e067      	b.n	8004ecc <MPU9250_Calculate_RPY+0x284>
 8004dfc:	3ff00000 	.word	0x3ff00000
	}
	else {

		double a = sqrt( 2 * (1 - DataStructure->Accelerometer_Z_g) );
 8004e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e02:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 8004e06:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	4623      	mov	r3, r4
 8004e0e:	f04f 0000 	mov.w	r0, #0
 8004e12:	49b5      	ldr	r1, [pc, #724]	; (80050e8 <MPU9250_Calculate_RPY+0x4a0>)
 8004e14:	f7fb f9a0 	bl	8000158 <__aeabi_dsub>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	460c      	mov	r4, r1
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	4621      	mov	r1, r4
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	f7fb f99a 	bl	800015c <__adddf3>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	4621      	mov	r1, r4
 8004e30:	f006 f94a 	bl	800b0c8 <sqrt>
 8004e34:	e9c7 0136 	strd	r0, r1, [r7, #216]	; 0xd8
		DataStructure->Accelerometer_quaternion.z = -DataStructure->Accelerometer_Y_g / a;
 8004e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3a:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8004e3e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004e42:	469a      	mov	sl, r3
 8004e44:	f084 4b00 	eor.w	fp, r4, #2147483648	; 0x80000000
 8004e48:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8004e4c:	4650      	mov	r0, sl
 8004e4e:	4659      	mov	r1, fp
 8004e50:	f7fb fc64 	bl	800071c <__aeabi_ddiv>
 8004e54:	4603      	mov	r3, r0
 8004e56:	460c      	mov	r4, r1
 8004e58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e5a:	e9c2 343e 	strd	r3, r4, [r2, #248]	; 0xf8
		DataStructure->Accelerometer_quaternion.y = -sqrt( (1 - DataStructure->Accelerometer_Z_g) / 2 );
 8004e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e60:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 8004e64:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004e68:	461a      	mov	r2, r3
 8004e6a:	4623      	mov	r3, r4
 8004e6c:	f04f 0000 	mov.w	r0, #0
 8004e70:	499d      	ldr	r1, [pc, #628]	; (80050e8 <MPU9250_Calculate_RPY+0x4a0>)
 8004e72:	f7fb f971 	bl	8000158 <__aeabi_dsub>
 8004e76:	4603      	mov	r3, r0
 8004e78:	460c      	mov	r4, r1
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	4621      	mov	r1, r4
 8004e7e:	f04f 0200 	mov.w	r2, #0
 8004e82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e86:	f7fb fc49 	bl	800071c <__aeabi_ddiv>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	460c      	mov	r4, r1
 8004e8e:	4618      	mov	r0, r3
 8004e90:	4621      	mov	r1, r4
 8004e92:	f006 f919 	bl	800b0c8 <sqrt>
 8004e96:	4603      	mov	r3, r0
 8004e98:	460c      	mov	r4, r1
 8004e9a:	461d      	mov	r5, r3
 8004e9c:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea2:	e9c3 563c 	strd	r5, r6, [r3, #240]	; 0xf0
		DataStructure->Accelerometer_quaternion.x = 0;
 8004ea6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	f04f 0400 	mov.w	r4, #0
 8004eb0:	e9c2 343a 	strd	r3, r4, [r2, #232]	; 0xe8
		DataStructure->Accelerometer_quaternion.w = DataStructure->Accelerometer_X_g / a;
 8004eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb6:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	; 0xb0
 8004eba:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8004ebe:	f7fb fc2d 	bl	800071c <__aeabi_ddiv>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	460c      	mov	r4, r1
 8004ec6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ec8:	e9c2 3438 	strd	r3, r4, [r2, #224]	; 0xe0
	}

	/* Case 3: Calculate gyroscope quaternion */
	struct quaternion temp_quaternion;
	temp_quaternion.w = 0.5 * DataStructure->Gyroscope_quaternion.w;
 8004ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ece:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8004ed2:	f04f 0200 	mov.w	r2, #0
 8004ed6:	4b85      	ldr	r3, [pc, #532]	; (80050ec <MPU9250_Calculate_RPY+0x4a4>)
 8004ed8:	f7fb faf6 	bl	80004c8 <__aeabi_dmul>
 8004edc:	4603      	mov	r3, r0
 8004ede:	460c      	mov	r4, r1
 8004ee0:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
	temp_quaternion.x = 0.5 * DataStructure->Gyroscope_quaternion.x;
 8004ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee6:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8004eea:	f04f 0200 	mov.w	r2, #0
 8004eee:	4b7f      	ldr	r3, [pc, #508]	; (80050ec <MPU9250_Calculate_RPY+0x4a4>)
 8004ef0:	f7fb faea 	bl	80004c8 <__aeabi_dmul>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0
	temp_quaternion.y = 0.5 * DataStructure->Gyroscope_quaternion.y;
 8004efc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004efe:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8004f02:	f04f 0200 	mov.w	r2, #0
 8004f06:	4b79      	ldr	r3, [pc, #484]	; (80050ec <MPU9250_Calculate_RPY+0x4a4>)
 8004f08:	f7fb fade 	bl	80004c8 <__aeabi_dmul>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	460c      	mov	r4, r1
 8004f10:	e9c7 342e 	strd	r3, r4, [r7, #184]	; 0xb8
	temp_quaternion.z = 0.5 * DataStructure->Gyroscope_quaternion.z;
 8004f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f16:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8004f1a:	f04f 0200 	mov.w	r2, #0
 8004f1e:	4b73      	ldr	r3, [pc, #460]	; (80050ec <MPU9250_Calculate_RPY+0x4a4>)
 8004f20:	f7fb fad2 	bl	80004c8 <__aeabi_dmul>
 8004f24:	4603      	mov	r3, r0
 8004f26:	460c      	mov	r4, r1
 8004f28:	e9c7 3430 	strd	r3, r4, [r7, #192]	; 0xc0

	struct quaternion gyroscope_vector;
	gyroscope_vector.w = 0;
 8004f2c:	f04f 0300 	mov.w	r3, #0
 8004f30:	f04f 0400 	mov.w	r4, #0
 8004f34:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
	gyroscope_vector.x = DataStructure->Gyroscope_X_dgs * (M_PI / 180);
 8004f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8004f3e:	a368      	add	r3, pc, #416	; (adr r3, 80050e0 <MPU9250_Calculate_RPY+0x498>)
 8004f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f44:	f7fb fac0 	bl	80004c8 <__aeabi_dmul>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	460c      	mov	r4, r1
 8004f4c:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90
	gyroscope_vector.y = DataStructure->Gyroscope_Y_dgs * (M_PI / 180);
 8004f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f52:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8004f56:	a362      	add	r3, pc, #392	; (adr r3, 80050e0 <MPU9250_Calculate_RPY+0x498>)
 8004f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5c:	f7fb fab4 	bl	80004c8 <__aeabi_dmul>
 8004f60:	4603      	mov	r3, r0
 8004f62:	460c      	mov	r4, r1
 8004f64:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
	gyroscope_vector.z = DataStructure->Gyroscope_Z_dgs * (M_PI / 180);
 8004f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004f6e:	a35c      	add	r3, pc, #368	; (adr r3, 80050e0 <MPU9250_Calculate_RPY+0x498>)
 8004f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f74:	f7fb faa8 	bl	80004c8 <__aeabi_dmul>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	460c      	mov	r4, r1
 8004f7c:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0

	DataStructure->Gyroscope_quaternion_dot = quaternion_tensor_product(&temp_quaternion, &gyroscope_vector);
 8004f80:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8004f82:	f107 0310 	add.w	r3, r7, #16
 8004f86:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004f8a:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 feb9 	bl	8005d06 <quaternion_tensor_product>
 8004f94:	3460      	adds	r4, #96	; 0x60
 8004f96:	f107 0510 	add.w	r5, r7, #16
 8004f9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004f9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004f9e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004fa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	DataStructure->Gyroscope_quaternion.w = DataStructure->Gyroscope_quaternion.w + (DataStructure->Gyroscope_quaternion_dot.w * dt);
 8004fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa8:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8004fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fae:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	; 0x60
 8004fb2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004fb6:	f7fb fa87 	bl	80004c8 <__aeabi_dmul>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4620      	mov	r0, r4
 8004fc0:	4629      	mov	r1, r5
 8004fc2:	f7fb f8cb 	bl	800015c <__adddf3>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	460c      	mov	r4, r1
 8004fca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004fcc:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	DataStructure->Gyroscope_quaternion.x = DataStructure->Gyroscope_quaternion.x + (DataStructure->Gyroscope_quaternion_dot.x * dt);
 8004fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd2:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8004fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004fdc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004fe0:	f7fb fa72 	bl	80004c8 <__aeabi_dmul>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4620      	mov	r0, r4
 8004fea:	4629      	mov	r1, r5
 8004fec:	f7fb f8b6 	bl	800015c <__adddf3>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	460c      	mov	r4, r1
 8004ff4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ff6:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	DataStructure->Gyroscope_quaternion.y = DataStructure->Gyroscope_quaternion.y + (DataStructure->Gyroscope_quaternion_dot.y * dt);
 8004ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffc:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8005000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005002:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
 8005006:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800500a:	f7fb fa5d 	bl	80004c8 <__aeabi_dmul>
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	4620      	mov	r0, r4
 8005014:	4629      	mov	r1, r5
 8005016:	f7fb f8a1 	bl	800015c <__adddf3>
 800501a:	4603      	mov	r3, r0
 800501c:	460c      	mov	r4, r1
 800501e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005020:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	DataStructure->Gyroscope_quaternion.z = DataStructure->Gyroscope_quaternion.z + (DataStructure->Gyroscope_quaternion_dot.z * dt);
 8005024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005026:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 800502a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800502c:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8005030:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005034:	f7fb fa48 	bl	80004c8 <__aeabi_dmul>
 8005038:	4602      	mov	r2, r0
 800503a:	460b      	mov	r3, r1
 800503c:	4620      	mov	r0, r4
 800503e:	4629      	mov	r1, r5
 8005040:	f7fb f88c 	bl	800015c <__adddf3>
 8005044:	4603      	mov	r3, r0
 8005046:	460c      	mov	r4, r1
 8005048:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800504a:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58

	quaternion_normalise(&DataStructure->Gyroscope_quaternion);
 800504e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005050:	3340      	adds	r3, #64	; 0x40
 8005052:	4618      	mov	r0, r3
 8005054:	f000 ffbf 	bl	8005fd6 <quaternion_normalise>

	struct rot_matrix gyroscope_matrix;
	quaternion_to_matrix(&DataStructure->Gyroscope_quaternion, &gyroscope_matrix);
 8005058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800505a:	3340      	adds	r3, #64	; 0x40
 800505c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8005060:	4611      	mov	r1, r2
 8005062:	4618      	mov	r0, r3
 8005064:	f001 f838 	bl	80060d8 <quaternion_to_matrix>

	matrix_to_euler(&gyroscope_matrix, &DataStructure->Gyroscope_euler);
 8005068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800506a:	f103 0280 	add.w	r2, r3, #128	; 0x80
 800506e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005072:	4611      	mov	r1, r2
 8005074:	4618      	mov	r0, r3
 8005076:	f001 fa1b 	bl	80064b0 <matrix_to_euler>

	/* Case 4: Calculate magnetometer quaternion */
	double L = pow(DataStructure->Magnetometer_X_uT,2) + pow(DataStructure->Magnetometer_Y_uT,2);
 800507a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800507c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8005080:	4618      	mov	r0, r3
 8005082:	f7fb f9c9 	bl	8000418 <__aeabi_f2d>
 8005086:	f04f 0200 	mov.w	r2, #0
 800508a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800508e:	f005 febf 	bl	800ae10 <pow>
 8005092:	4604      	mov	r4, r0
 8005094:	460d      	mov	r5, r1
 8005096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005098:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800509c:	4618      	mov	r0, r3
 800509e:	f7fb f9bb 	bl	8000418 <__aeabi_f2d>
 80050a2:	f04f 0200 	mov.w	r2, #0
 80050a6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80050aa:	f005 feb1 	bl	800ae10 <pow>
 80050ae:	4602      	mov	r2, r0
 80050b0:	460b      	mov	r3, r1
 80050b2:	4620      	mov	r0, r4
 80050b4:	4629      	mov	r1, r5
 80050b6:	f7fb f851 	bl	800015c <__adddf3>
 80050ba:	4603      	mov	r3, r0
 80050bc:	460c      	mov	r4, r1
 80050be:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8

	if( DataStructure->Magnetometer_Y_uT >= 0 ) {
 80050c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c4:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80050c8:	f04f 0100 	mov.w	r1, #0
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fb ffe3 	bl	8001098 <__aeabi_fcmpge>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 809f 	beq.w	8005218 <MPU9250_Calculate_RPY+0x5d0>
 80050da:	e009      	b.n	80050f0 <MPU9250_Calculate_RPY+0x4a8>
 80050dc:	f3af 8000 	nop.w
 80050e0:	a2529d39 	.word	0xa2529d39
 80050e4:	3f91df46 	.word	0x3f91df46
 80050e8:	3ff00000 	.word	0x3ff00000
 80050ec:	3fe00000 	.word	0x3fe00000

		DataStructure->Magnetometer_quaternion.w = -( sqrt( L + (DataStructure->Magnetometer_X_uT * sqrt(L)) ) ) / ( sqrt(2 * L) );
 80050f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050f2:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80050f6:	4618      	mov	r0, r3
 80050f8:	f7fb f98e 	bl	8000418 <__aeabi_f2d>
 80050fc:	4604      	mov	r4, r0
 80050fe:	460d      	mov	r5, r1
 8005100:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005104:	f005 ffe0 	bl	800b0c8 <sqrt>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4620      	mov	r0, r4
 800510e:	4629      	mov	r1, r5
 8005110:	f7fb f9da 	bl	80004c8 <__aeabi_dmul>
 8005114:	4603      	mov	r3, r0
 8005116:	460c      	mov	r4, r1
 8005118:	4618      	mov	r0, r3
 800511a:	4621      	mov	r1, r4
 800511c:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8005120:	f7fb f81c 	bl	800015c <__adddf3>
 8005124:	4603      	mov	r3, r0
 8005126:	460c      	mov	r4, r1
 8005128:	4618      	mov	r0, r3
 800512a:	4621      	mov	r1, r4
 800512c:	f005 ffcc 	bl	800b0c8 <sqrt>
 8005130:	4603      	mov	r3, r0
 8005132:	460c      	mov	r4, r1
 8005134:	4698      	mov	r8, r3
 8005136:	f084 4900 	eor.w	r9, r4, #2147483648	; 0x80000000
 800513a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	f7fb f80b 	bl	800015c <__adddf3>
 8005146:	4603      	mov	r3, r0
 8005148:	460c      	mov	r4, r1
 800514a:	4618      	mov	r0, r3
 800514c:	4621      	mov	r1, r4
 800514e:	f005 ffbb 	bl	800b0c8 <sqrt>
 8005152:	4603      	mov	r3, r0
 8005154:	460c      	mov	r4, r1
 8005156:	461a      	mov	r2, r3
 8005158:	4623      	mov	r3, r4
 800515a:	4640      	mov	r0, r8
 800515c:	4649      	mov	r1, r9
 800515e:	f7fb fadd 	bl	800071c <__aeabi_ddiv>
 8005162:	4603      	mov	r3, r0
 8005164:	460c      	mov	r4, r1
 8005166:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005168:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 800516c:	e9c2 3400 	strd	r3, r4, [r2]
		DataStructure->Magnetometer_quaternion.x = 0;
 8005170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005172:	f503 72e0 	add.w	r2, r3, #448	; 0x1c0
 8005176:	f04f 0300 	mov.w	r3, #0
 800517a:	f04f 0400 	mov.w	r4, #0
 800517e:	e9c2 3400 	strd	r3, r4, [r2]
		DataStructure->Magnetometer_quaternion.y = 0;
 8005182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005184:	f503 72e4 	add.w	r2, r3, #456	; 0x1c8
 8005188:	f04f 0300 	mov.w	r3, #0
 800518c:	f04f 0400 	mov.w	r4, #0
 8005190:	e9c2 3400 	strd	r3, r4, [r2]
		DataStructure->Magnetometer_quaternion.z = ( DataStructure->Magnetometer_Y_uT ) / ( sqrt(2) * sqrt( L + (DataStructure->Magnetometer_X_uT * sqrt(L)) ) );
 8005194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005196:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800519a:	4618      	mov	r0, r3
 800519c:	f7fb f93c 	bl	8000418 <__aeabi_f2d>
 80051a0:	4604      	mov	r4, r0
 80051a2:	460d      	mov	r5, r1
 80051a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a6:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fb f934 	bl	8000418 <__aeabi_f2d>
 80051b0:	4680      	mov	r8, r0
 80051b2:	4689      	mov	r9, r1
 80051b4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80051b8:	f005 ff86 	bl	800b0c8 <sqrt>
 80051bc:	4602      	mov	r2, r0
 80051be:	460b      	mov	r3, r1
 80051c0:	4640      	mov	r0, r8
 80051c2:	4649      	mov	r1, r9
 80051c4:	f7fb f980 	bl	80004c8 <__aeabi_dmul>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4610      	mov	r0, r2
 80051ce:	4619      	mov	r1, r3
 80051d0:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80051d4:	f7fa ffc2 	bl	800015c <__adddf3>
 80051d8:	4602      	mov	r2, r0
 80051da:	460b      	mov	r3, r1
 80051dc:	4610      	mov	r0, r2
 80051de:	4619      	mov	r1, r3
 80051e0:	f005 ff72 	bl	800b0c8 <sqrt>
 80051e4:	a30a      	add	r3, pc, #40	; (adr r3, 8005210 <MPU9250_Calculate_RPY+0x5c8>)
 80051e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ea:	f7fb f96d 	bl	80004c8 <__aeabi_dmul>
 80051ee:	4602      	mov	r2, r0
 80051f0:	460b      	mov	r3, r1
 80051f2:	4620      	mov	r0, r4
 80051f4:	4629      	mov	r1, r5
 80051f6:	f7fb fa91 	bl	800071c <__aeabi_ddiv>
 80051fa:	4603      	mov	r3, r0
 80051fc:	460c      	mov	r4, r1
 80051fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005200:	f502 72e8 	add.w	r2, r2, #464	; 0x1d0
 8005204:	e9c2 3400 	strd	r3, r4, [r2]
 8005208:	e092      	b.n	8005330 <MPU9250_Calculate_RPY+0x6e8>
 800520a:	bf00      	nop
 800520c:	f3af 8000 	nop.w
 8005210:	667f3bcd 	.word	0x667f3bcd
 8005214:	3ff6a09e 	.word	0x3ff6a09e
	}
	else {

		DataStructure->Magnetometer_quaternion.w = -( DataStructure->Magnetometer_Y_uT ) / ( sqrt(2) * sqrt( L - (DataStructure->Magnetometer_X_uT * sqrt(L)) ) );
 8005218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800521a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800521e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005222:	4618      	mov	r0, r3
 8005224:	f7fb f8f8 	bl	8000418 <__aeabi_f2d>
 8005228:	4604      	mov	r4, r0
 800522a:	460d      	mov	r5, r1
 800522c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800522e:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8005232:	4618      	mov	r0, r3
 8005234:	f7fb f8f0 	bl	8000418 <__aeabi_f2d>
 8005238:	4680      	mov	r8, r0
 800523a:	4689      	mov	r9, r1
 800523c:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005240:	f005 ff42 	bl	800b0c8 <sqrt>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	4640      	mov	r0, r8
 800524a:	4649      	mov	r1, r9
 800524c:	f7fb f93c 	bl	80004c8 <__aeabi_dmul>
 8005250:	4602      	mov	r2, r0
 8005252:	460b      	mov	r3, r1
 8005254:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005258:	f7fa ff7e 	bl	8000158 <__aeabi_dsub>
 800525c:	4602      	mov	r2, r0
 800525e:	460b      	mov	r3, r1
 8005260:	4610      	mov	r0, r2
 8005262:	4619      	mov	r1, r3
 8005264:	f005 ff30 	bl	800b0c8 <sqrt>
 8005268:	a32f      	add	r3, pc, #188	; (adr r3, 8005328 <MPU9250_Calculate_RPY+0x6e0>)
 800526a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526e:	f7fb f92b 	bl	80004c8 <__aeabi_dmul>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4620      	mov	r0, r4
 8005278:	4629      	mov	r1, r5
 800527a:	f7fb fa4f 	bl	800071c <__aeabi_ddiv>
 800527e:	4603      	mov	r3, r0
 8005280:	460c      	mov	r4, r1
 8005282:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005284:	f502 72dc 	add.w	r2, r2, #440	; 0x1b8
 8005288:	e9c2 3400 	strd	r3, r4, [r2]
		DataStructure->Magnetometer_quaternion.x = 0;
 800528c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800528e:	f503 72e0 	add.w	r2, r3, #448	; 0x1c0
 8005292:	f04f 0300 	mov.w	r3, #0
 8005296:	f04f 0400 	mov.w	r4, #0
 800529a:	e9c2 3400 	strd	r3, r4, [r2]
		DataStructure->Magnetometer_quaternion.y = 0;
 800529e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a0:	f503 72e4 	add.w	r2, r3, #456	; 0x1c8
 80052a4:	f04f 0300 	mov.w	r3, #0
 80052a8:	f04f 0400 	mov.w	r4, #0
 80052ac:	e9c2 3400 	strd	r3, r4, [r2]
		DataStructure->Magnetometer_quaternion.z = ( sqrt( L - (DataStructure->Magnetometer_X_uT * sqrt(L)) ) ) / ( sqrt(2 * L) );
 80052b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b2:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7fb f8ae 	bl	8000418 <__aeabi_f2d>
 80052bc:	4604      	mov	r4, r0
 80052be:	460d      	mov	r5, r1
 80052c0:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80052c4:	f005 ff00 	bl	800b0c8 <sqrt>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	4620      	mov	r0, r4
 80052ce:	4629      	mov	r1, r5
 80052d0:	f7fb f8fa 	bl	80004c8 <__aeabi_dmul>
 80052d4:	4603      	mov	r3, r0
 80052d6:	460c      	mov	r4, r1
 80052d8:	461a      	mov	r2, r3
 80052da:	4623      	mov	r3, r4
 80052dc:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80052e0:	f7fa ff3a 	bl	8000158 <__aeabi_dsub>
 80052e4:	4603      	mov	r3, r0
 80052e6:	460c      	mov	r4, r1
 80052e8:	4618      	mov	r0, r3
 80052ea:	4621      	mov	r1, r4
 80052ec:	f005 feec 	bl	800b0c8 <sqrt>
 80052f0:	4604      	mov	r4, r0
 80052f2:	460d      	mov	r5, r1
 80052f4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	f7fa ff2e 	bl	800015c <__adddf3>
 8005300:	4602      	mov	r2, r0
 8005302:	460b      	mov	r3, r1
 8005304:	4610      	mov	r0, r2
 8005306:	4619      	mov	r1, r3
 8005308:	f005 fede 	bl	800b0c8 <sqrt>
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	4620      	mov	r0, r4
 8005312:	4629      	mov	r1, r5
 8005314:	f7fb fa02 	bl	800071c <__aeabi_ddiv>
 8005318:	4603      	mov	r3, r0
 800531a:	460c      	mov	r4, r1
 800531c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800531e:	f502 72e8 	add.w	r2, r2, #464	; 0x1d0
 8005322:	e9c2 3400 	strd	r3, r4, [r2]
 8005326:	e003      	b.n	8005330 <MPU9250_Calculate_RPY+0x6e8>
 8005328:	667f3bcd 	.word	0x667f3bcd
 800532c:	3ff6a09e 	.word	0x3ff6a09e
	}

	DataStructure->Magnetometer_quaternion = quaternion_tensor_product(&DataStructure->Accelerometer_quaternion, &DataStructure->Magnetometer_quaternion);
 8005330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005332:	f103 01e0 	add.w	r1, r3, #224	; 0xe0
 8005336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005338:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 800533c:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 800533e:	f107 0310 	add.w	r3, r7, #16
 8005342:	4618      	mov	r0, r3
 8005344:	f000 fcdf 	bl	8005d06 <quaternion_tensor_product>
 8005348:	f504 74dc 	add.w	r4, r4, #440	; 0x1b8
 800534c:	f107 0510 	add.w	r5, r7, #16
 8005350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005354:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005358:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	quaternion_normalise(&DataStructure->Magnetometer_quaternion);
 800535c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005362:	4618      	mov	r0, r3
 8005364:	f000 fe37 	bl	8005fd6 <quaternion_normalise>

	/* Case 5: Calculate accelerometer velocity */
	DataStructure->Accelerometer_X_velocity = DataStructure->Accelerometer_X_velocity_past + DataStructure->Accelerometer_X_g_past + ( (DataStructure->Accelerometer_X_g - DataStructure->Accelerometer_X_g_past) / 2);
 8005368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800536a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800536e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005374:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8005378:	e9d4 3400 	ldrd	r3, r4, [r4]
 800537c:	461a      	mov	r2, r3
 800537e:	4623      	mov	r3, r4
 8005380:	f7fa feec 	bl	800015c <__adddf3>
 8005384:	4603      	mov	r3, r0
 8005386:	460c      	mov	r4, r1
 8005388:	461d      	mov	r5, r3
 800538a:	4626      	mov	r6, r4
 800538c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538e:	e9d3 012c 	ldrd	r0, r1, [r3, #176]	; 0xb0
 8005392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005394:	f103 04c8 	add.w	r4, r3, #200	; 0xc8
 8005398:	e9d4 3400 	ldrd	r3, r4, [r4]
 800539c:	461a      	mov	r2, r3
 800539e:	4623      	mov	r3, r4
 80053a0:	f7fa feda 	bl	8000158 <__aeabi_dsub>
 80053a4:	4603      	mov	r3, r0
 80053a6:	460c      	mov	r4, r1
 80053a8:	4618      	mov	r0, r3
 80053aa:	4621      	mov	r1, r4
 80053ac:	f04f 0200 	mov.w	r2, #0
 80053b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80053b4:	f7fb f9b2 	bl	800071c <__aeabi_ddiv>
 80053b8:	4603      	mov	r3, r0
 80053ba:	460c      	mov	r4, r1
 80053bc:	461a      	mov	r2, r3
 80053be:	4623      	mov	r3, r4
 80053c0:	4628      	mov	r0, r5
 80053c2:	4631      	mov	r1, r6
 80053c4:	f7fa feca 	bl	800015c <__adddf3>
 80053c8:	4603      	mov	r3, r0
 80053ca:	460c      	mov	r4, r1
 80053cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053ce:	f502 7288 	add.w	r2, r2, #272	; 0x110
 80053d2:	e9c2 3400 	strd	r3, r4, [r2]
	DataStructure->Accelerometer_Y_velocity = DataStructure->Accelerometer_Y_velocity_past + DataStructure->Accelerometer_Y_g_past + ( (DataStructure->Accelerometer_Y_g - DataStructure->Accelerometer_Y_g_past) / 2);
 80053d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d8:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80053dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80053e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e2:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 80053e6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80053ea:	461a      	mov	r2, r3
 80053ec:	4623      	mov	r3, r4
 80053ee:	f7fa feb5 	bl	800015c <__adddf3>
 80053f2:	4603      	mov	r3, r0
 80053f4:	460c      	mov	r4, r1
 80053f6:	461d      	mov	r5, r3
 80053f8:	4626      	mov	r6, r4
 80053fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fc:	e9d3 012e 	ldrd	r0, r1, [r3, #184]	; 0xb8
 8005400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005402:	f103 04d0 	add.w	r4, r3, #208	; 0xd0
 8005406:	e9d4 3400 	ldrd	r3, r4, [r4]
 800540a:	461a      	mov	r2, r3
 800540c:	4623      	mov	r3, r4
 800540e:	f7fa fea3 	bl	8000158 <__aeabi_dsub>
 8005412:	4603      	mov	r3, r0
 8005414:	460c      	mov	r4, r1
 8005416:	4618      	mov	r0, r3
 8005418:	4621      	mov	r1, r4
 800541a:	f04f 0200 	mov.w	r2, #0
 800541e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005422:	f7fb f97b 	bl	800071c <__aeabi_ddiv>
 8005426:	4603      	mov	r3, r0
 8005428:	460c      	mov	r4, r1
 800542a:	461a      	mov	r2, r3
 800542c:	4623      	mov	r3, r4
 800542e:	4628      	mov	r0, r5
 8005430:	4631      	mov	r1, r6
 8005432:	f7fa fe93 	bl	800015c <__adddf3>
 8005436:	4603      	mov	r3, r0
 8005438:	460c      	mov	r4, r1
 800543a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800543c:	f502 728c 	add.w	r2, r2, #280	; 0x118
 8005440:	e9c2 3400 	strd	r3, r4, [r2]
	DataStructure->Accelerometer_Z_velocity = DataStructure->Accelerometer_Z_velocity_past + DataStructure->Accelerometer_Z_g_past + ( (DataStructure->Accelerometer_Z_g - DataStructure->Accelerometer_Z_g_past) / 2);
 8005444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005446:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800544a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800544e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005450:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8005454:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005458:	461a      	mov	r2, r3
 800545a:	4623      	mov	r3, r4
 800545c:	f7fa fe7e 	bl	800015c <__adddf3>
 8005460:	4603      	mov	r3, r0
 8005462:	460c      	mov	r4, r1
 8005464:	461d      	mov	r5, r3
 8005466:	4626      	mov	r6, r4
 8005468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546a:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	; 0xc0
 800546e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005470:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 8005474:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005478:	461a      	mov	r2, r3
 800547a:	4623      	mov	r3, r4
 800547c:	f7fa fe6c 	bl	8000158 <__aeabi_dsub>
 8005480:	4603      	mov	r3, r0
 8005482:	460c      	mov	r4, r1
 8005484:	4618      	mov	r0, r3
 8005486:	4621      	mov	r1, r4
 8005488:	f04f 0200 	mov.w	r2, #0
 800548c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005490:	f7fb f944 	bl	800071c <__aeabi_ddiv>
 8005494:	4603      	mov	r3, r0
 8005496:	460c      	mov	r4, r1
 8005498:	461a      	mov	r2, r3
 800549a:	4623      	mov	r3, r4
 800549c:	4628      	mov	r0, r5
 800549e:	4631      	mov	r1, r6
 80054a0:	f7fa fe5c 	bl	800015c <__adddf3>
 80054a4:	4603      	mov	r3, r0
 80054a6:	460c      	mov	r4, r1
 80054a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054aa:	f502 7290 	add.w	r2, r2, #288	; 0x120
 80054ae:	e9c2 3400 	strd	r3, r4, [r2]

	/* Case 5: Calculate accelerometer position */
	DataStructure->Accelerometer_X_position = DataStructure->Accelerometer_X_position_past + DataStructure->Accelerometer_X_velocity_past + ( (DataStructure->Accelerometer_X_velocity - DataStructure->Accelerometer_X_velocity_past) / 2);
 80054b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80054b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80054bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054be:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80054c2:	cb18      	ldmia	r3, {r3, r4}
 80054c4:	461a      	mov	r2, r3
 80054c6:	4623      	mov	r3, r4
 80054c8:	f7fa fe48 	bl	800015c <__adddf3>
 80054cc:	4603      	mov	r3, r0
 80054ce:	460c      	mov	r4, r1
 80054d0:	461d      	mov	r5, r3
 80054d2:	4626      	mov	r6, r4
 80054d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80054da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80054de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80054e4:	cb18      	ldmia	r3, {r3, r4}
 80054e6:	461a      	mov	r2, r3
 80054e8:	4623      	mov	r3, r4
 80054ea:	f7fa fe35 	bl	8000158 <__aeabi_dsub>
 80054ee:	4603      	mov	r3, r0
 80054f0:	460c      	mov	r4, r1
 80054f2:	4618      	mov	r0, r3
 80054f4:	4621      	mov	r1, r4
 80054f6:	f04f 0200 	mov.w	r2, #0
 80054fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80054fe:	f7fb f90d 	bl	800071c <__aeabi_ddiv>
 8005502:	4603      	mov	r3, r0
 8005504:	460c      	mov	r4, r1
 8005506:	461a      	mov	r2, r3
 8005508:	4623      	mov	r3, r4
 800550a:	4628      	mov	r0, r5
 800550c:	4631      	mov	r1, r6
 800550e:	f7fa fe25 	bl	800015c <__adddf3>
 8005512:	4603      	mov	r3, r0
 8005514:	460c      	mov	r4, r1
 8005516:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005518:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 800551c:	e9c2 3400 	strd	r3, r4, [r2]
	DataStructure->Accelerometer_Y_position = DataStructure->Accelerometer_Y_position_past + DataStructure->Accelerometer_Y_velocity_past + ( (DataStructure->Accelerometer_Y_velocity - DataStructure->Accelerometer_Y_velocity_past) / 2);
 8005520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005522:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8005526:	e9d3 0100 	ldrd	r0, r1, [r3]
 800552a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552c:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005530:	cb18      	ldmia	r3, {r3, r4}
 8005532:	461a      	mov	r2, r3
 8005534:	4623      	mov	r3, r4
 8005536:	f7fa fe11 	bl	800015c <__adddf3>
 800553a:	4603      	mov	r3, r0
 800553c:	460c      	mov	r4, r1
 800553e:	461d      	mov	r5, r3
 8005540:	4626      	mov	r6, r4
 8005542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005544:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8005548:	e9d3 0100 	ldrd	r0, r1, [r3]
 800554c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800554e:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8005552:	cb18      	ldmia	r3, {r3, r4}
 8005554:	461a      	mov	r2, r3
 8005556:	4623      	mov	r3, r4
 8005558:	f7fa fdfe 	bl	8000158 <__aeabi_dsub>
 800555c:	4603      	mov	r3, r0
 800555e:	460c      	mov	r4, r1
 8005560:	4618      	mov	r0, r3
 8005562:	4621      	mov	r1, r4
 8005564:	f04f 0200 	mov.w	r2, #0
 8005568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800556c:	f7fb f8d6 	bl	800071c <__aeabi_ddiv>
 8005570:	4603      	mov	r3, r0
 8005572:	460c      	mov	r4, r1
 8005574:	461a      	mov	r2, r3
 8005576:	4623      	mov	r3, r4
 8005578:	4628      	mov	r0, r5
 800557a:	4631      	mov	r1, r6
 800557c:	f7fa fdee 	bl	800015c <__adddf3>
 8005580:	4603      	mov	r3, r0
 8005582:	460c      	mov	r4, r1
 8005584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005586:	f502 72a4 	add.w	r2, r2, #328	; 0x148
 800558a:	e9c2 3400 	strd	r3, r4, [r2]
	DataStructure->Accelerometer_Z_position = DataStructure->Accelerometer_Z_position_past + DataStructure->Accelerometer_Z_velocity_past + ( (DataStructure->Accelerometer_Z_velocity - DataStructure->Accelerometer_Z_velocity_past) / 2);
 800558e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005590:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005594:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800559e:	cb18      	ldmia	r3, {r3, r4}
 80055a0:	461a      	mov	r2, r3
 80055a2:	4623      	mov	r3, r4
 80055a4:	f7fa fdda 	bl	800015c <__adddf3>
 80055a8:	4603      	mov	r3, r0
 80055aa:	460c      	mov	r4, r1
 80055ac:	461d      	mov	r5, r3
 80055ae:	4626      	mov	r6, r4
 80055b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80055b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80055ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055bc:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80055c0:	cb18      	ldmia	r3, {r3, r4}
 80055c2:	461a      	mov	r2, r3
 80055c4:	4623      	mov	r3, r4
 80055c6:	f7fa fdc7 	bl	8000158 <__aeabi_dsub>
 80055ca:	4603      	mov	r3, r0
 80055cc:	460c      	mov	r4, r1
 80055ce:	4618      	mov	r0, r3
 80055d0:	4621      	mov	r1, r4
 80055d2:	f04f 0200 	mov.w	r2, #0
 80055d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055da:	f7fb f89f 	bl	800071c <__aeabi_ddiv>
 80055de:	4603      	mov	r3, r0
 80055e0:	460c      	mov	r4, r1
 80055e2:	461a      	mov	r2, r3
 80055e4:	4623      	mov	r3, r4
 80055e6:	4628      	mov	r0, r5
 80055e8:	4631      	mov	r1, r6
 80055ea:	f7fa fdb7 	bl	800015c <__adddf3>
 80055ee:	4603      	mov	r3, r0
 80055f0:	460c      	mov	r4, r1
 80055f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80055f4:	f502 72a8 	add.w	r2, r2, #336	; 0x150
 80055f8:	e9c2 3400 	strd	r3, r4, [r2]



	DataStructure->Accelerometer_X_g_past = DataStructure->Accelerometer_X_g;
 80055fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fe:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 8005602:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005606:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005608:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	DataStructure->Accelerometer_Y_g_past = DataStructure->Accelerometer_Y_g;
 800560c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560e:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8005612:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005616:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005618:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
	DataStructure->Accelerometer_Z_g_past = DataStructure->Accelerometer_Z_g;
 800561c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561e:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 8005622:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005626:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005628:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8

	DataStructure->Accelerometer_X_velocity_past = DataStructure->Accelerometer_X_velocity;
 800562c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8005632:	cb18      	ldmia	r3, {r3, r4}
 8005634:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005636:	f502 7294 	add.w	r2, r2, #296	; 0x128
 800563a:	e9c2 3400 	strd	r3, r4, [r2]
	DataStructure->Accelerometer_Y_velocity_past = DataStructure->Accelerometer_Y_velocity;
 800563e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005640:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8005644:	cb18      	ldmia	r3, {r3, r4}
 8005646:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005648:	f502 7298 	add.w	r2, r2, #304	; 0x130
 800564c:	e9c2 3400 	strd	r3, r4, [r2]
	DataStructure->Accelerometer_Z_velocity_past = DataStructure->Accelerometer_Z_velocity;
 8005650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005652:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005656:	cb18      	ldmia	r3, {r3, r4}
 8005658:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800565a:	f502 729c 	add.w	r2, r2, #312	; 0x138
 800565e:	e9c2 3400 	strd	r3, r4, [r2]

	DataStructure->Accelerometer_X_position_past = DataStructure->Accelerometer_X_position;
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8005668:	cb18      	ldmia	r3, {r3, r4}
 800566a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800566c:	f502 72ac 	add.w	r2, r2, #344	; 0x158
 8005670:	e9c2 3400 	strd	r3, r4, [r2]
	DataStructure->Accelerometer_Y_position_past = DataStructure->Accelerometer_Y_position;
 8005674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005676:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 800567a:	cb18      	ldmia	r3, {r3, r4}
 800567c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800567e:	f502 72b0 	add.w	r2, r2, #352	; 0x160
 8005682:	e9c2 3400 	strd	r3, r4, [r2]
	DataStructure->Accelerometer_Z_position_past = DataStructure->Accelerometer_Z_position;
 8005686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005688:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800568c:	cb18      	ldmia	r3, {r3, r4}
 800568e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005690:	f502 72b4 	add.w	r2, r2, #360	; 0x168
 8005694:	e9c2 3400 	strd	r3, r4, [r2]
}
 8005698:	bf00      	nop
 800569a:	37ec      	adds	r7, #236	; 0xec
 800569c:	46bd      	mov	sp, r7
 800569e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a2:	bf00      	nop

080056a4 <Complementary_filter>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
void Complementary_filter(struct MPU9250 *DataStructure,
						  float weight_Roll_Pitch,
						  float weight_Yaw,
						  float dt) {
 80056a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a8:	b087      	sub	sp, #28
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6178      	str	r0, [r7, #20]
 80056ae:	6139      	str	r1, [r7, #16]
 80056b0:	60fa      	str	r2, [r7, #12]
 80056b2:	60bb      	str	r3, [r7, #8]


	if( (DataStructure->Gyroscope_quaternion.w > 0 && DataStructure->Accelerometer_quaternion.w < 0) || (DataStructure->Gyroscope_quaternion.w < 0 && DataStructure->Accelerometer_quaternion.w > 0) ) {
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80056ba:	f04f 0200 	mov.w	r2, #0
 80056be:	f04f 0300 	mov.w	r3, #0
 80056c2:	f7fb f991 	bl	80009e8 <__aeabi_dcmpgt>
 80056c6:	4603      	mov	r3, r0
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00b      	beq.n	80056e4 <Complementary_filter+0x40>
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
 80056d2:	f04f 0200 	mov.w	r2, #0
 80056d6:	f04f 0300 	mov.w	r3, #0
 80056da:	f7fb f967 	bl	80009ac <__aeabi_dcmplt>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d117      	bne.n	8005714 <Complementary_filter+0x70>
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 80056ea:	f04f 0200 	mov.w	r2, #0
 80056ee:	f04f 0300 	mov.w	r3, #0
 80056f2:	f7fb f95b 	bl	80009ac <__aeabi_dcmplt>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d019      	beq.n	8005730 <Complementary_filter+0x8c>
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
 8005702:	f04f 0200 	mov.w	r2, #0
 8005706:	f04f 0300 	mov.w	r3, #0
 800570a:	f7fb f96d 	bl	80009e8 <__aeabi_dcmpgt>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d00d      	beq.n	8005730 <Complementary_filter+0x8c>

		DataStructure->Accelerometer_quaternion.w = -DataStructure->Accelerometer_quaternion.w;
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 800571a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800571e:	603b      	str	r3, [r7, #0]
 8005720:	f084 4300 	eor.w	r3, r4, #2147483648	; 0x80000000
 8005724:	607b      	str	r3, [r7, #4]
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	e9d7 1200 	ldrd	r1, r2, [r7]
 800572c:	e9c3 1238 	strd	r1, r2, [r3, #224]	; 0xe0
	}
	if( (DataStructure->Gyroscope_quaternion.x > 0 && DataStructure->Accelerometer_quaternion.x < 0) || (DataStructure->Gyroscope_quaternion.x < 0 && DataStructure->Accelerometer_quaternion.x > 0) ) {
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005736:	f04f 0200 	mov.w	r2, #0
 800573a:	f04f 0300 	mov.w	r3, #0
 800573e:	f7fb f953 	bl	80009e8 <__aeabi_dcmpgt>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00b      	beq.n	8005760 <Complementary_filter+0xbc>
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	f04f 0300 	mov.w	r3, #0
 8005756:	f7fb f929 	bl	80009ac <__aeabi_dcmplt>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d117      	bne.n	8005790 <Complementary_filter+0xec>
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8005766:	f04f 0200 	mov.w	r2, #0
 800576a:	f04f 0300 	mov.w	r3, #0
 800576e:	f7fb f91d 	bl	80009ac <__aeabi_dcmplt>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d016      	beq.n	80057a6 <Complementary_filter+0x102>
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 800577e:	f04f 0200 	mov.w	r2, #0
 8005782:	f04f 0300 	mov.w	r3, #0
 8005786:	f7fb f92f 	bl	80009e8 <__aeabi_dcmpgt>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d00a      	beq.n	80057a6 <Complementary_filter+0x102>

		DataStructure->Accelerometer_quaternion.x = -DataStructure->Accelerometer_quaternion.x;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 8005796:	e9d4 3400 	ldrd	r3, r4, [r4]
 800579a:	469a      	mov	sl, r3
 800579c:	f084 4b00 	eor.w	fp, r4, #2147483648	; 0x80000000
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	e9c3 ab3a 	strd	sl, fp, [r3, #232]	; 0xe8
	}
	if( (DataStructure->Gyroscope_quaternion.y > 0 && DataStructure->Accelerometer_quaternion.y < 0) || (DataStructure->Gyroscope_quaternion.y < 0 && DataStructure->Accelerometer_quaternion.y > 0) ) {
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80057ac:	f04f 0200 	mov.w	r2, #0
 80057b0:	f04f 0300 	mov.w	r3, #0
 80057b4:	f7fb f918 	bl	80009e8 <__aeabi_dcmpgt>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00b      	beq.n	80057d6 <Complementary_filter+0x132>
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	f04f 0300 	mov.w	r3, #0
 80057cc:	f7fb f8ee 	bl	80009ac <__aeabi_dcmplt>
 80057d0:	4603      	mov	r3, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d117      	bne.n	8005806 <Complementary_filter+0x162>
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	f04f 0300 	mov.w	r3, #0
 80057e4:	f7fb f8e2 	bl	80009ac <__aeabi_dcmplt>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d016      	beq.n	800581c <Complementary_filter+0x178>
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	f7fb f8f4 	bl	80009e8 <__aeabi_dcmpgt>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <Complementary_filter+0x178>

		DataStructure->Accelerometer_quaternion.y = -DataStructure->Accelerometer_quaternion.y;
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 800580c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005810:	4698      	mov	r8, r3
 8005812:	f084 4900 	eor.w	r9, r4, #2147483648	; 0x80000000
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	e9c3 893c 	strd	r8, r9, [r3, #240]	; 0xf0
	}
	if( (DataStructure->Gyroscope_quaternion.z > 0 && DataStructure->Accelerometer_quaternion.z < 0) || (DataStructure->Gyroscope_quaternion.z < 0 && DataStructure->Accelerometer_quaternion.z > 0) ) {
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8005822:	f04f 0200 	mov.w	r2, #0
 8005826:	f04f 0300 	mov.w	r3, #0
 800582a:	f7fb f8dd 	bl	80009e8 <__aeabi_dcmpgt>
 800582e:	4603      	mov	r3, r0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d00b      	beq.n	800584c <Complementary_filter+0x1a8>
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	e9d3 013e 	ldrd	r0, r1, [r3, #248]	; 0xf8
 800583a:	f04f 0200 	mov.w	r2, #0
 800583e:	f04f 0300 	mov.w	r3, #0
 8005842:	f7fb f8b3 	bl	80009ac <__aeabi_dcmplt>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d117      	bne.n	800587c <Complementary_filter+0x1d8>
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	f7fb f8a7 	bl	80009ac <__aeabi_dcmplt>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d016      	beq.n	8005892 <Complementary_filter+0x1ee>
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	e9d3 013e 	ldrd	r0, r1, [r3, #248]	; 0xf8
 800586a:	f04f 0200 	mov.w	r2, #0
 800586e:	f04f 0300 	mov.w	r3, #0
 8005872:	f7fb f8b9 	bl	80009e8 <__aeabi_dcmpgt>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00a      	beq.n	8005892 <Complementary_filter+0x1ee>

		DataStructure->Accelerometer_quaternion.z = -DataStructure->Accelerometer_quaternion.z;
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	f103 04f8 	add.w	r4, r3, #248	; 0xf8
 8005882:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005886:	461d      	mov	r5, r3
 8005888:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	e9c3 563e 	strd	r5, r6, [r3, #248]	; 0xf8
	}

	DataStructure->Complementary_quaternion.w  = ( (1-weight_Roll_Pitch) * (DataStructure->Complementary_quaternion.w + DataStructure->Gyroscope_quaternion_dot.w * dt )
 8005892:	6939      	ldr	r1, [r7, #16]
 8005894:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005898:	f7fb f942 	bl	8000b20 <__aeabi_fsub>
 800589c:	4603      	mov	r3, r0
 800589e:	4618      	mov	r0, r3
 80058a0:	f7fa fdba 	bl	8000418 <__aeabi_f2d>
 80058a4:	4682      	mov	sl, r0
 80058a6:	468b      	mov	fp, r1
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80058ae:	e9d3 4500 	ldrd	r4, r5, [r3]
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	e9d3 8918 	ldrd	r8, r9, [r3, #96]	; 0x60
 80058b8:	68b8      	ldr	r0, [r7, #8]
 80058ba:	f7fa fdad 	bl	8000418 <__aeabi_f2d>
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	4640      	mov	r0, r8
 80058c4:	4649      	mov	r1, r9
 80058c6:	f7fa fdff 	bl	80004c8 <__aeabi_dmul>
 80058ca:	4602      	mov	r2, r0
 80058cc:	460b      	mov	r3, r1
 80058ce:	4620      	mov	r0, r4
 80058d0:	4629      	mov	r1, r5
 80058d2:	f7fa fc43 	bl	800015c <__adddf3>
 80058d6:	4603      	mov	r3, r0
 80058d8:	460c      	mov	r4, r1
 80058da:	461a      	mov	r2, r3
 80058dc:	4623      	mov	r3, r4
 80058de:	4650      	mov	r0, sl
 80058e0:	4659      	mov	r1, fp
 80058e2:	f7fa fdf1 	bl	80004c8 <__aeabi_dmul>
 80058e6:	4603      	mov	r3, r0
 80058e8:	460c      	mov	r4, r1
 80058ea:	461d      	mov	r5, r3
 80058ec:	4626      	mov	r6, r4
											   + (weight_Roll_Pitch * DataStructure->Accelerometer_quaternion.w)  );
 80058ee:	6938      	ldr	r0, [r7, #16]
 80058f0:	f7fa fd92 	bl	8000418 <__aeabi_f2d>
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f103 04e0 	add.w	r4, r3, #224	; 0xe0
 80058fa:	e9d4 3400 	ldrd	r3, r4, [r4]
 80058fe:	461a      	mov	r2, r3
 8005900:	4623      	mov	r3, r4
 8005902:	f7fa fde1 	bl	80004c8 <__aeabi_dmul>
 8005906:	4603      	mov	r3, r0
 8005908:	460c      	mov	r4, r1
 800590a:	461a      	mov	r2, r3
 800590c:	4623      	mov	r3, r4
 800590e:	4628      	mov	r0, r5
 8005910:	4631      	mov	r1, r6
 8005912:	f7fa fc23 	bl	800015c <__adddf3>
 8005916:	4603      	mov	r3, r0
 8005918:	460c      	mov	r4, r1
	DataStructure->Complementary_quaternion.w  = ( (1-weight_Roll_Pitch) * (DataStructure->Complementary_quaternion.w + DataStructure->Gyroscope_quaternion_dot.w * dt )
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	f502 72f4 	add.w	r2, r2, #488	; 0x1e8
 8005920:	e9c2 3400 	strd	r3, r4, [r2]

	DataStructure->Complementary_quaternion.x  = ( (1-weight_Roll_Pitch) * (DataStructure->Complementary_quaternion.x + DataStructure->Gyroscope_quaternion_dot.x * dt )
 8005924:	6939      	ldr	r1, [r7, #16]
 8005926:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800592a:	f7fb f8f9 	bl	8000b20 <__aeabi_fsub>
 800592e:	4603      	mov	r3, r0
 8005930:	4618      	mov	r0, r3
 8005932:	f7fa fd71 	bl	8000418 <__aeabi_f2d>
 8005936:	4682      	mov	sl, r0
 8005938:	468b      	mov	fp, r1
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 8005940:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 800594a:	68b8      	ldr	r0, [r7, #8]
 800594c:	f7fa fd64 	bl	8000418 <__aeabi_f2d>
 8005950:	4602      	mov	r2, r0
 8005952:	460b      	mov	r3, r1
 8005954:	4640      	mov	r0, r8
 8005956:	4649      	mov	r1, r9
 8005958:	f7fa fdb6 	bl	80004c8 <__aeabi_dmul>
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4620      	mov	r0, r4
 8005962:	4629      	mov	r1, r5
 8005964:	f7fa fbfa 	bl	800015c <__adddf3>
 8005968:	4603      	mov	r3, r0
 800596a:	460c      	mov	r4, r1
 800596c:	461a      	mov	r2, r3
 800596e:	4623      	mov	r3, r4
 8005970:	4650      	mov	r0, sl
 8005972:	4659      	mov	r1, fp
 8005974:	f7fa fda8 	bl	80004c8 <__aeabi_dmul>
 8005978:	4603      	mov	r3, r0
 800597a:	460c      	mov	r4, r1
 800597c:	461d      	mov	r5, r3
 800597e:	4626      	mov	r6, r4
											   + (weight_Roll_Pitch * DataStructure->Accelerometer_quaternion.x)  );
 8005980:	6938      	ldr	r0, [r7, #16]
 8005982:	f7fa fd49 	bl	8000418 <__aeabi_f2d>
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f103 04e8 	add.w	r4, r3, #232	; 0xe8
 800598c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005990:	461a      	mov	r2, r3
 8005992:	4623      	mov	r3, r4
 8005994:	f7fa fd98 	bl	80004c8 <__aeabi_dmul>
 8005998:	4603      	mov	r3, r0
 800599a:	460c      	mov	r4, r1
 800599c:	461a      	mov	r2, r3
 800599e:	4623      	mov	r3, r4
 80059a0:	4628      	mov	r0, r5
 80059a2:	4631      	mov	r1, r6
 80059a4:	f7fa fbda 	bl	800015c <__adddf3>
 80059a8:	4603      	mov	r3, r0
 80059aa:	460c      	mov	r4, r1
	DataStructure->Complementary_quaternion.x  = ( (1-weight_Roll_Pitch) * (DataStructure->Complementary_quaternion.x + DataStructure->Gyroscope_quaternion_dot.x * dt )
 80059ac:	697a      	ldr	r2, [r7, #20]
 80059ae:	f502 72f8 	add.w	r2, r2, #496	; 0x1f0
 80059b2:	e9c2 3400 	strd	r3, r4, [r2]

	DataStructure->Complementary_quaternion.y  = ( (1-weight_Roll_Pitch) * (DataStructure->Complementary_quaternion.y + DataStructure->Gyroscope_quaternion_dot.y * dt )
 80059b6:	6939      	ldr	r1, [r7, #16]
 80059b8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80059bc:	f7fb f8b0 	bl	8000b20 <__aeabi_fsub>
 80059c0:	4603      	mov	r3, r0
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7fa fd28 	bl	8000418 <__aeabi_f2d>
 80059c8:	4682      	mov	sl, r0
 80059ca:	468b      	mov	fp, r1
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80059d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	e9d3 891c 	ldrd	r8, r9, [r3, #112]	; 0x70
 80059dc:	68b8      	ldr	r0, [r7, #8]
 80059de:	f7fa fd1b 	bl	8000418 <__aeabi_f2d>
 80059e2:	4602      	mov	r2, r0
 80059e4:	460b      	mov	r3, r1
 80059e6:	4640      	mov	r0, r8
 80059e8:	4649      	mov	r1, r9
 80059ea:	f7fa fd6d 	bl	80004c8 <__aeabi_dmul>
 80059ee:	4602      	mov	r2, r0
 80059f0:	460b      	mov	r3, r1
 80059f2:	4620      	mov	r0, r4
 80059f4:	4629      	mov	r1, r5
 80059f6:	f7fa fbb1 	bl	800015c <__adddf3>
 80059fa:	4603      	mov	r3, r0
 80059fc:	460c      	mov	r4, r1
 80059fe:	461a      	mov	r2, r3
 8005a00:	4623      	mov	r3, r4
 8005a02:	4650      	mov	r0, sl
 8005a04:	4659      	mov	r1, fp
 8005a06:	f7fa fd5f 	bl	80004c8 <__aeabi_dmul>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	460c      	mov	r4, r1
 8005a0e:	461d      	mov	r5, r3
 8005a10:	4626      	mov	r6, r4
											   + (weight_Roll_Pitch * DataStructure->Accelerometer_quaternion.y)  );
 8005a12:	6938      	ldr	r0, [r7, #16]
 8005a14:	f7fa fd00 	bl	8000418 <__aeabi_f2d>
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 8005a1e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005a22:	461a      	mov	r2, r3
 8005a24:	4623      	mov	r3, r4
 8005a26:	f7fa fd4f 	bl	80004c8 <__aeabi_dmul>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	460c      	mov	r4, r1
 8005a2e:	461a      	mov	r2, r3
 8005a30:	4623      	mov	r3, r4
 8005a32:	4628      	mov	r0, r5
 8005a34:	4631      	mov	r1, r6
 8005a36:	f7fa fb91 	bl	800015c <__adddf3>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	460c      	mov	r4, r1
	DataStructure->Complementary_quaternion.y  = ( (1-weight_Roll_Pitch) * (DataStructure->Complementary_quaternion.y + DataStructure->Gyroscope_quaternion_dot.y * dt )
 8005a3e:	697a      	ldr	r2, [r7, #20]
 8005a40:	f502 72fc 	add.w	r2, r2, #504	; 0x1f8
 8005a44:	e9c2 3400 	strd	r3, r4, [r2]

	DataStructure->Complementary_quaternion.z  = ( (1-weight_Roll_Pitch) * (DataStructure->Complementary_quaternion.z + DataStructure->Gyroscope_quaternion_dot.z * dt )
 8005a48:	6939      	ldr	r1, [r7, #16]
 8005a4a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005a4e:	f7fb f867 	bl	8000b20 <__aeabi_fsub>
 8005a52:	4603      	mov	r3, r0
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7fa fcdf 	bl	8000418 <__aeabi_f2d>
 8005a5a:	4682      	mov	sl, r0
 8005a5c:	468b      	mov	fp, r1
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005a64:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	e9d3 891e 	ldrd	r8, r9, [r3, #120]	; 0x78
 8005a6e:	68b8      	ldr	r0, [r7, #8]
 8005a70:	f7fa fcd2 	bl	8000418 <__aeabi_f2d>
 8005a74:	4602      	mov	r2, r0
 8005a76:	460b      	mov	r3, r1
 8005a78:	4640      	mov	r0, r8
 8005a7a:	4649      	mov	r1, r9
 8005a7c:	f7fa fd24 	bl	80004c8 <__aeabi_dmul>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	4620      	mov	r0, r4
 8005a86:	4629      	mov	r1, r5
 8005a88:	f7fa fb68 	bl	800015c <__adddf3>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	460c      	mov	r4, r1
 8005a90:	461a      	mov	r2, r3
 8005a92:	4623      	mov	r3, r4
 8005a94:	4650      	mov	r0, sl
 8005a96:	4659      	mov	r1, fp
 8005a98:	f7fa fd16 	bl	80004c8 <__aeabi_dmul>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	460c      	mov	r4, r1
 8005aa0:	461d      	mov	r5, r3
 8005aa2:	4626      	mov	r6, r4
											   + (weight_Roll_Pitch * DataStructure->Accelerometer_quaternion.z)  );
 8005aa4:	6938      	ldr	r0, [r7, #16]
 8005aa6:	f7fa fcb7 	bl	8000418 <__aeabi_f2d>
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f103 04f8 	add.w	r4, r3, #248	; 0xf8
 8005ab0:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	4623      	mov	r3, r4
 8005ab8:	f7fa fd06 	bl	80004c8 <__aeabi_dmul>
 8005abc:	4603      	mov	r3, r0
 8005abe:	460c      	mov	r4, r1
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	4623      	mov	r3, r4
 8005ac4:	4628      	mov	r0, r5
 8005ac6:	4631      	mov	r1, r6
 8005ac8:	f7fa fb48 	bl	800015c <__adddf3>
 8005acc:	4603      	mov	r3, r0
 8005ace:	460c      	mov	r4, r1
	DataStructure->Complementary_quaternion.z  = ( (1-weight_Roll_Pitch) * (DataStructure->Complementary_quaternion.z + DataStructure->Gyroscope_quaternion_dot.z * dt )
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	f502 7200 	add.w	r2, r2, #512	; 0x200
 8005ad6:	e9c2 3400 	strd	r3, r4, [r2]

	quaternion_normalise(&DataStructure->Complementary_quaternion);
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 fa78 	bl	8005fd6 <quaternion_normalise>
}
 8005ae6:	bf00      	nop
 8005ae8:	371c      	adds	r7, #28
 8005aea:	46bd      	mov	sp, r7
 8005aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005af0 <Kalman_filter>:
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

void Kalman_filter(struct MPU9250 *DataStructure,
				   float Q_Roll_Pitch, float R_Roll_Pitch,
				   float Q_Yaw, float R_Yaw,
				   float dt) {
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	60f8      	str	r0, [r7, #12]
 8005af8:	60b9      	str	r1, [r7, #8]
 8005afa:	607a      	str	r2, [r7, #4]
 8005afc:	603b      	str	r3, [r7, #0]

	/* Case 2: */
	//DataStructure->Kalman_filter_Roll  = Kalman_filter_calculate(&DataStructure->Kalman_R, DataStructure->Accelerometer_Roll,  DataStructure->Gyroscope_X_dgs, dt);
	//DataStructure->Kalman_filter_Pitch = Kalman_filter_calculate(&DataStructure->Kalman_P, DataStructure->Accelerometer_Pitch, DataStructure->Gyroscope_Y_dgs, dt);
	//DataStructure->Kalman_filter_Yaw   = Kalman_filter_calculate(&DataStructure->Kalman_Y, DataStructure->Magnetometer_Yaw,    DataStructure->Gyroscope_Z_dgs, dt);
}
 8005afe:	bf00      	nop
 8005b00:	3714      	adds	r7, #20
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bc80      	pop	{r7}
 8005b06:	4770      	bx	lr

08005b08 <Madgwick_filter>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

void Madgwick_filter(struct MPU9250 *DataStructure,
					 float beta,
					 float dt) {
 8005b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b0c:	b09e      	sub	sp, #120	; 0x78
 8005b0e:	af08      	add	r7, sp, #32
 8005b10:	60f8      	str	r0, [r7, #12]
 8005b12:	60b9      	str	r1, [r7, #8]
 8005b14:	607a      	str	r2, [r7, #4]

	MadgwickAHRSupdate(beta,
					   DataStructure->Gyroscope_X_dgs * (M_PI / 180), DataStructure->Gyroscope_Y_dgs * (M_PI / 180), DataStructure->Gyroscope_Z_dgs * (M_PI / 180),
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8005b1c:	a356      	add	r3, pc, #344	; (adr r3, 8005c78 <Madgwick_filter+0x170>)
 8005b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b22:	f7fa fcd1 	bl	80004c8 <__aeabi_dmul>
 8005b26:	4603      	mov	r3, r0
 8005b28:	460c      	mov	r4, r1
	MadgwickAHRSupdate(beta,
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	f7fa ffa3 	bl	8000a78 <__aeabi_d2f>
 8005b32:	4680      	mov	r8, r0
					   DataStructure->Gyroscope_X_dgs * (M_PI / 180), DataStructure->Gyroscope_Y_dgs * (M_PI / 180), DataStructure->Gyroscope_Z_dgs * (M_PI / 180),
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8005b3a:	a34f      	add	r3, pc, #316	; (adr r3, 8005c78 <Madgwick_filter+0x170>)
 8005b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b40:	f7fa fcc2 	bl	80004c8 <__aeabi_dmul>
 8005b44:	4603      	mov	r3, r0
 8005b46:	460c      	mov	r4, r1
	MadgwickAHRSupdate(beta,
 8005b48:	4618      	mov	r0, r3
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	f7fa ff94 	bl	8000a78 <__aeabi_d2f>
 8005b50:	4681      	mov	r9, r0
					   DataStructure->Gyroscope_X_dgs * (M_PI / 180), DataStructure->Gyroscope_Y_dgs * (M_PI / 180), DataStructure->Gyroscope_Z_dgs * (M_PI / 180),
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8005b58:	a347      	add	r3, pc, #284	; (adr r3, 8005c78 <Madgwick_filter+0x170>)
 8005b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5e:	f7fa fcb3 	bl	80004c8 <__aeabi_dmul>
 8005b62:	4603      	mov	r3, r0
 8005b64:	460c      	mov	r4, r1
	MadgwickAHRSupdate(beta,
 8005b66:	4618      	mov	r0, r3
 8005b68:	4621      	mov	r1, r4
 8005b6a:	f7fa ff85 	bl	8000a78 <__aeabi_d2f>
 8005b6e:	4682      	mov	sl, r0
					   DataStructure->Accelerometer_X_g, DataStructure->Accelerometer_Y_g, DataStructure->Accelerometer_Z_g,
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 8005b76:	e9d4 3400 	ldrd	r3, r4, [r4]
	MadgwickAHRSupdate(beta,
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	4621      	mov	r1, r4
 8005b7e:	f7fa ff7b 	bl	8000a78 <__aeabi_d2f>
 8005b82:	4605      	mov	r5, r0
					   DataStructure->Accelerometer_X_g, DataStructure->Accelerometer_Y_g, DataStructure->Accelerometer_Z_g,
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8005b8a:	e9d4 3400 	ldrd	r3, r4, [r4]
	MadgwickAHRSupdate(beta,
 8005b8e:	4618      	mov	r0, r3
 8005b90:	4621      	mov	r1, r4
 8005b92:	f7fa ff71 	bl	8000a78 <__aeabi_d2f>
 8005b96:	4606      	mov	r6, r0
					   DataStructure->Accelerometer_X_g, DataStructure->Accelerometer_Y_g, DataStructure->Accelerometer_Z_g,
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f103 04c0 	add.w	r4, r3, #192	; 0xc0
 8005b9e:	e9d4 3400 	ldrd	r3, r4, [r4]
	MadgwickAHRSupdate(beta,
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	4621      	mov	r1, r4
 8005ba6:	f7fa ff67 	bl	8000a78 <__aeabi_d2f>
 8005baa:	4604      	mov	r4, r0
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	f8d2 21b0 	ldr.w	r2, [r2, #432]	; 0x1b0
 8005bb8:	68f9      	ldr	r1, [r7, #12]
 8005bba:	f8d1 11b4 	ldr.w	r1, [r1, #436]	; 0x1b4
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	9006      	str	r0, [sp, #24]
 8005bc2:	9105      	str	r1, [sp, #20]
 8005bc4:	9204      	str	r2, [sp, #16]
 8005bc6:	9303      	str	r3, [sp, #12]
 8005bc8:	9402      	str	r4, [sp, #8]
 8005bca:	9601      	str	r6, [sp, #4]
 8005bcc:	9500      	str	r5, [sp, #0]
 8005bce:	4653      	mov	r3, sl
 8005bd0:	464a      	mov	r2, r9
 8005bd2:	4641      	mov	r1, r8
 8005bd4:	68b8      	ldr	r0, [r7, #8]
 8005bd6:	f7fb fa99 	bl	800110c <MadgwickAHRSupdate>
					   DataStructure->Magnetometer_X_uT, DataStructure->Magnetometer_Y_uT, DataStructure->Magnetometer_Z_uT,
					   dt);

	DataStructure->Madgwick_quaternion.w = q0;
 8005bda:	4b29      	ldr	r3, [pc, #164]	; (8005c80 <Madgwick_filter+0x178>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fa fc1a 	bl	8000418 <__aeabi_f2d>
 8005be4:	4603      	mov	r3, r0
 8005be6:	460c      	mov	r4, r1
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	f502 7212 	add.w	r2, r2, #584	; 0x248
 8005bee:	e9c2 3400 	strd	r3, r4, [r2]
	DataStructure->Madgwick_quaternion.x = q1;
 8005bf2:	4b24      	ldr	r3, [pc, #144]	; (8005c84 <Madgwick_filter+0x17c>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7fa fc0e 	bl	8000418 <__aeabi_f2d>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	460c      	mov	r4, r1
 8005c00:	68fa      	ldr	r2, [r7, #12]
 8005c02:	f502 7214 	add.w	r2, r2, #592	; 0x250
 8005c06:	e9c2 3400 	strd	r3, r4, [r2]
	DataStructure->Madgwick_quaternion.y = q2;
 8005c0a:	4b1f      	ldr	r3, [pc, #124]	; (8005c88 <Madgwick_filter+0x180>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7fa fc02 	bl	8000418 <__aeabi_f2d>
 8005c14:	4603      	mov	r3, r0
 8005c16:	460c      	mov	r4, r1
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	f502 7216 	add.w	r2, r2, #600	; 0x258
 8005c1e:	e9c2 3400 	strd	r3, r4, [r2]
	DataStructure->Madgwick_quaternion.z = q3;
 8005c22:	4b1a      	ldr	r3, [pc, #104]	; (8005c8c <Madgwick_filter+0x184>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7fa fbf6 	bl	8000418 <__aeabi_f2d>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	460c      	mov	r4, r1
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8005c36:	e9c2 3400 	strd	r3, r4, [r2]

	quaternion_normalise(&DataStructure->Madgwick_quaternion);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 f9c8 	bl	8005fd6 <quaternion_normalise>

	struct rot_matrix madgwick_matrix;
	quaternion_to_matrix(&DataStructure->Madgwick_quaternion, &madgwick_matrix);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8005c4c:	f107 0210 	add.w	r2, r7, #16
 8005c50:	4611      	mov	r1, r2
 8005c52:	4618      	mov	r0, r3
 8005c54:	f000 fa40 	bl	80060d8 <quaternion_to_matrix>

	matrix_to_euler(&madgwick_matrix, &DataStructure->Madgwick_euler);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	f503 721a 	add.w	r2, r3, #616	; 0x268
 8005c5e:	f107 0310 	add.w	r3, r7, #16
 8005c62:	4611      	mov	r1, r2
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 fc23 	bl	80064b0 <matrix_to_euler>
}
 8005c6a:	bf00      	nop
 8005c6c:	3758      	adds	r7, #88	; 0x58
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c74:	f3af 8000 	nop.w
 8005c78:	a2529d39 	.word	0xa2529d39
 8005c7c:	3f91df46 	.word	0x3f91df46
 8005c80:	20000000 	.word	0x20000000
 8005c84:	200000d4 	.word	0x200000d4
 8005c88:	200000d8 	.word	0x200000d8
 8005c8c:	200000dc 	.word	0x200000dc

08005c90 <quaternion_init>:
 *      Author: macbookmichal
 */

#include "quaternion.h"

void quaternion_init(struct quaternion *q) {
 8005c90:	b490      	push	{r4, r7}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]

	q->w = 1;
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	f04f 0300 	mov.w	r3, #0
 8005c9e:	4c0e      	ldr	r4, [pc, #56]	; (8005cd8 <quaternion_init+0x48>)
 8005ca0:	e9c2 3400 	strd	r3, r4, [r2]
	q->x = 0;
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	f04f 0300 	mov.w	r3, #0
 8005caa:	f04f 0400 	mov.w	r4, #0
 8005cae:	e9c2 3402 	strd	r3, r4, [r2, #8]
	q->y = 0;
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	f04f 0300 	mov.w	r3, #0
 8005cb8:	f04f 0400 	mov.w	r4, #0
 8005cbc:	e9c2 3404 	strd	r3, r4, [r2, #16]
	q->z = 0;
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	f04f 0300 	mov.w	r3, #0
 8005cc6:	f04f 0400 	mov.w	r4, #0
 8005cca:	e9c2 3406 	strd	r3, r4, [r2, #24]
}
 8005cce:	bf00      	nop
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bc90      	pop	{r4, r7}
 8005cd6:	4770      	bx	lr
 8005cd8:	3ff00000 	.word	0x3ff00000

08005cdc <euler_init>:

void euler_init(struct euler *e) {
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]

	e->roll = 0;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f04f 0200 	mov.w	r2, #0
 8005cea:	601a      	str	r2, [r3, #0]
	e->pitch = 0;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f04f 0200 	mov.w	r2, #0
 8005cf2:	605a      	str	r2, [r3, #4]
	e->yaw = 0;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f04f 0200 	mov.w	r2, #0
 8005cfa:	609a      	str	r2, [r3, #8]
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bc80      	pop	{r7}
 8005d04:	4770      	bx	lr

08005d06 <quaternion_tensor_product>:

struct quaternion quaternion_tensor_product(struct quaternion *q1, struct quaternion *q2) {
 8005d06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d08:	b08d      	sub	sp, #52	; 0x34
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	60f8      	str	r0, [r7, #12]
 8005d0e:	60b9      	str	r1, [r7, #8]
 8005d10:	607a      	str	r2, [r7, #4]

	struct quaternion tensor_product;

	tensor_product.w = (q1->w * q2->w) - (q1->x * q2->x) - (q1->y * q2->y) - (q1->z * q2->z);
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	cb18      	ldmia	r3, {r3, r4}
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	4623      	mov	r3, r4
 8005d20:	f7fa fbd2 	bl	80004c8 <__aeabi_dmul>
 8005d24:	4603      	mov	r3, r0
 8005d26:	460c      	mov	r4, r1
 8005d28:	461d      	mov	r5, r3
 8005d2a:	4626      	mov	r6, r4
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f103 0408 	add.w	r4, r3, #8
 8005d38:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	4623      	mov	r3, r4
 8005d40:	f7fa fbc2 	bl	80004c8 <__aeabi_dmul>
 8005d44:	4603      	mov	r3, r0
 8005d46:	460c      	mov	r4, r1
 8005d48:	461a      	mov	r2, r3
 8005d4a:	4623      	mov	r3, r4
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	4631      	mov	r1, r6
 8005d50:	f7fa fa02 	bl	8000158 <__aeabi_dsub>
 8005d54:	4603      	mov	r3, r0
 8005d56:	460c      	mov	r4, r1
 8005d58:	461d      	mov	r5, r3
 8005d5a:	4626      	mov	r6, r4
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f103 0410 	add.w	r4, r3, #16
 8005d68:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	4623      	mov	r3, r4
 8005d70:	f7fa fbaa 	bl	80004c8 <__aeabi_dmul>
 8005d74:	4603      	mov	r3, r0
 8005d76:	460c      	mov	r4, r1
 8005d78:	461a      	mov	r2, r3
 8005d7a:	4623      	mov	r3, r4
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	4631      	mov	r1, r6
 8005d80:	f7fa f9ea 	bl	8000158 <__aeabi_dsub>
 8005d84:	4603      	mov	r3, r0
 8005d86:	460c      	mov	r4, r1
 8005d88:	461d      	mov	r5, r3
 8005d8a:	4626      	mov	r6, r4
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f103 0418 	add.w	r4, r3, #24
 8005d98:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	4623      	mov	r3, r4
 8005da0:	f7fa fb92 	bl	80004c8 <__aeabi_dmul>
 8005da4:	4603      	mov	r3, r0
 8005da6:	460c      	mov	r4, r1
 8005da8:	461a      	mov	r2, r3
 8005daa:	4623      	mov	r3, r4
 8005dac:	4628      	mov	r0, r5
 8005dae:	4631      	mov	r1, r6
 8005db0:	f7fa f9d2 	bl	8000158 <__aeabi_dsub>
 8005db4:	4603      	mov	r3, r0
 8005db6:	460c      	mov	r4, r1
 8005db8:	e9c7 3404 	strd	r3, r4, [r7, #16]
	tensor_product.x = (q1->w * q2->x) + (q1->x * q2->w) + (q1->y * q2->z) - (q1->z * q2->y);
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f103 0408 	add.w	r4, r3, #8
 8005dc8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005dcc:	461a      	mov	r2, r3
 8005dce:	4623      	mov	r3, r4
 8005dd0:	f7fa fb7a 	bl	80004c8 <__aeabi_dmul>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	461d      	mov	r5, r3
 8005dda:	4626      	mov	r6, r4
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	cb18      	ldmia	r3, {r3, r4}
 8005de6:	461a      	mov	r2, r3
 8005de8:	4623      	mov	r3, r4
 8005dea:	f7fa fb6d 	bl	80004c8 <__aeabi_dmul>
 8005dee:	4603      	mov	r3, r0
 8005df0:	460c      	mov	r4, r1
 8005df2:	461a      	mov	r2, r3
 8005df4:	4623      	mov	r3, r4
 8005df6:	4628      	mov	r0, r5
 8005df8:	4631      	mov	r1, r6
 8005dfa:	f7fa f9af 	bl	800015c <__adddf3>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	460c      	mov	r4, r1
 8005e02:	461d      	mov	r5, r3
 8005e04:	4626      	mov	r6, r4
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f103 0418 	add.w	r4, r3, #24
 8005e12:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005e16:	461a      	mov	r2, r3
 8005e18:	4623      	mov	r3, r4
 8005e1a:	f7fa fb55 	bl	80004c8 <__aeabi_dmul>
 8005e1e:	4603      	mov	r3, r0
 8005e20:	460c      	mov	r4, r1
 8005e22:	461a      	mov	r2, r3
 8005e24:	4623      	mov	r3, r4
 8005e26:	4628      	mov	r0, r5
 8005e28:	4631      	mov	r1, r6
 8005e2a:	f7fa f997 	bl	800015c <__adddf3>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	460c      	mov	r4, r1
 8005e32:	461d      	mov	r5, r3
 8005e34:	4626      	mov	r6, r4
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f103 0410 	add.w	r4, r3, #16
 8005e42:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005e46:	461a      	mov	r2, r3
 8005e48:	4623      	mov	r3, r4
 8005e4a:	f7fa fb3d 	bl	80004c8 <__aeabi_dmul>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	460c      	mov	r4, r1
 8005e52:	461a      	mov	r2, r3
 8005e54:	4623      	mov	r3, r4
 8005e56:	4628      	mov	r0, r5
 8005e58:	4631      	mov	r1, r6
 8005e5a:	f7fa f97d 	bl	8000158 <__aeabi_dsub>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	460c      	mov	r4, r1
 8005e62:	e9c7 3406 	strd	r3, r4, [r7, #24]
	tensor_product.y = (q1->w * q2->y) - (q1->x * q2->z) + (q1->y * q2->w) + (q1->z * q2->x);
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f103 0410 	add.w	r4, r3, #16
 8005e72:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005e76:	461a      	mov	r2, r3
 8005e78:	4623      	mov	r3, r4
 8005e7a:	f7fa fb25 	bl	80004c8 <__aeabi_dmul>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	460c      	mov	r4, r1
 8005e82:	461d      	mov	r5, r3
 8005e84:	4626      	mov	r6, r4
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f103 0418 	add.w	r4, r3, #24
 8005e92:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005e96:	461a      	mov	r2, r3
 8005e98:	4623      	mov	r3, r4
 8005e9a:	f7fa fb15 	bl	80004c8 <__aeabi_dmul>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	460c      	mov	r4, r1
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	4623      	mov	r3, r4
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	4631      	mov	r1, r6
 8005eaa:	f7fa f955 	bl	8000158 <__aeabi_dsub>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	460c      	mov	r4, r1
 8005eb2:	461d      	mov	r5, r3
 8005eb4:	4626      	mov	r6, r4
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	cb18      	ldmia	r3, {r3, r4}
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	4623      	mov	r3, r4
 8005ec4:	f7fa fb00 	bl	80004c8 <__aeabi_dmul>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	460c      	mov	r4, r1
 8005ecc:	461a      	mov	r2, r3
 8005ece:	4623      	mov	r3, r4
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	4631      	mov	r1, r6
 8005ed4:	f7fa f942 	bl	800015c <__adddf3>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	460c      	mov	r4, r1
 8005edc:	461d      	mov	r5, r3
 8005ede:	4626      	mov	r6, r4
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f103 0408 	add.w	r4, r3, #8
 8005eec:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	4623      	mov	r3, r4
 8005ef4:	f7fa fae8 	bl	80004c8 <__aeabi_dmul>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	460c      	mov	r4, r1
 8005efc:	461a      	mov	r2, r3
 8005efe:	4623      	mov	r3, r4
 8005f00:	4628      	mov	r0, r5
 8005f02:	4631      	mov	r1, r6
 8005f04:	f7fa f92a 	bl	800015c <__adddf3>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	460c      	mov	r4, r1
 8005f0c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	tensor_product.z = (q1->w * q2->z) + (q1->x * q2->y) - (q1->y * q2->x) + (q1->z * q2->w);
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f103 0418 	add.w	r4, r3, #24
 8005f1c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005f20:	461a      	mov	r2, r3
 8005f22:	4623      	mov	r3, r4
 8005f24:	f7fa fad0 	bl	80004c8 <__aeabi_dmul>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	460c      	mov	r4, r1
 8005f2c:	461d      	mov	r5, r3
 8005f2e:	4626      	mov	r6, r4
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f103 0410 	add.w	r4, r3, #16
 8005f3c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005f40:	461a      	mov	r2, r3
 8005f42:	4623      	mov	r3, r4
 8005f44:	f7fa fac0 	bl	80004c8 <__aeabi_dmul>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	460c      	mov	r4, r1
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	4623      	mov	r3, r4
 8005f50:	4628      	mov	r0, r5
 8005f52:	4631      	mov	r1, r6
 8005f54:	f7fa f902 	bl	800015c <__adddf3>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	460c      	mov	r4, r1
 8005f5c:	461d      	mov	r5, r3
 8005f5e:	4626      	mov	r6, r4
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f103 0408 	add.w	r4, r3, #8
 8005f6c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005f70:	461a      	mov	r2, r3
 8005f72:	4623      	mov	r3, r4
 8005f74:	f7fa faa8 	bl	80004c8 <__aeabi_dmul>
 8005f78:	4603      	mov	r3, r0
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	4623      	mov	r3, r4
 8005f80:	4628      	mov	r0, r5
 8005f82:	4631      	mov	r1, r6
 8005f84:	f7fa f8e8 	bl	8000158 <__aeabi_dsub>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	460c      	mov	r4, r1
 8005f8c:	461d      	mov	r5, r3
 8005f8e:	4626      	mov	r6, r4
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	cb18      	ldmia	r3, {r3, r4}
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	4623      	mov	r3, r4
 8005f9e:	f7fa fa93 	bl	80004c8 <__aeabi_dmul>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	460c      	mov	r4, r1
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	4623      	mov	r3, r4
 8005faa:	4628      	mov	r0, r5
 8005fac:	4631      	mov	r1, r6
 8005fae:	f7fa f8d5 	bl	800015c <__adddf3>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	460c      	mov	r4, r1
 8005fb6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

	return tensor_product;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	461d      	mov	r5, r3
 8005fbe:	f107 0410 	add.w	r4, r7, #16
 8005fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005fc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005fc6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005fca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8005fce:	68f8      	ldr	r0, [r7, #12]
 8005fd0:	3734      	adds	r7, #52	; 0x34
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005fd6 <quaternion_normalise>:

void quaternion_normalise(struct quaternion *q) {
 8005fd6:	b5b0      	push	{r4, r5, r7, lr}
 8005fd8:	b084      	sub	sp, #16
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]

	double norm = sqrt( pow(q->w,2) + pow(q->x,2) + pow(q->y,2) + pow(q->z,2) );
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005fe4:	f04f 0200 	mov.w	r2, #0
 8005fe8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005fec:	f004 ff10 	bl	800ae10 <pow>
 8005ff0:	4604      	mov	r4, r0
 8005ff2:	460d      	mov	r5, r1
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8005ffa:	f04f 0200 	mov.w	r2, #0
 8005ffe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006002:	f004 ff05 	bl	800ae10 <pow>
 8006006:	4602      	mov	r2, r0
 8006008:	460b      	mov	r3, r1
 800600a:	4620      	mov	r0, r4
 800600c:	4629      	mov	r1, r5
 800600e:	f7fa f8a5 	bl	800015c <__adddf3>
 8006012:	4603      	mov	r3, r0
 8006014:	460c      	mov	r4, r1
 8006016:	4625      	mov	r5, r4
 8006018:	461c      	mov	r4, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006028:	f004 fef2 	bl	800ae10 <pow>
 800602c:	4602      	mov	r2, r0
 800602e:	460b      	mov	r3, r1
 8006030:	4620      	mov	r0, r4
 8006032:	4629      	mov	r1, r5
 8006034:	f7fa f892 	bl	800015c <__adddf3>
 8006038:	4603      	mov	r3, r0
 800603a:	460c      	mov	r4, r1
 800603c:	4625      	mov	r5, r4
 800603e:	461c      	mov	r4, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8006046:	f04f 0200 	mov.w	r2, #0
 800604a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800604e:	f004 fedf 	bl	800ae10 <pow>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	4620      	mov	r0, r4
 8006058:	4629      	mov	r1, r5
 800605a:	f7fa f87f 	bl	800015c <__adddf3>
 800605e:	4603      	mov	r3, r0
 8006060:	460c      	mov	r4, r1
 8006062:	4618      	mov	r0, r3
 8006064:	4621      	mov	r1, r4
 8006066:	f005 f82f 	bl	800b0c8 <sqrt>
 800606a:	e9c7 0102 	strd	r0, r1, [r7, #8]

	q->w = q->w / norm;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006074:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006078:	f7fa fb50 	bl	800071c <__aeabi_ddiv>
 800607c:	4603      	mov	r3, r0
 800607e:	460c      	mov	r4, r1
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	e9c2 3400 	strd	r3, r4, [r2]
	q->x = q->x / norm;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800608c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006090:	f7fa fb44 	bl	800071c <__aeabi_ddiv>
 8006094:	4603      	mov	r3, r0
 8006096:	460c      	mov	r4, r1
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	e9c2 3402 	strd	r3, r4, [r2, #8]
	q->y = q->y / norm;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80060a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060a8:	f7fa fb38 	bl	800071c <__aeabi_ddiv>
 80060ac:	4603      	mov	r3, r0
 80060ae:	460c      	mov	r4, r1
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	e9c2 3404 	strd	r3, r4, [r2, #16]
	q->z = q->z / norm;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80060bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060c0:	f7fa fb2c 	bl	800071c <__aeabi_ddiv>
 80060c4:	4603      	mov	r3, r0
 80060c6:	460c      	mov	r4, r1
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	e9c2 3406 	strd	r3, r4, [r2, #24]
}
 80060ce:	bf00      	nop
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080060d8 <quaternion_to_matrix>:

void quaternion_to_matrix(struct quaternion *q, struct rot_matrix *m) {
 80060d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]

	m->m11 = 1 - ( 2 * pow(q->y,2) ) - ( 2 * pow(q->z,2) );
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80060e8:	f04f 0200 	mov.w	r2, #0
 80060ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80060f0:	f004 fe8e 	bl	800ae10 <pow>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	f7fa f830 	bl	800015c <__adddf3>
 80060fc:	4603      	mov	r3, r0
 80060fe:	460c      	mov	r4, r1
 8006100:	461a      	mov	r2, r3
 8006102:	4623      	mov	r3, r4
 8006104:	f04f 0000 	mov.w	r0, #0
 8006108:	49cb      	ldr	r1, [pc, #812]	; (8006438 <quaternion_to_matrix+0x360>)
 800610a:	f7fa f825 	bl	8000158 <__aeabi_dsub>
 800610e:	4603      	mov	r3, r0
 8006110:	460c      	mov	r4, r1
 8006112:	4625      	mov	r5, r4
 8006114:	461c      	mov	r4, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800611c:	f04f 0200 	mov.w	r2, #0
 8006120:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006124:	f004 fe74 	bl	800ae10 <pow>
 8006128:	4602      	mov	r2, r0
 800612a:	460b      	mov	r3, r1
 800612c:	f7fa f816 	bl	800015c <__adddf3>
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4620      	mov	r0, r4
 8006136:	4629      	mov	r1, r5
 8006138:	f7fa f80e 	bl	8000158 <__aeabi_dsub>
 800613c:	4603      	mov	r3, r0
 800613e:	460c      	mov	r4, r1
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	e9c2 3400 	strd	r3, r4, [r2]
	m->m12 = ( 2 * q->x * q->y ) - ( 2 * q->z * q->w );
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800614c:	4602      	mov	r2, r0
 800614e:	460b      	mov	r3, r1
 8006150:	f7fa f804 	bl	800015c <__adddf3>
 8006154:	4603      	mov	r3, r0
 8006156:	460c      	mov	r4, r1
 8006158:	4618      	mov	r0, r3
 800615a:	4621      	mov	r1, r4
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f103 0410 	add.w	r4, r3, #16
 8006162:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006166:	461a      	mov	r2, r3
 8006168:	4623      	mov	r3, r4
 800616a:	f7fa f9ad 	bl	80004c8 <__aeabi_dmul>
 800616e:	4603      	mov	r3, r0
 8006170:	460c      	mov	r4, r1
 8006172:	461d      	mov	r5, r3
 8006174:	4626      	mov	r6, r4
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800617c:	4602      	mov	r2, r0
 800617e:	460b      	mov	r3, r1
 8006180:	f7f9 ffec 	bl	800015c <__adddf3>
 8006184:	4603      	mov	r3, r0
 8006186:	460c      	mov	r4, r1
 8006188:	4618      	mov	r0, r3
 800618a:	4621      	mov	r1, r4
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	cb18      	ldmia	r3, {r3, r4}
 8006190:	461a      	mov	r2, r3
 8006192:	4623      	mov	r3, r4
 8006194:	f7fa f998 	bl	80004c8 <__aeabi_dmul>
 8006198:	4603      	mov	r3, r0
 800619a:	460c      	mov	r4, r1
 800619c:	461a      	mov	r2, r3
 800619e:	4623      	mov	r3, r4
 80061a0:	4628      	mov	r0, r5
 80061a2:	4631      	mov	r1, r6
 80061a4:	f7f9 ffd8 	bl	8000158 <__aeabi_dsub>
 80061a8:	4603      	mov	r3, r0
 80061aa:	460c      	mov	r4, r1
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	e9c2 3402 	strd	r3, r4, [r2, #8]
	m->m13 = ( 2 * q->x * q->z ) + ( 2 * q->y * q->w );
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80061b8:	4602      	mov	r2, r0
 80061ba:	460b      	mov	r3, r1
 80061bc:	f7f9 ffce 	bl	800015c <__adddf3>
 80061c0:	4603      	mov	r3, r0
 80061c2:	460c      	mov	r4, r1
 80061c4:	4618      	mov	r0, r3
 80061c6:	4621      	mov	r1, r4
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f103 0418 	add.w	r4, r3, #24
 80061ce:	e9d4 3400 	ldrd	r3, r4, [r4]
 80061d2:	461a      	mov	r2, r3
 80061d4:	4623      	mov	r3, r4
 80061d6:	f7fa f977 	bl	80004c8 <__aeabi_dmul>
 80061da:	4603      	mov	r3, r0
 80061dc:	460c      	mov	r4, r1
 80061de:	461d      	mov	r5, r3
 80061e0:	4626      	mov	r6, r4
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80061e8:	4602      	mov	r2, r0
 80061ea:	460b      	mov	r3, r1
 80061ec:	f7f9 ffb6 	bl	800015c <__adddf3>
 80061f0:	4603      	mov	r3, r0
 80061f2:	460c      	mov	r4, r1
 80061f4:	4618      	mov	r0, r3
 80061f6:	4621      	mov	r1, r4
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	cb18      	ldmia	r3, {r3, r4}
 80061fc:	461a      	mov	r2, r3
 80061fe:	4623      	mov	r3, r4
 8006200:	f7fa f962 	bl	80004c8 <__aeabi_dmul>
 8006204:	4603      	mov	r3, r0
 8006206:	460c      	mov	r4, r1
 8006208:	461a      	mov	r2, r3
 800620a:	4623      	mov	r3, r4
 800620c:	4628      	mov	r0, r5
 800620e:	4631      	mov	r1, r6
 8006210:	f7f9 ffa4 	bl	800015c <__adddf3>
 8006214:	4603      	mov	r3, r0
 8006216:	460c      	mov	r4, r1
 8006218:	683a      	ldr	r2, [r7, #0]
 800621a:	e9c2 3404 	strd	r3, r4, [r2, #16]

	m->m21 = ( 2 * q->x * q->y ) + ( 2 * q->z * q->w );
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	f7f9 ff98 	bl	800015c <__adddf3>
 800622c:	4603      	mov	r3, r0
 800622e:	460c      	mov	r4, r1
 8006230:	4618      	mov	r0, r3
 8006232:	4621      	mov	r1, r4
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f103 0410 	add.w	r4, r3, #16
 800623a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800623e:	461a      	mov	r2, r3
 8006240:	4623      	mov	r3, r4
 8006242:	f7fa f941 	bl	80004c8 <__aeabi_dmul>
 8006246:	4603      	mov	r3, r0
 8006248:	460c      	mov	r4, r1
 800624a:	461d      	mov	r5, r3
 800624c:	4626      	mov	r6, r4
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	f7f9 ff80 	bl	800015c <__adddf3>
 800625c:	4603      	mov	r3, r0
 800625e:	460c      	mov	r4, r1
 8006260:	4618      	mov	r0, r3
 8006262:	4621      	mov	r1, r4
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	cb18      	ldmia	r3, {r3, r4}
 8006268:	461a      	mov	r2, r3
 800626a:	4623      	mov	r3, r4
 800626c:	f7fa f92c 	bl	80004c8 <__aeabi_dmul>
 8006270:	4603      	mov	r3, r0
 8006272:	460c      	mov	r4, r1
 8006274:	461a      	mov	r2, r3
 8006276:	4623      	mov	r3, r4
 8006278:	4628      	mov	r0, r5
 800627a:	4631      	mov	r1, r6
 800627c:	f7f9 ff6e 	bl	800015c <__adddf3>
 8006280:	4603      	mov	r3, r0
 8006282:	460c      	mov	r4, r1
 8006284:	683a      	ldr	r2, [r7, #0]
 8006286:	e9c2 3406 	strd	r3, r4, [r2, #24]
	m->m22 = 1 - ( 2 * pow(q->x,2) ) - ( 2 * pow(q->z,2) );
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006290:	f04f 0200 	mov.w	r2, #0
 8006294:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006298:	f004 fdba 	bl	800ae10 <pow>
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	f7f9 ff5c 	bl	800015c <__adddf3>
 80062a4:	4603      	mov	r3, r0
 80062a6:	460c      	mov	r4, r1
 80062a8:	461a      	mov	r2, r3
 80062aa:	4623      	mov	r3, r4
 80062ac:	f04f 0000 	mov.w	r0, #0
 80062b0:	4961      	ldr	r1, [pc, #388]	; (8006438 <quaternion_to_matrix+0x360>)
 80062b2:	f7f9 ff51 	bl	8000158 <__aeabi_dsub>
 80062b6:	4603      	mov	r3, r0
 80062b8:	460c      	mov	r4, r1
 80062ba:	4625      	mov	r5, r4
 80062bc:	461c      	mov	r4, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80062c4:	f04f 0200 	mov.w	r2, #0
 80062c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80062cc:	f004 fda0 	bl	800ae10 <pow>
 80062d0:	4602      	mov	r2, r0
 80062d2:	460b      	mov	r3, r1
 80062d4:	f7f9 ff42 	bl	800015c <__adddf3>
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	4620      	mov	r0, r4
 80062de:	4629      	mov	r1, r5
 80062e0:	f7f9 ff3a 	bl	8000158 <__aeabi_dsub>
 80062e4:	4603      	mov	r3, r0
 80062e6:	460c      	mov	r4, r1
 80062e8:	683a      	ldr	r2, [r7, #0]
 80062ea:	e9c2 3408 	strd	r3, r4, [r2, #32]
	m->m23 = ( 2 * q->y * q->z ) - ( 2 * q->x * q->w );
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80062f4:	4602      	mov	r2, r0
 80062f6:	460b      	mov	r3, r1
 80062f8:	f7f9 ff30 	bl	800015c <__adddf3>
 80062fc:	4603      	mov	r3, r0
 80062fe:	460c      	mov	r4, r1
 8006300:	4618      	mov	r0, r3
 8006302:	4621      	mov	r1, r4
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f103 0418 	add.w	r4, r3, #24
 800630a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800630e:	461a      	mov	r2, r3
 8006310:	4623      	mov	r3, r4
 8006312:	f7fa f8d9 	bl	80004c8 <__aeabi_dmul>
 8006316:	4603      	mov	r3, r0
 8006318:	460c      	mov	r4, r1
 800631a:	461d      	mov	r5, r3
 800631c:	4626      	mov	r6, r4
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006324:	4602      	mov	r2, r0
 8006326:	460b      	mov	r3, r1
 8006328:	f7f9 ff18 	bl	800015c <__adddf3>
 800632c:	4603      	mov	r3, r0
 800632e:	460c      	mov	r4, r1
 8006330:	4618      	mov	r0, r3
 8006332:	4621      	mov	r1, r4
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	cb18      	ldmia	r3, {r3, r4}
 8006338:	461a      	mov	r2, r3
 800633a:	4623      	mov	r3, r4
 800633c:	f7fa f8c4 	bl	80004c8 <__aeabi_dmul>
 8006340:	4603      	mov	r3, r0
 8006342:	460c      	mov	r4, r1
 8006344:	461a      	mov	r2, r3
 8006346:	4623      	mov	r3, r4
 8006348:	4628      	mov	r0, r5
 800634a:	4631      	mov	r1, r6
 800634c:	f7f9 ff04 	bl	8000158 <__aeabi_dsub>
 8006350:	4603      	mov	r3, r0
 8006352:	460c      	mov	r4, r1
 8006354:	683a      	ldr	r2, [r7, #0]
 8006356:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	m->m31 = ( 2 * q->x * q->z ) - ( 2 * q->y * q->w );
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	f7f9 fefa 	bl	800015c <__adddf3>
 8006368:	4603      	mov	r3, r0
 800636a:	460c      	mov	r4, r1
 800636c:	4618      	mov	r0, r3
 800636e:	4621      	mov	r1, r4
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f103 0418 	add.w	r4, r3, #24
 8006376:	e9d4 3400 	ldrd	r3, r4, [r4]
 800637a:	461a      	mov	r2, r3
 800637c:	4623      	mov	r3, r4
 800637e:	f7fa f8a3 	bl	80004c8 <__aeabi_dmul>
 8006382:	4603      	mov	r3, r0
 8006384:	460c      	mov	r4, r1
 8006386:	461d      	mov	r5, r3
 8006388:	4626      	mov	r6, r4
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006390:	4602      	mov	r2, r0
 8006392:	460b      	mov	r3, r1
 8006394:	f7f9 fee2 	bl	800015c <__adddf3>
 8006398:	4603      	mov	r3, r0
 800639a:	460c      	mov	r4, r1
 800639c:	4618      	mov	r0, r3
 800639e:	4621      	mov	r1, r4
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	cb18      	ldmia	r3, {r3, r4}
 80063a4:	461a      	mov	r2, r3
 80063a6:	4623      	mov	r3, r4
 80063a8:	f7fa f88e 	bl	80004c8 <__aeabi_dmul>
 80063ac:	4603      	mov	r3, r0
 80063ae:	460c      	mov	r4, r1
 80063b0:	461a      	mov	r2, r3
 80063b2:	4623      	mov	r3, r4
 80063b4:	4628      	mov	r0, r5
 80063b6:	4631      	mov	r1, r6
 80063b8:	f7f9 fece 	bl	8000158 <__aeabi_dsub>
 80063bc:	4603      	mov	r3, r0
 80063be:	460c      	mov	r4, r1
 80063c0:	683a      	ldr	r2, [r7, #0]
 80063c2:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	m->m32 = ( 2 * q->y * q->z ) + ( 2 * q->x * q->w );
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	f7f9 fec4 	bl	800015c <__adddf3>
 80063d4:	4603      	mov	r3, r0
 80063d6:	460c      	mov	r4, r1
 80063d8:	4618      	mov	r0, r3
 80063da:	4621      	mov	r1, r4
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f103 0418 	add.w	r4, r3, #24
 80063e2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80063e6:	461a      	mov	r2, r3
 80063e8:	4623      	mov	r3, r4
 80063ea:	f7fa f86d 	bl	80004c8 <__aeabi_dmul>
 80063ee:	4603      	mov	r3, r0
 80063f0:	460c      	mov	r4, r1
 80063f2:	461d      	mov	r5, r3
 80063f4:	4626      	mov	r6, r4
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	f7f9 feac 	bl	800015c <__adddf3>
 8006404:	4603      	mov	r3, r0
 8006406:	460c      	mov	r4, r1
 8006408:	4618      	mov	r0, r3
 800640a:	4621      	mov	r1, r4
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	cb18      	ldmia	r3, {r3, r4}
 8006410:	461a      	mov	r2, r3
 8006412:	4623      	mov	r3, r4
 8006414:	f7fa f858 	bl	80004c8 <__aeabi_dmul>
 8006418:	4603      	mov	r3, r0
 800641a:	460c      	mov	r4, r1
 800641c:	461a      	mov	r2, r3
 800641e:	4623      	mov	r3, r4
 8006420:	4628      	mov	r0, r5
 8006422:	4631      	mov	r1, r6
 8006424:	f7f9 fe9a 	bl	800015c <__adddf3>
 8006428:	4603      	mov	r3, r0
 800642a:	460c      	mov	r4, r1
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	m->m33 = 1 - ( 2 * pow(q->x,2) ) - ( 2 * pow(q->y,2) );
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	e002      	b.n	800643c <quaternion_to_matrix+0x364>
 8006436:	bf00      	nop
 8006438:	3ff00000 	.word	0x3ff00000
 800643c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006440:	f04f 0200 	mov.w	r2, #0
 8006444:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006448:	f004 fce2 	bl	800ae10 <pow>
 800644c:	4602      	mov	r2, r0
 800644e:	460b      	mov	r3, r1
 8006450:	f7f9 fe84 	bl	800015c <__adddf3>
 8006454:	4603      	mov	r3, r0
 8006456:	460c      	mov	r4, r1
 8006458:	461a      	mov	r2, r3
 800645a:	4623      	mov	r3, r4
 800645c:	f04f 0000 	mov.w	r0, #0
 8006460:	4911      	ldr	r1, [pc, #68]	; (80064a8 <quaternion_to_matrix+0x3d0>)
 8006462:	f7f9 fe79 	bl	8000158 <__aeabi_dsub>
 8006466:	4603      	mov	r3, r0
 8006468:	460c      	mov	r4, r1
 800646a:	4625      	mov	r5, r4
 800646c:	461c      	mov	r4, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006474:	f04f 0200 	mov.w	r2, #0
 8006478:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800647c:	f004 fcc8 	bl	800ae10 <pow>
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	f7f9 fe6a 	bl	800015c <__adddf3>
 8006488:	4602      	mov	r2, r0
 800648a:	460b      	mov	r3, r1
 800648c:	4620      	mov	r0, r4
 800648e:	4629      	mov	r1, r5
 8006490:	f7f9 fe62 	bl	8000158 <__aeabi_dsub>
 8006494:	4603      	mov	r3, r0
 8006496:	460c      	mov	r4, r1
 8006498:	683a      	ldr	r2, [r7, #0]
 800649a:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
}
 800649e:	bf00      	nop
 80064a0:	370c      	adds	r7, #12
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064a6:	bf00      	nop
 80064a8:	3ff00000 	.word	0x3ff00000
 80064ac:	00000000 	.word	0x00000000

080064b0 <matrix_to_euler>:

void matrix_to_euler(struct rot_matrix *m, struct euler *e) {
 80064b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80064b4:	b085      	sub	sp, #20
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
 80064ba:	6039      	str	r1, [r7, #0]

	double Beta = atan2f(-m->m31, sqrt( pow(m->m11,2) + pow(m->m21,2) ) );
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80064c2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80064c6:	4618      	mov	r0, r3
 80064c8:	4621      	mov	r1, r4
 80064ca:	f7fa fad5 	bl	8000a78 <__aeabi_d2f>
 80064ce:	4603      	mov	r3, r0
 80064d0:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80064da:	f04f 0200 	mov.w	r2, #0
 80064de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80064e2:	f004 fc95 	bl	800ae10 <pow>
 80064e6:	4605      	mov	r5, r0
 80064e8:	460e      	mov	r6, r1
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80064f0:	f04f 0200 	mov.w	r2, #0
 80064f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80064f8:	f004 fc8a 	bl	800ae10 <pow>
 80064fc:	4602      	mov	r2, r0
 80064fe:	460b      	mov	r3, r1
 8006500:	4628      	mov	r0, r5
 8006502:	4631      	mov	r1, r6
 8006504:	f7f9 fe2a 	bl	800015c <__adddf3>
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	4610      	mov	r0, r2
 800650e:	4619      	mov	r1, r3
 8006510:	f004 fdda 	bl	800b0c8 <sqrt>
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	4610      	mov	r0, r2
 800651a:	4619      	mov	r1, r3
 800651c:	f7fa faac 	bl	8000a78 <__aeabi_d2f>
 8006520:	4603      	mov	r3, r0
 8006522:	4619      	mov	r1, r3
 8006524:	4620      	mov	r0, r4
 8006526:	f004 fe23 	bl	800b170 <atan2f>
 800652a:	4603      	mov	r3, r0
 800652c:	4618      	mov	r0, r3
 800652e:	f7f9 ff73 	bl	8000418 <__aeabi_f2d>
 8006532:	4603      	mov	r3, r0
 8006534:	460c      	mov	r4, r1
 8006536:	e9c7 3402 	strd	r3, r4, [r7, #8]

	e->pitch = Beta * (180 / M_PI);
 800653a:	a347      	add	r3, pc, #284	; (adr r3, 8006658 <matrix_to_euler+0x1a8>)
 800653c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006540:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006544:	f7f9 ffc0 	bl	80004c8 <__aeabi_dmul>
 8006548:	4603      	mov	r3, r0
 800654a:	460c      	mov	r4, r1
 800654c:	4618      	mov	r0, r3
 800654e:	4621      	mov	r1, r4
 8006550:	f7fa fa92 	bl	8000a78 <__aeabi_d2f>
 8006554:	4602      	mov	r2, r0
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	605a      	str	r2, [r3, #4]
	e->roll  = atan2(m->m32 / cosf(Beta), m->m33 / cos(Beta) ) * (180 / M_PI);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8006560:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006564:	f7fa fa88 	bl	8000a78 <__aeabi_d2f>
 8006568:	4603      	mov	r3, r0
 800656a:	4618      	mov	r0, r3
 800656c:	f004 fc1a 	bl	800ada4 <cosf>
 8006570:	4603      	mov	r3, r0
 8006572:	4618      	mov	r0, r3
 8006574:	f7f9 ff50 	bl	8000418 <__aeabi_f2d>
 8006578:	4602      	mov	r2, r0
 800657a:	460b      	mov	r3, r1
 800657c:	4620      	mov	r0, r4
 800657e:	4629      	mov	r1, r5
 8006580:	f7fa f8cc 	bl	800071c <__aeabi_ddiv>
 8006584:	4603      	mov	r3, r0
 8006586:	460c      	mov	r4, r1
 8006588:	4698      	mov	r8, r3
 800658a:	46a1      	mov	r9, r4
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8006592:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006596:	f004 fbcf 	bl	800ad38 <cos>
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	4620      	mov	r0, r4
 80065a0:	4629      	mov	r1, r5
 80065a2:	f7fa f8bb 	bl	800071c <__aeabi_ddiv>
 80065a6:	4603      	mov	r3, r0
 80065a8:	460c      	mov	r4, r1
 80065aa:	461a      	mov	r2, r3
 80065ac:	4623      	mov	r3, r4
 80065ae:	4640      	mov	r0, r8
 80065b0:	4649      	mov	r1, r9
 80065b2:	f004 fc2b 	bl	800ae0c <atan2>
 80065b6:	a328      	add	r3, pc, #160	; (adr r3, 8006658 <matrix_to_euler+0x1a8>)
 80065b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065bc:	f7f9 ff84 	bl	80004c8 <__aeabi_dmul>
 80065c0:	4603      	mov	r3, r0
 80065c2:	460c      	mov	r4, r1
 80065c4:	4618      	mov	r0, r3
 80065c6:	4621      	mov	r1, r4
 80065c8:	f7fa fa56 	bl	8000a78 <__aeabi_d2f>
 80065cc:	4602      	mov	r2, r0
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	601a      	str	r2, [r3, #0]
	e->yaw   = atan2(m->m21 / cosf(Beta), m->m11 / cos(Beta) ) * (180 / M_PI);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80065d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80065dc:	f7fa fa4c 	bl	8000a78 <__aeabi_d2f>
 80065e0:	4603      	mov	r3, r0
 80065e2:	4618      	mov	r0, r3
 80065e4:	f004 fbde 	bl	800ada4 <cosf>
 80065e8:	4603      	mov	r3, r0
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7f9 ff14 	bl	8000418 <__aeabi_f2d>
 80065f0:	4602      	mov	r2, r0
 80065f2:	460b      	mov	r3, r1
 80065f4:	4620      	mov	r0, r4
 80065f6:	4629      	mov	r1, r5
 80065f8:	f7fa f890 	bl	800071c <__aeabi_ddiv>
 80065fc:	4603      	mov	r3, r0
 80065fe:	460c      	mov	r4, r1
 8006600:	4698      	mov	r8, r3
 8006602:	46a1      	mov	r9, r4
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	e9d3 4500 	ldrd	r4, r5, [r3]
 800660a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800660e:	f004 fb93 	bl	800ad38 <cos>
 8006612:	4602      	mov	r2, r0
 8006614:	460b      	mov	r3, r1
 8006616:	4620      	mov	r0, r4
 8006618:	4629      	mov	r1, r5
 800661a:	f7fa f87f 	bl	800071c <__aeabi_ddiv>
 800661e:	4603      	mov	r3, r0
 8006620:	460c      	mov	r4, r1
 8006622:	461a      	mov	r2, r3
 8006624:	4623      	mov	r3, r4
 8006626:	4640      	mov	r0, r8
 8006628:	4649      	mov	r1, r9
 800662a:	f004 fbef 	bl	800ae0c <atan2>
 800662e:	a30a      	add	r3, pc, #40	; (adr r3, 8006658 <matrix_to_euler+0x1a8>)
 8006630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006634:	f7f9 ff48 	bl	80004c8 <__aeabi_dmul>
 8006638:	4603      	mov	r3, r0
 800663a:	460c      	mov	r4, r1
 800663c:	4618      	mov	r0, r3
 800663e:	4621      	mov	r1, r4
 8006640:	f7fa fa1a 	bl	8000a78 <__aeabi_d2f>
 8006644:	4602      	mov	r2, r0
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	609a      	str	r2, [r3, #8]
}
 800664a:	bf00      	nop
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006654:	f3af 8000 	nop.w
 8006658:	1a63c1f8 	.word	0x1a63c1f8
 800665c:	404ca5dc 	.word	0x404ca5dc

08006660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8006666:	4b18      	ldr	r3, [pc, #96]	; (80066c8 <HAL_MspInit+0x68>)
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	4a17      	ldr	r2, [pc, #92]	; (80066c8 <HAL_MspInit+0x68>)
 800666c:	f043 0301 	orr.w	r3, r3, #1
 8006670:	6193      	str	r3, [r2, #24]
 8006672:	4b15      	ldr	r3, [pc, #84]	; (80066c8 <HAL_MspInit+0x68>)
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	f003 0301 	and.w	r3, r3, #1
 800667a:	60bb      	str	r3, [r7, #8]
 800667c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800667e:	4b12      	ldr	r3, [pc, #72]	; (80066c8 <HAL_MspInit+0x68>)
 8006680:	69db      	ldr	r3, [r3, #28]
 8006682:	4a11      	ldr	r2, [pc, #68]	; (80066c8 <HAL_MspInit+0x68>)
 8006684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006688:	61d3      	str	r3, [r2, #28]
 800668a:	4b0f      	ldr	r3, [pc, #60]	; (80066c8 <HAL_MspInit+0x68>)
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006692:	607b      	str	r3, [r7, #4]
 8006694:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006696:	2200      	movs	r2, #0
 8006698:	210f      	movs	r1, #15
 800669a:	f06f 0001 	mvn.w	r0, #1
 800669e:	f000 fb00 	bl	8006ca2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80066a2:	4b0a      	ldr	r3, [pc, #40]	; (80066cc <HAL_MspInit+0x6c>)
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	60fb      	str	r3, [r7, #12]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80066b6:	60fb      	str	r3, [r7, #12]
 80066b8:	4a04      	ldr	r2, [pc, #16]	; (80066cc <HAL_MspInit+0x6c>)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80066be:	bf00      	nop
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	40021000 	.word	0x40021000
 80066cc:	40010000 	.word	0x40010000

080066d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80066d0:	b480      	push	{r7}
 80066d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80066d4:	bf00      	nop
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bc80      	pop	{r7}
 80066da:	4770      	bx	lr

080066dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80066dc:	b480      	push	{r7}
 80066de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80066e0:	e7fe      	b.n	80066e0 <HardFault_Handler+0x4>

080066e2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80066e2:	b480      	push	{r7}
 80066e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80066e6:	e7fe      	b.n	80066e6 <MemManage_Handler+0x4>

080066e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80066e8:	b480      	push	{r7}
 80066ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80066ec:	e7fe      	b.n	80066ec <BusFault_Handler+0x4>

080066ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80066ee:	b480      	push	{r7}
 80066f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80066f2:	e7fe      	b.n	80066f2 <UsageFault_Handler+0x4>

080066f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80066f4:	b480      	push	{r7}
 80066f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80066f8:	bf00      	nop
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bc80      	pop	{r7}
 80066fe:	4770      	bx	lr

08006700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006704:	f000 f9b8 	bl	8006a78 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006708:	f003 fee6 	bl	800a4d8 <xTaskGetSchedulerState>
 800670c:	4603      	mov	r3, r0
 800670e:	2b01      	cmp	r3, #1
 8006710:	d001      	beq.n	8006716 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8006712:	f004 f8c9 	bl	800a8a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006716:	bf00      	nop
 8006718:	bd80      	pop	{r7, pc}
	...

0800671c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006720:	4802      	ldr	r0, [pc, #8]	; (800672c <DMA1_Channel4_IRQHandler+0x10>)
 8006722:	f000 fc25 	bl	8006f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8006726:	bf00      	nop
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	20003534 	.word	0x20003534

08006730 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006734:	4802      	ldr	r0, [pc, #8]	; (8006740 <DMA1_Channel5_IRQHandler+0x10>)
 8006736:	f000 fc1b 	bl	8006f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800673a:	bf00      	nop
 800673c:	bd80      	pop	{r7, pc}
 800673e:	bf00      	nop
 8006740:	20003578 	.word	0x20003578

08006744 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8006748:	4802      	ldr	r0, [pc, #8]	; (8006754 <DMA1_Channel6_IRQHandler+0x10>)
 800674a:	f000 fc11 	bl	8006f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800674e:	bf00      	nop
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	20003458 	.word	0x20003458

08006758 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800675c:	4802      	ldr	r0, [pc, #8]	; (8006768 <DMA1_Channel7_IRQHandler+0x10>)
 800675e:	f000 fc07 	bl	8006f70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8006762:	bf00      	nop
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	200034f0 	.word	0x200034f0

0800676c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006770:	4802      	ldr	r0, [pc, #8]	; (800677c <USART1_IRQHandler+0x10>)
 8006772:	f002 fce3 	bl	800913c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006776:	bf00      	nop
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	200035bc 	.word	0x200035bc

08006780 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006784:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006788:	f000 feb0 	bl	80074ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800678c:	bf00      	nop
 800678e:	bd80      	pop	{r7, pc}

08006790 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006790:	b480      	push	{r7}
 8006792:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006794:	4b15      	ldr	r3, [pc, #84]	; (80067ec <SystemInit+0x5c>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a14      	ldr	r2, [pc, #80]	; (80067ec <SystemInit+0x5c>)
 800679a:	f043 0301 	orr.w	r3, r3, #1
 800679e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80067a0:	4b12      	ldr	r3, [pc, #72]	; (80067ec <SystemInit+0x5c>)
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	4911      	ldr	r1, [pc, #68]	; (80067ec <SystemInit+0x5c>)
 80067a6:	4b12      	ldr	r3, [pc, #72]	; (80067f0 <SystemInit+0x60>)
 80067a8:	4013      	ands	r3, r2
 80067aa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80067ac:	4b0f      	ldr	r3, [pc, #60]	; (80067ec <SystemInit+0x5c>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	4a0e      	ldr	r2, [pc, #56]	; (80067ec <SystemInit+0x5c>)
 80067b2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80067b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067ba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80067bc:	4b0b      	ldr	r3, [pc, #44]	; (80067ec <SystemInit+0x5c>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a0a      	ldr	r2, [pc, #40]	; (80067ec <SystemInit+0x5c>)
 80067c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067c6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80067c8:	4b08      	ldr	r3, [pc, #32]	; (80067ec <SystemInit+0x5c>)
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	4a07      	ldr	r2, [pc, #28]	; (80067ec <SystemInit+0x5c>)
 80067ce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80067d2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80067d4:	4b05      	ldr	r3, [pc, #20]	; (80067ec <SystemInit+0x5c>)
 80067d6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80067da:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80067dc:	4b05      	ldr	r3, [pc, #20]	; (80067f4 <SystemInit+0x64>)
 80067de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80067e2:	609a      	str	r2, [r3, #8]
#endif 
}
 80067e4:	bf00      	nop
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bc80      	pop	{r7}
 80067ea:	4770      	bx	lr
 80067ec:	40021000 	.word	0x40021000
 80067f0:	f8ff0000 	.word	0xf8ff0000
 80067f4:	e000ed00 	.word	0xe000ed00

080067f8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80067fc:	4b11      	ldr	r3, [pc, #68]	; (8006844 <MX_USART1_UART_Init+0x4c>)
 80067fe:	4a12      	ldr	r2, [pc, #72]	; (8006848 <MX_USART1_UART_Init+0x50>)
 8006800:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006802:	4b10      	ldr	r3, [pc, #64]	; (8006844 <MX_USART1_UART_Init+0x4c>)
 8006804:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006808:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800680a:	4b0e      	ldr	r3, [pc, #56]	; (8006844 <MX_USART1_UART_Init+0x4c>)
 800680c:	2200      	movs	r2, #0
 800680e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006810:	4b0c      	ldr	r3, [pc, #48]	; (8006844 <MX_USART1_UART_Init+0x4c>)
 8006812:	2200      	movs	r2, #0
 8006814:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006816:	4b0b      	ldr	r3, [pc, #44]	; (8006844 <MX_USART1_UART_Init+0x4c>)
 8006818:	2200      	movs	r2, #0
 800681a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800681c:	4b09      	ldr	r3, [pc, #36]	; (8006844 <MX_USART1_UART_Init+0x4c>)
 800681e:	220c      	movs	r2, #12
 8006820:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006822:	4b08      	ldr	r3, [pc, #32]	; (8006844 <MX_USART1_UART_Init+0x4c>)
 8006824:	2200      	movs	r2, #0
 8006826:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006828:	4b06      	ldr	r3, [pc, #24]	; (8006844 <MX_USART1_UART_Init+0x4c>)
 800682a:	2200      	movs	r2, #0
 800682c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800682e:	4805      	ldr	r0, [pc, #20]	; (8006844 <MX_USART1_UART_Init+0x4c>)
 8006830:	f002 fb4a 	bl	8008ec8 <HAL_UART_Init>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d001      	beq.n	800683e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800683a:	f7fd fa7b 	bl	8003d34 <Error_Handler>
  }

}
 800683e:	bf00      	nop
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	200035bc 	.word	0x200035bc
 8006848:	40013800 	.word	0x40013800

0800684c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b088      	sub	sp, #32
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006854:	f107 0310 	add.w	r3, r7, #16
 8006858:	2200      	movs	r2, #0
 800685a:	601a      	str	r2, [r3, #0]
 800685c:	605a      	str	r2, [r3, #4]
 800685e:	609a      	str	r2, [r3, #8]
 8006860:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a47      	ldr	r2, [pc, #284]	; (8006984 <HAL_UART_MspInit+0x138>)
 8006868:	4293      	cmp	r3, r2
 800686a:	f040 8086 	bne.w	800697a <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800686e:	4b46      	ldr	r3, [pc, #280]	; (8006988 <HAL_UART_MspInit+0x13c>)
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	4a45      	ldr	r2, [pc, #276]	; (8006988 <HAL_UART_MspInit+0x13c>)
 8006874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006878:	6193      	str	r3, [r2, #24]
 800687a:	4b43      	ldr	r3, [pc, #268]	; (8006988 <HAL_UART_MspInit+0x13c>)
 800687c:	699b      	ldr	r3, [r3, #24]
 800687e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006886:	4b40      	ldr	r3, [pc, #256]	; (8006988 <HAL_UART_MspInit+0x13c>)
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	4a3f      	ldr	r2, [pc, #252]	; (8006988 <HAL_UART_MspInit+0x13c>)
 800688c:	f043 0304 	orr.w	r3, r3, #4
 8006890:	6193      	str	r3, [r2, #24]
 8006892:	4b3d      	ldr	r3, [pc, #244]	; (8006988 <HAL_UART_MspInit+0x13c>)
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	f003 0304 	and.w	r3, r3, #4
 800689a:	60bb      	str	r3, [r7, #8]
 800689c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = USART1_HC05_TX_Pin;
 800689e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068a4:	2302      	movs	r3, #2
 80068a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80068a8:	2303      	movs	r3, #3
 80068aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USART1_HC05_TX_GPIO_Port, &GPIO_InitStruct);
 80068ac:	f107 0310 	add.w	r3, r7, #16
 80068b0:	4619      	mov	r1, r3
 80068b2:	4836      	ldr	r0, [pc, #216]	; (800698c <HAL_UART_MspInit+0x140>)
 80068b4:	f000 fc90 	bl	80071d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_HC05_RX_Pin;
 80068b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068bc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80068be:	2300      	movs	r3, #0
 80068c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(USART1_HC05_RX_GPIO_Port, &GPIO_InitStruct);
 80068c6:	f107 0310 	add.w	r3, r7, #16
 80068ca:	4619      	mov	r1, r3
 80068cc:	482f      	ldr	r0, [pc, #188]	; (800698c <HAL_UART_MspInit+0x140>)
 80068ce:	f000 fc83 	bl	80071d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80068d2:	4b2f      	ldr	r3, [pc, #188]	; (8006990 <HAL_UART_MspInit+0x144>)
 80068d4:	4a2f      	ldr	r2, [pc, #188]	; (8006994 <HAL_UART_MspInit+0x148>)
 80068d6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80068d8:	4b2d      	ldr	r3, [pc, #180]	; (8006990 <HAL_UART_MspInit+0x144>)
 80068da:	2200      	movs	r2, #0
 80068dc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80068de:	4b2c      	ldr	r3, [pc, #176]	; (8006990 <HAL_UART_MspInit+0x144>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80068e4:	4b2a      	ldr	r3, [pc, #168]	; (8006990 <HAL_UART_MspInit+0x144>)
 80068e6:	2280      	movs	r2, #128	; 0x80
 80068e8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80068ea:	4b29      	ldr	r3, [pc, #164]	; (8006990 <HAL_UART_MspInit+0x144>)
 80068ec:	2200      	movs	r2, #0
 80068ee:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80068f0:	4b27      	ldr	r3, [pc, #156]	; (8006990 <HAL_UART_MspInit+0x144>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80068f6:	4b26      	ldr	r3, [pc, #152]	; (8006990 <HAL_UART_MspInit+0x144>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80068fc:	4b24      	ldr	r3, [pc, #144]	; (8006990 <HAL_UART_MspInit+0x144>)
 80068fe:	2200      	movs	r2, #0
 8006900:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006902:	4823      	ldr	r0, [pc, #140]	; (8006990 <HAL_UART_MspInit+0x144>)
 8006904:	f000 fa04 	bl	8006d10 <HAL_DMA_Init>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d001      	beq.n	8006912 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800690e:	f7fd fa11 	bl	8003d34 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a1e      	ldr	r2, [pc, #120]	; (8006990 <HAL_UART_MspInit+0x144>)
 8006916:	635a      	str	r2, [r3, #52]	; 0x34
 8006918:	4a1d      	ldr	r2, [pc, #116]	; (8006990 <HAL_UART_MspInit+0x144>)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800691e:	4b1e      	ldr	r3, [pc, #120]	; (8006998 <HAL_UART_MspInit+0x14c>)
 8006920:	4a1e      	ldr	r2, [pc, #120]	; (800699c <HAL_UART_MspInit+0x150>)
 8006922:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006924:	4b1c      	ldr	r3, [pc, #112]	; (8006998 <HAL_UART_MspInit+0x14c>)
 8006926:	2210      	movs	r2, #16
 8006928:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800692a:	4b1b      	ldr	r3, [pc, #108]	; (8006998 <HAL_UART_MspInit+0x14c>)
 800692c:	2200      	movs	r2, #0
 800692e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006930:	4b19      	ldr	r3, [pc, #100]	; (8006998 <HAL_UART_MspInit+0x14c>)
 8006932:	2280      	movs	r2, #128	; 0x80
 8006934:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006936:	4b18      	ldr	r3, [pc, #96]	; (8006998 <HAL_UART_MspInit+0x14c>)
 8006938:	2200      	movs	r2, #0
 800693a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800693c:	4b16      	ldr	r3, [pc, #88]	; (8006998 <HAL_UART_MspInit+0x14c>)
 800693e:	2200      	movs	r2, #0
 8006940:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006942:	4b15      	ldr	r3, [pc, #84]	; (8006998 <HAL_UART_MspInit+0x14c>)
 8006944:	2200      	movs	r2, #0
 8006946:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006948:	4b13      	ldr	r3, [pc, #76]	; (8006998 <HAL_UART_MspInit+0x14c>)
 800694a:	2200      	movs	r2, #0
 800694c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800694e:	4812      	ldr	r0, [pc, #72]	; (8006998 <HAL_UART_MspInit+0x14c>)
 8006950:	f000 f9de 	bl	8006d10 <HAL_DMA_Init>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800695a:	f7fd f9eb 	bl	8003d34 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a0d      	ldr	r2, [pc, #52]	; (8006998 <HAL_UART_MspInit+0x14c>)
 8006962:	631a      	str	r2, [r3, #48]	; 0x30
 8006964:	4a0c      	ldr	r2, [pc, #48]	; (8006998 <HAL_UART_MspInit+0x14c>)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800696a:	2200      	movs	r2, #0
 800696c:	2105      	movs	r1, #5
 800696e:	2025      	movs	r0, #37	; 0x25
 8006970:	f000 f997 	bl	8006ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006974:	2025      	movs	r0, #37	; 0x25
 8006976:	f000 f9b0 	bl	8006cda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800697a:	bf00      	nop
 800697c:	3720      	adds	r7, #32
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	40013800 	.word	0x40013800
 8006988:	40021000 	.word	0x40021000
 800698c:	40010800 	.word	0x40010800
 8006990:	20003578 	.word	0x20003578
 8006994:	40020058 	.word	0x40020058
 8006998:	20003534 	.word	0x20003534
 800699c:	40020044 	.word	0x40020044

080069a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80069a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80069a2:	e003      	b.n	80069ac <LoopCopyDataInit>

080069a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80069a4:	4b0b      	ldr	r3, [pc, #44]	; (80069d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80069a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80069a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80069aa:	3104      	adds	r1, #4

080069ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80069ac:	480a      	ldr	r0, [pc, #40]	; (80069d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80069ae:	4b0b      	ldr	r3, [pc, #44]	; (80069dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80069b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80069b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80069b4:	d3f6      	bcc.n	80069a4 <CopyDataInit>
  ldr r2, =_sbss
 80069b6:	4a0a      	ldr	r2, [pc, #40]	; (80069e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80069b8:	e002      	b.n	80069c0 <LoopFillZerobss>

080069ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80069ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80069bc:	f842 3b04 	str.w	r3, [r2], #4

080069c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80069c0:	4b08      	ldr	r3, [pc, #32]	; (80069e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80069c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80069c4:	d3f9      	bcc.n	80069ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80069c6:	f7ff fee3 	bl	8006790 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80069ca:	f004 f989 	bl	800ace0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80069ce:	f7fd f95d 	bl	8003c8c <main>
  bx lr
 80069d2:	4770      	bx	lr
  ldr r3, =_sidata
 80069d4:	0800e788 	.word	0x0800e788
  ldr r0, =_sdata
 80069d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80069dc:	200000b8 	.word	0x200000b8
  ldr r2, =_sbss
 80069e0:	200000b8 	.word	0x200000b8
  ldr r3, = _ebss
 80069e4:	20003600 	.word	0x20003600

080069e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80069e8:	e7fe      	b.n	80069e8 <ADC1_2_IRQHandler>
	...

080069ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80069f0:	4b08      	ldr	r3, [pc, #32]	; (8006a14 <HAL_Init+0x28>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a07      	ldr	r2, [pc, #28]	; (8006a14 <HAL_Init+0x28>)
 80069f6:	f043 0310 	orr.w	r3, r3, #16
 80069fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80069fc:	2003      	movs	r0, #3
 80069fe:	f000 f945 	bl	8006c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006a02:	200f      	movs	r0, #15
 8006a04:	f000 f808 	bl	8006a18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006a08:	f7ff fe2a 	bl	8006660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006a0c:	2300      	movs	r3, #0
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	40022000 	.word	0x40022000

08006a18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006a20:	4b12      	ldr	r3, [pc, #72]	; (8006a6c <HAL_InitTick+0x54>)
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	4b12      	ldr	r3, [pc, #72]	; (8006a70 <HAL_InitTick+0x58>)
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	4619      	mov	r1, r3
 8006a2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006a2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 f95d 	bl	8006cf6 <HAL_SYSTICK_Config>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d001      	beq.n	8006a46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	e00e      	b.n	8006a64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2b0f      	cmp	r3, #15
 8006a4a:	d80a      	bhi.n	8006a62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	6879      	ldr	r1, [r7, #4]
 8006a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a54:	f000 f925 	bl	8006ca2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006a58:	4a06      	ldr	r2, [pc, #24]	; (8006a74 <HAL_InitTick+0x5c>)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	e000      	b.n	8006a64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006a62:	2301      	movs	r3, #1
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3708      	adds	r7, #8
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	20000040 	.word	0x20000040
 8006a70:	20000048 	.word	0x20000048
 8006a74:	20000044 	.word	0x20000044

08006a78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006a7c:	4b05      	ldr	r3, [pc, #20]	; (8006a94 <HAL_IncTick+0x1c>)
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	461a      	mov	r2, r3
 8006a82:	4b05      	ldr	r3, [pc, #20]	; (8006a98 <HAL_IncTick+0x20>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4413      	add	r3, r2
 8006a88:	4a03      	ldr	r2, [pc, #12]	; (8006a98 <HAL_IncTick+0x20>)
 8006a8a:	6013      	str	r3, [r2, #0]
}
 8006a8c:	bf00      	nop
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bc80      	pop	{r7}
 8006a92:	4770      	bx	lr
 8006a94:	20000048 	.word	0x20000048
 8006a98:	200035fc 	.word	0x200035fc

08006a9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	af00      	add	r7, sp, #0
  return uwTick;
 8006aa0:	4b02      	ldr	r3, [pc, #8]	; (8006aac <HAL_GetTick+0x10>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bc80      	pop	{r7}
 8006aaa:	4770      	bx	lr
 8006aac:	200035fc 	.word	0x200035fc

08006ab0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006ab8:	f7ff fff0 	bl	8006a9c <HAL_GetTick>
 8006abc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ac8:	d005      	beq.n	8006ad6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006aca:	4b09      	ldr	r3, [pc, #36]	; (8006af0 <HAL_Delay+0x40>)
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	461a      	mov	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006ad6:	bf00      	nop
 8006ad8:	f7ff ffe0 	bl	8006a9c <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d8f7      	bhi.n	8006ad8 <HAL_Delay+0x28>
  {
  }
}
 8006ae8:	bf00      	nop
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	20000048 	.word	0x20000048

08006af4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f003 0307 	and.w	r3, r3, #7
 8006b02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b04:	4b0c      	ldr	r3, [pc, #48]	; (8006b38 <__NVIC_SetPriorityGrouping+0x44>)
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006b10:	4013      	ands	r3, r2
 8006b12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006b1c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006b20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006b26:	4a04      	ldr	r2, [pc, #16]	; (8006b38 <__NVIC_SetPriorityGrouping+0x44>)
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	60d3      	str	r3, [r2, #12]
}
 8006b2c:	bf00      	nop
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bc80      	pop	{r7}
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	e000ed00 	.word	0xe000ed00

08006b3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006b40:	4b04      	ldr	r3, [pc, #16]	; (8006b54 <__NVIC_GetPriorityGrouping+0x18>)
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	0a1b      	lsrs	r3, r3, #8
 8006b46:	f003 0307 	and.w	r3, r3, #7
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bc80      	pop	{r7}
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	e000ed00 	.word	0xe000ed00

08006b58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	4603      	mov	r3, r0
 8006b60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	db0b      	blt.n	8006b82 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b6a:	79fb      	ldrb	r3, [r7, #7]
 8006b6c:	f003 021f 	and.w	r2, r3, #31
 8006b70:	4906      	ldr	r1, [pc, #24]	; (8006b8c <__NVIC_EnableIRQ+0x34>)
 8006b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b76:	095b      	lsrs	r3, r3, #5
 8006b78:	2001      	movs	r0, #1
 8006b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8006b7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006b82:	bf00      	nop
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bc80      	pop	{r7}
 8006b8a:	4770      	bx	lr
 8006b8c:	e000e100 	.word	0xe000e100

08006b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	4603      	mov	r3, r0
 8006b98:	6039      	str	r1, [r7, #0]
 8006b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	db0a      	blt.n	8006bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	b2da      	uxtb	r2, r3
 8006ba8:	490c      	ldr	r1, [pc, #48]	; (8006bdc <__NVIC_SetPriority+0x4c>)
 8006baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bae:	0112      	lsls	r2, r2, #4
 8006bb0:	b2d2      	uxtb	r2, r2
 8006bb2:	440b      	add	r3, r1
 8006bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006bb8:	e00a      	b.n	8006bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	b2da      	uxtb	r2, r3
 8006bbe:	4908      	ldr	r1, [pc, #32]	; (8006be0 <__NVIC_SetPriority+0x50>)
 8006bc0:	79fb      	ldrb	r3, [r7, #7]
 8006bc2:	f003 030f 	and.w	r3, r3, #15
 8006bc6:	3b04      	subs	r3, #4
 8006bc8:	0112      	lsls	r2, r2, #4
 8006bca:	b2d2      	uxtb	r2, r2
 8006bcc:	440b      	add	r3, r1
 8006bce:	761a      	strb	r2, [r3, #24]
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bc80      	pop	{r7}
 8006bd8:	4770      	bx	lr
 8006bda:	bf00      	nop
 8006bdc:	e000e100 	.word	0xe000e100
 8006be0:	e000ed00 	.word	0xe000ed00

08006be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b089      	sub	sp, #36	; 0x24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f003 0307 	and.w	r3, r3, #7
 8006bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	f1c3 0307 	rsb	r3, r3, #7
 8006bfe:	2b04      	cmp	r3, #4
 8006c00:	bf28      	it	cs
 8006c02:	2304      	movcs	r3, #4
 8006c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	3304      	adds	r3, #4
 8006c0a:	2b06      	cmp	r3, #6
 8006c0c:	d902      	bls.n	8006c14 <NVIC_EncodePriority+0x30>
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	3b03      	subs	r3, #3
 8006c12:	e000      	b.n	8006c16 <NVIC_EncodePriority+0x32>
 8006c14:	2300      	movs	r3, #0
 8006c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c22:	43da      	mvns	r2, r3
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	401a      	ands	r2, r3
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006c2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	fa01 f303 	lsl.w	r3, r1, r3
 8006c36:	43d9      	mvns	r1, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c3c:	4313      	orrs	r3, r2
         );
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3724      	adds	r7, #36	; 0x24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bc80      	pop	{r7}
 8006c46:	4770      	bx	lr

08006c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	3b01      	subs	r3, #1
 8006c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c58:	d301      	bcc.n	8006c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e00f      	b.n	8006c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c5e:	4a0a      	ldr	r2, [pc, #40]	; (8006c88 <SysTick_Config+0x40>)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	3b01      	subs	r3, #1
 8006c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006c66:	210f      	movs	r1, #15
 8006c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c6c:	f7ff ff90 	bl	8006b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c70:	4b05      	ldr	r3, [pc, #20]	; (8006c88 <SysTick_Config+0x40>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c76:	4b04      	ldr	r3, [pc, #16]	; (8006c88 <SysTick_Config+0x40>)
 8006c78:	2207      	movs	r2, #7
 8006c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3708      	adds	r7, #8
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	e000e010 	.word	0xe000e010

08006c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b082      	sub	sp, #8
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f7ff ff2d 	bl	8006af4 <__NVIC_SetPriorityGrouping>
}
 8006c9a:	bf00      	nop
 8006c9c:	3708      	adds	r7, #8
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006ca2:	b580      	push	{r7, lr}
 8006ca4:	b086      	sub	sp, #24
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	4603      	mov	r3, r0
 8006caa:	60b9      	str	r1, [r7, #8]
 8006cac:	607a      	str	r2, [r7, #4]
 8006cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006cb4:	f7ff ff42 	bl	8006b3c <__NVIC_GetPriorityGrouping>
 8006cb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006cba:	687a      	ldr	r2, [r7, #4]
 8006cbc:	68b9      	ldr	r1, [r7, #8]
 8006cbe:	6978      	ldr	r0, [r7, #20]
 8006cc0:	f7ff ff90 	bl	8006be4 <NVIC_EncodePriority>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cca:	4611      	mov	r1, r2
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7ff ff5f 	bl	8006b90 <__NVIC_SetPriority>
}
 8006cd2:	bf00      	nop
 8006cd4:	3718      	adds	r7, #24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b082      	sub	sp, #8
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7ff ff35 	bl	8006b58 <__NVIC_EnableIRQ>
}
 8006cee:	bf00      	nop
 8006cf0:	3708      	adds	r7, #8
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b082      	sub	sp, #8
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7ff ffa2 	bl	8006c48 <SysTick_Config>
 8006d04:	4603      	mov	r3, r0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3708      	adds	r7, #8
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
	...

08006d10 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d101      	bne.n	8006d26 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006d22:	2301      	movs	r3, #1
 8006d24:	e043      	b.n	8006dae <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	4b22      	ldr	r3, [pc, #136]	; (8006db8 <HAL_DMA_Init+0xa8>)
 8006d2e:	4413      	add	r3, r2
 8006d30:	4a22      	ldr	r2, [pc, #136]	; (8006dbc <HAL_DMA_Init+0xac>)
 8006d32:	fba2 2303 	umull	r2, r3, r2, r3
 8006d36:	091b      	lsrs	r3, r3, #4
 8006d38:	009a      	lsls	r2, r3, #2
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4a1f      	ldr	r2, [pc, #124]	; (8006dc0 <HAL_DMA_Init+0xb0>)
 8006d42:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2202      	movs	r2, #2
 8006d48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006d5a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006d5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	695b      	ldr	r3, [r3, #20]
 8006d7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006d80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	69db      	ldr	r3, [r3, #28]
 8006d86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3714      	adds	r7, #20
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bc80      	pop	{r7}
 8006db6:	4770      	bx	lr
 8006db8:	bffdfff8 	.word	0xbffdfff8
 8006dbc:	cccccccd 	.word	0xcccccccd
 8006dc0:	40020000 	.word	0x40020000

08006dc4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	607a      	str	r2, [r7, #4]
 8006dd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d101      	bne.n	8006de4 <HAL_DMA_Start_IT+0x20>
 8006de0:	2302      	movs	r3, #2
 8006de2:	e04a      	b.n	8006e7a <HAL_DMA_Start_IT+0xb6>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2201      	movs	r2, #1
 8006de8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d13a      	bne.n	8006e6c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2202      	movs	r2, #2
 8006dfa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 0201 	bic.w	r2, r2, #1
 8006e12:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	68b9      	ldr	r1, [r7, #8]
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f000 f9ae 	bl	800717c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d008      	beq.n	8006e3a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f042 020e 	orr.w	r2, r2, #14
 8006e36:	601a      	str	r2, [r3, #0]
 8006e38:	e00f      	b.n	8006e5a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f022 0204 	bic.w	r2, r2, #4
 8006e48:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f042 020a 	orr.w	r2, r2, #10
 8006e58:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f042 0201 	orr.w	r2, r2, #1
 8006e68:	601a      	str	r2, [r3, #0]
 8006e6a:	e005      	b.n	8006e78 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006e74:	2302      	movs	r3, #2
 8006e76:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8006e78:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3718      	adds	r7, #24
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
	...

08006e84 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d005      	beq.n	8006ea6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2204      	movs	r2, #4
 8006e9e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8006ea0:	2301      	movs	r3, #1
 8006ea2:	73fb      	strb	r3, [r7, #15]
 8006ea4:	e051      	b.n	8006f4a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 020e 	bic.w	r2, r2, #14
 8006eb4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 0201 	bic.w	r2, r2, #1
 8006ec4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a22      	ldr	r2, [pc, #136]	; (8006f54 <HAL_DMA_Abort_IT+0xd0>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d029      	beq.n	8006f24 <HAL_DMA_Abort_IT+0xa0>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a20      	ldr	r2, [pc, #128]	; (8006f58 <HAL_DMA_Abort_IT+0xd4>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d022      	beq.n	8006f20 <HAL_DMA_Abort_IT+0x9c>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a1f      	ldr	r2, [pc, #124]	; (8006f5c <HAL_DMA_Abort_IT+0xd8>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d01a      	beq.n	8006f1a <HAL_DMA_Abort_IT+0x96>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a1d      	ldr	r2, [pc, #116]	; (8006f60 <HAL_DMA_Abort_IT+0xdc>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d012      	beq.n	8006f14 <HAL_DMA_Abort_IT+0x90>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a1c      	ldr	r2, [pc, #112]	; (8006f64 <HAL_DMA_Abort_IT+0xe0>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d00a      	beq.n	8006f0e <HAL_DMA_Abort_IT+0x8a>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a1a      	ldr	r2, [pc, #104]	; (8006f68 <HAL_DMA_Abort_IT+0xe4>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d102      	bne.n	8006f08 <HAL_DMA_Abort_IT+0x84>
 8006f02:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006f06:	e00e      	b.n	8006f26 <HAL_DMA_Abort_IT+0xa2>
 8006f08:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006f0c:	e00b      	b.n	8006f26 <HAL_DMA_Abort_IT+0xa2>
 8006f0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006f12:	e008      	b.n	8006f26 <HAL_DMA_Abort_IT+0xa2>
 8006f14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f18:	e005      	b.n	8006f26 <HAL_DMA_Abort_IT+0xa2>
 8006f1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f1e:	e002      	b.n	8006f26 <HAL_DMA_Abort_IT+0xa2>
 8006f20:	2310      	movs	r3, #16
 8006f22:	e000      	b.n	8006f26 <HAL_DMA_Abort_IT+0xa2>
 8006f24:	2301      	movs	r3, #1
 8006f26:	4a11      	ldr	r2, [pc, #68]	; (8006f6c <HAL_DMA_Abort_IT+0xe8>)
 8006f28:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d003      	beq.n	8006f4a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	4798      	blx	r3
    } 
  }
  return status;
 8006f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3710      	adds	r7, #16
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	40020008 	.word	0x40020008
 8006f58:	4002001c 	.word	0x4002001c
 8006f5c:	40020030 	.word	0x40020030
 8006f60:	40020044 	.word	0x40020044
 8006f64:	40020058 	.word	0x40020058
 8006f68:	4002006c 	.word	0x4002006c
 8006f6c:	40020000 	.word	0x40020000

08006f70 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f8c:	2204      	movs	r2, #4
 8006f8e:	409a      	lsls	r2, r3
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4013      	ands	r3, r2
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d04f      	beq.n	8007038 <HAL_DMA_IRQHandler+0xc8>
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	f003 0304 	and.w	r3, r3, #4
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d04a      	beq.n	8007038 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	f003 0320 	and.w	r3, r3, #32
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d107      	bne.n	8006fc0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f022 0204 	bic.w	r2, r2, #4
 8006fbe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a66      	ldr	r2, [pc, #408]	; (8007160 <HAL_DMA_IRQHandler+0x1f0>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d029      	beq.n	800701e <HAL_DMA_IRQHandler+0xae>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a65      	ldr	r2, [pc, #404]	; (8007164 <HAL_DMA_IRQHandler+0x1f4>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d022      	beq.n	800701a <HAL_DMA_IRQHandler+0xaa>
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a63      	ldr	r2, [pc, #396]	; (8007168 <HAL_DMA_IRQHandler+0x1f8>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d01a      	beq.n	8007014 <HAL_DMA_IRQHandler+0xa4>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a62      	ldr	r2, [pc, #392]	; (800716c <HAL_DMA_IRQHandler+0x1fc>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d012      	beq.n	800700e <HAL_DMA_IRQHandler+0x9e>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	4a60      	ldr	r2, [pc, #384]	; (8007170 <HAL_DMA_IRQHandler+0x200>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d00a      	beq.n	8007008 <HAL_DMA_IRQHandler+0x98>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a5f      	ldr	r2, [pc, #380]	; (8007174 <HAL_DMA_IRQHandler+0x204>)
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d102      	bne.n	8007002 <HAL_DMA_IRQHandler+0x92>
 8006ffc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007000:	e00e      	b.n	8007020 <HAL_DMA_IRQHandler+0xb0>
 8007002:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007006:	e00b      	b.n	8007020 <HAL_DMA_IRQHandler+0xb0>
 8007008:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800700c:	e008      	b.n	8007020 <HAL_DMA_IRQHandler+0xb0>
 800700e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007012:	e005      	b.n	8007020 <HAL_DMA_IRQHandler+0xb0>
 8007014:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007018:	e002      	b.n	8007020 <HAL_DMA_IRQHandler+0xb0>
 800701a:	2340      	movs	r3, #64	; 0x40
 800701c:	e000      	b.n	8007020 <HAL_DMA_IRQHandler+0xb0>
 800701e:	2304      	movs	r3, #4
 8007020:	4a55      	ldr	r2, [pc, #340]	; (8007178 <HAL_DMA_IRQHandler+0x208>)
 8007022:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007028:	2b00      	cmp	r3, #0
 800702a:	f000 8094 	beq.w	8007156 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8007036:	e08e      	b.n	8007156 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703c:	2202      	movs	r2, #2
 800703e:	409a      	lsls	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	4013      	ands	r3, r2
 8007044:	2b00      	cmp	r3, #0
 8007046:	d056      	beq.n	80070f6 <HAL_DMA_IRQHandler+0x186>
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	f003 0302 	and.w	r3, r3, #2
 800704e:	2b00      	cmp	r3, #0
 8007050:	d051      	beq.n	80070f6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0320 	and.w	r3, r3, #32
 800705c:	2b00      	cmp	r3, #0
 800705e:	d10b      	bne.n	8007078 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681a      	ldr	r2, [r3, #0]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f022 020a 	bic.w	r2, r2, #10
 800706e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a38      	ldr	r2, [pc, #224]	; (8007160 <HAL_DMA_IRQHandler+0x1f0>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d029      	beq.n	80070d6 <HAL_DMA_IRQHandler+0x166>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a37      	ldr	r2, [pc, #220]	; (8007164 <HAL_DMA_IRQHandler+0x1f4>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d022      	beq.n	80070d2 <HAL_DMA_IRQHandler+0x162>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a35      	ldr	r2, [pc, #212]	; (8007168 <HAL_DMA_IRQHandler+0x1f8>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d01a      	beq.n	80070cc <HAL_DMA_IRQHandler+0x15c>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a34      	ldr	r2, [pc, #208]	; (800716c <HAL_DMA_IRQHandler+0x1fc>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d012      	beq.n	80070c6 <HAL_DMA_IRQHandler+0x156>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a32      	ldr	r2, [pc, #200]	; (8007170 <HAL_DMA_IRQHandler+0x200>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d00a      	beq.n	80070c0 <HAL_DMA_IRQHandler+0x150>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a31      	ldr	r2, [pc, #196]	; (8007174 <HAL_DMA_IRQHandler+0x204>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d102      	bne.n	80070ba <HAL_DMA_IRQHandler+0x14a>
 80070b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80070b8:	e00e      	b.n	80070d8 <HAL_DMA_IRQHandler+0x168>
 80070ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070be:	e00b      	b.n	80070d8 <HAL_DMA_IRQHandler+0x168>
 80070c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80070c4:	e008      	b.n	80070d8 <HAL_DMA_IRQHandler+0x168>
 80070c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80070ca:	e005      	b.n	80070d8 <HAL_DMA_IRQHandler+0x168>
 80070cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070d0:	e002      	b.n	80070d8 <HAL_DMA_IRQHandler+0x168>
 80070d2:	2320      	movs	r3, #32
 80070d4:	e000      	b.n	80070d8 <HAL_DMA_IRQHandler+0x168>
 80070d6:	2302      	movs	r3, #2
 80070d8:	4a27      	ldr	r2, [pc, #156]	; (8007178 <HAL_DMA_IRQHandler+0x208>)
 80070da:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d034      	beq.n	8007156 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80070f4:	e02f      	b.n	8007156 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070fa:	2208      	movs	r2, #8
 80070fc:	409a      	lsls	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	4013      	ands	r3, r2
 8007102:	2b00      	cmp	r3, #0
 8007104:	d028      	beq.n	8007158 <HAL_DMA_IRQHandler+0x1e8>
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	f003 0308 	and.w	r3, r3, #8
 800710c:	2b00      	cmp	r3, #0
 800710e:	d023      	beq.n	8007158 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f022 020e 	bic.w	r2, r2, #14
 800711e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007128:	2101      	movs	r1, #1
 800712a:	fa01 f202 	lsl.w	r2, r1, r2
 800712e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2201      	movs	r2, #1
 800713a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714a:	2b00      	cmp	r3, #0
 800714c:	d004      	beq.n	8007158 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	4798      	blx	r3
    }
  }
  return;
 8007156:	bf00      	nop
 8007158:	bf00      	nop
}
 800715a:	3710      	adds	r7, #16
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	40020008 	.word	0x40020008
 8007164:	4002001c 	.word	0x4002001c
 8007168:	40020030 	.word	0x40020030
 800716c:	40020044 	.word	0x40020044
 8007170:	40020058 	.word	0x40020058
 8007174:	4002006c 	.word	0x4002006c
 8007178:	40020000 	.word	0x40020000

0800717c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
 8007188:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007192:	2101      	movs	r1, #1
 8007194:	fa01 f202 	lsl.w	r2, r1, r2
 8007198:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	2b10      	cmp	r3, #16
 80071a8:	d108      	bne.n	80071bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	68ba      	ldr	r2, [r7, #8]
 80071b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80071ba:	e007      	b.n	80071cc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	60da      	str	r2, [r3, #12]
}
 80071cc:	bf00      	nop
 80071ce:	3714      	adds	r7, #20
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bc80      	pop	{r7}
 80071d4:	4770      	bx	lr
	...

080071d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80071d8:	b480      	push	{r7}
 80071da:	b08b      	sub	sp, #44	; 0x2c
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80071e2:	2300      	movs	r3, #0
 80071e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80071e6:	2300      	movs	r3, #0
 80071e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80071ea:	e127      	b.n	800743c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80071ec:	2201      	movs	r2, #1
 80071ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f0:	fa02 f303 	lsl.w	r3, r2, r3
 80071f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	69fa      	ldr	r2, [r7, #28]
 80071fc:	4013      	ands	r3, r2
 80071fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007200:	69ba      	ldr	r2, [r7, #24]
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	429a      	cmp	r2, r3
 8007206:	f040 8116 	bne.w	8007436 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	2b12      	cmp	r3, #18
 8007210:	d034      	beq.n	800727c <HAL_GPIO_Init+0xa4>
 8007212:	2b12      	cmp	r3, #18
 8007214:	d80d      	bhi.n	8007232 <HAL_GPIO_Init+0x5a>
 8007216:	2b02      	cmp	r3, #2
 8007218:	d02b      	beq.n	8007272 <HAL_GPIO_Init+0x9a>
 800721a:	2b02      	cmp	r3, #2
 800721c:	d804      	bhi.n	8007228 <HAL_GPIO_Init+0x50>
 800721e:	2b00      	cmp	r3, #0
 8007220:	d031      	beq.n	8007286 <HAL_GPIO_Init+0xae>
 8007222:	2b01      	cmp	r3, #1
 8007224:	d01c      	beq.n	8007260 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007226:	e048      	b.n	80072ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8007228:	2b03      	cmp	r3, #3
 800722a:	d043      	beq.n	80072b4 <HAL_GPIO_Init+0xdc>
 800722c:	2b11      	cmp	r3, #17
 800722e:	d01b      	beq.n	8007268 <HAL_GPIO_Init+0x90>
          break;
 8007230:	e043      	b.n	80072ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8007232:	4a89      	ldr	r2, [pc, #548]	; (8007458 <HAL_GPIO_Init+0x280>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d026      	beq.n	8007286 <HAL_GPIO_Init+0xae>
 8007238:	4a87      	ldr	r2, [pc, #540]	; (8007458 <HAL_GPIO_Init+0x280>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d806      	bhi.n	800724c <HAL_GPIO_Init+0x74>
 800723e:	4a87      	ldr	r2, [pc, #540]	; (800745c <HAL_GPIO_Init+0x284>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d020      	beq.n	8007286 <HAL_GPIO_Init+0xae>
 8007244:	4a86      	ldr	r2, [pc, #536]	; (8007460 <HAL_GPIO_Init+0x288>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d01d      	beq.n	8007286 <HAL_GPIO_Init+0xae>
          break;
 800724a:	e036      	b.n	80072ba <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800724c:	4a85      	ldr	r2, [pc, #532]	; (8007464 <HAL_GPIO_Init+0x28c>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d019      	beq.n	8007286 <HAL_GPIO_Init+0xae>
 8007252:	4a85      	ldr	r2, [pc, #532]	; (8007468 <HAL_GPIO_Init+0x290>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d016      	beq.n	8007286 <HAL_GPIO_Init+0xae>
 8007258:	4a84      	ldr	r2, [pc, #528]	; (800746c <HAL_GPIO_Init+0x294>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d013      	beq.n	8007286 <HAL_GPIO_Init+0xae>
          break;
 800725e:	e02c      	b.n	80072ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	623b      	str	r3, [r7, #32]
          break;
 8007266:	e028      	b.n	80072ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	3304      	adds	r3, #4
 800726e:	623b      	str	r3, [r7, #32]
          break;
 8007270:	e023      	b.n	80072ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	68db      	ldr	r3, [r3, #12]
 8007276:	3308      	adds	r3, #8
 8007278:	623b      	str	r3, [r7, #32]
          break;
 800727a:	e01e      	b.n	80072ba <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	330c      	adds	r3, #12
 8007282:	623b      	str	r3, [r7, #32]
          break;
 8007284:	e019      	b.n	80072ba <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d102      	bne.n	8007294 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800728e:	2304      	movs	r3, #4
 8007290:	623b      	str	r3, [r7, #32]
          break;
 8007292:	e012      	b.n	80072ba <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	2b01      	cmp	r3, #1
 800729a:	d105      	bne.n	80072a8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800729c:	2308      	movs	r3, #8
 800729e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	69fa      	ldr	r2, [r7, #28]
 80072a4:	611a      	str	r2, [r3, #16]
          break;
 80072a6:	e008      	b.n	80072ba <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80072a8:	2308      	movs	r3, #8
 80072aa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	69fa      	ldr	r2, [r7, #28]
 80072b0:	615a      	str	r2, [r3, #20]
          break;
 80072b2:	e002      	b.n	80072ba <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80072b4:	2300      	movs	r3, #0
 80072b6:	623b      	str	r3, [r7, #32]
          break;
 80072b8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	2bff      	cmp	r3, #255	; 0xff
 80072be:	d801      	bhi.n	80072c4 <HAL_GPIO_Init+0xec>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	e001      	b.n	80072c8 <HAL_GPIO_Init+0xf0>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	3304      	adds	r3, #4
 80072c8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	2bff      	cmp	r3, #255	; 0xff
 80072ce:	d802      	bhi.n	80072d6 <HAL_GPIO_Init+0xfe>
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	e002      	b.n	80072dc <HAL_GPIO_Init+0x104>
 80072d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d8:	3b08      	subs	r3, #8
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	210f      	movs	r1, #15
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	fa01 f303 	lsl.w	r3, r1, r3
 80072ea:	43db      	mvns	r3, r3
 80072ec:	401a      	ands	r2, r3
 80072ee:	6a39      	ldr	r1, [r7, #32]
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	fa01 f303 	lsl.w	r3, r1, r3
 80072f6:	431a      	orrs	r2, r3
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 8096 	beq.w	8007436 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800730a:	4b59      	ldr	r3, [pc, #356]	; (8007470 <HAL_GPIO_Init+0x298>)
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	4a58      	ldr	r2, [pc, #352]	; (8007470 <HAL_GPIO_Init+0x298>)
 8007310:	f043 0301 	orr.w	r3, r3, #1
 8007314:	6193      	str	r3, [r2, #24]
 8007316:	4b56      	ldr	r3, [pc, #344]	; (8007470 <HAL_GPIO_Init+0x298>)
 8007318:	699b      	ldr	r3, [r3, #24]
 800731a:	f003 0301 	and.w	r3, r3, #1
 800731e:	60bb      	str	r3, [r7, #8]
 8007320:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007322:	4a54      	ldr	r2, [pc, #336]	; (8007474 <HAL_GPIO_Init+0x29c>)
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	089b      	lsrs	r3, r3, #2
 8007328:	3302      	adds	r3, #2
 800732a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800732e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007332:	f003 0303 	and.w	r3, r3, #3
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	220f      	movs	r2, #15
 800733a:	fa02 f303 	lsl.w	r3, r2, r3
 800733e:	43db      	mvns	r3, r3
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	4013      	ands	r3, r2
 8007344:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	4a4b      	ldr	r2, [pc, #300]	; (8007478 <HAL_GPIO_Init+0x2a0>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d013      	beq.n	8007376 <HAL_GPIO_Init+0x19e>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a4a      	ldr	r2, [pc, #296]	; (800747c <HAL_GPIO_Init+0x2a4>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d00d      	beq.n	8007372 <HAL_GPIO_Init+0x19a>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a49      	ldr	r2, [pc, #292]	; (8007480 <HAL_GPIO_Init+0x2a8>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d007      	beq.n	800736e <HAL_GPIO_Init+0x196>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a48      	ldr	r2, [pc, #288]	; (8007484 <HAL_GPIO_Init+0x2ac>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d101      	bne.n	800736a <HAL_GPIO_Init+0x192>
 8007366:	2303      	movs	r3, #3
 8007368:	e006      	b.n	8007378 <HAL_GPIO_Init+0x1a0>
 800736a:	2304      	movs	r3, #4
 800736c:	e004      	b.n	8007378 <HAL_GPIO_Init+0x1a0>
 800736e:	2302      	movs	r3, #2
 8007370:	e002      	b.n	8007378 <HAL_GPIO_Init+0x1a0>
 8007372:	2301      	movs	r3, #1
 8007374:	e000      	b.n	8007378 <HAL_GPIO_Init+0x1a0>
 8007376:	2300      	movs	r3, #0
 8007378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800737a:	f002 0203 	and.w	r2, r2, #3
 800737e:	0092      	lsls	r2, r2, #2
 8007380:	4093      	lsls	r3, r2
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	4313      	orrs	r3, r2
 8007386:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8007388:	493a      	ldr	r1, [pc, #232]	; (8007474 <HAL_GPIO_Init+0x29c>)
 800738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738c:	089b      	lsrs	r3, r3, #2
 800738e:	3302      	adds	r3, #2
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d006      	beq.n	80073b0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80073a2:	4b39      	ldr	r3, [pc, #228]	; (8007488 <HAL_GPIO_Init+0x2b0>)
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	4938      	ldr	r1, [pc, #224]	; (8007488 <HAL_GPIO_Init+0x2b0>)
 80073a8:	69bb      	ldr	r3, [r7, #24]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	600b      	str	r3, [r1, #0]
 80073ae:	e006      	b.n	80073be <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80073b0:	4b35      	ldr	r3, [pc, #212]	; (8007488 <HAL_GPIO_Init+0x2b0>)
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	43db      	mvns	r3, r3
 80073b8:	4933      	ldr	r1, [pc, #204]	; (8007488 <HAL_GPIO_Init+0x2b0>)
 80073ba:	4013      	ands	r3, r2
 80073bc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d006      	beq.n	80073d8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80073ca:	4b2f      	ldr	r3, [pc, #188]	; (8007488 <HAL_GPIO_Init+0x2b0>)
 80073cc:	685a      	ldr	r2, [r3, #4]
 80073ce:	492e      	ldr	r1, [pc, #184]	; (8007488 <HAL_GPIO_Init+0x2b0>)
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	604b      	str	r3, [r1, #4]
 80073d6:	e006      	b.n	80073e6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80073d8:	4b2b      	ldr	r3, [pc, #172]	; (8007488 <HAL_GPIO_Init+0x2b0>)
 80073da:	685a      	ldr	r2, [r3, #4]
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	43db      	mvns	r3, r3
 80073e0:	4929      	ldr	r1, [pc, #164]	; (8007488 <HAL_GPIO_Init+0x2b0>)
 80073e2:	4013      	ands	r3, r2
 80073e4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d006      	beq.n	8007400 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80073f2:	4b25      	ldr	r3, [pc, #148]	; (8007488 <HAL_GPIO_Init+0x2b0>)
 80073f4:	689a      	ldr	r2, [r3, #8]
 80073f6:	4924      	ldr	r1, [pc, #144]	; (8007488 <HAL_GPIO_Init+0x2b0>)
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	608b      	str	r3, [r1, #8]
 80073fe:	e006      	b.n	800740e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007400:	4b21      	ldr	r3, [pc, #132]	; (8007488 <HAL_GPIO_Init+0x2b0>)
 8007402:	689a      	ldr	r2, [r3, #8]
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	43db      	mvns	r3, r3
 8007408:	491f      	ldr	r1, [pc, #124]	; (8007488 <HAL_GPIO_Init+0x2b0>)
 800740a:	4013      	ands	r3, r2
 800740c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d006      	beq.n	8007428 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800741a:	4b1b      	ldr	r3, [pc, #108]	; (8007488 <HAL_GPIO_Init+0x2b0>)
 800741c:	68da      	ldr	r2, [r3, #12]
 800741e:	491a      	ldr	r1, [pc, #104]	; (8007488 <HAL_GPIO_Init+0x2b0>)
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	4313      	orrs	r3, r2
 8007424:	60cb      	str	r3, [r1, #12]
 8007426:	e006      	b.n	8007436 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007428:	4b17      	ldr	r3, [pc, #92]	; (8007488 <HAL_GPIO_Init+0x2b0>)
 800742a:	68da      	ldr	r2, [r3, #12]
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	43db      	mvns	r3, r3
 8007430:	4915      	ldr	r1, [pc, #84]	; (8007488 <HAL_GPIO_Init+0x2b0>)
 8007432:	4013      	ands	r3, r2
 8007434:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	3301      	adds	r3, #1
 800743a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	fa22 f303 	lsr.w	r3, r2, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	f47f aed0 	bne.w	80071ec <HAL_GPIO_Init+0x14>
  }
}
 800744c:	bf00      	nop
 800744e:	372c      	adds	r7, #44	; 0x2c
 8007450:	46bd      	mov	sp, r7
 8007452:	bc80      	pop	{r7}
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	10210000 	.word	0x10210000
 800745c:	10110000 	.word	0x10110000
 8007460:	10120000 	.word	0x10120000
 8007464:	10310000 	.word	0x10310000
 8007468:	10320000 	.word	0x10320000
 800746c:	10220000 	.word	0x10220000
 8007470:	40021000 	.word	0x40021000
 8007474:	40010000 	.word	0x40010000
 8007478:	40010800 	.word	0x40010800
 800747c:	40010c00 	.word	0x40010c00
 8007480:	40011000 	.word	0x40011000
 8007484:	40011400 	.word	0x40011400
 8007488:	40010400 	.word	0x40010400

0800748c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	807b      	strh	r3, [r7, #2]
 8007498:	4613      	mov	r3, r2
 800749a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800749c:	787b      	ldrb	r3, [r7, #1]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d003      	beq.n	80074aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80074a2:	887a      	ldrh	r2, [r7, #2]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80074a8:	e003      	b.n	80074b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80074aa:	887b      	ldrh	r3, [r7, #2]
 80074ac:	041a      	lsls	r2, r3, #16
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	611a      	str	r2, [r3, #16]
}
 80074b2:	bf00      	nop
 80074b4:	370c      	adds	r7, #12
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bc80      	pop	{r7}
 80074ba:	4770      	bx	lr

080074bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	460b      	mov	r3, r1
 80074c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	68da      	ldr	r2, [r3, #12]
 80074cc:	887b      	ldrh	r3, [r7, #2]
 80074ce:	4013      	ands	r3, r2
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d003      	beq.n	80074dc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80074d4:	887a      	ldrh	r2, [r7, #2]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80074da:	e002      	b.n	80074e2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80074dc:	887a      	ldrh	r2, [r7, #2]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	611a      	str	r2, [r3, #16]
}
 80074e2:	bf00      	nop
 80074e4:	370c      	adds	r7, #12
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bc80      	pop	{r7}
 80074ea:	4770      	bx	lr

080074ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	4603      	mov	r3, r0
 80074f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80074f6:	4b08      	ldr	r3, [pc, #32]	; (8007518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80074f8:	695a      	ldr	r2, [r3, #20]
 80074fa:	88fb      	ldrh	r3, [r7, #6]
 80074fc:	4013      	ands	r3, r2
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d006      	beq.n	8007510 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007502:	4a05      	ldr	r2, [pc, #20]	; (8007518 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007504:	88fb      	ldrh	r3, [r7, #6]
 8007506:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007508:	88fb      	ldrh	r3, [r7, #6]
 800750a:	4618      	mov	r0, r3
 800750c:	f000 f806 	bl	800751c <HAL_GPIO_EXTI_Callback>
  }
}
 8007510:	bf00      	nop
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	40010400 	.word	0x40010400

0800751c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	4603      	mov	r3, r0
 8007524:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007526:	bf00      	nop
 8007528:	370c      	adds	r7, #12
 800752a:	46bd      	mov	sp, r7
 800752c:	bc80      	pop	{r7}
 800752e:	4770      	bx	lr

08007530 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d101      	bne.n	8007542 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e10f      	b.n	8007762 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b00      	cmp	r3, #0
 800754c:	d106      	bne.n	800755c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7fc fb06 	bl	8003b68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2224      	movs	r2, #36	; 0x24
 8007560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f022 0201 	bic.w	r2, r2, #1
 8007572:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007574:	f001 fc62 	bl	8008e3c <HAL_RCC_GetPCLK1Freq>
 8007578:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	4a7b      	ldr	r2, [pc, #492]	; (800776c <HAL_I2C_Init+0x23c>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d807      	bhi.n	8007594 <HAL_I2C_Init+0x64>
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	4a7a      	ldr	r2, [pc, #488]	; (8007770 <HAL_I2C_Init+0x240>)
 8007588:	4293      	cmp	r3, r2
 800758a:	bf94      	ite	ls
 800758c:	2301      	movls	r3, #1
 800758e:	2300      	movhi	r3, #0
 8007590:	b2db      	uxtb	r3, r3
 8007592:	e006      	b.n	80075a2 <HAL_I2C_Init+0x72>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	4a77      	ldr	r2, [pc, #476]	; (8007774 <HAL_I2C_Init+0x244>)
 8007598:	4293      	cmp	r3, r2
 800759a:	bf94      	ite	ls
 800759c:	2301      	movls	r3, #1
 800759e:	2300      	movhi	r3, #0
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d001      	beq.n	80075aa <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e0db      	b.n	8007762 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	4a72      	ldr	r2, [pc, #456]	; (8007778 <HAL_I2C_Init+0x248>)
 80075ae:	fba2 2303 	umull	r2, r3, r2, r3
 80075b2:	0c9b      	lsrs	r3, r3, #18
 80075b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	430a      	orrs	r2, r1
 80075c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	6a1b      	ldr	r3, [r3, #32]
 80075d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	4a64      	ldr	r2, [pc, #400]	; (800776c <HAL_I2C_Init+0x23c>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d802      	bhi.n	80075e4 <HAL_I2C_Init+0xb4>
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	3301      	adds	r3, #1
 80075e2:	e009      	b.n	80075f8 <HAL_I2C_Init+0xc8>
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80075ea:	fb02 f303 	mul.w	r3, r2, r3
 80075ee:	4a63      	ldr	r2, [pc, #396]	; (800777c <HAL_I2C_Init+0x24c>)
 80075f0:	fba2 2303 	umull	r2, r3, r2, r3
 80075f4:	099b      	lsrs	r3, r3, #6
 80075f6:	3301      	adds	r3, #1
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	6812      	ldr	r2, [r2, #0]
 80075fc:	430b      	orrs	r3, r1
 80075fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	69db      	ldr	r3, [r3, #28]
 8007606:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800760a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	4956      	ldr	r1, [pc, #344]	; (800776c <HAL_I2C_Init+0x23c>)
 8007614:	428b      	cmp	r3, r1
 8007616:	d80d      	bhi.n	8007634 <HAL_I2C_Init+0x104>
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	1e59      	subs	r1, r3, #1
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	005b      	lsls	r3, r3, #1
 8007622:	fbb1 f3f3 	udiv	r3, r1, r3
 8007626:	3301      	adds	r3, #1
 8007628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800762c:	2b04      	cmp	r3, #4
 800762e:	bf38      	it	cc
 8007630:	2304      	movcc	r3, #4
 8007632:	e04f      	b.n	80076d4 <HAL_I2C_Init+0x1a4>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d111      	bne.n	8007660 <HAL_I2C_Init+0x130>
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	1e58      	subs	r0, r3, #1
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6859      	ldr	r1, [r3, #4]
 8007644:	460b      	mov	r3, r1
 8007646:	005b      	lsls	r3, r3, #1
 8007648:	440b      	add	r3, r1
 800764a:	fbb0 f3f3 	udiv	r3, r0, r3
 800764e:	3301      	adds	r3, #1
 8007650:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007654:	2b00      	cmp	r3, #0
 8007656:	bf0c      	ite	eq
 8007658:	2301      	moveq	r3, #1
 800765a:	2300      	movne	r3, #0
 800765c:	b2db      	uxtb	r3, r3
 800765e:	e012      	b.n	8007686 <HAL_I2C_Init+0x156>
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	1e58      	subs	r0, r3, #1
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6859      	ldr	r1, [r3, #4]
 8007668:	460b      	mov	r3, r1
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	440b      	add	r3, r1
 800766e:	0099      	lsls	r1, r3, #2
 8007670:	440b      	add	r3, r1
 8007672:	fbb0 f3f3 	udiv	r3, r0, r3
 8007676:	3301      	adds	r3, #1
 8007678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800767c:	2b00      	cmp	r3, #0
 800767e:	bf0c      	ite	eq
 8007680:	2301      	moveq	r3, #1
 8007682:	2300      	movne	r3, #0
 8007684:	b2db      	uxtb	r3, r3
 8007686:	2b00      	cmp	r3, #0
 8007688:	d001      	beq.n	800768e <HAL_I2C_Init+0x15e>
 800768a:	2301      	movs	r3, #1
 800768c:	e022      	b.n	80076d4 <HAL_I2C_Init+0x1a4>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d10e      	bne.n	80076b4 <HAL_I2C_Init+0x184>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	1e58      	subs	r0, r3, #1
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6859      	ldr	r1, [r3, #4]
 800769e:	460b      	mov	r3, r1
 80076a0:	005b      	lsls	r3, r3, #1
 80076a2:	440b      	add	r3, r1
 80076a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80076a8:	3301      	adds	r3, #1
 80076aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076b2:	e00f      	b.n	80076d4 <HAL_I2C_Init+0x1a4>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	1e58      	subs	r0, r3, #1
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6859      	ldr	r1, [r3, #4]
 80076bc:	460b      	mov	r3, r1
 80076be:	009b      	lsls	r3, r3, #2
 80076c0:	440b      	add	r3, r1
 80076c2:	0099      	lsls	r1, r3, #2
 80076c4:	440b      	add	r3, r1
 80076c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80076ca:	3301      	adds	r3, #1
 80076cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80076d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076d4:	6879      	ldr	r1, [r7, #4]
 80076d6:	6809      	ldr	r1, [r1, #0]
 80076d8:	4313      	orrs	r3, r2
 80076da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	69da      	ldr	r2, [r3, #28]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	431a      	orrs	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	430a      	orrs	r2, r1
 80076f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007702:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	6911      	ldr	r1, [r2, #16]
 800770a:	687a      	ldr	r2, [r7, #4]
 800770c:	68d2      	ldr	r2, [r2, #12]
 800770e:	4311      	orrs	r1, r2
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	6812      	ldr	r2, [r2, #0]
 8007714:	430b      	orrs	r3, r1
 8007716:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	695a      	ldr	r2, [r3, #20]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	431a      	orrs	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	430a      	orrs	r2, r1
 8007732:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681a      	ldr	r2, [r3, #0]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f042 0201 	orr.w	r2, r2, #1
 8007742:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2200      	movs	r2, #0
 8007748:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2220      	movs	r2, #32
 800774e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	000186a0 	.word	0x000186a0
 8007770:	001e847f 	.word	0x001e847f
 8007774:	003d08ff 	.word	0x003d08ff
 8007778:	431bde83 	.word	0x431bde83
 800777c:	10624dd3 	.word	0x10624dd3

08007780 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b088      	sub	sp, #32
 8007784:	af02      	add	r7, sp, #8
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	4608      	mov	r0, r1
 800778a:	4611      	mov	r1, r2
 800778c:	461a      	mov	r2, r3
 800778e:	4603      	mov	r3, r0
 8007790:	817b      	strh	r3, [r7, #10]
 8007792:	460b      	mov	r3, r1
 8007794:	813b      	strh	r3, [r7, #8]
 8007796:	4613      	mov	r3, r2
 8007798:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800779a:	f7ff f97f 	bl	8006a9c <HAL_GetTick>
 800779e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b20      	cmp	r3, #32
 80077aa:	f040 80d9 	bne.w	8007960 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	2319      	movs	r3, #25
 80077b4:	2201      	movs	r2, #1
 80077b6:	496d      	ldr	r1, [pc, #436]	; (800796c <HAL_I2C_Mem_Write+0x1ec>)
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f000 fd8d 	bl	80082d8 <I2C_WaitOnFlagUntilTimeout>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d001      	beq.n	80077c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80077c4:	2302      	movs	r3, #2
 80077c6:	e0cc      	b.n	8007962 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077ce:	2b01      	cmp	r3, #1
 80077d0:	d101      	bne.n	80077d6 <HAL_I2C_Mem_Write+0x56>
 80077d2:	2302      	movs	r3, #2
 80077d4:	e0c5      	b.n	8007962 <HAL_I2C_Mem_Write+0x1e2>
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2201      	movs	r2, #1
 80077da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d007      	beq.n	80077fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f042 0201 	orr.w	r2, r2, #1
 80077fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681a      	ldr	r2, [r3, #0]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800780a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2221      	movs	r2, #33	; 0x21
 8007810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2240      	movs	r2, #64	; 0x40
 8007818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2200      	movs	r2, #0
 8007820:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	6a3a      	ldr	r2, [r7, #32]
 8007826:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800782c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007832:	b29a      	uxth	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	4a4d      	ldr	r2, [pc, #308]	; (8007970 <HAL_I2C_Mem_Write+0x1f0>)
 800783c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800783e:	88f8      	ldrh	r0, [r7, #6]
 8007840:	893a      	ldrh	r2, [r7, #8]
 8007842:	8979      	ldrh	r1, [r7, #10]
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	9301      	str	r3, [sp, #4]
 8007848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784a:	9300      	str	r3, [sp, #0]
 800784c:	4603      	mov	r3, r0
 800784e:	68f8      	ldr	r0, [r7, #12]
 8007850:	f000 fbe8 	bl	8008024 <I2C_RequestMemoryWrite>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d052      	beq.n	8007900 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800785a:	2301      	movs	r3, #1
 800785c:	e081      	b.n	8007962 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800785e:	697a      	ldr	r2, [r7, #20]
 8007860:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f000 fe0e 	bl	8008484 <I2C_WaitOnTXEFlagUntilTimeout>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00d      	beq.n	800788a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007872:	2b04      	cmp	r3, #4
 8007874:	d107      	bne.n	8007886 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007884:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e06b      	b.n	8007962 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788e:	781a      	ldrb	r2, [r3, #0]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789a:	1c5a      	adds	r2, r3, #1
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078a4:	3b01      	subs	r3, #1
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	3b01      	subs	r3, #1
 80078b4:	b29a      	uxth	r2, r3
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	695b      	ldr	r3, [r3, #20]
 80078c0:	f003 0304 	and.w	r3, r3, #4
 80078c4:	2b04      	cmp	r3, #4
 80078c6:	d11b      	bne.n	8007900 <HAL_I2C_Mem_Write+0x180>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d017      	beq.n	8007900 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d4:	781a      	ldrb	r2, [r3, #0]
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078e0:	1c5a      	adds	r2, r3, #1
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ea:	3b01      	subs	r3, #1
 80078ec:	b29a      	uxth	r2, r3
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	3b01      	subs	r3, #1
 80078fa:	b29a      	uxth	r2, r3
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1aa      	bne.n	800785e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 fdfa 	bl	8008506 <I2C_WaitOnBTFFlagUntilTimeout>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d00d      	beq.n	8007934 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791c:	2b04      	cmp	r3, #4
 800791e:	d107      	bne.n	8007930 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800792e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	e016      	b.n	8007962 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007942:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2220      	movs	r2, #32
 8007948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800795c:	2300      	movs	r3, #0
 800795e:	e000      	b.n	8007962 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007960:	2302      	movs	r3, #2
  }
}
 8007962:	4618      	mov	r0, r3
 8007964:	3718      	adds	r7, #24
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop
 800796c:	00100002 	.word	0x00100002
 8007970:	ffff0000 	.word	0xffff0000

08007974 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b08c      	sub	sp, #48	; 0x30
 8007978:	af02      	add	r7, sp, #8
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	4608      	mov	r0, r1
 800797e:	4611      	mov	r1, r2
 8007980:	461a      	mov	r2, r3
 8007982:	4603      	mov	r3, r0
 8007984:	817b      	strh	r3, [r7, #10]
 8007986:	460b      	mov	r3, r1
 8007988:	813b      	strh	r3, [r7, #8]
 800798a:	4613      	mov	r3, r2
 800798c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800798e:	f7ff f885 	bl	8006a9c <HAL_GetTick>
 8007992:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800799a:	b2db      	uxtb	r3, r3
 800799c:	2b20      	cmp	r3, #32
 800799e:	f040 8218 	bne.w	8007dd2 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80079a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a4:	9300      	str	r3, [sp, #0]
 80079a6:	2319      	movs	r3, #25
 80079a8:	2201      	movs	r2, #1
 80079aa:	4981      	ldr	r1, [pc, #516]	; (8007bb0 <HAL_I2C_Mem_Read+0x23c>)
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 fc93 	bl	80082d8 <I2C_WaitOnFlagUntilTimeout>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80079b8:	2302      	movs	r3, #2
 80079ba:	e20b      	b.n	8007dd4 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d101      	bne.n	80079ca <HAL_I2C_Mem_Read+0x56>
 80079c6:	2302      	movs	r3, #2
 80079c8:	e204      	b.n	8007dd4 <HAL_I2C_Mem_Read+0x460>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d007      	beq.n	80079f0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f042 0201 	orr.w	r2, r2, #1
 80079ee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079fe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2222      	movs	r2, #34	; 0x22
 8007a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	2240      	movs	r2, #64	; 0x40
 8007a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007a20:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a26:	b29a      	uxth	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	4a61      	ldr	r2, [pc, #388]	; (8007bb4 <HAL_I2C_Mem_Read+0x240>)
 8007a30:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007a32:	88f8      	ldrh	r0, [r7, #6]
 8007a34:	893a      	ldrh	r2, [r7, #8]
 8007a36:	8979      	ldrh	r1, [r7, #10]
 8007a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a3a:	9301      	str	r3, [sp, #4]
 8007a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3e:	9300      	str	r3, [sp, #0]
 8007a40:	4603      	mov	r3, r0
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f000 fb78 	bl	8008138 <I2C_RequestMemoryRead>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d001      	beq.n	8007a52 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e1c0      	b.n	8007dd4 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d113      	bne.n	8007a82 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	623b      	str	r3, [r7, #32]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	695b      	ldr	r3, [r3, #20]
 8007a64:	623b      	str	r3, [r7, #32]
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	699b      	ldr	r3, [r3, #24]
 8007a6c:	623b      	str	r3, [r7, #32]
 8007a6e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	681a      	ldr	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a7e:	601a      	str	r2, [r3, #0]
 8007a80:	e194      	b.n	8007dac <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a86:	2b01      	cmp	r3, #1
 8007a88:	d11d      	bne.n	8007ac6 <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a98:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007a9a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	61fb      	str	r3, [r7, #28]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	61fb      	str	r3, [r7, #28]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	61fb      	str	r3, [r7, #28]
 8007ab0:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ac0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007ac2:	b662      	cpsie	i
 8007ac4:	e172      	b.n	8007dac <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aca:	2b02      	cmp	r3, #2
 8007acc:	d11d      	bne.n	8007b0a <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681a      	ldr	r2, [r3, #0]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007adc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007ade:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	61bb      	str	r3, [r7, #24]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	695b      	ldr	r3, [r3, #20]
 8007aea:	61bb      	str	r3, [r7, #24]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	699b      	ldr	r3, [r3, #24]
 8007af2:	61bb      	str	r3, [r7, #24]
 8007af4:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681a      	ldr	r2, [r3, #0]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007b06:	b662      	cpsie	i
 8007b08:	e150      	b.n	8007dac <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b18:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	617b      	str	r3, [r7, #20]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	695b      	ldr	r3, [r3, #20]
 8007b24:	617b      	str	r3, [r7, #20]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	699b      	ldr	r3, [r3, #24]
 8007b2c:	617b      	str	r3, [r7, #20]
 8007b2e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007b30:	e13c      	b.n	8007dac <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b36:	2b03      	cmp	r3, #3
 8007b38:	f200 80f5 	bhi.w	8007d26 <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d123      	bne.n	8007b8c <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007b44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b48:	68f8      	ldr	r0, [r7, #12]
 8007b4a:	f000 fd1d 	bl	8008588 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d001      	beq.n	8007b58 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e13d      	b.n	8007dd4 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	691a      	ldr	r2, [r3, #16]
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b62:	b2d2      	uxtb	r2, r2
 8007b64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6a:	1c5a      	adds	r2, r3, #1
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b74:	3b01      	subs	r3, #1
 8007b76:	b29a      	uxth	r2, r3
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	3b01      	subs	r3, #1
 8007b84:	b29a      	uxth	r2, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b8a:	e10f      	b.n	8007dac <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d150      	bne.n	8007c36 <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b96:	9300      	str	r3, [sp, #0]
 8007b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	4906      	ldr	r1, [pc, #24]	; (8007bb8 <HAL_I2C_Mem_Read+0x244>)
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f000 fb9a 	bl	80082d8 <I2C_WaitOnFlagUntilTimeout>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d008      	beq.n	8007bbc <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e112      	b.n	8007dd4 <HAL_I2C_Mem_Read+0x460>
 8007bae:	bf00      	nop
 8007bb0:	00100002 	.word	0x00100002
 8007bb4:	ffff0000 	.word	0xffff0000
 8007bb8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007bbc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bcc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	691a      	ldr	r2, [r3, #16]
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd8:	b2d2      	uxtb	r2, r2
 8007bda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be0:	1c5a      	adds	r2, r3, #1
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bea:	3b01      	subs	r3, #1
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	b29a      	uxth	r2, r3
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007c00:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	691a      	ldr	r2, [r3, #16]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c0c:	b2d2      	uxtb	r2, r2
 8007c0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c14:	1c5a      	adds	r2, r3, #1
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	3b01      	subs	r3, #1
 8007c2e:	b29a      	uxth	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007c34:	e0ba      	b.n	8007dac <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	4967      	ldr	r1, [pc, #412]	; (8007ddc <HAL_I2C_Mem_Read+0x468>)
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f000 fb49 	bl	80082d8 <I2C_WaitOnFlagUntilTimeout>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d001      	beq.n	8007c50 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e0c1      	b.n	8007dd4 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	681a      	ldr	r2, [r3, #0]
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c5e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007c60:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	691a      	ldr	r2, [r3, #16]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6c:	b2d2      	uxtb	r2, r2
 8007c6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	1c5a      	adds	r2, r3, #1
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c7e:	3b01      	subs	r3, #1
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c96:	9300      	str	r3, [sp, #0]
 8007c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	494f      	ldr	r1, [pc, #316]	; (8007ddc <HAL_I2C_Mem_Read+0x468>)
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f000 fb1a 	bl	80082d8 <I2C_WaitOnFlagUntilTimeout>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d001      	beq.n	8007cae <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e092      	b.n	8007dd4 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	681a      	ldr	r2, [r3, #0]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cbc:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	691a      	ldr	r2, [r3, #16]
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cc8:	b2d2      	uxtb	r2, r2
 8007cca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd0:	1c5a      	adds	r2, r3, #1
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	b29a      	uxth	r2, r3
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007cf0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	691a      	ldr	r2, [r3, #16]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfc:	b2d2      	uxtb	r2, r2
 8007cfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d04:	1c5a      	adds	r2, r3, #1
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d0e:	3b01      	subs	r3, #1
 8007d10:	b29a      	uxth	r2, r3
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d1a:	b29b      	uxth	r3, r3
 8007d1c:	3b01      	subs	r3, #1
 8007d1e:	b29a      	uxth	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007d24:	e042      	b.n	8007dac <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	f000 fc2c 	bl	8008588 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e04c      	b.n	8007dd4 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	691a      	ldr	r2, [r3, #16]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d44:	b2d2      	uxtb	r2, r2
 8007d46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d4c:	1c5a      	adds	r2, r3, #1
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d56:	3b01      	subs	r3, #1
 8007d58:	b29a      	uxth	r2, r3
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	3b01      	subs	r3, #1
 8007d66:	b29a      	uxth	r2, r3
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	695b      	ldr	r3, [r3, #20]
 8007d72:	f003 0304 	and.w	r3, r3, #4
 8007d76:	2b04      	cmp	r3, #4
 8007d78:	d118      	bne.n	8007dac <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	691a      	ldr	r2, [r3, #16]
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d84:	b2d2      	uxtb	r2, r2
 8007d86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8c:	1c5a      	adds	r2, r3, #1
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d96:	3b01      	subs	r3, #1
 8007d98:	b29a      	uxth	r2, r3
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007da2:	b29b      	uxth	r3, r3
 8007da4:	3b01      	subs	r3, #1
 8007da6:	b29a      	uxth	r2, r3
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f47f aebe 	bne.w	8007b32 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2220      	movs	r2, #32
 8007dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2200      	movs	r2, #0
 8007dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	e000      	b.n	8007dd4 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8007dd2:	2302      	movs	r3, #2
  }
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3728      	adds	r7, #40	; 0x28
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}
 8007ddc:	00010004 	.word	0x00010004

08007de0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b08a      	sub	sp, #40	; 0x28
 8007de4:	af02      	add	r7, sp, #8
 8007de6:	60f8      	str	r0, [r7, #12]
 8007de8:	607a      	str	r2, [r7, #4]
 8007dea:	603b      	str	r3, [r7, #0]
 8007dec:	460b      	mov	r3, r1
 8007dee:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007df0:	f7fe fe54 	bl	8006a9c <HAL_GetTick>
 8007df4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8007df6:	2301      	movs	r3, #1
 8007df8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	2b20      	cmp	r3, #32
 8007e04:	f040 8105 	bne.w	8008012 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	9300      	str	r3, [sp, #0]
 8007e0c:	2319      	movs	r3, #25
 8007e0e:	2201      	movs	r2, #1
 8007e10:	4982      	ldr	r1, [pc, #520]	; (800801c <HAL_I2C_IsDeviceReady+0x23c>)
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f000 fa60 	bl	80082d8 <I2C_WaitOnFlagUntilTimeout>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d001      	beq.n	8007e22 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8007e1e:	2302      	movs	r3, #2
 8007e20:	e0f8      	b.n	8008014 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	d101      	bne.n	8007e30 <HAL_I2C_IsDeviceReady+0x50>
 8007e2c:	2302      	movs	r3, #2
 8007e2e:	e0f1      	b.n	8008014 <HAL_I2C_IsDeviceReady+0x234>
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d007      	beq.n	8007e56 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f042 0201 	orr.w	r2, r2, #1
 8007e54:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e64:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2224      	movs	r2, #36	; 0x24
 8007e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	2200      	movs	r2, #0
 8007e72:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	4a6a      	ldr	r2, [pc, #424]	; (8008020 <HAL_I2C_IsDeviceReady+0x240>)
 8007e78:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e88:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	9300      	str	r3, [sp, #0]
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f000 fa1e 	bl	80082d8 <I2C_WaitOnFlagUntilTimeout>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d001      	beq.n	8007ea6 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	e0b6      	b.n	8008014 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007ea6:	897b      	ldrh	r3, [r7, #10]
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	461a      	mov	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007eb4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007eb6:	f7fe fdf1 	bl	8006a9c <HAL_GetTick>
 8007eba:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	f003 0302 	and.w	r3, r3, #2
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	bf0c      	ite	eq
 8007eca:	2301      	moveq	r3, #1
 8007ecc:	2300      	movne	r3, #0
 8007ece:	b2db      	uxtb	r3, r3
 8007ed0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	695b      	ldr	r3, [r3, #20]
 8007ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007edc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ee0:	bf0c      	ite	eq
 8007ee2:	2301      	moveq	r3, #1
 8007ee4:	2300      	movne	r3, #0
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007eea:	e025      	b.n	8007f38 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007eec:	f7fe fdd6 	bl	8006a9c <HAL_GetTick>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	683a      	ldr	r2, [r7, #0]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d302      	bcc.n	8007f02 <HAL_I2C_IsDeviceReady+0x122>
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d103      	bne.n	8007f0a <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	22a0      	movs	r2, #160	; 0xa0
 8007f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	695b      	ldr	r3, [r3, #20]
 8007f10:	f003 0302 	and.w	r3, r3, #2
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	bf0c      	ite	eq
 8007f18:	2301      	moveq	r3, #1
 8007f1a:	2300      	movne	r3, #0
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	695b      	ldr	r3, [r3, #20]
 8007f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f2e:	bf0c      	ite	eq
 8007f30:	2301      	moveq	r3, #1
 8007f32:	2300      	movne	r3, #0
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2ba0      	cmp	r3, #160	; 0xa0
 8007f42:	d005      	beq.n	8007f50 <HAL_I2C_IsDeviceReady+0x170>
 8007f44:	7dfb      	ldrb	r3, [r7, #23]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d102      	bne.n	8007f50 <HAL_I2C_IsDeviceReady+0x170>
 8007f4a:	7dbb      	ldrb	r3, [r7, #22]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d0cd      	beq.n	8007eec <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2220      	movs	r2, #32
 8007f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	695b      	ldr	r3, [r3, #20]
 8007f5e:	f003 0302 	and.w	r3, r3, #2
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d129      	bne.n	8007fba <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f74:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f76:	2300      	movs	r3, #0
 8007f78:	613b      	str	r3, [r7, #16]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	695b      	ldr	r3, [r3, #20]
 8007f80:	613b      	str	r3, [r7, #16]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	699b      	ldr	r3, [r3, #24]
 8007f88:	613b      	str	r3, [r7, #16]
 8007f8a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	2319      	movs	r3, #25
 8007f92:	2201      	movs	r2, #1
 8007f94:	4921      	ldr	r1, [pc, #132]	; (800801c <HAL_I2C_IsDeviceReady+0x23c>)
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f000 f99e 	bl	80082d8 <I2C_WaitOnFlagUntilTimeout>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d001      	beq.n	8007fa6 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e036      	b.n	8008014 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2220      	movs	r2, #32
 8007faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	e02c      	b.n	8008014 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fc8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007fd2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	2319      	movs	r3, #25
 8007fda:	2201      	movs	r2, #1
 8007fdc:	490f      	ldr	r1, [pc, #60]	; (800801c <HAL_I2C_IsDeviceReady+0x23c>)
 8007fde:	68f8      	ldr	r0, [r7, #12]
 8007fe0:	f000 f97a 	bl	80082d8 <I2C_WaitOnFlagUntilTimeout>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d001      	beq.n	8007fee <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e012      	b.n	8008014 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	3301      	adds	r3, #1
 8007ff2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007ff4:	69ba      	ldr	r2, [r7, #24]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	f4ff af3e 	bcc.w	8007e7a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	2220      	movs	r2, #32
 8008002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2200      	movs	r2, #0
 800800a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e000      	b.n	8008014 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8008012:	2302      	movs	r3, #2
  }
}
 8008014:	4618      	mov	r0, r3
 8008016:	3720      	adds	r7, #32
 8008018:	46bd      	mov	sp, r7
 800801a:	bd80      	pop	{r7, pc}
 800801c:	00100002 	.word	0x00100002
 8008020:	ffff0000 	.word	0xffff0000

08008024 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b088      	sub	sp, #32
 8008028:	af02      	add	r7, sp, #8
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	4608      	mov	r0, r1
 800802e:	4611      	mov	r1, r2
 8008030:	461a      	mov	r2, r3
 8008032:	4603      	mov	r3, r0
 8008034:	817b      	strh	r3, [r7, #10]
 8008036:	460b      	mov	r3, r1
 8008038:	813b      	strh	r3, [r7, #8]
 800803a:	4613      	mov	r3, r2
 800803c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800804c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800804e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	6a3b      	ldr	r3, [r7, #32]
 8008054:	2200      	movs	r2, #0
 8008056:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800805a:	68f8      	ldr	r0, [r7, #12]
 800805c:	f000 f93c 	bl	80082d8 <I2C_WaitOnFlagUntilTimeout>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8008066:	2301      	movs	r3, #1
 8008068:	e05f      	b.n	800812a <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800806a:	897b      	ldrh	r3, [r7, #10]
 800806c:	b2db      	uxtb	r3, r3
 800806e:	461a      	mov	r2, r3
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008078:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800807a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800807c:	6a3a      	ldr	r2, [r7, #32]
 800807e:	492d      	ldr	r1, [pc, #180]	; (8008134 <I2C_RequestMemoryWrite+0x110>)
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f000 f980 	bl	8008386 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008086:	4603      	mov	r3, r0
 8008088:	2b00      	cmp	r3, #0
 800808a:	d001      	beq.n	8008090 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	e04c      	b.n	800812a <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008090:	2300      	movs	r3, #0
 8008092:	617b      	str	r3, [r7, #20]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	695b      	ldr	r3, [r3, #20]
 800809a:	617b      	str	r3, [r7, #20]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	617b      	str	r3, [r7, #20]
 80080a4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080a8:	6a39      	ldr	r1, [r7, #32]
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f000 f9ea 	bl	8008484 <I2C_WaitOnTXEFlagUntilTimeout>
 80080b0:	4603      	mov	r3, r0
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d00d      	beq.n	80080d2 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ba:	2b04      	cmp	r3, #4
 80080bc:	d107      	bne.n	80080ce <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080cc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e02b      	b.n	800812a <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80080d2:	88fb      	ldrh	r3, [r7, #6]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d105      	bne.n	80080e4 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80080d8:	893b      	ldrh	r3, [r7, #8]
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	611a      	str	r2, [r3, #16]
 80080e2:	e021      	b.n	8008128 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80080e4:	893b      	ldrh	r3, [r7, #8]
 80080e6:	0a1b      	lsrs	r3, r3, #8
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	b2da      	uxtb	r2, r3
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80080f4:	6a39      	ldr	r1, [r7, #32]
 80080f6:	68f8      	ldr	r0, [r7, #12]
 80080f8:	f000 f9c4 	bl	8008484 <I2C_WaitOnTXEFlagUntilTimeout>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00d      	beq.n	800811e <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008106:	2b04      	cmp	r3, #4
 8008108:	d107      	bne.n	800811a <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008118:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e005      	b.n	800812a <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800811e:	893b      	ldrh	r3, [r7, #8]
 8008120:	b2da      	uxtb	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3718      	adds	r7, #24
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	00010002 	.word	0x00010002

08008138 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b088      	sub	sp, #32
 800813c:	af02      	add	r7, sp, #8
 800813e:	60f8      	str	r0, [r7, #12]
 8008140:	4608      	mov	r0, r1
 8008142:	4611      	mov	r1, r2
 8008144:	461a      	mov	r2, r3
 8008146:	4603      	mov	r3, r0
 8008148:	817b      	strh	r3, [r7, #10]
 800814a:	460b      	mov	r3, r1
 800814c:	813b      	strh	r3, [r7, #8]
 800814e:	4613      	mov	r3, r2
 8008150:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008160:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008170:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008174:	9300      	str	r3, [sp, #0]
 8008176:	6a3b      	ldr	r3, [r7, #32]
 8008178:	2200      	movs	r2, #0
 800817a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f000 f8aa 	bl	80082d8 <I2C_WaitOnFlagUntilTimeout>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d001      	beq.n	800818e <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e09e      	b.n	80082cc <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800818e:	897b      	ldrh	r3, [r7, #10]
 8008190:	b2db      	uxtb	r3, r3
 8008192:	461a      	mov	r2, r3
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800819c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800819e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a0:	6a3a      	ldr	r2, [r7, #32]
 80081a2:	494c      	ldr	r1, [pc, #304]	; (80082d4 <I2C_RequestMemoryRead+0x19c>)
 80081a4:	68f8      	ldr	r0, [r7, #12]
 80081a6:	f000 f8ee 	bl	8008386 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081aa:	4603      	mov	r3, r0
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d001      	beq.n	80081b4 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	e08b      	b.n	80082cc <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081b4:	2300      	movs	r3, #0
 80081b6:	617b      	str	r3, [r7, #20]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	617b      	str	r3, [r7, #20]
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	617b      	str	r3, [r7, #20]
 80081c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80081ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081cc:	6a39      	ldr	r1, [r7, #32]
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f000 f958 	bl	8008484 <I2C_WaitOnTXEFlagUntilTimeout>
 80081d4:	4603      	mov	r3, r0
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00d      	beq.n	80081f6 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081de:	2b04      	cmp	r3, #4
 80081e0:	d107      	bne.n	80081f2 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e06a      	b.n	80082cc <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80081f6:	88fb      	ldrh	r3, [r7, #6]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d105      	bne.n	8008208 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80081fc:	893b      	ldrh	r3, [r7, #8]
 80081fe:	b2da      	uxtb	r2, r3
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	611a      	str	r2, [r3, #16]
 8008206:	e021      	b.n	800824c <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008208:	893b      	ldrh	r3, [r7, #8]
 800820a:	0a1b      	lsrs	r3, r3, #8
 800820c:	b29b      	uxth	r3, r3
 800820e:	b2da      	uxtb	r2, r3
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008218:	6a39      	ldr	r1, [r7, #32]
 800821a:	68f8      	ldr	r0, [r7, #12]
 800821c:	f000 f932 	bl	8008484 <I2C_WaitOnTXEFlagUntilTimeout>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00d      	beq.n	8008242 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822a:	2b04      	cmp	r3, #4
 800822c:	d107      	bne.n	800823e <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800823c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800823e:	2301      	movs	r3, #1
 8008240:	e044      	b.n	80082cc <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008242:	893b      	ldrh	r3, [r7, #8]
 8008244:	b2da      	uxtb	r2, r3
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800824c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800824e:	6a39      	ldr	r1, [r7, #32]
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	f000 f917 	bl	8008484 <I2C_WaitOnTXEFlagUntilTimeout>
 8008256:	4603      	mov	r3, r0
 8008258:	2b00      	cmp	r3, #0
 800825a:	d00d      	beq.n	8008278 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008260:	2b04      	cmp	r3, #4
 8008262:	d107      	bne.n	8008274 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008272:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	e029      	b.n	80082cc <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008286:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	6a3b      	ldr	r3, [r7, #32]
 800828e:	2200      	movs	r2, #0
 8008290:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008294:	68f8      	ldr	r0, [r7, #12]
 8008296:	f000 f81f 	bl	80082d8 <I2C_WaitOnFlagUntilTimeout>
 800829a:	4603      	mov	r3, r0
 800829c:	2b00      	cmp	r3, #0
 800829e:	d001      	beq.n	80082a4 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	e013      	b.n	80082cc <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80082a4:	897b      	ldrh	r3, [r7, #10]
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	f043 0301 	orr.w	r3, r3, #1
 80082ac:	b2da      	uxtb	r2, r3
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80082b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082b6:	6a3a      	ldr	r2, [r7, #32]
 80082b8:	4906      	ldr	r1, [pc, #24]	; (80082d4 <I2C_RequestMemoryRead+0x19c>)
 80082ba:	68f8      	ldr	r0, [r7, #12]
 80082bc:	f000 f863 	bl	8008386 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d001      	beq.n	80082ca <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e000      	b.n	80082cc <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 80082ca:	2300      	movs	r3, #0
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3718      	adds	r7, #24
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	00010002 	.word	0x00010002

080082d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	60f8      	str	r0, [r7, #12]
 80082e0:	60b9      	str	r1, [r7, #8]
 80082e2:	603b      	str	r3, [r7, #0]
 80082e4:	4613      	mov	r3, r2
 80082e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80082e8:	e025      	b.n	8008336 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082f0:	d021      	beq.n	8008336 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082f2:	f7fe fbd3 	bl	8006a9c <HAL_GetTick>
 80082f6:	4602      	mov	r2, r0
 80082f8:	69bb      	ldr	r3, [r7, #24]
 80082fa:	1ad3      	subs	r3, r2, r3
 80082fc:	683a      	ldr	r2, [r7, #0]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d302      	bcc.n	8008308 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d116      	bne.n	8008336 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2200      	movs	r2, #0
 800830c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2220      	movs	r2, #32
 8008312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008322:	f043 0220 	orr.w	r2, r3, #32
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	2200      	movs	r2, #0
 800832e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e023      	b.n	800837e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	0c1b      	lsrs	r3, r3, #16
 800833a:	b2db      	uxtb	r3, r3
 800833c:	2b01      	cmp	r3, #1
 800833e:	d10d      	bne.n	800835c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	695b      	ldr	r3, [r3, #20]
 8008346:	43da      	mvns	r2, r3
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	4013      	ands	r3, r2
 800834c:	b29b      	uxth	r3, r3
 800834e:	2b00      	cmp	r3, #0
 8008350:	bf0c      	ite	eq
 8008352:	2301      	moveq	r3, #1
 8008354:	2300      	movne	r3, #0
 8008356:	b2db      	uxtb	r3, r3
 8008358:	461a      	mov	r2, r3
 800835a:	e00c      	b.n	8008376 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	699b      	ldr	r3, [r3, #24]
 8008362:	43da      	mvns	r2, r3
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	4013      	ands	r3, r2
 8008368:	b29b      	uxth	r3, r3
 800836a:	2b00      	cmp	r3, #0
 800836c:	bf0c      	ite	eq
 800836e:	2301      	moveq	r3, #1
 8008370:	2300      	movne	r3, #0
 8008372:	b2db      	uxtb	r3, r3
 8008374:	461a      	mov	r2, r3
 8008376:	79fb      	ldrb	r3, [r7, #7]
 8008378:	429a      	cmp	r2, r3
 800837a:	d0b6      	beq.n	80082ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b084      	sub	sp, #16
 800838a:	af00      	add	r7, sp, #0
 800838c:	60f8      	str	r0, [r7, #12]
 800838e:	60b9      	str	r1, [r7, #8]
 8008390:	607a      	str	r2, [r7, #4]
 8008392:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008394:	e051      	b.n	800843a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	695b      	ldr	r3, [r3, #20]
 800839c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083a4:	d123      	bne.n	80083ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	681a      	ldr	r2, [r3, #0]
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80083b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80083be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	2200      	movs	r2, #0
 80083c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	2220      	movs	r2, #32
 80083ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083da:	f043 0204 	orr.w	r2, r3, #4
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e046      	b.n	800847c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083f4:	d021      	beq.n	800843a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083f6:	f7fe fb51 	bl	8006a9c <HAL_GetTick>
 80083fa:	4602      	mov	r2, r0
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	1ad3      	subs	r3, r2, r3
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	429a      	cmp	r2, r3
 8008404:	d302      	bcc.n	800840c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d116      	bne.n	800843a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	2200      	movs	r2, #0
 8008410:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2220      	movs	r2, #32
 8008416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008426:	f043 0220 	orr.w	r2, r3, #32
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008436:	2301      	movs	r3, #1
 8008438:	e020      	b.n	800847c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	0c1b      	lsrs	r3, r3, #16
 800843e:	b2db      	uxtb	r3, r3
 8008440:	2b01      	cmp	r3, #1
 8008442:	d10c      	bne.n	800845e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	695b      	ldr	r3, [r3, #20]
 800844a:	43da      	mvns	r2, r3
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	4013      	ands	r3, r2
 8008450:	b29b      	uxth	r3, r3
 8008452:	2b00      	cmp	r3, #0
 8008454:	bf14      	ite	ne
 8008456:	2301      	movne	r3, #1
 8008458:	2300      	moveq	r3, #0
 800845a:	b2db      	uxtb	r3, r3
 800845c:	e00b      	b.n	8008476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	43da      	mvns	r2, r3
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	4013      	ands	r3, r2
 800846a:	b29b      	uxth	r3, r3
 800846c:	2b00      	cmp	r3, #0
 800846e:	bf14      	ite	ne
 8008470:	2301      	movne	r3, #1
 8008472:	2300      	moveq	r3, #0
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	d18d      	bne.n	8008396 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008490:	e02d      	b.n	80084ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008492:	68f8      	ldr	r0, [r7, #12]
 8008494:	f000 f8ce 	bl	8008634 <I2C_IsAcknowledgeFailed>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800849e:	2301      	movs	r3, #1
 80084a0:	e02d      	b.n	80084fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084a8:	d021      	beq.n	80084ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084aa:	f7fe faf7 	bl	8006a9c <HAL_GetTick>
 80084ae:	4602      	mov	r2, r0
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	1ad3      	subs	r3, r2, r3
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d302      	bcc.n	80084c0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d116      	bne.n	80084ee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	2200      	movs	r2, #0
 80084c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2220      	movs	r2, #32
 80084ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2200      	movs	r2, #0
 80084d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084da:	f043 0220 	orr.w	r2, r3, #32
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e007      	b.n	80084fe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	695b      	ldr	r3, [r3, #20]
 80084f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084f8:	2b80      	cmp	r3, #128	; 0x80
 80084fa:	d1ca      	bne.n	8008492 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3710      	adds	r7, #16
 8008502:	46bd      	mov	sp, r7
 8008504:	bd80      	pop	{r7, pc}

08008506 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008506:	b580      	push	{r7, lr}
 8008508:	b084      	sub	sp, #16
 800850a:	af00      	add	r7, sp, #0
 800850c:	60f8      	str	r0, [r7, #12]
 800850e:	60b9      	str	r1, [r7, #8]
 8008510:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008512:	e02d      	b.n	8008570 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008514:	68f8      	ldr	r0, [r7, #12]
 8008516:	f000 f88d 	bl	8008634 <I2C_IsAcknowledgeFailed>
 800851a:	4603      	mov	r3, r0
 800851c:	2b00      	cmp	r3, #0
 800851e:	d001      	beq.n	8008524 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e02d      	b.n	8008580 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800852a:	d021      	beq.n	8008570 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800852c:	f7fe fab6 	bl	8006a9c <HAL_GetTick>
 8008530:	4602      	mov	r2, r0
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	68ba      	ldr	r2, [r7, #8]
 8008538:	429a      	cmp	r2, r3
 800853a:	d302      	bcc.n	8008542 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d116      	bne.n	8008570 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2200      	movs	r2, #0
 8008546:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2220      	movs	r2, #32
 800854c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855c:	f043 0220 	orr.w	r2, r3, #32
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	e007      	b.n	8008580 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	695b      	ldr	r3, [r3, #20]
 8008576:	f003 0304 	and.w	r3, r3, #4
 800857a:	2b04      	cmp	r3, #4
 800857c:	d1ca      	bne.n	8008514 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	3710      	adds	r7, #16
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008594:	e042      	b.n	800861c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	695b      	ldr	r3, [r3, #20]
 800859c:	f003 0310 	and.w	r3, r3, #16
 80085a0:	2b10      	cmp	r3, #16
 80085a2:	d119      	bne.n	80085d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f06f 0210 	mvn.w	r2, #16
 80085ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	2200      	movs	r2, #0
 80085b2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2220      	movs	r2, #32
 80085b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2200      	movs	r2, #0
 80085c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80085d4:	2301      	movs	r3, #1
 80085d6:	e029      	b.n	800862c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085d8:	f7fe fa60 	bl	8006a9c <HAL_GetTick>
 80085dc:	4602      	mov	r2, r0
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d302      	bcc.n	80085ee <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d116      	bne.n	800861c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2200      	movs	r2, #0
 80085f2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2220      	movs	r2, #32
 80085f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2200      	movs	r2, #0
 8008600:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008608:	f043 0220 	orr.w	r2, r3, #32
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	2200      	movs	r2, #0
 8008614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	e007      	b.n	800862c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	695b      	ldr	r3, [r3, #20]
 8008622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008626:	2b40      	cmp	r3, #64	; 0x40
 8008628:	d1b5      	bne.n	8008596 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008634:	b480      	push	{r7}
 8008636:	b083      	sub	sp, #12
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	695b      	ldr	r3, [r3, #20]
 8008642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800864a:	d11b      	bne.n	8008684 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008654:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2220      	movs	r2, #32
 8008660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008670:	f043 0204 	orr.w	r2, r3, #4
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e000      	b.n	8008686 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008684:	2300      	movs	r3, #0
}
 8008686:	4618      	mov	r0, r3
 8008688:	370c      	adds	r7, #12
 800868a:	46bd      	mov	sp, r7
 800868c:	bc80      	pop	{r7}
 800868e:	4770      	bx	lr

08008690 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b086      	sub	sp, #24
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d101      	bne.n	80086a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800869e:	2301      	movs	r3, #1
 80086a0:	e26c      	b.n	8008b7c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 0301 	and.w	r3, r3, #1
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f000 8087 	beq.w	80087be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80086b0:	4b92      	ldr	r3, [pc, #584]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	f003 030c 	and.w	r3, r3, #12
 80086b8:	2b04      	cmp	r3, #4
 80086ba:	d00c      	beq.n	80086d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80086bc:	4b8f      	ldr	r3, [pc, #572]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	f003 030c 	and.w	r3, r3, #12
 80086c4:	2b08      	cmp	r3, #8
 80086c6:	d112      	bne.n	80086ee <HAL_RCC_OscConfig+0x5e>
 80086c8:	4b8c      	ldr	r3, [pc, #560]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086d4:	d10b      	bne.n	80086ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086d6:	4b89      	ldr	r3, [pc, #548]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d06c      	beq.n	80087bc <HAL_RCC_OscConfig+0x12c>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d168      	bne.n	80087bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e246      	b.n	8008b7c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086f6:	d106      	bne.n	8008706 <HAL_RCC_OscConfig+0x76>
 80086f8:	4b80      	ldr	r3, [pc, #512]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a7f      	ldr	r2, [pc, #508]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 80086fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008702:	6013      	str	r3, [r2, #0]
 8008704:	e02e      	b.n	8008764 <HAL_RCC_OscConfig+0xd4>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d10c      	bne.n	8008728 <HAL_RCC_OscConfig+0x98>
 800870e:	4b7b      	ldr	r3, [pc, #492]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a7a      	ldr	r2, [pc, #488]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 8008714:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008718:	6013      	str	r3, [r2, #0]
 800871a:	4b78      	ldr	r3, [pc, #480]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a77      	ldr	r2, [pc, #476]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 8008720:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008724:	6013      	str	r3, [r2, #0]
 8008726:	e01d      	b.n	8008764 <HAL_RCC_OscConfig+0xd4>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008730:	d10c      	bne.n	800874c <HAL_RCC_OscConfig+0xbc>
 8008732:	4b72      	ldr	r3, [pc, #456]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a71      	ldr	r2, [pc, #452]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 8008738:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800873c:	6013      	str	r3, [r2, #0]
 800873e:	4b6f      	ldr	r3, [pc, #444]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a6e      	ldr	r2, [pc, #440]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 8008744:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008748:	6013      	str	r3, [r2, #0]
 800874a:	e00b      	b.n	8008764 <HAL_RCC_OscConfig+0xd4>
 800874c:	4b6b      	ldr	r3, [pc, #428]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a6a      	ldr	r2, [pc, #424]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 8008752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008756:	6013      	str	r3, [r2, #0]
 8008758:	4b68      	ldr	r3, [pc, #416]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a67      	ldr	r2, [pc, #412]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 800875e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008762:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d013      	beq.n	8008794 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800876c:	f7fe f996 	bl	8006a9c <HAL_GetTick>
 8008770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008772:	e008      	b.n	8008786 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008774:	f7fe f992 	bl	8006a9c <HAL_GetTick>
 8008778:	4602      	mov	r2, r0
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	2b64      	cmp	r3, #100	; 0x64
 8008780:	d901      	bls.n	8008786 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008782:	2303      	movs	r3, #3
 8008784:	e1fa      	b.n	8008b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008786:	4b5d      	ldr	r3, [pc, #372]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800878e:	2b00      	cmp	r3, #0
 8008790:	d0f0      	beq.n	8008774 <HAL_RCC_OscConfig+0xe4>
 8008792:	e014      	b.n	80087be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008794:	f7fe f982 	bl	8006a9c <HAL_GetTick>
 8008798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800879a:	e008      	b.n	80087ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800879c:	f7fe f97e 	bl	8006a9c <HAL_GetTick>
 80087a0:	4602      	mov	r2, r0
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	1ad3      	subs	r3, r2, r3
 80087a6:	2b64      	cmp	r3, #100	; 0x64
 80087a8:	d901      	bls.n	80087ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80087aa:	2303      	movs	r3, #3
 80087ac:	e1e6      	b.n	8008b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087ae:	4b53      	ldr	r3, [pc, #332]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d1f0      	bne.n	800879c <HAL_RCC_OscConfig+0x10c>
 80087ba:	e000      	b.n	80087be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80087bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 0302 	and.w	r3, r3, #2
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d063      	beq.n	8008892 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80087ca:	4b4c      	ldr	r3, [pc, #304]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	f003 030c 	and.w	r3, r3, #12
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00b      	beq.n	80087ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80087d6:	4b49      	ldr	r3, [pc, #292]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	f003 030c 	and.w	r3, r3, #12
 80087de:	2b08      	cmp	r3, #8
 80087e0:	d11c      	bne.n	800881c <HAL_RCC_OscConfig+0x18c>
 80087e2:	4b46      	ldr	r3, [pc, #280]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d116      	bne.n	800881c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80087ee:	4b43      	ldr	r3, [pc, #268]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0302 	and.w	r3, r3, #2
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d005      	beq.n	8008806 <HAL_RCC_OscConfig+0x176>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	691b      	ldr	r3, [r3, #16]
 80087fe:	2b01      	cmp	r3, #1
 8008800:	d001      	beq.n	8008806 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	e1ba      	b.n	8008b7c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008806:	4b3d      	ldr	r3, [pc, #244]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	695b      	ldr	r3, [r3, #20]
 8008812:	00db      	lsls	r3, r3, #3
 8008814:	4939      	ldr	r1, [pc, #228]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 8008816:	4313      	orrs	r3, r2
 8008818:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800881a:	e03a      	b.n	8008892 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d020      	beq.n	8008866 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008824:	4b36      	ldr	r3, [pc, #216]	; (8008900 <HAL_RCC_OscConfig+0x270>)
 8008826:	2201      	movs	r2, #1
 8008828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800882a:	f7fe f937 	bl	8006a9c <HAL_GetTick>
 800882e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008830:	e008      	b.n	8008844 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008832:	f7fe f933 	bl	8006a9c <HAL_GetTick>
 8008836:	4602      	mov	r2, r0
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	2b02      	cmp	r3, #2
 800883e:	d901      	bls.n	8008844 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008840:	2303      	movs	r3, #3
 8008842:	e19b      	b.n	8008b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008844:	4b2d      	ldr	r3, [pc, #180]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f003 0302 	and.w	r3, r3, #2
 800884c:	2b00      	cmp	r3, #0
 800884e:	d0f0      	beq.n	8008832 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008850:	4b2a      	ldr	r3, [pc, #168]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	695b      	ldr	r3, [r3, #20]
 800885c:	00db      	lsls	r3, r3, #3
 800885e:	4927      	ldr	r1, [pc, #156]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 8008860:	4313      	orrs	r3, r2
 8008862:	600b      	str	r3, [r1, #0]
 8008864:	e015      	b.n	8008892 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008866:	4b26      	ldr	r3, [pc, #152]	; (8008900 <HAL_RCC_OscConfig+0x270>)
 8008868:	2200      	movs	r2, #0
 800886a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800886c:	f7fe f916 	bl	8006a9c <HAL_GetTick>
 8008870:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008872:	e008      	b.n	8008886 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008874:	f7fe f912 	bl	8006a9c <HAL_GetTick>
 8008878:	4602      	mov	r2, r0
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	2b02      	cmp	r3, #2
 8008880:	d901      	bls.n	8008886 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008882:	2303      	movs	r3, #3
 8008884:	e17a      	b.n	8008b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008886:	4b1d      	ldr	r3, [pc, #116]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 0302 	and.w	r3, r3, #2
 800888e:	2b00      	cmp	r3, #0
 8008890:	d1f0      	bne.n	8008874 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 0308 	and.w	r3, r3, #8
 800889a:	2b00      	cmp	r3, #0
 800889c:	d03a      	beq.n	8008914 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	699b      	ldr	r3, [r3, #24]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d019      	beq.n	80088da <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088a6:	4b17      	ldr	r3, [pc, #92]	; (8008904 <HAL_RCC_OscConfig+0x274>)
 80088a8:	2201      	movs	r2, #1
 80088aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088ac:	f7fe f8f6 	bl	8006a9c <HAL_GetTick>
 80088b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088b2:	e008      	b.n	80088c6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088b4:	f7fe f8f2 	bl	8006a9c <HAL_GetTick>
 80088b8:	4602      	mov	r2, r0
 80088ba:	693b      	ldr	r3, [r7, #16]
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	2b02      	cmp	r3, #2
 80088c0:	d901      	bls.n	80088c6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80088c2:	2303      	movs	r3, #3
 80088c4:	e15a      	b.n	8008b7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088c6:	4b0d      	ldr	r3, [pc, #52]	; (80088fc <HAL_RCC_OscConfig+0x26c>)
 80088c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ca:	f003 0302 	and.w	r3, r3, #2
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d0f0      	beq.n	80088b4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80088d2:	2001      	movs	r0, #1
 80088d4:	f000 fada 	bl	8008e8c <RCC_Delay>
 80088d8:	e01c      	b.n	8008914 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80088da:	4b0a      	ldr	r3, [pc, #40]	; (8008904 <HAL_RCC_OscConfig+0x274>)
 80088dc:	2200      	movs	r2, #0
 80088de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088e0:	f7fe f8dc 	bl	8006a9c <HAL_GetTick>
 80088e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80088e6:	e00f      	b.n	8008908 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80088e8:	f7fe f8d8 	bl	8006a9c <HAL_GetTick>
 80088ec:	4602      	mov	r2, r0
 80088ee:	693b      	ldr	r3, [r7, #16]
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d908      	bls.n	8008908 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	e140      	b.n	8008b7c <HAL_RCC_OscConfig+0x4ec>
 80088fa:	bf00      	nop
 80088fc:	40021000 	.word	0x40021000
 8008900:	42420000 	.word	0x42420000
 8008904:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008908:	4b9e      	ldr	r3, [pc, #632]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 800890a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890c:	f003 0302 	and.w	r3, r3, #2
 8008910:	2b00      	cmp	r3, #0
 8008912:	d1e9      	bne.n	80088e8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0304 	and.w	r3, r3, #4
 800891c:	2b00      	cmp	r3, #0
 800891e:	f000 80a6 	beq.w	8008a6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008922:	2300      	movs	r3, #0
 8008924:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008926:	4b97      	ldr	r3, [pc, #604]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 8008928:	69db      	ldr	r3, [r3, #28]
 800892a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10d      	bne.n	800894e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008932:	4b94      	ldr	r3, [pc, #592]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 8008934:	69db      	ldr	r3, [r3, #28]
 8008936:	4a93      	ldr	r2, [pc, #588]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 8008938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800893c:	61d3      	str	r3, [r2, #28]
 800893e:	4b91      	ldr	r3, [pc, #580]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 8008940:	69db      	ldr	r3, [r3, #28]
 8008942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008946:	60bb      	str	r3, [r7, #8]
 8008948:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800894a:	2301      	movs	r3, #1
 800894c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800894e:	4b8e      	ldr	r3, [pc, #568]	; (8008b88 <HAL_RCC_OscConfig+0x4f8>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008956:	2b00      	cmp	r3, #0
 8008958:	d118      	bne.n	800898c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800895a:	4b8b      	ldr	r3, [pc, #556]	; (8008b88 <HAL_RCC_OscConfig+0x4f8>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a8a      	ldr	r2, [pc, #552]	; (8008b88 <HAL_RCC_OscConfig+0x4f8>)
 8008960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008964:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008966:	f7fe f899 	bl	8006a9c <HAL_GetTick>
 800896a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800896c:	e008      	b.n	8008980 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800896e:	f7fe f895 	bl	8006a9c <HAL_GetTick>
 8008972:	4602      	mov	r2, r0
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	1ad3      	subs	r3, r2, r3
 8008978:	2b64      	cmp	r3, #100	; 0x64
 800897a:	d901      	bls.n	8008980 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800897c:	2303      	movs	r3, #3
 800897e:	e0fd      	b.n	8008b7c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008980:	4b81      	ldr	r3, [pc, #516]	; (8008b88 <HAL_RCC_OscConfig+0x4f8>)
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008988:	2b00      	cmp	r3, #0
 800898a:	d0f0      	beq.n	800896e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	2b01      	cmp	r3, #1
 8008992:	d106      	bne.n	80089a2 <HAL_RCC_OscConfig+0x312>
 8008994:	4b7b      	ldr	r3, [pc, #492]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 8008996:	6a1b      	ldr	r3, [r3, #32]
 8008998:	4a7a      	ldr	r2, [pc, #488]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 800899a:	f043 0301 	orr.w	r3, r3, #1
 800899e:	6213      	str	r3, [r2, #32]
 80089a0:	e02d      	b.n	80089fe <HAL_RCC_OscConfig+0x36e>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d10c      	bne.n	80089c4 <HAL_RCC_OscConfig+0x334>
 80089aa:	4b76      	ldr	r3, [pc, #472]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 80089ac:	6a1b      	ldr	r3, [r3, #32]
 80089ae:	4a75      	ldr	r2, [pc, #468]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 80089b0:	f023 0301 	bic.w	r3, r3, #1
 80089b4:	6213      	str	r3, [r2, #32]
 80089b6:	4b73      	ldr	r3, [pc, #460]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 80089b8:	6a1b      	ldr	r3, [r3, #32]
 80089ba:	4a72      	ldr	r2, [pc, #456]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 80089bc:	f023 0304 	bic.w	r3, r3, #4
 80089c0:	6213      	str	r3, [r2, #32]
 80089c2:	e01c      	b.n	80089fe <HAL_RCC_OscConfig+0x36e>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	2b05      	cmp	r3, #5
 80089ca:	d10c      	bne.n	80089e6 <HAL_RCC_OscConfig+0x356>
 80089cc:	4b6d      	ldr	r3, [pc, #436]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 80089ce:	6a1b      	ldr	r3, [r3, #32]
 80089d0:	4a6c      	ldr	r2, [pc, #432]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 80089d2:	f043 0304 	orr.w	r3, r3, #4
 80089d6:	6213      	str	r3, [r2, #32]
 80089d8:	4b6a      	ldr	r3, [pc, #424]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 80089da:	6a1b      	ldr	r3, [r3, #32]
 80089dc:	4a69      	ldr	r2, [pc, #420]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 80089de:	f043 0301 	orr.w	r3, r3, #1
 80089e2:	6213      	str	r3, [r2, #32]
 80089e4:	e00b      	b.n	80089fe <HAL_RCC_OscConfig+0x36e>
 80089e6:	4b67      	ldr	r3, [pc, #412]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 80089e8:	6a1b      	ldr	r3, [r3, #32]
 80089ea:	4a66      	ldr	r2, [pc, #408]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 80089ec:	f023 0301 	bic.w	r3, r3, #1
 80089f0:	6213      	str	r3, [r2, #32]
 80089f2:	4b64      	ldr	r3, [pc, #400]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 80089f4:	6a1b      	ldr	r3, [r3, #32]
 80089f6:	4a63      	ldr	r2, [pc, #396]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 80089f8:	f023 0304 	bic.w	r3, r3, #4
 80089fc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d015      	beq.n	8008a32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a06:	f7fe f849 	bl	8006a9c <HAL_GetTick>
 8008a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a0c:	e00a      	b.n	8008a24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a0e:	f7fe f845 	bl	8006a9c <HAL_GetTick>
 8008a12:	4602      	mov	r2, r0
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d901      	bls.n	8008a24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008a20:	2303      	movs	r3, #3
 8008a22:	e0ab      	b.n	8008b7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a24:	4b57      	ldr	r3, [pc, #348]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 8008a26:	6a1b      	ldr	r3, [r3, #32]
 8008a28:	f003 0302 	and.w	r3, r3, #2
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d0ee      	beq.n	8008a0e <HAL_RCC_OscConfig+0x37e>
 8008a30:	e014      	b.n	8008a5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a32:	f7fe f833 	bl	8006a9c <HAL_GetTick>
 8008a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a38:	e00a      	b.n	8008a50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a3a:	f7fe f82f 	bl	8006a9c <HAL_GetTick>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	1ad3      	subs	r3, r2, r3
 8008a44:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d901      	bls.n	8008a50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008a4c:	2303      	movs	r3, #3
 8008a4e:	e095      	b.n	8008b7c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a50:	4b4c      	ldr	r3, [pc, #304]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 8008a52:	6a1b      	ldr	r3, [r3, #32]
 8008a54:	f003 0302 	and.w	r3, r3, #2
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d1ee      	bne.n	8008a3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008a5c:	7dfb      	ldrb	r3, [r7, #23]
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d105      	bne.n	8008a6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a62:	4b48      	ldr	r3, [pc, #288]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 8008a64:	69db      	ldr	r3, [r3, #28]
 8008a66:	4a47      	ldr	r2, [pc, #284]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 8008a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a6c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	69db      	ldr	r3, [r3, #28]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f000 8081 	beq.w	8008b7a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008a78:	4b42      	ldr	r3, [pc, #264]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	f003 030c 	and.w	r3, r3, #12
 8008a80:	2b08      	cmp	r3, #8
 8008a82:	d061      	beq.n	8008b48 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	69db      	ldr	r3, [r3, #28]
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	d146      	bne.n	8008b1a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a8c:	4b3f      	ldr	r3, [pc, #252]	; (8008b8c <HAL_RCC_OscConfig+0x4fc>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a92:	f7fe f803 	bl	8006a9c <HAL_GetTick>
 8008a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008a98:	e008      	b.n	8008aac <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008a9a:	f7fd ffff 	bl	8006a9c <HAL_GetTick>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	1ad3      	subs	r3, r2, r3
 8008aa4:	2b02      	cmp	r3, #2
 8008aa6:	d901      	bls.n	8008aac <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008aa8:	2303      	movs	r3, #3
 8008aaa:	e067      	b.n	8008b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008aac:	4b35      	ldr	r3, [pc, #212]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d1f0      	bne.n	8008a9a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a1b      	ldr	r3, [r3, #32]
 8008abc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ac0:	d108      	bne.n	8008ad4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008ac2:	4b30      	ldr	r3, [pc, #192]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	689b      	ldr	r3, [r3, #8]
 8008ace:	492d      	ldr	r1, [pc, #180]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008ad4:	4b2b      	ldr	r3, [pc, #172]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6a19      	ldr	r1, [r3, #32]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ae4:	430b      	orrs	r3, r1
 8008ae6:	4927      	ldr	r1, [pc, #156]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008aec:	4b27      	ldr	r3, [pc, #156]	; (8008b8c <HAL_RCC_OscConfig+0x4fc>)
 8008aee:	2201      	movs	r2, #1
 8008af0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008af2:	f7fd ffd3 	bl	8006a9c <HAL_GetTick>
 8008af6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008af8:	e008      	b.n	8008b0c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008afa:	f7fd ffcf 	bl	8006a9c <HAL_GetTick>
 8008afe:	4602      	mov	r2, r0
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	1ad3      	subs	r3, r2, r3
 8008b04:	2b02      	cmp	r3, #2
 8008b06:	d901      	bls.n	8008b0c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e037      	b.n	8008b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008b0c:	4b1d      	ldr	r3, [pc, #116]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d0f0      	beq.n	8008afa <HAL_RCC_OscConfig+0x46a>
 8008b18:	e02f      	b.n	8008b7a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b1a:	4b1c      	ldr	r3, [pc, #112]	; (8008b8c <HAL_RCC_OscConfig+0x4fc>)
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b20:	f7fd ffbc 	bl	8006a9c <HAL_GetTick>
 8008b24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008b26:	e008      	b.n	8008b3a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b28:	f7fd ffb8 	bl	8006a9c <HAL_GetTick>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	2b02      	cmp	r3, #2
 8008b34:	d901      	bls.n	8008b3a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008b36:	2303      	movs	r3, #3
 8008b38:	e020      	b.n	8008b7c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008b3a:	4b12      	ldr	r3, [pc, #72]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1f0      	bne.n	8008b28 <HAL_RCC_OscConfig+0x498>
 8008b46:	e018      	b.n	8008b7a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	69db      	ldr	r3, [r3, #28]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d101      	bne.n	8008b54 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008b50:	2301      	movs	r3, #1
 8008b52:	e013      	b.n	8008b7c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008b54:	4b0b      	ldr	r3, [pc, #44]	; (8008b84 <HAL_RCC_OscConfig+0x4f4>)
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a1b      	ldr	r3, [r3, #32]
 8008b64:	429a      	cmp	r2, r3
 8008b66:	d106      	bne.n	8008b76 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d001      	beq.n	8008b7a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	e000      	b.n	8008b7c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3718      	adds	r7, #24
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}
 8008b84:	40021000 	.word	0x40021000
 8008b88:	40007000 	.word	0x40007000
 8008b8c:	42420060 	.word	0x42420060

08008b90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008b90:	b580      	push	{r7, lr}
 8008b92:	b084      	sub	sp, #16
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
 8008b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d101      	bne.n	8008ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	e0d0      	b.n	8008d46 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ba4:	4b6a      	ldr	r3, [pc, #424]	; (8008d50 <HAL_RCC_ClockConfig+0x1c0>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f003 0307 	and.w	r3, r3, #7
 8008bac:	683a      	ldr	r2, [r7, #0]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d910      	bls.n	8008bd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008bb2:	4b67      	ldr	r3, [pc, #412]	; (8008d50 <HAL_RCC_ClockConfig+0x1c0>)
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f023 0207 	bic.w	r2, r3, #7
 8008bba:	4965      	ldr	r1, [pc, #404]	; (8008d50 <HAL_RCC_ClockConfig+0x1c0>)
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008bc2:	4b63      	ldr	r3, [pc, #396]	; (8008d50 <HAL_RCC_ClockConfig+0x1c0>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f003 0307 	and.w	r3, r3, #7
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	429a      	cmp	r2, r3
 8008bce:	d001      	beq.n	8008bd4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e0b8      	b.n	8008d46 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 0302 	and.w	r3, r3, #2
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d020      	beq.n	8008c22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f003 0304 	and.w	r3, r3, #4
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d005      	beq.n	8008bf8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008bec:	4b59      	ldr	r3, [pc, #356]	; (8008d54 <HAL_RCC_ClockConfig+0x1c4>)
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	4a58      	ldr	r2, [pc, #352]	; (8008d54 <HAL_RCC_ClockConfig+0x1c4>)
 8008bf2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008bf6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f003 0308 	and.w	r3, r3, #8
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d005      	beq.n	8008c10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008c04:	4b53      	ldr	r3, [pc, #332]	; (8008d54 <HAL_RCC_ClockConfig+0x1c4>)
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	4a52      	ldr	r2, [pc, #328]	; (8008d54 <HAL_RCC_ClockConfig+0x1c4>)
 8008c0a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008c0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c10:	4b50      	ldr	r3, [pc, #320]	; (8008d54 <HAL_RCC_ClockConfig+0x1c4>)
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	494d      	ldr	r1, [pc, #308]	; (8008d54 <HAL_RCC_ClockConfig+0x1c4>)
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 0301 	and.w	r3, r3, #1
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d040      	beq.n	8008cb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d107      	bne.n	8008c46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c36:	4b47      	ldr	r3, [pc, #284]	; (8008d54 <HAL_RCC_ClockConfig+0x1c4>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d115      	bne.n	8008c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e07f      	b.n	8008d46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	2b02      	cmp	r3, #2
 8008c4c:	d107      	bne.n	8008c5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008c4e:	4b41      	ldr	r3, [pc, #260]	; (8008d54 <HAL_RCC_ClockConfig+0x1c4>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d109      	bne.n	8008c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	e073      	b.n	8008d46 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008c5e:	4b3d      	ldr	r3, [pc, #244]	; (8008d54 <HAL_RCC_ClockConfig+0x1c4>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	f003 0302 	and.w	r3, r3, #2
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d101      	bne.n	8008c6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e06b      	b.n	8008d46 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008c6e:	4b39      	ldr	r3, [pc, #228]	; (8008d54 <HAL_RCC_ClockConfig+0x1c4>)
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	f023 0203 	bic.w	r2, r3, #3
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	4936      	ldr	r1, [pc, #216]	; (8008d54 <HAL_RCC_ClockConfig+0x1c4>)
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008c80:	f7fd ff0c 	bl	8006a9c <HAL_GetTick>
 8008c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c86:	e00a      	b.n	8008c9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008c88:	f7fd ff08 	bl	8006a9c <HAL_GetTick>
 8008c8c:	4602      	mov	r2, r0
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	1ad3      	subs	r3, r2, r3
 8008c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d901      	bls.n	8008c9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	e053      	b.n	8008d46 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008c9e:	4b2d      	ldr	r3, [pc, #180]	; (8008d54 <HAL_RCC_ClockConfig+0x1c4>)
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	f003 020c 	and.w	r2, r3, #12
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	685b      	ldr	r3, [r3, #4]
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d1eb      	bne.n	8008c88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008cb0:	4b27      	ldr	r3, [pc, #156]	; (8008d50 <HAL_RCC_ClockConfig+0x1c0>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f003 0307 	and.w	r3, r3, #7
 8008cb8:	683a      	ldr	r2, [r7, #0]
 8008cba:	429a      	cmp	r2, r3
 8008cbc:	d210      	bcs.n	8008ce0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008cbe:	4b24      	ldr	r3, [pc, #144]	; (8008d50 <HAL_RCC_ClockConfig+0x1c0>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f023 0207 	bic.w	r2, r3, #7
 8008cc6:	4922      	ldr	r1, [pc, #136]	; (8008d50 <HAL_RCC_ClockConfig+0x1c0>)
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008cce:	4b20      	ldr	r3, [pc, #128]	; (8008d50 <HAL_RCC_ClockConfig+0x1c0>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f003 0307 	and.w	r3, r3, #7
 8008cd6:	683a      	ldr	r2, [r7, #0]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d001      	beq.n	8008ce0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8008cdc:	2301      	movs	r3, #1
 8008cde:	e032      	b.n	8008d46 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f003 0304 	and.w	r3, r3, #4
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d008      	beq.n	8008cfe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008cec:	4b19      	ldr	r3, [pc, #100]	; (8008d54 <HAL_RCC_ClockConfig+0x1c4>)
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	4916      	ldr	r1, [pc, #88]	; (8008d54 <HAL_RCC_ClockConfig+0x1c4>)
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 0308 	and.w	r3, r3, #8
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d009      	beq.n	8008d1e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008d0a:	4b12      	ldr	r3, [pc, #72]	; (8008d54 <HAL_RCC_ClockConfig+0x1c4>)
 8008d0c:	685b      	ldr	r3, [r3, #4]
 8008d0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	691b      	ldr	r3, [r3, #16]
 8008d16:	00db      	lsls	r3, r3, #3
 8008d18:	490e      	ldr	r1, [pc, #56]	; (8008d54 <HAL_RCC_ClockConfig+0x1c4>)
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008d1e:	f000 f821 	bl	8008d64 <HAL_RCC_GetSysClockFreq>
 8008d22:	4601      	mov	r1, r0
 8008d24:	4b0b      	ldr	r3, [pc, #44]	; (8008d54 <HAL_RCC_ClockConfig+0x1c4>)
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	091b      	lsrs	r3, r3, #4
 8008d2a:	f003 030f 	and.w	r3, r3, #15
 8008d2e:	4a0a      	ldr	r2, [pc, #40]	; (8008d58 <HAL_RCC_ClockConfig+0x1c8>)
 8008d30:	5cd3      	ldrb	r3, [r2, r3]
 8008d32:	fa21 f303 	lsr.w	r3, r1, r3
 8008d36:	4a09      	ldr	r2, [pc, #36]	; (8008d5c <HAL_RCC_ClockConfig+0x1cc>)
 8008d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008d3a:	4b09      	ldr	r3, [pc, #36]	; (8008d60 <HAL_RCC_ClockConfig+0x1d0>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7fd fe6a 	bl	8006a18 <HAL_InitTick>

  return HAL_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	40022000 	.word	0x40022000
 8008d54:	40021000 	.word	0x40021000
 8008d58:	0800e114 	.word	0x0800e114
 8008d5c:	20000040 	.word	0x20000040
 8008d60:	20000044 	.word	0x20000044

08008d64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d64:	b490      	push	{r4, r7}
 8008d66:	b08a      	sub	sp, #40	; 0x28
 8008d68:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8008d6a:	4b2a      	ldr	r3, [pc, #168]	; (8008e14 <HAL_RCC_GetSysClockFreq+0xb0>)
 8008d6c:	1d3c      	adds	r4, r7, #4
 8008d6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008d70:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8008d74:	4b28      	ldr	r3, [pc, #160]	; (8008e18 <HAL_RCC_GetSysClockFreq+0xb4>)
 8008d76:	881b      	ldrh	r3, [r3, #0]
 8008d78:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	61fb      	str	r3, [r7, #28]
 8008d7e:	2300      	movs	r3, #0
 8008d80:	61bb      	str	r3, [r7, #24]
 8008d82:	2300      	movs	r3, #0
 8008d84:	627b      	str	r3, [r7, #36]	; 0x24
 8008d86:	2300      	movs	r3, #0
 8008d88:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8008d8e:	4b23      	ldr	r3, [pc, #140]	; (8008e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	f003 030c 	and.w	r3, r3, #12
 8008d9a:	2b04      	cmp	r3, #4
 8008d9c:	d002      	beq.n	8008da4 <HAL_RCC_GetSysClockFreq+0x40>
 8008d9e:	2b08      	cmp	r3, #8
 8008da0:	d003      	beq.n	8008daa <HAL_RCC_GetSysClockFreq+0x46>
 8008da2:	e02d      	b.n	8008e00 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008da4:	4b1e      	ldr	r3, [pc, #120]	; (8008e20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008da6:	623b      	str	r3, [r7, #32]
      break;
 8008da8:	e02d      	b.n	8008e06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8008daa:	69fb      	ldr	r3, [r7, #28]
 8008dac:	0c9b      	lsrs	r3, r3, #18
 8008dae:	f003 030f 	and.w	r3, r3, #15
 8008db2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008db6:	4413      	add	r3, r2
 8008db8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8008dbc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d013      	beq.n	8008df0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008dc8:	4b14      	ldr	r3, [pc, #80]	; (8008e1c <HAL_RCC_GetSysClockFreq+0xb8>)
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	0c5b      	lsrs	r3, r3, #17
 8008dce:	f003 0301 	and.w	r3, r3, #1
 8008dd2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008dd6:	4413      	add	r3, r2
 8008dd8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8008ddc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	4a0f      	ldr	r2, [pc, #60]	; (8008e20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008de2:	fb02 f203 	mul.w	r2, r2, r3
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dec:	627b      	str	r3, [r7, #36]	; 0x24
 8008dee:	e004      	b.n	8008dfa <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	4a0c      	ldr	r2, [pc, #48]	; (8008e24 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008df4:	fb02 f303 	mul.w	r3, r2, r3
 8008df8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfc:	623b      	str	r3, [r7, #32]
      break;
 8008dfe:	e002      	b.n	8008e06 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008e00:	4b07      	ldr	r3, [pc, #28]	; (8008e20 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008e02:	623b      	str	r3, [r7, #32]
      break;
 8008e04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e06:	6a3b      	ldr	r3, [r7, #32]
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3728      	adds	r7, #40	; 0x28
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bc90      	pop	{r4, r7}
 8008e10:	4770      	bx	lr
 8008e12:	bf00      	nop
 8008e14:	0800e0f8 	.word	0x0800e0f8
 8008e18:	0800e108 	.word	0x0800e108
 8008e1c:	40021000 	.word	0x40021000
 8008e20:	007a1200 	.word	0x007a1200
 8008e24:	003d0900 	.word	0x003d0900

08008e28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e2c:	4b02      	ldr	r3, [pc, #8]	; (8008e38 <HAL_RCC_GetHCLKFreq+0x10>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	46bd      	mov	sp, r7
 8008e34:	bc80      	pop	{r7}
 8008e36:	4770      	bx	lr
 8008e38:	20000040 	.word	0x20000040

08008e3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008e40:	f7ff fff2 	bl	8008e28 <HAL_RCC_GetHCLKFreq>
 8008e44:	4601      	mov	r1, r0
 8008e46:	4b05      	ldr	r3, [pc, #20]	; (8008e5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e48:	685b      	ldr	r3, [r3, #4]
 8008e4a:	0a1b      	lsrs	r3, r3, #8
 8008e4c:	f003 0307 	and.w	r3, r3, #7
 8008e50:	4a03      	ldr	r2, [pc, #12]	; (8008e60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e52:	5cd3      	ldrb	r3, [r2, r3]
 8008e54:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	bd80      	pop	{r7, pc}
 8008e5c:	40021000 	.word	0x40021000
 8008e60:	0800e124 	.word	0x0800e124

08008e64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008e68:	f7ff ffde 	bl	8008e28 <HAL_RCC_GetHCLKFreq>
 8008e6c:	4601      	mov	r1, r0
 8008e6e:	4b05      	ldr	r3, [pc, #20]	; (8008e84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e70:	685b      	ldr	r3, [r3, #4]
 8008e72:	0adb      	lsrs	r3, r3, #11
 8008e74:	f003 0307 	and.w	r3, r3, #7
 8008e78:	4a03      	ldr	r2, [pc, #12]	; (8008e88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e7a:	5cd3      	ldrb	r3, [r2, r3]
 8008e7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	bd80      	pop	{r7, pc}
 8008e84:	40021000 	.word	0x40021000
 8008e88:	0800e124 	.word	0x0800e124

08008e8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008e94:	4b0a      	ldr	r3, [pc, #40]	; (8008ec0 <RCC_Delay+0x34>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a0a      	ldr	r2, [pc, #40]	; (8008ec4 <RCC_Delay+0x38>)
 8008e9a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e9e:	0a5b      	lsrs	r3, r3, #9
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	fb02 f303 	mul.w	r3, r2, r3
 8008ea6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008ea8:	bf00      	nop
  }
  while (Delay --);
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	1e5a      	subs	r2, r3, #1
 8008eae:	60fa      	str	r2, [r7, #12]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1f9      	bne.n	8008ea8 <RCC_Delay+0x1c>
}
 8008eb4:	bf00      	nop
 8008eb6:	3714      	adds	r7, #20
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bc80      	pop	{r7}
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	20000040 	.word	0x20000040
 8008ec4:	10624dd3 	.word	0x10624dd3

08008ec8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e03f      	b.n	8008f5a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008ee0:	b2db      	uxtb	r3, r3
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d106      	bne.n	8008ef4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f7fd fcac 	bl	800684c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2224      	movs	r2, #36	; 0x24
 8008ef8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	68da      	ldr	r2, [r3, #12]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008f0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fc2d 	bl	800976c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	691a      	ldr	r2, [r3, #16]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008f20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	695a      	ldr	r2, [r3, #20]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008f30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68da      	ldr	r2, [r3, #12]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2220      	movs	r2, #32
 8008f4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2220      	movs	r2, #32
 8008f54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008f58:	2300      	movs	r3, #0
}
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	3708      	adds	r7, #8
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}
	...

08008f64 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	4613      	mov	r3, r2
 8008f70:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b20      	cmp	r3, #32
 8008f7c:	d153      	bne.n	8009026 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d002      	beq.n	8008f8a <HAL_UART_Transmit_DMA+0x26>
 8008f84:	88fb      	ldrh	r3, [r7, #6]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d101      	bne.n	8008f8e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	e04c      	b.n	8009028 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d101      	bne.n	8008f9c <HAL_UART_Transmit_DMA+0x38>
 8008f98:	2302      	movs	r3, #2
 8008f9a:	e045      	b.n	8009028 <HAL_UART_Transmit_DMA+0xc4>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	88fa      	ldrh	r2, [r7, #6]
 8008fae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	88fa      	ldrh	r2, [r7, #6]
 8008fb4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2221      	movs	r2, #33	; 0x21
 8008fc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fc8:	4a19      	ldr	r2, [pc, #100]	; (8009030 <HAL_UART_Transmit_DMA+0xcc>)
 8008fca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd0:	4a18      	ldr	r2, [pc, #96]	; (8009034 <HAL_UART_Transmit_DMA+0xd0>)
 8008fd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd8:	4a17      	ldr	r2, [pc, #92]	; (8009038 <HAL_UART_Transmit_DMA+0xd4>)
 8008fda:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8008fe4:	f107 0308 	add.w	r3, r7, #8
 8008fe8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	6819      	ldr	r1, [r3, #0]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	3304      	adds	r3, #4
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	88fb      	ldrh	r3, [r7, #6]
 8008ffc:	f7fd fee2 	bl	8006dc4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009008:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	695a      	ldr	r2, [r3, #20]
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009020:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8009022:	2300      	movs	r3, #0
 8009024:	e000      	b.n	8009028 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8009026:	2302      	movs	r3, #2
  }
}
 8009028:	4618      	mov	r0, r3
 800902a:	3718      	adds	r7, #24
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	0800937d 	.word	0x0800937d
 8009034:	080093cf 	.word	0x080093cf
 8009038:	0800946f 	.word	0x0800946f

0800903c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	4613      	mov	r3, r2
 8009048:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009050:	b2db      	uxtb	r3, r3
 8009052:	2b20      	cmp	r3, #32
 8009054:	d166      	bne.n	8009124 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d002      	beq.n	8009062 <HAL_UART_Receive_DMA+0x26>
 800905c:	88fb      	ldrh	r3, [r7, #6]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d101      	bne.n	8009066 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8009062:	2301      	movs	r3, #1
 8009064:	e05f      	b.n	8009126 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800906c:	2b01      	cmp	r3, #1
 800906e:	d101      	bne.n	8009074 <HAL_UART_Receive_DMA+0x38>
 8009070:	2302      	movs	r3, #2
 8009072:	e058      	b.n	8009126 <HAL_UART_Receive_DMA+0xea>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2201      	movs	r2, #1
 8009078:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800907c:	68ba      	ldr	r2, [r7, #8]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	88fa      	ldrh	r2, [r7, #6]
 8009086:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	2200      	movs	r2, #0
 800908c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	2222      	movs	r2, #34	; 0x22
 8009092:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800909a:	4a25      	ldr	r2, [pc, #148]	; (8009130 <HAL_UART_Receive_DMA+0xf4>)
 800909c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090a2:	4a24      	ldr	r2, [pc, #144]	; (8009134 <HAL_UART_Receive_DMA+0xf8>)
 80090a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090aa:	4a23      	ldr	r2, [pc, #140]	; (8009138 <HAL_UART_Receive_DMA+0xfc>)
 80090ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090b2:	2200      	movs	r2, #0
 80090b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 80090b6:	f107 0308 	add.w	r3, r7, #8
 80090ba:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	3304      	adds	r3, #4
 80090c6:	4619      	mov	r1, r3
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	88fb      	ldrh	r3, [r7, #6]
 80090ce:	f7fd fe79 	bl	8006dc4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80090d2:	2300      	movs	r3, #0
 80090d4:	613b      	str	r3, [r7, #16]
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	613b      	str	r3, [r7, #16]
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	613b      	str	r3, [r7, #16]
 80090e6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	68da      	ldr	r2, [r3, #12]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090fe:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	695a      	ldr	r2, [r3, #20]
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f042 0201 	orr.w	r2, r2, #1
 800910e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	695a      	ldr	r2, [r3, #20]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800911e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8009120:	2300      	movs	r3, #0
 8009122:	e000      	b.n	8009126 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009124:	2302      	movs	r3, #2
  }
}
 8009126:	4618      	mov	r0, r3
 8009128:	3718      	adds	r7, #24
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	080093eb 	.word	0x080093eb
 8009134:	08009453 	.word	0x08009453
 8009138:	0800946f 	.word	0x0800946f

0800913c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b088      	sub	sp, #32
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	68db      	ldr	r3, [r3, #12]
 8009152:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800915c:	2300      	movs	r3, #0
 800915e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009160:	2300      	movs	r3, #0
 8009162:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009164:	69fb      	ldr	r3, [r7, #28]
 8009166:	f003 030f 	and.w	r3, r3, #15
 800916a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d10d      	bne.n	800918e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	f003 0320 	and.w	r3, r3, #32
 8009178:	2b00      	cmp	r3, #0
 800917a:	d008      	beq.n	800918e <HAL_UART_IRQHandler+0x52>
 800917c:	69bb      	ldr	r3, [r7, #24]
 800917e:	f003 0320 	and.w	r3, r3, #32
 8009182:	2b00      	cmp	r3, #0
 8009184:	d003      	beq.n	800918e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fa6e 	bl	8009668 <UART_Receive_IT>
      return;
 800918c:	e0cc      	b.n	8009328 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	2b00      	cmp	r3, #0
 8009192:	f000 80ab 	beq.w	80092ec <HAL_UART_IRQHandler+0x1b0>
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	f003 0301 	and.w	r3, r3, #1
 800919c:	2b00      	cmp	r3, #0
 800919e:	d105      	bne.n	80091ac <HAL_UART_IRQHandler+0x70>
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f000 80a0 	beq.w	80092ec <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80091ac:	69fb      	ldr	r3, [r7, #28]
 80091ae:	f003 0301 	and.w	r3, r3, #1
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00a      	beq.n	80091cc <HAL_UART_IRQHandler+0x90>
 80091b6:	69bb      	ldr	r3, [r7, #24]
 80091b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d005      	beq.n	80091cc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091c4:	f043 0201 	orr.w	r2, r3, #1
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	f003 0304 	and.w	r3, r3, #4
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d00a      	beq.n	80091ec <HAL_UART_IRQHandler+0xb0>
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	f003 0301 	and.w	r3, r3, #1
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d005      	beq.n	80091ec <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e4:	f043 0202 	orr.w	r2, r3, #2
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80091ec:	69fb      	ldr	r3, [r7, #28]
 80091ee:	f003 0302 	and.w	r3, r3, #2
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00a      	beq.n	800920c <HAL_UART_IRQHandler+0xd0>
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	f003 0301 	and.w	r3, r3, #1
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d005      	beq.n	800920c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009204:	f043 0204 	orr.w	r2, r3, #4
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800920c:	69fb      	ldr	r3, [r7, #28]
 800920e:	f003 0308 	and.w	r3, r3, #8
 8009212:	2b00      	cmp	r3, #0
 8009214:	d00a      	beq.n	800922c <HAL_UART_IRQHandler+0xf0>
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	f003 0301 	and.w	r3, r3, #1
 800921c:	2b00      	cmp	r3, #0
 800921e:	d005      	beq.n	800922c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009224:	f043 0208 	orr.w	r2, r3, #8
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009230:	2b00      	cmp	r3, #0
 8009232:	d078      	beq.n	8009326 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009234:	69fb      	ldr	r3, [r7, #28]
 8009236:	f003 0320 	and.w	r3, r3, #32
 800923a:	2b00      	cmp	r3, #0
 800923c:	d007      	beq.n	800924e <HAL_UART_IRQHandler+0x112>
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	f003 0320 	and.w	r3, r3, #32
 8009244:	2b00      	cmp	r3, #0
 8009246:	d002      	beq.n	800924e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 fa0d 	bl	8009668 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	695b      	ldr	r3, [r3, #20]
 8009254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009258:	2b00      	cmp	r3, #0
 800925a:	bf14      	ite	ne
 800925c:	2301      	movne	r3, #1
 800925e:	2300      	moveq	r3, #0
 8009260:	b2db      	uxtb	r3, r3
 8009262:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009268:	f003 0308 	and.w	r3, r3, #8
 800926c:	2b00      	cmp	r3, #0
 800926e:	d102      	bne.n	8009276 <HAL_UART_IRQHandler+0x13a>
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d031      	beq.n	80092da <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 f958 	bl	800952c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	695b      	ldr	r3, [r3, #20]
 8009282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009286:	2b00      	cmp	r3, #0
 8009288:	d023      	beq.n	80092d2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	695a      	ldr	r2, [r3, #20]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009298:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d013      	beq.n	80092ca <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a6:	4a22      	ldr	r2, [pc, #136]	; (8009330 <HAL_UART_IRQHandler+0x1f4>)
 80092a8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ae:	4618      	mov	r0, r3
 80092b0:	f7fd fde8 	bl	8006e84 <HAL_DMA_Abort_IT>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d016      	beq.n	80092e8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80092c4:	4610      	mov	r0, r2
 80092c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092c8:	e00e      	b.n	80092e8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f84d 	bl	800936a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092d0:	e00a      	b.n	80092e8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 f849 	bl	800936a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092d8:	e006      	b.n	80092e8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f845 	bl	800936a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2200      	movs	r2, #0
 80092e4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80092e6:	e01e      	b.n	8009326 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092e8:	bf00      	nop
    return;
 80092ea:	e01c      	b.n	8009326 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d008      	beq.n	8009308 <HAL_UART_IRQHandler+0x1cc>
 80092f6:	69bb      	ldr	r3, [r7, #24]
 80092f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d003      	beq.n	8009308 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 f944 	bl	800958e <UART_Transmit_IT>
    return;
 8009306:	e00f      	b.n	8009328 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009308:	69fb      	ldr	r3, [r7, #28]
 800930a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00a      	beq.n	8009328 <HAL_UART_IRQHandler+0x1ec>
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009318:	2b00      	cmp	r3, #0
 800931a:	d005      	beq.n	8009328 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f98b 	bl	8009638 <UART_EndTransmit_IT>
    return;
 8009322:	bf00      	nop
 8009324:	e000      	b.n	8009328 <HAL_UART_IRQHandler+0x1ec>
    return;
 8009326:	bf00      	nop
  }
}
 8009328:	3720      	adds	r7, #32
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	08009567 	.word	0x08009567

08009334 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	bc80      	pop	{r7}
 8009344:	4770      	bx	lr

08009346 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009346:	b480      	push	{r7}
 8009348:	b083      	sub	sp, #12
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800934e:	bf00      	nop
 8009350:	370c      	adds	r7, #12
 8009352:	46bd      	mov	sp, r7
 8009354:	bc80      	pop	{r7}
 8009356:	4770      	bx	lr

08009358 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009358:	b480      	push	{r7}
 800935a:	b083      	sub	sp, #12
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009360:	bf00      	nop
 8009362:	370c      	adds	r7, #12
 8009364:	46bd      	mov	sp, r7
 8009366:	bc80      	pop	{r7}
 8009368:	4770      	bx	lr

0800936a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800936a:	b480      	push	{r7}
 800936c:	b083      	sub	sp, #12
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009372:	bf00      	nop
 8009374:	370c      	adds	r7, #12
 8009376:	46bd      	mov	sp, r7
 8009378:	bc80      	pop	{r7}
 800937a:	4770      	bx	lr

0800937c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b084      	sub	sp, #16
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009388:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f003 0320 	and.w	r3, r3, #32
 8009394:	2b00      	cmp	r3, #0
 8009396:	d113      	bne.n	80093c0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2200      	movs	r2, #0
 800939c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	695a      	ldr	r2, [r3, #20]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80093ac:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	68da      	ldr	r2, [r3, #12]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093bc:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80093be:	e002      	b.n	80093c6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f7ff ffb7 	bl	8009334 <HAL_UART_TxCpltCallback>
}
 80093c6:	bf00      	nop
 80093c8:	3710      	adds	r7, #16
 80093ca:	46bd      	mov	sp, r7
 80093cc:	bd80      	pop	{r7, pc}

080093ce <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80093ce:	b580      	push	{r7, lr}
 80093d0:	b084      	sub	sp, #16
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093da:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	f7ff ffb2 	bl	8009346 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093e2:	bf00      	nop
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}

080093ea <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80093ea:	b580      	push	{r7, lr}
 80093ec:	b084      	sub	sp, #16
 80093ee:	af00      	add	r7, sp, #0
 80093f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f003 0320 	and.w	r3, r3, #32
 8009402:	2b00      	cmp	r3, #0
 8009404:	d11e      	bne.n	8009444 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2200      	movs	r2, #0
 800940a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68da      	ldr	r2, [r3, #12]
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800941a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	695a      	ldr	r2, [r3, #20]
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f022 0201 	bic.w	r2, r2, #1
 800942a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	695a      	ldr	r2, [r3, #20]
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800943a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2220      	movs	r2, #32
 8009440:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8009444:	68f8      	ldr	r0, [r7, #12]
 8009446:	f7f9 ffbf 	bl	80033c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800944a:	bf00      	nop
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009452:	b580      	push	{r7, lr}
 8009454:	b084      	sub	sp, #16
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8009460:	68f8      	ldr	r0, [r7, #12]
 8009462:	f7ff ff79 	bl	8009358 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009466:	bf00      	nop
 8009468:	3710      	adds	r7, #16
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}

0800946e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800946e:	b580      	push	{r7, lr}
 8009470:	b084      	sub	sp, #16
 8009472:	af00      	add	r7, sp, #0
 8009474:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009476:	2300      	movs	r3, #0
 8009478:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	695b      	ldr	r3, [r3, #20]
 8009486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800948a:	2b00      	cmp	r3, #0
 800948c:	bf14      	ite	ne
 800948e:	2301      	movne	r3, #1
 8009490:	2300      	moveq	r3, #0
 8009492:	b2db      	uxtb	r3, r3
 8009494:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800949c:	b2db      	uxtb	r3, r3
 800949e:	2b21      	cmp	r3, #33	; 0x21
 80094a0:	d108      	bne.n	80094b4 <UART_DMAError+0x46>
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d005      	beq.n	80094b4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	2200      	movs	r2, #0
 80094ac:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80094ae:	68b8      	ldr	r0, [r7, #8]
 80094b0:	f000 f827 	bl	8009502 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	695b      	ldr	r3, [r3, #20]
 80094ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094be:	2b00      	cmp	r3, #0
 80094c0:	bf14      	ite	ne
 80094c2:	2301      	movne	r3, #1
 80094c4:	2300      	moveq	r3, #0
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	2b22      	cmp	r3, #34	; 0x22
 80094d4:	d108      	bne.n	80094e8 <UART_DMAError+0x7a>
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d005      	beq.n	80094e8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	2200      	movs	r2, #0
 80094e0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80094e2:	68b8      	ldr	r0, [r7, #8]
 80094e4:	f000 f822 	bl	800952c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094ec:	f043 0210 	orr.w	r2, r3, #16
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094f4:	68b8      	ldr	r0, [r7, #8]
 80094f6:	f7ff ff38 	bl	800936a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094fa:	bf00      	nop
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009502:	b480      	push	{r7}
 8009504:	b083      	sub	sp, #12
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68da      	ldr	r2, [r3, #12]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009518:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2220      	movs	r2, #32
 800951e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8009522:	bf00      	nop
 8009524:	370c      	adds	r7, #12
 8009526:	46bd      	mov	sp, r7
 8009528:	bc80      	pop	{r7}
 800952a:	4770      	bx	lr

0800952c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	68da      	ldr	r2, [r3, #12]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009542:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	695a      	ldr	r2, [r3, #20]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	f022 0201 	bic.w	r2, r2, #1
 8009552:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2220      	movs	r2, #32
 8009558:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800955c:	bf00      	nop
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	bc80      	pop	{r7}
 8009564:	4770      	bx	lr

08009566 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009566:	b580      	push	{r7, lr}
 8009568:	b084      	sub	sp, #16
 800956a:	af00      	add	r7, sp, #0
 800956c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009572:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2200      	movs	r2, #0
 8009578:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f7ff fef2 	bl	800936a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009586:	bf00      	nop
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800958e:	b480      	push	{r7}
 8009590:	b085      	sub	sp, #20
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800959c:	b2db      	uxtb	r3, r3
 800959e:	2b21      	cmp	r3, #33	; 0x21
 80095a0:	d144      	bne.n	800962c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095aa:	d11a      	bne.n	80095e2 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6a1b      	ldr	r3, [r3, #32]
 80095b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	881b      	ldrh	r3, [r3, #0]
 80095b6:	461a      	mov	r2, r3
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095c0:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	691b      	ldr	r3, [r3, #16]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d105      	bne.n	80095d6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a1b      	ldr	r3, [r3, #32]
 80095ce:	1c9a      	adds	r2, r3, #2
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	621a      	str	r2, [r3, #32]
 80095d4:	e00e      	b.n	80095f4 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a1b      	ldr	r3, [r3, #32]
 80095da:	1c5a      	adds	r2, r3, #1
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	621a      	str	r2, [r3, #32]
 80095e0:	e008      	b.n	80095f4 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a1b      	ldr	r3, [r3, #32]
 80095e6:	1c59      	adds	r1, r3, #1
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	6211      	str	r1, [r2, #32]
 80095ec:	781a      	ldrb	r2, [r3, #0]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	3b01      	subs	r3, #1
 80095fc:	b29b      	uxth	r3, r3
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	4619      	mov	r1, r3
 8009602:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009604:	2b00      	cmp	r3, #0
 8009606:	d10f      	bne.n	8009628 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	68da      	ldr	r2, [r3, #12]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009616:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	68da      	ldr	r2, [r3, #12]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009626:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009628:	2300      	movs	r3, #0
 800962a:	e000      	b.n	800962e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800962c:	2302      	movs	r3, #2
  }
}
 800962e:	4618      	mov	r0, r3
 8009630:	3714      	adds	r7, #20
 8009632:	46bd      	mov	sp, r7
 8009634:	bc80      	pop	{r7}
 8009636:	4770      	bx	lr

08009638 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68da      	ldr	r2, [r3, #12]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800964e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2220      	movs	r2, #32
 8009654:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f7ff fe6b 	bl	8009334 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800965e:	2300      	movs	r3, #0
}
 8009660:	4618      	mov	r0, r3
 8009662:	3708      	adds	r7, #8
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009676:	b2db      	uxtb	r3, r3
 8009678:	2b22      	cmp	r3, #34	; 0x22
 800967a:	d171      	bne.n	8009760 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009684:	d123      	bne.n	80096ce <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800968a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	691b      	ldr	r3, [r3, #16]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d10e      	bne.n	80096b2 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	b29b      	uxth	r3, r3
 800969c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096a0:	b29a      	uxth	r2, r3
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096aa:	1c9a      	adds	r2, r3, #2
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	629a      	str	r2, [r3, #40]	; 0x28
 80096b0:	e029      	b.n	8009706 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	b29b      	uxth	r3, r3
 80096ba:	b2db      	uxtb	r3, r3
 80096bc:	b29a      	uxth	r2, r3
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c6:	1c5a      	adds	r2, r3, #1
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	629a      	str	r2, [r3, #40]	; 0x28
 80096cc:	e01b      	b.n	8009706 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	691b      	ldr	r3, [r3, #16]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d10a      	bne.n	80096ec <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	6858      	ldr	r0, [r3, #4]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096e0:	1c59      	adds	r1, r3, #1
 80096e2:	687a      	ldr	r2, [r7, #4]
 80096e4:	6291      	str	r1, [r2, #40]	; 0x28
 80096e6:	b2c2      	uxtb	r2, r0
 80096e8:	701a      	strb	r2, [r3, #0]
 80096ea:	e00c      	b.n	8009706 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	b2da      	uxtb	r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096f8:	1c58      	adds	r0, r3, #1
 80096fa:	6879      	ldr	r1, [r7, #4]
 80096fc:	6288      	str	r0, [r1, #40]	; 0x28
 80096fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009702:	b2d2      	uxtb	r2, r2
 8009704:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800970a:	b29b      	uxth	r3, r3
 800970c:	3b01      	subs	r3, #1
 800970e:	b29b      	uxth	r3, r3
 8009710:	687a      	ldr	r2, [r7, #4]
 8009712:	4619      	mov	r1, r3
 8009714:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009716:	2b00      	cmp	r3, #0
 8009718:	d120      	bne.n	800975c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68da      	ldr	r2, [r3, #12]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f022 0220 	bic.w	r2, r2, #32
 8009728:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	68da      	ldr	r2, [r3, #12]
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009738:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	695a      	ldr	r2, [r3, #20]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f022 0201 	bic.w	r2, r2, #1
 8009748:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2220      	movs	r2, #32
 800974e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f7f9 fe38 	bl	80033c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009758:	2300      	movs	r3, #0
 800975a:	e002      	b.n	8009762 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	e000      	b.n	8009762 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009760:	2302      	movs	r3, #2
  }
}
 8009762:	4618      	mov	r0, r3
 8009764:	3710      	adds	r7, #16
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}
	...

0800976c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b084      	sub	sp, #16
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	691b      	ldr	r3, [r3, #16]
 800977a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	68da      	ldr	r2, [r3, #12]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	430a      	orrs	r2, r1
 8009788:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	689a      	ldr	r2, [r3, #8]
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	431a      	orrs	r2, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	695b      	ldr	r3, [r3, #20]
 8009798:	4313      	orrs	r3, r2
 800979a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80097a6:	f023 030c 	bic.w	r3, r3, #12
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	6812      	ldr	r2, [r2, #0]
 80097ae:	68f9      	ldr	r1, [r7, #12]
 80097b0:	430b      	orrs	r3, r1
 80097b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	695b      	ldr	r3, [r3, #20]
 80097ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	699a      	ldr	r2, [r3, #24]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	430a      	orrs	r2, r1
 80097c8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a52      	ldr	r2, [pc, #328]	; (8009918 <UART_SetConfig+0x1ac>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d14e      	bne.n	8009872 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80097d4:	f7ff fb46 	bl	8008e64 <HAL_RCC_GetPCLK2Freq>
 80097d8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097da:	68ba      	ldr	r2, [r7, #8]
 80097dc:	4613      	mov	r3, r2
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4413      	add	r3, r2
 80097e2:	009a      	lsls	r2, r3, #2
 80097e4:	441a      	add	r2, r3
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	685b      	ldr	r3, [r3, #4]
 80097ea:	009b      	lsls	r3, r3, #2
 80097ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80097f0:	4a4a      	ldr	r2, [pc, #296]	; (800991c <UART_SetConfig+0x1b0>)
 80097f2:	fba2 2303 	umull	r2, r3, r2, r3
 80097f6:	095b      	lsrs	r3, r3, #5
 80097f8:	0119      	lsls	r1, r3, #4
 80097fa:	68ba      	ldr	r2, [r7, #8]
 80097fc:	4613      	mov	r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	4413      	add	r3, r2
 8009802:	009a      	lsls	r2, r3, #2
 8009804:	441a      	add	r2, r3
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009810:	4b42      	ldr	r3, [pc, #264]	; (800991c <UART_SetConfig+0x1b0>)
 8009812:	fba3 0302 	umull	r0, r3, r3, r2
 8009816:	095b      	lsrs	r3, r3, #5
 8009818:	2064      	movs	r0, #100	; 0x64
 800981a:	fb00 f303 	mul.w	r3, r0, r3
 800981e:	1ad3      	subs	r3, r2, r3
 8009820:	011b      	lsls	r3, r3, #4
 8009822:	3332      	adds	r3, #50	; 0x32
 8009824:	4a3d      	ldr	r2, [pc, #244]	; (800991c <UART_SetConfig+0x1b0>)
 8009826:	fba2 2303 	umull	r2, r3, r2, r3
 800982a:	095b      	lsrs	r3, r3, #5
 800982c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009830:	4419      	add	r1, r3
 8009832:	68ba      	ldr	r2, [r7, #8]
 8009834:	4613      	mov	r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	4413      	add	r3, r2
 800983a:	009a      	lsls	r2, r3, #2
 800983c:	441a      	add	r2, r3
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	fbb2 f2f3 	udiv	r2, r2, r3
 8009848:	4b34      	ldr	r3, [pc, #208]	; (800991c <UART_SetConfig+0x1b0>)
 800984a:	fba3 0302 	umull	r0, r3, r3, r2
 800984e:	095b      	lsrs	r3, r3, #5
 8009850:	2064      	movs	r0, #100	; 0x64
 8009852:	fb00 f303 	mul.w	r3, r0, r3
 8009856:	1ad3      	subs	r3, r2, r3
 8009858:	011b      	lsls	r3, r3, #4
 800985a:	3332      	adds	r3, #50	; 0x32
 800985c:	4a2f      	ldr	r2, [pc, #188]	; (800991c <UART_SetConfig+0x1b0>)
 800985e:	fba2 2303 	umull	r2, r3, r2, r3
 8009862:	095b      	lsrs	r3, r3, #5
 8009864:	f003 020f 	and.w	r2, r3, #15
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	440a      	add	r2, r1
 800986e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8009870:	e04d      	b.n	800990e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8009872:	f7ff fae3 	bl	8008e3c <HAL_RCC_GetPCLK1Freq>
 8009876:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009878:	68ba      	ldr	r2, [r7, #8]
 800987a:	4613      	mov	r3, r2
 800987c:	009b      	lsls	r3, r3, #2
 800987e:	4413      	add	r3, r2
 8009880:	009a      	lsls	r2, r3, #2
 8009882:	441a      	add	r2, r3
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	fbb2 f3f3 	udiv	r3, r2, r3
 800988e:	4a23      	ldr	r2, [pc, #140]	; (800991c <UART_SetConfig+0x1b0>)
 8009890:	fba2 2303 	umull	r2, r3, r2, r3
 8009894:	095b      	lsrs	r3, r3, #5
 8009896:	0119      	lsls	r1, r3, #4
 8009898:	68ba      	ldr	r2, [r7, #8]
 800989a:	4613      	mov	r3, r2
 800989c:	009b      	lsls	r3, r3, #2
 800989e:	4413      	add	r3, r2
 80098a0:	009a      	lsls	r2, r3, #2
 80098a2:	441a      	add	r2, r3
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80098ae:	4b1b      	ldr	r3, [pc, #108]	; (800991c <UART_SetConfig+0x1b0>)
 80098b0:	fba3 0302 	umull	r0, r3, r3, r2
 80098b4:	095b      	lsrs	r3, r3, #5
 80098b6:	2064      	movs	r0, #100	; 0x64
 80098b8:	fb00 f303 	mul.w	r3, r0, r3
 80098bc:	1ad3      	subs	r3, r2, r3
 80098be:	011b      	lsls	r3, r3, #4
 80098c0:	3332      	adds	r3, #50	; 0x32
 80098c2:	4a16      	ldr	r2, [pc, #88]	; (800991c <UART_SetConfig+0x1b0>)
 80098c4:	fba2 2303 	umull	r2, r3, r2, r3
 80098c8:	095b      	lsrs	r3, r3, #5
 80098ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80098ce:	4419      	add	r1, r3
 80098d0:	68ba      	ldr	r2, [r7, #8]
 80098d2:	4613      	mov	r3, r2
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	4413      	add	r3, r2
 80098d8:	009a      	lsls	r2, r3, #2
 80098da:	441a      	add	r2, r3
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	009b      	lsls	r3, r3, #2
 80098e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80098e6:	4b0d      	ldr	r3, [pc, #52]	; (800991c <UART_SetConfig+0x1b0>)
 80098e8:	fba3 0302 	umull	r0, r3, r3, r2
 80098ec:	095b      	lsrs	r3, r3, #5
 80098ee:	2064      	movs	r0, #100	; 0x64
 80098f0:	fb00 f303 	mul.w	r3, r0, r3
 80098f4:	1ad3      	subs	r3, r2, r3
 80098f6:	011b      	lsls	r3, r3, #4
 80098f8:	3332      	adds	r3, #50	; 0x32
 80098fa:	4a08      	ldr	r2, [pc, #32]	; (800991c <UART_SetConfig+0x1b0>)
 80098fc:	fba2 2303 	umull	r2, r3, r2, r3
 8009900:	095b      	lsrs	r3, r3, #5
 8009902:	f003 020f 	and.w	r2, r3, #15
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	440a      	add	r2, r1
 800990c:	609a      	str	r2, [r3, #8]
}
 800990e:	bf00      	nop
 8009910:	3710      	adds	r7, #16
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	40013800 	.word	0x40013800
 800991c:	51eb851f 	.word	0x51eb851f

08009920 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009920:	b480      	push	{r7}
 8009922:	b085      	sub	sp, #20
 8009924:	af00      	add	r7, sp, #0
 8009926:	4603      	mov	r3, r0
 8009928:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800992a:	2300      	movs	r3, #0
 800992c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800992e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009932:	2b84      	cmp	r3, #132	; 0x84
 8009934:	d005      	beq.n	8009942 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009936:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	4413      	add	r3, r2
 800993e:	3303      	adds	r3, #3
 8009940:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009942:	68fb      	ldr	r3, [r7, #12]
}
 8009944:	4618      	mov	r0, r3
 8009946:	3714      	adds	r7, #20
 8009948:	46bd      	mov	sp, r7
 800994a:	bc80      	pop	{r7}
 800994c:	4770      	bx	lr

0800994e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009952:	f000 facd 	bl	8009ef0 <vTaskStartScheduler>
  
  return osOK;
 8009956:	2300      	movs	r3, #0
}
 8009958:	4618      	mov	r0, r3
 800995a:	bd80      	pop	{r7, pc}

0800995c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800995c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800995e:	b089      	sub	sp, #36	; 0x24
 8009960:	af04      	add	r7, sp, #16
 8009962:	6078      	str	r0, [r7, #4]
 8009964:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	2b00      	cmp	r3, #0
 800996c:	d020      	beq.n	80099b0 <osThreadCreate+0x54>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	699b      	ldr	r3, [r3, #24]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d01c      	beq.n	80099b0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	685c      	ldr	r4, [r3, #4]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681d      	ldr	r5, [r3, #0]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	691e      	ldr	r6, [r3, #16]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009988:	4618      	mov	r0, r3
 800998a:	f7ff ffc9 	bl	8009920 <makeFreeRtosPriority>
 800998e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	695b      	ldr	r3, [r3, #20]
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009998:	9202      	str	r2, [sp, #8]
 800999a:	9301      	str	r3, [sp, #4]
 800999c:	9100      	str	r1, [sp, #0]
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	4632      	mov	r2, r6
 80099a2:	4629      	mov	r1, r5
 80099a4:	4620      	mov	r0, r4
 80099a6:	f000 f8e8 	bl	8009b7a <xTaskCreateStatic>
 80099aa:	4603      	mov	r3, r0
 80099ac:	60fb      	str	r3, [r7, #12]
 80099ae:	e01c      	b.n	80099ea <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685c      	ldr	r4, [r3, #4]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80099bc:	b29e      	uxth	r6, r3
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80099c4:	4618      	mov	r0, r3
 80099c6:	f7ff ffab 	bl	8009920 <makeFreeRtosPriority>
 80099ca:	4602      	mov	r2, r0
 80099cc:	f107 030c 	add.w	r3, r7, #12
 80099d0:	9301      	str	r3, [sp, #4]
 80099d2:	9200      	str	r2, [sp, #0]
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	4632      	mov	r2, r6
 80099d8:	4629      	mov	r1, r5
 80099da:	4620      	mov	r0, r4
 80099dc:	f000 f926 	bl	8009c2c <xTaskCreate>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	d001      	beq.n	80099ea <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80099e6:	2300      	movs	r3, #0
 80099e8:	e000      	b.n	80099ec <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80099ea:	68fb      	ldr	r3, [r7, #12]
}
 80099ec:	4618      	mov	r0, r3
 80099ee:	3714      	adds	r7, #20
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080099f4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	b084      	sub	sp, #16
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d001      	beq.n	8009a0a <osDelay+0x16>
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	e000      	b.n	8009a0c <osDelay+0x18>
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f000 fa3b 	bl	8009e88 <vTaskDelay>
  
  return osOK;
 8009a12:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3710      	adds	r7, #16
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b083      	sub	sp, #12
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f103 0208 	add.w	r2, r3, #8
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f103 0208 	add.w	r2, r3, #8
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f103 0208 	add.w	r2, r3, #8
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009a50:	bf00      	nop
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bc80      	pop	{r7}
 8009a58:	4770      	bx	lr

08009a5a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009a5a:	b480      	push	{r7}
 8009a5c:	b083      	sub	sp, #12
 8009a5e:	af00      	add	r7, sp, #0
 8009a60:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009a68:	bf00      	nop
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bc80      	pop	{r7}
 8009a70:	4770      	bx	lr

08009a72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009a72:	b480      	push	{r7}
 8009a74:	b085      	sub	sp, #20
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
 8009a7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	68fa      	ldr	r2, [r7, #12]
 8009a86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	689a      	ldr	r2, [r3, #8]
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	683a      	ldr	r2, [r7, #0]
 8009a96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	683a      	ldr	r2, [r7, #0]
 8009a9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009a9e:	683b      	ldr	r3, [r7, #0]
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	1c5a      	adds	r2, r3, #1
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	601a      	str	r2, [r3, #0]
}
 8009aae:	bf00      	nop
 8009ab0:	3714      	adds	r7, #20
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bc80      	pop	{r7}
 8009ab6:	4770      	bx	lr

08009ab8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b085      	sub	sp, #20
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009ac8:	68bb      	ldr	r3, [r7, #8]
 8009aca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ace:	d103      	bne.n	8009ad8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	691b      	ldr	r3, [r3, #16]
 8009ad4:	60fb      	str	r3, [r7, #12]
 8009ad6:	e00c      	b.n	8009af2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	3308      	adds	r3, #8
 8009adc:	60fb      	str	r3, [r7, #12]
 8009ade:	e002      	b.n	8009ae6 <vListInsert+0x2e>
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	685b      	ldr	r3, [r3, #4]
 8009ae4:	60fb      	str	r3, [r7, #12]
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	68ba      	ldr	r2, [r7, #8]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d2f6      	bcs.n	8009ae0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	685a      	ldr	r2, [r3, #4]
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	683a      	ldr	r2, [r7, #0]
 8009b00:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	683a      	ldr	r2, [r7, #0]
 8009b0c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	1c5a      	adds	r2, r3, #1
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	601a      	str	r2, [r3, #0]
}
 8009b1e:	bf00      	nop
 8009b20:	3714      	adds	r7, #20
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bc80      	pop	{r7}
 8009b26:	4770      	bx	lr

08009b28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b085      	sub	sp, #20
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	6892      	ldr	r2, [r2, #8]
 8009b3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	689b      	ldr	r3, [r3, #8]
 8009b44:	687a      	ldr	r2, [r7, #4]
 8009b46:	6852      	ldr	r2, [r2, #4]
 8009b48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d103      	bne.n	8009b5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	689a      	ldr	r2, [r3, #8]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	1e5a      	subs	r2, r3, #1
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3714      	adds	r7, #20
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bc80      	pop	{r7}
 8009b78:	4770      	bx	lr

08009b7a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009b7a:	b580      	push	{r7, lr}
 8009b7c:	b08e      	sub	sp, #56	; 0x38
 8009b7e:	af04      	add	r7, sp, #16
 8009b80:	60f8      	str	r0, [r7, #12]
 8009b82:	60b9      	str	r1, [r7, #8]
 8009b84:	607a      	str	r2, [r7, #4]
 8009b86:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d109      	bne.n	8009ba2 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b92:	f383 8811 	msr	BASEPRI, r3
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	623b      	str	r3, [r7, #32]
 8009ba0:	e7fe      	b.n	8009ba0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d109      	bne.n	8009bbc <xTaskCreateStatic+0x42>
 8009ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bac:	f383 8811 	msr	BASEPRI, r3
 8009bb0:	f3bf 8f6f 	isb	sy
 8009bb4:	f3bf 8f4f 	dsb	sy
 8009bb8:	61fb      	str	r3, [r7, #28]
 8009bba:	e7fe      	b.n	8009bba <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009bbc:	2354      	movs	r3, #84	; 0x54
 8009bbe:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	2b54      	cmp	r3, #84	; 0x54
 8009bc4:	d009      	beq.n	8009bda <xTaskCreateStatic+0x60>
 8009bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bca:	f383 8811 	msr	BASEPRI, r3
 8009bce:	f3bf 8f6f 	isb	sy
 8009bd2:	f3bf 8f4f 	dsb	sy
 8009bd6:	61bb      	str	r3, [r7, #24]
 8009bd8:	e7fe      	b.n	8009bd8 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d01e      	beq.n	8009c1e <xTaskCreateStatic+0xa4>
 8009be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d01b      	beq.n	8009c1e <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009be8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009bee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf2:	2202      	movs	r2, #2
 8009bf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	9303      	str	r3, [sp, #12]
 8009bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfe:	9302      	str	r3, [sp, #8]
 8009c00:	f107 0314 	add.w	r3, r7, #20
 8009c04:	9301      	str	r3, [sp, #4]
 8009c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c08:	9300      	str	r3, [sp, #0]
 8009c0a:	683b      	ldr	r3, [r7, #0]
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	68b9      	ldr	r1, [r7, #8]
 8009c10:	68f8      	ldr	r0, [r7, #12]
 8009c12:	f000 f850 	bl	8009cb6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c16:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009c18:	f000 f8cc 	bl	8009db4 <prvAddNewTaskToReadyList>
 8009c1c:	e001      	b.n	8009c22 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009c22:	697b      	ldr	r3, [r7, #20]
	}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3728      	adds	r7, #40	; 0x28
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b08c      	sub	sp, #48	; 0x30
 8009c30:	af04      	add	r7, sp, #16
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	603b      	str	r3, [r7, #0]
 8009c38:	4613      	mov	r3, r2
 8009c3a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c3c:	88fb      	ldrh	r3, [r7, #6]
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	4618      	mov	r0, r3
 8009c42:	f000 fe73 	bl	800a92c <pvPortMalloc>
 8009c46:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00e      	beq.n	8009c6c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009c4e:	2054      	movs	r0, #84	; 0x54
 8009c50:	f000 fe6c 	bl	800a92c <pvPortMalloc>
 8009c54:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d003      	beq.n	8009c64 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009c5c:	69fb      	ldr	r3, [r7, #28]
 8009c5e:	697a      	ldr	r2, [r7, #20]
 8009c60:	631a      	str	r2, [r3, #48]	; 0x30
 8009c62:	e005      	b.n	8009c70 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009c64:	6978      	ldr	r0, [r7, #20]
 8009c66:	f000 ff23 	bl	800aab0 <vPortFree>
 8009c6a:	e001      	b.n	8009c70 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d017      	beq.n	8009ca6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009c7e:	88fa      	ldrh	r2, [r7, #6]
 8009c80:	2300      	movs	r3, #0
 8009c82:	9303      	str	r3, [sp, #12]
 8009c84:	69fb      	ldr	r3, [r7, #28]
 8009c86:	9302      	str	r3, [sp, #8]
 8009c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8a:	9301      	str	r3, [sp, #4]
 8009c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8e:	9300      	str	r3, [sp, #0]
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	68b9      	ldr	r1, [r7, #8]
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f000 f80e 	bl	8009cb6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009c9a:	69f8      	ldr	r0, [r7, #28]
 8009c9c:	f000 f88a 	bl	8009db4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	61bb      	str	r3, [r7, #24]
 8009ca4:	e002      	b.n	8009cac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ca6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009caa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009cac:	69bb      	ldr	r3, [r7, #24]
	}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3720      	adds	r7, #32
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b088      	sub	sp, #32
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	60f8      	str	r0, [r7, #12]
 8009cbe:	60b9      	str	r1, [r7, #8]
 8009cc0:	607a      	str	r2, [r7, #4]
 8009cc2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009cce:	3b01      	subs	r3, #1
 8009cd0:	009b      	lsls	r3, r3, #2
 8009cd2:	4413      	add	r3, r2
 8009cd4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	f023 0307 	bic.w	r3, r3, #7
 8009cdc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	f003 0307 	and.w	r3, r3, #7
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d009      	beq.n	8009cfc <prvInitialiseNewTask+0x46>
 8009ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cec:	f383 8811 	msr	BASEPRI, r3
 8009cf0:	f3bf 8f6f 	isb	sy
 8009cf4:	f3bf 8f4f 	dsb	sy
 8009cf8:	617b      	str	r3, [r7, #20]
 8009cfa:	e7fe      	b.n	8009cfa <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	61fb      	str	r3, [r7, #28]
 8009d00:	e012      	b.n	8009d28 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009d02:	68ba      	ldr	r2, [r7, #8]
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	4413      	add	r3, r2
 8009d08:	7819      	ldrb	r1, [r3, #0]
 8009d0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d0c:	69fb      	ldr	r3, [r7, #28]
 8009d0e:	4413      	add	r3, r2
 8009d10:	3334      	adds	r3, #52	; 0x34
 8009d12:	460a      	mov	r2, r1
 8009d14:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009d16:	68ba      	ldr	r2, [r7, #8]
 8009d18:	69fb      	ldr	r3, [r7, #28]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d006      	beq.n	8009d30 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d22:	69fb      	ldr	r3, [r7, #28]
 8009d24:	3301      	adds	r3, #1
 8009d26:	61fb      	str	r3, [r7, #28]
 8009d28:	69fb      	ldr	r3, [r7, #28]
 8009d2a:	2b0f      	cmp	r3, #15
 8009d2c:	d9e9      	bls.n	8009d02 <prvInitialiseNewTask+0x4c>
 8009d2e:	e000      	b.n	8009d32 <prvInitialiseNewTask+0x7c>
		{
			break;
 8009d30:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d34:	2200      	movs	r2, #0
 8009d36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d3c:	2b06      	cmp	r3, #6
 8009d3e:	d901      	bls.n	8009d44 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009d40:	2306      	movs	r3, #6
 8009d42:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d48:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d4e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d52:	2200      	movs	r2, #0
 8009d54:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d58:	3304      	adds	r3, #4
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f7ff fe7d 	bl	8009a5a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d62:	3318      	adds	r3, #24
 8009d64:	4618      	mov	r0, r3
 8009d66:	f7ff fe78 	bl	8009a5a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d6e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d72:	f1c3 0207 	rsb	r2, r3, #7
 8009d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d78:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d7e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d82:	2200      	movs	r2, #0
 8009d84:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009d8e:	683a      	ldr	r2, [r7, #0]
 8009d90:	68f9      	ldr	r1, [r7, #12]
 8009d92:	69b8      	ldr	r0, [r7, #24]
 8009d94:	f000 fc24 	bl	800a5e0 <pxPortInitialiseStack>
 8009d98:	4602      	mov	r2, r0
 8009d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d9c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8009d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d002      	beq.n	8009daa <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009da8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009daa:	bf00      	nop
 8009dac:	3720      	adds	r7, #32
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
	...

08009db4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009dbc:	f000 fcfc 	bl	800a7b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009dc0:	4b2a      	ldr	r3, [pc, #168]	; (8009e6c <prvAddNewTaskToReadyList+0xb8>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	4a29      	ldr	r2, [pc, #164]	; (8009e6c <prvAddNewTaskToReadyList+0xb8>)
 8009dc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009dca:	4b29      	ldr	r3, [pc, #164]	; (8009e70 <prvAddNewTaskToReadyList+0xbc>)
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d109      	bne.n	8009de6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009dd2:	4a27      	ldr	r2, [pc, #156]	; (8009e70 <prvAddNewTaskToReadyList+0xbc>)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009dd8:	4b24      	ldr	r3, [pc, #144]	; (8009e6c <prvAddNewTaskToReadyList+0xb8>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b01      	cmp	r3, #1
 8009dde:	d110      	bne.n	8009e02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009de0:	f000 fabc 	bl	800a35c <prvInitialiseTaskLists>
 8009de4:	e00d      	b.n	8009e02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009de6:	4b23      	ldr	r3, [pc, #140]	; (8009e74 <prvAddNewTaskToReadyList+0xc0>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d109      	bne.n	8009e02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009dee:	4b20      	ldr	r3, [pc, #128]	; (8009e70 <prvAddNewTaskToReadyList+0xbc>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df8:	429a      	cmp	r2, r3
 8009dfa:	d802      	bhi.n	8009e02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009dfc:	4a1c      	ldr	r2, [pc, #112]	; (8009e70 <prvAddNewTaskToReadyList+0xbc>)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009e02:	4b1d      	ldr	r3, [pc, #116]	; (8009e78 <prvAddNewTaskToReadyList+0xc4>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	3301      	adds	r3, #1
 8009e08:	4a1b      	ldr	r2, [pc, #108]	; (8009e78 <prvAddNewTaskToReadyList+0xc4>)
 8009e0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e10:	2201      	movs	r2, #1
 8009e12:	409a      	lsls	r2, r3
 8009e14:	4b19      	ldr	r3, [pc, #100]	; (8009e7c <prvAddNewTaskToReadyList+0xc8>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	4a18      	ldr	r2, [pc, #96]	; (8009e7c <prvAddNewTaskToReadyList+0xc8>)
 8009e1c:	6013      	str	r3, [r2, #0]
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e22:	4613      	mov	r3, r2
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	4413      	add	r3, r2
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	4a15      	ldr	r2, [pc, #84]	; (8009e80 <prvAddNewTaskToReadyList+0xcc>)
 8009e2c:	441a      	add	r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	3304      	adds	r3, #4
 8009e32:	4619      	mov	r1, r3
 8009e34:	4610      	mov	r0, r2
 8009e36:	f7ff fe1c 	bl	8009a72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009e3a:	f000 fceb 	bl	800a814 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009e3e:	4b0d      	ldr	r3, [pc, #52]	; (8009e74 <prvAddNewTaskToReadyList+0xc0>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00e      	beq.n	8009e64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009e46:	4b0a      	ldr	r3, [pc, #40]	; (8009e70 <prvAddNewTaskToReadyList+0xbc>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d207      	bcs.n	8009e64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009e54:	4b0b      	ldr	r3, [pc, #44]	; (8009e84 <prvAddNewTaskToReadyList+0xd0>)
 8009e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e5a:	601a      	str	r2, [r3, #0]
 8009e5c:	f3bf 8f4f 	dsb	sy
 8009e60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e64:	bf00      	nop
 8009e66:	3708      	adds	r7, #8
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}
 8009e6c:	200004d8 	.word	0x200004d8
 8009e70:	200003d8 	.word	0x200003d8
 8009e74:	200004e4 	.word	0x200004e4
 8009e78:	200004f4 	.word	0x200004f4
 8009e7c:	200004e0 	.word	0x200004e0
 8009e80:	200003dc 	.word	0x200003dc
 8009e84:	e000ed04 	.word	0xe000ed04

08009e88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009e90:	2300      	movs	r3, #0
 8009e92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d016      	beq.n	8009ec8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009e9a:	4b13      	ldr	r3, [pc, #76]	; (8009ee8 <vTaskDelay+0x60>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d009      	beq.n	8009eb6 <vTaskDelay+0x2e>
 8009ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ea6:	f383 8811 	msr	BASEPRI, r3
 8009eaa:	f3bf 8f6f 	isb	sy
 8009eae:	f3bf 8f4f 	dsb	sy
 8009eb2:	60bb      	str	r3, [r7, #8]
 8009eb4:	e7fe      	b.n	8009eb4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009eb6:	f000 f879 	bl	8009fac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009eba:	2100      	movs	r1, #0
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 fb29 	bl	800a514 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009ec2:	f000 f881 	bl	8009fc8 <xTaskResumeAll>
 8009ec6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d107      	bne.n	8009ede <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8009ece:	4b07      	ldr	r3, [pc, #28]	; (8009eec <vTaskDelay+0x64>)
 8009ed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ed4:	601a      	str	r2, [r3, #0]
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ede:	bf00      	nop
 8009ee0:	3710      	adds	r7, #16
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	20000500 	.word	0x20000500
 8009eec:	e000ed04 	.word	0xe000ed04

08009ef0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b08a      	sub	sp, #40	; 0x28
 8009ef4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009efa:	2300      	movs	r3, #0
 8009efc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009efe:	463a      	mov	r2, r7
 8009f00:	1d39      	adds	r1, r7, #4
 8009f02:	f107 0308 	add.w	r3, r7, #8
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7f8 ff5a 	bl	8002dc0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009f0c:	6839      	ldr	r1, [r7, #0]
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	9202      	str	r2, [sp, #8]
 8009f14:	9301      	str	r3, [sp, #4]
 8009f16:	2300      	movs	r3, #0
 8009f18:	9300      	str	r3, [sp, #0]
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	460a      	mov	r2, r1
 8009f1e:	491d      	ldr	r1, [pc, #116]	; (8009f94 <vTaskStartScheduler+0xa4>)
 8009f20:	481d      	ldr	r0, [pc, #116]	; (8009f98 <vTaskStartScheduler+0xa8>)
 8009f22:	f7ff fe2a 	bl	8009b7a <xTaskCreateStatic>
 8009f26:	4602      	mov	r2, r0
 8009f28:	4b1c      	ldr	r3, [pc, #112]	; (8009f9c <vTaskStartScheduler+0xac>)
 8009f2a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009f2c:	4b1b      	ldr	r3, [pc, #108]	; (8009f9c <vTaskStartScheduler+0xac>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d002      	beq.n	8009f3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009f34:	2301      	movs	r3, #1
 8009f36:	617b      	str	r3, [r7, #20]
 8009f38:	e001      	b.n	8009f3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009f3e:	697b      	ldr	r3, [r7, #20]
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d115      	bne.n	8009f70 <vTaskStartScheduler+0x80>
 8009f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f48:	f383 8811 	msr	BASEPRI, r3
 8009f4c:	f3bf 8f6f 	isb	sy
 8009f50:	f3bf 8f4f 	dsb	sy
 8009f54:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009f56:	4b12      	ldr	r3, [pc, #72]	; (8009fa0 <vTaskStartScheduler+0xb0>)
 8009f58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f5c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009f5e:	4b11      	ldr	r3, [pc, #68]	; (8009fa4 <vTaskStartScheduler+0xb4>)
 8009f60:	2201      	movs	r2, #1
 8009f62:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009f64:	4b10      	ldr	r3, [pc, #64]	; (8009fa8 <vTaskStartScheduler+0xb8>)
 8009f66:	2200      	movs	r2, #0
 8009f68:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009f6a:	f000 fbb5 	bl	800a6d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009f6e:	e00d      	b.n	8009f8c <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f76:	d109      	bne.n	8009f8c <vTaskStartScheduler+0x9c>
 8009f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7c:	f383 8811 	msr	BASEPRI, r3
 8009f80:	f3bf 8f6f 	isb	sy
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	60fb      	str	r3, [r7, #12]
 8009f8a:	e7fe      	b.n	8009f8a <vTaskStartScheduler+0x9a>
}
 8009f8c:	bf00      	nop
 8009f8e:	3718      	adds	r7, #24
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	0800e10c 	.word	0x0800e10c
 8009f98:	0800a32d 	.word	0x0800a32d
 8009f9c:	200004fc 	.word	0x200004fc
 8009fa0:	200004f8 	.word	0x200004f8
 8009fa4:	200004e4 	.word	0x200004e4
 8009fa8:	200004dc 	.word	0x200004dc

08009fac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009fac:	b480      	push	{r7}
 8009fae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009fb0:	4b04      	ldr	r3, [pc, #16]	; (8009fc4 <vTaskSuspendAll+0x18>)
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	3301      	adds	r3, #1
 8009fb6:	4a03      	ldr	r2, [pc, #12]	; (8009fc4 <vTaskSuspendAll+0x18>)
 8009fb8:	6013      	str	r3, [r2, #0]
}
 8009fba:	bf00      	nop
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bc80      	pop	{r7}
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	20000500 	.word	0x20000500

08009fc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009fd6:	4b41      	ldr	r3, [pc, #260]	; (800a0dc <xTaskResumeAll+0x114>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d109      	bne.n	8009ff2 <xTaskResumeAll+0x2a>
 8009fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe2:	f383 8811 	msr	BASEPRI, r3
 8009fe6:	f3bf 8f6f 	isb	sy
 8009fea:	f3bf 8f4f 	dsb	sy
 8009fee:	603b      	str	r3, [r7, #0]
 8009ff0:	e7fe      	b.n	8009ff0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009ff2:	f000 fbe1 	bl	800a7b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009ff6:	4b39      	ldr	r3, [pc, #228]	; (800a0dc <xTaskResumeAll+0x114>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	3b01      	subs	r3, #1
 8009ffc:	4a37      	ldr	r2, [pc, #220]	; (800a0dc <xTaskResumeAll+0x114>)
 8009ffe:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a000:	4b36      	ldr	r3, [pc, #216]	; (800a0dc <xTaskResumeAll+0x114>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d161      	bne.n	800a0cc <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a008:	4b35      	ldr	r3, [pc, #212]	; (800a0e0 <xTaskResumeAll+0x118>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d05d      	beq.n	800a0cc <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a010:	e02e      	b.n	800a070 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a012:	4b34      	ldr	r3, [pc, #208]	; (800a0e4 <xTaskResumeAll+0x11c>)
 800a014:	68db      	ldr	r3, [r3, #12]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	3318      	adds	r3, #24
 800a01e:	4618      	mov	r0, r3
 800a020:	f7ff fd82 	bl	8009b28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	3304      	adds	r3, #4
 800a028:	4618      	mov	r0, r3
 800a02a:	f7ff fd7d 	bl	8009b28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a032:	2201      	movs	r2, #1
 800a034:	409a      	lsls	r2, r3
 800a036:	4b2c      	ldr	r3, [pc, #176]	; (800a0e8 <xTaskResumeAll+0x120>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4313      	orrs	r3, r2
 800a03c:	4a2a      	ldr	r2, [pc, #168]	; (800a0e8 <xTaskResumeAll+0x120>)
 800a03e:	6013      	str	r3, [r2, #0]
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a044:	4613      	mov	r3, r2
 800a046:	009b      	lsls	r3, r3, #2
 800a048:	4413      	add	r3, r2
 800a04a:	009b      	lsls	r3, r3, #2
 800a04c:	4a27      	ldr	r2, [pc, #156]	; (800a0ec <xTaskResumeAll+0x124>)
 800a04e:	441a      	add	r2, r3
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	3304      	adds	r3, #4
 800a054:	4619      	mov	r1, r3
 800a056:	4610      	mov	r0, r2
 800a058:	f7ff fd0b 	bl	8009a72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a060:	4b23      	ldr	r3, [pc, #140]	; (800a0f0 <xTaskResumeAll+0x128>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a066:	429a      	cmp	r2, r3
 800a068:	d302      	bcc.n	800a070 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800a06a:	4b22      	ldr	r3, [pc, #136]	; (800a0f4 <xTaskResumeAll+0x12c>)
 800a06c:	2201      	movs	r2, #1
 800a06e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a070:	4b1c      	ldr	r3, [pc, #112]	; (800a0e4 <xTaskResumeAll+0x11c>)
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d1cc      	bne.n	800a012 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d001      	beq.n	800a082 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a07e:	f000 fa07 	bl	800a490 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a082:	4b1d      	ldr	r3, [pc, #116]	; (800a0f8 <xTaskResumeAll+0x130>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d010      	beq.n	800a0b0 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a08e:	f000 f837 	bl	800a100 <xTaskIncrementTick>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d002      	beq.n	800a09e <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800a098:	4b16      	ldr	r3, [pc, #88]	; (800a0f4 <xTaskResumeAll+0x12c>)
 800a09a:	2201      	movs	r2, #1
 800a09c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d1f1      	bne.n	800a08e <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800a0aa:	4b13      	ldr	r3, [pc, #76]	; (800a0f8 <xTaskResumeAll+0x130>)
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a0b0:	4b10      	ldr	r3, [pc, #64]	; (800a0f4 <xTaskResumeAll+0x12c>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d009      	beq.n	800a0cc <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a0bc:	4b0f      	ldr	r3, [pc, #60]	; (800a0fc <xTaskResumeAll+0x134>)
 800a0be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a0c2:	601a      	str	r2, [r3, #0]
 800a0c4:	f3bf 8f4f 	dsb	sy
 800a0c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a0cc:	f000 fba2 	bl	800a814 <vPortExitCritical>

	return xAlreadyYielded;
 800a0d0:	68bb      	ldr	r3, [r7, #8]
}
 800a0d2:	4618      	mov	r0, r3
 800a0d4:	3710      	adds	r7, #16
 800a0d6:	46bd      	mov	sp, r7
 800a0d8:	bd80      	pop	{r7, pc}
 800a0da:	bf00      	nop
 800a0dc:	20000500 	.word	0x20000500
 800a0e0:	200004d8 	.word	0x200004d8
 800a0e4:	20000498 	.word	0x20000498
 800a0e8:	200004e0 	.word	0x200004e0
 800a0ec:	200003dc 	.word	0x200003dc
 800a0f0:	200003d8 	.word	0x200003d8
 800a0f4:	200004ec 	.word	0x200004ec
 800a0f8:	200004e8 	.word	0x200004e8
 800a0fc:	e000ed04 	.word	0xe000ed04

0800a100 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b086      	sub	sp, #24
 800a104:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a106:	2300      	movs	r3, #0
 800a108:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a10a:	4b50      	ldr	r3, [pc, #320]	; (800a24c <xTaskIncrementTick+0x14c>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	f040 808c 	bne.w	800a22c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a114:	4b4e      	ldr	r3, [pc, #312]	; (800a250 <xTaskIncrementTick+0x150>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	3301      	adds	r3, #1
 800a11a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a11c:	4a4c      	ldr	r2, [pc, #304]	; (800a250 <xTaskIncrementTick+0x150>)
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d11f      	bne.n	800a168 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a128:	4b4a      	ldr	r3, [pc, #296]	; (800a254 <xTaskIncrementTick+0x154>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d009      	beq.n	800a146 <xTaskIncrementTick+0x46>
 800a132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a136:	f383 8811 	msr	BASEPRI, r3
 800a13a:	f3bf 8f6f 	isb	sy
 800a13e:	f3bf 8f4f 	dsb	sy
 800a142:	603b      	str	r3, [r7, #0]
 800a144:	e7fe      	b.n	800a144 <xTaskIncrementTick+0x44>
 800a146:	4b43      	ldr	r3, [pc, #268]	; (800a254 <xTaskIncrementTick+0x154>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	60fb      	str	r3, [r7, #12]
 800a14c:	4b42      	ldr	r3, [pc, #264]	; (800a258 <xTaskIncrementTick+0x158>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4a40      	ldr	r2, [pc, #256]	; (800a254 <xTaskIncrementTick+0x154>)
 800a152:	6013      	str	r3, [r2, #0]
 800a154:	4a40      	ldr	r2, [pc, #256]	; (800a258 <xTaskIncrementTick+0x158>)
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6013      	str	r3, [r2, #0]
 800a15a:	4b40      	ldr	r3, [pc, #256]	; (800a25c <xTaskIncrementTick+0x15c>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	3301      	adds	r3, #1
 800a160:	4a3e      	ldr	r2, [pc, #248]	; (800a25c <xTaskIncrementTick+0x15c>)
 800a162:	6013      	str	r3, [r2, #0]
 800a164:	f000 f994 	bl	800a490 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a168:	4b3d      	ldr	r3, [pc, #244]	; (800a260 <xTaskIncrementTick+0x160>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	693a      	ldr	r2, [r7, #16]
 800a16e:	429a      	cmp	r2, r3
 800a170:	d34d      	bcc.n	800a20e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a172:	4b38      	ldr	r3, [pc, #224]	; (800a254 <xTaskIncrementTick+0x154>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d101      	bne.n	800a180 <xTaskIncrementTick+0x80>
 800a17c:	2301      	movs	r3, #1
 800a17e:	e000      	b.n	800a182 <xTaskIncrementTick+0x82>
 800a180:	2300      	movs	r3, #0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d004      	beq.n	800a190 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a186:	4b36      	ldr	r3, [pc, #216]	; (800a260 <xTaskIncrementTick+0x160>)
 800a188:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a18c:	601a      	str	r2, [r3, #0]
					break;
 800a18e:	e03e      	b.n	800a20e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a190:	4b30      	ldr	r3, [pc, #192]	; (800a254 <xTaskIncrementTick+0x154>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	68db      	ldr	r3, [r3, #12]
 800a198:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a1a0:	693a      	ldr	r2, [r7, #16]
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	429a      	cmp	r2, r3
 800a1a6:	d203      	bcs.n	800a1b0 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a1a8:	4a2d      	ldr	r2, [pc, #180]	; (800a260 <xTaskIncrementTick+0x160>)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	6013      	str	r3, [r2, #0]
						break;
 800a1ae:	e02e      	b.n	800a20e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	3304      	adds	r3, #4
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f7ff fcb7 	bl	8009b28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d004      	beq.n	800a1cc <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	3318      	adds	r3, #24
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	f7ff fcae 	bl	8009b28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	409a      	lsls	r2, r3
 800a1d4:	4b23      	ldr	r3, [pc, #140]	; (800a264 <xTaskIncrementTick+0x164>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	4a22      	ldr	r2, [pc, #136]	; (800a264 <xTaskIncrementTick+0x164>)
 800a1dc:	6013      	str	r3, [r2, #0]
 800a1de:	68bb      	ldr	r3, [r7, #8]
 800a1e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	4413      	add	r3, r2
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	4a1f      	ldr	r2, [pc, #124]	; (800a268 <xTaskIncrementTick+0x168>)
 800a1ec:	441a      	add	r2, r3
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	3304      	adds	r3, #4
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	4610      	mov	r0, r2
 800a1f6:	f7ff fc3c 	bl	8009a72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1fe:	4b1b      	ldr	r3, [pc, #108]	; (800a26c <xTaskIncrementTick+0x16c>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a204:	429a      	cmp	r2, r3
 800a206:	d3b4      	bcc.n	800a172 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a208:	2301      	movs	r3, #1
 800a20a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a20c:	e7b1      	b.n	800a172 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a20e:	4b17      	ldr	r3, [pc, #92]	; (800a26c <xTaskIncrementTick+0x16c>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a214:	4914      	ldr	r1, [pc, #80]	; (800a268 <xTaskIncrementTick+0x168>)
 800a216:	4613      	mov	r3, r2
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	4413      	add	r3, r2
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	440b      	add	r3, r1
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	2b01      	cmp	r3, #1
 800a224:	d907      	bls.n	800a236 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800a226:	2301      	movs	r3, #1
 800a228:	617b      	str	r3, [r7, #20]
 800a22a:	e004      	b.n	800a236 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a22c:	4b10      	ldr	r3, [pc, #64]	; (800a270 <xTaskIncrementTick+0x170>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	3301      	adds	r3, #1
 800a232:	4a0f      	ldr	r2, [pc, #60]	; (800a270 <xTaskIncrementTick+0x170>)
 800a234:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a236:	4b0f      	ldr	r3, [pc, #60]	; (800a274 <xTaskIncrementTick+0x174>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d001      	beq.n	800a242 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800a23e:	2301      	movs	r3, #1
 800a240:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a242:	697b      	ldr	r3, [r7, #20]
}
 800a244:	4618      	mov	r0, r3
 800a246:	3718      	adds	r7, #24
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	20000500 	.word	0x20000500
 800a250:	200004dc 	.word	0x200004dc
 800a254:	20000490 	.word	0x20000490
 800a258:	20000494 	.word	0x20000494
 800a25c:	200004f0 	.word	0x200004f0
 800a260:	200004f8 	.word	0x200004f8
 800a264:	200004e0 	.word	0x200004e0
 800a268:	200003dc 	.word	0x200003dc
 800a26c:	200003d8 	.word	0x200003d8
 800a270:	200004e8 	.word	0x200004e8
 800a274:	200004ec 	.word	0x200004ec

0800a278 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a278:	b480      	push	{r7}
 800a27a:	b087      	sub	sp, #28
 800a27c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a27e:	4b26      	ldr	r3, [pc, #152]	; (800a318 <vTaskSwitchContext+0xa0>)
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d003      	beq.n	800a28e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a286:	4b25      	ldr	r3, [pc, #148]	; (800a31c <vTaskSwitchContext+0xa4>)
 800a288:	2201      	movs	r2, #1
 800a28a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a28c:	e03e      	b.n	800a30c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800a28e:	4b23      	ldr	r3, [pc, #140]	; (800a31c <vTaskSwitchContext+0xa4>)
 800a290:	2200      	movs	r2, #0
 800a292:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a294:	4b22      	ldr	r3, [pc, #136]	; (800a320 <vTaskSwitchContext+0xa8>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	fab3 f383 	clz	r3, r3
 800a2a0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a2a2:	7afb      	ldrb	r3, [r7, #11]
 800a2a4:	f1c3 031f 	rsb	r3, r3, #31
 800a2a8:	617b      	str	r3, [r7, #20]
 800a2aa:	491e      	ldr	r1, [pc, #120]	; (800a324 <vTaskSwitchContext+0xac>)
 800a2ac:	697a      	ldr	r2, [r7, #20]
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	4413      	add	r3, r2
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	440b      	add	r3, r1
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d109      	bne.n	800a2d2 <vTaskSwitchContext+0x5a>
	__asm volatile
 800a2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2c2:	f383 8811 	msr	BASEPRI, r3
 800a2c6:	f3bf 8f6f 	isb	sy
 800a2ca:	f3bf 8f4f 	dsb	sy
 800a2ce:	607b      	str	r3, [r7, #4]
 800a2d0:	e7fe      	b.n	800a2d0 <vTaskSwitchContext+0x58>
 800a2d2:	697a      	ldr	r2, [r7, #20]
 800a2d4:	4613      	mov	r3, r2
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	4413      	add	r3, r2
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	4a11      	ldr	r2, [pc, #68]	; (800a324 <vTaskSwitchContext+0xac>)
 800a2de:	4413      	add	r3, r2
 800a2e0:	613b      	str	r3, [r7, #16]
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	685a      	ldr	r2, [r3, #4]
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	605a      	str	r2, [r3, #4]
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	685a      	ldr	r2, [r3, #4]
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	3308      	adds	r3, #8
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d104      	bne.n	800a302 <vTaskSwitchContext+0x8a>
 800a2f8:	693b      	ldr	r3, [r7, #16]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	685a      	ldr	r2, [r3, #4]
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	605a      	str	r2, [r3, #4]
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	4a07      	ldr	r2, [pc, #28]	; (800a328 <vTaskSwitchContext+0xb0>)
 800a30a:	6013      	str	r3, [r2, #0]
}
 800a30c:	bf00      	nop
 800a30e:	371c      	adds	r7, #28
 800a310:	46bd      	mov	sp, r7
 800a312:	bc80      	pop	{r7}
 800a314:	4770      	bx	lr
 800a316:	bf00      	nop
 800a318:	20000500 	.word	0x20000500
 800a31c:	200004ec 	.word	0x200004ec
 800a320:	200004e0 	.word	0x200004e0
 800a324:	200003dc 	.word	0x200003dc
 800a328:	200003d8 	.word	0x200003d8

0800a32c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a334:	f000 f852 	bl	800a3dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a338:	4b06      	ldr	r3, [pc, #24]	; (800a354 <prvIdleTask+0x28>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d9f9      	bls.n	800a334 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a340:	4b05      	ldr	r3, [pc, #20]	; (800a358 <prvIdleTask+0x2c>)
 800a342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a346:	601a      	str	r2, [r3, #0]
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a350:	e7f0      	b.n	800a334 <prvIdleTask+0x8>
 800a352:	bf00      	nop
 800a354:	200003dc 	.word	0x200003dc
 800a358:	e000ed04 	.word	0xe000ed04

0800a35c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a362:	2300      	movs	r3, #0
 800a364:	607b      	str	r3, [r7, #4]
 800a366:	e00c      	b.n	800a382 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	4613      	mov	r3, r2
 800a36c:	009b      	lsls	r3, r3, #2
 800a36e:	4413      	add	r3, r2
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	4a12      	ldr	r2, [pc, #72]	; (800a3bc <prvInitialiseTaskLists+0x60>)
 800a374:	4413      	add	r3, r2
 800a376:	4618      	mov	r0, r3
 800a378:	f7ff fb50 	bl	8009a1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	3301      	adds	r3, #1
 800a380:	607b      	str	r3, [r7, #4]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2b06      	cmp	r3, #6
 800a386:	d9ef      	bls.n	800a368 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a388:	480d      	ldr	r0, [pc, #52]	; (800a3c0 <prvInitialiseTaskLists+0x64>)
 800a38a:	f7ff fb47 	bl	8009a1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a38e:	480d      	ldr	r0, [pc, #52]	; (800a3c4 <prvInitialiseTaskLists+0x68>)
 800a390:	f7ff fb44 	bl	8009a1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a394:	480c      	ldr	r0, [pc, #48]	; (800a3c8 <prvInitialiseTaskLists+0x6c>)
 800a396:	f7ff fb41 	bl	8009a1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a39a:	480c      	ldr	r0, [pc, #48]	; (800a3cc <prvInitialiseTaskLists+0x70>)
 800a39c:	f7ff fb3e 	bl	8009a1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a3a0:	480b      	ldr	r0, [pc, #44]	; (800a3d0 <prvInitialiseTaskLists+0x74>)
 800a3a2:	f7ff fb3b 	bl	8009a1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a3a6:	4b0b      	ldr	r3, [pc, #44]	; (800a3d4 <prvInitialiseTaskLists+0x78>)
 800a3a8:	4a05      	ldr	r2, [pc, #20]	; (800a3c0 <prvInitialiseTaskLists+0x64>)
 800a3aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a3ac:	4b0a      	ldr	r3, [pc, #40]	; (800a3d8 <prvInitialiseTaskLists+0x7c>)
 800a3ae:	4a05      	ldr	r2, [pc, #20]	; (800a3c4 <prvInitialiseTaskLists+0x68>)
 800a3b0:	601a      	str	r2, [r3, #0]
}
 800a3b2:	bf00      	nop
 800a3b4:	3708      	adds	r7, #8
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	200003dc 	.word	0x200003dc
 800a3c0:	20000468 	.word	0x20000468
 800a3c4:	2000047c 	.word	0x2000047c
 800a3c8:	20000498 	.word	0x20000498
 800a3cc:	200004ac 	.word	0x200004ac
 800a3d0:	200004c4 	.word	0x200004c4
 800a3d4:	20000490 	.word	0x20000490
 800a3d8:	20000494 	.word	0x20000494

0800a3dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a3e2:	e019      	b.n	800a418 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a3e4:	f000 f9e8 	bl	800a7b8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a3e8:	4b0f      	ldr	r3, [pc, #60]	; (800a428 <prvCheckTasksWaitingTermination+0x4c>)
 800a3ea:	68db      	ldr	r3, [r3, #12]
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	3304      	adds	r3, #4
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7ff fb97 	bl	8009b28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a3fa:	4b0c      	ldr	r3, [pc, #48]	; (800a42c <prvCheckTasksWaitingTermination+0x50>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	3b01      	subs	r3, #1
 800a400:	4a0a      	ldr	r2, [pc, #40]	; (800a42c <prvCheckTasksWaitingTermination+0x50>)
 800a402:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a404:	4b0a      	ldr	r3, [pc, #40]	; (800a430 <prvCheckTasksWaitingTermination+0x54>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	3b01      	subs	r3, #1
 800a40a:	4a09      	ldr	r2, [pc, #36]	; (800a430 <prvCheckTasksWaitingTermination+0x54>)
 800a40c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a40e:	f000 fa01 	bl	800a814 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 f80e 	bl	800a434 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a418:	4b05      	ldr	r3, [pc, #20]	; (800a430 <prvCheckTasksWaitingTermination+0x54>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d1e1      	bne.n	800a3e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a420:	bf00      	nop
 800a422:	3708      	adds	r7, #8
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}
 800a428:	200004ac 	.word	0x200004ac
 800a42c:	200004d8 	.word	0x200004d8
 800a430:	200004c0 	.word	0x200004c0

0800a434 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a434:	b580      	push	{r7, lr}
 800a436:	b084      	sub	sp, #16
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a442:	2b00      	cmp	r3, #0
 800a444:	d108      	bne.n	800a458 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44a:	4618      	mov	r0, r3
 800a44c:	f000 fb30 	bl	800aab0 <vPortFree>
				vPortFree( pxTCB );
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 fb2d 	bl	800aab0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a456:	e017      	b.n	800a488 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d103      	bne.n	800a46a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 fb24 	bl	800aab0 <vPortFree>
	}
 800a468:	e00e      	b.n	800a488 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a470:	2b02      	cmp	r3, #2
 800a472:	d009      	beq.n	800a488 <prvDeleteTCB+0x54>
 800a474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	60fb      	str	r3, [r7, #12]
 800a486:	e7fe      	b.n	800a486 <prvDeleteTCB+0x52>
	}
 800a488:	bf00      	nop
 800a48a:	3710      	adds	r7, #16
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a490:	b480      	push	{r7}
 800a492:	b083      	sub	sp, #12
 800a494:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a496:	4b0e      	ldr	r3, [pc, #56]	; (800a4d0 <prvResetNextTaskUnblockTime+0x40>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d101      	bne.n	800a4a4 <prvResetNextTaskUnblockTime+0x14>
 800a4a0:	2301      	movs	r3, #1
 800a4a2:	e000      	b.n	800a4a6 <prvResetNextTaskUnblockTime+0x16>
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d004      	beq.n	800a4b4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a4aa:	4b0a      	ldr	r3, [pc, #40]	; (800a4d4 <prvResetNextTaskUnblockTime+0x44>)
 800a4ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4b0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a4b2:	e008      	b.n	800a4c6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a4b4:	4b06      	ldr	r3, [pc, #24]	; (800a4d0 <prvResetNextTaskUnblockTime+0x40>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68db      	ldr	r3, [r3, #12]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	4a04      	ldr	r2, [pc, #16]	; (800a4d4 <prvResetNextTaskUnblockTime+0x44>)
 800a4c4:	6013      	str	r3, [r2, #0]
}
 800a4c6:	bf00      	nop
 800a4c8:	370c      	adds	r7, #12
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	bc80      	pop	{r7}
 800a4ce:	4770      	bx	lr
 800a4d0:	20000490 	.word	0x20000490
 800a4d4:	200004f8 	.word	0x200004f8

0800a4d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a4de:	4b0b      	ldr	r3, [pc, #44]	; (800a50c <xTaskGetSchedulerState+0x34>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d102      	bne.n	800a4ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	607b      	str	r3, [r7, #4]
 800a4ea:	e008      	b.n	800a4fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4ec:	4b08      	ldr	r3, [pc, #32]	; (800a510 <xTaskGetSchedulerState+0x38>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d102      	bne.n	800a4fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a4f4:	2302      	movs	r3, #2
 800a4f6:	607b      	str	r3, [r7, #4]
 800a4f8:	e001      	b.n	800a4fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a4fe:	687b      	ldr	r3, [r7, #4]
	}
 800a500:	4618      	mov	r0, r3
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	bc80      	pop	{r7}
 800a508:	4770      	bx	lr
 800a50a:	bf00      	nop
 800a50c:	200004e4 	.word	0x200004e4
 800a510:	20000500 	.word	0x20000500

0800a514 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b084      	sub	sp, #16
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a51e:	4b29      	ldr	r3, [pc, #164]	; (800a5c4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a524:	4b28      	ldr	r3, [pc, #160]	; (800a5c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	3304      	adds	r3, #4
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7ff fafc 	bl	8009b28 <uxListRemove>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d10b      	bne.n	800a54e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800a536:	4b24      	ldr	r3, [pc, #144]	; (800a5c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a53c:	2201      	movs	r2, #1
 800a53e:	fa02 f303 	lsl.w	r3, r2, r3
 800a542:	43da      	mvns	r2, r3
 800a544:	4b21      	ldr	r3, [pc, #132]	; (800a5cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4013      	ands	r3, r2
 800a54a:	4a20      	ldr	r2, [pc, #128]	; (800a5cc <prvAddCurrentTaskToDelayedList+0xb8>)
 800a54c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a554:	d10a      	bne.n	800a56c <prvAddCurrentTaskToDelayedList+0x58>
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d007      	beq.n	800a56c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a55c:	4b1a      	ldr	r3, [pc, #104]	; (800a5c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	3304      	adds	r3, #4
 800a562:	4619      	mov	r1, r3
 800a564:	481a      	ldr	r0, [pc, #104]	; (800a5d0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a566:	f7ff fa84 	bl	8009a72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a56a:	e026      	b.n	800a5ba <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a56c:	68fa      	ldr	r2, [r7, #12]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	4413      	add	r3, r2
 800a572:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a574:	4b14      	ldr	r3, [pc, #80]	; (800a5c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	68ba      	ldr	r2, [r7, #8]
 800a57a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a57c:	68ba      	ldr	r2, [r7, #8]
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	429a      	cmp	r2, r3
 800a582:	d209      	bcs.n	800a598 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a584:	4b13      	ldr	r3, [pc, #76]	; (800a5d4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a586:	681a      	ldr	r2, [r3, #0]
 800a588:	4b0f      	ldr	r3, [pc, #60]	; (800a5c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	3304      	adds	r3, #4
 800a58e:	4619      	mov	r1, r3
 800a590:	4610      	mov	r0, r2
 800a592:	f7ff fa91 	bl	8009ab8 <vListInsert>
}
 800a596:	e010      	b.n	800a5ba <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a598:	4b0f      	ldr	r3, [pc, #60]	; (800a5d8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a59a:	681a      	ldr	r2, [r3, #0]
 800a59c:	4b0a      	ldr	r3, [pc, #40]	; (800a5c8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	3304      	adds	r3, #4
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	4610      	mov	r0, r2
 800a5a6:	f7ff fa87 	bl	8009ab8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a5aa:	4b0c      	ldr	r3, [pc, #48]	; (800a5dc <prvAddCurrentTaskToDelayedList+0xc8>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	68ba      	ldr	r2, [r7, #8]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	d202      	bcs.n	800a5ba <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a5b4:	4a09      	ldr	r2, [pc, #36]	; (800a5dc <prvAddCurrentTaskToDelayedList+0xc8>)
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	6013      	str	r3, [r2, #0]
}
 800a5ba:	bf00      	nop
 800a5bc:	3710      	adds	r7, #16
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	200004dc 	.word	0x200004dc
 800a5c8:	200003d8 	.word	0x200003d8
 800a5cc:	200004e0 	.word	0x200004e0
 800a5d0:	200004c4 	.word	0x200004c4
 800a5d4:	20000494 	.word	0x20000494
 800a5d8:	20000490 	.word	0x20000490
 800a5dc:	200004f8 	.word	0x200004f8

0800a5e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b085      	sub	sp, #20
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	60f8      	str	r0, [r7, #12]
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	3b04      	subs	r3, #4
 800a5f0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a5f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	3b04      	subs	r3, #4
 800a5fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	f023 0201 	bic.w	r2, r3, #1
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	3b04      	subs	r3, #4
 800a60e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a610:	4a08      	ldr	r2, [pc, #32]	; (800a634 <pxPortInitialiseStack+0x54>)
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	3b14      	subs	r3, #20
 800a61a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	3b20      	subs	r3, #32
 800a626:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a628:	68fb      	ldr	r3, [r7, #12]
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3714      	adds	r7, #20
 800a62e:	46bd      	mov	sp, r7
 800a630:	bc80      	pop	{r7}
 800a632:	4770      	bx	lr
 800a634:	0800a639 	.word	0x0800a639

0800a638 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a638:	b480      	push	{r7}
 800a63a:	b085      	sub	sp, #20
 800a63c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a63e:	2300      	movs	r3, #0
 800a640:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a642:	4b10      	ldr	r3, [pc, #64]	; (800a684 <prvTaskExitError+0x4c>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a64a:	d009      	beq.n	800a660 <prvTaskExitError+0x28>
 800a64c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a650:	f383 8811 	msr	BASEPRI, r3
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	60fb      	str	r3, [r7, #12]
 800a65e:	e7fe      	b.n	800a65e <prvTaskExitError+0x26>
 800a660:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a664:	f383 8811 	msr	BASEPRI, r3
 800a668:	f3bf 8f6f 	isb	sy
 800a66c:	f3bf 8f4f 	dsb	sy
 800a670:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a672:	bf00      	nop
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d0fc      	beq.n	800a674 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a67a:	bf00      	nop
 800a67c:	3714      	adds	r7, #20
 800a67e:	46bd      	mov	sp, r7
 800a680:	bc80      	pop	{r7}
 800a682:	4770      	bx	lr
 800a684:	2000004c 	.word	0x2000004c
	...

0800a690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a690:	4b07      	ldr	r3, [pc, #28]	; (800a6b0 <pxCurrentTCBConst2>)
 800a692:	6819      	ldr	r1, [r3, #0]
 800a694:	6808      	ldr	r0, [r1, #0]
 800a696:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a69a:	f380 8809 	msr	PSP, r0
 800a69e:	f3bf 8f6f 	isb	sy
 800a6a2:	f04f 0000 	mov.w	r0, #0
 800a6a6:	f380 8811 	msr	BASEPRI, r0
 800a6aa:	f04e 0e0d 	orr.w	lr, lr, #13
 800a6ae:	4770      	bx	lr

0800a6b0 <pxCurrentTCBConst2>:
 800a6b0:	200003d8 	.word	0x200003d8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a6b4:	bf00      	nop
 800a6b6:	bf00      	nop

0800a6b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a6b8:	4806      	ldr	r0, [pc, #24]	; (800a6d4 <prvPortStartFirstTask+0x1c>)
 800a6ba:	6800      	ldr	r0, [r0, #0]
 800a6bc:	6800      	ldr	r0, [r0, #0]
 800a6be:	f380 8808 	msr	MSP, r0
 800a6c2:	b662      	cpsie	i
 800a6c4:	b661      	cpsie	f
 800a6c6:	f3bf 8f4f 	dsb	sy
 800a6ca:	f3bf 8f6f 	isb	sy
 800a6ce:	df00      	svc	0
 800a6d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a6d2:	bf00      	nop
 800a6d4:	e000ed08 	.word	0xe000ed08

0800a6d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b084      	sub	sp, #16
 800a6dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a6de:	4b31      	ldr	r3, [pc, #196]	; (800a7a4 <xPortStartScheduler+0xcc>)
 800a6e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	b2db      	uxtb	r3, r3
 800a6e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	22ff      	movs	r2, #255	; 0xff
 800a6ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a6f8:	78fb      	ldrb	r3, [r7, #3]
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a700:	b2da      	uxtb	r2, r3
 800a702:	4b29      	ldr	r3, [pc, #164]	; (800a7a8 <xPortStartScheduler+0xd0>)
 800a704:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a706:	4b29      	ldr	r3, [pc, #164]	; (800a7ac <xPortStartScheduler+0xd4>)
 800a708:	2207      	movs	r2, #7
 800a70a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a70c:	e009      	b.n	800a722 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a70e:	4b27      	ldr	r3, [pc, #156]	; (800a7ac <xPortStartScheduler+0xd4>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	3b01      	subs	r3, #1
 800a714:	4a25      	ldr	r2, [pc, #148]	; (800a7ac <xPortStartScheduler+0xd4>)
 800a716:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a718:	78fb      	ldrb	r3, [r7, #3]
 800a71a:	b2db      	uxtb	r3, r3
 800a71c:	005b      	lsls	r3, r3, #1
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a722:	78fb      	ldrb	r3, [r7, #3]
 800a724:	b2db      	uxtb	r3, r3
 800a726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a72a:	2b80      	cmp	r3, #128	; 0x80
 800a72c:	d0ef      	beq.n	800a70e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a72e:	4b1f      	ldr	r3, [pc, #124]	; (800a7ac <xPortStartScheduler+0xd4>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f1c3 0307 	rsb	r3, r3, #7
 800a736:	2b04      	cmp	r3, #4
 800a738:	d009      	beq.n	800a74e <xPortStartScheduler+0x76>
 800a73a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73e:	f383 8811 	msr	BASEPRI, r3
 800a742:	f3bf 8f6f 	isb	sy
 800a746:	f3bf 8f4f 	dsb	sy
 800a74a:	60bb      	str	r3, [r7, #8]
 800a74c:	e7fe      	b.n	800a74c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a74e:	4b17      	ldr	r3, [pc, #92]	; (800a7ac <xPortStartScheduler+0xd4>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	021b      	lsls	r3, r3, #8
 800a754:	4a15      	ldr	r2, [pc, #84]	; (800a7ac <xPortStartScheduler+0xd4>)
 800a756:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a758:	4b14      	ldr	r3, [pc, #80]	; (800a7ac <xPortStartScheduler+0xd4>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a760:	4a12      	ldr	r2, [pc, #72]	; (800a7ac <xPortStartScheduler+0xd4>)
 800a762:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	b2da      	uxtb	r2, r3
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a76c:	4b10      	ldr	r3, [pc, #64]	; (800a7b0 <xPortStartScheduler+0xd8>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a0f      	ldr	r2, [pc, #60]	; (800a7b0 <xPortStartScheduler+0xd8>)
 800a772:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a776:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a778:	4b0d      	ldr	r3, [pc, #52]	; (800a7b0 <xPortStartScheduler+0xd8>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a0c      	ldr	r2, [pc, #48]	; (800a7b0 <xPortStartScheduler+0xd8>)
 800a77e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a782:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a784:	f000 f8b0 	bl	800a8e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a788:	4b0a      	ldr	r3, [pc, #40]	; (800a7b4 <xPortStartScheduler+0xdc>)
 800a78a:	2200      	movs	r2, #0
 800a78c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a78e:	f7ff ff93 	bl	800a6b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a792:	f7ff fd71 	bl	800a278 <vTaskSwitchContext>
	prvTaskExitError();
 800a796:	f7ff ff4f 	bl	800a638 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a79a:	2300      	movs	r3, #0
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}
 800a7a4:	e000e400 	.word	0xe000e400
 800a7a8:	20000504 	.word	0x20000504
 800a7ac:	20000508 	.word	0x20000508
 800a7b0:	e000ed20 	.word	0xe000ed20
 800a7b4:	2000004c 	.word	0x2000004c

0800a7b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c2:	f383 8811 	msr	BASEPRI, r3
 800a7c6:	f3bf 8f6f 	isb	sy
 800a7ca:	f3bf 8f4f 	dsb	sy
 800a7ce:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a7d0:	4b0e      	ldr	r3, [pc, #56]	; (800a80c <vPortEnterCritical+0x54>)
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	4a0d      	ldr	r2, [pc, #52]	; (800a80c <vPortEnterCritical+0x54>)
 800a7d8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a7da:	4b0c      	ldr	r3, [pc, #48]	; (800a80c <vPortEnterCritical+0x54>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d10e      	bne.n	800a800 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a7e2:	4b0b      	ldr	r3, [pc, #44]	; (800a810 <vPortEnterCritical+0x58>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d009      	beq.n	800a800 <vPortEnterCritical+0x48>
 800a7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f0:	f383 8811 	msr	BASEPRI, r3
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	603b      	str	r3, [r7, #0]
 800a7fe:	e7fe      	b.n	800a7fe <vPortEnterCritical+0x46>
	}
}
 800a800:	bf00      	nop
 800a802:	370c      	adds	r7, #12
 800a804:	46bd      	mov	sp, r7
 800a806:	bc80      	pop	{r7}
 800a808:	4770      	bx	lr
 800a80a:	bf00      	nop
 800a80c:	2000004c 	.word	0x2000004c
 800a810:	e000ed04 	.word	0xe000ed04

0800a814 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a814:	b480      	push	{r7}
 800a816:	b083      	sub	sp, #12
 800a818:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a81a:	4b10      	ldr	r3, [pc, #64]	; (800a85c <vPortExitCritical+0x48>)
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d109      	bne.n	800a836 <vPortExitCritical+0x22>
 800a822:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a826:	f383 8811 	msr	BASEPRI, r3
 800a82a:	f3bf 8f6f 	isb	sy
 800a82e:	f3bf 8f4f 	dsb	sy
 800a832:	607b      	str	r3, [r7, #4]
 800a834:	e7fe      	b.n	800a834 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a836:	4b09      	ldr	r3, [pc, #36]	; (800a85c <vPortExitCritical+0x48>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	3b01      	subs	r3, #1
 800a83c:	4a07      	ldr	r2, [pc, #28]	; (800a85c <vPortExitCritical+0x48>)
 800a83e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a840:	4b06      	ldr	r3, [pc, #24]	; (800a85c <vPortExitCritical+0x48>)
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d104      	bne.n	800a852 <vPortExitCritical+0x3e>
 800a848:	2300      	movs	r3, #0
 800a84a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a852:	bf00      	nop
 800a854:	370c      	adds	r7, #12
 800a856:	46bd      	mov	sp, r7
 800a858:	bc80      	pop	{r7}
 800a85a:	4770      	bx	lr
 800a85c:	2000004c 	.word	0x2000004c

0800a860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a860:	f3ef 8009 	mrs	r0, PSP
 800a864:	f3bf 8f6f 	isb	sy
 800a868:	4b0d      	ldr	r3, [pc, #52]	; (800a8a0 <pxCurrentTCBConst>)
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a870:	6010      	str	r0, [r2, #0]
 800a872:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a876:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a87a:	f380 8811 	msr	BASEPRI, r0
 800a87e:	f7ff fcfb 	bl	800a278 <vTaskSwitchContext>
 800a882:	f04f 0000 	mov.w	r0, #0
 800a886:	f380 8811 	msr	BASEPRI, r0
 800a88a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a88e:	6819      	ldr	r1, [r3, #0]
 800a890:	6808      	ldr	r0, [r1, #0]
 800a892:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a896:	f380 8809 	msr	PSP, r0
 800a89a:	f3bf 8f6f 	isb	sy
 800a89e:	4770      	bx	lr

0800a8a0 <pxCurrentTCBConst>:
 800a8a0:	200003d8 	.word	0x200003d8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a8a4:	bf00      	nop
 800a8a6:	bf00      	nop

0800a8a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b2:	f383 8811 	msr	BASEPRI, r3
 800a8b6:	f3bf 8f6f 	isb	sy
 800a8ba:	f3bf 8f4f 	dsb	sy
 800a8be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a8c0:	f7ff fc1e 	bl	800a100 <xTaskIncrementTick>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d003      	beq.n	800a8d2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a8ca:	4b06      	ldr	r3, [pc, #24]	; (800a8e4 <xPortSysTickHandler+0x3c>)
 800a8cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8d0:	601a      	str	r2, [r3, #0]
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a8dc:	bf00      	nop
 800a8de:	3708      	adds	r7, #8
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	e000ed04 	.word	0xe000ed04

0800a8e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a8ec:	4b0a      	ldr	r3, [pc, #40]	; (800a918 <vPortSetupTimerInterrupt+0x30>)
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a8f2:	4b0a      	ldr	r3, [pc, #40]	; (800a91c <vPortSetupTimerInterrupt+0x34>)
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a8f8:	4b09      	ldr	r3, [pc, #36]	; (800a920 <vPortSetupTimerInterrupt+0x38>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	4a09      	ldr	r2, [pc, #36]	; (800a924 <vPortSetupTimerInterrupt+0x3c>)
 800a8fe:	fba2 2303 	umull	r2, r3, r2, r3
 800a902:	099b      	lsrs	r3, r3, #6
 800a904:	4a08      	ldr	r2, [pc, #32]	; (800a928 <vPortSetupTimerInterrupt+0x40>)
 800a906:	3b01      	subs	r3, #1
 800a908:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a90a:	4b03      	ldr	r3, [pc, #12]	; (800a918 <vPortSetupTimerInterrupt+0x30>)
 800a90c:	2207      	movs	r2, #7
 800a90e:	601a      	str	r2, [r3, #0]
}
 800a910:	bf00      	nop
 800a912:	46bd      	mov	sp, r7
 800a914:	bc80      	pop	{r7}
 800a916:	4770      	bx	lr
 800a918:	e000e010 	.word	0xe000e010
 800a91c:	e000e018 	.word	0xe000e018
 800a920:	20000040 	.word	0x20000040
 800a924:	10624dd3 	.word	0x10624dd3
 800a928:	e000e014 	.word	0xe000e014

0800a92c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b08a      	sub	sp, #40	; 0x28
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a934:	2300      	movs	r3, #0
 800a936:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a938:	f7ff fb38 	bl	8009fac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a93c:	4b57      	ldr	r3, [pc, #348]	; (800aa9c <pvPortMalloc+0x170>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d101      	bne.n	800a948 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a944:	f000 f90c 	bl	800ab60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a948:	4b55      	ldr	r3, [pc, #340]	; (800aaa0 <pvPortMalloc+0x174>)
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	4013      	ands	r3, r2
 800a950:	2b00      	cmp	r3, #0
 800a952:	f040 808c 	bne.w	800aa6e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d01c      	beq.n	800a996 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a95c:	2208      	movs	r2, #8
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	4413      	add	r3, r2
 800a962:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	f003 0307 	and.w	r3, r3, #7
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d013      	beq.n	800a996 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f023 0307 	bic.w	r3, r3, #7
 800a974:	3308      	adds	r3, #8
 800a976:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f003 0307 	and.w	r3, r3, #7
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d009      	beq.n	800a996 <pvPortMalloc+0x6a>
	__asm volatile
 800a982:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a986:	f383 8811 	msr	BASEPRI, r3
 800a98a:	f3bf 8f6f 	isb	sy
 800a98e:	f3bf 8f4f 	dsb	sy
 800a992:	617b      	str	r3, [r7, #20]
 800a994:	e7fe      	b.n	800a994 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d068      	beq.n	800aa6e <pvPortMalloc+0x142>
 800a99c:	4b41      	ldr	r3, [pc, #260]	; (800aaa4 <pvPortMalloc+0x178>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	687a      	ldr	r2, [r7, #4]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d863      	bhi.n	800aa6e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a9a6:	4b40      	ldr	r3, [pc, #256]	; (800aaa8 <pvPortMalloc+0x17c>)
 800a9a8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a9aa:	4b3f      	ldr	r3, [pc, #252]	; (800aaa8 <pvPortMalloc+0x17c>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a9b0:	e004      	b.n	800a9bc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d903      	bls.n	800a9ce <pvPortMalloc+0xa2>
 800a9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d1f1      	bne.n	800a9b2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a9ce:	4b33      	ldr	r3, [pc, #204]	; (800aa9c <pvPortMalloc+0x170>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d04a      	beq.n	800aa6e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a9d8:	6a3b      	ldr	r3, [r7, #32]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	2208      	movs	r2, #8
 800a9de:	4413      	add	r3, r2
 800a9e0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a9e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	6a3b      	ldr	r3, [r7, #32]
 800a9e8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a9ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9ec:	685a      	ldr	r2, [r3, #4]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	1ad2      	subs	r2, r2, r3
 800a9f2:	2308      	movs	r3, #8
 800a9f4:	005b      	lsls	r3, r3, #1
 800a9f6:	429a      	cmp	r2, r3
 800a9f8:	d91e      	bls.n	800aa38 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a9fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	4413      	add	r3, r2
 800aa00:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa02:	69bb      	ldr	r3, [r7, #24]
 800aa04:	f003 0307 	and.w	r3, r3, #7
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d009      	beq.n	800aa20 <pvPortMalloc+0xf4>
 800aa0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa10:	f383 8811 	msr	BASEPRI, r3
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	613b      	str	r3, [r7, #16]
 800aa1e:	e7fe      	b.n	800aa1e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800aa20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa22:	685a      	ldr	r2, [r3, #4]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	1ad2      	subs	r2, r2, r3
 800aa28:	69bb      	ldr	r3, [r7, #24]
 800aa2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800aa2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800aa32:	69b8      	ldr	r0, [r7, #24]
 800aa34:	f000 f8f6 	bl	800ac24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800aa38:	4b1a      	ldr	r3, [pc, #104]	; (800aaa4 <pvPortMalloc+0x178>)
 800aa3a:	681a      	ldr	r2, [r3, #0]
 800aa3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	1ad3      	subs	r3, r2, r3
 800aa42:	4a18      	ldr	r2, [pc, #96]	; (800aaa4 <pvPortMalloc+0x178>)
 800aa44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800aa46:	4b17      	ldr	r3, [pc, #92]	; (800aaa4 <pvPortMalloc+0x178>)
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	4b18      	ldr	r3, [pc, #96]	; (800aaac <pvPortMalloc+0x180>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d203      	bcs.n	800aa5a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800aa52:	4b14      	ldr	r3, [pc, #80]	; (800aaa4 <pvPortMalloc+0x178>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a15      	ldr	r2, [pc, #84]	; (800aaac <pvPortMalloc+0x180>)
 800aa58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800aa5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5c:	685a      	ldr	r2, [r3, #4]
 800aa5e:	4b10      	ldr	r3, [pc, #64]	; (800aaa0 <pvPortMalloc+0x174>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	431a      	orrs	r2, r3
 800aa64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa6e:	f7ff faab 	bl	8009fc8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa72:	69fb      	ldr	r3, [r7, #28]
 800aa74:	f003 0307 	and.w	r3, r3, #7
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d009      	beq.n	800aa90 <pvPortMalloc+0x164>
 800aa7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa80:	f383 8811 	msr	BASEPRI, r3
 800aa84:	f3bf 8f6f 	isb	sy
 800aa88:	f3bf 8f4f 	dsb	sy
 800aa8c:	60fb      	str	r3, [r7, #12]
 800aa8e:	e7fe      	b.n	800aa8e <pvPortMalloc+0x162>
	return pvReturn;
 800aa90:	69fb      	ldr	r3, [r7, #28]
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3728      	adds	r7, #40	; 0x28
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	200033f4 	.word	0x200033f4
 800aaa0:	20003400 	.word	0x20003400
 800aaa4:	200033f8 	.word	0x200033f8
 800aaa8:	200033ec 	.word	0x200033ec
 800aaac:	200033fc 	.word	0x200033fc

0800aab0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b086      	sub	sp, #24
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d046      	beq.n	800ab50 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aac2:	2308      	movs	r3, #8
 800aac4:	425b      	negs	r3, r3
 800aac6:	697a      	ldr	r2, [r7, #20]
 800aac8:	4413      	add	r3, r2
 800aaca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aad0:	693b      	ldr	r3, [r7, #16]
 800aad2:	685a      	ldr	r2, [r3, #4]
 800aad4:	4b20      	ldr	r3, [pc, #128]	; (800ab58 <vPortFree+0xa8>)
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4013      	ands	r3, r2
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d109      	bne.n	800aaf2 <vPortFree+0x42>
 800aade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	60fb      	str	r3, [r7, #12]
 800aaf0:	e7fe      	b.n	800aaf0 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d009      	beq.n	800ab0e <vPortFree+0x5e>
 800aafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aafe:	f383 8811 	msr	BASEPRI, r3
 800ab02:	f3bf 8f6f 	isb	sy
 800ab06:	f3bf 8f4f 	dsb	sy
 800ab0a:	60bb      	str	r3, [r7, #8]
 800ab0c:	e7fe      	b.n	800ab0c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	685a      	ldr	r2, [r3, #4]
 800ab12:	4b11      	ldr	r3, [pc, #68]	; (800ab58 <vPortFree+0xa8>)
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	4013      	ands	r3, r2
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d019      	beq.n	800ab50 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d115      	bne.n	800ab50 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ab24:	693b      	ldr	r3, [r7, #16]
 800ab26:	685a      	ldr	r2, [r3, #4]
 800ab28:	4b0b      	ldr	r3, [pc, #44]	; (800ab58 <vPortFree+0xa8>)
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	43db      	mvns	r3, r3
 800ab2e:	401a      	ands	r2, r3
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ab34:	f7ff fa3a 	bl	8009fac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ab38:	693b      	ldr	r3, [r7, #16]
 800ab3a:	685a      	ldr	r2, [r3, #4]
 800ab3c:	4b07      	ldr	r3, [pc, #28]	; (800ab5c <vPortFree+0xac>)
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4413      	add	r3, r2
 800ab42:	4a06      	ldr	r2, [pc, #24]	; (800ab5c <vPortFree+0xac>)
 800ab44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ab46:	6938      	ldr	r0, [r7, #16]
 800ab48:	f000 f86c 	bl	800ac24 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ab4c:	f7ff fa3c 	bl	8009fc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ab50:	bf00      	nop
 800ab52:	3718      	adds	r7, #24
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}
 800ab58:	20003400 	.word	0x20003400
 800ab5c:	200033f8 	.word	0x200033f8

0800ab60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab60:	b480      	push	{r7}
 800ab62:	b085      	sub	sp, #20
 800ab64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab66:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800ab6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab6c:	4b27      	ldr	r3, [pc, #156]	; (800ac0c <prvHeapInit+0xac>)
 800ab6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	f003 0307 	and.w	r3, r3, #7
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d00c      	beq.n	800ab94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	3307      	adds	r3, #7
 800ab7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f023 0307 	bic.w	r3, r3, #7
 800ab86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab88:	68ba      	ldr	r2, [r7, #8]
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	1ad3      	subs	r3, r2, r3
 800ab8e:	4a1f      	ldr	r2, [pc, #124]	; (800ac0c <prvHeapInit+0xac>)
 800ab90:	4413      	add	r3, r2
 800ab92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ab98:	4a1d      	ldr	r2, [pc, #116]	; (800ac10 <prvHeapInit+0xb0>)
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ab9e:	4b1c      	ldr	r3, [pc, #112]	; (800ac10 <prvHeapInit+0xb0>)
 800aba0:	2200      	movs	r2, #0
 800aba2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	68ba      	ldr	r2, [r7, #8]
 800aba8:	4413      	add	r3, r2
 800abaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800abac:	2208      	movs	r2, #8
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	1a9b      	subs	r3, r3, r2
 800abb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	f023 0307 	bic.w	r3, r3, #7
 800abba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	4a15      	ldr	r2, [pc, #84]	; (800ac14 <prvHeapInit+0xb4>)
 800abc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800abc2:	4b14      	ldr	r3, [pc, #80]	; (800ac14 <prvHeapInit+0xb4>)
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	2200      	movs	r2, #0
 800abc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800abca:	4b12      	ldr	r3, [pc, #72]	; (800ac14 <prvHeapInit+0xb4>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	2200      	movs	r2, #0
 800abd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800abd6:	683b      	ldr	r3, [r7, #0]
 800abd8:	68fa      	ldr	r2, [r7, #12]
 800abda:	1ad2      	subs	r2, r2, r3
 800abdc:	683b      	ldr	r3, [r7, #0]
 800abde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800abe0:	4b0c      	ldr	r3, [pc, #48]	; (800ac14 <prvHeapInit+0xb4>)
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	4a0a      	ldr	r2, [pc, #40]	; (800ac18 <prvHeapInit+0xb8>)
 800abee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800abf0:	683b      	ldr	r3, [r7, #0]
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	4a09      	ldr	r2, [pc, #36]	; (800ac1c <prvHeapInit+0xbc>)
 800abf6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800abf8:	4b09      	ldr	r3, [pc, #36]	; (800ac20 <prvHeapInit+0xc0>)
 800abfa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800abfe:	601a      	str	r2, [r3, #0]
}
 800ac00:	bf00      	nop
 800ac02:	3714      	adds	r7, #20
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bc80      	pop	{r7}
 800ac08:	4770      	bx	lr
 800ac0a:	bf00      	nop
 800ac0c:	2000050c 	.word	0x2000050c
 800ac10:	200033ec 	.word	0x200033ec
 800ac14:	200033f4 	.word	0x200033f4
 800ac18:	200033fc 	.word	0x200033fc
 800ac1c:	200033f8 	.word	0x200033f8
 800ac20:	20003400 	.word	0x20003400

0800ac24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ac24:	b480      	push	{r7}
 800ac26:	b085      	sub	sp, #20
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ac2c:	4b27      	ldr	r3, [pc, #156]	; (800accc <prvInsertBlockIntoFreeList+0xa8>)
 800ac2e:	60fb      	str	r3, [r7, #12]
 800ac30:	e002      	b.n	800ac38 <prvInsertBlockIntoFreeList+0x14>
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	60fb      	str	r3, [r7, #12]
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d8f7      	bhi.n	800ac32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	68ba      	ldr	r2, [r7, #8]
 800ac4c:	4413      	add	r3, r2
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d108      	bne.n	800ac66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	685a      	ldr	r2, [r3, #4]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	441a      	add	r2, r3
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	685b      	ldr	r3, [r3, #4]
 800ac6e:	68ba      	ldr	r2, [r7, #8]
 800ac70:	441a      	add	r2, r3
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d118      	bne.n	800acac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	4b14      	ldr	r3, [pc, #80]	; (800acd0 <prvInsertBlockIntoFreeList+0xac>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	429a      	cmp	r2, r3
 800ac84:	d00d      	beq.n	800aca2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	685a      	ldr	r2, [r3, #4]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	441a      	add	r2, r3
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	601a      	str	r2, [r3, #0]
 800aca0:	e008      	b.n	800acb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aca2:	4b0b      	ldr	r3, [pc, #44]	; (800acd0 <prvInsertBlockIntoFreeList+0xac>)
 800aca4:	681a      	ldr	r2, [r3, #0]
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	601a      	str	r2, [r3, #0]
 800acaa:	e003      	b.n	800acb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d002      	beq.n	800acc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800acc2:	bf00      	nop
 800acc4:	3714      	adds	r7, #20
 800acc6:	46bd      	mov	sp, r7
 800acc8:	bc80      	pop	{r7}
 800acca:	4770      	bx	lr
 800accc:	200033ec 	.word	0x200033ec
 800acd0:	200033f4 	.word	0x200033f4

0800acd4 <__errno>:
 800acd4:	4b01      	ldr	r3, [pc, #4]	; (800acdc <__errno+0x8>)
 800acd6:	6818      	ldr	r0, [r3, #0]
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop
 800acdc:	20000050 	.word	0x20000050

0800ace0 <__libc_init_array>:
 800ace0:	b570      	push	{r4, r5, r6, lr}
 800ace2:	2500      	movs	r5, #0
 800ace4:	4e0c      	ldr	r6, [pc, #48]	; (800ad18 <__libc_init_array+0x38>)
 800ace6:	4c0d      	ldr	r4, [pc, #52]	; (800ad1c <__libc_init_array+0x3c>)
 800ace8:	1ba4      	subs	r4, r4, r6
 800acea:	10a4      	asrs	r4, r4, #2
 800acec:	42a5      	cmp	r5, r4
 800acee:	d109      	bne.n	800ad04 <__libc_init_array+0x24>
 800acf0:	f003 f9cc 	bl	800e08c <_init>
 800acf4:	2500      	movs	r5, #0
 800acf6:	4e0a      	ldr	r6, [pc, #40]	; (800ad20 <__libc_init_array+0x40>)
 800acf8:	4c0a      	ldr	r4, [pc, #40]	; (800ad24 <__libc_init_array+0x44>)
 800acfa:	1ba4      	subs	r4, r4, r6
 800acfc:	10a4      	asrs	r4, r4, #2
 800acfe:	42a5      	cmp	r5, r4
 800ad00:	d105      	bne.n	800ad0e <__libc_init_array+0x2e>
 800ad02:	bd70      	pop	{r4, r5, r6, pc}
 800ad04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ad08:	4798      	blx	r3
 800ad0a:	3501      	adds	r5, #1
 800ad0c:	e7ee      	b.n	800acec <__libc_init_array+0xc>
 800ad0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ad12:	4798      	blx	r3
 800ad14:	3501      	adds	r5, #1
 800ad16:	e7f2      	b.n	800acfe <__libc_init_array+0x1e>
 800ad18:	0800e780 	.word	0x0800e780
 800ad1c:	0800e780 	.word	0x0800e780
 800ad20:	0800e780 	.word	0x0800e780
 800ad24:	0800e784 	.word	0x0800e784

0800ad28 <memset>:
 800ad28:	4603      	mov	r3, r0
 800ad2a:	4402      	add	r2, r0
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d100      	bne.n	800ad32 <memset+0xa>
 800ad30:	4770      	bx	lr
 800ad32:	f803 1b01 	strb.w	r1, [r3], #1
 800ad36:	e7f9      	b.n	800ad2c <memset+0x4>

0800ad38 <cos>:
 800ad38:	b530      	push	{r4, r5, lr}
 800ad3a:	4a18      	ldr	r2, [pc, #96]	; (800ad9c <cos+0x64>)
 800ad3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ad40:	4293      	cmp	r3, r2
 800ad42:	b087      	sub	sp, #28
 800ad44:	dc04      	bgt.n	800ad50 <cos+0x18>
 800ad46:	2200      	movs	r2, #0
 800ad48:	2300      	movs	r3, #0
 800ad4a:	f001 fc85 	bl	800c658 <__kernel_cos>
 800ad4e:	e006      	b.n	800ad5e <cos+0x26>
 800ad50:	4a13      	ldr	r2, [pc, #76]	; (800ada0 <cos+0x68>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	dd05      	ble.n	800ad62 <cos+0x2a>
 800ad56:	4602      	mov	r2, r0
 800ad58:	460b      	mov	r3, r1
 800ad5a:	f7f5 f9fd 	bl	8000158 <__aeabi_dsub>
 800ad5e:	b007      	add	sp, #28
 800ad60:	bd30      	pop	{r4, r5, pc}
 800ad62:	aa02      	add	r2, sp, #8
 800ad64:	f000 fff4 	bl	800bd50 <__ieee754_rem_pio2>
 800ad68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ad6c:	f000 0403 	and.w	r4, r0, #3
 800ad70:	2c01      	cmp	r4, #1
 800ad72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad76:	d008      	beq.n	800ad8a <cos+0x52>
 800ad78:	2c02      	cmp	r4, #2
 800ad7a:	d00c      	beq.n	800ad96 <cos+0x5e>
 800ad7c:	2c00      	cmp	r4, #0
 800ad7e:	d0e4      	beq.n	800ad4a <cos+0x12>
 800ad80:	2401      	movs	r4, #1
 800ad82:	9400      	str	r4, [sp, #0]
 800ad84:	f002 f870 	bl	800ce68 <__kernel_sin>
 800ad88:	e7e9      	b.n	800ad5e <cos+0x26>
 800ad8a:	9400      	str	r4, [sp, #0]
 800ad8c:	f002 f86c 	bl	800ce68 <__kernel_sin>
 800ad90:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800ad94:	e7e3      	b.n	800ad5e <cos+0x26>
 800ad96:	f001 fc5f 	bl	800c658 <__kernel_cos>
 800ad9a:	e7f9      	b.n	800ad90 <cos+0x58>
 800ad9c:	3fe921fb 	.word	0x3fe921fb
 800ada0:	7fefffff 	.word	0x7fefffff

0800ada4 <cosf>:
 800ada4:	b507      	push	{r0, r1, r2, lr}
 800ada6:	4a18      	ldr	r2, [pc, #96]	; (800ae08 <cosf+0x64>)
 800ada8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800adac:	4293      	cmp	r3, r2
 800adae:	4601      	mov	r1, r0
 800adb0:	dc03      	bgt.n	800adba <cosf+0x16>
 800adb2:	2100      	movs	r1, #0
 800adb4:	f002 f90e 	bl	800cfd4 <__kernel_cosf>
 800adb8:	e004      	b.n	800adc4 <cosf+0x20>
 800adba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800adbe:	db04      	blt.n	800adca <cosf+0x26>
 800adc0:	f7f5 feae 	bl	8000b20 <__aeabi_fsub>
 800adc4:	b003      	add	sp, #12
 800adc6:	f85d fb04 	ldr.w	pc, [sp], #4
 800adca:	4669      	mov	r1, sp
 800adcc:	f001 faec 	bl	800c3a8 <__ieee754_rem_pio2f>
 800add0:	f000 0203 	and.w	r2, r0, #3
 800add4:	2a01      	cmp	r2, #1
 800add6:	d005      	beq.n	800ade4 <cosf+0x40>
 800add8:	2a02      	cmp	r2, #2
 800adda:	d00a      	beq.n	800adf2 <cosf+0x4e>
 800addc:	b972      	cbnz	r2, 800adfc <cosf+0x58>
 800adde:	9901      	ldr	r1, [sp, #4]
 800ade0:	9800      	ldr	r0, [sp, #0]
 800ade2:	e7e7      	b.n	800adb4 <cosf+0x10>
 800ade4:	9901      	ldr	r1, [sp, #4]
 800ade6:	9800      	ldr	r0, [sp, #0]
 800ade8:	f002 fc12 	bl	800d610 <__kernel_sinf>
 800adec:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800adf0:	e7e8      	b.n	800adc4 <cosf+0x20>
 800adf2:	9901      	ldr	r1, [sp, #4]
 800adf4:	9800      	ldr	r0, [sp, #0]
 800adf6:	f002 f8ed 	bl	800cfd4 <__kernel_cosf>
 800adfa:	e7f7      	b.n	800adec <cosf+0x48>
 800adfc:	2201      	movs	r2, #1
 800adfe:	9901      	ldr	r1, [sp, #4]
 800ae00:	9800      	ldr	r0, [sp, #0]
 800ae02:	f002 fc05 	bl	800d610 <__kernel_sinf>
 800ae06:	e7dd      	b.n	800adc4 <cosf+0x20>
 800ae08:	3f490fd8 	.word	0x3f490fd8

0800ae0c <atan2>:
 800ae0c:	f000 b9b4 	b.w	800b178 <__ieee754_atan2>

0800ae10 <pow>:
 800ae10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae14:	b08f      	sub	sp, #60	; 0x3c
 800ae16:	461d      	mov	r5, r3
 800ae18:	4680      	mov	r8, r0
 800ae1a:	4689      	mov	r9, r1
 800ae1c:	4614      	mov	r4, r2
 800ae1e:	f000 fa8b 	bl	800b338 <__ieee754_pow>
 800ae22:	4fa1      	ldr	r7, [pc, #644]	; (800b0a8 <pow+0x298>)
 800ae24:	e9cd 0100 	strd	r0, r1, [sp]
 800ae28:	f997 3000 	ldrsb.w	r3, [r7]
 800ae2c:	463e      	mov	r6, r7
 800ae2e:	9302      	str	r3, [sp, #8]
 800ae30:	3301      	adds	r3, #1
 800ae32:	d05f      	beq.n	800aef4 <pow+0xe4>
 800ae34:	4622      	mov	r2, r4
 800ae36:	462b      	mov	r3, r5
 800ae38:	4620      	mov	r0, r4
 800ae3a:	4629      	mov	r1, r5
 800ae3c:	f7f5 fdde 	bl	80009fc <__aeabi_dcmpun>
 800ae40:	4682      	mov	sl, r0
 800ae42:	2800      	cmp	r0, #0
 800ae44:	d156      	bne.n	800aef4 <pow+0xe4>
 800ae46:	4642      	mov	r2, r8
 800ae48:	464b      	mov	r3, r9
 800ae4a:	4640      	mov	r0, r8
 800ae4c:	4649      	mov	r1, r9
 800ae4e:	f7f5 fdd5 	bl	80009fc <__aeabi_dcmpun>
 800ae52:	9003      	str	r0, [sp, #12]
 800ae54:	b1e8      	cbz	r0, 800ae92 <pow+0x82>
 800ae56:	2200      	movs	r2, #0
 800ae58:	2300      	movs	r3, #0
 800ae5a:	4620      	mov	r0, r4
 800ae5c:	4629      	mov	r1, r5
 800ae5e:	f7f5 fd9b 	bl	8000998 <__aeabi_dcmpeq>
 800ae62:	2800      	cmp	r0, #0
 800ae64:	d046      	beq.n	800aef4 <pow+0xe4>
 800ae66:	2301      	movs	r3, #1
 800ae68:	2200      	movs	r2, #0
 800ae6a:	9304      	str	r3, [sp, #16]
 800ae6c:	4b8f      	ldr	r3, [pc, #572]	; (800b0ac <pow+0x29c>)
 800ae6e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800ae72:	9305      	str	r3, [sp, #20]
 800ae74:	4b8e      	ldr	r3, [pc, #568]	; (800b0b0 <pow+0x2a0>)
 800ae76:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800ae7a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ae7e:	9b02      	ldr	r3, [sp, #8]
 800ae80:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800ae84:	2b02      	cmp	r3, #2
 800ae86:	d031      	beq.n	800aeec <pow+0xdc>
 800ae88:	a804      	add	r0, sp, #16
 800ae8a:	f002 fe51 	bl	800db30 <matherr>
 800ae8e:	bb38      	cbnz	r0, 800aee0 <pow+0xd0>
 800ae90:	e058      	b.n	800af44 <pow+0x134>
 800ae92:	f04f 0a00 	mov.w	sl, #0
 800ae96:	f04f 0b00 	mov.w	fp, #0
 800ae9a:	4652      	mov	r2, sl
 800ae9c:	465b      	mov	r3, fp
 800ae9e:	4640      	mov	r0, r8
 800aea0:	4649      	mov	r1, r9
 800aea2:	f7f5 fd79 	bl	8000998 <__aeabi_dcmpeq>
 800aea6:	2800      	cmp	r0, #0
 800aea8:	d051      	beq.n	800af4e <pow+0x13e>
 800aeaa:	4652      	mov	r2, sl
 800aeac:	465b      	mov	r3, fp
 800aeae:	4620      	mov	r0, r4
 800aeb0:	4629      	mov	r1, r5
 800aeb2:	f7f5 fd71 	bl	8000998 <__aeabi_dcmpeq>
 800aeb6:	4606      	mov	r6, r0
 800aeb8:	b308      	cbz	r0, 800aefe <pow+0xee>
 800aeba:	2301      	movs	r3, #1
 800aebc:	9304      	str	r3, [sp, #16]
 800aebe:	4b7b      	ldr	r3, [pc, #492]	; (800b0ac <pow+0x29c>)
 800aec0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800aec4:	9305      	str	r3, [sp, #20]
 800aec6:	9b03      	ldr	r3, [sp, #12]
 800aec8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800aecc:	930c      	str	r3, [sp, #48]	; 0x30
 800aece:	9b02      	ldr	r3, [sp, #8]
 800aed0:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d0d7      	beq.n	800ae88 <pow+0x78>
 800aed8:	2200      	movs	r2, #0
 800aeda:	4b75      	ldr	r3, [pc, #468]	; (800b0b0 <pow+0x2a0>)
 800aedc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800aee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aee2:	b11b      	cbz	r3, 800aeec <pow+0xdc>
 800aee4:	f7ff fef6 	bl	800acd4 <__errno>
 800aee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aeea:	6003      	str	r3, [r0, #0]
 800aeec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 800aef0:	e9cd 3400 	strd	r3, r4, [sp]
 800aef4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800aef8:	b00f      	add	sp, #60	; 0x3c
 800aefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aefe:	4620      	mov	r0, r4
 800af00:	4629      	mov	r1, r5
 800af02:	f002 fd8b 	bl	800da1c <finite>
 800af06:	2800      	cmp	r0, #0
 800af08:	d0f4      	beq.n	800aef4 <pow+0xe4>
 800af0a:	4652      	mov	r2, sl
 800af0c:	465b      	mov	r3, fp
 800af0e:	4620      	mov	r0, r4
 800af10:	4629      	mov	r1, r5
 800af12:	f7f5 fd4b 	bl	80009ac <__aeabi_dcmplt>
 800af16:	2800      	cmp	r0, #0
 800af18:	d0ec      	beq.n	800aef4 <pow+0xe4>
 800af1a:	2301      	movs	r3, #1
 800af1c:	9304      	str	r3, [sp, #16]
 800af1e:	4b63      	ldr	r3, [pc, #396]	; (800b0ac <pow+0x29c>)
 800af20:	960c      	str	r6, [sp, #48]	; 0x30
 800af22:	9305      	str	r3, [sp, #20]
 800af24:	f997 3000 	ldrsb.w	r3, [r7]
 800af28:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800af2c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800af30:	b913      	cbnz	r3, 800af38 <pow+0x128>
 800af32:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800af36:	e7a7      	b.n	800ae88 <pow+0x78>
 800af38:	2000      	movs	r0, #0
 800af3a:	495e      	ldr	r1, [pc, #376]	; (800b0b4 <pow+0x2a4>)
 800af3c:	2b02      	cmp	r3, #2
 800af3e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800af42:	d1a1      	bne.n	800ae88 <pow+0x78>
 800af44:	f7ff fec6 	bl	800acd4 <__errno>
 800af48:	2321      	movs	r3, #33	; 0x21
 800af4a:	6003      	str	r3, [r0, #0]
 800af4c:	e7c8      	b.n	800aee0 <pow+0xd0>
 800af4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800af52:	f002 fd63 	bl	800da1c <finite>
 800af56:	9002      	str	r0, [sp, #8]
 800af58:	2800      	cmp	r0, #0
 800af5a:	d177      	bne.n	800b04c <pow+0x23c>
 800af5c:	4640      	mov	r0, r8
 800af5e:	4649      	mov	r1, r9
 800af60:	f002 fd5c 	bl	800da1c <finite>
 800af64:	2800      	cmp	r0, #0
 800af66:	d071      	beq.n	800b04c <pow+0x23c>
 800af68:	4620      	mov	r0, r4
 800af6a:	4629      	mov	r1, r5
 800af6c:	f002 fd56 	bl	800da1c <finite>
 800af70:	2800      	cmp	r0, #0
 800af72:	d06b      	beq.n	800b04c <pow+0x23c>
 800af74:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af78:	4619      	mov	r1, r3
 800af7a:	4610      	mov	r0, r2
 800af7c:	f7f5 fd3e 	bl	80009fc <__aeabi_dcmpun>
 800af80:	f997 7000 	ldrsb.w	r7, [r7]
 800af84:	4b49      	ldr	r3, [pc, #292]	; (800b0ac <pow+0x29c>)
 800af86:	b1a0      	cbz	r0, 800afb2 <pow+0x1a2>
 800af88:	2201      	movs	r2, #1
 800af8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af8e:	9b02      	ldr	r3, [sp, #8]
 800af90:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800af94:	930c      	str	r3, [sp, #48]	; 0x30
 800af96:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800af9a:	2f00      	cmp	r7, #0
 800af9c:	d0c9      	beq.n	800af32 <pow+0x122>
 800af9e:	4652      	mov	r2, sl
 800afa0:	465b      	mov	r3, fp
 800afa2:	4650      	mov	r0, sl
 800afa4:	4659      	mov	r1, fp
 800afa6:	f7f5 fbb9 	bl	800071c <__aeabi_ddiv>
 800afaa:	2f02      	cmp	r7, #2
 800afac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800afb0:	e7c7      	b.n	800af42 <pow+0x132>
 800afb2:	2203      	movs	r2, #3
 800afb4:	900c      	str	r0, [sp, #48]	; 0x30
 800afb6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800afba:	4620      	mov	r0, r4
 800afbc:	4629      	mov	r1, r5
 800afbe:	2200      	movs	r2, #0
 800afc0:	4b3d      	ldr	r3, [pc, #244]	; (800b0b8 <pow+0x2a8>)
 800afc2:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800afc6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800afca:	f7f5 fa7d 	bl	80004c8 <__aeabi_dmul>
 800afce:	4604      	mov	r4, r0
 800afd0:	460d      	mov	r5, r1
 800afd2:	bb17      	cbnz	r7, 800b01a <pow+0x20a>
 800afd4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800afd8:	4b38      	ldr	r3, [pc, #224]	; (800b0bc <pow+0x2ac>)
 800afda:	4640      	mov	r0, r8
 800afdc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800afe0:	4649      	mov	r1, r9
 800afe2:	4652      	mov	r2, sl
 800afe4:	465b      	mov	r3, fp
 800afe6:	f7f5 fce1 	bl	80009ac <__aeabi_dcmplt>
 800afea:	2800      	cmp	r0, #0
 800afec:	d054      	beq.n	800b098 <pow+0x288>
 800afee:	4620      	mov	r0, r4
 800aff0:	4629      	mov	r1, r5
 800aff2:	f002 fda5 	bl	800db40 <rint>
 800aff6:	4622      	mov	r2, r4
 800aff8:	462b      	mov	r3, r5
 800affa:	f7f5 fccd 	bl	8000998 <__aeabi_dcmpeq>
 800affe:	b920      	cbnz	r0, 800b00a <pow+0x1fa>
 800b000:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b004:	4b2e      	ldr	r3, [pc, #184]	; (800b0c0 <pow+0x2b0>)
 800b006:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b00a:	f996 3000 	ldrsb.w	r3, [r6]
 800b00e:	2b02      	cmp	r3, #2
 800b010:	d142      	bne.n	800b098 <pow+0x288>
 800b012:	f7ff fe5f 	bl	800acd4 <__errno>
 800b016:	2322      	movs	r3, #34	; 0x22
 800b018:	e797      	b.n	800af4a <pow+0x13a>
 800b01a:	2200      	movs	r2, #0
 800b01c:	4b29      	ldr	r3, [pc, #164]	; (800b0c4 <pow+0x2b4>)
 800b01e:	4640      	mov	r0, r8
 800b020:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b024:	4649      	mov	r1, r9
 800b026:	4652      	mov	r2, sl
 800b028:	465b      	mov	r3, fp
 800b02a:	f7f5 fcbf 	bl	80009ac <__aeabi_dcmplt>
 800b02e:	2800      	cmp	r0, #0
 800b030:	d0eb      	beq.n	800b00a <pow+0x1fa>
 800b032:	4620      	mov	r0, r4
 800b034:	4629      	mov	r1, r5
 800b036:	f002 fd83 	bl	800db40 <rint>
 800b03a:	4622      	mov	r2, r4
 800b03c:	462b      	mov	r3, r5
 800b03e:	f7f5 fcab 	bl	8000998 <__aeabi_dcmpeq>
 800b042:	2800      	cmp	r0, #0
 800b044:	d1e1      	bne.n	800b00a <pow+0x1fa>
 800b046:	2200      	movs	r2, #0
 800b048:	4b1a      	ldr	r3, [pc, #104]	; (800b0b4 <pow+0x2a4>)
 800b04a:	e7dc      	b.n	800b006 <pow+0x1f6>
 800b04c:	2200      	movs	r2, #0
 800b04e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b052:	2300      	movs	r3, #0
 800b054:	f7f5 fca0 	bl	8000998 <__aeabi_dcmpeq>
 800b058:	2800      	cmp	r0, #0
 800b05a:	f43f af4b 	beq.w	800aef4 <pow+0xe4>
 800b05e:	4640      	mov	r0, r8
 800b060:	4649      	mov	r1, r9
 800b062:	f002 fcdb 	bl	800da1c <finite>
 800b066:	2800      	cmp	r0, #0
 800b068:	f43f af44 	beq.w	800aef4 <pow+0xe4>
 800b06c:	4620      	mov	r0, r4
 800b06e:	4629      	mov	r1, r5
 800b070:	f002 fcd4 	bl	800da1c <finite>
 800b074:	2800      	cmp	r0, #0
 800b076:	f43f af3d 	beq.w	800aef4 <pow+0xe4>
 800b07a:	2304      	movs	r3, #4
 800b07c:	9304      	str	r3, [sp, #16]
 800b07e:	4b0b      	ldr	r3, [pc, #44]	; (800b0ac <pow+0x29c>)
 800b080:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800b084:	9305      	str	r3, [sp, #20]
 800b086:	2300      	movs	r3, #0
 800b088:	2400      	movs	r4, #0
 800b08a:	930c      	str	r3, [sp, #48]	; 0x30
 800b08c:	2300      	movs	r3, #0
 800b08e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800b092:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800b096:	e7b8      	b.n	800b00a <pow+0x1fa>
 800b098:	a804      	add	r0, sp, #16
 800b09a:	f002 fd49 	bl	800db30 <matherr>
 800b09e:	2800      	cmp	r0, #0
 800b0a0:	f47f af1e 	bne.w	800aee0 <pow+0xd0>
 800b0a4:	e7b5      	b.n	800b012 <pow+0x202>
 800b0a6:	bf00      	nop
 800b0a8:	200000b4 	.word	0x200000b4
 800b0ac:	0800e12c 	.word	0x0800e12c
 800b0b0:	3ff00000 	.word	0x3ff00000
 800b0b4:	fff00000 	.word	0xfff00000
 800b0b8:	3fe00000 	.word	0x3fe00000
 800b0bc:	47efffff 	.word	0x47efffff
 800b0c0:	c7efffff 	.word	0xc7efffff
 800b0c4:	7ff00000 	.word	0x7ff00000

0800b0c8 <sqrt>:
 800b0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0cc:	b08b      	sub	sp, #44	; 0x2c
 800b0ce:	4604      	mov	r4, r0
 800b0d0:	460d      	mov	r5, r1
 800b0d2:	f001 f82d 	bl	800c130 <__ieee754_sqrt>
 800b0d6:	4b24      	ldr	r3, [pc, #144]	; (800b168 <sqrt+0xa0>)
 800b0d8:	4680      	mov	r8, r0
 800b0da:	f993 a000 	ldrsb.w	sl, [r3]
 800b0de:	4689      	mov	r9, r1
 800b0e0:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800b0e4:	d02b      	beq.n	800b13e <sqrt+0x76>
 800b0e6:	4622      	mov	r2, r4
 800b0e8:	462b      	mov	r3, r5
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	4629      	mov	r1, r5
 800b0ee:	f7f5 fc85 	bl	80009fc <__aeabi_dcmpun>
 800b0f2:	4683      	mov	fp, r0
 800b0f4:	bb18      	cbnz	r0, 800b13e <sqrt+0x76>
 800b0f6:	2600      	movs	r6, #0
 800b0f8:	2700      	movs	r7, #0
 800b0fa:	4632      	mov	r2, r6
 800b0fc:	463b      	mov	r3, r7
 800b0fe:	4620      	mov	r0, r4
 800b100:	4629      	mov	r1, r5
 800b102:	f7f5 fc53 	bl	80009ac <__aeabi_dcmplt>
 800b106:	b1d0      	cbz	r0, 800b13e <sqrt+0x76>
 800b108:	2301      	movs	r3, #1
 800b10a:	9300      	str	r3, [sp, #0]
 800b10c:	4b17      	ldr	r3, [pc, #92]	; (800b16c <sqrt+0xa4>)
 800b10e:	f8cd b020 	str.w	fp, [sp, #32]
 800b112:	9301      	str	r3, [sp, #4]
 800b114:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b118:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b11c:	f1ba 0f00 	cmp.w	sl, #0
 800b120:	d112      	bne.n	800b148 <sqrt+0x80>
 800b122:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b126:	4668      	mov	r0, sp
 800b128:	f002 fd02 	bl	800db30 <matherr>
 800b12c:	b1b8      	cbz	r0, 800b15e <sqrt+0x96>
 800b12e:	9b08      	ldr	r3, [sp, #32]
 800b130:	b11b      	cbz	r3, 800b13a <sqrt+0x72>
 800b132:	f7ff fdcf 	bl	800acd4 <__errno>
 800b136:	9b08      	ldr	r3, [sp, #32]
 800b138:	6003      	str	r3, [r0, #0]
 800b13a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800b13e:	4640      	mov	r0, r8
 800b140:	4649      	mov	r1, r9
 800b142:	b00b      	add	sp, #44	; 0x2c
 800b144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b148:	4632      	mov	r2, r6
 800b14a:	463b      	mov	r3, r7
 800b14c:	4630      	mov	r0, r6
 800b14e:	4639      	mov	r1, r7
 800b150:	f7f5 fae4 	bl	800071c <__aeabi_ddiv>
 800b154:	f1ba 0f02 	cmp.w	sl, #2
 800b158:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b15c:	d1e3      	bne.n	800b126 <sqrt+0x5e>
 800b15e:	f7ff fdb9 	bl	800acd4 <__errno>
 800b162:	2321      	movs	r3, #33	; 0x21
 800b164:	6003      	str	r3, [r0, #0]
 800b166:	e7e2      	b.n	800b12e <sqrt+0x66>
 800b168:	200000b4 	.word	0x200000b4
 800b16c:	0800e130 	.word	0x0800e130

0800b170 <atan2f>:
 800b170:	f001 b88a 	b.w	800c288 <__ieee754_atan2f>
 800b174:	0000      	movs	r0, r0
	...

0800b178 <__ieee754_atan2>:
 800b178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b17c:	4256      	negs	r6, r2
 800b17e:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800b182:	4316      	orrs	r6, r2
 800b184:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 800b330 <__ieee754_atan2+0x1b8>
 800b188:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 800b18c:	454e      	cmp	r6, r9
 800b18e:	4604      	mov	r4, r0
 800b190:	460d      	mov	r5, r1
 800b192:	469e      	mov	lr, r3
 800b194:	d808      	bhi.n	800b1a8 <__ieee754_atan2+0x30>
 800b196:	4246      	negs	r6, r0
 800b198:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800b19c:	4306      	orrs	r6, r0
 800b19e:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 800b1a2:	454e      	cmp	r6, r9
 800b1a4:	4688      	mov	r8, r1
 800b1a6:	d906      	bls.n	800b1b6 <__ieee754_atan2+0x3e>
 800b1a8:	4620      	mov	r0, r4
 800b1aa:	4629      	mov	r1, r5
 800b1ac:	f7f4 ffd6 	bl	800015c <__adddf3>
 800b1b0:	4604      	mov	r4, r0
 800b1b2:	460d      	mov	r5, r1
 800b1b4:	e030      	b.n	800b218 <__ieee754_atan2+0xa0>
 800b1b6:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 800b1ba:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800b1be:	4316      	orrs	r6, r2
 800b1c0:	d103      	bne.n	800b1ca <__ieee754_atan2+0x52>
 800b1c2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c6:	f002 ba9b 	b.w	800d700 <atan>
 800b1ca:	179e      	asrs	r6, r3, #30
 800b1cc:	f006 0602 	and.w	r6, r6, #2
 800b1d0:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800b1d4:	ea57 0100 	orrs.w	r1, r7, r0
 800b1d8:	d107      	bne.n	800b1ea <__ieee754_atan2+0x72>
 800b1da:	2e02      	cmp	r6, #2
 800b1dc:	d079      	beq.n	800b2d2 <__ieee754_atan2+0x15a>
 800b1de:	2e03      	cmp	r6, #3
 800b1e0:	d11a      	bne.n	800b218 <__ieee754_atan2+0xa0>
 800b1e2:	a541      	add	r5, pc, #260	; (adr r5, 800b2e8 <__ieee754_atan2+0x170>)
 800b1e4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b1e8:	e016      	b.n	800b218 <__ieee754_atan2+0xa0>
 800b1ea:	ea5c 0102 	orrs.w	r1, ip, r2
 800b1ee:	d106      	bne.n	800b1fe <__ieee754_atan2+0x86>
 800b1f0:	f1b8 0f00 	cmp.w	r8, #0
 800b1f4:	da71      	bge.n	800b2da <__ieee754_atan2+0x162>
 800b1f6:	a53e      	add	r5, pc, #248	; (adr r5, 800b2f0 <__ieee754_atan2+0x178>)
 800b1f8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b1fc:	e00c      	b.n	800b218 <__ieee754_atan2+0xa0>
 800b1fe:	45cc      	cmp	ip, r9
 800b200:	d123      	bne.n	800b24a <__ieee754_atan2+0xd2>
 800b202:	4567      	cmp	r7, ip
 800b204:	d114      	bne.n	800b230 <__ieee754_atan2+0xb8>
 800b206:	2e02      	cmp	r6, #2
 800b208:	d00a      	beq.n	800b220 <__ieee754_atan2+0xa8>
 800b20a:	2e03      	cmp	r6, #3
 800b20c:	d00c      	beq.n	800b228 <__ieee754_atan2+0xb0>
 800b20e:	2e01      	cmp	r6, #1
 800b210:	d15b      	bne.n	800b2ca <__ieee754_atan2+0x152>
 800b212:	a539      	add	r5, pc, #228	; (adr r5, 800b2f8 <__ieee754_atan2+0x180>)
 800b214:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b218:	4620      	mov	r0, r4
 800b21a:	4629      	mov	r1, r5
 800b21c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b220:	a537      	add	r5, pc, #220	; (adr r5, 800b300 <__ieee754_atan2+0x188>)
 800b222:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b226:	e7f7      	b.n	800b218 <__ieee754_atan2+0xa0>
 800b228:	a537      	add	r5, pc, #220	; (adr r5, 800b308 <__ieee754_atan2+0x190>)
 800b22a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b22e:	e7f3      	b.n	800b218 <__ieee754_atan2+0xa0>
 800b230:	2e02      	cmp	r6, #2
 800b232:	d04e      	beq.n	800b2d2 <__ieee754_atan2+0x15a>
 800b234:	2e03      	cmp	r6, #3
 800b236:	d0d4      	beq.n	800b1e2 <__ieee754_atan2+0x6a>
 800b238:	2e01      	cmp	r6, #1
 800b23a:	f04f 0400 	mov.w	r4, #0
 800b23e:	d102      	bne.n	800b246 <__ieee754_atan2+0xce>
 800b240:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800b244:	e7e8      	b.n	800b218 <__ieee754_atan2+0xa0>
 800b246:	2500      	movs	r5, #0
 800b248:	e7e6      	b.n	800b218 <__ieee754_atan2+0xa0>
 800b24a:	454f      	cmp	r7, r9
 800b24c:	d0d0      	beq.n	800b1f0 <__ieee754_atan2+0x78>
 800b24e:	eba7 070c 	sub.w	r7, r7, ip
 800b252:	153f      	asrs	r7, r7, #20
 800b254:	2f3c      	cmp	r7, #60	; 0x3c
 800b256:	dc1e      	bgt.n	800b296 <__ieee754_atan2+0x11e>
 800b258:	2b00      	cmp	r3, #0
 800b25a:	da01      	bge.n	800b260 <__ieee754_atan2+0xe8>
 800b25c:	373c      	adds	r7, #60	; 0x3c
 800b25e:	db1e      	blt.n	800b29e <__ieee754_atan2+0x126>
 800b260:	4620      	mov	r0, r4
 800b262:	4629      	mov	r1, r5
 800b264:	f7f5 fa5a 	bl	800071c <__aeabi_ddiv>
 800b268:	f002 fbd4 	bl	800da14 <fabs>
 800b26c:	f002 fa48 	bl	800d700 <atan>
 800b270:	4604      	mov	r4, r0
 800b272:	460d      	mov	r5, r1
 800b274:	2e01      	cmp	r6, #1
 800b276:	d015      	beq.n	800b2a4 <__ieee754_atan2+0x12c>
 800b278:	2e02      	cmp	r6, #2
 800b27a:	d017      	beq.n	800b2ac <__ieee754_atan2+0x134>
 800b27c:	2e00      	cmp	r6, #0
 800b27e:	d0cb      	beq.n	800b218 <__ieee754_atan2+0xa0>
 800b280:	a323      	add	r3, pc, #140	; (adr r3, 800b310 <__ieee754_atan2+0x198>)
 800b282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b286:	4620      	mov	r0, r4
 800b288:	4629      	mov	r1, r5
 800b28a:	f7f4 ff65 	bl	8000158 <__aeabi_dsub>
 800b28e:	a322      	add	r3, pc, #136	; (adr r3, 800b318 <__ieee754_atan2+0x1a0>)
 800b290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b294:	e016      	b.n	800b2c4 <__ieee754_atan2+0x14c>
 800b296:	a522      	add	r5, pc, #136	; (adr r5, 800b320 <__ieee754_atan2+0x1a8>)
 800b298:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b29c:	e7ea      	b.n	800b274 <__ieee754_atan2+0xfc>
 800b29e:	2400      	movs	r4, #0
 800b2a0:	2500      	movs	r5, #0
 800b2a2:	e7e7      	b.n	800b274 <__ieee754_atan2+0xfc>
 800b2a4:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800b2a8:	461d      	mov	r5, r3
 800b2aa:	e7b5      	b.n	800b218 <__ieee754_atan2+0xa0>
 800b2ac:	a318      	add	r3, pc, #96	; (adr r3, 800b310 <__ieee754_atan2+0x198>)
 800b2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	4629      	mov	r1, r5
 800b2b6:	f7f4 ff4f 	bl	8000158 <__aeabi_dsub>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	460b      	mov	r3, r1
 800b2be:	a116      	add	r1, pc, #88	; (adr r1, 800b318 <__ieee754_atan2+0x1a0>)
 800b2c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b2c4:	f7f4 ff48 	bl	8000158 <__aeabi_dsub>
 800b2c8:	e772      	b.n	800b1b0 <__ieee754_atan2+0x38>
 800b2ca:	a517      	add	r5, pc, #92	; (adr r5, 800b328 <__ieee754_atan2+0x1b0>)
 800b2cc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b2d0:	e7a2      	b.n	800b218 <__ieee754_atan2+0xa0>
 800b2d2:	a511      	add	r5, pc, #68	; (adr r5, 800b318 <__ieee754_atan2+0x1a0>)
 800b2d4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b2d8:	e79e      	b.n	800b218 <__ieee754_atan2+0xa0>
 800b2da:	a511      	add	r5, pc, #68	; (adr r5, 800b320 <__ieee754_atan2+0x1a8>)
 800b2dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b2e0:	e79a      	b.n	800b218 <__ieee754_atan2+0xa0>
 800b2e2:	bf00      	nop
 800b2e4:	f3af 8000 	nop.w
 800b2e8:	54442d18 	.word	0x54442d18
 800b2ec:	c00921fb 	.word	0xc00921fb
 800b2f0:	54442d18 	.word	0x54442d18
 800b2f4:	bff921fb 	.word	0xbff921fb
 800b2f8:	54442d18 	.word	0x54442d18
 800b2fc:	bfe921fb 	.word	0xbfe921fb
 800b300:	7f3321d2 	.word	0x7f3321d2
 800b304:	4002d97c 	.word	0x4002d97c
 800b308:	7f3321d2 	.word	0x7f3321d2
 800b30c:	c002d97c 	.word	0xc002d97c
 800b310:	33145c07 	.word	0x33145c07
 800b314:	3ca1a626 	.word	0x3ca1a626
 800b318:	54442d18 	.word	0x54442d18
 800b31c:	400921fb 	.word	0x400921fb
 800b320:	54442d18 	.word	0x54442d18
 800b324:	3ff921fb 	.word	0x3ff921fb
 800b328:	54442d18 	.word	0x54442d18
 800b32c:	3fe921fb 	.word	0x3fe921fb
 800b330:	7ff00000 	.word	0x7ff00000
 800b334:	00000000 	.word	0x00000000

0800b338 <__ieee754_pow>:
 800b338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b33c:	b091      	sub	sp, #68	; 0x44
 800b33e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b342:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800b346:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800b34a:	ea55 0302 	orrs.w	r3, r5, r2
 800b34e:	4607      	mov	r7, r0
 800b350:	4688      	mov	r8, r1
 800b352:	f000 84b7 	beq.w	800bcc4 <__ieee754_pow+0x98c>
 800b356:	4b80      	ldr	r3, [pc, #512]	; (800b558 <__ieee754_pow+0x220>)
 800b358:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800b35c:	429c      	cmp	r4, r3
 800b35e:	4689      	mov	r9, r1
 800b360:	4682      	mov	sl, r0
 800b362:	dc09      	bgt.n	800b378 <__ieee754_pow+0x40>
 800b364:	d103      	bne.n	800b36e <__ieee754_pow+0x36>
 800b366:	b938      	cbnz	r0, 800b378 <__ieee754_pow+0x40>
 800b368:	42a5      	cmp	r5, r4
 800b36a:	dc0d      	bgt.n	800b388 <__ieee754_pow+0x50>
 800b36c:	e001      	b.n	800b372 <__ieee754_pow+0x3a>
 800b36e:	429d      	cmp	r5, r3
 800b370:	dc02      	bgt.n	800b378 <__ieee754_pow+0x40>
 800b372:	429d      	cmp	r5, r3
 800b374:	d10e      	bne.n	800b394 <__ieee754_pow+0x5c>
 800b376:	b16a      	cbz	r2, 800b394 <__ieee754_pow+0x5c>
 800b378:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b37c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b380:	ea54 030a 	orrs.w	r3, r4, sl
 800b384:	f000 849e 	beq.w	800bcc4 <__ieee754_pow+0x98c>
 800b388:	4874      	ldr	r0, [pc, #464]	; (800b55c <__ieee754_pow+0x224>)
 800b38a:	b011      	add	sp, #68	; 0x44
 800b38c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b390:	f002 bbd0 	b.w	800db34 <nan>
 800b394:	f1b9 0f00 	cmp.w	r9, #0
 800b398:	da53      	bge.n	800b442 <__ieee754_pow+0x10a>
 800b39a:	4b71      	ldr	r3, [pc, #452]	; (800b560 <__ieee754_pow+0x228>)
 800b39c:	429d      	cmp	r5, r3
 800b39e:	dc4e      	bgt.n	800b43e <__ieee754_pow+0x106>
 800b3a0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b3a4:	429d      	cmp	r5, r3
 800b3a6:	dd4c      	ble.n	800b442 <__ieee754_pow+0x10a>
 800b3a8:	152b      	asrs	r3, r5, #20
 800b3aa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b3ae:	2b14      	cmp	r3, #20
 800b3b0:	dd28      	ble.n	800b404 <__ieee754_pow+0xcc>
 800b3b2:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b3b6:	fa22 f103 	lsr.w	r1, r2, r3
 800b3ba:	fa01 f303 	lsl.w	r3, r1, r3
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d13f      	bne.n	800b442 <__ieee754_pow+0x10a>
 800b3c2:	f001 0101 	and.w	r1, r1, #1
 800b3c6:	f1c1 0302 	rsb	r3, r1, #2
 800b3ca:	9300      	str	r3, [sp, #0]
 800b3cc:	2a00      	cmp	r2, #0
 800b3ce:	d15c      	bne.n	800b48a <__ieee754_pow+0x152>
 800b3d0:	4b61      	ldr	r3, [pc, #388]	; (800b558 <__ieee754_pow+0x220>)
 800b3d2:	429d      	cmp	r5, r3
 800b3d4:	d126      	bne.n	800b424 <__ieee754_pow+0xec>
 800b3d6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b3da:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b3de:	ea53 030a 	orrs.w	r3, r3, sl
 800b3e2:	f000 846f 	beq.w	800bcc4 <__ieee754_pow+0x98c>
 800b3e6:	4b5f      	ldr	r3, [pc, #380]	; (800b564 <__ieee754_pow+0x22c>)
 800b3e8:	429c      	cmp	r4, r3
 800b3ea:	dd2c      	ble.n	800b446 <__ieee754_pow+0x10e>
 800b3ec:	2e00      	cmp	r6, #0
 800b3ee:	f280 846f 	bge.w	800bcd0 <__ieee754_pow+0x998>
 800b3f2:	f04f 0b00 	mov.w	fp, #0
 800b3f6:	f04f 0c00 	mov.w	ip, #0
 800b3fa:	4658      	mov	r0, fp
 800b3fc:	4661      	mov	r1, ip
 800b3fe:	b011      	add	sp, #68	; 0x44
 800b400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b404:	2a00      	cmp	r2, #0
 800b406:	d13e      	bne.n	800b486 <__ieee754_pow+0x14e>
 800b408:	f1c3 0314 	rsb	r3, r3, #20
 800b40c:	fa45 f103 	asr.w	r1, r5, r3
 800b410:	fa01 f303 	lsl.w	r3, r1, r3
 800b414:	42ab      	cmp	r3, r5
 800b416:	f040 8463 	bne.w	800bce0 <__ieee754_pow+0x9a8>
 800b41a:	f001 0101 	and.w	r1, r1, #1
 800b41e:	f1c1 0302 	rsb	r3, r1, #2
 800b422:	9300      	str	r3, [sp, #0]
 800b424:	4b50      	ldr	r3, [pc, #320]	; (800b568 <__ieee754_pow+0x230>)
 800b426:	429d      	cmp	r5, r3
 800b428:	d114      	bne.n	800b454 <__ieee754_pow+0x11c>
 800b42a:	2e00      	cmp	r6, #0
 800b42c:	f280 8454 	bge.w	800bcd8 <__ieee754_pow+0x9a0>
 800b430:	463a      	mov	r2, r7
 800b432:	4643      	mov	r3, r8
 800b434:	2000      	movs	r0, #0
 800b436:	494c      	ldr	r1, [pc, #304]	; (800b568 <__ieee754_pow+0x230>)
 800b438:	f7f5 f970 	bl	800071c <__aeabi_ddiv>
 800b43c:	e013      	b.n	800b466 <__ieee754_pow+0x12e>
 800b43e:	2302      	movs	r3, #2
 800b440:	e7c3      	b.n	800b3ca <__ieee754_pow+0x92>
 800b442:	2300      	movs	r3, #0
 800b444:	e7c1      	b.n	800b3ca <__ieee754_pow+0x92>
 800b446:	2e00      	cmp	r6, #0
 800b448:	dad3      	bge.n	800b3f2 <__ieee754_pow+0xba>
 800b44a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800b44e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800b452:	e7d2      	b.n	800b3fa <__ieee754_pow+0xc2>
 800b454:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800b458:	d108      	bne.n	800b46c <__ieee754_pow+0x134>
 800b45a:	463a      	mov	r2, r7
 800b45c:	4643      	mov	r3, r8
 800b45e:	4638      	mov	r0, r7
 800b460:	4641      	mov	r1, r8
 800b462:	f7f5 f831 	bl	80004c8 <__aeabi_dmul>
 800b466:	4683      	mov	fp, r0
 800b468:	468c      	mov	ip, r1
 800b46a:	e7c6      	b.n	800b3fa <__ieee754_pow+0xc2>
 800b46c:	4b3f      	ldr	r3, [pc, #252]	; (800b56c <__ieee754_pow+0x234>)
 800b46e:	429e      	cmp	r6, r3
 800b470:	d10b      	bne.n	800b48a <__ieee754_pow+0x152>
 800b472:	f1b9 0f00 	cmp.w	r9, #0
 800b476:	db08      	blt.n	800b48a <__ieee754_pow+0x152>
 800b478:	4638      	mov	r0, r7
 800b47a:	4641      	mov	r1, r8
 800b47c:	b011      	add	sp, #68	; 0x44
 800b47e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b482:	f000 be55 	b.w	800c130 <__ieee754_sqrt>
 800b486:	2300      	movs	r3, #0
 800b488:	9300      	str	r3, [sp, #0]
 800b48a:	4638      	mov	r0, r7
 800b48c:	4641      	mov	r1, r8
 800b48e:	f002 fac1 	bl	800da14 <fabs>
 800b492:	4683      	mov	fp, r0
 800b494:	468c      	mov	ip, r1
 800b496:	f1ba 0f00 	cmp.w	sl, #0
 800b49a:	d12b      	bne.n	800b4f4 <__ieee754_pow+0x1bc>
 800b49c:	b124      	cbz	r4, 800b4a8 <__ieee754_pow+0x170>
 800b49e:	4b32      	ldr	r3, [pc, #200]	; (800b568 <__ieee754_pow+0x230>)
 800b4a0:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800b4a4:	429a      	cmp	r2, r3
 800b4a6:	d125      	bne.n	800b4f4 <__ieee754_pow+0x1bc>
 800b4a8:	2e00      	cmp	r6, #0
 800b4aa:	da07      	bge.n	800b4bc <__ieee754_pow+0x184>
 800b4ac:	465a      	mov	r2, fp
 800b4ae:	4663      	mov	r3, ip
 800b4b0:	2000      	movs	r0, #0
 800b4b2:	492d      	ldr	r1, [pc, #180]	; (800b568 <__ieee754_pow+0x230>)
 800b4b4:	f7f5 f932 	bl	800071c <__aeabi_ddiv>
 800b4b8:	4683      	mov	fp, r0
 800b4ba:	468c      	mov	ip, r1
 800b4bc:	f1b9 0f00 	cmp.w	r9, #0
 800b4c0:	da9b      	bge.n	800b3fa <__ieee754_pow+0xc2>
 800b4c2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b4c6:	9b00      	ldr	r3, [sp, #0]
 800b4c8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b4cc:	4323      	orrs	r3, r4
 800b4ce:	d108      	bne.n	800b4e2 <__ieee754_pow+0x1aa>
 800b4d0:	465a      	mov	r2, fp
 800b4d2:	4663      	mov	r3, ip
 800b4d4:	4658      	mov	r0, fp
 800b4d6:	4661      	mov	r1, ip
 800b4d8:	f7f4 fe3e 	bl	8000158 <__aeabi_dsub>
 800b4dc:	4602      	mov	r2, r0
 800b4de:	460b      	mov	r3, r1
 800b4e0:	e7aa      	b.n	800b438 <__ieee754_pow+0x100>
 800b4e2:	9b00      	ldr	r3, [sp, #0]
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d188      	bne.n	800b3fa <__ieee754_pow+0xc2>
 800b4e8:	4658      	mov	r0, fp
 800b4ea:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800b4ee:	4683      	mov	fp, r0
 800b4f0:	469c      	mov	ip, r3
 800b4f2:	e782      	b.n	800b3fa <__ieee754_pow+0xc2>
 800b4f4:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 800b4f8:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800b4fc:	930d      	str	r3, [sp, #52]	; 0x34
 800b4fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b500:	9b00      	ldr	r3, [sp, #0]
 800b502:	4313      	orrs	r3, r2
 800b504:	d104      	bne.n	800b510 <__ieee754_pow+0x1d8>
 800b506:	463a      	mov	r2, r7
 800b508:	4643      	mov	r3, r8
 800b50a:	4638      	mov	r0, r7
 800b50c:	4641      	mov	r1, r8
 800b50e:	e7e3      	b.n	800b4d8 <__ieee754_pow+0x1a0>
 800b510:	4b17      	ldr	r3, [pc, #92]	; (800b570 <__ieee754_pow+0x238>)
 800b512:	429d      	cmp	r5, r3
 800b514:	f340 80fe 	ble.w	800b714 <__ieee754_pow+0x3dc>
 800b518:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b51c:	429d      	cmp	r5, r3
 800b51e:	dd0b      	ble.n	800b538 <__ieee754_pow+0x200>
 800b520:	4b10      	ldr	r3, [pc, #64]	; (800b564 <__ieee754_pow+0x22c>)
 800b522:	429c      	cmp	r4, r3
 800b524:	dc0e      	bgt.n	800b544 <__ieee754_pow+0x20c>
 800b526:	2e00      	cmp	r6, #0
 800b528:	f6bf af63 	bge.w	800b3f2 <__ieee754_pow+0xba>
 800b52c:	a308      	add	r3, pc, #32	; (adr r3, 800b550 <__ieee754_pow+0x218>)
 800b52e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b532:	4610      	mov	r0, r2
 800b534:	4619      	mov	r1, r3
 800b536:	e794      	b.n	800b462 <__ieee754_pow+0x12a>
 800b538:	4b0e      	ldr	r3, [pc, #56]	; (800b574 <__ieee754_pow+0x23c>)
 800b53a:	429c      	cmp	r4, r3
 800b53c:	ddf3      	ble.n	800b526 <__ieee754_pow+0x1ee>
 800b53e:	4b0a      	ldr	r3, [pc, #40]	; (800b568 <__ieee754_pow+0x230>)
 800b540:	429c      	cmp	r4, r3
 800b542:	dd19      	ble.n	800b578 <__ieee754_pow+0x240>
 800b544:	2e00      	cmp	r6, #0
 800b546:	dcf1      	bgt.n	800b52c <__ieee754_pow+0x1f4>
 800b548:	e753      	b.n	800b3f2 <__ieee754_pow+0xba>
 800b54a:	bf00      	nop
 800b54c:	f3af 8000 	nop.w
 800b550:	8800759c 	.word	0x8800759c
 800b554:	7e37e43c 	.word	0x7e37e43c
 800b558:	7ff00000 	.word	0x7ff00000
 800b55c:	0800e134 	.word	0x0800e134
 800b560:	433fffff 	.word	0x433fffff
 800b564:	3fefffff 	.word	0x3fefffff
 800b568:	3ff00000 	.word	0x3ff00000
 800b56c:	3fe00000 	.word	0x3fe00000
 800b570:	41e00000 	.word	0x41e00000
 800b574:	3feffffe 	.word	0x3feffffe
 800b578:	4661      	mov	r1, ip
 800b57a:	2200      	movs	r2, #0
 800b57c:	4b60      	ldr	r3, [pc, #384]	; (800b700 <__ieee754_pow+0x3c8>)
 800b57e:	4658      	mov	r0, fp
 800b580:	f7f4 fdea 	bl	8000158 <__aeabi_dsub>
 800b584:	a354      	add	r3, pc, #336	; (adr r3, 800b6d8 <__ieee754_pow+0x3a0>)
 800b586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58a:	4604      	mov	r4, r0
 800b58c:	460d      	mov	r5, r1
 800b58e:	f7f4 ff9b 	bl	80004c8 <__aeabi_dmul>
 800b592:	a353      	add	r3, pc, #332	; (adr r3, 800b6e0 <__ieee754_pow+0x3a8>)
 800b594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b598:	4606      	mov	r6, r0
 800b59a:	460f      	mov	r7, r1
 800b59c:	4620      	mov	r0, r4
 800b59e:	4629      	mov	r1, r5
 800b5a0:	f7f4 ff92 	bl	80004c8 <__aeabi_dmul>
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	4682      	mov	sl, r0
 800b5a8:	468b      	mov	fp, r1
 800b5aa:	4b56      	ldr	r3, [pc, #344]	; (800b704 <__ieee754_pow+0x3cc>)
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	4629      	mov	r1, r5
 800b5b0:	f7f4 ff8a 	bl	80004c8 <__aeabi_dmul>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	a14b      	add	r1, pc, #300	; (adr r1, 800b6e8 <__ieee754_pow+0x3b0>)
 800b5ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5be:	f7f4 fdcb 	bl	8000158 <__aeabi_dsub>
 800b5c2:	4622      	mov	r2, r4
 800b5c4:	462b      	mov	r3, r5
 800b5c6:	f7f4 ff7f 	bl	80004c8 <__aeabi_dmul>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	460b      	mov	r3, r1
 800b5ce:	2000      	movs	r0, #0
 800b5d0:	494d      	ldr	r1, [pc, #308]	; (800b708 <__ieee754_pow+0x3d0>)
 800b5d2:	f7f4 fdc1 	bl	8000158 <__aeabi_dsub>
 800b5d6:	4622      	mov	r2, r4
 800b5d8:	462b      	mov	r3, r5
 800b5da:	4680      	mov	r8, r0
 800b5dc:	4689      	mov	r9, r1
 800b5de:	4620      	mov	r0, r4
 800b5e0:	4629      	mov	r1, r5
 800b5e2:	f7f4 ff71 	bl	80004c8 <__aeabi_dmul>
 800b5e6:	4602      	mov	r2, r0
 800b5e8:	460b      	mov	r3, r1
 800b5ea:	4640      	mov	r0, r8
 800b5ec:	4649      	mov	r1, r9
 800b5ee:	f7f4 ff6b 	bl	80004c8 <__aeabi_dmul>
 800b5f2:	a33f      	add	r3, pc, #252	; (adr r3, 800b6f0 <__ieee754_pow+0x3b8>)
 800b5f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5f8:	f7f4 ff66 	bl	80004c8 <__aeabi_dmul>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	460b      	mov	r3, r1
 800b600:	4650      	mov	r0, sl
 800b602:	4659      	mov	r1, fp
 800b604:	f7f4 fda8 	bl	8000158 <__aeabi_dsub>
 800b608:	4602      	mov	r2, r0
 800b60a:	460b      	mov	r3, r1
 800b60c:	4604      	mov	r4, r0
 800b60e:	460d      	mov	r5, r1
 800b610:	4630      	mov	r0, r6
 800b612:	4639      	mov	r1, r7
 800b614:	f7f4 fda2 	bl	800015c <__adddf3>
 800b618:	2000      	movs	r0, #0
 800b61a:	468b      	mov	fp, r1
 800b61c:	4682      	mov	sl, r0
 800b61e:	4632      	mov	r2, r6
 800b620:	463b      	mov	r3, r7
 800b622:	f7f4 fd99 	bl	8000158 <__aeabi_dsub>
 800b626:	4602      	mov	r2, r0
 800b628:	460b      	mov	r3, r1
 800b62a:	4620      	mov	r0, r4
 800b62c:	4629      	mov	r1, r5
 800b62e:	f7f4 fd93 	bl	8000158 <__aeabi_dsub>
 800b632:	9b00      	ldr	r3, [sp, #0]
 800b634:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b636:	3b01      	subs	r3, #1
 800b638:	4313      	orrs	r3, r2
 800b63a:	f04f 0300 	mov.w	r3, #0
 800b63e:	bf0c      	ite	eq
 800b640:	4c32      	ldreq	r4, [pc, #200]	; (800b70c <__ieee754_pow+0x3d4>)
 800b642:	4c2f      	ldrne	r4, [pc, #188]	; (800b700 <__ieee754_pow+0x3c8>)
 800b644:	4606      	mov	r6, r0
 800b646:	e9cd 3400 	strd	r3, r4, [sp]
 800b64a:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b64e:	2400      	movs	r4, #0
 800b650:	460f      	mov	r7, r1
 800b652:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b656:	4622      	mov	r2, r4
 800b658:	462b      	mov	r3, r5
 800b65a:	f7f4 fd7d 	bl	8000158 <__aeabi_dsub>
 800b65e:	4652      	mov	r2, sl
 800b660:	465b      	mov	r3, fp
 800b662:	f7f4 ff31 	bl	80004c8 <__aeabi_dmul>
 800b666:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b66a:	4680      	mov	r8, r0
 800b66c:	4689      	mov	r9, r1
 800b66e:	4630      	mov	r0, r6
 800b670:	4639      	mov	r1, r7
 800b672:	f7f4 ff29 	bl	80004c8 <__aeabi_dmul>
 800b676:	4602      	mov	r2, r0
 800b678:	460b      	mov	r3, r1
 800b67a:	4640      	mov	r0, r8
 800b67c:	4649      	mov	r1, r9
 800b67e:	f7f4 fd6d 	bl	800015c <__adddf3>
 800b682:	4622      	mov	r2, r4
 800b684:	462b      	mov	r3, r5
 800b686:	4680      	mov	r8, r0
 800b688:	4689      	mov	r9, r1
 800b68a:	4650      	mov	r0, sl
 800b68c:	4659      	mov	r1, fp
 800b68e:	f7f4 ff1b 	bl	80004c8 <__aeabi_dmul>
 800b692:	4604      	mov	r4, r0
 800b694:	460d      	mov	r5, r1
 800b696:	460b      	mov	r3, r1
 800b698:	4602      	mov	r2, r0
 800b69a:	4649      	mov	r1, r9
 800b69c:	4640      	mov	r0, r8
 800b69e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b6a2:	f7f4 fd5b 	bl	800015c <__adddf3>
 800b6a6:	4b1a      	ldr	r3, [pc, #104]	; (800b710 <__ieee754_pow+0x3d8>)
 800b6a8:	4682      	mov	sl, r0
 800b6aa:	4299      	cmp	r1, r3
 800b6ac:	460f      	mov	r7, r1
 800b6ae:	460e      	mov	r6, r1
 800b6b0:	f340 82e1 	ble.w	800bc76 <__ieee754_pow+0x93e>
 800b6b4:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800b6b8:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800b6bc:	4303      	orrs	r3, r0
 800b6be:	f000 81db 	beq.w	800ba78 <__ieee754_pow+0x740>
 800b6c2:	a30d      	add	r3, pc, #52	; (adr r3, 800b6f8 <__ieee754_pow+0x3c0>)
 800b6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b6cc:	f7f4 fefc 	bl	80004c8 <__aeabi_dmul>
 800b6d0:	a309      	add	r3, pc, #36	; (adr r3, 800b6f8 <__ieee754_pow+0x3c0>)
 800b6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d6:	e6c4      	b.n	800b462 <__ieee754_pow+0x12a>
 800b6d8:	60000000 	.word	0x60000000
 800b6dc:	3ff71547 	.word	0x3ff71547
 800b6e0:	f85ddf44 	.word	0xf85ddf44
 800b6e4:	3e54ae0b 	.word	0x3e54ae0b
 800b6e8:	55555555 	.word	0x55555555
 800b6ec:	3fd55555 	.word	0x3fd55555
 800b6f0:	652b82fe 	.word	0x652b82fe
 800b6f4:	3ff71547 	.word	0x3ff71547
 800b6f8:	8800759c 	.word	0x8800759c
 800b6fc:	7e37e43c 	.word	0x7e37e43c
 800b700:	3ff00000 	.word	0x3ff00000
 800b704:	3fd00000 	.word	0x3fd00000
 800b708:	3fe00000 	.word	0x3fe00000
 800b70c:	bff00000 	.word	0xbff00000
 800b710:	408fffff 	.word	0x408fffff
 800b714:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800b718:	f04f 0200 	mov.w	r2, #0
 800b71c:	da08      	bge.n	800b730 <__ieee754_pow+0x3f8>
 800b71e:	4658      	mov	r0, fp
 800b720:	4bcd      	ldr	r3, [pc, #820]	; (800ba58 <__ieee754_pow+0x720>)
 800b722:	4661      	mov	r1, ip
 800b724:	f7f4 fed0 	bl	80004c8 <__aeabi_dmul>
 800b728:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800b72c:	4683      	mov	fp, r0
 800b72e:	460c      	mov	r4, r1
 800b730:	1523      	asrs	r3, r4, #20
 800b732:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b736:	4413      	add	r3, r2
 800b738:	930c      	str	r3, [sp, #48]	; 0x30
 800b73a:	4bc8      	ldr	r3, [pc, #800]	; (800ba5c <__ieee754_pow+0x724>)
 800b73c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800b740:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800b744:	429c      	cmp	r4, r3
 800b746:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b74a:	dd08      	ble.n	800b75e <__ieee754_pow+0x426>
 800b74c:	4bc4      	ldr	r3, [pc, #784]	; (800ba60 <__ieee754_pow+0x728>)
 800b74e:	429c      	cmp	r4, r3
 800b750:	f340 815b 	ble.w	800ba0a <__ieee754_pow+0x6d2>
 800b754:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b756:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800b75a:	3301      	adds	r3, #1
 800b75c:	930c      	str	r3, [sp, #48]	; 0x30
 800b75e:	f04f 0800 	mov.w	r8, #0
 800b762:	4658      	mov	r0, fp
 800b764:	4629      	mov	r1, r5
 800b766:	4bbf      	ldr	r3, [pc, #764]	; (800ba64 <__ieee754_pow+0x72c>)
 800b768:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800b76c:	444b      	add	r3, r9
 800b76e:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b772:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800b776:	461a      	mov	r2, r3
 800b778:	4623      	mov	r3, r4
 800b77a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b77e:	f7f4 fceb 	bl	8000158 <__aeabi_dsub>
 800b782:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b786:	4606      	mov	r6, r0
 800b788:	460f      	mov	r7, r1
 800b78a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b78e:	f7f4 fce5 	bl	800015c <__adddf3>
 800b792:	4602      	mov	r2, r0
 800b794:	460b      	mov	r3, r1
 800b796:	2000      	movs	r0, #0
 800b798:	49b3      	ldr	r1, [pc, #716]	; (800ba68 <__ieee754_pow+0x730>)
 800b79a:	f7f4 ffbf 	bl	800071c <__aeabi_ddiv>
 800b79e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	4630      	mov	r0, r6
 800b7a8:	4639      	mov	r1, r7
 800b7aa:	f7f4 fe8d 	bl	80004c8 <__aeabi_dmul>
 800b7ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b7b2:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800b7b6:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	2200      	movs	r2, #0
 800b7be:	106d      	asrs	r5, r5, #1
 800b7c0:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800b7c4:	9304      	str	r3, [sp, #16]
 800b7c6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800b7ca:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b7ce:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 800b7d2:	4650      	mov	r0, sl
 800b7d4:	4659      	mov	r1, fp
 800b7d6:	4614      	mov	r4, r2
 800b7d8:	461d      	mov	r5, r3
 800b7da:	f7f4 fe75 	bl	80004c8 <__aeabi_dmul>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	4639      	mov	r1, r7
 800b7e6:	f7f4 fcb7 	bl	8000158 <__aeabi_dsub>
 800b7ea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b7ee:	4606      	mov	r6, r0
 800b7f0:	460f      	mov	r7, r1
 800b7f2:	4620      	mov	r0, r4
 800b7f4:	4629      	mov	r1, r5
 800b7f6:	f7f4 fcaf 	bl	8000158 <__aeabi_dsub>
 800b7fa:	4602      	mov	r2, r0
 800b7fc:	460b      	mov	r3, r1
 800b7fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800b802:	f7f4 fca9 	bl	8000158 <__aeabi_dsub>
 800b806:	4652      	mov	r2, sl
 800b808:	465b      	mov	r3, fp
 800b80a:	f7f4 fe5d 	bl	80004c8 <__aeabi_dmul>
 800b80e:	4602      	mov	r2, r0
 800b810:	460b      	mov	r3, r1
 800b812:	4630      	mov	r0, r6
 800b814:	4639      	mov	r1, r7
 800b816:	f7f4 fc9f 	bl	8000158 <__aeabi_dsub>
 800b81a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b81e:	f7f4 fe53 	bl	80004c8 <__aeabi_dmul>
 800b822:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b826:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b82a:	4610      	mov	r0, r2
 800b82c:	4619      	mov	r1, r3
 800b82e:	f7f4 fe4b 	bl	80004c8 <__aeabi_dmul>
 800b832:	a377      	add	r3, pc, #476	; (adr r3, 800ba10 <__ieee754_pow+0x6d8>)
 800b834:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b838:	4604      	mov	r4, r0
 800b83a:	460d      	mov	r5, r1
 800b83c:	f7f4 fe44 	bl	80004c8 <__aeabi_dmul>
 800b840:	a375      	add	r3, pc, #468	; (adr r3, 800ba18 <__ieee754_pow+0x6e0>)
 800b842:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b846:	f7f4 fc89 	bl	800015c <__adddf3>
 800b84a:	4622      	mov	r2, r4
 800b84c:	462b      	mov	r3, r5
 800b84e:	f7f4 fe3b 	bl	80004c8 <__aeabi_dmul>
 800b852:	a373      	add	r3, pc, #460	; (adr r3, 800ba20 <__ieee754_pow+0x6e8>)
 800b854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b858:	f7f4 fc80 	bl	800015c <__adddf3>
 800b85c:	4622      	mov	r2, r4
 800b85e:	462b      	mov	r3, r5
 800b860:	f7f4 fe32 	bl	80004c8 <__aeabi_dmul>
 800b864:	a370      	add	r3, pc, #448	; (adr r3, 800ba28 <__ieee754_pow+0x6f0>)
 800b866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b86a:	f7f4 fc77 	bl	800015c <__adddf3>
 800b86e:	4622      	mov	r2, r4
 800b870:	462b      	mov	r3, r5
 800b872:	f7f4 fe29 	bl	80004c8 <__aeabi_dmul>
 800b876:	a36e      	add	r3, pc, #440	; (adr r3, 800ba30 <__ieee754_pow+0x6f8>)
 800b878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b87c:	f7f4 fc6e 	bl	800015c <__adddf3>
 800b880:	4622      	mov	r2, r4
 800b882:	462b      	mov	r3, r5
 800b884:	f7f4 fe20 	bl	80004c8 <__aeabi_dmul>
 800b888:	a36b      	add	r3, pc, #428	; (adr r3, 800ba38 <__ieee754_pow+0x700>)
 800b88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88e:	f7f4 fc65 	bl	800015c <__adddf3>
 800b892:	4622      	mov	r2, r4
 800b894:	4606      	mov	r6, r0
 800b896:	460f      	mov	r7, r1
 800b898:	462b      	mov	r3, r5
 800b89a:	4620      	mov	r0, r4
 800b89c:	4629      	mov	r1, r5
 800b89e:	f7f4 fe13 	bl	80004c8 <__aeabi_dmul>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	460b      	mov	r3, r1
 800b8a6:	4630      	mov	r0, r6
 800b8a8:	4639      	mov	r1, r7
 800b8aa:	f7f4 fe0d 	bl	80004c8 <__aeabi_dmul>
 800b8ae:	4604      	mov	r4, r0
 800b8b0:	460d      	mov	r5, r1
 800b8b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8b6:	4652      	mov	r2, sl
 800b8b8:	465b      	mov	r3, fp
 800b8ba:	f7f4 fc4f 	bl	800015c <__adddf3>
 800b8be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b8c2:	f7f4 fe01 	bl	80004c8 <__aeabi_dmul>
 800b8c6:	4622      	mov	r2, r4
 800b8c8:	462b      	mov	r3, r5
 800b8ca:	f7f4 fc47 	bl	800015c <__adddf3>
 800b8ce:	4652      	mov	r2, sl
 800b8d0:	4606      	mov	r6, r0
 800b8d2:	460f      	mov	r7, r1
 800b8d4:	465b      	mov	r3, fp
 800b8d6:	4650      	mov	r0, sl
 800b8d8:	4659      	mov	r1, fp
 800b8da:	f7f4 fdf5 	bl	80004c8 <__aeabi_dmul>
 800b8de:	2200      	movs	r2, #0
 800b8e0:	4b62      	ldr	r3, [pc, #392]	; (800ba6c <__ieee754_pow+0x734>)
 800b8e2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b8e6:	f7f4 fc39 	bl	800015c <__adddf3>
 800b8ea:	4632      	mov	r2, r6
 800b8ec:	463b      	mov	r3, r7
 800b8ee:	f7f4 fc35 	bl	800015c <__adddf3>
 800b8f2:	9804      	ldr	r0, [sp, #16]
 800b8f4:	460d      	mov	r5, r1
 800b8f6:	4604      	mov	r4, r0
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	460b      	mov	r3, r1
 800b8fc:	4650      	mov	r0, sl
 800b8fe:	4659      	mov	r1, fp
 800b900:	f7f4 fde2 	bl	80004c8 <__aeabi_dmul>
 800b904:	2200      	movs	r2, #0
 800b906:	4682      	mov	sl, r0
 800b908:	468b      	mov	fp, r1
 800b90a:	4b58      	ldr	r3, [pc, #352]	; (800ba6c <__ieee754_pow+0x734>)
 800b90c:	4620      	mov	r0, r4
 800b90e:	4629      	mov	r1, r5
 800b910:	f7f4 fc22 	bl	8000158 <__aeabi_dsub>
 800b914:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800b918:	f7f4 fc1e 	bl	8000158 <__aeabi_dsub>
 800b91c:	4602      	mov	r2, r0
 800b91e:	460b      	mov	r3, r1
 800b920:	4630      	mov	r0, r6
 800b922:	4639      	mov	r1, r7
 800b924:	f7f4 fc18 	bl	8000158 <__aeabi_dsub>
 800b928:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b92c:	f7f4 fdcc 	bl	80004c8 <__aeabi_dmul>
 800b930:	4622      	mov	r2, r4
 800b932:	4606      	mov	r6, r0
 800b934:	460f      	mov	r7, r1
 800b936:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b93a:	462b      	mov	r3, r5
 800b93c:	f7f4 fdc4 	bl	80004c8 <__aeabi_dmul>
 800b940:	4602      	mov	r2, r0
 800b942:	460b      	mov	r3, r1
 800b944:	4630      	mov	r0, r6
 800b946:	4639      	mov	r1, r7
 800b948:	f7f4 fc08 	bl	800015c <__adddf3>
 800b94c:	4606      	mov	r6, r0
 800b94e:	460f      	mov	r7, r1
 800b950:	4602      	mov	r2, r0
 800b952:	460b      	mov	r3, r1
 800b954:	4650      	mov	r0, sl
 800b956:	4659      	mov	r1, fp
 800b958:	f7f4 fc00 	bl	800015c <__adddf3>
 800b95c:	a338      	add	r3, pc, #224	; (adr r3, 800ba40 <__ieee754_pow+0x708>)
 800b95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b962:	9804      	ldr	r0, [sp, #16]
 800b964:	460d      	mov	r5, r1
 800b966:	4604      	mov	r4, r0
 800b968:	f7f4 fdae 	bl	80004c8 <__aeabi_dmul>
 800b96c:	4652      	mov	r2, sl
 800b96e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b972:	465b      	mov	r3, fp
 800b974:	4620      	mov	r0, r4
 800b976:	4629      	mov	r1, r5
 800b978:	f7f4 fbee 	bl	8000158 <__aeabi_dsub>
 800b97c:	4602      	mov	r2, r0
 800b97e:	460b      	mov	r3, r1
 800b980:	4630      	mov	r0, r6
 800b982:	4639      	mov	r1, r7
 800b984:	f7f4 fbe8 	bl	8000158 <__aeabi_dsub>
 800b988:	a32f      	add	r3, pc, #188	; (adr r3, 800ba48 <__ieee754_pow+0x710>)
 800b98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98e:	f7f4 fd9b 	bl	80004c8 <__aeabi_dmul>
 800b992:	a32f      	add	r3, pc, #188	; (adr r3, 800ba50 <__ieee754_pow+0x718>)
 800b994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b998:	4606      	mov	r6, r0
 800b99a:	460f      	mov	r7, r1
 800b99c:	4620      	mov	r0, r4
 800b99e:	4629      	mov	r1, r5
 800b9a0:	f7f4 fd92 	bl	80004c8 <__aeabi_dmul>
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	4630      	mov	r0, r6
 800b9aa:	4639      	mov	r1, r7
 800b9ac:	f7f4 fbd6 	bl	800015c <__adddf3>
 800b9b0:	4b2f      	ldr	r3, [pc, #188]	; (800ba70 <__ieee754_pow+0x738>)
 800b9b2:	444b      	add	r3, r9
 800b9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b8:	f7f4 fbd0 	bl	800015c <__adddf3>
 800b9bc:	4604      	mov	r4, r0
 800b9be:	980c      	ldr	r0, [sp, #48]	; 0x30
 800b9c0:	460d      	mov	r5, r1
 800b9c2:	f7f4 fd17 	bl	80003f4 <__aeabi_i2d>
 800b9c6:	4606      	mov	r6, r0
 800b9c8:	460f      	mov	r7, r1
 800b9ca:	4b2a      	ldr	r3, [pc, #168]	; (800ba74 <__ieee754_pow+0x73c>)
 800b9cc:	4622      	mov	r2, r4
 800b9ce:	444b      	add	r3, r9
 800b9d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b9d4:	462b      	mov	r3, r5
 800b9d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b9da:	f7f4 fbbf 	bl	800015c <__adddf3>
 800b9de:	4642      	mov	r2, r8
 800b9e0:	464b      	mov	r3, r9
 800b9e2:	f7f4 fbbb 	bl	800015c <__adddf3>
 800b9e6:	4632      	mov	r2, r6
 800b9e8:	463b      	mov	r3, r7
 800b9ea:	f7f4 fbb7 	bl	800015c <__adddf3>
 800b9ee:	9804      	ldr	r0, [sp, #16]
 800b9f0:	4632      	mov	r2, r6
 800b9f2:	463b      	mov	r3, r7
 800b9f4:	4682      	mov	sl, r0
 800b9f6:	468b      	mov	fp, r1
 800b9f8:	f7f4 fbae 	bl	8000158 <__aeabi_dsub>
 800b9fc:	4642      	mov	r2, r8
 800b9fe:	464b      	mov	r3, r9
 800ba00:	f7f4 fbaa 	bl	8000158 <__aeabi_dsub>
 800ba04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba08:	e60b      	b.n	800b622 <__ieee754_pow+0x2ea>
 800ba0a:	f04f 0801 	mov.w	r8, #1
 800ba0e:	e6a8      	b.n	800b762 <__ieee754_pow+0x42a>
 800ba10:	4a454eef 	.word	0x4a454eef
 800ba14:	3fca7e28 	.word	0x3fca7e28
 800ba18:	93c9db65 	.word	0x93c9db65
 800ba1c:	3fcd864a 	.word	0x3fcd864a
 800ba20:	a91d4101 	.word	0xa91d4101
 800ba24:	3fd17460 	.word	0x3fd17460
 800ba28:	518f264d 	.word	0x518f264d
 800ba2c:	3fd55555 	.word	0x3fd55555
 800ba30:	db6fabff 	.word	0xdb6fabff
 800ba34:	3fdb6db6 	.word	0x3fdb6db6
 800ba38:	33333303 	.word	0x33333303
 800ba3c:	3fe33333 	.word	0x3fe33333
 800ba40:	e0000000 	.word	0xe0000000
 800ba44:	3feec709 	.word	0x3feec709
 800ba48:	dc3a03fd 	.word	0xdc3a03fd
 800ba4c:	3feec709 	.word	0x3feec709
 800ba50:	145b01f5 	.word	0x145b01f5
 800ba54:	be3e2fe0 	.word	0xbe3e2fe0
 800ba58:	43400000 	.word	0x43400000
 800ba5c:	0003988e 	.word	0x0003988e
 800ba60:	000bb679 	.word	0x000bb679
 800ba64:	0800e138 	.word	0x0800e138
 800ba68:	3ff00000 	.word	0x3ff00000
 800ba6c:	40080000 	.word	0x40080000
 800ba70:	0800e158 	.word	0x0800e158
 800ba74:	0800e148 	.word	0x0800e148
 800ba78:	a39b      	add	r3, pc, #620	; (adr r3, 800bce8 <__ieee754_pow+0x9b0>)
 800ba7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7e:	4640      	mov	r0, r8
 800ba80:	4649      	mov	r1, r9
 800ba82:	f7f4 fb6b 	bl	800015c <__adddf3>
 800ba86:	4622      	mov	r2, r4
 800ba88:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba8c:	462b      	mov	r3, r5
 800ba8e:	4650      	mov	r0, sl
 800ba90:	4639      	mov	r1, r7
 800ba92:	f7f4 fb61 	bl	8000158 <__aeabi_dsub>
 800ba96:	4602      	mov	r2, r0
 800ba98:	460b      	mov	r3, r1
 800ba9a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba9e:	f7f4 ffa3 	bl	80009e8 <__aeabi_dcmpgt>
 800baa2:	2800      	cmp	r0, #0
 800baa4:	f47f ae0d 	bne.w	800b6c2 <__ieee754_pow+0x38a>
 800baa8:	4aa3      	ldr	r2, [pc, #652]	; (800bd38 <__ieee754_pow+0xa00>)
 800baaa:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800baae:	4293      	cmp	r3, r2
 800bab0:	f340 8103 	ble.w	800bcba <__ieee754_pow+0x982>
 800bab4:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bab8:	2000      	movs	r0, #0
 800baba:	151b      	asrs	r3, r3, #20
 800babc:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bac0:	fa4a f303 	asr.w	r3, sl, r3
 800bac4:	4433      	add	r3, r6
 800bac6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800baca:	4f9c      	ldr	r7, [pc, #624]	; (800bd3c <__ieee754_pow+0xa04>)
 800bacc:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bad0:	4117      	asrs	r7, r2
 800bad2:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800bad6:	ea23 0107 	bic.w	r1, r3, r7
 800bada:	f1c2 0214 	rsb	r2, r2, #20
 800bade:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bae2:	fa4a fa02 	asr.w	sl, sl, r2
 800bae6:	2e00      	cmp	r6, #0
 800bae8:	4602      	mov	r2, r0
 800baea:	460b      	mov	r3, r1
 800baec:	4620      	mov	r0, r4
 800baee:	4629      	mov	r1, r5
 800baf0:	bfb8      	it	lt
 800baf2:	f1ca 0a00 	rsblt	sl, sl, #0
 800baf6:	f7f4 fb2f 	bl	8000158 <__aeabi_dsub>
 800bafa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bafe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb02:	4642      	mov	r2, r8
 800bb04:	464b      	mov	r3, r9
 800bb06:	f7f4 fb29 	bl	800015c <__adddf3>
 800bb0a:	a379      	add	r3, pc, #484	; (adr r3, 800bcf0 <__ieee754_pow+0x9b8>)
 800bb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb10:	2000      	movs	r0, #0
 800bb12:	460d      	mov	r5, r1
 800bb14:	4604      	mov	r4, r0
 800bb16:	f7f4 fcd7 	bl	80004c8 <__aeabi_dmul>
 800bb1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bb1e:	4606      	mov	r6, r0
 800bb20:	460f      	mov	r7, r1
 800bb22:	4620      	mov	r0, r4
 800bb24:	4629      	mov	r1, r5
 800bb26:	f7f4 fb17 	bl	8000158 <__aeabi_dsub>
 800bb2a:	4602      	mov	r2, r0
 800bb2c:	460b      	mov	r3, r1
 800bb2e:	4640      	mov	r0, r8
 800bb30:	4649      	mov	r1, r9
 800bb32:	f7f4 fb11 	bl	8000158 <__aeabi_dsub>
 800bb36:	a370      	add	r3, pc, #448	; (adr r3, 800bcf8 <__ieee754_pow+0x9c0>)
 800bb38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb3c:	f7f4 fcc4 	bl	80004c8 <__aeabi_dmul>
 800bb40:	a36f      	add	r3, pc, #444	; (adr r3, 800bd00 <__ieee754_pow+0x9c8>)
 800bb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb46:	4680      	mov	r8, r0
 800bb48:	4689      	mov	r9, r1
 800bb4a:	4620      	mov	r0, r4
 800bb4c:	4629      	mov	r1, r5
 800bb4e:	f7f4 fcbb 	bl	80004c8 <__aeabi_dmul>
 800bb52:	4602      	mov	r2, r0
 800bb54:	460b      	mov	r3, r1
 800bb56:	4640      	mov	r0, r8
 800bb58:	4649      	mov	r1, r9
 800bb5a:	f7f4 faff 	bl	800015c <__adddf3>
 800bb5e:	4604      	mov	r4, r0
 800bb60:	460d      	mov	r5, r1
 800bb62:	4602      	mov	r2, r0
 800bb64:	460b      	mov	r3, r1
 800bb66:	4630      	mov	r0, r6
 800bb68:	4639      	mov	r1, r7
 800bb6a:	f7f4 faf7 	bl	800015c <__adddf3>
 800bb6e:	4632      	mov	r2, r6
 800bb70:	463b      	mov	r3, r7
 800bb72:	4680      	mov	r8, r0
 800bb74:	4689      	mov	r9, r1
 800bb76:	f7f4 faef 	bl	8000158 <__aeabi_dsub>
 800bb7a:	4602      	mov	r2, r0
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	4620      	mov	r0, r4
 800bb80:	4629      	mov	r1, r5
 800bb82:	f7f4 fae9 	bl	8000158 <__aeabi_dsub>
 800bb86:	4642      	mov	r2, r8
 800bb88:	4606      	mov	r6, r0
 800bb8a:	460f      	mov	r7, r1
 800bb8c:	464b      	mov	r3, r9
 800bb8e:	4640      	mov	r0, r8
 800bb90:	4649      	mov	r1, r9
 800bb92:	f7f4 fc99 	bl	80004c8 <__aeabi_dmul>
 800bb96:	a35c      	add	r3, pc, #368	; (adr r3, 800bd08 <__ieee754_pow+0x9d0>)
 800bb98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb9c:	4604      	mov	r4, r0
 800bb9e:	460d      	mov	r5, r1
 800bba0:	f7f4 fc92 	bl	80004c8 <__aeabi_dmul>
 800bba4:	a35a      	add	r3, pc, #360	; (adr r3, 800bd10 <__ieee754_pow+0x9d8>)
 800bba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbaa:	f7f4 fad5 	bl	8000158 <__aeabi_dsub>
 800bbae:	4622      	mov	r2, r4
 800bbb0:	462b      	mov	r3, r5
 800bbb2:	f7f4 fc89 	bl	80004c8 <__aeabi_dmul>
 800bbb6:	a358      	add	r3, pc, #352	; (adr r3, 800bd18 <__ieee754_pow+0x9e0>)
 800bbb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbbc:	f7f4 face 	bl	800015c <__adddf3>
 800bbc0:	4622      	mov	r2, r4
 800bbc2:	462b      	mov	r3, r5
 800bbc4:	f7f4 fc80 	bl	80004c8 <__aeabi_dmul>
 800bbc8:	a355      	add	r3, pc, #340	; (adr r3, 800bd20 <__ieee754_pow+0x9e8>)
 800bbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbce:	f7f4 fac3 	bl	8000158 <__aeabi_dsub>
 800bbd2:	4622      	mov	r2, r4
 800bbd4:	462b      	mov	r3, r5
 800bbd6:	f7f4 fc77 	bl	80004c8 <__aeabi_dmul>
 800bbda:	a353      	add	r3, pc, #332	; (adr r3, 800bd28 <__ieee754_pow+0x9f0>)
 800bbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe0:	f7f4 fabc 	bl	800015c <__adddf3>
 800bbe4:	4622      	mov	r2, r4
 800bbe6:	462b      	mov	r3, r5
 800bbe8:	f7f4 fc6e 	bl	80004c8 <__aeabi_dmul>
 800bbec:	4602      	mov	r2, r0
 800bbee:	460b      	mov	r3, r1
 800bbf0:	4640      	mov	r0, r8
 800bbf2:	4649      	mov	r1, r9
 800bbf4:	f7f4 fab0 	bl	8000158 <__aeabi_dsub>
 800bbf8:	4604      	mov	r4, r0
 800bbfa:	460d      	mov	r5, r1
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	460b      	mov	r3, r1
 800bc00:	4640      	mov	r0, r8
 800bc02:	4649      	mov	r1, r9
 800bc04:	f7f4 fc60 	bl	80004c8 <__aeabi_dmul>
 800bc08:	2200      	movs	r2, #0
 800bc0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800bc12:	4620      	mov	r0, r4
 800bc14:	4629      	mov	r1, r5
 800bc16:	f7f4 fa9f 	bl	8000158 <__aeabi_dsub>
 800bc1a:	4602      	mov	r2, r0
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bc22:	f7f4 fd7b 	bl	800071c <__aeabi_ddiv>
 800bc26:	4632      	mov	r2, r6
 800bc28:	4604      	mov	r4, r0
 800bc2a:	460d      	mov	r5, r1
 800bc2c:	463b      	mov	r3, r7
 800bc2e:	4640      	mov	r0, r8
 800bc30:	4649      	mov	r1, r9
 800bc32:	f7f4 fc49 	bl	80004c8 <__aeabi_dmul>
 800bc36:	4632      	mov	r2, r6
 800bc38:	463b      	mov	r3, r7
 800bc3a:	f7f4 fa8f 	bl	800015c <__adddf3>
 800bc3e:	4602      	mov	r2, r0
 800bc40:	460b      	mov	r3, r1
 800bc42:	4620      	mov	r0, r4
 800bc44:	4629      	mov	r1, r5
 800bc46:	f7f4 fa87 	bl	8000158 <__aeabi_dsub>
 800bc4a:	4642      	mov	r2, r8
 800bc4c:	464b      	mov	r3, r9
 800bc4e:	f7f4 fa83 	bl	8000158 <__aeabi_dsub>
 800bc52:	4602      	mov	r2, r0
 800bc54:	460b      	mov	r3, r1
 800bc56:	2000      	movs	r0, #0
 800bc58:	4939      	ldr	r1, [pc, #228]	; (800bd40 <__ieee754_pow+0xa08>)
 800bc5a:	f7f4 fa7d 	bl	8000158 <__aeabi_dsub>
 800bc5e:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800bc62:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800bc66:	da2b      	bge.n	800bcc0 <__ieee754_pow+0x988>
 800bc68:	4652      	mov	r2, sl
 800bc6a:	f001 fff5 	bl	800dc58 <scalbn>
 800bc6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc72:	f7ff bbf6 	b.w	800b462 <__ieee754_pow+0x12a>
 800bc76:	4b33      	ldr	r3, [pc, #204]	; (800bd44 <__ieee754_pow+0xa0c>)
 800bc78:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800bc7c:	429f      	cmp	r7, r3
 800bc7e:	f77f af13 	ble.w	800baa8 <__ieee754_pow+0x770>
 800bc82:	4b31      	ldr	r3, [pc, #196]	; (800bd48 <__ieee754_pow+0xa10>)
 800bc84:	440b      	add	r3, r1
 800bc86:	4303      	orrs	r3, r0
 800bc88:	d00b      	beq.n	800bca2 <__ieee754_pow+0x96a>
 800bc8a:	a329      	add	r3, pc, #164	; (adr r3, 800bd30 <__ieee754_pow+0x9f8>)
 800bc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc90:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc94:	f7f4 fc18 	bl	80004c8 <__aeabi_dmul>
 800bc98:	a325      	add	r3, pc, #148	; (adr r3, 800bd30 <__ieee754_pow+0x9f8>)
 800bc9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc9e:	f7ff bbe0 	b.w	800b462 <__ieee754_pow+0x12a>
 800bca2:	4622      	mov	r2, r4
 800bca4:	462b      	mov	r3, r5
 800bca6:	f7f4 fa57 	bl	8000158 <__aeabi_dsub>
 800bcaa:	4642      	mov	r2, r8
 800bcac:	464b      	mov	r3, r9
 800bcae:	f7f4 fe91 	bl	80009d4 <__aeabi_dcmpge>
 800bcb2:	2800      	cmp	r0, #0
 800bcb4:	f43f aef8 	beq.w	800baa8 <__ieee754_pow+0x770>
 800bcb8:	e7e7      	b.n	800bc8a <__ieee754_pow+0x952>
 800bcba:	f04f 0a00 	mov.w	sl, #0
 800bcbe:	e71e      	b.n	800bafe <__ieee754_pow+0x7c6>
 800bcc0:	4621      	mov	r1, r4
 800bcc2:	e7d4      	b.n	800bc6e <__ieee754_pow+0x936>
 800bcc4:	f04f 0b00 	mov.w	fp, #0
 800bcc8:	f8df c074 	ldr.w	ip, [pc, #116]	; 800bd40 <__ieee754_pow+0xa08>
 800bccc:	f7ff bb95 	b.w	800b3fa <__ieee754_pow+0xc2>
 800bcd0:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800bcd4:	f7ff bb91 	b.w	800b3fa <__ieee754_pow+0xc2>
 800bcd8:	4638      	mov	r0, r7
 800bcda:	4641      	mov	r1, r8
 800bcdc:	f7ff bbc3 	b.w	800b466 <__ieee754_pow+0x12e>
 800bce0:	9200      	str	r2, [sp, #0]
 800bce2:	f7ff bb9f 	b.w	800b424 <__ieee754_pow+0xec>
 800bce6:	bf00      	nop
 800bce8:	652b82fe 	.word	0x652b82fe
 800bcec:	3c971547 	.word	0x3c971547
 800bcf0:	00000000 	.word	0x00000000
 800bcf4:	3fe62e43 	.word	0x3fe62e43
 800bcf8:	fefa39ef 	.word	0xfefa39ef
 800bcfc:	3fe62e42 	.word	0x3fe62e42
 800bd00:	0ca86c39 	.word	0x0ca86c39
 800bd04:	be205c61 	.word	0xbe205c61
 800bd08:	72bea4d0 	.word	0x72bea4d0
 800bd0c:	3e663769 	.word	0x3e663769
 800bd10:	c5d26bf1 	.word	0xc5d26bf1
 800bd14:	3ebbbd41 	.word	0x3ebbbd41
 800bd18:	af25de2c 	.word	0xaf25de2c
 800bd1c:	3f11566a 	.word	0x3f11566a
 800bd20:	16bebd93 	.word	0x16bebd93
 800bd24:	3f66c16c 	.word	0x3f66c16c
 800bd28:	5555553e 	.word	0x5555553e
 800bd2c:	3fc55555 	.word	0x3fc55555
 800bd30:	c2f8f359 	.word	0xc2f8f359
 800bd34:	01a56e1f 	.word	0x01a56e1f
 800bd38:	3fe00000 	.word	0x3fe00000
 800bd3c:	000fffff 	.word	0x000fffff
 800bd40:	3ff00000 	.word	0x3ff00000
 800bd44:	4090cbff 	.word	0x4090cbff
 800bd48:	3f6f3400 	.word	0x3f6f3400
 800bd4c:	00000000 	.word	0x00000000

0800bd50 <__ieee754_rem_pio2>:
 800bd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd54:	4614      	mov	r4, r2
 800bd56:	4ac2      	ldr	r2, [pc, #776]	; (800c060 <__ieee754_rem_pio2+0x310>)
 800bd58:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800bd5c:	4592      	cmp	sl, r2
 800bd5e:	b08d      	sub	sp, #52	; 0x34
 800bd60:	468b      	mov	fp, r1
 800bd62:	dc07      	bgt.n	800bd74 <__ieee754_rem_pio2+0x24>
 800bd64:	2200      	movs	r2, #0
 800bd66:	2300      	movs	r3, #0
 800bd68:	e9c4 0100 	strd	r0, r1, [r4]
 800bd6c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bd70:	2500      	movs	r5, #0
 800bd72:	e023      	b.n	800bdbc <__ieee754_rem_pio2+0x6c>
 800bd74:	4abb      	ldr	r2, [pc, #748]	; (800c064 <__ieee754_rem_pio2+0x314>)
 800bd76:	4592      	cmp	sl, r2
 800bd78:	dc71      	bgt.n	800be5e <__ieee754_rem_pio2+0x10e>
 800bd7a:	a3ab      	add	r3, pc, #684	; (adr r3, 800c028 <__ieee754_rem_pio2+0x2d8>)
 800bd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd80:	2900      	cmp	r1, #0
 800bd82:	4db9      	ldr	r5, [pc, #740]	; (800c068 <__ieee754_rem_pio2+0x318>)
 800bd84:	dd36      	ble.n	800bdf4 <__ieee754_rem_pio2+0xa4>
 800bd86:	f7f4 f9e7 	bl	8000158 <__aeabi_dsub>
 800bd8a:	45aa      	cmp	sl, r5
 800bd8c:	4606      	mov	r6, r0
 800bd8e:	460f      	mov	r7, r1
 800bd90:	d018      	beq.n	800bdc4 <__ieee754_rem_pio2+0x74>
 800bd92:	a3a7      	add	r3, pc, #668	; (adr r3, 800c030 <__ieee754_rem_pio2+0x2e0>)
 800bd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd98:	f7f4 f9de 	bl	8000158 <__aeabi_dsub>
 800bd9c:	4602      	mov	r2, r0
 800bd9e:	460b      	mov	r3, r1
 800bda0:	4630      	mov	r0, r6
 800bda2:	e9c4 2300 	strd	r2, r3, [r4]
 800bda6:	4639      	mov	r1, r7
 800bda8:	f7f4 f9d6 	bl	8000158 <__aeabi_dsub>
 800bdac:	a3a0      	add	r3, pc, #640	; (adr r3, 800c030 <__ieee754_rem_pio2+0x2e0>)
 800bdae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb2:	f7f4 f9d1 	bl	8000158 <__aeabi_dsub>
 800bdb6:	2501      	movs	r5, #1
 800bdb8:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bdbc:	4628      	mov	r0, r5
 800bdbe:	b00d      	add	sp, #52	; 0x34
 800bdc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc4:	a39c      	add	r3, pc, #624	; (adr r3, 800c038 <__ieee754_rem_pio2+0x2e8>)
 800bdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdca:	f7f4 f9c5 	bl	8000158 <__aeabi_dsub>
 800bdce:	a39c      	add	r3, pc, #624	; (adr r3, 800c040 <__ieee754_rem_pio2+0x2f0>)
 800bdd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdd4:	4606      	mov	r6, r0
 800bdd6:	460f      	mov	r7, r1
 800bdd8:	f7f4 f9be 	bl	8000158 <__aeabi_dsub>
 800bddc:	4602      	mov	r2, r0
 800bdde:	460b      	mov	r3, r1
 800bde0:	4630      	mov	r0, r6
 800bde2:	e9c4 2300 	strd	r2, r3, [r4]
 800bde6:	4639      	mov	r1, r7
 800bde8:	f7f4 f9b6 	bl	8000158 <__aeabi_dsub>
 800bdec:	a394      	add	r3, pc, #592	; (adr r3, 800c040 <__ieee754_rem_pio2+0x2f0>)
 800bdee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdf2:	e7de      	b.n	800bdb2 <__ieee754_rem_pio2+0x62>
 800bdf4:	f7f4 f9b2 	bl	800015c <__adddf3>
 800bdf8:	45aa      	cmp	sl, r5
 800bdfa:	4606      	mov	r6, r0
 800bdfc:	460f      	mov	r7, r1
 800bdfe:	d016      	beq.n	800be2e <__ieee754_rem_pio2+0xde>
 800be00:	a38b      	add	r3, pc, #556	; (adr r3, 800c030 <__ieee754_rem_pio2+0x2e0>)
 800be02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be06:	f7f4 f9a9 	bl	800015c <__adddf3>
 800be0a:	4602      	mov	r2, r0
 800be0c:	460b      	mov	r3, r1
 800be0e:	4630      	mov	r0, r6
 800be10:	e9c4 2300 	strd	r2, r3, [r4]
 800be14:	4639      	mov	r1, r7
 800be16:	f7f4 f99f 	bl	8000158 <__aeabi_dsub>
 800be1a:	a385      	add	r3, pc, #532	; (adr r3, 800c030 <__ieee754_rem_pio2+0x2e0>)
 800be1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be20:	f7f4 f99c 	bl	800015c <__adddf3>
 800be24:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800be28:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800be2c:	e7c6      	b.n	800bdbc <__ieee754_rem_pio2+0x6c>
 800be2e:	a382      	add	r3, pc, #520	; (adr r3, 800c038 <__ieee754_rem_pio2+0x2e8>)
 800be30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be34:	f7f4 f992 	bl	800015c <__adddf3>
 800be38:	a381      	add	r3, pc, #516	; (adr r3, 800c040 <__ieee754_rem_pio2+0x2f0>)
 800be3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be3e:	4606      	mov	r6, r0
 800be40:	460f      	mov	r7, r1
 800be42:	f7f4 f98b 	bl	800015c <__adddf3>
 800be46:	4602      	mov	r2, r0
 800be48:	460b      	mov	r3, r1
 800be4a:	4630      	mov	r0, r6
 800be4c:	e9c4 2300 	strd	r2, r3, [r4]
 800be50:	4639      	mov	r1, r7
 800be52:	f7f4 f981 	bl	8000158 <__aeabi_dsub>
 800be56:	a37a      	add	r3, pc, #488	; (adr r3, 800c040 <__ieee754_rem_pio2+0x2f0>)
 800be58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5c:	e7e0      	b.n	800be20 <__ieee754_rem_pio2+0xd0>
 800be5e:	4a83      	ldr	r2, [pc, #524]	; (800c06c <__ieee754_rem_pio2+0x31c>)
 800be60:	4592      	cmp	sl, r2
 800be62:	f300 80d2 	bgt.w	800c00a <__ieee754_rem_pio2+0x2ba>
 800be66:	f001 fdd5 	bl	800da14 <fabs>
 800be6a:	a377      	add	r3, pc, #476	; (adr r3, 800c048 <__ieee754_rem_pio2+0x2f8>)
 800be6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be70:	4606      	mov	r6, r0
 800be72:	460f      	mov	r7, r1
 800be74:	f7f4 fb28 	bl	80004c8 <__aeabi_dmul>
 800be78:	2200      	movs	r2, #0
 800be7a:	4b7d      	ldr	r3, [pc, #500]	; (800c070 <__ieee754_rem_pio2+0x320>)
 800be7c:	f7f4 f96e 	bl	800015c <__adddf3>
 800be80:	f7f4 fdd2 	bl	8000a28 <__aeabi_d2iz>
 800be84:	4605      	mov	r5, r0
 800be86:	f7f4 fab5 	bl	80003f4 <__aeabi_i2d>
 800be8a:	a367      	add	r3, pc, #412	; (adr r3, 800c028 <__ieee754_rem_pio2+0x2d8>)
 800be8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be94:	f7f4 fb18 	bl	80004c8 <__aeabi_dmul>
 800be98:	4602      	mov	r2, r0
 800be9a:	460b      	mov	r3, r1
 800be9c:	4630      	mov	r0, r6
 800be9e:	4639      	mov	r1, r7
 800bea0:	f7f4 f95a 	bl	8000158 <__aeabi_dsub>
 800bea4:	a362      	add	r3, pc, #392	; (adr r3, 800c030 <__ieee754_rem_pio2+0x2e0>)
 800bea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beaa:	4606      	mov	r6, r0
 800beac:	460f      	mov	r7, r1
 800beae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800beb2:	f7f4 fb09 	bl	80004c8 <__aeabi_dmul>
 800beb6:	2d1f      	cmp	r5, #31
 800beb8:	4680      	mov	r8, r0
 800beba:	4689      	mov	r9, r1
 800bebc:	dc0e      	bgt.n	800bedc <__ieee754_rem_pio2+0x18c>
 800bebe:	4b6d      	ldr	r3, [pc, #436]	; (800c074 <__ieee754_rem_pio2+0x324>)
 800bec0:	1e6a      	subs	r2, r5, #1
 800bec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bec6:	4553      	cmp	r3, sl
 800bec8:	d008      	beq.n	800bedc <__ieee754_rem_pio2+0x18c>
 800beca:	4642      	mov	r2, r8
 800becc:	464b      	mov	r3, r9
 800bece:	4630      	mov	r0, r6
 800bed0:	4639      	mov	r1, r7
 800bed2:	f7f4 f941 	bl	8000158 <__aeabi_dsub>
 800bed6:	e9c4 0100 	strd	r0, r1, [r4]
 800beda:	e011      	b.n	800bf00 <__ieee754_rem_pio2+0x1b0>
 800bedc:	464b      	mov	r3, r9
 800bede:	4642      	mov	r2, r8
 800bee0:	4630      	mov	r0, r6
 800bee2:	4639      	mov	r1, r7
 800bee4:	f7f4 f938 	bl	8000158 <__aeabi_dsub>
 800bee8:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800beec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bef0:	ebaa 0303 	sub.w	r3, sl, r3
 800bef4:	2b10      	cmp	r3, #16
 800bef6:	dc1f      	bgt.n	800bf38 <__ieee754_rem_pio2+0x1e8>
 800bef8:	4602      	mov	r2, r0
 800befa:	460b      	mov	r3, r1
 800befc:	e9c4 2300 	strd	r2, r3, [r4]
 800bf00:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800bf04:	4630      	mov	r0, r6
 800bf06:	4653      	mov	r3, sl
 800bf08:	4639      	mov	r1, r7
 800bf0a:	f7f4 f925 	bl	8000158 <__aeabi_dsub>
 800bf0e:	4642      	mov	r2, r8
 800bf10:	464b      	mov	r3, r9
 800bf12:	f7f4 f921 	bl	8000158 <__aeabi_dsub>
 800bf16:	4602      	mov	r2, r0
 800bf18:	460b      	mov	r3, r1
 800bf1a:	f1bb 0f00 	cmp.w	fp, #0
 800bf1e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800bf22:	f6bf af4b 	bge.w	800bdbc <__ieee754_rem_pio2+0x6c>
 800bf26:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800bf2a:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800bf2e:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800bf32:	60e1      	str	r1, [r4, #12]
 800bf34:	426d      	negs	r5, r5
 800bf36:	e741      	b.n	800bdbc <__ieee754_rem_pio2+0x6c>
 800bf38:	a33f      	add	r3, pc, #252	; (adr r3, 800c038 <__ieee754_rem_pio2+0x2e8>)
 800bf3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf42:	f7f4 fac1 	bl	80004c8 <__aeabi_dmul>
 800bf46:	4680      	mov	r8, r0
 800bf48:	4689      	mov	r9, r1
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	4630      	mov	r0, r6
 800bf50:	4639      	mov	r1, r7
 800bf52:	f7f4 f901 	bl	8000158 <__aeabi_dsub>
 800bf56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf5a:	4602      	mov	r2, r0
 800bf5c:	460b      	mov	r3, r1
 800bf5e:	4630      	mov	r0, r6
 800bf60:	4639      	mov	r1, r7
 800bf62:	f7f4 f8f9 	bl	8000158 <__aeabi_dsub>
 800bf66:	4642      	mov	r2, r8
 800bf68:	464b      	mov	r3, r9
 800bf6a:	f7f4 f8f5 	bl	8000158 <__aeabi_dsub>
 800bf6e:	a334      	add	r3, pc, #208	; (adr r3, 800c040 <__ieee754_rem_pio2+0x2f0>)
 800bf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf74:	4606      	mov	r6, r0
 800bf76:	460f      	mov	r7, r1
 800bf78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf7c:	f7f4 faa4 	bl	80004c8 <__aeabi_dmul>
 800bf80:	4632      	mov	r2, r6
 800bf82:	463b      	mov	r3, r7
 800bf84:	f7f4 f8e8 	bl	8000158 <__aeabi_dsub>
 800bf88:	460b      	mov	r3, r1
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	4680      	mov	r8, r0
 800bf8e:	4689      	mov	r9, r1
 800bf90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf94:	f7f4 f8e0 	bl	8000158 <__aeabi_dsub>
 800bf98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bf9c:	ebaa 0a03 	sub.w	sl, sl, r3
 800bfa0:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800bfa4:	dc06      	bgt.n	800bfb4 <__ieee754_rem_pio2+0x264>
 800bfa6:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800bfaa:	4602      	mov	r2, r0
 800bfac:	460b      	mov	r3, r1
 800bfae:	e9c4 2300 	strd	r2, r3, [r4]
 800bfb2:	e7a5      	b.n	800bf00 <__ieee754_rem_pio2+0x1b0>
 800bfb4:	a326      	add	r3, pc, #152	; (adr r3, 800c050 <__ieee754_rem_pio2+0x300>)
 800bfb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bfbe:	f7f4 fa83 	bl	80004c8 <__aeabi_dmul>
 800bfc2:	4680      	mov	r8, r0
 800bfc4:	4689      	mov	r9, r1
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	460b      	mov	r3, r1
 800bfca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfce:	f7f4 f8c3 	bl	8000158 <__aeabi_dsub>
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	4606      	mov	r6, r0
 800bfd8:	460f      	mov	r7, r1
 800bfda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfde:	f7f4 f8bb 	bl	8000158 <__aeabi_dsub>
 800bfe2:	4642      	mov	r2, r8
 800bfe4:	464b      	mov	r3, r9
 800bfe6:	f7f4 f8b7 	bl	8000158 <__aeabi_dsub>
 800bfea:	a31b      	add	r3, pc, #108	; (adr r3, 800c058 <__ieee754_rem_pio2+0x308>)
 800bfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff0:	4680      	mov	r8, r0
 800bff2:	4689      	mov	r9, r1
 800bff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bff8:	f7f4 fa66 	bl	80004c8 <__aeabi_dmul>
 800bffc:	4642      	mov	r2, r8
 800bffe:	464b      	mov	r3, r9
 800c000:	f7f4 f8aa 	bl	8000158 <__aeabi_dsub>
 800c004:	4680      	mov	r8, r0
 800c006:	4689      	mov	r9, r1
 800c008:	e75f      	b.n	800beca <__ieee754_rem_pio2+0x17a>
 800c00a:	4a1b      	ldr	r2, [pc, #108]	; (800c078 <__ieee754_rem_pio2+0x328>)
 800c00c:	4592      	cmp	sl, r2
 800c00e:	dd35      	ble.n	800c07c <__ieee754_rem_pio2+0x32c>
 800c010:	4602      	mov	r2, r0
 800c012:	460b      	mov	r3, r1
 800c014:	f7f4 f8a0 	bl	8000158 <__aeabi_dsub>
 800c018:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c01c:	e9c4 0100 	strd	r0, r1, [r4]
 800c020:	e6a6      	b.n	800bd70 <__ieee754_rem_pio2+0x20>
 800c022:	bf00      	nop
 800c024:	f3af 8000 	nop.w
 800c028:	54400000 	.word	0x54400000
 800c02c:	3ff921fb 	.word	0x3ff921fb
 800c030:	1a626331 	.word	0x1a626331
 800c034:	3dd0b461 	.word	0x3dd0b461
 800c038:	1a600000 	.word	0x1a600000
 800c03c:	3dd0b461 	.word	0x3dd0b461
 800c040:	2e037073 	.word	0x2e037073
 800c044:	3ba3198a 	.word	0x3ba3198a
 800c048:	6dc9c883 	.word	0x6dc9c883
 800c04c:	3fe45f30 	.word	0x3fe45f30
 800c050:	2e000000 	.word	0x2e000000
 800c054:	3ba3198a 	.word	0x3ba3198a
 800c058:	252049c1 	.word	0x252049c1
 800c05c:	397b839a 	.word	0x397b839a
 800c060:	3fe921fb 	.word	0x3fe921fb
 800c064:	4002d97b 	.word	0x4002d97b
 800c068:	3ff921fb 	.word	0x3ff921fb
 800c06c:	413921fb 	.word	0x413921fb
 800c070:	3fe00000 	.word	0x3fe00000
 800c074:	0800e168 	.word	0x0800e168
 800c078:	7fefffff 	.word	0x7fefffff
 800c07c:	ea4f 552a 	mov.w	r5, sl, asr #20
 800c080:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800c084:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800c088:	460f      	mov	r7, r1
 800c08a:	4606      	mov	r6, r0
 800c08c:	f7f4 fccc 	bl	8000a28 <__aeabi_d2iz>
 800c090:	f7f4 f9b0 	bl	80003f4 <__aeabi_i2d>
 800c094:	4602      	mov	r2, r0
 800c096:	460b      	mov	r3, r1
 800c098:	4630      	mov	r0, r6
 800c09a:	4639      	mov	r1, r7
 800c09c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c0a0:	f7f4 f85a 	bl	8000158 <__aeabi_dsub>
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	4b20      	ldr	r3, [pc, #128]	; (800c128 <__ieee754_rem_pio2+0x3d8>)
 800c0a8:	f7f4 fa0e 	bl	80004c8 <__aeabi_dmul>
 800c0ac:	460f      	mov	r7, r1
 800c0ae:	4606      	mov	r6, r0
 800c0b0:	f7f4 fcba 	bl	8000a28 <__aeabi_d2iz>
 800c0b4:	f7f4 f99e 	bl	80003f4 <__aeabi_i2d>
 800c0b8:	4602      	mov	r2, r0
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	4630      	mov	r0, r6
 800c0be:	4639      	mov	r1, r7
 800c0c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c0c4:	f7f4 f848 	bl	8000158 <__aeabi_dsub>
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	4b17      	ldr	r3, [pc, #92]	; (800c128 <__ieee754_rem_pio2+0x3d8>)
 800c0cc:	f7f4 f9fc 	bl	80004c8 <__aeabi_dmul>
 800c0d0:	f04f 0803 	mov.w	r8, #3
 800c0d4:	2600      	movs	r6, #0
 800c0d6:	2700      	movs	r7, #0
 800c0d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c0dc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800c0e0:	4632      	mov	r2, r6
 800c0e2:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c0e6:	463b      	mov	r3, r7
 800c0e8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800c0ec:	f7f4 fc54 	bl	8000998 <__aeabi_dcmpeq>
 800c0f0:	b9b8      	cbnz	r0, 800c122 <__ieee754_rem_pio2+0x3d2>
 800c0f2:	4b0e      	ldr	r3, [pc, #56]	; (800c12c <__ieee754_rem_pio2+0x3dc>)
 800c0f4:	462a      	mov	r2, r5
 800c0f6:	9301      	str	r3, [sp, #4]
 800c0f8:	2302      	movs	r3, #2
 800c0fa:	4621      	mov	r1, r4
 800c0fc:	9300      	str	r3, [sp, #0]
 800c0fe:	a806      	add	r0, sp, #24
 800c100:	4643      	mov	r3, r8
 800c102:	f000 fb67 	bl	800c7d4 <__kernel_rem_pio2>
 800c106:	f1bb 0f00 	cmp.w	fp, #0
 800c10a:	4605      	mov	r5, r0
 800c10c:	f6bf ae56 	bge.w	800bdbc <__ieee754_rem_pio2+0x6c>
 800c110:	6863      	ldr	r3, [r4, #4]
 800c112:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c116:	6063      	str	r3, [r4, #4]
 800c118:	68e3      	ldr	r3, [r4, #12]
 800c11a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c11e:	60e3      	str	r3, [r4, #12]
 800c120:	e708      	b.n	800bf34 <__ieee754_rem_pio2+0x1e4>
 800c122:	46d0      	mov	r8, sl
 800c124:	e7dc      	b.n	800c0e0 <__ieee754_rem_pio2+0x390>
 800c126:	bf00      	nop
 800c128:	41700000 	.word	0x41700000
 800c12c:	0800e1e8 	.word	0x0800e1e8

0800c130 <__ieee754_sqrt>:
 800c130:	4b54      	ldr	r3, [pc, #336]	; (800c284 <__ieee754_sqrt+0x154>)
 800c132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c136:	438b      	bics	r3, r1
 800c138:	4606      	mov	r6, r0
 800c13a:	460d      	mov	r5, r1
 800c13c:	460a      	mov	r2, r1
 800c13e:	460c      	mov	r4, r1
 800c140:	d10f      	bne.n	800c162 <__ieee754_sqrt+0x32>
 800c142:	4602      	mov	r2, r0
 800c144:	460b      	mov	r3, r1
 800c146:	f7f4 f9bf 	bl	80004c8 <__aeabi_dmul>
 800c14a:	4602      	mov	r2, r0
 800c14c:	460b      	mov	r3, r1
 800c14e:	4630      	mov	r0, r6
 800c150:	4629      	mov	r1, r5
 800c152:	f7f4 f803 	bl	800015c <__adddf3>
 800c156:	4606      	mov	r6, r0
 800c158:	460d      	mov	r5, r1
 800c15a:	4630      	mov	r0, r6
 800c15c:	4629      	mov	r1, r5
 800c15e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c162:	2900      	cmp	r1, #0
 800c164:	4607      	mov	r7, r0
 800c166:	4603      	mov	r3, r0
 800c168:	dc0e      	bgt.n	800c188 <__ieee754_sqrt+0x58>
 800c16a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800c16e:	ea5c 0707 	orrs.w	r7, ip, r7
 800c172:	d0f2      	beq.n	800c15a <__ieee754_sqrt+0x2a>
 800c174:	b141      	cbz	r1, 800c188 <__ieee754_sqrt+0x58>
 800c176:	4602      	mov	r2, r0
 800c178:	460b      	mov	r3, r1
 800c17a:	f7f3 ffed 	bl	8000158 <__aeabi_dsub>
 800c17e:	4602      	mov	r2, r0
 800c180:	460b      	mov	r3, r1
 800c182:	f7f4 facb 	bl	800071c <__aeabi_ddiv>
 800c186:	e7e6      	b.n	800c156 <__ieee754_sqrt+0x26>
 800c188:	1512      	asrs	r2, r2, #20
 800c18a:	d074      	beq.n	800c276 <__ieee754_sqrt+0x146>
 800c18c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c190:	07d5      	lsls	r5, r2, #31
 800c192:	f04f 0500 	mov.w	r5, #0
 800c196:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c19a:	bf48      	it	mi
 800c19c:	0fd9      	lsrmi	r1, r3, #31
 800c19e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800c1a2:	bf44      	itt	mi
 800c1a4:	005b      	lslmi	r3, r3, #1
 800c1a6:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800c1aa:	1051      	asrs	r1, r2, #1
 800c1ac:	0fda      	lsrs	r2, r3, #31
 800c1ae:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	2216      	movs	r2, #22
 800c1b6:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c1ba:	005b      	lsls	r3, r3, #1
 800c1bc:	1987      	adds	r7, r0, r6
 800c1be:	42a7      	cmp	r7, r4
 800c1c0:	bfde      	ittt	le
 800c1c2:	19b8      	addle	r0, r7, r6
 800c1c4:	1be4      	suble	r4, r4, r7
 800c1c6:	19ad      	addle	r5, r5, r6
 800c1c8:	0fdf      	lsrs	r7, r3, #31
 800c1ca:	3a01      	subs	r2, #1
 800c1cc:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800c1d0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c1d4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c1d8:	d1f0      	bne.n	800c1bc <__ieee754_sqrt+0x8c>
 800c1da:	f04f 0c20 	mov.w	ip, #32
 800c1de:	4696      	mov	lr, r2
 800c1e0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c1e4:	4284      	cmp	r4, r0
 800c1e6:	eb06 070e 	add.w	r7, r6, lr
 800c1ea:	dc02      	bgt.n	800c1f2 <__ieee754_sqrt+0xc2>
 800c1ec:	d112      	bne.n	800c214 <__ieee754_sqrt+0xe4>
 800c1ee:	429f      	cmp	r7, r3
 800c1f0:	d810      	bhi.n	800c214 <__ieee754_sqrt+0xe4>
 800c1f2:	2f00      	cmp	r7, #0
 800c1f4:	eb07 0e06 	add.w	lr, r7, r6
 800c1f8:	da42      	bge.n	800c280 <__ieee754_sqrt+0x150>
 800c1fa:	f1be 0f00 	cmp.w	lr, #0
 800c1fe:	db3f      	blt.n	800c280 <__ieee754_sqrt+0x150>
 800c200:	f100 0801 	add.w	r8, r0, #1
 800c204:	1a24      	subs	r4, r4, r0
 800c206:	4640      	mov	r0, r8
 800c208:	429f      	cmp	r7, r3
 800c20a:	bf88      	it	hi
 800c20c:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 800c210:	1bdb      	subs	r3, r3, r7
 800c212:	4432      	add	r2, r6
 800c214:	0064      	lsls	r4, r4, #1
 800c216:	f1bc 0c01 	subs.w	ip, ip, #1
 800c21a:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800c21e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c222:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c226:	d1dd      	bne.n	800c1e4 <__ieee754_sqrt+0xb4>
 800c228:	4323      	orrs	r3, r4
 800c22a:	d006      	beq.n	800c23a <__ieee754_sqrt+0x10a>
 800c22c:	1c54      	adds	r4, r2, #1
 800c22e:	bf0b      	itete	eq
 800c230:	4662      	moveq	r2, ip
 800c232:	3201      	addne	r2, #1
 800c234:	3501      	addeq	r5, #1
 800c236:	f022 0201 	bicne.w	r2, r2, #1
 800c23a:	106b      	asrs	r3, r5, #1
 800c23c:	0852      	lsrs	r2, r2, #1
 800c23e:	07e8      	lsls	r0, r5, #31
 800c240:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c244:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c248:	bf48      	it	mi
 800c24a:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c24e:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800c252:	4616      	mov	r6, r2
 800c254:	e781      	b.n	800c15a <__ieee754_sqrt+0x2a>
 800c256:	0adc      	lsrs	r4, r3, #11
 800c258:	3915      	subs	r1, #21
 800c25a:	055b      	lsls	r3, r3, #21
 800c25c:	2c00      	cmp	r4, #0
 800c25e:	d0fa      	beq.n	800c256 <__ieee754_sqrt+0x126>
 800c260:	02e6      	lsls	r6, r4, #11
 800c262:	d50a      	bpl.n	800c27a <__ieee754_sqrt+0x14a>
 800c264:	f1c2 0020 	rsb	r0, r2, #32
 800c268:	fa23 f000 	lsr.w	r0, r3, r0
 800c26c:	1e55      	subs	r5, r2, #1
 800c26e:	4093      	lsls	r3, r2
 800c270:	4304      	orrs	r4, r0
 800c272:	1b4a      	subs	r2, r1, r5
 800c274:	e78a      	b.n	800c18c <__ieee754_sqrt+0x5c>
 800c276:	4611      	mov	r1, r2
 800c278:	e7f0      	b.n	800c25c <__ieee754_sqrt+0x12c>
 800c27a:	0064      	lsls	r4, r4, #1
 800c27c:	3201      	adds	r2, #1
 800c27e:	e7ef      	b.n	800c260 <__ieee754_sqrt+0x130>
 800c280:	4680      	mov	r8, r0
 800c282:	e7bf      	b.n	800c204 <__ieee754_sqrt+0xd4>
 800c284:	7ff00000 	.word	0x7ff00000

0800c288 <__ieee754_atan2f>:
 800c288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c28a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c28e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800c292:	4603      	mov	r3, r0
 800c294:	dc05      	bgt.n	800c2a2 <__ieee754_atan2f+0x1a>
 800c296:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800c29a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c29e:	4607      	mov	r7, r0
 800c2a0:	dd04      	ble.n	800c2ac <__ieee754_atan2f+0x24>
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	f7f4 fc3e 	bl	8000b24 <__addsf3>
 800c2a8:	4603      	mov	r3, r0
 800c2aa:	e024      	b.n	800c2f6 <__ieee754_atan2f+0x6e>
 800c2ac:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800c2b0:	d103      	bne.n	800c2ba <__ieee754_atan2f+0x32>
 800c2b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c2b6:	f001 bd3d 	b.w	800dd34 <atanf>
 800c2ba:	178c      	asrs	r4, r1, #30
 800c2bc:	f004 0402 	and.w	r4, r4, #2
 800c2c0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800c2c4:	b92a      	cbnz	r2, 800c2d2 <__ieee754_atan2f+0x4a>
 800c2c6:	2c02      	cmp	r4, #2
 800c2c8:	d057      	beq.n	800c37a <__ieee754_atan2f+0xf2>
 800c2ca:	2c03      	cmp	r4, #3
 800c2cc:	d113      	bne.n	800c2f6 <__ieee754_atan2f+0x6e>
 800c2ce:	4b2d      	ldr	r3, [pc, #180]	; (800c384 <__ieee754_atan2f+0xfc>)
 800c2d0:	e011      	b.n	800c2f6 <__ieee754_atan2f+0x6e>
 800c2d2:	b91e      	cbnz	r6, 800c2dc <__ieee754_atan2f+0x54>
 800c2d4:	2f00      	cmp	r7, #0
 800c2d6:	da52      	bge.n	800c37e <__ieee754_atan2f+0xf6>
 800c2d8:	4b2b      	ldr	r3, [pc, #172]	; (800c388 <__ieee754_atan2f+0x100>)
 800c2da:	e00c      	b.n	800c2f6 <__ieee754_atan2f+0x6e>
 800c2dc:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800c2e0:	d11a      	bne.n	800c318 <__ieee754_atan2f+0x90>
 800c2e2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c2e6:	d10c      	bne.n	800c302 <__ieee754_atan2f+0x7a>
 800c2e8:	2c02      	cmp	r4, #2
 800c2ea:	d006      	beq.n	800c2fa <__ieee754_atan2f+0x72>
 800c2ec:	2c03      	cmp	r4, #3
 800c2ee:	d006      	beq.n	800c2fe <__ieee754_atan2f+0x76>
 800c2f0:	2c01      	cmp	r4, #1
 800c2f2:	d140      	bne.n	800c376 <__ieee754_atan2f+0xee>
 800c2f4:	4b25      	ldr	r3, [pc, #148]	; (800c38c <__ieee754_atan2f+0x104>)
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2fa:	4b25      	ldr	r3, [pc, #148]	; (800c390 <__ieee754_atan2f+0x108>)
 800c2fc:	e7fb      	b.n	800c2f6 <__ieee754_atan2f+0x6e>
 800c2fe:	4b25      	ldr	r3, [pc, #148]	; (800c394 <__ieee754_atan2f+0x10c>)
 800c300:	e7f9      	b.n	800c2f6 <__ieee754_atan2f+0x6e>
 800c302:	2c02      	cmp	r4, #2
 800c304:	d039      	beq.n	800c37a <__ieee754_atan2f+0xf2>
 800c306:	2c03      	cmp	r4, #3
 800c308:	d0e1      	beq.n	800c2ce <__ieee754_atan2f+0x46>
 800c30a:	2c01      	cmp	r4, #1
 800c30c:	d102      	bne.n	800c314 <__ieee754_atan2f+0x8c>
 800c30e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c312:	e7f0      	b.n	800c2f6 <__ieee754_atan2f+0x6e>
 800c314:	2300      	movs	r3, #0
 800c316:	e7ee      	b.n	800c2f6 <__ieee754_atan2f+0x6e>
 800c318:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c31c:	d0da      	beq.n	800c2d4 <__ieee754_atan2f+0x4c>
 800c31e:	1b92      	subs	r2, r2, r6
 800c320:	15d2      	asrs	r2, r2, #23
 800c322:	2a3c      	cmp	r2, #60	; 0x3c
 800c324:	dc17      	bgt.n	800c356 <__ieee754_atan2f+0xce>
 800c326:	2900      	cmp	r1, #0
 800c328:	da01      	bge.n	800c32e <__ieee754_atan2f+0xa6>
 800c32a:	323c      	adds	r2, #60	; 0x3c
 800c32c:	db15      	blt.n	800c35a <__ieee754_atan2f+0xd2>
 800c32e:	4618      	mov	r0, r3
 800c330:	f7f4 fdb4 	bl	8000e9c <__aeabi_fdiv>
 800c334:	f001 fe0a 	bl	800df4c <fabsf>
 800c338:	f001 fcfc 	bl	800dd34 <atanf>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2c01      	cmp	r4, #1
 800c340:	d00d      	beq.n	800c35e <__ieee754_atan2f+0xd6>
 800c342:	2c02      	cmp	r4, #2
 800c344:	d00e      	beq.n	800c364 <__ieee754_atan2f+0xdc>
 800c346:	2c00      	cmp	r4, #0
 800c348:	d0d5      	beq.n	800c2f6 <__ieee754_atan2f+0x6e>
 800c34a:	4913      	ldr	r1, [pc, #76]	; (800c398 <__ieee754_atan2f+0x110>)
 800c34c:	4618      	mov	r0, r3
 800c34e:	f7f4 fbe9 	bl	8000b24 <__addsf3>
 800c352:	4912      	ldr	r1, [pc, #72]	; (800c39c <__ieee754_atan2f+0x114>)
 800c354:	e00c      	b.n	800c370 <__ieee754_atan2f+0xe8>
 800c356:	4b12      	ldr	r3, [pc, #72]	; (800c3a0 <__ieee754_atan2f+0x118>)
 800c358:	e7f1      	b.n	800c33e <__ieee754_atan2f+0xb6>
 800c35a:	2300      	movs	r3, #0
 800c35c:	e7ef      	b.n	800c33e <__ieee754_atan2f+0xb6>
 800c35e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c362:	e7c8      	b.n	800c2f6 <__ieee754_atan2f+0x6e>
 800c364:	490c      	ldr	r1, [pc, #48]	; (800c398 <__ieee754_atan2f+0x110>)
 800c366:	4618      	mov	r0, r3
 800c368:	f7f4 fbdc 	bl	8000b24 <__addsf3>
 800c36c:	4601      	mov	r1, r0
 800c36e:	480b      	ldr	r0, [pc, #44]	; (800c39c <__ieee754_atan2f+0x114>)
 800c370:	f7f4 fbd6 	bl	8000b20 <__aeabi_fsub>
 800c374:	e798      	b.n	800c2a8 <__ieee754_atan2f+0x20>
 800c376:	4b0b      	ldr	r3, [pc, #44]	; (800c3a4 <__ieee754_atan2f+0x11c>)
 800c378:	e7bd      	b.n	800c2f6 <__ieee754_atan2f+0x6e>
 800c37a:	4b08      	ldr	r3, [pc, #32]	; (800c39c <__ieee754_atan2f+0x114>)
 800c37c:	e7bb      	b.n	800c2f6 <__ieee754_atan2f+0x6e>
 800c37e:	4b08      	ldr	r3, [pc, #32]	; (800c3a0 <__ieee754_atan2f+0x118>)
 800c380:	e7b9      	b.n	800c2f6 <__ieee754_atan2f+0x6e>
 800c382:	bf00      	nop
 800c384:	c0490fdb 	.word	0xc0490fdb
 800c388:	bfc90fdb 	.word	0xbfc90fdb
 800c38c:	bf490fdb 	.word	0xbf490fdb
 800c390:	4016cbe4 	.word	0x4016cbe4
 800c394:	c016cbe4 	.word	0xc016cbe4
 800c398:	33bbbd2e 	.word	0x33bbbd2e
 800c39c:	40490fdb 	.word	0x40490fdb
 800c3a0:	3fc90fdb 	.word	0x3fc90fdb
 800c3a4:	3f490fdb 	.word	0x3f490fdb

0800c3a8 <__ieee754_rem_pio2f>:
 800c3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ac:	4a9d      	ldr	r2, [pc, #628]	; (800c624 <__ieee754_rem_pio2f+0x27c>)
 800c3ae:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800c3b2:	4295      	cmp	r5, r2
 800c3b4:	b087      	sub	sp, #28
 800c3b6:	460c      	mov	r4, r1
 800c3b8:	4607      	mov	r7, r0
 800c3ba:	dc04      	bgt.n	800c3c6 <__ieee754_rem_pio2f+0x1e>
 800c3bc:	2300      	movs	r3, #0
 800c3be:	6020      	str	r0, [r4, #0]
 800c3c0:	604b      	str	r3, [r1, #4]
 800c3c2:	2600      	movs	r6, #0
 800c3c4:	e01a      	b.n	800c3fc <__ieee754_rem_pio2f+0x54>
 800c3c6:	4a98      	ldr	r2, [pc, #608]	; (800c628 <__ieee754_rem_pio2f+0x280>)
 800c3c8:	4295      	cmp	r5, r2
 800c3ca:	dc4b      	bgt.n	800c464 <__ieee754_rem_pio2f+0xbc>
 800c3cc:	2800      	cmp	r0, #0
 800c3ce:	f025 050f 	bic.w	r5, r5, #15
 800c3d2:	4996      	ldr	r1, [pc, #600]	; (800c62c <__ieee754_rem_pio2f+0x284>)
 800c3d4:	4e96      	ldr	r6, [pc, #600]	; (800c630 <__ieee754_rem_pio2f+0x288>)
 800c3d6:	dd23      	ble.n	800c420 <__ieee754_rem_pio2f+0x78>
 800c3d8:	f7f4 fba2 	bl	8000b20 <__aeabi_fsub>
 800c3dc:	42b5      	cmp	r5, r6
 800c3de:	4607      	mov	r7, r0
 800c3e0:	d010      	beq.n	800c404 <__ieee754_rem_pio2f+0x5c>
 800c3e2:	4994      	ldr	r1, [pc, #592]	; (800c634 <__ieee754_rem_pio2f+0x28c>)
 800c3e4:	f7f4 fb9c 	bl	8000b20 <__aeabi_fsub>
 800c3e8:	4601      	mov	r1, r0
 800c3ea:	6020      	str	r0, [r4, #0]
 800c3ec:	4638      	mov	r0, r7
 800c3ee:	f7f4 fb97 	bl	8000b20 <__aeabi_fsub>
 800c3f2:	4990      	ldr	r1, [pc, #576]	; (800c634 <__ieee754_rem_pio2f+0x28c>)
 800c3f4:	f7f4 fb94 	bl	8000b20 <__aeabi_fsub>
 800c3f8:	2601      	movs	r6, #1
 800c3fa:	6060      	str	r0, [r4, #4]
 800c3fc:	4630      	mov	r0, r6
 800c3fe:	b007      	add	sp, #28
 800c400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c404:	498c      	ldr	r1, [pc, #560]	; (800c638 <__ieee754_rem_pio2f+0x290>)
 800c406:	f7f4 fb8b 	bl	8000b20 <__aeabi_fsub>
 800c40a:	498c      	ldr	r1, [pc, #560]	; (800c63c <__ieee754_rem_pio2f+0x294>)
 800c40c:	4605      	mov	r5, r0
 800c40e:	f7f4 fb87 	bl	8000b20 <__aeabi_fsub>
 800c412:	4601      	mov	r1, r0
 800c414:	6020      	str	r0, [r4, #0]
 800c416:	4628      	mov	r0, r5
 800c418:	f7f4 fb82 	bl	8000b20 <__aeabi_fsub>
 800c41c:	4987      	ldr	r1, [pc, #540]	; (800c63c <__ieee754_rem_pio2f+0x294>)
 800c41e:	e7e9      	b.n	800c3f4 <__ieee754_rem_pio2f+0x4c>
 800c420:	f7f4 fb80 	bl	8000b24 <__addsf3>
 800c424:	42b5      	cmp	r5, r6
 800c426:	4607      	mov	r7, r0
 800c428:	d00e      	beq.n	800c448 <__ieee754_rem_pio2f+0xa0>
 800c42a:	4982      	ldr	r1, [pc, #520]	; (800c634 <__ieee754_rem_pio2f+0x28c>)
 800c42c:	f7f4 fb7a 	bl	8000b24 <__addsf3>
 800c430:	4601      	mov	r1, r0
 800c432:	6020      	str	r0, [r4, #0]
 800c434:	4638      	mov	r0, r7
 800c436:	f7f4 fb73 	bl	8000b20 <__aeabi_fsub>
 800c43a:	497e      	ldr	r1, [pc, #504]	; (800c634 <__ieee754_rem_pio2f+0x28c>)
 800c43c:	f7f4 fb72 	bl	8000b24 <__addsf3>
 800c440:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800c444:	6060      	str	r0, [r4, #4]
 800c446:	e7d9      	b.n	800c3fc <__ieee754_rem_pio2f+0x54>
 800c448:	497b      	ldr	r1, [pc, #492]	; (800c638 <__ieee754_rem_pio2f+0x290>)
 800c44a:	f7f4 fb6b 	bl	8000b24 <__addsf3>
 800c44e:	497b      	ldr	r1, [pc, #492]	; (800c63c <__ieee754_rem_pio2f+0x294>)
 800c450:	4605      	mov	r5, r0
 800c452:	f7f4 fb67 	bl	8000b24 <__addsf3>
 800c456:	4601      	mov	r1, r0
 800c458:	6020      	str	r0, [r4, #0]
 800c45a:	4628      	mov	r0, r5
 800c45c:	f7f4 fb60 	bl	8000b20 <__aeabi_fsub>
 800c460:	4976      	ldr	r1, [pc, #472]	; (800c63c <__ieee754_rem_pio2f+0x294>)
 800c462:	e7eb      	b.n	800c43c <__ieee754_rem_pio2f+0x94>
 800c464:	4a76      	ldr	r2, [pc, #472]	; (800c640 <__ieee754_rem_pio2f+0x298>)
 800c466:	4295      	cmp	r5, r2
 800c468:	f300 808c 	bgt.w	800c584 <__ieee754_rem_pio2f+0x1dc>
 800c46c:	f001 fd6e 	bl	800df4c <fabsf>
 800c470:	4974      	ldr	r1, [pc, #464]	; (800c644 <__ieee754_rem_pio2f+0x29c>)
 800c472:	4680      	mov	r8, r0
 800c474:	f7f4 fc5e 	bl	8000d34 <__aeabi_fmul>
 800c478:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800c47c:	f7f4 fb52 	bl	8000b24 <__addsf3>
 800c480:	f7f4 fe1e 	bl	80010c0 <__aeabi_f2iz>
 800c484:	4606      	mov	r6, r0
 800c486:	f7f4 fc01 	bl	8000c8c <__aeabi_i2f>
 800c48a:	4968      	ldr	r1, [pc, #416]	; (800c62c <__ieee754_rem_pio2f+0x284>)
 800c48c:	4682      	mov	sl, r0
 800c48e:	f7f4 fc51 	bl	8000d34 <__aeabi_fmul>
 800c492:	4601      	mov	r1, r0
 800c494:	4640      	mov	r0, r8
 800c496:	f7f4 fb43 	bl	8000b20 <__aeabi_fsub>
 800c49a:	4966      	ldr	r1, [pc, #408]	; (800c634 <__ieee754_rem_pio2f+0x28c>)
 800c49c:	4680      	mov	r8, r0
 800c49e:	4650      	mov	r0, sl
 800c4a0:	f7f4 fc48 	bl	8000d34 <__aeabi_fmul>
 800c4a4:	2e1f      	cmp	r6, #31
 800c4a6:	4681      	mov	r9, r0
 800c4a8:	dc0c      	bgt.n	800c4c4 <__ieee754_rem_pio2f+0x11c>
 800c4aa:	4a67      	ldr	r2, [pc, #412]	; (800c648 <__ieee754_rem_pio2f+0x2a0>)
 800c4ac:	1e71      	subs	r1, r6, #1
 800c4ae:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c4b2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d004      	beq.n	800c4c4 <__ieee754_rem_pio2f+0x11c>
 800c4ba:	4649      	mov	r1, r9
 800c4bc:	4640      	mov	r0, r8
 800c4be:	f7f4 fb2f 	bl	8000b20 <__aeabi_fsub>
 800c4c2:	e009      	b.n	800c4d8 <__ieee754_rem_pio2f+0x130>
 800c4c4:	4649      	mov	r1, r9
 800c4c6:	4640      	mov	r0, r8
 800c4c8:	f7f4 fb2a 	bl	8000b20 <__aeabi_fsub>
 800c4cc:	15ed      	asrs	r5, r5, #23
 800c4ce:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c4d2:	1aeb      	subs	r3, r5, r3
 800c4d4:	2b08      	cmp	r3, #8
 800c4d6:	dc01      	bgt.n	800c4dc <__ieee754_rem_pio2f+0x134>
 800c4d8:	6020      	str	r0, [r4, #0]
 800c4da:	e024      	b.n	800c526 <__ieee754_rem_pio2f+0x17e>
 800c4dc:	4956      	ldr	r1, [pc, #344]	; (800c638 <__ieee754_rem_pio2f+0x290>)
 800c4de:	4650      	mov	r0, sl
 800c4e0:	f7f4 fc28 	bl	8000d34 <__aeabi_fmul>
 800c4e4:	4681      	mov	r9, r0
 800c4e6:	4601      	mov	r1, r0
 800c4e8:	4640      	mov	r0, r8
 800c4ea:	f7f4 fb19 	bl	8000b20 <__aeabi_fsub>
 800c4ee:	4601      	mov	r1, r0
 800c4f0:	4683      	mov	fp, r0
 800c4f2:	4640      	mov	r0, r8
 800c4f4:	f7f4 fb14 	bl	8000b20 <__aeabi_fsub>
 800c4f8:	4649      	mov	r1, r9
 800c4fa:	f7f4 fb11 	bl	8000b20 <__aeabi_fsub>
 800c4fe:	4680      	mov	r8, r0
 800c500:	494e      	ldr	r1, [pc, #312]	; (800c63c <__ieee754_rem_pio2f+0x294>)
 800c502:	4650      	mov	r0, sl
 800c504:	f7f4 fc16 	bl	8000d34 <__aeabi_fmul>
 800c508:	4641      	mov	r1, r8
 800c50a:	f7f4 fb09 	bl	8000b20 <__aeabi_fsub>
 800c50e:	4601      	mov	r1, r0
 800c510:	4681      	mov	r9, r0
 800c512:	4658      	mov	r0, fp
 800c514:	f7f4 fb04 	bl	8000b20 <__aeabi_fsub>
 800c518:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c51c:	1aed      	subs	r5, r5, r3
 800c51e:	2d19      	cmp	r5, #25
 800c520:	dc15      	bgt.n	800c54e <__ieee754_rem_pio2f+0x1a6>
 800c522:	46d8      	mov	r8, fp
 800c524:	6020      	str	r0, [r4, #0]
 800c526:	6825      	ldr	r5, [r4, #0]
 800c528:	4640      	mov	r0, r8
 800c52a:	4629      	mov	r1, r5
 800c52c:	f7f4 faf8 	bl	8000b20 <__aeabi_fsub>
 800c530:	4649      	mov	r1, r9
 800c532:	f7f4 faf5 	bl	8000b20 <__aeabi_fsub>
 800c536:	2f00      	cmp	r7, #0
 800c538:	6060      	str	r0, [r4, #4]
 800c53a:	f6bf af5f 	bge.w	800c3fc <__ieee754_rem_pio2f+0x54>
 800c53e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800c542:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c546:	6025      	str	r5, [r4, #0]
 800c548:	6060      	str	r0, [r4, #4]
 800c54a:	4276      	negs	r6, r6
 800c54c:	e756      	b.n	800c3fc <__ieee754_rem_pio2f+0x54>
 800c54e:	493f      	ldr	r1, [pc, #252]	; (800c64c <__ieee754_rem_pio2f+0x2a4>)
 800c550:	4650      	mov	r0, sl
 800c552:	f7f4 fbef 	bl	8000d34 <__aeabi_fmul>
 800c556:	4605      	mov	r5, r0
 800c558:	4601      	mov	r1, r0
 800c55a:	4658      	mov	r0, fp
 800c55c:	f7f4 fae0 	bl	8000b20 <__aeabi_fsub>
 800c560:	4601      	mov	r1, r0
 800c562:	4680      	mov	r8, r0
 800c564:	4658      	mov	r0, fp
 800c566:	f7f4 fadb 	bl	8000b20 <__aeabi_fsub>
 800c56a:	4629      	mov	r1, r5
 800c56c:	f7f4 fad8 	bl	8000b20 <__aeabi_fsub>
 800c570:	4605      	mov	r5, r0
 800c572:	4937      	ldr	r1, [pc, #220]	; (800c650 <__ieee754_rem_pio2f+0x2a8>)
 800c574:	4650      	mov	r0, sl
 800c576:	f7f4 fbdd 	bl	8000d34 <__aeabi_fmul>
 800c57a:	4629      	mov	r1, r5
 800c57c:	f7f4 fad0 	bl	8000b20 <__aeabi_fsub>
 800c580:	4681      	mov	r9, r0
 800c582:	e79a      	b.n	800c4ba <__ieee754_rem_pio2f+0x112>
 800c584:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c588:	db05      	blt.n	800c596 <__ieee754_rem_pio2f+0x1ee>
 800c58a:	4601      	mov	r1, r0
 800c58c:	f7f4 fac8 	bl	8000b20 <__aeabi_fsub>
 800c590:	6060      	str	r0, [r4, #4]
 800c592:	6020      	str	r0, [r4, #0]
 800c594:	e715      	b.n	800c3c2 <__ieee754_rem_pio2f+0x1a>
 800c596:	15ee      	asrs	r6, r5, #23
 800c598:	3e86      	subs	r6, #134	; 0x86
 800c59a:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 800c59e:	4628      	mov	r0, r5
 800c5a0:	f7f4 fd8e 	bl	80010c0 <__aeabi_f2iz>
 800c5a4:	f7f4 fb72 	bl	8000c8c <__aeabi_i2f>
 800c5a8:	4601      	mov	r1, r0
 800c5aa:	9003      	str	r0, [sp, #12]
 800c5ac:	4628      	mov	r0, r5
 800c5ae:	f7f4 fab7 	bl	8000b20 <__aeabi_fsub>
 800c5b2:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800c5b6:	f7f4 fbbd 	bl	8000d34 <__aeabi_fmul>
 800c5ba:	4680      	mov	r8, r0
 800c5bc:	f7f4 fd80 	bl	80010c0 <__aeabi_f2iz>
 800c5c0:	f7f4 fb64 	bl	8000c8c <__aeabi_i2f>
 800c5c4:	4601      	mov	r1, r0
 800c5c6:	9004      	str	r0, [sp, #16]
 800c5c8:	4605      	mov	r5, r0
 800c5ca:	4640      	mov	r0, r8
 800c5cc:	f7f4 faa8 	bl	8000b20 <__aeabi_fsub>
 800c5d0:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800c5d4:	f7f4 fbae 	bl	8000d34 <__aeabi_fmul>
 800c5d8:	2100      	movs	r1, #0
 800c5da:	9005      	str	r0, [sp, #20]
 800c5dc:	f7f4 fd3e 	bl	800105c <__aeabi_fcmpeq>
 800c5e0:	b1e8      	cbz	r0, 800c61e <__ieee754_rem_pio2f+0x276>
 800c5e2:	2100      	movs	r1, #0
 800c5e4:	4628      	mov	r0, r5
 800c5e6:	f7f4 fd39 	bl	800105c <__aeabi_fcmpeq>
 800c5ea:	2800      	cmp	r0, #0
 800c5ec:	bf14      	ite	ne
 800c5ee:	2301      	movne	r3, #1
 800c5f0:	2302      	moveq	r3, #2
 800c5f2:	4a18      	ldr	r2, [pc, #96]	; (800c654 <__ieee754_rem_pio2f+0x2ac>)
 800c5f4:	4621      	mov	r1, r4
 800c5f6:	9201      	str	r2, [sp, #4]
 800c5f8:	2202      	movs	r2, #2
 800c5fa:	a803      	add	r0, sp, #12
 800c5fc:	9200      	str	r2, [sp, #0]
 800c5fe:	4632      	mov	r2, r6
 800c600:	f000 fd68 	bl	800d0d4 <__kernel_rem_pio2f>
 800c604:	2f00      	cmp	r7, #0
 800c606:	4606      	mov	r6, r0
 800c608:	f6bf aef8 	bge.w	800c3fc <__ieee754_rem_pio2f+0x54>
 800c60c:	6823      	ldr	r3, [r4, #0]
 800c60e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c612:	6023      	str	r3, [r4, #0]
 800c614:	6863      	ldr	r3, [r4, #4]
 800c616:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c61a:	6063      	str	r3, [r4, #4]
 800c61c:	e795      	b.n	800c54a <__ieee754_rem_pio2f+0x1a2>
 800c61e:	2303      	movs	r3, #3
 800c620:	e7e7      	b.n	800c5f2 <__ieee754_rem_pio2f+0x24a>
 800c622:	bf00      	nop
 800c624:	3f490fd8 	.word	0x3f490fd8
 800c628:	4016cbe3 	.word	0x4016cbe3
 800c62c:	3fc90f80 	.word	0x3fc90f80
 800c630:	3fc90fd0 	.word	0x3fc90fd0
 800c634:	37354443 	.word	0x37354443
 800c638:	37354400 	.word	0x37354400
 800c63c:	2e85a308 	.word	0x2e85a308
 800c640:	43490f80 	.word	0x43490f80
 800c644:	3f22f984 	.word	0x3f22f984
 800c648:	0800e2f0 	.word	0x0800e2f0
 800c64c:	2e85a300 	.word	0x2e85a300
 800c650:	248d3132 	.word	0x248d3132
 800c654:	0800e370 	.word	0x0800e370

0800c658 <__kernel_cos>:
 800c658:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c65c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c660:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800c664:	4680      	mov	r8, r0
 800c666:	460f      	mov	r7, r1
 800c668:	e9cd 2300 	strd	r2, r3, [sp]
 800c66c:	da04      	bge.n	800c678 <__kernel_cos+0x20>
 800c66e:	f7f4 f9db 	bl	8000a28 <__aeabi_d2iz>
 800c672:	2800      	cmp	r0, #0
 800c674:	f000 8086 	beq.w	800c784 <__kernel_cos+0x12c>
 800c678:	4642      	mov	r2, r8
 800c67a:	463b      	mov	r3, r7
 800c67c:	4640      	mov	r0, r8
 800c67e:	4639      	mov	r1, r7
 800c680:	f7f3 ff22 	bl	80004c8 <__aeabi_dmul>
 800c684:	2200      	movs	r2, #0
 800c686:	4b4e      	ldr	r3, [pc, #312]	; (800c7c0 <__kernel_cos+0x168>)
 800c688:	4604      	mov	r4, r0
 800c68a:	460d      	mov	r5, r1
 800c68c:	f7f3 ff1c 	bl	80004c8 <__aeabi_dmul>
 800c690:	a33f      	add	r3, pc, #252	; (adr r3, 800c790 <__kernel_cos+0x138>)
 800c692:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c696:	4682      	mov	sl, r0
 800c698:	468b      	mov	fp, r1
 800c69a:	4620      	mov	r0, r4
 800c69c:	4629      	mov	r1, r5
 800c69e:	f7f3 ff13 	bl	80004c8 <__aeabi_dmul>
 800c6a2:	a33d      	add	r3, pc, #244	; (adr r3, 800c798 <__kernel_cos+0x140>)
 800c6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6a8:	f7f3 fd58 	bl	800015c <__adddf3>
 800c6ac:	4622      	mov	r2, r4
 800c6ae:	462b      	mov	r3, r5
 800c6b0:	f7f3 ff0a 	bl	80004c8 <__aeabi_dmul>
 800c6b4:	a33a      	add	r3, pc, #232	; (adr r3, 800c7a0 <__kernel_cos+0x148>)
 800c6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6ba:	f7f3 fd4d 	bl	8000158 <__aeabi_dsub>
 800c6be:	4622      	mov	r2, r4
 800c6c0:	462b      	mov	r3, r5
 800c6c2:	f7f3 ff01 	bl	80004c8 <__aeabi_dmul>
 800c6c6:	a338      	add	r3, pc, #224	; (adr r3, 800c7a8 <__kernel_cos+0x150>)
 800c6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6cc:	f7f3 fd46 	bl	800015c <__adddf3>
 800c6d0:	4622      	mov	r2, r4
 800c6d2:	462b      	mov	r3, r5
 800c6d4:	f7f3 fef8 	bl	80004c8 <__aeabi_dmul>
 800c6d8:	a335      	add	r3, pc, #212	; (adr r3, 800c7b0 <__kernel_cos+0x158>)
 800c6da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6de:	f7f3 fd3b 	bl	8000158 <__aeabi_dsub>
 800c6e2:	4622      	mov	r2, r4
 800c6e4:	462b      	mov	r3, r5
 800c6e6:	f7f3 feef 	bl	80004c8 <__aeabi_dmul>
 800c6ea:	a333      	add	r3, pc, #204	; (adr r3, 800c7b8 <__kernel_cos+0x160>)
 800c6ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6f0:	f7f3 fd34 	bl	800015c <__adddf3>
 800c6f4:	4622      	mov	r2, r4
 800c6f6:	462b      	mov	r3, r5
 800c6f8:	f7f3 fee6 	bl	80004c8 <__aeabi_dmul>
 800c6fc:	4622      	mov	r2, r4
 800c6fe:	462b      	mov	r3, r5
 800c700:	f7f3 fee2 	bl	80004c8 <__aeabi_dmul>
 800c704:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c708:	4604      	mov	r4, r0
 800c70a:	460d      	mov	r5, r1
 800c70c:	4640      	mov	r0, r8
 800c70e:	4639      	mov	r1, r7
 800c710:	f7f3 feda 	bl	80004c8 <__aeabi_dmul>
 800c714:	460b      	mov	r3, r1
 800c716:	4602      	mov	r2, r0
 800c718:	4629      	mov	r1, r5
 800c71a:	4620      	mov	r0, r4
 800c71c:	f7f3 fd1c 	bl	8000158 <__aeabi_dsub>
 800c720:	4b28      	ldr	r3, [pc, #160]	; (800c7c4 <__kernel_cos+0x16c>)
 800c722:	4680      	mov	r8, r0
 800c724:	429e      	cmp	r6, r3
 800c726:	4689      	mov	r9, r1
 800c728:	dc0e      	bgt.n	800c748 <__kernel_cos+0xf0>
 800c72a:	4602      	mov	r2, r0
 800c72c:	460b      	mov	r3, r1
 800c72e:	4650      	mov	r0, sl
 800c730:	4659      	mov	r1, fp
 800c732:	f7f3 fd11 	bl	8000158 <__aeabi_dsub>
 800c736:	4602      	mov	r2, r0
 800c738:	2000      	movs	r0, #0
 800c73a:	460b      	mov	r3, r1
 800c73c:	4922      	ldr	r1, [pc, #136]	; (800c7c8 <__kernel_cos+0x170>)
 800c73e:	f7f3 fd0b 	bl	8000158 <__aeabi_dsub>
 800c742:	b003      	add	sp, #12
 800c744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c748:	2400      	movs	r4, #0
 800c74a:	4b20      	ldr	r3, [pc, #128]	; (800c7cc <__kernel_cos+0x174>)
 800c74c:	4622      	mov	r2, r4
 800c74e:	429e      	cmp	r6, r3
 800c750:	bfcc      	ite	gt
 800c752:	4d1f      	ldrgt	r5, [pc, #124]	; (800c7d0 <__kernel_cos+0x178>)
 800c754:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800c758:	462b      	mov	r3, r5
 800c75a:	2000      	movs	r0, #0
 800c75c:	491a      	ldr	r1, [pc, #104]	; (800c7c8 <__kernel_cos+0x170>)
 800c75e:	f7f3 fcfb 	bl	8000158 <__aeabi_dsub>
 800c762:	4622      	mov	r2, r4
 800c764:	4606      	mov	r6, r0
 800c766:	460f      	mov	r7, r1
 800c768:	462b      	mov	r3, r5
 800c76a:	4650      	mov	r0, sl
 800c76c:	4659      	mov	r1, fp
 800c76e:	f7f3 fcf3 	bl	8000158 <__aeabi_dsub>
 800c772:	4642      	mov	r2, r8
 800c774:	464b      	mov	r3, r9
 800c776:	f7f3 fcef 	bl	8000158 <__aeabi_dsub>
 800c77a:	4602      	mov	r2, r0
 800c77c:	460b      	mov	r3, r1
 800c77e:	4630      	mov	r0, r6
 800c780:	4639      	mov	r1, r7
 800c782:	e7dc      	b.n	800c73e <__kernel_cos+0xe6>
 800c784:	2000      	movs	r0, #0
 800c786:	4910      	ldr	r1, [pc, #64]	; (800c7c8 <__kernel_cos+0x170>)
 800c788:	e7db      	b.n	800c742 <__kernel_cos+0xea>
 800c78a:	bf00      	nop
 800c78c:	f3af 8000 	nop.w
 800c790:	be8838d4 	.word	0xbe8838d4
 800c794:	bda8fae9 	.word	0xbda8fae9
 800c798:	bdb4b1c4 	.word	0xbdb4b1c4
 800c79c:	3e21ee9e 	.word	0x3e21ee9e
 800c7a0:	809c52ad 	.word	0x809c52ad
 800c7a4:	3e927e4f 	.word	0x3e927e4f
 800c7a8:	19cb1590 	.word	0x19cb1590
 800c7ac:	3efa01a0 	.word	0x3efa01a0
 800c7b0:	16c15177 	.word	0x16c15177
 800c7b4:	3f56c16c 	.word	0x3f56c16c
 800c7b8:	5555554c 	.word	0x5555554c
 800c7bc:	3fa55555 	.word	0x3fa55555
 800c7c0:	3fe00000 	.word	0x3fe00000
 800c7c4:	3fd33332 	.word	0x3fd33332
 800c7c8:	3ff00000 	.word	0x3ff00000
 800c7cc:	3fe90000 	.word	0x3fe90000
 800c7d0:	3fd20000 	.word	0x3fd20000

0800c7d4 <__kernel_rem_pio2>:
 800c7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800c7dc:	9307      	str	r3, [sp, #28]
 800c7de:	9104      	str	r1, [sp, #16]
 800c7e0:	4bbf      	ldr	r3, [pc, #764]	; (800cae0 <__kernel_rem_pio2+0x30c>)
 800c7e2:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800c7e4:	1ed4      	subs	r4, r2, #3
 800c7e6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c7ea:	2500      	movs	r5, #0
 800c7ec:	9302      	str	r3, [sp, #8]
 800c7ee:	9b07      	ldr	r3, [sp, #28]
 800c7f0:	9008      	str	r0, [sp, #32]
 800c7f2:	3b01      	subs	r3, #1
 800c7f4:	9306      	str	r3, [sp, #24]
 800c7f6:	2318      	movs	r3, #24
 800c7f8:	fb94 f4f3 	sdiv	r4, r4, r3
 800c7fc:	f06f 0317 	mvn.w	r3, #23
 800c800:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800c804:	fb04 3303 	mla	r3, r4, r3, r3
 800c808:	eb03 0a02 	add.w	sl, r3, r2
 800c80c:	9a06      	ldr	r2, [sp, #24]
 800c80e:	9b02      	ldr	r3, [sp, #8]
 800c810:	1aa7      	subs	r7, r4, r2
 800c812:	eb03 0802 	add.w	r8, r3, r2
 800c816:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c818:	2200      	movs	r2, #0
 800c81a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c81e:	2300      	movs	r3, #0
 800c820:	ae1e      	add	r6, sp, #120	; 0x78
 800c822:	4545      	cmp	r5, r8
 800c824:	dd14      	ble.n	800c850 <__kernel_rem_pio2+0x7c>
 800c826:	2600      	movs	r6, #0
 800c828:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800c82c:	9b02      	ldr	r3, [sp, #8]
 800c82e:	429e      	cmp	r6, r3
 800c830:	dc39      	bgt.n	800c8a6 <__kernel_rem_pio2+0xd2>
 800c832:	9b08      	ldr	r3, [sp, #32]
 800c834:	f04f 0800 	mov.w	r8, #0
 800c838:	3b08      	subs	r3, #8
 800c83a:	9300      	str	r3, [sp, #0]
 800c83c:	9b07      	ldr	r3, [sp, #28]
 800c83e:	f04f 0900 	mov.w	r9, #0
 800c842:	199d      	adds	r5, r3, r6
 800c844:	ab20      	add	r3, sp, #128	; 0x80
 800c846:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c84a:	9305      	str	r3, [sp, #20]
 800c84c:	2700      	movs	r7, #0
 800c84e:	e023      	b.n	800c898 <__kernel_rem_pio2+0xc4>
 800c850:	42ef      	cmn	r7, r5
 800c852:	d40b      	bmi.n	800c86c <__kernel_rem_pio2+0x98>
 800c854:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c858:	e9cd 2300 	strd	r2, r3, [sp]
 800c85c:	f7f3 fdca 	bl	80003f4 <__aeabi_i2d>
 800c860:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c864:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800c868:	3501      	adds	r5, #1
 800c86a:	e7da      	b.n	800c822 <__kernel_rem_pio2+0x4e>
 800c86c:	4610      	mov	r0, r2
 800c86e:	4619      	mov	r1, r3
 800c870:	e7f8      	b.n	800c864 <__kernel_rem_pio2+0x90>
 800c872:	9905      	ldr	r1, [sp, #20]
 800c874:	9d00      	ldr	r5, [sp, #0]
 800c876:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800c87a:	9105      	str	r1, [sp, #20]
 800c87c:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800c880:	9500      	str	r5, [sp, #0]
 800c882:	f7f3 fe21 	bl	80004c8 <__aeabi_dmul>
 800c886:	4602      	mov	r2, r0
 800c888:	460b      	mov	r3, r1
 800c88a:	4640      	mov	r0, r8
 800c88c:	4649      	mov	r1, r9
 800c88e:	f7f3 fc65 	bl	800015c <__adddf3>
 800c892:	4680      	mov	r8, r0
 800c894:	4689      	mov	r9, r1
 800c896:	3701      	adds	r7, #1
 800c898:	9b06      	ldr	r3, [sp, #24]
 800c89a:	429f      	cmp	r7, r3
 800c89c:	dde9      	ble.n	800c872 <__kernel_rem_pio2+0x9e>
 800c89e:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800c8a2:	3601      	adds	r6, #1
 800c8a4:	e7c2      	b.n	800c82c <__kernel_rem_pio2+0x58>
 800c8a6:	9b02      	ldr	r3, [sp, #8]
 800c8a8:	aa0c      	add	r2, sp, #48	; 0x30
 800c8aa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c8ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800c8b0:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800c8b2:	9f02      	ldr	r7, [sp, #8]
 800c8b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c8b8:	930a      	str	r3, [sp, #40]	; 0x28
 800c8ba:	2600      	movs	r6, #0
 800c8bc:	ab98      	add	r3, sp, #608	; 0x260
 800c8be:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800c8c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c8c6:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800c8ca:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800c8ce:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800c8d2:	ab98      	add	r3, sp, #608	; 0x260
 800c8d4:	445b      	add	r3, fp
 800c8d6:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800c8da:	1bbb      	subs	r3, r7, r6
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	dc71      	bgt.n	800c9c4 <__kernel_rem_pio2+0x1f0>
 800c8e0:	4652      	mov	r2, sl
 800c8e2:	4640      	mov	r0, r8
 800c8e4:	4649      	mov	r1, r9
 800c8e6:	f001 f9b7 	bl	800dc58 <scalbn>
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c8f0:	4604      	mov	r4, r0
 800c8f2:	460d      	mov	r5, r1
 800c8f4:	f7f3 fde8 	bl	80004c8 <__aeabi_dmul>
 800c8f8:	f001 f896 	bl	800da28 <floor>
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	4b79      	ldr	r3, [pc, #484]	; (800cae4 <__kernel_rem_pio2+0x310>)
 800c900:	f7f3 fde2 	bl	80004c8 <__aeabi_dmul>
 800c904:	4602      	mov	r2, r0
 800c906:	460b      	mov	r3, r1
 800c908:	4620      	mov	r0, r4
 800c90a:	4629      	mov	r1, r5
 800c90c:	f7f3 fc24 	bl	8000158 <__aeabi_dsub>
 800c910:	460d      	mov	r5, r1
 800c912:	4604      	mov	r4, r0
 800c914:	f7f4 f888 	bl	8000a28 <__aeabi_d2iz>
 800c918:	9005      	str	r0, [sp, #20]
 800c91a:	f7f3 fd6b 	bl	80003f4 <__aeabi_i2d>
 800c91e:	4602      	mov	r2, r0
 800c920:	460b      	mov	r3, r1
 800c922:	4620      	mov	r0, r4
 800c924:	4629      	mov	r1, r5
 800c926:	f7f3 fc17 	bl	8000158 <__aeabi_dsub>
 800c92a:	f1ba 0f00 	cmp.w	sl, #0
 800c92e:	4680      	mov	r8, r0
 800c930:	4689      	mov	r9, r1
 800c932:	dd6c      	ble.n	800ca0e <__kernel_rem_pio2+0x23a>
 800c934:	1e7a      	subs	r2, r7, #1
 800c936:	ab0c      	add	r3, sp, #48	; 0x30
 800c938:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c93c:	f1ca 0118 	rsb	r1, sl, #24
 800c940:	9c05      	ldr	r4, [sp, #20]
 800c942:	fa40 f301 	asr.w	r3, r0, r1
 800c946:	441c      	add	r4, r3
 800c948:	408b      	lsls	r3, r1
 800c94a:	1ac0      	subs	r0, r0, r3
 800c94c:	ab0c      	add	r3, sp, #48	; 0x30
 800c94e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c952:	f1ca 0317 	rsb	r3, sl, #23
 800c956:	9405      	str	r4, [sp, #20]
 800c958:	fa40 f303 	asr.w	r3, r0, r3
 800c95c:	9300      	str	r3, [sp, #0]
 800c95e:	9b00      	ldr	r3, [sp, #0]
 800c960:	2b00      	cmp	r3, #0
 800c962:	dd62      	ble.n	800ca2a <__kernel_rem_pio2+0x256>
 800c964:	2200      	movs	r2, #0
 800c966:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c96a:	4614      	mov	r4, r2
 800c96c:	9b05      	ldr	r3, [sp, #20]
 800c96e:	3301      	adds	r3, #1
 800c970:	9305      	str	r3, [sp, #20]
 800c972:	4297      	cmp	r7, r2
 800c974:	f300 809f 	bgt.w	800cab6 <__kernel_rem_pio2+0x2e2>
 800c978:	f1ba 0f00 	cmp.w	sl, #0
 800c97c:	dd07      	ble.n	800c98e <__kernel_rem_pio2+0x1ba>
 800c97e:	f1ba 0f01 	cmp.w	sl, #1
 800c982:	f000 80bb 	beq.w	800cafc <__kernel_rem_pio2+0x328>
 800c986:	f1ba 0f02 	cmp.w	sl, #2
 800c98a:	f000 80c1 	beq.w	800cb10 <__kernel_rem_pio2+0x33c>
 800c98e:	9b00      	ldr	r3, [sp, #0]
 800c990:	2b02      	cmp	r3, #2
 800c992:	d14a      	bne.n	800ca2a <__kernel_rem_pio2+0x256>
 800c994:	4642      	mov	r2, r8
 800c996:	464b      	mov	r3, r9
 800c998:	2000      	movs	r0, #0
 800c99a:	4953      	ldr	r1, [pc, #332]	; (800cae8 <__kernel_rem_pio2+0x314>)
 800c99c:	f7f3 fbdc 	bl	8000158 <__aeabi_dsub>
 800c9a0:	4680      	mov	r8, r0
 800c9a2:	4689      	mov	r9, r1
 800c9a4:	2c00      	cmp	r4, #0
 800c9a6:	d040      	beq.n	800ca2a <__kernel_rem_pio2+0x256>
 800c9a8:	4652      	mov	r2, sl
 800c9aa:	2000      	movs	r0, #0
 800c9ac:	494e      	ldr	r1, [pc, #312]	; (800cae8 <__kernel_rem_pio2+0x314>)
 800c9ae:	f001 f953 	bl	800dc58 <scalbn>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	460b      	mov	r3, r1
 800c9b6:	4640      	mov	r0, r8
 800c9b8:	4649      	mov	r1, r9
 800c9ba:	f7f3 fbcd 	bl	8000158 <__aeabi_dsub>
 800c9be:	4680      	mov	r8, r0
 800c9c0:	4689      	mov	r9, r1
 800c9c2:	e032      	b.n	800ca2a <__kernel_rem_pio2+0x256>
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	4b49      	ldr	r3, [pc, #292]	; (800caec <__kernel_rem_pio2+0x318>)
 800c9c8:	4640      	mov	r0, r8
 800c9ca:	4649      	mov	r1, r9
 800c9cc:	f7f3 fd7c 	bl	80004c8 <__aeabi_dmul>
 800c9d0:	f7f4 f82a 	bl	8000a28 <__aeabi_d2iz>
 800c9d4:	f7f3 fd0e 	bl	80003f4 <__aeabi_i2d>
 800c9d8:	2200      	movs	r2, #0
 800c9da:	4b45      	ldr	r3, [pc, #276]	; (800caf0 <__kernel_rem_pio2+0x31c>)
 800c9dc:	e9cd 0100 	strd	r0, r1, [sp]
 800c9e0:	f7f3 fd72 	bl	80004c8 <__aeabi_dmul>
 800c9e4:	4602      	mov	r2, r0
 800c9e6:	460b      	mov	r3, r1
 800c9e8:	4640      	mov	r0, r8
 800c9ea:	4649      	mov	r1, r9
 800c9ec:	f7f3 fbb4 	bl	8000158 <__aeabi_dsub>
 800c9f0:	f7f4 f81a 	bl	8000a28 <__aeabi_d2iz>
 800c9f4:	ab0c      	add	r3, sp, #48	; 0x30
 800c9f6:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800c9fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c9fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca02:	f7f3 fbab 	bl	800015c <__adddf3>
 800ca06:	3601      	adds	r6, #1
 800ca08:	4680      	mov	r8, r0
 800ca0a:	4689      	mov	r9, r1
 800ca0c:	e765      	b.n	800c8da <__kernel_rem_pio2+0x106>
 800ca0e:	d105      	bne.n	800ca1c <__kernel_rem_pio2+0x248>
 800ca10:	1e7b      	subs	r3, r7, #1
 800ca12:	aa0c      	add	r2, sp, #48	; 0x30
 800ca14:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ca18:	15c3      	asrs	r3, r0, #23
 800ca1a:	e79f      	b.n	800c95c <__kernel_rem_pio2+0x188>
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	4b35      	ldr	r3, [pc, #212]	; (800caf4 <__kernel_rem_pio2+0x320>)
 800ca20:	f7f3 ffd8 	bl	80009d4 <__aeabi_dcmpge>
 800ca24:	2800      	cmp	r0, #0
 800ca26:	d143      	bne.n	800cab0 <__kernel_rem_pio2+0x2dc>
 800ca28:	9000      	str	r0, [sp, #0]
 800ca2a:	2200      	movs	r2, #0
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	4640      	mov	r0, r8
 800ca30:	4649      	mov	r1, r9
 800ca32:	f7f3 ffb1 	bl	8000998 <__aeabi_dcmpeq>
 800ca36:	2800      	cmp	r0, #0
 800ca38:	f000 80c3 	beq.w	800cbc2 <__kernel_rem_pio2+0x3ee>
 800ca3c:	1e7c      	subs	r4, r7, #1
 800ca3e:	4623      	mov	r3, r4
 800ca40:	2200      	movs	r2, #0
 800ca42:	9902      	ldr	r1, [sp, #8]
 800ca44:	428b      	cmp	r3, r1
 800ca46:	da6a      	bge.n	800cb1e <__kernel_rem_pio2+0x34a>
 800ca48:	2a00      	cmp	r2, #0
 800ca4a:	f000 8084 	beq.w	800cb56 <__kernel_rem_pio2+0x382>
 800ca4e:	ab0c      	add	r3, sp, #48	; 0x30
 800ca50:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800ca54:	f1aa 0a18 	sub.w	sl, sl, #24
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f000 80b0 	beq.w	800cbbe <__kernel_rem_pio2+0x3ea>
 800ca5e:	4652      	mov	r2, sl
 800ca60:	2000      	movs	r0, #0
 800ca62:	4921      	ldr	r1, [pc, #132]	; (800cae8 <__kernel_rem_pio2+0x314>)
 800ca64:	f001 f8f8 	bl	800dc58 <scalbn>
 800ca68:	4625      	mov	r5, r4
 800ca6a:	4606      	mov	r6, r0
 800ca6c:	460f      	mov	r7, r1
 800ca6e:	f04f 0a00 	mov.w	sl, #0
 800ca72:	00e3      	lsls	r3, r4, #3
 800ca74:	aa98      	add	r2, sp, #608	; 0x260
 800ca76:	eb02 0803 	add.w	r8, r2, r3
 800ca7a:	f8df b070 	ldr.w	fp, [pc, #112]	; 800caec <__kernel_rem_pio2+0x318>
 800ca7e:	9306      	str	r3, [sp, #24]
 800ca80:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800ca84:	2d00      	cmp	r5, #0
 800ca86:	f280 80d2 	bge.w	800cc2e <__kernel_rem_pio2+0x45a>
 800ca8a:	2500      	movs	r5, #0
 800ca8c:	9a06      	ldr	r2, [sp, #24]
 800ca8e:	ab98      	add	r3, sp, #608	; 0x260
 800ca90:	189e      	adds	r6, r3, r2
 800ca92:	3ea8      	subs	r6, #168	; 0xa8
 800ca94:	1b63      	subs	r3, r4, r5
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	f2c0 80f9 	blt.w	800cc8e <__kernel_rem_pio2+0x4ba>
 800ca9c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800caf8 <__kernel_rem_pio2+0x324>
 800caa0:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800caa4:	f04f 0a00 	mov.w	sl, #0
 800caa8:	f04f 0b00 	mov.w	fp, #0
 800caac:	2700      	movs	r7, #0
 800caae:	e0e2      	b.n	800cc76 <__kernel_rem_pio2+0x4a2>
 800cab0:	2302      	movs	r3, #2
 800cab2:	9300      	str	r3, [sp, #0]
 800cab4:	e756      	b.n	800c964 <__kernel_rem_pio2+0x190>
 800cab6:	ab0c      	add	r3, sp, #48	; 0x30
 800cab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cabc:	b94c      	cbnz	r4, 800cad2 <__kernel_rem_pio2+0x2fe>
 800cabe:	b12b      	cbz	r3, 800cacc <__kernel_rem_pio2+0x2f8>
 800cac0:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800cac4:	a80c      	add	r0, sp, #48	; 0x30
 800cac6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800caca:	2301      	movs	r3, #1
 800cacc:	3201      	adds	r2, #1
 800cace:	461c      	mov	r4, r3
 800cad0:	e74f      	b.n	800c972 <__kernel_rem_pio2+0x19e>
 800cad2:	1acb      	subs	r3, r1, r3
 800cad4:	a80c      	add	r0, sp, #48	; 0x30
 800cad6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800cada:	4623      	mov	r3, r4
 800cadc:	e7f6      	b.n	800cacc <__kernel_rem_pio2+0x2f8>
 800cade:	bf00      	nop
 800cae0:	0800e6c8 	.word	0x0800e6c8
 800cae4:	40200000 	.word	0x40200000
 800cae8:	3ff00000 	.word	0x3ff00000
 800caec:	3e700000 	.word	0x3e700000
 800caf0:	41700000 	.word	0x41700000
 800caf4:	3fe00000 	.word	0x3fe00000
 800caf8:	0800e680 	.word	0x0800e680
 800cafc:	1e7a      	subs	r2, r7, #1
 800cafe:	ab0c      	add	r3, sp, #48	; 0x30
 800cb00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb04:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cb08:	a90c      	add	r1, sp, #48	; 0x30
 800cb0a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800cb0e:	e73e      	b.n	800c98e <__kernel_rem_pio2+0x1ba>
 800cb10:	1e7a      	subs	r2, r7, #1
 800cb12:	ab0c      	add	r3, sp, #48	; 0x30
 800cb14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb18:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800cb1c:	e7f4      	b.n	800cb08 <__kernel_rem_pio2+0x334>
 800cb1e:	a90c      	add	r1, sp, #48	; 0x30
 800cb20:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800cb24:	3b01      	subs	r3, #1
 800cb26:	430a      	orrs	r2, r1
 800cb28:	e78b      	b.n	800ca42 <__kernel_rem_pio2+0x26e>
 800cb2a:	3401      	adds	r4, #1
 800cb2c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800cb30:	2a00      	cmp	r2, #0
 800cb32:	d0fa      	beq.n	800cb2a <__kernel_rem_pio2+0x356>
 800cb34:	ab98      	add	r3, sp, #608	; 0x260
 800cb36:	449b      	add	fp, r3
 800cb38:	9b07      	ldr	r3, [sp, #28]
 800cb3a:	1c7e      	adds	r6, r7, #1
 800cb3c:	19dd      	adds	r5, r3, r7
 800cb3e:	ab98      	add	r3, sp, #608	; 0x260
 800cb40:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800cb44:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800cb48:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800cb4c:	443c      	add	r4, r7
 800cb4e:	42b4      	cmp	r4, r6
 800cb50:	da04      	bge.n	800cb5c <__kernel_rem_pio2+0x388>
 800cb52:	4627      	mov	r7, r4
 800cb54:	e6b1      	b.n	800c8ba <__kernel_rem_pio2+0xe6>
 800cb56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb58:	2401      	movs	r4, #1
 800cb5a:	e7e7      	b.n	800cb2c <__kernel_rem_pio2+0x358>
 800cb5c:	f105 0308 	add.w	r3, r5, #8
 800cb60:	9309      	str	r3, [sp, #36]	; 0x24
 800cb62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb64:	2700      	movs	r7, #0
 800cb66:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cb6a:	f7f3 fc43 	bl	80003f4 <__aeabi_i2d>
 800cb6e:	f04f 0800 	mov.w	r8, #0
 800cb72:	f04f 0900 	mov.w	r9, #0
 800cb76:	9b08      	ldr	r3, [sp, #32]
 800cb78:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800cb7c:	3b08      	subs	r3, #8
 800cb7e:	9300      	str	r3, [sp, #0]
 800cb80:	f105 0310 	add.w	r3, r5, #16
 800cb84:	9305      	str	r3, [sp, #20]
 800cb86:	9b06      	ldr	r3, [sp, #24]
 800cb88:	429f      	cmp	r7, r3
 800cb8a:	dd04      	ble.n	800cb96 <__kernel_rem_pio2+0x3c2>
 800cb8c:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800cb90:	3601      	adds	r6, #1
 800cb92:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800cb94:	e7db      	b.n	800cb4e <__kernel_rem_pio2+0x37a>
 800cb96:	9905      	ldr	r1, [sp, #20]
 800cb98:	9d00      	ldr	r5, [sp, #0]
 800cb9a:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800cb9e:	9105      	str	r1, [sp, #20]
 800cba0:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800cba4:	9500      	str	r5, [sp, #0]
 800cba6:	f7f3 fc8f 	bl	80004c8 <__aeabi_dmul>
 800cbaa:	4602      	mov	r2, r0
 800cbac:	460b      	mov	r3, r1
 800cbae:	4640      	mov	r0, r8
 800cbb0:	4649      	mov	r1, r9
 800cbb2:	f7f3 fad3 	bl	800015c <__adddf3>
 800cbb6:	3701      	adds	r7, #1
 800cbb8:	4680      	mov	r8, r0
 800cbba:	4689      	mov	r9, r1
 800cbbc:	e7e3      	b.n	800cb86 <__kernel_rem_pio2+0x3b2>
 800cbbe:	3c01      	subs	r4, #1
 800cbc0:	e745      	b.n	800ca4e <__kernel_rem_pio2+0x27a>
 800cbc2:	f1ca 0200 	rsb	r2, sl, #0
 800cbc6:	4640      	mov	r0, r8
 800cbc8:	4649      	mov	r1, r9
 800cbca:	f001 f845 	bl	800dc58 <scalbn>
 800cbce:	2200      	movs	r2, #0
 800cbd0:	4ba3      	ldr	r3, [pc, #652]	; (800ce60 <__kernel_rem_pio2+0x68c>)
 800cbd2:	4604      	mov	r4, r0
 800cbd4:	460d      	mov	r5, r1
 800cbd6:	f7f3 fefd 	bl	80009d4 <__aeabi_dcmpge>
 800cbda:	b1f8      	cbz	r0, 800cc1c <__kernel_rem_pio2+0x448>
 800cbdc:	2200      	movs	r2, #0
 800cbde:	4ba1      	ldr	r3, [pc, #644]	; (800ce64 <__kernel_rem_pio2+0x690>)
 800cbe0:	4620      	mov	r0, r4
 800cbe2:	4629      	mov	r1, r5
 800cbe4:	f7f3 fc70 	bl	80004c8 <__aeabi_dmul>
 800cbe8:	f7f3 ff1e 	bl	8000a28 <__aeabi_d2iz>
 800cbec:	4606      	mov	r6, r0
 800cbee:	f7f3 fc01 	bl	80003f4 <__aeabi_i2d>
 800cbf2:	2200      	movs	r2, #0
 800cbf4:	4b9a      	ldr	r3, [pc, #616]	; (800ce60 <__kernel_rem_pio2+0x68c>)
 800cbf6:	f7f3 fc67 	bl	80004c8 <__aeabi_dmul>
 800cbfa:	460b      	mov	r3, r1
 800cbfc:	4602      	mov	r2, r0
 800cbfe:	4629      	mov	r1, r5
 800cc00:	4620      	mov	r0, r4
 800cc02:	f7f3 faa9 	bl	8000158 <__aeabi_dsub>
 800cc06:	f7f3 ff0f 	bl	8000a28 <__aeabi_d2iz>
 800cc0a:	1c7c      	adds	r4, r7, #1
 800cc0c:	ab0c      	add	r3, sp, #48	; 0x30
 800cc0e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800cc12:	f10a 0a18 	add.w	sl, sl, #24
 800cc16:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800cc1a:	e720      	b.n	800ca5e <__kernel_rem_pio2+0x28a>
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	4629      	mov	r1, r5
 800cc20:	f7f3 ff02 	bl	8000a28 <__aeabi_d2iz>
 800cc24:	ab0c      	add	r3, sp, #48	; 0x30
 800cc26:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800cc2a:	463c      	mov	r4, r7
 800cc2c:	e717      	b.n	800ca5e <__kernel_rem_pio2+0x28a>
 800cc2e:	ab0c      	add	r3, sp, #48	; 0x30
 800cc30:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc34:	f7f3 fbde 	bl	80003f4 <__aeabi_i2d>
 800cc38:	4632      	mov	r2, r6
 800cc3a:	463b      	mov	r3, r7
 800cc3c:	f7f3 fc44 	bl	80004c8 <__aeabi_dmul>
 800cc40:	4652      	mov	r2, sl
 800cc42:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800cc46:	465b      	mov	r3, fp
 800cc48:	4630      	mov	r0, r6
 800cc4a:	4639      	mov	r1, r7
 800cc4c:	f7f3 fc3c 	bl	80004c8 <__aeabi_dmul>
 800cc50:	3d01      	subs	r5, #1
 800cc52:	4606      	mov	r6, r0
 800cc54:	460f      	mov	r7, r1
 800cc56:	e715      	b.n	800ca84 <__kernel_rem_pio2+0x2b0>
 800cc58:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800cc5c:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800cc60:	f7f3 fc32 	bl	80004c8 <__aeabi_dmul>
 800cc64:	4602      	mov	r2, r0
 800cc66:	460b      	mov	r3, r1
 800cc68:	4650      	mov	r0, sl
 800cc6a:	4659      	mov	r1, fp
 800cc6c:	f7f3 fa76 	bl	800015c <__adddf3>
 800cc70:	4682      	mov	sl, r0
 800cc72:	468b      	mov	fp, r1
 800cc74:	3701      	adds	r7, #1
 800cc76:	9b02      	ldr	r3, [sp, #8]
 800cc78:	429f      	cmp	r7, r3
 800cc7a:	dc01      	bgt.n	800cc80 <__kernel_rem_pio2+0x4ac>
 800cc7c:	42bd      	cmp	r5, r7
 800cc7e:	daeb      	bge.n	800cc58 <__kernel_rem_pio2+0x484>
 800cc80:	ab48      	add	r3, sp, #288	; 0x120
 800cc82:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800cc86:	e9c3 ab00 	strd	sl, fp, [r3]
 800cc8a:	3501      	adds	r5, #1
 800cc8c:	e702      	b.n	800ca94 <__kernel_rem_pio2+0x2c0>
 800cc8e:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800cc90:	2b03      	cmp	r3, #3
 800cc92:	d86c      	bhi.n	800cd6e <__kernel_rem_pio2+0x59a>
 800cc94:	e8df f003 	tbb	[pc, r3]
 800cc98:	022f2f59 	.word	0x022f2f59
 800cc9c:	9a06      	ldr	r2, [sp, #24]
 800cc9e:	ab48      	add	r3, sp, #288	; 0x120
 800cca0:	189d      	adds	r5, r3, r2
 800cca2:	46aa      	mov	sl, r5
 800cca4:	46a3      	mov	fp, r4
 800cca6:	f1bb 0f00 	cmp.w	fp, #0
 800ccaa:	f300 8087 	bgt.w	800cdbc <__kernel_rem_pio2+0x5e8>
 800ccae:	46a2      	mov	sl, r4
 800ccb0:	f1ba 0f01 	cmp.w	sl, #1
 800ccb4:	f300 809f 	bgt.w	800cdf6 <__kernel_rem_pio2+0x622>
 800ccb8:	2700      	movs	r7, #0
 800ccba:	463e      	mov	r6, r7
 800ccbc:	9d06      	ldr	r5, [sp, #24]
 800ccbe:	ab48      	add	r3, sp, #288	; 0x120
 800ccc0:	3508      	adds	r5, #8
 800ccc2:	441d      	add	r5, r3
 800ccc4:	2c01      	cmp	r4, #1
 800ccc6:	f300 80b3 	bgt.w	800ce30 <__kernel_rem_pio2+0x65c>
 800ccca:	9b00      	ldr	r3, [sp, #0]
 800cccc:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800ccce:	9849      	ldr	r0, [sp, #292]	; 0x124
 800ccd0:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800ccd2:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	f040 80b5 	bne.w	800ce44 <__kernel_rem_pio2+0x670>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	462a      	mov	r2, r5
 800ccde:	9804      	ldr	r0, [sp, #16]
 800cce0:	e9c0 2300 	strd	r2, r3, [r0]
 800cce4:	4622      	mov	r2, r4
 800cce6:	460b      	mov	r3, r1
 800cce8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ccec:	463a      	mov	r2, r7
 800ccee:	4633      	mov	r3, r6
 800ccf0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800ccf4:	e03b      	b.n	800cd6e <__kernel_rem_pio2+0x59a>
 800ccf6:	f04f 0c00 	mov.w	ip, #0
 800ccfa:	4626      	mov	r6, r4
 800ccfc:	4667      	mov	r7, ip
 800ccfe:	9d06      	ldr	r5, [sp, #24]
 800cd00:	ab48      	add	r3, sp, #288	; 0x120
 800cd02:	3508      	adds	r5, #8
 800cd04:	441d      	add	r5, r3
 800cd06:	2e00      	cmp	r6, #0
 800cd08:	da42      	bge.n	800cd90 <__kernel_rem_pio2+0x5bc>
 800cd0a:	9b00      	ldr	r3, [sp, #0]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d049      	beq.n	800cda4 <__kernel_rem_pio2+0x5d0>
 800cd10:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800cd14:	4662      	mov	r2, ip
 800cd16:	460b      	mov	r3, r1
 800cd18:	9904      	ldr	r1, [sp, #16]
 800cd1a:	2601      	movs	r6, #1
 800cd1c:	e9c1 2300 	strd	r2, r3, [r1]
 800cd20:	a948      	add	r1, sp, #288	; 0x120
 800cd22:	463b      	mov	r3, r7
 800cd24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd28:	f7f3 fa16 	bl	8000158 <__aeabi_dsub>
 800cd2c:	4684      	mov	ip, r0
 800cd2e:	460f      	mov	r7, r1
 800cd30:	ad48      	add	r5, sp, #288	; 0x120
 800cd32:	42b4      	cmp	r4, r6
 800cd34:	da38      	bge.n	800cda8 <__kernel_rem_pio2+0x5d4>
 800cd36:	9b00      	ldr	r3, [sp, #0]
 800cd38:	b10b      	cbz	r3, 800cd3e <__kernel_rem_pio2+0x56a>
 800cd3a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800cd3e:	4662      	mov	r2, ip
 800cd40:	463b      	mov	r3, r7
 800cd42:	9904      	ldr	r1, [sp, #16]
 800cd44:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800cd48:	e011      	b.n	800cd6e <__kernel_rem_pio2+0x59a>
 800cd4a:	2700      	movs	r7, #0
 800cd4c:	463d      	mov	r5, r7
 800cd4e:	9b06      	ldr	r3, [sp, #24]
 800cd50:	aa98      	add	r2, sp, #608	; 0x260
 800cd52:	4413      	add	r3, r2
 800cd54:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800cd58:	2c00      	cmp	r4, #0
 800cd5a:	da0f      	bge.n	800cd7c <__kernel_rem_pio2+0x5a8>
 800cd5c:	9b00      	ldr	r3, [sp, #0]
 800cd5e:	b10b      	cbz	r3, 800cd64 <__kernel_rem_pio2+0x590>
 800cd60:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800cd64:	463a      	mov	r2, r7
 800cd66:	462b      	mov	r3, r5
 800cd68:	9904      	ldr	r1, [sp, #16]
 800cd6a:	e9c1 2300 	strd	r2, r3, [r1]
 800cd6e:	9b05      	ldr	r3, [sp, #20]
 800cd70:	f003 0007 	and.w	r0, r3, #7
 800cd74:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800cd78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd7c:	4638      	mov	r0, r7
 800cd7e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800cd82:	4629      	mov	r1, r5
 800cd84:	f7f3 f9ea 	bl	800015c <__adddf3>
 800cd88:	3c01      	subs	r4, #1
 800cd8a:	4607      	mov	r7, r0
 800cd8c:	460d      	mov	r5, r1
 800cd8e:	e7e3      	b.n	800cd58 <__kernel_rem_pio2+0x584>
 800cd90:	4660      	mov	r0, ip
 800cd92:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800cd96:	4639      	mov	r1, r7
 800cd98:	f7f3 f9e0 	bl	800015c <__adddf3>
 800cd9c:	3e01      	subs	r6, #1
 800cd9e:	4684      	mov	ip, r0
 800cda0:	460f      	mov	r7, r1
 800cda2:	e7b0      	b.n	800cd06 <__kernel_rem_pio2+0x532>
 800cda4:	4639      	mov	r1, r7
 800cda6:	e7b5      	b.n	800cd14 <__kernel_rem_pio2+0x540>
 800cda8:	4660      	mov	r0, ip
 800cdaa:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800cdae:	4639      	mov	r1, r7
 800cdb0:	f7f3 f9d4 	bl	800015c <__adddf3>
 800cdb4:	3601      	adds	r6, #1
 800cdb6:	4684      	mov	ip, r0
 800cdb8:	460f      	mov	r7, r1
 800cdba:	e7ba      	b.n	800cd32 <__kernel_rem_pio2+0x55e>
 800cdbc:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800cdc0:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800cdc4:	4640      	mov	r0, r8
 800cdc6:	4649      	mov	r1, r9
 800cdc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cdcc:	f7f3 f9c6 	bl	800015c <__adddf3>
 800cdd0:	4602      	mov	r2, r0
 800cdd2:	460b      	mov	r3, r1
 800cdd4:	4606      	mov	r6, r0
 800cdd6:	460f      	mov	r7, r1
 800cdd8:	4640      	mov	r0, r8
 800cdda:	4649      	mov	r1, r9
 800cddc:	f7f3 f9bc 	bl	8000158 <__aeabi_dsub>
 800cde0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cde4:	f7f3 f9ba 	bl	800015c <__adddf3>
 800cde8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800cdec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cdf0:	e9ca 6700 	strd	r6, r7, [sl]
 800cdf4:	e757      	b.n	800cca6 <__kernel_rem_pio2+0x4d2>
 800cdf6:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800cdfa:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800cdfe:	4630      	mov	r0, r6
 800ce00:	4639      	mov	r1, r7
 800ce02:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ce06:	f7f3 f9a9 	bl	800015c <__adddf3>
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	460b      	mov	r3, r1
 800ce0e:	4680      	mov	r8, r0
 800ce10:	4689      	mov	r9, r1
 800ce12:	4630      	mov	r0, r6
 800ce14:	4639      	mov	r1, r7
 800ce16:	f7f3 f99f 	bl	8000158 <__aeabi_dsub>
 800ce1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ce1e:	f7f3 f99d 	bl	800015c <__adddf3>
 800ce22:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ce26:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800ce2a:	e9c5 8900 	strd	r8, r9, [r5]
 800ce2e:	e73f      	b.n	800ccb0 <__kernel_rem_pio2+0x4dc>
 800ce30:	4638      	mov	r0, r7
 800ce32:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800ce36:	4631      	mov	r1, r6
 800ce38:	f7f3 f990 	bl	800015c <__adddf3>
 800ce3c:	3c01      	subs	r4, #1
 800ce3e:	4607      	mov	r7, r0
 800ce40:	460e      	mov	r6, r1
 800ce42:	e73f      	b.n	800ccc4 <__kernel_rem_pio2+0x4f0>
 800ce44:	9b04      	ldr	r3, [sp, #16]
 800ce46:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800ce4a:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800ce4e:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800ce52:	601d      	str	r5, [r3, #0]
 800ce54:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800ce58:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800ce5c:	615e      	str	r6, [r3, #20]
 800ce5e:	e786      	b.n	800cd6e <__kernel_rem_pio2+0x59a>
 800ce60:	41700000 	.word	0x41700000
 800ce64:	3e700000 	.word	0x3e700000

0800ce68 <__kernel_sin>:
 800ce68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce6c:	b086      	sub	sp, #24
 800ce6e:	e9cd 2300 	strd	r2, r3, [sp]
 800ce72:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ce76:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800ce7a:	4682      	mov	sl, r0
 800ce7c:	460c      	mov	r4, r1
 800ce7e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800ce80:	da03      	bge.n	800ce8a <__kernel_sin+0x22>
 800ce82:	f7f3 fdd1 	bl	8000a28 <__aeabi_d2iz>
 800ce86:	2800      	cmp	r0, #0
 800ce88:	d050      	beq.n	800cf2c <__kernel_sin+0xc4>
 800ce8a:	4652      	mov	r2, sl
 800ce8c:	4623      	mov	r3, r4
 800ce8e:	4650      	mov	r0, sl
 800ce90:	4621      	mov	r1, r4
 800ce92:	f7f3 fb19 	bl	80004c8 <__aeabi_dmul>
 800ce96:	4606      	mov	r6, r0
 800ce98:	460f      	mov	r7, r1
 800ce9a:	4602      	mov	r2, r0
 800ce9c:	460b      	mov	r3, r1
 800ce9e:	4650      	mov	r0, sl
 800cea0:	4621      	mov	r1, r4
 800cea2:	f7f3 fb11 	bl	80004c8 <__aeabi_dmul>
 800cea6:	a33e      	add	r3, pc, #248	; (adr r3, 800cfa0 <__kernel_sin+0x138>)
 800cea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceac:	4680      	mov	r8, r0
 800ceae:	4689      	mov	r9, r1
 800ceb0:	4630      	mov	r0, r6
 800ceb2:	4639      	mov	r1, r7
 800ceb4:	f7f3 fb08 	bl	80004c8 <__aeabi_dmul>
 800ceb8:	a33b      	add	r3, pc, #236	; (adr r3, 800cfa8 <__kernel_sin+0x140>)
 800ceba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cebe:	f7f3 f94b 	bl	8000158 <__aeabi_dsub>
 800cec2:	4632      	mov	r2, r6
 800cec4:	463b      	mov	r3, r7
 800cec6:	f7f3 faff 	bl	80004c8 <__aeabi_dmul>
 800ceca:	a339      	add	r3, pc, #228	; (adr r3, 800cfb0 <__kernel_sin+0x148>)
 800cecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced0:	f7f3 f944 	bl	800015c <__adddf3>
 800ced4:	4632      	mov	r2, r6
 800ced6:	463b      	mov	r3, r7
 800ced8:	f7f3 faf6 	bl	80004c8 <__aeabi_dmul>
 800cedc:	a336      	add	r3, pc, #216	; (adr r3, 800cfb8 <__kernel_sin+0x150>)
 800cede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee2:	f7f3 f939 	bl	8000158 <__aeabi_dsub>
 800cee6:	4632      	mov	r2, r6
 800cee8:	463b      	mov	r3, r7
 800ceea:	f7f3 faed 	bl	80004c8 <__aeabi_dmul>
 800ceee:	a334      	add	r3, pc, #208	; (adr r3, 800cfc0 <__kernel_sin+0x158>)
 800cef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef4:	f7f3 f932 	bl	800015c <__adddf3>
 800cef8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cefc:	b9dd      	cbnz	r5, 800cf36 <__kernel_sin+0xce>
 800cefe:	4602      	mov	r2, r0
 800cf00:	460b      	mov	r3, r1
 800cf02:	4630      	mov	r0, r6
 800cf04:	4639      	mov	r1, r7
 800cf06:	f7f3 fadf 	bl	80004c8 <__aeabi_dmul>
 800cf0a:	a32f      	add	r3, pc, #188	; (adr r3, 800cfc8 <__kernel_sin+0x160>)
 800cf0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf10:	f7f3 f922 	bl	8000158 <__aeabi_dsub>
 800cf14:	4642      	mov	r2, r8
 800cf16:	464b      	mov	r3, r9
 800cf18:	f7f3 fad6 	bl	80004c8 <__aeabi_dmul>
 800cf1c:	4602      	mov	r2, r0
 800cf1e:	460b      	mov	r3, r1
 800cf20:	4650      	mov	r0, sl
 800cf22:	4621      	mov	r1, r4
 800cf24:	f7f3 f91a 	bl	800015c <__adddf3>
 800cf28:	4682      	mov	sl, r0
 800cf2a:	460c      	mov	r4, r1
 800cf2c:	4650      	mov	r0, sl
 800cf2e:	4621      	mov	r1, r4
 800cf30:	b006      	add	sp, #24
 800cf32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf36:	2200      	movs	r2, #0
 800cf38:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf3c:	4b24      	ldr	r3, [pc, #144]	; (800cfd0 <__kernel_sin+0x168>)
 800cf3e:	f7f3 fac3 	bl	80004c8 <__aeabi_dmul>
 800cf42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cf4a:	4640      	mov	r0, r8
 800cf4c:	4649      	mov	r1, r9
 800cf4e:	f7f3 fabb 	bl	80004c8 <__aeabi_dmul>
 800cf52:	4602      	mov	r2, r0
 800cf54:	460b      	mov	r3, r1
 800cf56:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf5a:	f7f3 f8fd 	bl	8000158 <__aeabi_dsub>
 800cf5e:	4632      	mov	r2, r6
 800cf60:	463b      	mov	r3, r7
 800cf62:	f7f3 fab1 	bl	80004c8 <__aeabi_dmul>
 800cf66:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf6a:	f7f3 f8f5 	bl	8000158 <__aeabi_dsub>
 800cf6e:	a316      	add	r3, pc, #88	; (adr r3, 800cfc8 <__kernel_sin+0x160>)
 800cf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf74:	4606      	mov	r6, r0
 800cf76:	460f      	mov	r7, r1
 800cf78:	4640      	mov	r0, r8
 800cf7a:	4649      	mov	r1, r9
 800cf7c:	f7f3 faa4 	bl	80004c8 <__aeabi_dmul>
 800cf80:	4602      	mov	r2, r0
 800cf82:	460b      	mov	r3, r1
 800cf84:	4630      	mov	r0, r6
 800cf86:	4639      	mov	r1, r7
 800cf88:	f7f3 f8e8 	bl	800015c <__adddf3>
 800cf8c:	4602      	mov	r2, r0
 800cf8e:	460b      	mov	r3, r1
 800cf90:	4650      	mov	r0, sl
 800cf92:	4621      	mov	r1, r4
 800cf94:	f7f3 f8e0 	bl	8000158 <__aeabi_dsub>
 800cf98:	e7c6      	b.n	800cf28 <__kernel_sin+0xc0>
 800cf9a:	bf00      	nop
 800cf9c:	f3af 8000 	nop.w
 800cfa0:	5acfd57c 	.word	0x5acfd57c
 800cfa4:	3de5d93a 	.word	0x3de5d93a
 800cfa8:	8a2b9ceb 	.word	0x8a2b9ceb
 800cfac:	3e5ae5e6 	.word	0x3e5ae5e6
 800cfb0:	57b1fe7d 	.word	0x57b1fe7d
 800cfb4:	3ec71de3 	.word	0x3ec71de3
 800cfb8:	19c161d5 	.word	0x19c161d5
 800cfbc:	3f2a01a0 	.word	0x3f2a01a0
 800cfc0:	1110f8a6 	.word	0x1110f8a6
 800cfc4:	3f811111 	.word	0x3f811111
 800cfc8:	55555549 	.word	0x55555549
 800cfcc:	3fc55555 	.word	0x3fc55555
 800cfd0:	3fe00000 	.word	0x3fe00000

0800cfd4 <__kernel_cosf>:
 800cfd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfd8:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800cfdc:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800cfe0:	4606      	mov	r6, r0
 800cfe2:	4688      	mov	r8, r1
 800cfe4:	da03      	bge.n	800cfee <__kernel_cosf+0x1a>
 800cfe6:	f7f4 f86b 	bl	80010c0 <__aeabi_f2iz>
 800cfea:	2800      	cmp	r0, #0
 800cfec:	d05c      	beq.n	800d0a8 <__kernel_cosf+0xd4>
 800cfee:	4631      	mov	r1, r6
 800cff0:	4630      	mov	r0, r6
 800cff2:	f7f3 fe9f 	bl	8000d34 <__aeabi_fmul>
 800cff6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800cffa:	4605      	mov	r5, r0
 800cffc:	f7f3 fe9a 	bl	8000d34 <__aeabi_fmul>
 800d000:	492b      	ldr	r1, [pc, #172]	; (800d0b0 <__kernel_cosf+0xdc>)
 800d002:	4607      	mov	r7, r0
 800d004:	4628      	mov	r0, r5
 800d006:	f7f3 fe95 	bl	8000d34 <__aeabi_fmul>
 800d00a:	492a      	ldr	r1, [pc, #168]	; (800d0b4 <__kernel_cosf+0xe0>)
 800d00c:	f7f3 fd8a 	bl	8000b24 <__addsf3>
 800d010:	4629      	mov	r1, r5
 800d012:	f7f3 fe8f 	bl	8000d34 <__aeabi_fmul>
 800d016:	4928      	ldr	r1, [pc, #160]	; (800d0b8 <__kernel_cosf+0xe4>)
 800d018:	f7f3 fd82 	bl	8000b20 <__aeabi_fsub>
 800d01c:	4629      	mov	r1, r5
 800d01e:	f7f3 fe89 	bl	8000d34 <__aeabi_fmul>
 800d022:	4926      	ldr	r1, [pc, #152]	; (800d0bc <__kernel_cosf+0xe8>)
 800d024:	f7f3 fd7e 	bl	8000b24 <__addsf3>
 800d028:	4629      	mov	r1, r5
 800d02a:	f7f3 fe83 	bl	8000d34 <__aeabi_fmul>
 800d02e:	4924      	ldr	r1, [pc, #144]	; (800d0c0 <__kernel_cosf+0xec>)
 800d030:	f7f3 fd76 	bl	8000b20 <__aeabi_fsub>
 800d034:	4629      	mov	r1, r5
 800d036:	f7f3 fe7d 	bl	8000d34 <__aeabi_fmul>
 800d03a:	4922      	ldr	r1, [pc, #136]	; (800d0c4 <__kernel_cosf+0xf0>)
 800d03c:	f7f3 fd72 	bl	8000b24 <__addsf3>
 800d040:	4629      	mov	r1, r5
 800d042:	f7f3 fe77 	bl	8000d34 <__aeabi_fmul>
 800d046:	4629      	mov	r1, r5
 800d048:	f7f3 fe74 	bl	8000d34 <__aeabi_fmul>
 800d04c:	4641      	mov	r1, r8
 800d04e:	4605      	mov	r5, r0
 800d050:	4630      	mov	r0, r6
 800d052:	f7f3 fe6f 	bl	8000d34 <__aeabi_fmul>
 800d056:	4601      	mov	r1, r0
 800d058:	4628      	mov	r0, r5
 800d05a:	f7f3 fd61 	bl	8000b20 <__aeabi_fsub>
 800d05e:	4b1a      	ldr	r3, [pc, #104]	; (800d0c8 <__kernel_cosf+0xf4>)
 800d060:	4605      	mov	r5, r0
 800d062:	429c      	cmp	r4, r3
 800d064:	dc0a      	bgt.n	800d07c <__kernel_cosf+0xa8>
 800d066:	4601      	mov	r1, r0
 800d068:	4638      	mov	r0, r7
 800d06a:	f7f3 fd59 	bl	8000b20 <__aeabi_fsub>
 800d06e:	4601      	mov	r1, r0
 800d070:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d074:	f7f3 fd54 	bl	8000b20 <__aeabi_fsub>
 800d078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d07c:	4b13      	ldr	r3, [pc, #76]	; (800d0cc <__kernel_cosf+0xf8>)
 800d07e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d082:	429c      	cmp	r4, r3
 800d084:	bfcc      	ite	gt
 800d086:	4c12      	ldrgt	r4, [pc, #72]	; (800d0d0 <__kernel_cosf+0xfc>)
 800d088:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800d08c:	4621      	mov	r1, r4
 800d08e:	f7f3 fd47 	bl	8000b20 <__aeabi_fsub>
 800d092:	4621      	mov	r1, r4
 800d094:	4606      	mov	r6, r0
 800d096:	4638      	mov	r0, r7
 800d098:	f7f3 fd42 	bl	8000b20 <__aeabi_fsub>
 800d09c:	4629      	mov	r1, r5
 800d09e:	f7f3 fd3f 	bl	8000b20 <__aeabi_fsub>
 800d0a2:	4601      	mov	r1, r0
 800d0a4:	4630      	mov	r0, r6
 800d0a6:	e7e5      	b.n	800d074 <__kernel_cosf+0xa0>
 800d0a8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d0ac:	e7e4      	b.n	800d078 <__kernel_cosf+0xa4>
 800d0ae:	bf00      	nop
 800d0b0:	ad47d74e 	.word	0xad47d74e
 800d0b4:	310f74f6 	.word	0x310f74f6
 800d0b8:	3493f27c 	.word	0x3493f27c
 800d0bc:	37d00d01 	.word	0x37d00d01
 800d0c0:	3ab60b61 	.word	0x3ab60b61
 800d0c4:	3d2aaaab 	.word	0x3d2aaaab
 800d0c8:	3e999999 	.word	0x3e999999
 800d0cc:	3f480000 	.word	0x3f480000
 800d0d0:	3e900000 	.word	0x3e900000

0800d0d4 <__kernel_rem_pio2f>:
 800d0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0d8:	b0d9      	sub	sp, #356	; 0x164
 800d0da:	9304      	str	r3, [sp, #16]
 800d0dc:	9101      	str	r1, [sp, #4]
 800d0de:	4bc3      	ldr	r3, [pc, #780]	; (800d3ec <__kernel_rem_pio2f+0x318>)
 800d0e0:	9962      	ldr	r1, [sp, #392]	; 0x188
 800d0e2:	1ed4      	subs	r4, r2, #3
 800d0e4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d0e8:	2500      	movs	r5, #0
 800d0ea:	9302      	str	r3, [sp, #8]
 800d0ec:	9b04      	ldr	r3, [sp, #16]
 800d0ee:	f04f 0a00 	mov.w	sl, #0
 800d0f2:	3b01      	subs	r3, #1
 800d0f4:	9303      	str	r3, [sp, #12]
 800d0f6:	2308      	movs	r3, #8
 800d0f8:	fb94 f4f3 	sdiv	r4, r4, r3
 800d0fc:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800d100:	1c66      	adds	r6, r4, #1
 800d102:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 800d106:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800d10a:	eb03 0802 	add.w	r8, r3, r2
 800d10e:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800d110:	1aa7      	subs	r7, r4, r2
 800d112:	9005      	str	r0, [sp, #20]
 800d114:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d118:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 800d11c:	4545      	cmp	r5, r8
 800d11e:	dd7f      	ble.n	800d220 <__kernel_rem_pio2f+0x14c>
 800d120:	f04f 0800 	mov.w	r8, #0
 800d124:	f04f 0a00 	mov.w	sl, #0
 800d128:	f06f 0b03 	mvn.w	fp, #3
 800d12c:	9b04      	ldr	r3, [sp, #16]
 800d12e:	aa1c      	add	r2, sp, #112	; 0x70
 800d130:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800d134:	ab44      	add	r3, sp, #272	; 0x110
 800d136:	9a02      	ldr	r2, [sp, #8]
 800d138:	4590      	cmp	r8, r2
 800d13a:	f340 8097 	ble.w	800d26c <__kernel_rem_pio2f+0x198>
 800d13e:	4613      	mov	r3, r2
 800d140:	aa08      	add	r2, sp, #32
 800d142:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d146:	9307      	str	r3, [sp, #28]
 800d148:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800d14a:	9f02      	ldr	r7, [sp, #8]
 800d14c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d150:	9306      	str	r3, [sp, #24]
 800d152:	46ba      	mov	sl, r7
 800d154:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 800d158:	ab58      	add	r3, sp, #352	; 0x160
 800d15a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800d15e:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800d162:	ad07      	add	r5, sp, #28
 800d164:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800d168:	f1ba 0f00 	cmp.w	sl, #0
 800d16c:	f300 8081 	bgt.w	800d272 <__kernel_rem_pio2f+0x19e>
 800d170:	4631      	mov	r1, r6
 800d172:	4620      	mov	r0, r4
 800d174:	f000 ff2e 	bl	800dfd4 <scalbnf>
 800d178:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800d17c:	4604      	mov	r4, r0
 800d17e:	f7f3 fdd9 	bl	8000d34 <__aeabi_fmul>
 800d182:	f000 fee7 	bl	800df54 <floorf>
 800d186:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800d18a:	f7f3 fdd3 	bl	8000d34 <__aeabi_fmul>
 800d18e:	4601      	mov	r1, r0
 800d190:	4620      	mov	r0, r4
 800d192:	f7f3 fcc5 	bl	8000b20 <__aeabi_fsub>
 800d196:	4604      	mov	r4, r0
 800d198:	f7f3 ff92 	bl	80010c0 <__aeabi_f2iz>
 800d19c:	4681      	mov	r9, r0
 800d19e:	f7f3 fd75 	bl	8000c8c <__aeabi_i2f>
 800d1a2:	4601      	mov	r1, r0
 800d1a4:	4620      	mov	r0, r4
 800d1a6:	f7f3 fcbb 	bl	8000b20 <__aeabi_fsub>
 800d1aa:	2e00      	cmp	r6, #0
 800d1ac:	4604      	mov	r4, r0
 800d1ae:	dd7e      	ble.n	800d2ae <__kernel_rem_pio2f+0x1da>
 800d1b0:	1e7b      	subs	r3, r7, #1
 800d1b2:	aa08      	add	r2, sp, #32
 800d1b4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800d1b8:	f1c6 0208 	rsb	r2, r6, #8
 800d1bc:	fa45 f002 	asr.w	r0, r5, r2
 800d1c0:	4481      	add	r9, r0
 800d1c2:	4090      	lsls	r0, r2
 800d1c4:	1a2d      	subs	r5, r5, r0
 800d1c6:	aa08      	add	r2, sp, #32
 800d1c8:	f1c6 0007 	rsb	r0, r6, #7
 800d1cc:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 800d1d0:	4105      	asrs	r5, r0
 800d1d2:	2d00      	cmp	r5, #0
 800d1d4:	dd79      	ble.n	800d2ca <__kernel_rem_pio2f+0x1f6>
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	4690      	mov	r8, r2
 800d1da:	f109 0901 	add.w	r9, r9, #1
 800d1de:	4297      	cmp	r7, r2
 800d1e0:	f300 80ae 	bgt.w	800d340 <__kernel_rem_pio2f+0x26c>
 800d1e4:	2e00      	cmp	r6, #0
 800d1e6:	dd05      	ble.n	800d1f4 <__kernel_rem_pio2f+0x120>
 800d1e8:	2e01      	cmp	r6, #1
 800d1ea:	f000 80c0 	beq.w	800d36e <__kernel_rem_pio2f+0x29a>
 800d1ee:	2e02      	cmp	r6, #2
 800d1f0:	f000 80c7 	beq.w	800d382 <__kernel_rem_pio2f+0x2ae>
 800d1f4:	2d02      	cmp	r5, #2
 800d1f6:	d168      	bne.n	800d2ca <__kernel_rem_pio2f+0x1f6>
 800d1f8:	4621      	mov	r1, r4
 800d1fa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d1fe:	f7f3 fc8f 	bl	8000b20 <__aeabi_fsub>
 800d202:	4604      	mov	r4, r0
 800d204:	f1b8 0f00 	cmp.w	r8, #0
 800d208:	d05f      	beq.n	800d2ca <__kernel_rem_pio2f+0x1f6>
 800d20a:	4631      	mov	r1, r6
 800d20c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d210:	f000 fee0 	bl	800dfd4 <scalbnf>
 800d214:	4601      	mov	r1, r0
 800d216:	4620      	mov	r0, r4
 800d218:	f7f3 fc82 	bl	8000b20 <__aeabi_fsub>
 800d21c:	4604      	mov	r4, r0
 800d21e:	e054      	b.n	800d2ca <__kernel_rem_pio2f+0x1f6>
 800d220:	42ef      	cmn	r7, r5
 800d222:	d407      	bmi.n	800d234 <__kernel_rem_pio2f+0x160>
 800d224:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d228:	f7f3 fd30 	bl	8000c8c <__aeabi_i2f>
 800d22c:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800d230:	3501      	adds	r5, #1
 800d232:	e773      	b.n	800d11c <__kernel_rem_pio2f+0x48>
 800d234:	4650      	mov	r0, sl
 800d236:	e7f9      	b.n	800d22c <__kernel_rem_pio2f+0x158>
 800d238:	fb0b 5207 	mla	r2, fp, r7, r5
 800d23c:	9306      	str	r3, [sp, #24]
 800d23e:	9b05      	ldr	r3, [sp, #20]
 800d240:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800d244:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 800d248:	f7f3 fd74 	bl	8000d34 <__aeabi_fmul>
 800d24c:	4601      	mov	r1, r0
 800d24e:	4648      	mov	r0, r9
 800d250:	f7f3 fc68 	bl	8000b24 <__addsf3>
 800d254:	4681      	mov	r9, r0
 800d256:	9b06      	ldr	r3, [sp, #24]
 800d258:	3701      	adds	r7, #1
 800d25a:	9a03      	ldr	r2, [sp, #12]
 800d25c:	4297      	cmp	r7, r2
 800d25e:	ddeb      	ble.n	800d238 <__kernel_rem_pio2f+0x164>
 800d260:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
 800d264:	3504      	adds	r5, #4
 800d266:	f108 0801 	add.w	r8, r8, #1
 800d26a:	e764      	b.n	800d136 <__kernel_rem_pio2f+0x62>
 800d26c:	46d1      	mov	r9, sl
 800d26e:	2700      	movs	r7, #0
 800d270:	e7f3      	b.n	800d25a <__kernel_rem_pio2f+0x186>
 800d272:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800d276:	4620      	mov	r0, r4
 800d278:	f7f3 fd5c 	bl	8000d34 <__aeabi_fmul>
 800d27c:	f7f3 ff20 	bl	80010c0 <__aeabi_f2iz>
 800d280:	f7f3 fd04 	bl	8000c8c <__aeabi_i2f>
 800d284:	4641      	mov	r1, r8
 800d286:	4683      	mov	fp, r0
 800d288:	f7f3 fd54 	bl	8000d34 <__aeabi_fmul>
 800d28c:	4601      	mov	r1, r0
 800d28e:	4620      	mov	r0, r4
 800d290:	f7f3 fc46 	bl	8000b20 <__aeabi_fsub>
 800d294:	f7f3 ff14 	bl	80010c0 <__aeabi_f2iz>
 800d298:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d29c:	f845 0f04 	str.w	r0, [r5, #4]!
 800d2a0:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 800d2a4:	4658      	mov	r0, fp
 800d2a6:	f7f3 fc3d 	bl	8000b24 <__addsf3>
 800d2aa:	4604      	mov	r4, r0
 800d2ac:	e75c      	b.n	800d168 <__kernel_rem_pio2f+0x94>
 800d2ae:	d105      	bne.n	800d2bc <__kernel_rem_pio2f+0x1e8>
 800d2b0:	1e7b      	subs	r3, r7, #1
 800d2b2:	aa08      	add	r2, sp, #32
 800d2b4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800d2b8:	122d      	asrs	r5, r5, #8
 800d2ba:	e78a      	b.n	800d1d2 <__kernel_rem_pio2f+0xfe>
 800d2bc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800d2c0:	f7f3 feea 	bl	8001098 <__aeabi_fcmpge>
 800d2c4:	2800      	cmp	r0, #0
 800d2c6:	d139      	bne.n	800d33c <__kernel_rem_pio2f+0x268>
 800d2c8:	4605      	mov	r5, r0
 800d2ca:	2100      	movs	r1, #0
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	f7f3 fec5 	bl	800105c <__aeabi_fcmpeq>
 800d2d2:	2800      	cmp	r0, #0
 800d2d4:	f000 80a0 	beq.w	800d418 <__kernel_rem_pio2f+0x344>
 800d2d8:	1e7c      	subs	r4, r7, #1
 800d2da:	4623      	mov	r3, r4
 800d2dc:	2200      	movs	r2, #0
 800d2de:	9902      	ldr	r1, [sp, #8]
 800d2e0:	428b      	cmp	r3, r1
 800d2e2:	da55      	bge.n	800d390 <__kernel_rem_pio2f+0x2bc>
 800d2e4:	2a00      	cmp	r2, #0
 800d2e6:	d07e      	beq.n	800d3e6 <__kernel_rem_pio2f+0x312>
 800d2e8:	ab08      	add	r3, sp, #32
 800d2ea:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800d2ee:	3e08      	subs	r6, #8
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	f000 808f 	beq.w	800d414 <__kernel_rem_pio2f+0x340>
 800d2f6:	4631      	mov	r1, r6
 800d2f8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d2fc:	f000 fe6a 	bl	800dfd4 <scalbnf>
 800d300:	46a0      	mov	r8, r4
 800d302:	4682      	mov	sl, r0
 800d304:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 800d308:	af44      	add	r7, sp, #272	; 0x110
 800d30a:	f1b8 0f00 	cmp.w	r8, #0
 800d30e:	f280 80b5 	bge.w	800d47c <__kernel_rem_pio2f+0x3a8>
 800d312:	f04f 0a00 	mov.w	sl, #0
 800d316:	2300      	movs	r3, #0
 800d318:	00a6      	lsls	r6, r4, #2
 800d31a:	4a35      	ldr	r2, [pc, #212]	; (800d3f0 <__kernel_rem_pio2f+0x31c>)
 800d31c:	4437      	add	r7, r6
 800d31e:	eba4 010a 	sub.w	r1, r4, sl
 800d322:	2900      	cmp	r1, #0
 800d324:	f280 80db 	bge.w	800d4de <__kernel_rem_pio2f+0x40a>
 800d328:	9b62      	ldr	r3, [sp, #392]	; 0x188
 800d32a:	2b03      	cmp	r3, #3
 800d32c:	f200 80ff 	bhi.w	800d52e <__kernel_rem_pio2f+0x45a>
 800d330:	e8df f013 	tbh	[pc, r3, lsl #1]
 800d334:	01200102 	.word	0x01200102
 800d338:	00d90120 	.word	0x00d90120
 800d33c:	2502      	movs	r5, #2
 800d33e:	e74a      	b.n	800d1d6 <__kernel_rem_pio2f+0x102>
 800d340:	ab08      	add	r3, sp, #32
 800d342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d346:	f1b8 0f00 	cmp.w	r8, #0
 800d34a:	d109      	bne.n	800d360 <__kernel_rem_pio2f+0x28c>
 800d34c:	b12b      	cbz	r3, 800d35a <__kernel_rem_pio2f+0x286>
 800d34e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800d352:	a908      	add	r1, sp, #32
 800d354:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d358:	2301      	movs	r3, #1
 800d35a:	3201      	adds	r2, #1
 800d35c:	4698      	mov	r8, r3
 800d35e:	e73e      	b.n	800d1de <__kernel_rem_pio2f+0x10a>
 800d360:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800d364:	a908      	add	r1, sp, #32
 800d366:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d36a:	4643      	mov	r3, r8
 800d36c:	e7f5      	b.n	800d35a <__kernel_rem_pio2f+0x286>
 800d36e:	1e7a      	subs	r2, r7, #1
 800d370:	ab08      	add	r3, sp, #32
 800d372:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d376:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d37a:	a908      	add	r1, sp, #32
 800d37c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800d380:	e738      	b.n	800d1f4 <__kernel_rem_pio2f+0x120>
 800d382:	1e7a      	subs	r2, r7, #1
 800d384:	ab08      	add	r3, sp, #32
 800d386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d38a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d38e:	e7f4      	b.n	800d37a <__kernel_rem_pio2f+0x2a6>
 800d390:	a908      	add	r1, sp, #32
 800d392:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800d396:	3b01      	subs	r3, #1
 800d398:	430a      	orrs	r2, r1
 800d39a:	e7a0      	b.n	800d2de <__kernel_rem_pio2f+0x20a>
 800d39c:	3301      	adds	r3, #1
 800d39e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800d3a2:	2900      	cmp	r1, #0
 800d3a4:	d0fa      	beq.n	800d39c <__kernel_rem_pio2f+0x2c8>
 800d3a6:	f06f 0803 	mvn.w	r8, #3
 800d3aa:	9a04      	ldr	r2, [sp, #16]
 800d3ac:	1c7d      	adds	r5, r7, #1
 800d3ae:	18bc      	adds	r4, r7, r2
 800d3b0:	aa1c      	add	r2, sp, #112	; 0x70
 800d3b2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800d3b6:	441f      	add	r7, r3
 800d3b8:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800d3bc:	42af      	cmp	r7, r5
 800d3be:	f6ff aec8 	blt.w	800d152 <__kernel_rem_pio2f+0x7e>
 800d3c2:	9b06      	ldr	r3, [sp, #24]
 800d3c4:	f04f 0a00 	mov.w	sl, #0
 800d3c8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d3cc:	f7f3 fc5e 	bl	8000c8c <__aeabi_i2f>
 800d3d0:	f04f 0b00 	mov.w	fp, #0
 800d3d4:	6020      	str	r0, [r4, #0]
 800d3d6:	9b03      	ldr	r3, [sp, #12]
 800d3d8:	459a      	cmp	sl, r3
 800d3da:	dd0b      	ble.n	800d3f4 <__kernel_rem_pio2f+0x320>
 800d3dc:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 800d3e0:	3404      	adds	r4, #4
 800d3e2:	3501      	adds	r5, #1
 800d3e4:	e7ea      	b.n	800d3bc <__kernel_rem_pio2f+0x2e8>
 800d3e6:	9a07      	ldr	r2, [sp, #28]
 800d3e8:	2301      	movs	r3, #1
 800d3ea:	e7d8      	b.n	800d39e <__kernel_rem_pio2f+0x2ca>
 800d3ec:	0800e704 	.word	0x0800e704
 800d3f0:	0800e6d8 	.word	0x0800e6d8
 800d3f4:	fb08 f30a 	mul.w	r3, r8, sl
 800d3f8:	9a05      	ldr	r2, [sp, #20]
 800d3fa:	58e0      	ldr	r0, [r4, r3]
 800d3fc:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 800d400:	f7f3 fc98 	bl	8000d34 <__aeabi_fmul>
 800d404:	4601      	mov	r1, r0
 800d406:	4658      	mov	r0, fp
 800d408:	f7f3 fb8c 	bl	8000b24 <__addsf3>
 800d40c:	f10a 0a01 	add.w	sl, sl, #1
 800d410:	4683      	mov	fp, r0
 800d412:	e7e0      	b.n	800d3d6 <__kernel_rem_pio2f+0x302>
 800d414:	3c01      	subs	r4, #1
 800d416:	e767      	b.n	800d2e8 <__kernel_rem_pio2f+0x214>
 800d418:	4271      	negs	r1, r6
 800d41a:	4620      	mov	r0, r4
 800d41c:	f000 fdda 	bl	800dfd4 <scalbnf>
 800d420:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800d424:	4604      	mov	r4, r0
 800d426:	f7f3 fe37 	bl	8001098 <__aeabi_fcmpge>
 800d42a:	b1f8      	cbz	r0, 800d46c <__kernel_rem_pio2f+0x398>
 800d42c:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800d430:	4620      	mov	r0, r4
 800d432:	f7f3 fc7f 	bl	8000d34 <__aeabi_fmul>
 800d436:	f7f3 fe43 	bl	80010c0 <__aeabi_f2iz>
 800d43a:	f7f3 fc27 	bl	8000c8c <__aeabi_i2f>
 800d43e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800d442:	4680      	mov	r8, r0
 800d444:	f7f3 fc76 	bl	8000d34 <__aeabi_fmul>
 800d448:	4601      	mov	r1, r0
 800d44a:	4620      	mov	r0, r4
 800d44c:	f7f3 fb68 	bl	8000b20 <__aeabi_fsub>
 800d450:	f7f3 fe36 	bl	80010c0 <__aeabi_f2iz>
 800d454:	ab08      	add	r3, sp, #32
 800d456:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800d45a:	4640      	mov	r0, r8
 800d45c:	f7f3 fe30 	bl	80010c0 <__aeabi_f2iz>
 800d460:	1c7c      	adds	r4, r7, #1
 800d462:	ab08      	add	r3, sp, #32
 800d464:	3608      	adds	r6, #8
 800d466:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800d46a:	e744      	b.n	800d2f6 <__kernel_rem_pio2f+0x222>
 800d46c:	4620      	mov	r0, r4
 800d46e:	f7f3 fe27 	bl	80010c0 <__aeabi_f2iz>
 800d472:	ab08      	add	r3, sp, #32
 800d474:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800d478:	463c      	mov	r4, r7
 800d47a:	e73c      	b.n	800d2f6 <__kernel_rem_pio2f+0x222>
 800d47c:	ab08      	add	r3, sp, #32
 800d47e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800d482:	f7f3 fc03 	bl	8000c8c <__aeabi_i2f>
 800d486:	4651      	mov	r1, sl
 800d488:	f7f3 fc54 	bl	8000d34 <__aeabi_fmul>
 800d48c:	4631      	mov	r1, r6
 800d48e:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
 800d492:	4650      	mov	r0, sl
 800d494:	f7f3 fc4e 	bl	8000d34 <__aeabi_fmul>
 800d498:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d49c:	4682      	mov	sl, r0
 800d49e:	e734      	b.n	800d30a <__kernel_rem_pio2f+0x236>
 800d4a0:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 800d4a4:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800d4a8:	9304      	str	r3, [sp, #16]
 800d4aa:	9203      	str	r2, [sp, #12]
 800d4ac:	f7f3 fc42 	bl	8000d34 <__aeabi_fmul>
 800d4b0:	4601      	mov	r1, r0
 800d4b2:	4658      	mov	r0, fp
 800d4b4:	f7f3 fb36 	bl	8000b24 <__addsf3>
 800d4b8:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800d4bc:	4683      	mov	fp, r0
 800d4be:	f108 0801 	add.w	r8, r8, #1
 800d4c2:	9902      	ldr	r1, [sp, #8]
 800d4c4:	4588      	cmp	r8, r1
 800d4c6:	dc01      	bgt.n	800d4cc <__kernel_rem_pio2f+0x3f8>
 800d4c8:	45c2      	cmp	sl, r8
 800d4ca:	dae9      	bge.n	800d4a0 <__kernel_rem_pio2f+0x3cc>
 800d4cc:	a958      	add	r1, sp, #352	; 0x160
 800d4ce:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d4d2:	f841 bca0 	str.w	fp, [r1, #-160]
 800d4d6:	f10a 0a01 	add.w	sl, sl, #1
 800d4da:	3f04      	subs	r7, #4
 800d4dc:	e71f      	b.n	800d31e <__kernel_rem_pio2f+0x24a>
 800d4de:	469b      	mov	fp, r3
 800d4e0:	f04f 0800 	mov.w	r8, #0
 800d4e4:	e7ed      	b.n	800d4c2 <__kernel_rem_pio2f+0x3ee>
 800d4e6:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 800d4ea:	4456      	add	r6, sl
 800d4ec:	4637      	mov	r7, r6
 800d4ee:	46a0      	mov	r8, r4
 800d4f0:	f1b8 0f00 	cmp.w	r8, #0
 800d4f4:	dc4a      	bgt.n	800d58c <__kernel_rem_pio2f+0x4b8>
 800d4f6:	4627      	mov	r7, r4
 800d4f8:	2f01      	cmp	r7, #1
 800d4fa:	dc60      	bgt.n	800d5be <__kernel_rem_pio2f+0x4ea>
 800d4fc:	2000      	movs	r0, #0
 800d4fe:	2c01      	cmp	r4, #1
 800d500:	dc74      	bgt.n	800d5ec <__kernel_rem_pio2f+0x518>
 800d502:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800d504:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800d506:	2d00      	cmp	r5, #0
 800d508:	d176      	bne.n	800d5f8 <__kernel_rem_pio2f+0x524>
 800d50a:	9901      	ldr	r1, [sp, #4]
 800d50c:	600a      	str	r2, [r1, #0]
 800d50e:	460a      	mov	r2, r1
 800d510:	604b      	str	r3, [r1, #4]
 800d512:	6090      	str	r0, [r2, #8]
 800d514:	e00b      	b.n	800d52e <__kernel_rem_pio2f+0x45a>
 800d516:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800d51a:	f7f3 fb03 	bl	8000b24 <__addsf3>
 800d51e:	3c01      	subs	r4, #1
 800d520:	2c00      	cmp	r4, #0
 800d522:	daf8      	bge.n	800d516 <__kernel_rem_pio2f+0x442>
 800d524:	b10d      	cbz	r5, 800d52a <__kernel_rem_pio2f+0x456>
 800d526:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d52a:	9b01      	ldr	r3, [sp, #4]
 800d52c:	6018      	str	r0, [r3, #0]
 800d52e:	f009 0007 	and.w	r0, r9, #7
 800d532:	b059      	add	sp, #356	; 0x164
 800d534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d538:	2000      	movs	r0, #0
 800d53a:	ae30      	add	r6, sp, #192	; 0xc0
 800d53c:	e7f0      	b.n	800d520 <__kernel_rem_pio2f+0x44c>
 800d53e:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800d542:	f7f3 faef 	bl	8000b24 <__addsf3>
 800d546:	3e01      	subs	r6, #1
 800d548:	2e00      	cmp	r6, #0
 800d54a:	daf8      	bge.n	800d53e <__kernel_rem_pio2f+0x46a>
 800d54c:	b1b5      	cbz	r5, 800d57c <__kernel_rem_pio2f+0x4a8>
 800d54e:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800d552:	9a01      	ldr	r2, [sp, #4]
 800d554:	af58      	add	r7, sp, #352	; 0x160
 800d556:	4601      	mov	r1, r0
 800d558:	6013      	str	r3, [r2, #0]
 800d55a:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 800d55e:	f7f3 fadf 	bl	8000b20 <__aeabi_fsub>
 800d562:	2601      	movs	r6, #1
 800d564:	42b4      	cmp	r4, r6
 800d566:	da0b      	bge.n	800d580 <__kernel_rem_pio2f+0x4ac>
 800d568:	b10d      	cbz	r5, 800d56e <__kernel_rem_pio2f+0x49a>
 800d56a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d56e:	9b01      	ldr	r3, [sp, #4]
 800d570:	6058      	str	r0, [r3, #4]
 800d572:	e7dc      	b.n	800d52e <__kernel_rem_pio2f+0x45a>
 800d574:	4626      	mov	r6, r4
 800d576:	2000      	movs	r0, #0
 800d578:	af30      	add	r7, sp, #192	; 0xc0
 800d57a:	e7e5      	b.n	800d548 <__kernel_rem_pio2f+0x474>
 800d57c:	4603      	mov	r3, r0
 800d57e:	e7e8      	b.n	800d552 <__kernel_rem_pio2f+0x47e>
 800d580:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800d584:	f7f3 face 	bl	8000b24 <__addsf3>
 800d588:	3601      	adds	r6, #1
 800d58a:	e7eb      	b.n	800d564 <__kernel_rem_pio2f+0x490>
 800d58c:	f857 2d04 	ldr.w	r2, [r7, #-4]!
 800d590:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	4610      	mov	r0, r2
 800d598:	4619      	mov	r1, r3
 800d59a:	9303      	str	r3, [sp, #12]
 800d59c:	9202      	str	r2, [sp, #8]
 800d59e:	f7f3 fac1 	bl	8000b24 <__addsf3>
 800d5a2:	9a02      	ldr	r2, [sp, #8]
 800d5a4:	4601      	mov	r1, r0
 800d5a6:	4683      	mov	fp, r0
 800d5a8:	4610      	mov	r0, r2
 800d5aa:	f7f3 fab9 	bl	8000b20 <__aeabi_fsub>
 800d5ae:	9b03      	ldr	r3, [sp, #12]
 800d5b0:	4619      	mov	r1, r3
 800d5b2:	f7f3 fab7 	bl	8000b24 <__addsf3>
 800d5b6:	f8c7 b000 	str.w	fp, [r7]
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	e798      	b.n	800d4f0 <__kernel_rem_pio2f+0x41c>
 800d5be:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 800d5c2:	3f01      	subs	r7, #1
 800d5c4:	f8d6 b004 	ldr.w	fp, [r6, #4]
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	4659      	mov	r1, fp
 800d5cc:	9302      	str	r3, [sp, #8]
 800d5ce:	f7f3 faa9 	bl	8000b24 <__addsf3>
 800d5d2:	9b02      	ldr	r3, [sp, #8]
 800d5d4:	4601      	mov	r1, r0
 800d5d6:	4680      	mov	r8, r0
 800d5d8:	4618      	mov	r0, r3
 800d5da:	f7f3 faa1 	bl	8000b20 <__aeabi_fsub>
 800d5de:	4659      	mov	r1, fp
 800d5e0:	f7f3 faa0 	bl	8000b24 <__addsf3>
 800d5e4:	f8c6 8000 	str.w	r8, [r6]
 800d5e8:	6070      	str	r0, [r6, #4]
 800d5ea:	e785      	b.n	800d4f8 <__kernel_rem_pio2f+0x424>
 800d5ec:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 800d5f0:	f7f3 fa98 	bl	8000b24 <__addsf3>
 800d5f4:	3c01      	subs	r4, #1
 800d5f6:	e782      	b.n	800d4fe <__kernel_rem_pio2f+0x42a>
 800d5f8:	9901      	ldr	r1, [sp, #4]
 800d5fa:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800d5fe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d602:	600a      	str	r2, [r1, #0]
 800d604:	604b      	str	r3, [r1, #4]
 800d606:	460a      	mov	r2, r1
 800d608:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d60c:	e781      	b.n	800d512 <__kernel_rem_pio2f+0x43e>
 800d60e:	bf00      	nop

0800d610 <__kernel_sinf>:
 800d610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d614:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800d618:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800d61c:	4604      	mov	r4, r0
 800d61e:	460f      	mov	r7, r1
 800d620:	4691      	mov	r9, r2
 800d622:	da03      	bge.n	800d62c <__kernel_sinf+0x1c>
 800d624:	f7f3 fd4c 	bl	80010c0 <__aeabi_f2iz>
 800d628:	2800      	cmp	r0, #0
 800d62a:	d035      	beq.n	800d698 <__kernel_sinf+0x88>
 800d62c:	4621      	mov	r1, r4
 800d62e:	4620      	mov	r0, r4
 800d630:	f7f3 fb80 	bl	8000d34 <__aeabi_fmul>
 800d634:	4605      	mov	r5, r0
 800d636:	4601      	mov	r1, r0
 800d638:	4620      	mov	r0, r4
 800d63a:	f7f3 fb7b 	bl	8000d34 <__aeabi_fmul>
 800d63e:	4929      	ldr	r1, [pc, #164]	; (800d6e4 <__kernel_sinf+0xd4>)
 800d640:	4606      	mov	r6, r0
 800d642:	4628      	mov	r0, r5
 800d644:	f7f3 fb76 	bl	8000d34 <__aeabi_fmul>
 800d648:	4927      	ldr	r1, [pc, #156]	; (800d6e8 <__kernel_sinf+0xd8>)
 800d64a:	f7f3 fa69 	bl	8000b20 <__aeabi_fsub>
 800d64e:	4629      	mov	r1, r5
 800d650:	f7f3 fb70 	bl	8000d34 <__aeabi_fmul>
 800d654:	4925      	ldr	r1, [pc, #148]	; (800d6ec <__kernel_sinf+0xdc>)
 800d656:	f7f3 fa65 	bl	8000b24 <__addsf3>
 800d65a:	4629      	mov	r1, r5
 800d65c:	f7f3 fb6a 	bl	8000d34 <__aeabi_fmul>
 800d660:	4923      	ldr	r1, [pc, #140]	; (800d6f0 <__kernel_sinf+0xe0>)
 800d662:	f7f3 fa5d 	bl	8000b20 <__aeabi_fsub>
 800d666:	4629      	mov	r1, r5
 800d668:	f7f3 fb64 	bl	8000d34 <__aeabi_fmul>
 800d66c:	4921      	ldr	r1, [pc, #132]	; (800d6f4 <__kernel_sinf+0xe4>)
 800d66e:	f7f3 fa59 	bl	8000b24 <__addsf3>
 800d672:	4680      	mov	r8, r0
 800d674:	f1b9 0f00 	cmp.w	r9, #0
 800d678:	d111      	bne.n	800d69e <__kernel_sinf+0x8e>
 800d67a:	4601      	mov	r1, r0
 800d67c:	4628      	mov	r0, r5
 800d67e:	f7f3 fb59 	bl	8000d34 <__aeabi_fmul>
 800d682:	491d      	ldr	r1, [pc, #116]	; (800d6f8 <__kernel_sinf+0xe8>)
 800d684:	f7f3 fa4c 	bl	8000b20 <__aeabi_fsub>
 800d688:	4631      	mov	r1, r6
 800d68a:	f7f3 fb53 	bl	8000d34 <__aeabi_fmul>
 800d68e:	4601      	mov	r1, r0
 800d690:	4620      	mov	r0, r4
 800d692:	f7f3 fa47 	bl	8000b24 <__addsf3>
 800d696:	4604      	mov	r4, r0
 800d698:	4620      	mov	r0, r4
 800d69a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d69e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800d6a2:	4638      	mov	r0, r7
 800d6a4:	f7f3 fb46 	bl	8000d34 <__aeabi_fmul>
 800d6a8:	4641      	mov	r1, r8
 800d6aa:	4681      	mov	r9, r0
 800d6ac:	4630      	mov	r0, r6
 800d6ae:	f7f3 fb41 	bl	8000d34 <__aeabi_fmul>
 800d6b2:	4601      	mov	r1, r0
 800d6b4:	4648      	mov	r0, r9
 800d6b6:	f7f3 fa33 	bl	8000b20 <__aeabi_fsub>
 800d6ba:	4629      	mov	r1, r5
 800d6bc:	f7f3 fb3a 	bl	8000d34 <__aeabi_fmul>
 800d6c0:	4639      	mov	r1, r7
 800d6c2:	f7f3 fa2d 	bl	8000b20 <__aeabi_fsub>
 800d6c6:	490c      	ldr	r1, [pc, #48]	; (800d6f8 <__kernel_sinf+0xe8>)
 800d6c8:	4605      	mov	r5, r0
 800d6ca:	4630      	mov	r0, r6
 800d6cc:	f7f3 fb32 	bl	8000d34 <__aeabi_fmul>
 800d6d0:	4601      	mov	r1, r0
 800d6d2:	4628      	mov	r0, r5
 800d6d4:	f7f3 fa26 	bl	8000b24 <__addsf3>
 800d6d8:	4601      	mov	r1, r0
 800d6da:	4620      	mov	r0, r4
 800d6dc:	f7f3 fa20 	bl	8000b20 <__aeabi_fsub>
 800d6e0:	e7d9      	b.n	800d696 <__kernel_sinf+0x86>
 800d6e2:	bf00      	nop
 800d6e4:	2f2ec9d3 	.word	0x2f2ec9d3
 800d6e8:	32d72f34 	.word	0x32d72f34
 800d6ec:	3638ef1b 	.word	0x3638ef1b
 800d6f0:	39500d01 	.word	0x39500d01
 800d6f4:	3c088889 	.word	0x3c088889
 800d6f8:	3e2aaaab 	.word	0x3e2aaaab
 800d6fc:	00000000 	.word	0x00000000

0800d700 <atan>:
 800d700:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d704:	4bb6      	ldr	r3, [pc, #728]	; (800d9e0 <atan+0x2e0>)
 800d706:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d70a:	429e      	cmp	r6, r3
 800d70c:	4604      	mov	r4, r0
 800d70e:	460d      	mov	r5, r1
 800d710:	468b      	mov	fp, r1
 800d712:	dd17      	ble.n	800d744 <atan+0x44>
 800d714:	4bb3      	ldr	r3, [pc, #716]	; (800d9e4 <atan+0x2e4>)
 800d716:	429e      	cmp	r6, r3
 800d718:	dc01      	bgt.n	800d71e <atan+0x1e>
 800d71a:	d109      	bne.n	800d730 <atan+0x30>
 800d71c:	b140      	cbz	r0, 800d730 <atan+0x30>
 800d71e:	4622      	mov	r2, r4
 800d720:	462b      	mov	r3, r5
 800d722:	4620      	mov	r0, r4
 800d724:	4629      	mov	r1, r5
 800d726:	f7f2 fd19 	bl	800015c <__adddf3>
 800d72a:	4604      	mov	r4, r0
 800d72c:	460d      	mov	r5, r1
 800d72e:	e005      	b.n	800d73c <atan+0x3c>
 800d730:	f1bb 0f00 	cmp.w	fp, #0
 800d734:	4cac      	ldr	r4, [pc, #688]	; (800d9e8 <atan+0x2e8>)
 800d736:	f340 8121 	ble.w	800d97c <atan+0x27c>
 800d73a:	4dac      	ldr	r5, [pc, #688]	; (800d9ec <atan+0x2ec>)
 800d73c:	4620      	mov	r0, r4
 800d73e:	4629      	mov	r1, r5
 800d740:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d744:	4baa      	ldr	r3, [pc, #680]	; (800d9f0 <atan+0x2f0>)
 800d746:	429e      	cmp	r6, r3
 800d748:	dc11      	bgt.n	800d76e <atan+0x6e>
 800d74a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800d74e:	429e      	cmp	r6, r3
 800d750:	dc0a      	bgt.n	800d768 <atan+0x68>
 800d752:	a38b      	add	r3, pc, #556	; (adr r3, 800d980 <atan+0x280>)
 800d754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d758:	f7f2 fd00 	bl	800015c <__adddf3>
 800d75c:	2200      	movs	r2, #0
 800d75e:	4ba5      	ldr	r3, [pc, #660]	; (800d9f4 <atan+0x2f4>)
 800d760:	f7f3 f942 	bl	80009e8 <__aeabi_dcmpgt>
 800d764:	2800      	cmp	r0, #0
 800d766:	d1e9      	bne.n	800d73c <atan+0x3c>
 800d768:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800d76c:	e027      	b.n	800d7be <atan+0xbe>
 800d76e:	f000 f951 	bl	800da14 <fabs>
 800d772:	4ba1      	ldr	r3, [pc, #644]	; (800d9f8 <atan+0x2f8>)
 800d774:	4604      	mov	r4, r0
 800d776:	429e      	cmp	r6, r3
 800d778:	460d      	mov	r5, r1
 800d77a:	f300 80b8 	bgt.w	800d8ee <atan+0x1ee>
 800d77e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800d782:	429e      	cmp	r6, r3
 800d784:	f300 809c 	bgt.w	800d8c0 <atan+0x1c0>
 800d788:	4602      	mov	r2, r0
 800d78a:	460b      	mov	r3, r1
 800d78c:	f7f2 fce6 	bl	800015c <__adddf3>
 800d790:	2200      	movs	r2, #0
 800d792:	4b98      	ldr	r3, [pc, #608]	; (800d9f4 <atan+0x2f4>)
 800d794:	f7f2 fce0 	bl	8000158 <__aeabi_dsub>
 800d798:	2200      	movs	r2, #0
 800d79a:	4606      	mov	r6, r0
 800d79c:	460f      	mov	r7, r1
 800d79e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d7a2:	4620      	mov	r0, r4
 800d7a4:	4629      	mov	r1, r5
 800d7a6:	f7f2 fcd9 	bl	800015c <__adddf3>
 800d7aa:	4602      	mov	r2, r0
 800d7ac:	460b      	mov	r3, r1
 800d7ae:	4630      	mov	r0, r6
 800d7b0:	4639      	mov	r1, r7
 800d7b2:	f7f2 ffb3 	bl	800071c <__aeabi_ddiv>
 800d7b6:	f04f 0a00 	mov.w	sl, #0
 800d7ba:	4604      	mov	r4, r0
 800d7bc:	460d      	mov	r5, r1
 800d7be:	4622      	mov	r2, r4
 800d7c0:	462b      	mov	r3, r5
 800d7c2:	4620      	mov	r0, r4
 800d7c4:	4629      	mov	r1, r5
 800d7c6:	f7f2 fe7f 	bl	80004c8 <__aeabi_dmul>
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	460b      	mov	r3, r1
 800d7ce:	4680      	mov	r8, r0
 800d7d0:	4689      	mov	r9, r1
 800d7d2:	f7f2 fe79 	bl	80004c8 <__aeabi_dmul>
 800d7d6:	a36c      	add	r3, pc, #432	; (adr r3, 800d988 <atan+0x288>)
 800d7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7dc:	4606      	mov	r6, r0
 800d7de:	460f      	mov	r7, r1
 800d7e0:	f7f2 fe72 	bl	80004c8 <__aeabi_dmul>
 800d7e4:	a36a      	add	r3, pc, #424	; (adr r3, 800d990 <atan+0x290>)
 800d7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7ea:	f7f2 fcb7 	bl	800015c <__adddf3>
 800d7ee:	4632      	mov	r2, r6
 800d7f0:	463b      	mov	r3, r7
 800d7f2:	f7f2 fe69 	bl	80004c8 <__aeabi_dmul>
 800d7f6:	a368      	add	r3, pc, #416	; (adr r3, 800d998 <atan+0x298>)
 800d7f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7fc:	f7f2 fcae 	bl	800015c <__adddf3>
 800d800:	4632      	mov	r2, r6
 800d802:	463b      	mov	r3, r7
 800d804:	f7f2 fe60 	bl	80004c8 <__aeabi_dmul>
 800d808:	a365      	add	r3, pc, #404	; (adr r3, 800d9a0 <atan+0x2a0>)
 800d80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d80e:	f7f2 fca5 	bl	800015c <__adddf3>
 800d812:	4632      	mov	r2, r6
 800d814:	463b      	mov	r3, r7
 800d816:	f7f2 fe57 	bl	80004c8 <__aeabi_dmul>
 800d81a:	a363      	add	r3, pc, #396	; (adr r3, 800d9a8 <atan+0x2a8>)
 800d81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d820:	f7f2 fc9c 	bl	800015c <__adddf3>
 800d824:	4632      	mov	r2, r6
 800d826:	463b      	mov	r3, r7
 800d828:	f7f2 fe4e 	bl	80004c8 <__aeabi_dmul>
 800d82c:	a360      	add	r3, pc, #384	; (adr r3, 800d9b0 <atan+0x2b0>)
 800d82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d832:	f7f2 fc93 	bl	800015c <__adddf3>
 800d836:	4642      	mov	r2, r8
 800d838:	464b      	mov	r3, r9
 800d83a:	f7f2 fe45 	bl	80004c8 <__aeabi_dmul>
 800d83e:	a35e      	add	r3, pc, #376	; (adr r3, 800d9b8 <atan+0x2b8>)
 800d840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d844:	4680      	mov	r8, r0
 800d846:	4689      	mov	r9, r1
 800d848:	4630      	mov	r0, r6
 800d84a:	4639      	mov	r1, r7
 800d84c:	f7f2 fe3c 	bl	80004c8 <__aeabi_dmul>
 800d850:	a35b      	add	r3, pc, #364	; (adr r3, 800d9c0 <atan+0x2c0>)
 800d852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d856:	f7f2 fc7f 	bl	8000158 <__aeabi_dsub>
 800d85a:	4632      	mov	r2, r6
 800d85c:	463b      	mov	r3, r7
 800d85e:	f7f2 fe33 	bl	80004c8 <__aeabi_dmul>
 800d862:	a359      	add	r3, pc, #356	; (adr r3, 800d9c8 <atan+0x2c8>)
 800d864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d868:	f7f2 fc76 	bl	8000158 <__aeabi_dsub>
 800d86c:	4632      	mov	r2, r6
 800d86e:	463b      	mov	r3, r7
 800d870:	f7f2 fe2a 	bl	80004c8 <__aeabi_dmul>
 800d874:	a356      	add	r3, pc, #344	; (adr r3, 800d9d0 <atan+0x2d0>)
 800d876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d87a:	f7f2 fc6d 	bl	8000158 <__aeabi_dsub>
 800d87e:	4632      	mov	r2, r6
 800d880:	463b      	mov	r3, r7
 800d882:	f7f2 fe21 	bl	80004c8 <__aeabi_dmul>
 800d886:	a354      	add	r3, pc, #336	; (adr r3, 800d9d8 <atan+0x2d8>)
 800d888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d88c:	f7f2 fc64 	bl	8000158 <__aeabi_dsub>
 800d890:	4632      	mov	r2, r6
 800d892:	463b      	mov	r3, r7
 800d894:	f7f2 fe18 	bl	80004c8 <__aeabi_dmul>
 800d898:	4602      	mov	r2, r0
 800d89a:	460b      	mov	r3, r1
 800d89c:	4640      	mov	r0, r8
 800d89e:	4649      	mov	r1, r9
 800d8a0:	f7f2 fc5c 	bl	800015c <__adddf3>
 800d8a4:	4622      	mov	r2, r4
 800d8a6:	462b      	mov	r3, r5
 800d8a8:	f7f2 fe0e 	bl	80004c8 <__aeabi_dmul>
 800d8ac:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	460b      	mov	r3, r1
 800d8b4:	d144      	bne.n	800d940 <atan+0x240>
 800d8b6:	4620      	mov	r0, r4
 800d8b8:	4629      	mov	r1, r5
 800d8ba:	f7f2 fc4d 	bl	8000158 <__aeabi_dsub>
 800d8be:	e734      	b.n	800d72a <atan+0x2a>
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	4b4c      	ldr	r3, [pc, #304]	; (800d9f4 <atan+0x2f4>)
 800d8c4:	f7f2 fc48 	bl	8000158 <__aeabi_dsub>
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	4606      	mov	r6, r0
 800d8cc:	460f      	mov	r7, r1
 800d8ce:	4b49      	ldr	r3, [pc, #292]	; (800d9f4 <atan+0x2f4>)
 800d8d0:	4620      	mov	r0, r4
 800d8d2:	4629      	mov	r1, r5
 800d8d4:	f7f2 fc42 	bl	800015c <__adddf3>
 800d8d8:	4602      	mov	r2, r0
 800d8da:	460b      	mov	r3, r1
 800d8dc:	4630      	mov	r0, r6
 800d8de:	4639      	mov	r1, r7
 800d8e0:	f7f2 ff1c 	bl	800071c <__aeabi_ddiv>
 800d8e4:	f04f 0a01 	mov.w	sl, #1
 800d8e8:	4604      	mov	r4, r0
 800d8ea:	460d      	mov	r5, r1
 800d8ec:	e767      	b.n	800d7be <atan+0xbe>
 800d8ee:	4b43      	ldr	r3, [pc, #268]	; (800d9fc <atan+0x2fc>)
 800d8f0:	429e      	cmp	r6, r3
 800d8f2:	dc1a      	bgt.n	800d92a <atan+0x22a>
 800d8f4:	2200      	movs	r2, #0
 800d8f6:	4b42      	ldr	r3, [pc, #264]	; (800da00 <atan+0x300>)
 800d8f8:	f7f2 fc2e 	bl	8000158 <__aeabi_dsub>
 800d8fc:	2200      	movs	r2, #0
 800d8fe:	4606      	mov	r6, r0
 800d900:	460f      	mov	r7, r1
 800d902:	4b3f      	ldr	r3, [pc, #252]	; (800da00 <atan+0x300>)
 800d904:	4620      	mov	r0, r4
 800d906:	4629      	mov	r1, r5
 800d908:	f7f2 fdde 	bl	80004c8 <__aeabi_dmul>
 800d90c:	2200      	movs	r2, #0
 800d90e:	4b39      	ldr	r3, [pc, #228]	; (800d9f4 <atan+0x2f4>)
 800d910:	f7f2 fc24 	bl	800015c <__adddf3>
 800d914:	4602      	mov	r2, r0
 800d916:	460b      	mov	r3, r1
 800d918:	4630      	mov	r0, r6
 800d91a:	4639      	mov	r1, r7
 800d91c:	f7f2 fefe 	bl	800071c <__aeabi_ddiv>
 800d920:	f04f 0a02 	mov.w	sl, #2
 800d924:	4604      	mov	r4, r0
 800d926:	460d      	mov	r5, r1
 800d928:	e749      	b.n	800d7be <atan+0xbe>
 800d92a:	4602      	mov	r2, r0
 800d92c:	460b      	mov	r3, r1
 800d92e:	2000      	movs	r0, #0
 800d930:	4934      	ldr	r1, [pc, #208]	; (800da04 <atan+0x304>)
 800d932:	f7f2 fef3 	bl	800071c <__aeabi_ddiv>
 800d936:	f04f 0a03 	mov.w	sl, #3
 800d93a:	4604      	mov	r4, r0
 800d93c:	460d      	mov	r5, r1
 800d93e:	e73e      	b.n	800d7be <atan+0xbe>
 800d940:	4b31      	ldr	r3, [pc, #196]	; (800da08 <atan+0x308>)
 800d942:	4e32      	ldr	r6, [pc, #200]	; (800da0c <atan+0x30c>)
 800d944:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800d948:	4456      	add	r6, sl
 800d94a:	449a      	add	sl, r3
 800d94c:	e9da 2300 	ldrd	r2, r3, [sl]
 800d950:	f7f2 fc02 	bl	8000158 <__aeabi_dsub>
 800d954:	4622      	mov	r2, r4
 800d956:	462b      	mov	r3, r5
 800d958:	f7f2 fbfe 	bl	8000158 <__aeabi_dsub>
 800d95c:	4602      	mov	r2, r0
 800d95e:	460b      	mov	r3, r1
 800d960:	e9d6 0100 	ldrd	r0, r1, [r6]
 800d964:	f7f2 fbf8 	bl	8000158 <__aeabi_dsub>
 800d968:	f1bb 0f00 	cmp.w	fp, #0
 800d96c:	4604      	mov	r4, r0
 800d96e:	460d      	mov	r5, r1
 800d970:	f6bf aee4 	bge.w	800d73c <atan+0x3c>
 800d974:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d978:	461d      	mov	r5, r3
 800d97a:	e6df      	b.n	800d73c <atan+0x3c>
 800d97c:	4d24      	ldr	r5, [pc, #144]	; (800da10 <atan+0x310>)
 800d97e:	e6dd      	b.n	800d73c <atan+0x3c>
 800d980:	8800759c 	.word	0x8800759c
 800d984:	7e37e43c 	.word	0x7e37e43c
 800d988:	e322da11 	.word	0xe322da11
 800d98c:	3f90ad3a 	.word	0x3f90ad3a
 800d990:	24760deb 	.word	0x24760deb
 800d994:	3fa97b4b 	.word	0x3fa97b4b
 800d998:	a0d03d51 	.word	0xa0d03d51
 800d99c:	3fb10d66 	.word	0x3fb10d66
 800d9a0:	c54c206e 	.word	0xc54c206e
 800d9a4:	3fb745cd 	.word	0x3fb745cd
 800d9a8:	920083ff 	.word	0x920083ff
 800d9ac:	3fc24924 	.word	0x3fc24924
 800d9b0:	5555550d 	.word	0x5555550d
 800d9b4:	3fd55555 	.word	0x3fd55555
 800d9b8:	2c6a6c2f 	.word	0x2c6a6c2f
 800d9bc:	bfa2b444 	.word	0xbfa2b444
 800d9c0:	52defd9a 	.word	0x52defd9a
 800d9c4:	3fadde2d 	.word	0x3fadde2d
 800d9c8:	af749a6d 	.word	0xaf749a6d
 800d9cc:	3fb3b0f2 	.word	0x3fb3b0f2
 800d9d0:	fe231671 	.word	0xfe231671
 800d9d4:	3fbc71c6 	.word	0x3fbc71c6
 800d9d8:	9998ebc4 	.word	0x9998ebc4
 800d9dc:	3fc99999 	.word	0x3fc99999
 800d9e0:	440fffff 	.word	0x440fffff
 800d9e4:	7ff00000 	.word	0x7ff00000
 800d9e8:	54442d18 	.word	0x54442d18
 800d9ec:	3ff921fb 	.word	0x3ff921fb
 800d9f0:	3fdbffff 	.word	0x3fdbffff
 800d9f4:	3ff00000 	.word	0x3ff00000
 800d9f8:	3ff2ffff 	.word	0x3ff2ffff
 800d9fc:	40037fff 	.word	0x40037fff
 800da00:	3ff80000 	.word	0x3ff80000
 800da04:	bff00000 	.word	0xbff00000
 800da08:	0800e730 	.word	0x0800e730
 800da0c:	0800e710 	.word	0x0800e710
 800da10:	bff921fb 	.word	0xbff921fb

0800da14 <fabs>:
 800da14:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800da18:	4619      	mov	r1, r3
 800da1a:	4770      	bx	lr

0800da1c <finite>:
 800da1c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800da20:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800da24:	0fc0      	lsrs	r0, r0, #31
 800da26:	4770      	bx	lr

0800da28 <floor>:
 800da28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da2c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800da30:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800da34:	2e13      	cmp	r6, #19
 800da36:	4607      	mov	r7, r0
 800da38:	460b      	mov	r3, r1
 800da3a:	460c      	mov	r4, r1
 800da3c:	4605      	mov	r5, r0
 800da3e:	dc35      	bgt.n	800daac <floor+0x84>
 800da40:	2e00      	cmp	r6, #0
 800da42:	da16      	bge.n	800da72 <floor+0x4a>
 800da44:	a336      	add	r3, pc, #216	; (adr r3, 800db20 <floor+0xf8>)
 800da46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da4a:	f7f2 fb87 	bl	800015c <__adddf3>
 800da4e:	2200      	movs	r2, #0
 800da50:	2300      	movs	r3, #0
 800da52:	f7f2 ffc9 	bl	80009e8 <__aeabi_dcmpgt>
 800da56:	b148      	cbz	r0, 800da6c <floor+0x44>
 800da58:	2c00      	cmp	r4, #0
 800da5a:	da5b      	bge.n	800db14 <floor+0xec>
 800da5c:	2500      	movs	r5, #0
 800da5e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800da62:	4a31      	ldr	r2, [pc, #196]	; (800db28 <floor+0x100>)
 800da64:	433b      	orrs	r3, r7
 800da66:	42ab      	cmp	r3, r5
 800da68:	bf18      	it	ne
 800da6a:	4614      	movne	r4, r2
 800da6c:	4623      	mov	r3, r4
 800da6e:	462f      	mov	r7, r5
 800da70:	e026      	b.n	800dac0 <floor+0x98>
 800da72:	4a2e      	ldr	r2, [pc, #184]	; (800db2c <floor+0x104>)
 800da74:	fa42 f806 	asr.w	r8, r2, r6
 800da78:	ea01 0208 	and.w	r2, r1, r8
 800da7c:	4302      	orrs	r2, r0
 800da7e:	d01f      	beq.n	800dac0 <floor+0x98>
 800da80:	a327      	add	r3, pc, #156	; (adr r3, 800db20 <floor+0xf8>)
 800da82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da86:	f7f2 fb69 	bl	800015c <__adddf3>
 800da8a:	2200      	movs	r2, #0
 800da8c:	2300      	movs	r3, #0
 800da8e:	f7f2 ffab 	bl	80009e8 <__aeabi_dcmpgt>
 800da92:	2800      	cmp	r0, #0
 800da94:	d0ea      	beq.n	800da6c <floor+0x44>
 800da96:	2c00      	cmp	r4, #0
 800da98:	bfbe      	ittt	lt
 800da9a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800da9e:	fa43 f606 	asrlt.w	r6, r3, r6
 800daa2:	19a4      	addlt	r4, r4, r6
 800daa4:	ea24 0408 	bic.w	r4, r4, r8
 800daa8:	2500      	movs	r5, #0
 800daaa:	e7df      	b.n	800da6c <floor+0x44>
 800daac:	2e33      	cmp	r6, #51	; 0x33
 800daae:	dd0b      	ble.n	800dac8 <floor+0xa0>
 800dab0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800dab4:	d104      	bne.n	800dac0 <floor+0x98>
 800dab6:	4602      	mov	r2, r0
 800dab8:	f7f2 fb50 	bl	800015c <__adddf3>
 800dabc:	4607      	mov	r7, r0
 800dabe:	460b      	mov	r3, r1
 800dac0:	4638      	mov	r0, r7
 800dac2:	4619      	mov	r1, r3
 800dac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dac8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dacc:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800dad0:	fa22 f808 	lsr.w	r8, r2, r8
 800dad4:	ea18 0f00 	tst.w	r8, r0
 800dad8:	d0f2      	beq.n	800dac0 <floor+0x98>
 800dada:	a311      	add	r3, pc, #68	; (adr r3, 800db20 <floor+0xf8>)
 800dadc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dae0:	f7f2 fb3c 	bl	800015c <__adddf3>
 800dae4:	2200      	movs	r2, #0
 800dae6:	2300      	movs	r3, #0
 800dae8:	f7f2 ff7e 	bl	80009e8 <__aeabi_dcmpgt>
 800daec:	2800      	cmp	r0, #0
 800daee:	d0bd      	beq.n	800da6c <floor+0x44>
 800daf0:	2c00      	cmp	r4, #0
 800daf2:	da02      	bge.n	800dafa <floor+0xd2>
 800daf4:	2e14      	cmp	r6, #20
 800daf6:	d103      	bne.n	800db00 <floor+0xd8>
 800daf8:	3401      	adds	r4, #1
 800dafa:	ea25 0508 	bic.w	r5, r5, r8
 800dafe:	e7b5      	b.n	800da6c <floor+0x44>
 800db00:	2301      	movs	r3, #1
 800db02:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800db06:	fa03 f606 	lsl.w	r6, r3, r6
 800db0a:	4435      	add	r5, r6
 800db0c:	42bd      	cmp	r5, r7
 800db0e:	bf38      	it	cc
 800db10:	18e4      	addcc	r4, r4, r3
 800db12:	e7f2      	b.n	800dafa <floor+0xd2>
 800db14:	2500      	movs	r5, #0
 800db16:	462c      	mov	r4, r5
 800db18:	e7a8      	b.n	800da6c <floor+0x44>
 800db1a:	bf00      	nop
 800db1c:	f3af 8000 	nop.w
 800db20:	8800759c 	.word	0x8800759c
 800db24:	7e37e43c 	.word	0x7e37e43c
 800db28:	bff00000 	.word	0xbff00000
 800db2c:	000fffff 	.word	0x000fffff

0800db30 <matherr>:
 800db30:	2000      	movs	r0, #0
 800db32:	4770      	bx	lr

0800db34 <nan>:
 800db34:	2000      	movs	r0, #0
 800db36:	4901      	ldr	r1, [pc, #4]	; (800db3c <nan+0x8>)
 800db38:	4770      	bx	lr
 800db3a:	bf00      	nop
 800db3c:	7ff80000 	.word	0x7ff80000

0800db40 <rint>:
 800db40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db42:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800db46:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800db4a:	f1bc 0f13 	cmp.w	ip, #19
 800db4e:	4604      	mov	r4, r0
 800db50:	460d      	mov	r5, r1
 800db52:	460b      	mov	r3, r1
 800db54:	4606      	mov	r6, r0
 800db56:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800db5a:	dc5a      	bgt.n	800dc12 <rint+0xd2>
 800db5c:	f1bc 0f00 	cmp.w	ip, #0
 800db60:	da2b      	bge.n	800dbba <rint+0x7a>
 800db62:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800db66:	4302      	orrs	r2, r0
 800db68:	d023      	beq.n	800dbb2 <rint+0x72>
 800db6a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800db6e:	4302      	orrs	r2, r0
 800db70:	4256      	negs	r6, r2
 800db72:	4316      	orrs	r6, r2
 800db74:	0c4b      	lsrs	r3, r1, #17
 800db76:	0b36      	lsrs	r6, r6, #12
 800db78:	4934      	ldr	r1, [pc, #208]	; (800dc4c <rint+0x10c>)
 800db7a:	045b      	lsls	r3, r3, #17
 800db7c:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 800db80:	ea46 0503 	orr.w	r5, r6, r3
 800db84:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800db88:	4602      	mov	r2, r0
 800db8a:	462b      	mov	r3, r5
 800db8c:	e9d1 4500 	ldrd	r4, r5, [r1]
 800db90:	4620      	mov	r0, r4
 800db92:	4629      	mov	r1, r5
 800db94:	f7f2 fae2 	bl	800015c <__adddf3>
 800db98:	e9cd 0100 	strd	r0, r1, [sp]
 800db9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dba0:	462b      	mov	r3, r5
 800dba2:	4622      	mov	r2, r4
 800dba4:	f7f2 fad8 	bl	8000158 <__aeabi_dsub>
 800dba8:	4604      	mov	r4, r0
 800dbaa:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dbae:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800dbb2:	4620      	mov	r0, r4
 800dbb4:	4629      	mov	r1, r5
 800dbb6:	b003      	add	sp, #12
 800dbb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dbba:	4a25      	ldr	r2, [pc, #148]	; (800dc50 <rint+0x110>)
 800dbbc:	fa42 f20c 	asr.w	r2, r2, ip
 800dbc0:	4011      	ands	r1, r2
 800dbc2:	4301      	orrs	r1, r0
 800dbc4:	d0f5      	beq.n	800dbb2 <rint+0x72>
 800dbc6:	0852      	lsrs	r2, r2, #1
 800dbc8:	ea05 0102 	and.w	r1, r5, r2
 800dbcc:	ea50 0601 	orrs.w	r6, r0, r1
 800dbd0:	d00c      	beq.n	800dbec <rint+0xac>
 800dbd2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800dbd6:	f1bc 0f13 	cmp.w	ip, #19
 800dbda:	bf0c      	ite	eq
 800dbdc:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800dbe0:	2600      	movne	r6, #0
 800dbe2:	ea25 0202 	bic.w	r2, r5, r2
 800dbe6:	fa43 f30c 	asr.w	r3, r3, ip
 800dbea:	4313      	orrs	r3, r2
 800dbec:	4917      	ldr	r1, [pc, #92]	; (800dc4c <rint+0x10c>)
 800dbee:	4632      	mov	r2, r6
 800dbf0:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800dbf4:	e9d7 4500 	ldrd	r4, r5, [r7]
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	4629      	mov	r1, r5
 800dbfc:	f7f2 faae 	bl	800015c <__adddf3>
 800dc00:	e9cd 0100 	strd	r0, r1, [sp]
 800dc04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc08:	4622      	mov	r2, r4
 800dc0a:	462b      	mov	r3, r5
 800dc0c:	f7f2 faa4 	bl	8000158 <__aeabi_dsub>
 800dc10:	e008      	b.n	800dc24 <rint+0xe4>
 800dc12:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800dc16:	dd08      	ble.n	800dc2a <rint+0xea>
 800dc18:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800dc1c:	d1c9      	bne.n	800dbb2 <rint+0x72>
 800dc1e:	4602      	mov	r2, r0
 800dc20:	f7f2 fa9c 	bl	800015c <__adddf3>
 800dc24:	4604      	mov	r4, r0
 800dc26:	460d      	mov	r5, r1
 800dc28:	e7c3      	b.n	800dbb2 <rint+0x72>
 800dc2a:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800dc2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc32:	40ca      	lsrs	r2, r1
 800dc34:	4210      	tst	r0, r2
 800dc36:	d0bc      	beq.n	800dbb2 <rint+0x72>
 800dc38:	0852      	lsrs	r2, r2, #1
 800dc3a:	4210      	tst	r0, r2
 800dc3c:	bf1f      	itttt	ne
 800dc3e:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800dc42:	ea20 0202 	bicne.w	r2, r0, r2
 800dc46:	410e      	asrne	r6, r1
 800dc48:	4316      	orrne	r6, r2
 800dc4a:	e7cf      	b.n	800dbec <rint+0xac>
 800dc4c:	0800e750 	.word	0x0800e750
 800dc50:	000fffff 	.word	0x000fffff
 800dc54:	00000000 	.word	0x00000000

0800dc58 <scalbn>:
 800dc58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc5a:	4616      	mov	r6, r2
 800dc5c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dc60:	4604      	mov	r4, r0
 800dc62:	460d      	mov	r5, r1
 800dc64:	460b      	mov	r3, r1
 800dc66:	b982      	cbnz	r2, 800dc8a <scalbn+0x32>
 800dc68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dc6c:	4303      	orrs	r3, r0
 800dc6e:	d034      	beq.n	800dcda <scalbn+0x82>
 800dc70:	4b2d      	ldr	r3, [pc, #180]	; (800dd28 <scalbn+0xd0>)
 800dc72:	2200      	movs	r2, #0
 800dc74:	f7f2 fc28 	bl	80004c8 <__aeabi_dmul>
 800dc78:	4b2c      	ldr	r3, [pc, #176]	; (800dd2c <scalbn+0xd4>)
 800dc7a:	4604      	mov	r4, r0
 800dc7c:	429e      	cmp	r6, r3
 800dc7e:	460d      	mov	r5, r1
 800dc80:	da0d      	bge.n	800dc9e <scalbn+0x46>
 800dc82:	a325      	add	r3, pc, #148	; (adr r3, 800dd18 <scalbn+0xc0>)
 800dc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc88:	e01c      	b.n	800dcc4 <scalbn+0x6c>
 800dc8a:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800dc8e:	42ba      	cmp	r2, r7
 800dc90:	d109      	bne.n	800dca6 <scalbn+0x4e>
 800dc92:	4602      	mov	r2, r0
 800dc94:	f7f2 fa62 	bl	800015c <__adddf3>
 800dc98:	4604      	mov	r4, r0
 800dc9a:	460d      	mov	r5, r1
 800dc9c:	e01d      	b.n	800dcda <scalbn+0x82>
 800dc9e:	460b      	mov	r3, r1
 800dca0:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800dca4:	3a36      	subs	r2, #54	; 0x36
 800dca6:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800dcaa:	4432      	add	r2, r6
 800dcac:	428a      	cmp	r2, r1
 800dcae:	dd0c      	ble.n	800dcca <scalbn+0x72>
 800dcb0:	4622      	mov	r2, r4
 800dcb2:	462b      	mov	r3, r5
 800dcb4:	a11a      	add	r1, pc, #104	; (adr r1, 800dd20 <scalbn+0xc8>)
 800dcb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcba:	f000 f9d7 	bl	800e06c <copysign>
 800dcbe:	a318      	add	r3, pc, #96	; (adr r3, 800dd20 <scalbn+0xc8>)
 800dcc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcc4:	f7f2 fc00 	bl	80004c8 <__aeabi_dmul>
 800dcc8:	e7e6      	b.n	800dc98 <scalbn+0x40>
 800dcca:	2a00      	cmp	r2, #0
 800dccc:	dd08      	ble.n	800dce0 <scalbn+0x88>
 800dcce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dcd2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dcd6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dcda:	4620      	mov	r0, r4
 800dcdc:	4629      	mov	r1, r5
 800dcde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dce0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800dce4:	da0b      	bge.n	800dcfe <scalbn+0xa6>
 800dce6:	f24c 3350 	movw	r3, #50000	; 0xc350
 800dcea:	429e      	cmp	r6, r3
 800dcec:	4622      	mov	r2, r4
 800dcee:	462b      	mov	r3, r5
 800dcf0:	dce0      	bgt.n	800dcb4 <scalbn+0x5c>
 800dcf2:	a109      	add	r1, pc, #36	; (adr r1, 800dd18 <scalbn+0xc0>)
 800dcf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dcf8:	f000 f9b8 	bl	800e06c <copysign>
 800dcfc:	e7c1      	b.n	800dc82 <scalbn+0x2a>
 800dcfe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800dd02:	3236      	adds	r2, #54	; 0x36
 800dd04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800dd08:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	4629      	mov	r1, r5
 800dd10:	2200      	movs	r2, #0
 800dd12:	4b07      	ldr	r3, [pc, #28]	; (800dd30 <scalbn+0xd8>)
 800dd14:	e7d6      	b.n	800dcc4 <scalbn+0x6c>
 800dd16:	bf00      	nop
 800dd18:	c2f8f359 	.word	0xc2f8f359
 800dd1c:	01a56e1f 	.word	0x01a56e1f
 800dd20:	8800759c 	.word	0x8800759c
 800dd24:	7e37e43c 	.word	0x7e37e43c
 800dd28:	43500000 	.word	0x43500000
 800dd2c:	ffff3cb0 	.word	0xffff3cb0
 800dd30:	3c900000 	.word	0x3c900000

0800dd34 <atanf>:
 800dd34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd38:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800dd3c:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800dd40:	4604      	mov	r4, r0
 800dd42:	4607      	mov	r7, r0
 800dd44:	db0e      	blt.n	800dd64 <atanf+0x30>
 800dd46:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800dd4a:	dd04      	ble.n	800dd56 <atanf+0x22>
 800dd4c:	4601      	mov	r1, r0
 800dd4e:	f7f2 fee9 	bl	8000b24 <__addsf3>
 800dd52:	4604      	mov	r4, r0
 800dd54:	e003      	b.n	800dd5e <atanf+0x2a>
 800dd56:	2800      	cmp	r0, #0
 800dd58:	f340 80cd 	ble.w	800def6 <atanf+0x1c2>
 800dd5c:	4c67      	ldr	r4, [pc, #412]	; (800defc <atanf+0x1c8>)
 800dd5e:	4620      	mov	r0, r4
 800dd60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd64:	4b66      	ldr	r3, [pc, #408]	; (800df00 <atanf+0x1cc>)
 800dd66:	429d      	cmp	r5, r3
 800dd68:	dc0e      	bgt.n	800dd88 <atanf+0x54>
 800dd6a:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800dd6e:	da08      	bge.n	800dd82 <atanf+0x4e>
 800dd70:	4964      	ldr	r1, [pc, #400]	; (800df04 <atanf+0x1d0>)
 800dd72:	f7f2 fed7 	bl	8000b24 <__addsf3>
 800dd76:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dd7a:	f7f3 f997 	bl	80010ac <__aeabi_fcmpgt>
 800dd7e:	2800      	cmp	r0, #0
 800dd80:	d1ed      	bne.n	800dd5e <atanf+0x2a>
 800dd82:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800dd86:	e01c      	b.n	800ddc2 <atanf+0x8e>
 800dd88:	f000 f8e0 	bl	800df4c <fabsf>
 800dd8c:	4b5e      	ldr	r3, [pc, #376]	; (800df08 <atanf+0x1d4>)
 800dd8e:	4604      	mov	r4, r0
 800dd90:	429d      	cmp	r5, r3
 800dd92:	dc7c      	bgt.n	800de8e <atanf+0x15a>
 800dd94:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800dd98:	429d      	cmp	r5, r3
 800dd9a:	dc67      	bgt.n	800de6c <atanf+0x138>
 800dd9c:	4601      	mov	r1, r0
 800dd9e:	f7f2 fec1 	bl	8000b24 <__addsf3>
 800dda2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800dda6:	f7f2 febb 	bl	8000b20 <__aeabi_fsub>
 800ddaa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ddae:	4605      	mov	r5, r0
 800ddb0:	4620      	mov	r0, r4
 800ddb2:	f7f2 feb7 	bl	8000b24 <__addsf3>
 800ddb6:	4601      	mov	r1, r0
 800ddb8:	4628      	mov	r0, r5
 800ddba:	f7f3 f86f 	bl	8000e9c <__aeabi_fdiv>
 800ddbe:	2600      	movs	r6, #0
 800ddc0:	4604      	mov	r4, r0
 800ddc2:	4621      	mov	r1, r4
 800ddc4:	4620      	mov	r0, r4
 800ddc6:	f7f2 ffb5 	bl	8000d34 <__aeabi_fmul>
 800ddca:	4601      	mov	r1, r0
 800ddcc:	4680      	mov	r8, r0
 800ddce:	f7f2 ffb1 	bl	8000d34 <__aeabi_fmul>
 800ddd2:	4605      	mov	r5, r0
 800ddd4:	494d      	ldr	r1, [pc, #308]	; (800df0c <atanf+0x1d8>)
 800ddd6:	f7f2 ffad 	bl	8000d34 <__aeabi_fmul>
 800ddda:	494d      	ldr	r1, [pc, #308]	; (800df10 <atanf+0x1dc>)
 800dddc:	f7f2 fea2 	bl	8000b24 <__addsf3>
 800dde0:	4629      	mov	r1, r5
 800dde2:	f7f2 ffa7 	bl	8000d34 <__aeabi_fmul>
 800dde6:	494b      	ldr	r1, [pc, #300]	; (800df14 <atanf+0x1e0>)
 800dde8:	f7f2 fe9c 	bl	8000b24 <__addsf3>
 800ddec:	4629      	mov	r1, r5
 800ddee:	f7f2 ffa1 	bl	8000d34 <__aeabi_fmul>
 800ddf2:	4949      	ldr	r1, [pc, #292]	; (800df18 <atanf+0x1e4>)
 800ddf4:	f7f2 fe96 	bl	8000b24 <__addsf3>
 800ddf8:	4629      	mov	r1, r5
 800ddfa:	f7f2 ff9b 	bl	8000d34 <__aeabi_fmul>
 800ddfe:	4947      	ldr	r1, [pc, #284]	; (800df1c <atanf+0x1e8>)
 800de00:	f7f2 fe90 	bl	8000b24 <__addsf3>
 800de04:	4629      	mov	r1, r5
 800de06:	f7f2 ff95 	bl	8000d34 <__aeabi_fmul>
 800de0a:	4945      	ldr	r1, [pc, #276]	; (800df20 <atanf+0x1ec>)
 800de0c:	f7f2 fe8a 	bl	8000b24 <__addsf3>
 800de10:	4641      	mov	r1, r8
 800de12:	f7f2 ff8f 	bl	8000d34 <__aeabi_fmul>
 800de16:	4943      	ldr	r1, [pc, #268]	; (800df24 <atanf+0x1f0>)
 800de18:	4680      	mov	r8, r0
 800de1a:	4628      	mov	r0, r5
 800de1c:	f7f2 ff8a 	bl	8000d34 <__aeabi_fmul>
 800de20:	4941      	ldr	r1, [pc, #260]	; (800df28 <atanf+0x1f4>)
 800de22:	f7f2 fe7d 	bl	8000b20 <__aeabi_fsub>
 800de26:	4629      	mov	r1, r5
 800de28:	f7f2 ff84 	bl	8000d34 <__aeabi_fmul>
 800de2c:	493f      	ldr	r1, [pc, #252]	; (800df2c <atanf+0x1f8>)
 800de2e:	f7f2 fe77 	bl	8000b20 <__aeabi_fsub>
 800de32:	4629      	mov	r1, r5
 800de34:	f7f2 ff7e 	bl	8000d34 <__aeabi_fmul>
 800de38:	493d      	ldr	r1, [pc, #244]	; (800df30 <atanf+0x1fc>)
 800de3a:	f7f2 fe71 	bl	8000b20 <__aeabi_fsub>
 800de3e:	4629      	mov	r1, r5
 800de40:	f7f2 ff78 	bl	8000d34 <__aeabi_fmul>
 800de44:	493b      	ldr	r1, [pc, #236]	; (800df34 <atanf+0x200>)
 800de46:	f7f2 fe6b 	bl	8000b20 <__aeabi_fsub>
 800de4a:	4629      	mov	r1, r5
 800de4c:	f7f2 ff72 	bl	8000d34 <__aeabi_fmul>
 800de50:	4601      	mov	r1, r0
 800de52:	4640      	mov	r0, r8
 800de54:	f7f2 fe66 	bl	8000b24 <__addsf3>
 800de58:	4621      	mov	r1, r4
 800de5a:	f7f2 ff6b 	bl	8000d34 <__aeabi_fmul>
 800de5e:	1c73      	adds	r3, r6, #1
 800de60:	4601      	mov	r1, r0
 800de62:	d133      	bne.n	800decc <atanf+0x198>
 800de64:	4620      	mov	r0, r4
 800de66:	f7f2 fe5b 	bl	8000b20 <__aeabi_fsub>
 800de6a:	e772      	b.n	800dd52 <atanf+0x1e>
 800de6c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800de70:	f7f2 fe56 	bl	8000b20 <__aeabi_fsub>
 800de74:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800de78:	4605      	mov	r5, r0
 800de7a:	4620      	mov	r0, r4
 800de7c:	f7f2 fe52 	bl	8000b24 <__addsf3>
 800de80:	4601      	mov	r1, r0
 800de82:	4628      	mov	r0, r5
 800de84:	f7f3 f80a 	bl	8000e9c <__aeabi_fdiv>
 800de88:	2601      	movs	r6, #1
 800de8a:	4604      	mov	r4, r0
 800de8c:	e799      	b.n	800ddc2 <atanf+0x8e>
 800de8e:	4b2a      	ldr	r3, [pc, #168]	; (800df38 <atanf+0x204>)
 800de90:	429d      	cmp	r5, r3
 800de92:	dc14      	bgt.n	800debe <atanf+0x18a>
 800de94:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800de98:	f7f2 fe42 	bl	8000b20 <__aeabi_fsub>
 800de9c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800dea0:	4605      	mov	r5, r0
 800dea2:	4620      	mov	r0, r4
 800dea4:	f7f2 ff46 	bl	8000d34 <__aeabi_fmul>
 800dea8:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800deac:	f7f2 fe3a 	bl	8000b24 <__addsf3>
 800deb0:	4601      	mov	r1, r0
 800deb2:	4628      	mov	r0, r5
 800deb4:	f7f2 fff2 	bl	8000e9c <__aeabi_fdiv>
 800deb8:	2602      	movs	r6, #2
 800deba:	4604      	mov	r4, r0
 800debc:	e781      	b.n	800ddc2 <atanf+0x8e>
 800debe:	4601      	mov	r1, r0
 800dec0:	481e      	ldr	r0, [pc, #120]	; (800df3c <atanf+0x208>)
 800dec2:	f7f2 ffeb 	bl	8000e9c <__aeabi_fdiv>
 800dec6:	2603      	movs	r6, #3
 800dec8:	4604      	mov	r4, r0
 800deca:	e77a      	b.n	800ddc2 <atanf+0x8e>
 800decc:	4b1c      	ldr	r3, [pc, #112]	; (800df40 <atanf+0x20c>)
 800dece:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800ded2:	f7f2 fe25 	bl	8000b20 <__aeabi_fsub>
 800ded6:	4621      	mov	r1, r4
 800ded8:	f7f2 fe22 	bl	8000b20 <__aeabi_fsub>
 800dedc:	4b19      	ldr	r3, [pc, #100]	; (800df44 <atanf+0x210>)
 800dede:	4601      	mov	r1, r0
 800dee0:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dee4:	f7f2 fe1c 	bl	8000b20 <__aeabi_fsub>
 800dee8:	2f00      	cmp	r7, #0
 800deea:	4604      	mov	r4, r0
 800deec:	f6bf af37 	bge.w	800dd5e <atanf+0x2a>
 800def0:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800def4:	e733      	b.n	800dd5e <atanf+0x2a>
 800def6:	4c14      	ldr	r4, [pc, #80]	; (800df48 <atanf+0x214>)
 800def8:	e731      	b.n	800dd5e <atanf+0x2a>
 800defa:	bf00      	nop
 800defc:	3fc90fdb 	.word	0x3fc90fdb
 800df00:	3edfffff 	.word	0x3edfffff
 800df04:	7149f2ca 	.word	0x7149f2ca
 800df08:	3f97ffff 	.word	0x3f97ffff
 800df0c:	3c8569d7 	.word	0x3c8569d7
 800df10:	3d4bda59 	.word	0x3d4bda59
 800df14:	3d886b35 	.word	0x3d886b35
 800df18:	3dba2e6e 	.word	0x3dba2e6e
 800df1c:	3e124925 	.word	0x3e124925
 800df20:	3eaaaaab 	.word	0x3eaaaaab
 800df24:	bd15a221 	.word	0xbd15a221
 800df28:	3d6ef16b 	.word	0x3d6ef16b
 800df2c:	3d9d8795 	.word	0x3d9d8795
 800df30:	3de38e38 	.word	0x3de38e38
 800df34:	3e4ccccd 	.word	0x3e4ccccd
 800df38:	401bffff 	.word	0x401bffff
 800df3c:	bf800000 	.word	0xbf800000
 800df40:	0800e770 	.word	0x0800e770
 800df44:	0800e760 	.word	0x0800e760
 800df48:	bfc90fdb 	.word	0xbfc90fdb

0800df4c <fabsf>:
 800df4c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800df50:	4770      	bx	lr
	...

0800df54 <floorf>:
 800df54:	b570      	push	{r4, r5, r6, lr}
 800df56:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800df5a:	0df5      	lsrs	r5, r6, #23
 800df5c:	3d7f      	subs	r5, #127	; 0x7f
 800df5e:	2d16      	cmp	r5, #22
 800df60:	4601      	mov	r1, r0
 800df62:	4604      	mov	r4, r0
 800df64:	dc26      	bgt.n	800dfb4 <floorf+0x60>
 800df66:	2d00      	cmp	r5, #0
 800df68:	da0e      	bge.n	800df88 <floorf+0x34>
 800df6a:	4917      	ldr	r1, [pc, #92]	; (800dfc8 <floorf+0x74>)
 800df6c:	f7f2 fdda 	bl	8000b24 <__addsf3>
 800df70:	2100      	movs	r1, #0
 800df72:	f7f3 f89b 	bl	80010ac <__aeabi_fcmpgt>
 800df76:	b128      	cbz	r0, 800df84 <floorf+0x30>
 800df78:	2c00      	cmp	r4, #0
 800df7a:	da23      	bge.n	800dfc4 <floorf+0x70>
 800df7c:	4b13      	ldr	r3, [pc, #76]	; (800dfcc <floorf+0x78>)
 800df7e:	2e00      	cmp	r6, #0
 800df80:	bf18      	it	ne
 800df82:	461c      	movne	r4, r3
 800df84:	4621      	mov	r1, r4
 800df86:	e01b      	b.n	800dfc0 <floorf+0x6c>
 800df88:	4e11      	ldr	r6, [pc, #68]	; (800dfd0 <floorf+0x7c>)
 800df8a:	412e      	asrs	r6, r5
 800df8c:	4230      	tst	r0, r6
 800df8e:	d017      	beq.n	800dfc0 <floorf+0x6c>
 800df90:	490d      	ldr	r1, [pc, #52]	; (800dfc8 <floorf+0x74>)
 800df92:	f7f2 fdc7 	bl	8000b24 <__addsf3>
 800df96:	2100      	movs	r1, #0
 800df98:	f7f3 f888 	bl	80010ac <__aeabi_fcmpgt>
 800df9c:	2800      	cmp	r0, #0
 800df9e:	d0f1      	beq.n	800df84 <floorf+0x30>
 800dfa0:	2c00      	cmp	r4, #0
 800dfa2:	bfbe      	ittt	lt
 800dfa4:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800dfa8:	fa43 f505 	asrlt.w	r5, r3, r5
 800dfac:	1964      	addlt	r4, r4, r5
 800dfae:	ea24 0406 	bic.w	r4, r4, r6
 800dfb2:	e7e7      	b.n	800df84 <floorf+0x30>
 800dfb4:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800dfb8:	d302      	bcc.n	800dfc0 <floorf+0x6c>
 800dfba:	f7f2 fdb3 	bl	8000b24 <__addsf3>
 800dfbe:	4601      	mov	r1, r0
 800dfc0:	4608      	mov	r0, r1
 800dfc2:	bd70      	pop	{r4, r5, r6, pc}
 800dfc4:	2400      	movs	r4, #0
 800dfc6:	e7dd      	b.n	800df84 <floorf+0x30>
 800dfc8:	7149f2ca 	.word	0x7149f2ca
 800dfcc:	bf800000 	.word	0xbf800000
 800dfd0:	007fffff 	.word	0x007fffff

0800dfd4 <scalbnf>:
 800dfd4:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 800dfd8:	b510      	push	{r4, lr}
 800dfda:	4602      	mov	r2, r0
 800dfdc:	460c      	mov	r4, r1
 800dfde:	4601      	mov	r1, r0
 800dfe0:	d027      	beq.n	800e032 <scalbnf+0x5e>
 800dfe2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dfe6:	d303      	bcc.n	800dff0 <scalbnf+0x1c>
 800dfe8:	f7f2 fd9c 	bl	8000b24 <__addsf3>
 800dfec:	4602      	mov	r2, r0
 800dfee:	e020      	b.n	800e032 <scalbnf+0x5e>
 800dff0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800dff4:	d215      	bcs.n	800e022 <scalbnf+0x4e>
 800dff6:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800dffa:	f7f2 fe9b 	bl	8000d34 <__aeabi_fmul>
 800dffe:	4b18      	ldr	r3, [pc, #96]	; (800e060 <scalbnf+0x8c>)
 800e000:	4602      	mov	r2, r0
 800e002:	429c      	cmp	r4, r3
 800e004:	db22      	blt.n	800e04c <scalbnf+0x78>
 800e006:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800e00a:	3b19      	subs	r3, #25
 800e00c:	4423      	add	r3, r4
 800e00e:	2bfe      	cmp	r3, #254	; 0xfe
 800e010:	dd09      	ble.n	800e026 <scalbnf+0x52>
 800e012:	4611      	mov	r1, r2
 800e014:	4813      	ldr	r0, [pc, #76]	; (800e064 <scalbnf+0x90>)
 800e016:	f000 f832 	bl	800e07e <copysignf>
 800e01a:	4912      	ldr	r1, [pc, #72]	; (800e064 <scalbnf+0x90>)
 800e01c:	f7f2 fe8a 	bl	8000d34 <__aeabi_fmul>
 800e020:	e7e4      	b.n	800dfec <scalbnf+0x18>
 800e022:	0ddb      	lsrs	r3, r3, #23
 800e024:	e7f2      	b.n	800e00c <scalbnf+0x38>
 800e026:	2b00      	cmp	r3, #0
 800e028:	dd05      	ble.n	800e036 <scalbnf+0x62>
 800e02a:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800e02e:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 800e032:	4610      	mov	r0, r2
 800e034:	bd10      	pop	{r4, pc}
 800e036:	f113 0f16 	cmn.w	r3, #22
 800e03a:	da09      	bge.n	800e050 <scalbnf+0x7c>
 800e03c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e040:	429c      	cmp	r4, r3
 800e042:	4611      	mov	r1, r2
 800e044:	dce6      	bgt.n	800e014 <scalbnf+0x40>
 800e046:	4808      	ldr	r0, [pc, #32]	; (800e068 <scalbnf+0x94>)
 800e048:	f000 f819 	bl	800e07e <copysignf>
 800e04c:	4906      	ldr	r1, [pc, #24]	; (800e068 <scalbnf+0x94>)
 800e04e:	e7e5      	b.n	800e01c <scalbnf+0x48>
 800e050:	3319      	adds	r3, #25
 800e052:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800e056:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800e05a:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800e05e:	e7dd      	b.n	800e01c <scalbnf+0x48>
 800e060:	ffff3cb0 	.word	0xffff3cb0
 800e064:	7149f2ca 	.word	0x7149f2ca
 800e068:	0da24260 	.word	0x0da24260

0800e06c <copysign>:
 800e06c:	b530      	push	{r4, r5, lr}
 800e06e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800e072:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e076:	ea42 0503 	orr.w	r5, r2, r3
 800e07a:	4629      	mov	r1, r5
 800e07c:	bd30      	pop	{r4, r5, pc}

0800e07e <copysignf>:
 800e07e:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800e082:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e086:	4308      	orrs	r0, r1
 800e088:	4770      	bx	lr
	...

0800e08c <_init>:
 800e08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e08e:	bf00      	nop
 800e090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e092:	bc08      	pop	{r3}
 800e094:	469e      	mov	lr, r3
 800e096:	4770      	bx	lr

0800e098 <_fini>:
 800e098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e09a:	bf00      	nop
 800e09c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e09e:	bc08      	pop	{r3}
 800e0a0:	469e      	mov	lr, r3
 800e0a2:	4770      	bx	lr
