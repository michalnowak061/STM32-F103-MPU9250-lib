
STM32_Nucleo_F103RB_MPU9250.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008308  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08008418  08008418  00018418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008588  08008588  0002007c  2**0
                  CONTENTS
  4 .ARM          00000000  08008588  08008588  0002007c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008588  08008588  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008588  08008588  00018588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800858c  0800858c  0001858c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08008590  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003560  2000007c  0800860c  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200035dc  0800860c  000235dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013902  00000000  00000000  000200a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000030e9  00000000  00000000  000339a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f30  00000000  00000000  00036a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db8  00000000  00000000  000379c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000159dd  00000000  00000000  00038778  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ea75  00000000  00000000  0004e155  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077a06  00000000  00000000  0005cbca  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d45d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000422c  00000000  00000000  000d464c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000007c 	.word	0x2000007c
 800012c:	00000000 	.word	0x00000000
 8000130:	08008400 	.word	0x08008400

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000080 	.word	0x20000080
 800014c:	08008400 	.word	0x08008400

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ba8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bac:	d1ed      	bne.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_f2iz>:
 8000fa8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fb0:	d30f      	bcc.n	8000fd2 <__aeabi_f2iz+0x2a>
 8000fb2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fb6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fba:	d90d      	bls.n	8000fd8 <__aeabi_f2iz+0x30>
 8000fbc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fc4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fc8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fcc:	bf18      	it	ne
 8000fce:	4240      	negne	r0, r0
 8000fd0:	4770      	bx	lr
 8000fd2:	f04f 0000 	mov.w	r0, #0
 8000fd6:	4770      	bx	lr
 8000fd8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fdc:	d101      	bne.n	8000fe2 <__aeabi_f2iz+0x3a>
 8000fde:	0242      	lsls	r2, r0, #9
 8000fe0:	d105      	bne.n	8000fee <__aeabi_f2iz+0x46>
 8000fe2:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fe6:	bf08      	it	eq
 8000fe8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fec:	4770      	bx	lr
 8000fee:	f04f 0000 	mov.w	r0, #0
 8000ff2:	4770      	bx	lr

08000ff4 <__aeabi_f2uiz>:
 8000ff4:	0042      	lsls	r2, r0, #1
 8000ff6:	d20e      	bcs.n	8001016 <__aeabi_f2uiz+0x22>
 8000ff8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000ffc:	d30b      	bcc.n	8001016 <__aeabi_f2uiz+0x22>
 8000ffe:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001002:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001006:	d409      	bmi.n	800101c <__aeabi_f2uiz+0x28>
 8001008:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800100c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001010:	fa23 f002 	lsr.w	r0, r3, r2
 8001014:	4770      	bx	lr
 8001016:	f04f 0000 	mov.w	r0, #0
 800101a:	4770      	bx	lr
 800101c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001020:	d101      	bne.n	8001026 <__aeabi_f2uiz+0x32>
 8001022:	0242      	lsls	r2, r0, #9
 8001024:	d102      	bne.n	800102c <__aeabi_f2uiz+0x38>
 8001026:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800102a:	4770      	bx	lr
 800102c:	f04f 0000 	mov.w	r0, #0
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <CRC8_SingleByte>:
 *      Author: mnowak5
 */

#include "crc.h"

byte CRC8_SingleByte(byte CRC_prev, byte Data) {
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	460a      	mov	r2, r1
 800103e:	71fb      	strb	r3, [r7, #7]
 8001040:	4613      	mov	r3, r2
 8001042:	71bb      	strb	r3, [r7, #6]

	CRC_prev ^= Data;
 8001044:	79fa      	ldrb	r2, [r7, #7]
 8001046:	79bb      	ldrb	r3, [r7, #6]
 8001048:	4053      	eors	r3, r2
 800104a:	71fb      	strb	r3, [r7, #7]

	for(byte Idx = 0; Idx < 8; ++Idx) {
 800104c:	2300      	movs	r3, #0
 800104e:	73fb      	strb	r3, [r7, #15]
 8001050:	e011      	b.n	8001076 <CRC8_SingleByte+0x42>

		if( (CRC_prev & 0x80) != 0 ) {
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	2b00      	cmp	r3, #0
 8001058:	da07      	bge.n	800106a <CRC8_SingleByte+0x36>

			CRC_prev = (byte)( (CRC_prev << 1) ^ POLYNOMIAL_9 );
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	b25b      	sxtb	r3, r3
 8001060:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8001064:	b25b      	sxtb	r3, r3
 8001066:	71fb      	strb	r3, [r7, #7]
 8001068:	e002      	b.n	8001070 <CRC8_SingleByte+0x3c>
		} else {

			CRC_prev = (byte)(CRC_prev << 1);
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	71fb      	strb	r3, [r7, #7]
	for(byte Idx = 0; Idx < 8; ++Idx) {
 8001070:	7bfb      	ldrb	r3, [r7, #15]
 8001072:	3301      	adds	r3, #1
 8001074:	73fb      	strb	r3, [r7, #15]
 8001076:	7bfb      	ldrb	r3, [r7, #15]
 8001078:	2b07      	cmp	r3, #7
 800107a:	d9ea      	bls.n	8001052 <CRC8_SingleByte+0x1e>
		}
	}

	return CRC_prev;
 800107c:	79fb      	ldrb	r3, [r7, #7]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <CRC8_DataArray>:

byte CRC8_DataArray(byte *pData, byte Len) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	70fb      	strb	r3, [r7, #3]

	byte CRC_final = 0xFF;
 8001094:	23ff      	movs	r3, #255	; 0xff
 8001096:	73fb      	strb	r3, [r7, #15]

	for(byte Idx = 0; Idx < Len; ++Idx) {
 8001098:	2300      	movs	r3, #0
 800109a:	73bb      	strb	r3, [r7, #14]
 800109c:	e00d      	b.n	80010ba <CRC8_DataArray+0x32>

		CRC_final = CRC8_SingleByte(CRC_final, pData[Idx]);
 800109e:	7bbb      	ldrb	r3, [r7, #14]
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	4413      	add	r3, r2
 80010a4:	781a      	ldrb	r2, [r3, #0]
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	4611      	mov	r1, r2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f7ff ffc2 	bl	8001034 <CRC8_SingleByte>
 80010b0:	4603      	mov	r3, r0
 80010b2:	73fb      	strb	r3, [r7, #15]
	for(byte Idx = 0; Idx < Len; ++Idx) {
 80010b4:	7bbb      	ldrb	r3, [r7, #14]
 80010b6:	3301      	adds	r3, #1
 80010b8:	73bb      	strb	r3, [r7, #14]
 80010ba:	7bba      	ldrb	r2, [r7, #14]
 80010bc:	78fb      	ldrb	r3, [r7, #3]
 80010be:	429a      	cmp	r2, r3
 80010c0:	d3ed      	bcc.n	800109e <CRC8_DataArray+0x16>
	}

	return CRC_final;
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3710      	adds	r7, #16
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010d2:	4b18      	ldr	r3, [pc, #96]	; (8001134 <MX_DMA_Init+0x68>)
 80010d4:	695b      	ldr	r3, [r3, #20]
 80010d6:	4a17      	ldr	r2, [pc, #92]	; (8001134 <MX_DMA_Init+0x68>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	6153      	str	r3, [r2, #20]
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <MX_DMA_Init+0x68>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	f003 0301 	and.w	r3, r3, #1
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2105      	movs	r1, #5
 80010ee:	200e      	movs	r0, #14
 80010f0:	f002 fc47 	bl	8003982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80010f4:	200e      	movs	r0, #14
 80010f6:	f002 fc60 	bl	80039ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 80010fa:	2200      	movs	r2, #0
 80010fc:	2105      	movs	r1, #5
 80010fe:	200f      	movs	r0, #15
 8001100:	f002 fc3f 	bl	8003982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001104:	200f      	movs	r0, #15
 8001106:	f002 fc58 	bl	80039ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2105      	movs	r1, #5
 800110e:	2010      	movs	r0, #16
 8001110:	f002 fc37 	bl	8003982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001114:	2010      	movs	r0, #16
 8001116:	f002 fc50 	bl	80039ba <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2105      	movs	r1, #5
 800111e:	2011      	movs	r0, #17
 8001120:	f002 fc2f 	bl	8003982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001124:	2011      	movs	r0, #17
 8001126:	f002 fc48 	bl	80039ba <HAL_NVIC_EnableIRQ>

}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000

08001138 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	4a06      	ldr	r2, [pc, #24]	; (8001160 <vApplicationGetIdleTaskMemory+0x28>)
 8001148:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	4a05      	ldr	r2, [pc, #20]	; (8001164 <vApplicationGetIdleTaskMemory+0x2c>)
 800114e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2280      	movs	r2, #128	; 0x80
 8001154:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8001156:	bf00      	nop
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	bc80      	pop	{r7}
 800115e:	4770      	bx	lr
 8001160:	20000110 	.word	0x20000110
 8001164:	20000164 	.word	0x20000164

08001168 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001168:	b5b0      	push	{r4, r5, r7, lr}
 800116a:	b08e      	sub	sp, #56	; 0x38
 800116c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of USART_Task */
  osThreadDef(USART_Task, Start_USART_Task, osPriorityNormal, 0, 512);
 800116e:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <MX_FREERTOS_Init+0x58>)
 8001170:	f107 041c 	add.w	r4, r7, #28
 8001174:	461d      	mov	r5, r3
 8001176:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001178:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800117a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800117e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USART_TaskHandle = osThreadCreate(osThread(USART_Task), NULL);
 8001182:	f107 031c 	add.w	r3, r7, #28
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f005 fb39 	bl	8006800 <osThreadCreate>
 800118e:	4602      	mov	r2, r0
 8001190:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <MX_FREERTOS_Init+0x5c>)
 8001192:	601a      	str	r2, [r3, #0]

  /* definition and creation of IMU_Task */
  osThreadDef(IMU_Task, Start_IMU_Task, osPriorityRealtime, 0, 512);
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_FREERTOS_Init+0x60>)
 8001196:	463c      	mov	r4, r7
 8001198:	461d      	mov	r5, r3
 800119a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800119c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800119e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80011a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IMU_TaskHandle = osThreadCreate(osThread(IMU_Task), NULL);
 80011a6:	463b      	mov	r3, r7
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f005 fb28 	bl	8006800 <osThreadCreate>
 80011b0:	4602      	mov	r2, r0
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_FREERTOS_Init+0x64>)
 80011b4:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80011b6:	bf00      	nop
 80011b8:	3738      	adds	r7, #56	; 0x38
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bdb0      	pop	{r4, r5, r7, pc}
 80011be:	bf00      	nop
 80011c0:	08008424 	.word	0x08008424
 80011c4:	200033b0 	.word	0x200033b0
 80011c8:	0800844c 	.word	0x0800844c
 80011cc:	200033ac 	.word	0x200033ac

080011d0 <Start_USART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USART_Task */
void Start_USART_Task(void const * argument)
{
 80011d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011d4:	b0b3      	sub	sp, #204	; 0xcc
 80011d6:	af16      	add	r7, sp, #88	; 0x58
 80011d8:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN Start_USART_Task */

	/* Start receiving */
	HAL_UART_Receive_DMA(HC05_handle, Data_from_PC, DATA_FRAME_FROM_PC_SIZE);
 80011da:	4bb9      	ldr	r3, [pc, #740]	; (80014c0 <Start_USART_Task+0x2f0>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	220a      	movs	r2, #10
 80011e0:	49b8      	ldr	r1, [pc, #736]	; (80014c4 <Start_USART_Task+0x2f4>)
 80011e2:	4618      	mov	r0, r3
 80011e4:	f004 fe32 	bl	8005e4c <HAL_UART_Receive_DMA>

	/* Infinite loop */
	for (;;) {

		HC05_Fill_Data_frame_to_PC(&DT_PC, Data_to_PC,
 80011e8:	4bb7      	ldr	r3, [pc, #732]	; (80014c8 <Start_USART_Task+0x2f8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f913 	bl	8000418 <__aeabi_f2d>
 80011f2:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80011f6:	4bb5      	ldr	r3, [pc, #724]	; (80014cc <Start_USART_Task+0x2fc>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f90c 	bl	8000418 <__aeabi_f2d>
 8001200:	4680      	mov	r8, r0
 8001202:	4689      	mov	r9, r1
 8001204:	4bb2      	ldr	r3, [pc, #712]	; (80014d0 <Start_USART_Task+0x300>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f905 	bl	8000418 <__aeabi_f2d>
 800120e:	4682      	mov	sl, r0
 8001210:	468b      	mov	fp, r1
 8001212:	4bb0      	ldr	r3, [pc, #704]	; (80014d4 <Start_USART_Task+0x304>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f8fe 	bl	8000418 <__aeabi_f2d>
 800121c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001220:	4bad      	ldr	r3, [pc, #692]	; (80014d8 <Start_USART_Task+0x308>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff f8f7 	bl	8000418 <__aeabi_f2d>
 800122a:	e9c7 0100 	strd	r0, r1, [r7]
 800122e:	4bab      	ldr	r3, [pc, #684]	; (80014dc <Start_USART_Task+0x30c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f8f0 	bl	8000418 <__aeabi_f2d>
 8001238:	4605      	mov	r5, r0
 800123a:	460e      	mov	r6, r1
 800123c:	4ba8      	ldr	r3, [pc, #672]	; (80014e0 <Start_USART_Task+0x310>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f8e9 	bl	8000418 <__aeabi_f2d>
 8001246:	4603      	mov	r3, r0
 8001248:	460c      	mov	r4, r1
 800124a:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
 800124e:	e9cd 5612 	strd	r5, r6, [sp, #72]	; 0x48
 8001252:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001256:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800125a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800125e:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
 8001262:	f04f 0300 	mov.w	r3, #0
 8001266:	f04f 0400 	mov.w	r4, #0
 800126a:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800126e:	f04f 0300 	mov.w	r3, #0
 8001272:	f04f 0400 	mov.w	r4, #0
 8001276:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800127a:	f04f 0300 	mov.w	r3, #0
 800127e:	f04f 0400 	mov.w	r4, #0
 8001282:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8001286:	f04f 0300 	mov.w	r3, #0
 800128a:	f04f 0400 	mov.w	r4, #0
 800128e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8001292:	f04f 0300 	mov.w	r3, #0
 8001296:	f04f 0400 	mov.w	r4, #0
 800129a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800129e:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80012a2:	e9cd 8900 	strd	r8, r9, [sp]
 80012a6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80012aa:	498e      	ldr	r1, [pc, #568]	; (80014e4 <Start_USART_Task+0x314>)
 80012ac:	488e      	ldr	r0, [pc, #568]	; (80014e8 <Start_USART_Task+0x318>)
 80012ae:	f000 fc0b 	bl	8001ac8 <HC05_Fill_Data_frame_to_PC>
									a_position_x, a_position_y, a_position_z, 0,
									0, 0, 0, 0,
									/*a_position_x, a_position_y, a_position_z, 0*/
									Madgwick_q_w, Madgwick_q_x, Madgwick_q_y, Madgwick_q_z);

		HAL_UART_Transmit_DMA(HC05_handle, Data_to_PC, DATA_FRAME_TO_PC_SIZE);
 80012b2:	4b83      	ldr	r3, [pc, #524]	; (80014c0 <Start_USART_Task+0x2f0>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	221b      	movs	r2, #27
 80012b8:	498a      	ldr	r1, [pc, #552]	; (80014e4 <Start_USART_Task+0x314>)
 80012ba:	4618      	mov	r0, r3
 80012bc:	f004 fd5a 	bl	8005d74 <HAL_UART_Transmit_DMA>

		uint16_t cnt[10];
		uint8_t  data[50];
		uint16_t size = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

		cnt[0] = (uint16_t)(a_wihout_g_x * 1000);
 80012c6:	4b89      	ldr	r3, [pc, #548]	; (80014ec <Start_USART_Task+0x31c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4989      	ldr	r1, [pc, #548]	; (80014f0 <Start_USART_Task+0x320>)
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fd1b 	bl	8000d08 <__aeabi_fmul>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fe8d 	bl	8000ff4 <__aeabi_f2uiz>
 80012da:	4603      	mov	r3, r0
 80012dc:	b29b      	uxth	r3, r3
 80012de:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
		cnt[1] = (uint16_t)(a_wihout_g_y * 1000);
 80012e2:	4b84      	ldr	r3, [pc, #528]	; (80014f4 <Start_USART_Task+0x324>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4982      	ldr	r1, [pc, #520]	; (80014f0 <Start_USART_Task+0x320>)
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff fd0d 	bl	8000d08 <__aeabi_fmul>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff fe7f 	bl	8000ff4 <__aeabi_f2uiz>
 80012f6:	4603      	mov	r3, r0
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
		cnt[2] = (uint16_t)(a_wihout_g_z * 1000);
 80012fe:	4b7e      	ldr	r3, [pc, #504]	; (80014f8 <Start_USART_Task+0x328>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	497b      	ldr	r1, [pc, #492]	; (80014f0 <Start_USART_Task+0x320>)
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fcff 	bl	8000d08 <__aeabi_fmul>
 800130a:	4603      	mov	r3, r0
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fe71 	bl	8000ff4 <__aeabi_f2uiz>
 8001312:	4603      	mov	r3, r0
 8001314:	b29b      	uxth	r3, r3
 8001316:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

		cnt[3] = (uint16_t)(a_velocity_x * 1000);
 800131a:	4b78      	ldr	r3, [pc, #480]	; (80014fc <Start_USART_Task+0x32c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4974      	ldr	r1, [pc, #464]	; (80014f0 <Start_USART_Task+0x320>)
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff fcf1 	bl	8000d08 <__aeabi_fmul>
 8001326:	4603      	mov	r3, r0
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff fe63 	bl	8000ff4 <__aeabi_f2uiz>
 800132e:	4603      	mov	r3, r0
 8001330:	b29b      	uxth	r3, r3
 8001332:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
		cnt[4] = (uint16_t)(a_velocity_y * 1000);
 8001336:	4b72      	ldr	r3, [pc, #456]	; (8001500 <Start_USART_Task+0x330>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	496d      	ldr	r1, [pc, #436]	; (80014f0 <Start_USART_Task+0x320>)
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff fce3 	bl	8000d08 <__aeabi_fmul>
 8001342:	4603      	mov	r3, r0
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fe55 	bl	8000ff4 <__aeabi_f2uiz>
 800134a:	4603      	mov	r3, r0
 800134c:	b29b      	uxth	r3, r3
 800134e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
		cnt[5] = (uint16_t)(a_velocity_z * 1000);
 8001352:	4b6c      	ldr	r3, [pc, #432]	; (8001504 <Start_USART_Task+0x334>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4966      	ldr	r1, [pc, #408]	; (80014f0 <Start_USART_Task+0x320>)
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fcd5 	bl	8000d08 <__aeabi_fmul>
 800135e:	4603      	mov	r3, r0
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fe47 	bl	8000ff4 <__aeabi_f2uiz>
 8001366:	4603      	mov	r3, r0
 8001368:	b29b      	uxth	r3, r3
 800136a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

		cnt[6] = (uint16_t)(a_position_x * 1000);
 800136e:	4b56      	ldr	r3, [pc, #344]	; (80014c8 <Start_USART_Task+0x2f8>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	495f      	ldr	r1, [pc, #380]	; (80014f0 <Start_USART_Task+0x320>)
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff fcc7 	bl	8000d08 <__aeabi_fmul>
 800137a:	4603      	mov	r3, r0
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fe39 	bl	8000ff4 <__aeabi_f2uiz>
 8001382:	4603      	mov	r3, r0
 8001384:	b29b      	uxth	r3, r3
 8001386:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
		cnt[7] = (uint16_t)(a_position_y * 1000);
 800138a:	4b50      	ldr	r3, [pc, #320]	; (80014cc <Start_USART_Task+0x2fc>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4958      	ldr	r1, [pc, #352]	; (80014f0 <Start_USART_Task+0x320>)
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff fcb9 	bl	8000d08 <__aeabi_fmul>
 8001396:	4603      	mov	r3, r0
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff fe2b 	bl	8000ff4 <__aeabi_f2uiz>
 800139e:	4603      	mov	r3, r0
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
		cnt[8] = (uint16_t)(a_position_z * 1000);
 80013a6:	4b4a      	ldr	r3, [pc, #296]	; (80014d0 <Start_USART_Task+0x300>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4951      	ldr	r1, [pc, #324]	; (80014f0 <Start_USART_Task+0x320>)
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fcab 	bl	8000d08 <__aeabi_fmul>
 80013b2:	4603      	mov	r3, r0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fe1d 	bl	8000ff4 <__aeabi_f2uiz>
 80013ba:	4603      	mov	r3, r0
 80013bc:	b29b      	uxth	r3, r3
 80013be:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68


		size = sprintf(data, "a_wihout_g_x: %d \n\r", cnt[0]);
 80013c2:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80013c6:	461a      	mov	r2, r3
 80013c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013cc:	494e      	ldr	r1, [pc, #312]	; (8001508 <Start_USART_Task+0x338>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f006 fc0e 	bl	8007bf0 <siprintf>
 80013d4:	4603      	mov	r3, r0
 80013d6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		HAL_UART_Transmit(&huart2, data, size, 10);
 80013da:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80013de:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80013e2:	230a      	movs	r3, #10
 80013e4:	4849      	ldr	r0, [pc, #292]	; (800150c <Start_USART_Task+0x33c>)
 80013e6:	f004 fc2c 	bl	8005c42 <HAL_UART_Transmit>
		size = sprintf(data, "a_wihout_g_y: %d \n\r", cnt[1]);
 80013ea:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80013ee:	461a      	mov	r2, r3
 80013f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013f4:	4946      	ldr	r1, [pc, #280]	; (8001510 <Start_USART_Task+0x340>)
 80013f6:	4618      	mov	r0, r3
 80013f8:	f006 fbfa 	bl	8007bf0 <siprintf>
 80013fc:	4603      	mov	r3, r0
 80013fe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		HAL_UART_Transmit(&huart2, data, size, 10);
 8001402:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001406:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800140a:	230a      	movs	r3, #10
 800140c:	483f      	ldr	r0, [pc, #252]	; (800150c <Start_USART_Task+0x33c>)
 800140e:	f004 fc18 	bl	8005c42 <HAL_UART_Transmit>
		size = sprintf(data, "a_wihout_g_z: %d \n\r", cnt[2]);
 8001412:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8001416:	461a      	mov	r2, r3
 8001418:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800141c:	493d      	ldr	r1, [pc, #244]	; (8001514 <Start_USART_Task+0x344>)
 800141e:	4618      	mov	r0, r3
 8001420:	f006 fbe6 	bl	8007bf0 <siprintf>
 8001424:	4603      	mov	r3, r0
 8001426:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		HAL_UART_Transmit(&huart2, data, size, 10);
 800142a:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 800142e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001432:	230a      	movs	r3, #10
 8001434:	4835      	ldr	r0, [pc, #212]	; (800150c <Start_USART_Task+0x33c>)
 8001436:	f004 fc04 	bl	8005c42 <HAL_UART_Transmit>

		size = sprintf(data, "a_velocity_x: %d \n\r", cnt[3]);
 800143a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800143e:	461a      	mov	r2, r3
 8001440:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001444:	4934      	ldr	r1, [pc, #208]	; (8001518 <Start_USART_Task+0x348>)
 8001446:	4618      	mov	r0, r3
 8001448:	f006 fbd2 	bl	8007bf0 <siprintf>
 800144c:	4603      	mov	r3, r0
 800144e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		HAL_UART_Transmit(&huart2, data, size, 10);
 8001452:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001456:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800145a:	230a      	movs	r3, #10
 800145c:	482b      	ldr	r0, [pc, #172]	; (800150c <Start_USART_Task+0x33c>)
 800145e:	f004 fbf0 	bl	8005c42 <HAL_UART_Transmit>
		size = sprintf(data, "a_velocity_y: %d \n\r", cnt[4]);
 8001462:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001466:	461a      	mov	r2, r3
 8001468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146c:	492b      	ldr	r1, [pc, #172]	; (800151c <Start_USART_Task+0x34c>)
 800146e:	4618      	mov	r0, r3
 8001470:	f006 fbbe 	bl	8007bf0 <siprintf>
 8001474:	4603      	mov	r3, r0
 8001476:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		HAL_UART_Transmit(&huart2, data, size, 10);
 800147a:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 800147e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001482:	230a      	movs	r3, #10
 8001484:	4821      	ldr	r0, [pc, #132]	; (800150c <Start_USART_Task+0x33c>)
 8001486:	f004 fbdc 	bl	8005c42 <HAL_UART_Transmit>
		size = sprintf(data, "a_velocity_z: %d \n\r", cnt[5]);
 800148a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800148e:	461a      	mov	r2, r3
 8001490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001494:	4922      	ldr	r1, [pc, #136]	; (8001520 <Start_USART_Task+0x350>)
 8001496:	4618      	mov	r0, r3
 8001498:	f006 fbaa 	bl	8007bf0 <siprintf>
 800149c:	4603      	mov	r3, r0
 800149e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		HAL_UART_Transmit(&huart2, data, size, 10);
 80014a2:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80014a6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80014aa:	230a      	movs	r3, #10
 80014ac:	4817      	ldr	r0, [pc, #92]	; (800150c <Start_USART_Task+0x33c>)
 80014ae:	f004 fbc8 	bl	8005c42 <HAL_UART_Transmit>

		size = sprintf(data, "a_position_x: %d \n\r", cnt[6]);
 80014b2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80014b6:	461a      	mov	r2, r3
 80014b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014bc:	e032      	b.n	8001524 <Start_USART_Task+0x354>
 80014be:	bf00      	nop
 80014c0:	20000004 	.word	0x20000004
 80014c4:	200033b4 	.word	0x200033b4
 80014c8:	200000f0 	.word	0x200000f0
 80014cc:	200000f4 	.word	0x200000f4
 80014d0:	200000f8 	.word	0x200000f8
 80014d4:	20000000 	.word	0x20000000
 80014d8:	200000fc 	.word	0x200000fc
 80014dc:	20000100 	.word	0x20000100
 80014e0:	20000104 	.word	0x20000104
 80014e4:	200033c0 	.word	0x200033c0
 80014e8:	200033dc 	.word	0x200033dc
 80014ec:	200000d8 	.word	0x200000d8
 80014f0:	447a0000 	.word	0x447a0000
 80014f4:	200000dc 	.word	0x200000dc
 80014f8:	200000e0 	.word	0x200000e0
 80014fc:	200000e4 	.word	0x200000e4
 8001500:	200000e8 	.word	0x200000e8
 8001504:	200000ec 	.word	0x200000ec
 8001508:	08008468 	.word	0x08008468
 800150c:	20003594 	.word	0x20003594
 8001510:	0800847c 	.word	0x0800847c
 8001514:	08008490 	.word	0x08008490
 8001518:	080084a4 	.word	0x080084a4
 800151c:	080084b8 	.word	0x080084b8
 8001520:	080084cc 	.word	0x080084cc
 8001524:	4927      	ldr	r1, [pc, #156]	; (80015c4 <Start_USART_Task+0x3f4>)
 8001526:	4618      	mov	r0, r3
 8001528:	f006 fb62 	bl	8007bf0 <siprintf>
 800152c:	4603      	mov	r3, r0
 800152e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		HAL_UART_Transmit(&huart2, data, size, 10);
 8001532:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001536:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800153a:	230a      	movs	r3, #10
 800153c:	4822      	ldr	r0, [pc, #136]	; (80015c8 <Start_USART_Task+0x3f8>)
 800153e:	f004 fb80 	bl	8005c42 <HAL_UART_Transmit>
		size = sprintf(data, "a_position_y: %d \n\r", cnt[7]);
 8001542:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8001546:	461a      	mov	r2, r3
 8001548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154c:	491f      	ldr	r1, [pc, #124]	; (80015cc <Start_USART_Task+0x3fc>)
 800154e:	4618      	mov	r0, r3
 8001550:	f006 fb4e 	bl	8007bf0 <siprintf>
 8001554:	4603      	mov	r3, r0
 8001556:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		HAL_UART_Transmit(&huart2, data, size, 10);
 800155a:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 800155e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001562:	230a      	movs	r3, #10
 8001564:	4818      	ldr	r0, [pc, #96]	; (80015c8 <Start_USART_Task+0x3f8>)
 8001566:	f004 fb6c 	bl	8005c42 <HAL_UART_Transmit>
		size = sprintf(data, "a_position_z: %d \n\r", cnt[8]);
 800156a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 800156e:	461a      	mov	r2, r3
 8001570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001574:	4916      	ldr	r1, [pc, #88]	; (80015d0 <Start_USART_Task+0x400>)
 8001576:	4618      	mov	r0, r3
 8001578:	f006 fb3a 	bl	8007bf0 <siprintf>
 800157c:	4603      	mov	r3, r0
 800157e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		HAL_UART_Transmit(&huart2, data, size, 10);
 8001582:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8001586:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800158a:	230a      	movs	r3, #10
 800158c:	480e      	ldr	r0, [pc, #56]	; (80015c8 <Start_USART_Task+0x3f8>)
 800158e:	f004 fb58 	bl	8005c42 <HAL_UART_Transmit>

		size = sprintf(data, "\n\r", cnt[9]);
 8001592:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001596:	461a      	mov	r2, r3
 8001598:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800159c:	490d      	ldr	r1, [pc, #52]	; (80015d4 <Start_USART_Task+0x404>)
 800159e:	4618      	mov	r0, r3
 80015a0:	f006 fb26 	bl	8007bf0 <siprintf>
 80015a4:	4603      	mov	r3, r0
 80015a6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
		HAL_UART_Transmit(&huart2, data, size, 10);
 80015aa:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80015ae:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80015b2:	230a      	movs	r3, #10
 80015b4:	4804      	ldr	r0, [pc, #16]	; (80015c8 <Start_USART_Task+0x3f8>)
 80015b6:	f004 fb44 	bl	8005c42 <HAL_UART_Transmit>

		osDelay(10);
 80015ba:	200a      	movs	r0, #10
 80015bc:	f005 f96c 	bl	8006898 <osDelay>
	for (;;) {
 80015c0:	e612      	b.n	80011e8 <Start_USART_Task+0x18>
 80015c2:	bf00      	nop
 80015c4:	080084e0 	.word	0x080084e0
 80015c8:	20003594 	.word	0x20003594
 80015cc:	080084f4 	.word	0x080084f4
 80015d0:	08008508 	.word	0x08008508
 80015d4:	0800851c 	.word	0x0800851c

080015d8 <Start_IMU_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_IMU_Task */
void Start_IMU_Task(void const * argument)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b0d0      	sub	sp, #320	; 0x140
 80015dc:	af0a      	add	r7, sp, #40	; 0x28
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_IMU_Task */

	/* IMU task variables */
	uint8_t mpu9250_correct_init_global = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	struct MPU9250 mpu1;

	uint32_t I_Time_Stop = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	uint32_t I_Time_Start = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

	/* IMU task initialization */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80015f4:	2120      	movs	r1, #32
 80015f6:	489f      	ldr	r0, [pc, #636]	; (8001874 <Start_IMU_Task+0x29c>)
 80015f8:	f002 fdd0 	bl	800419c <HAL_GPIO_TogglePin>
	osDelay(100);
 80015fc:	2064      	movs	r0, #100	; 0x64
 80015fe:	f005 f94b 	bl	8006898 <osDelay>

	if (MPU9250_Init(&hi2c1, &mpu1, MPU9250_Device_1, MPU9250_Acce_2G, MPU9250_Gyro_2000s) == MPU9250_Init_OK) {
 8001602:	f107 010c 	add.w	r1, r7, #12
 8001606:	2303      	movs	r3, #3
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	2300      	movs	r3, #0
 800160c:	2200      	movs	r2, #0
 800160e:	489a      	ldr	r0, [pc, #616]	; (8001878 <Start_IMU_Task+0x2a0>)
 8001610:	f001 f842 	bl	8002698 <MPU9250_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	f040 8092 	bne.w	8001740 <Start_IMU_Task+0x168>

		MPU9250_Set_Offsets(&hi2c1, &mpu1, 0,0,0, 0,0,0, -26.536,0.992,0.968, 1.04,1,1);
 800161c:	f107 010c 	add.w	r1, r7, #12
 8001620:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001624:	9309      	str	r3, [sp, #36]	; 0x24
 8001626:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800162a:	9308      	str	r3, [sp, #32]
 800162c:	4b93      	ldr	r3, [pc, #588]	; (800187c <Start_IMU_Task+0x2a4>)
 800162e:	9307      	str	r3, [sp, #28]
 8001630:	4b93      	ldr	r3, [pc, #588]	; (8001880 <Start_IMU_Task+0x2a8>)
 8001632:	9306      	str	r3, [sp, #24]
 8001634:	4b93      	ldr	r3, [pc, #588]	; (8001884 <Start_IMU_Task+0x2ac>)
 8001636:	9305      	str	r3, [sp, #20]
 8001638:	4b93      	ldr	r3, [pc, #588]	; (8001888 <Start_IMU_Task+0x2b0>)
 800163a:	9304      	str	r3, [sp, #16]
 800163c:	f04f 0300 	mov.w	r3, #0
 8001640:	9303      	str	r3, [sp, #12]
 8001642:	f04f 0300 	mov.w	r3, #0
 8001646:	9302      	str	r3, [sp, #8]
 8001648:	f04f 0300 	mov.w	r3, #0
 800164c:	9301      	str	r3, [sp, #4]
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	f04f 0300 	mov.w	r3, #0
 8001658:	f04f 0200 	mov.w	r2, #0
 800165c:	4886      	ldr	r0, [pc, #536]	; (8001878 <Start_IMU_Task+0x2a0>)
 800165e:	f001 fbeb 	bl	8002e38 <MPU9250_Set_Offsets>


		MPU9250_Calibration_Acce(&hi2c1, &mpu1);
 8001662:	f107 030c 	add.w	r3, r7, #12
 8001666:	4619      	mov	r1, r3
 8001668:	4883      	ldr	r0, [pc, #524]	; (8001878 <Start_IMU_Task+0x2a0>)
 800166a:	f001 fb11 	bl	8002c90 <MPU9250_Calibration_Acce>
		MPU9250_Calibration_Gyro(&hi2c1, &mpu1);
 800166e:	f107 030c 	add.w	r3, r7, #12
 8001672:	4619      	mov	r1, r3
 8001674:	4880      	ldr	r0, [pc, #512]	; (8001878 <Start_IMU_Task+0x2a0>)
 8001676:	f001 fb7d 	bl	8002d74 <MPU9250_Calibration_Gyro>
		//MPU9250_Calibration_Mag(&hi2c1, &mpu1);

		a_x_offset_global = mpu1.Accelerometer_X_offset, a_y_offset_global = mpu1.Accelerometer_Y_offset, a_z_offset_global = mpu1.Accelerometer_Z_offset;
 800167a:	f107 030c 	add.w	r3, r7, #12
 800167e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001680:	4a82      	ldr	r2, [pc, #520]	; (800188c <Start_IMU_Task+0x2b4>)
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a81      	ldr	r2, [pc, #516]	; (8001890 <Start_IMU_Task+0x2b8>)
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001694:	4a7f      	ldr	r2, [pc, #508]	; (8001894 <Start_IMU_Task+0x2bc>)
 8001696:	6013      	str	r3, [r2, #0]
		g_x_offset_global = mpu1.Gyroscope_X_offset, g_y_offset_global = mpu1.Gyroscope_Y_offset, g_z_offset_global = mpu1.Gyroscope_Z_offset;
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	4a7e      	ldr	r2, [pc, #504]	; (8001898 <Start_IMU_Task+0x2c0>)
 80016a0:	6013      	str	r3, [r2, #0]
 80016a2:	f107 030c 	add.w	r3, r7, #12
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	4a7c      	ldr	r2, [pc, #496]	; (800189c <Start_IMU_Task+0x2c4>)
 80016aa:	6013      	str	r3, [r2, #0]
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	695b      	ldr	r3, [r3, #20]
 80016b2:	4a7b      	ldr	r2, [pc, #492]	; (80018a0 <Start_IMU_Task+0x2c8>)
 80016b4:	6013      	str	r3, [r2, #0]
		m_x_offset_global = mpu1.Magnetometer_X_offset, m_y_offset_global = mpu1.Magnetometer_Y_offset, m_z_offset_global = mpu1.Magnetometer_Z_offset;
 80016b6:	f107 030c 	add.w	r3, r7, #12
 80016ba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80016be:	4a79      	ldr	r2, [pc, #484]	; (80018a4 <Start_IMU_Task+0x2cc>)
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	f107 030c 	add.w	r3, r7, #12
 80016c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80016ca:	4a77      	ldr	r2, [pc, #476]	; (80018a8 <Start_IMU_Task+0x2d0>)
 80016cc:	6013      	str	r3, [r2, #0]
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80016d6:	4a75      	ldr	r2, [pc, #468]	; (80018ac <Start_IMU_Task+0x2d4>)
 80016d8:	6013      	str	r3, [r2, #0]
		m_x_scale_global = mpu1.Magnetometer_X_scale, m_y_offset_global = mpu1.Magnetometer_Y_scale, m_z_offset_global = mpu1.Magnetometer_Z_scale;
 80016da:	f107 030c 	add.w	r3, r7, #12
 80016de:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80016e2:	4a73      	ldr	r2, [pc, #460]	; (80018b0 <Start_IMU_Task+0x2d8>)
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	f107 030c 	add.w	r3, r7, #12
 80016ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80016ee:	4a6e      	ldr	r2, [pc, #440]	; (80018a8 <Start_IMU_Task+0x2d0>)
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	f107 030c 	add.w	r3, r7, #12
 80016f6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80016fa:	4a6c      	ldr	r2, [pc, #432]	; (80018ac <Start_IMU_Task+0x2d4>)
 80016fc:	6013      	str	r3, [r2, #0]

		for (int i = 0; i < 3; ++i) {
 80016fe:	2300      	movs	r3, #0
 8001700:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001704:	e014      	b.n	8001730 <Start_IMU_Task+0x158>

			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001706:	2201      	movs	r2, #1
 8001708:	2120      	movs	r1, #32
 800170a:	485a      	ldr	r0, [pc, #360]	; (8001874 <Start_IMU_Task+0x29c>)
 800170c:	f002 fd2e 	bl	800416c <HAL_GPIO_WritePin>
			osDelay(200);
 8001710:	20c8      	movs	r0, #200	; 0xc8
 8001712:	f005 f8c1 	bl	8006898 <osDelay>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	2120      	movs	r1, #32
 800171a:	4856      	ldr	r0, [pc, #344]	; (8001874 <Start_IMU_Task+0x29c>)
 800171c:	f002 fd26 	bl	800416c <HAL_GPIO_WritePin>
			osDelay(200);
 8001720:	20c8      	movs	r0, #200	; 0xc8
 8001722:	f005 f8b9 	bl	8006898 <osDelay>
		for (int i = 0; i < 3; ++i) {
 8001726:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800172a:	3301      	adds	r3, #1
 800172c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001730:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001734:	2b02      	cmp	r3, #2
 8001736:	dde6      	ble.n	8001706 <Start_IMU_Task+0x12e>
		}

		mpu9250_correct_init_global = 1;
 8001738:	2301      	movs	r3, #1
 800173a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800173e:	e002      	b.n	8001746 <Start_IMU_Task+0x16e>
	} else {

		mpu9250_correct_init_global = 0;
 8001740:	2300      	movs	r3, #0
 8001742:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	}

	osDelay(100);
 8001746:	2064      	movs	r0, #100	; 0x64
 8001748:	f005 f8a6 	bl	8006898 <osDelay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800174c:	2120      	movs	r1, #32
 800174e:	4849      	ldr	r0, [pc, #292]	; (8001874 <Start_IMU_Task+0x29c>)
 8001750:	f002 fd24 	bl	800419c <HAL_GPIO_TogglePin>

	/* Infinite loop */
	for (;;) {

		if (mpu9250_correct_init_global == 1) {
 8001754:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001758:	2b01      	cmp	r3, #1
 800175a:	f040 8087 	bne.w	800186c <Start_IMU_Task+0x294>

			/* Case 1: Time measurement */
			I_Time_Start = I_Time_Stop;
 800175e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001762:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
			I_Time_Stop = HAL_GetTick();
 8001766:	f002 f809 	bl	800377c <HAL_GetTick>
 800176a:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

			dt = (float) (I_Time_Stop - I_Time_Start) / 1000;
 800176e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001772:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fa6d 	bl	8000c58 <__aeabi_ui2f>
 800177e:	4603      	mov	r3, r0
 8001780:	494c      	ldr	r1, [pc, #304]	; (80018b4 <Start_IMU_Task+0x2dc>)
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fb74 	bl	8000e70 <__aeabi_fdiv>
 8001788:	4603      	mov	r3, r0
 800178a:	461a      	mov	r2, r3
 800178c:	4b4a      	ldr	r3, [pc, #296]	; (80018b8 <Start_IMU_Task+0x2e0>)
 800178e:	601a      	str	r2, [r3, #0]

			/* Case 2: Update AHRS */
			MPU9250_Update(&hi2c1, &mpu1, dt);
 8001790:	4b49      	ldr	r3, [pc, #292]	; (80018b8 <Start_IMU_Task+0x2e0>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	4619      	mov	r1, r3
 800179a:	4837      	ldr	r0, [pc, #220]	; (8001878 <Start_IMU_Task+0x2a0>)
 800179c:	f001 fb84 	bl	8002ea8 <MPU9250_Update>

			a_g_x = mpu1.Accelerometer_vector_g.x,
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a6:	4a45      	ldr	r2, [pc, #276]	; (80018bc <Start_IMU_Task+0x2e4>)
 80017a8:	6013      	str	r3, [r2, #0]
			a_g_y = mpu1.Accelerometer_vector_g.y,
 80017aa:	f107 030c 	add.w	r3, r7, #12
 80017ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b0:	4a43      	ldr	r2, [pc, #268]	; (80018c0 <Start_IMU_Task+0x2e8>)
 80017b2:	6013      	str	r3, [r2, #0]
			a_g_z = mpu1.Accelerometer_vector_g.z;
 80017b4:	f107 030c 	add.w	r3, r7, #12
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	4a42      	ldr	r2, [pc, #264]	; (80018c4 <Start_IMU_Task+0x2ec>)
 80017bc:	6013      	str	r3, [r2, #0]

			a_g_offset_x = mpu1.Accelerometer_vector_g_offset.x,
 80017be:	f107 030c 	add.w	r3, r7, #12
 80017c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c4:	4a40      	ldr	r2, [pc, #256]	; (80018c8 <Start_IMU_Task+0x2f0>)
 80017c6:	6013      	str	r3, [r2, #0]
			a_g_offset_y = mpu1.Accelerometer_vector_g_offset.y,
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ce:	4a3f      	ldr	r2, [pc, #252]	; (80018cc <Start_IMU_Task+0x2f4>)
 80017d0:	6013      	str	r3, [r2, #0]
			a_g_offset_z = mpu1.Accelerometer_vector_g_offset.z;
 80017d2:	f107 030c 	add.w	r3, r7, #12
 80017d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d8:	4a3d      	ldr	r2, [pc, #244]	; (80018d0 <Start_IMU_Task+0x2f8>)
 80017da:	6013      	str	r3, [r2, #0]

			a_wihout_g_x = mpu1.Accelerometer_vector_without_g.x,
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017e2:	4a3c      	ldr	r2, [pc, #240]	; (80018d4 <Start_IMU_Task+0x2fc>)
 80017e4:	6013      	str	r3, [r2, #0]
			a_wihout_g_y = mpu1.Accelerometer_vector_without_g.y,
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ec:	4a3a      	ldr	r2, [pc, #232]	; (80018d8 <Start_IMU_Task+0x300>)
 80017ee:	6013      	str	r3, [r2, #0]
			a_wihout_g_z = mpu1.Accelerometer_vector_without_g.z;
 80017f0:	f107 030c 	add.w	r3, r7, #12
 80017f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f6:	4a39      	ldr	r2, [pc, #228]	; (80018dc <Start_IMU_Task+0x304>)
 80017f8:	6013      	str	r3, [r2, #0]

			a_velocity_x = mpu1.Accelerometer_vector_velocity.x,
 80017fa:	f107 030c 	add.w	r3, r7, #12
 80017fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001800:	4a37      	ldr	r2, [pc, #220]	; (80018e0 <Start_IMU_Task+0x308>)
 8001802:	6013      	str	r3, [r2, #0]
			a_velocity_y = mpu1.Accelerometer_vector_velocity.y,
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800180a:	4a36      	ldr	r2, [pc, #216]	; (80018e4 <Start_IMU_Task+0x30c>)
 800180c:	6013      	str	r3, [r2, #0]
			a_velocity_z = mpu1.Accelerometer_vector_velocity.z;
 800180e:	f107 030c 	add.w	r3, r7, #12
 8001812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001814:	4a34      	ldr	r2, [pc, #208]	; (80018e8 <Start_IMU_Task+0x310>)
 8001816:	6013      	str	r3, [r2, #0]

			a_position_x = mpu1.Accelerometer_vector_position.x,
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001820:	4a32      	ldr	r2, [pc, #200]	; (80018ec <Start_IMU_Task+0x314>)
 8001822:	6013      	str	r3, [r2, #0]
			a_position_y = mpu1.Accelerometer_vector_position.y,
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800182c:	4a30      	ldr	r2, [pc, #192]	; (80018f0 <Start_IMU_Task+0x318>)
 800182e:	6013      	str	r3, [r2, #0]
			a_position_z = mpu1.Accelerometer_vector_position.z;
 8001830:	f107 030c 	add.w	r3, r7, #12
 8001834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001838:	4a2e      	ldr	r2, [pc, #184]	; (80018f4 <Start_IMU_Task+0x31c>)
 800183a:	6013      	str	r3, [r2, #0]

			/* Filters data */
			Madgwick_q_w = mpu1.Madgwick_quaternion.w;
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8001844:	4a2c      	ldr	r2, [pc, #176]	; (80018f8 <Start_IMU_Task+0x320>)
 8001846:	6013      	str	r3, [r2, #0]
			Madgwick_q_x = mpu1.Madgwick_quaternion.x;
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001850:	4a2a      	ldr	r2, [pc, #168]	; (80018fc <Start_IMU_Task+0x324>)
 8001852:	6013      	str	r3, [r2, #0]
			Madgwick_q_y = mpu1.Madgwick_quaternion.y;
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800185c:	4a28      	ldr	r2, [pc, #160]	; (8001900 <Start_IMU_Task+0x328>)
 800185e:	6013      	str	r3, [r2, #0]
			Madgwick_q_z = mpu1.Madgwick_quaternion.z;
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001868:	4a26      	ldr	r2, [pc, #152]	; (8001904 <Start_IMU_Task+0x32c>)
 800186a:	6013      	str	r3, [r2, #0]
		}

		osDelay(10);
 800186c:	200a      	movs	r0, #10
 800186e:	f005 f813 	bl	8006898 <osDelay>
		if (mpu9250_correct_init_global == 1) {
 8001872:	e76f      	b.n	8001754 <Start_IMU_Task+0x17c>
 8001874:	40010800 	.word	0x40010800
 8001878:	20003434 	.word	0x20003434
 800187c:	3f851eb8 	.word	0x3f851eb8
 8001880:	3f77ced9 	.word	0x3f77ced9
 8001884:	3f7df3b6 	.word	0x3f7df3b6
 8001888:	c1d449ba 	.word	0xc1d449ba
 800188c:	20000098 	.word	0x20000098
 8001890:	2000009c 	.word	0x2000009c
 8001894:	200000a0 	.word	0x200000a0
 8001898:	200000a4 	.word	0x200000a4
 800189c:	200000a8 	.word	0x200000a8
 80018a0:	200000ac 	.word	0x200000ac
 80018a4:	200000b0 	.word	0x200000b0
 80018a8:	200000b4 	.word	0x200000b4
 80018ac:	200000b8 	.word	0x200000b8
 80018b0:	200000bc 	.word	0x200000bc
 80018b4:	447a0000 	.word	0x447a0000
 80018b8:	20000108 	.word	0x20000108
 80018bc:	200000c0 	.word	0x200000c0
 80018c0:	200000c4 	.word	0x200000c4
 80018c4:	200000c8 	.word	0x200000c8
 80018c8:	200000cc 	.word	0x200000cc
 80018cc:	200000d0 	.word	0x200000d0
 80018d0:	200000d4 	.word	0x200000d4
 80018d4:	200000d8 	.word	0x200000d8
 80018d8:	200000dc 	.word	0x200000dc
 80018dc:	200000e0 	.word	0x200000e0
 80018e0:	200000e4 	.word	0x200000e4
 80018e4:	200000e8 	.word	0x200000e8
 80018e8:	200000ec 	.word	0x200000ec
 80018ec:	200000f0 	.word	0x200000f0
 80018f0:	200000f4 	.word	0x200000f4
 80018f4:	200000f8 	.word	0x200000f8
 80018f8:	20000000 	.word	0x20000000
 80018fc:	200000fc 	.word	0x200000fc
 8001900:	20000100 	.word	0x20000100
 8001904:	20000104 	.word	0x20000104

08001908 <HAL_UART_RxCpltCallback>:
	HAL_UART_Transmit(&huart2 ,(uint8_t *)ptr ,len ,1000) ;
	return len;
}
*/
     
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART1) {
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0f      	ldr	r2, [pc, #60]	; (8001954 <HAL_UART_RxCpltCallback+0x4c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d117      	bne.n	800194a <HAL_UART_RxCpltCallback+0x42>

		HAL_UART_Receive_DMA(HC05_handle, Data_from_PC, DATA_FRAME_FROM_PC_SIZE);
 800191a:	4b0f      	ldr	r3, [pc, #60]	; (8001958 <HAL_UART_RxCpltCallback+0x50>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	220a      	movs	r2, #10
 8001920:	490e      	ldr	r1, [pc, #56]	; (800195c <HAL_UART_RxCpltCallback+0x54>)
 8001922:	4618      	mov	r0, r3
 8001924:	f004 fa92 	bl	8005e4c <HAL_UART_Receive_DMA>

		if( HC05_Parse_Data_frame(&DF_PC, Data_from_PC) == 0 ) {
 8001928:	490c      	ldr	r1, [pc, #48]	; (800195c <HAL_UART_RxCpltCallback+0x54>)
 800192a:	480d      	ldr	r0, [pc, #52]	; (8001960 <HAL_UART_RxCpltCallback+0x58>)
 800192c:	f000 fb32 	bl	8001f94 <HC05_Parse_Data_frame>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d109      	bne.n	800194a <HAL_UART_RxCpltCallback+0x42>

			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001936:	2120      	movs	r1, #32
 8001938:	480a      	ldr	r0, [pc, #40]	; (8001964 <HAL_UART_RxCpltCallback+0x5c>)
 800193a:	f002 fc2f 	bl	800419c <HAL_GPIO_TogglePin>
			//Kalman_filter_measure_variance = DF_PC.Kalman_filter_measure_variance;

			//Madgwick_filter_beta           = (float) DF_PC.Madgwick_filter_beta / 1000;

			/* Additional data from PC */
			Which_filter_global = DF_PC.Which_filter;
 800193e:	4b08      	ldr	r3, [pc, #32]	; (8001960 <HAL_UART_RxCpltCallback+0x58>)
 8001940:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8001944:	b2da      	uxtb	r2, r3
 8001946:	4b08      	ldr	r3, [pc, #32]	; (8001968 <HAL_UART_RxCpltCallback+0x60>)
 8001948:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800194a:	bf00      	nop
 800194c:	3708      	adds	r7, #8
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40013800 	.word	0x40013800
 8001958:	20000004 	.word	0x20000004
 800195c:	200033b4 	.word	0x200033b4
 8001960:	2000339c 	.word	0x2000339c
 8001964:	40010800 	.word	0x40010800
 8001968:	2000010c 	.word	0x2000010c

0800196c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b088      	sub	sp, #32
 8001970:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001972:	f107 0310 	add.w	r3, r7, #16
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001980:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <MX_GPIO_Init+0xcc>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	4a2c      	ldr	r2, [pc, #176]	; (8001a38 <MX_GPIO_Init+0xcc>)
 8001986:	f043 0310 	orr.w	r3, r3, #16
 800198a:	6193      	str	r3, [r2, #24]
 800198c:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <MX_GPIO_Init+0xcc>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f003 0310 	and.w	r3, r3, #16
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001998:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <MX_GPIO_Init+0xcc>)
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	4a26      	ldr	r2, [pc, #152]	; (8001a38 <MX_GPIO_Init+0xcc>)
 800199e:	f043 0320 	orr.w	r3, r3, #32
 80019a2:	6193      	str	r3, [r2, #24]
 80019a4:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <MX_GPIO_Init+0xcc>)
 80019a6:	699b      	ldr	r3, [r3, #24]
 80019a8:	f003 0320 	and.w	r3, r3, #32
 80019ac:	60bb      	str	r3, [r7, #8]
 80019ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b0:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <MX_GPIO_Init+0xcc>)
 80019b2:	699b      	ldr	r3, [r3, #24]
 80019b4:	4a20      	ldr	r2, [pc, #128]	; (8001a38 <MX_GPIO_Init+0xcc>)
 80019b6:	f043 0304 	orr.w	r3, r3, #4
 80019ba:	6193      	str	r3, [r2, #24]
 80019bc:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <MX_GPIO_Init+0xcc>)
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	607b      	str	r3, [r7, #4]
 80019c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <MX_GPIO_Init+0xcc>)
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	4a1a      	ldr	r2, [pc, #104]	; (8001a38 <MX_GPIO_Init+0xcc>)
 80019ce:	f043 0308 	orr.w	r3, r3, #8
 80019d2:	6193      	str	r3, [r2, #24]
 80019d4:	4b18      	ldr	r3, [pc, #96]	; (8001a38 <MX_GPIO_Init+0xcc>)
 80019d6:	699b      	ldr	r3, [r3, #24]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	603b      	str	r3, [r7, #0]
 80019de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2120      	movs	r1, #32
 80019e4:	4815      	ldr	r0, [pc, #84]	; (8001a3c <MX_GPIO_Init+0xd0>)
 80019e6:	f002 fbc1 	bl	800416c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <MX_GPIO_Init+0xd4>)
 80019f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019f8:	f107 0310 	add.w	r3, r7, #16
 80019fc:	4619      	mov	r1, r3
 80019fe:	4811      	ldr	r0, [pc, #68]	; (8001a44 <MX_GPIO_Init+0xd8>)
 8001a00:	f002 fa5a 	bl	8003eb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a04:	2320      	movs	r3, #32
 8001a06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a10:	2302      	movs	r3, #2
 8001a12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4808      	ldr	r0, [pc, #32]	; (8001a3c <MX_GPIO_Init+0xd0>)
 8001a1c:	f002 fa4c 	bl	8003eb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2105      	movs	r1, #5
 8001a24:	2028      	movs	r0, #40	; 0x28
 8001a26:	f001 ffac 	bl	8003982 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a2a:	2028      	movs	r0, #40	; 0x28
 8001a2c:	f001 ffc5 	bl	80039ba <HAL_NVIC_EnableIRQ>

}
 8001a30:	bf00      	nop
 8001a32:	3720      	adds	r7, #32
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40010800 	.word	0x40010800
 8001a40:	10110000 	.word	0x10110000
 8001a44:	40011000 	.word	0x40011000

08001a48 <HC05_Divide_int16>:

#include "hc05.h"

/* --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

uint8_t HC05_Divide_int16(int16_t _data, uint8_t _which_byte) {
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	460a      	mov	r2, r1
 8001a52:	80fb      	strh	r3, [r7, #6]
 8001a54:	4613      	mov	r3, r2
 8001a56:	717b      	strb	r3, [r7, #5]

	if(_which_byte == 'L') {
 8001a58:	797b      	ldrb	r3, [r7, #5]
 8001a5a:	2b4c      	cmp	r3, #76	; 0x4c
 8001a5c:	d102      	bne.n	8001a64 <HC05_Divide_int16+0x1c>

		return (_data & 0xFF); // return lower byte
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	e009      	b.n	8001a78 <HC05_Divide_int16+0x30>
	}
	else if(_which_byte == 'H'){
 8001a64:	797b      	ldrb	r3, [r7, #5]
 8001a66:	2b48      	cmp	r3, #72	; 0x48
 8001a68:	d105      	bne.n	8001a76 <HC05_Divide_int16+0x2e>

		return (_data >> 8);   // return higher byte
 8001a6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a6e:	121b      	asrs	r3, r3, #8
 8001a70:	b21b      	sxth	r3, r3
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	e000      	b.n	8001a78 <HC05_Divide_int16+0x30>
	}

	return 0;
 8001a76:	2300      	movs	r3, #0
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr

08001a82 <HC05_Merge_bytes>:

/* --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

int16_t HC05_Merge_bytes(uint8_t _lower_byte, uint8_t _higher_byte) {
 8001a82:	b480      	push	{r7}
 8001a84:	b085      	sub	sp, #20
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4603      	mov	r3, r0
 8001a8a:	460a      	mov	r2, r1
 8001a8c:	71fb      	strb	r3, [r7, #7]
 8001a8e:	4613      	mov	r3, r2
 8001a90:	71bb      	strb	r3, [r7, #6]

	int16_t uint16t_byte = ( (_higher_byte << 8) + _lower_byte );
 8001a92:	79bb      	ldrb	r3, [r7, #6]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	021b      	lsls	r3, r3, #8
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	81fb      	strh	r3, [r7, #14]

	if(uint16t_byte >= 32767) {
 8001aa4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001aa8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d104      	bne.n	8001aba <HC05_Merge_bytes+0x38>

		int16_t int_byte = uint16t_byte - ( 2 * 32768);
 8001ab0:	89fb      	ldrh	r3, [r7, #14]
 8001ab2:	81bb      	strh	r3, [r7, #12]
		return int_byte;
 8001ab4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001ab8:	e001      	b.n	8001abe <HC05_Merge_bytes+0x3c>
	}
	else  return uint16t_byte;
 8001aba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

	return 0;
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3714      	adds	r7, #20
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <HC05_Fill_Data_frame_to_PC>:
/* --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

void HC05_Fill_Data_frame_to_PC(struct Data_frame_to_PC *_data, uint8_t *_frame,
								double Complementary_q_w, double Complementary_q_x, double Complementary_q_y, double Complementary_q_z,
								double Kalman_q_w, 		  double Kalman_q_x, 		double Kalman_q_y, 		  double Kalman_q_z,
								double Madgwick_q_w, 	  double Madgwick_q_x, 		double Madgwick_q_y, 	  double Madgwick_q_z) {
 8001ac8:	b590      	push	{r4, r7, lr}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	e9c7 2300 	strd	r2, r3, [r7]

	/* Complementary filter data */
	_frame[0] = HC05_Divide_int16(Complementary_q_w * 1000, 'L');
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	4bd1      	ldr	r3, [pc, #836]	; (8001e20 <HC05_Fill_Data_frame_to_PC+0x358>)
 8001adc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ae0:	f7fe fcf2 	bl	80004c8 <__aeabi_dmul>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	460c      	mov	r4, r1
 8001ae8:	4618      	mov	r0, r3
 8001aea:	4621      	mov	r1, r4
 8001aec:	f7fe ff86 	bl	80009fc <__aeabi_d2iz>
 8001af0:	4603      	mov	r3, r0
 8001af2:	b21b      	sxth	r3, r3
 8001af4:	214c      	movs	r1, #76	; 0x4c
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ffa6 	bl	8001a48 <HC05_Divide_int16>
 8001afc:	4603      	mov	r3, r0
 8001afe:	461a      	mov	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	701a      	strb	r2, [r3, #0]
	_frame[1] = HC05_Divide_int16(Complementary_q_w * 1000, 'H');
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	4bc5      	ldr	r3, [pc, #788]	; (8001e20 <HC05_Fill_Data_frame_to_PC+0x358>)
 8001b0a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001b0e:	f7fe fcdb 	bl	80004c8 <__aeabi_dmul>
 8001b12:	4603      	mov	r3, r0
 8001b14:	460c      	mov	r4, r1
 8001b16:	4618      	mov	r0, r3
 8001b18:	4621      	mov	r1, r4
 8001b1a:	f7fe ff6f 	bl	80009fc <__aeabi_d2iz>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	b21a      	sxth	r2, r3
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	1c5c      	adds	r4, r3, #1
 8001b26:	2148      	movs	r1, #72	; 0x48
 8001b28:	4610      	mov	r0, r2
 8001b2a:	f7ff ff8d 	bl	8001a48 <HC05_Divide_int16>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	7023      	strb	r3, [r4, #0]

	_frame[2] = HC05_Divide_int16(Complementary_q_x * 1000, 'L');
 8001b32:	f04f 0200 	mov.w	r2, #0
 8001b36:	4bba      	ldr	r3, [pc, #744]	; (8001e20 <HC05_Fill_Data_frame_to_PC+0x358>)
 8001b38:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b3c:	f7fe fcc4 	bl	80004c8 <__aeabi_dmul>
 8001b40:	4603      	mov	r3, r0
 8001b42:	460c      	mov	r4, r1
 8001b44:	4618      	mov	r0, r3
 8001b46:	4621      	mov	r1, r4
 8001b48:	f7fe ff58 	bl	80009fc <__aeabi_d2iz>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	b21a      	sxth	r2, r3
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	1c9c      	adds	r4, r3, #2
 8001b54:	214c      	movs	r1, #76	; 0x4c
 8001b56:	4610      	mov	r0, r2
 8001b58:	f7ff ff76 	bl	8001a48 <HC05_Divide_int16>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	7023      	strb	r3, [r4, #0]
	_frame[3] = HC05_Divide_int16(Complementary_q_x * 1000, 'H');
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	4bae      	ldr	r3, [pc, #696]	; (8001e20 <HC05_Fill_Data_frame_to_PC+0x358>)
 8001b66:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001b6a:	f7fe fcad 	bl	80004c8 <__aeabi_dmul>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	460c      	mov	r4, r1
 8001b72:	4618      	mov	r0, r3
 8001b74:	4621      	mov	r1, r4
 8001b76:	f7fe ff41 	bl	80009fc <__aeabi_d2iz>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	b21a      	sxth	r2, r3
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	1cdc      	adds	r4, r3, #3
 8001b82:	2148      	movs	r1, #72	; 0x48
 8001b84:	4610      	mov	r0, r2
 8001b86:	f7ff ff5f 	bl	8001a48 <HC05_Divide_int16>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	7023      	strb	r3, [r4, #0]

	_frame[4] = HC05_Divide_int16(Complementary_q_y * 1000, 'L');
 8001b8e:	f04f 0200 	mov.w	r2, #0
 8001b92:	4ba3      	ldr	r3, [pc, #652]	; (8001e20 <HC05_Fill_Data_frame_to_PC+0x358>)
 8001b94:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001b98:	f7fe fc96 	bl	80004c8 <__aeabi_dmul>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	460c      	mov	r4, r1
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	4621      	mov	r1, r4
 8001ba4:	f7fe ff2a 	bl	80009fc <__aeabi_d2iz>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	b21a      	sxth	r2, r3
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	1d1c      	adds	r4, r3, #4
 8001bb0:	214c      	movs	r1, #76	; 0x4c
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	f7ff ff48 	bl	8001a48 <HC05_Divide_int16>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	7023      	strb	r3, [r4, #0]
	_frame[5] = HC05_Divide_int16(Complementary_q_y * 1000, 'H');
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	4b97      	ldr	r3, [pc, #604]	; (8001e20 <HC05_Fill_Data_frame_to_PC+0x358>)
 8001bc2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001bc6:	f7fe fc7f 	bl	80004c8 <__aeabi_dmul>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	460c      	mov	r4, r1
 8001bce:	4618      	mov	r0, r3
 8001bd0:	4621      	mov	r1, r4
 8001bd2:	f7fe ff13 	bl	80009fc <__aeabi_d2iz>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	b21a      	sxth	r2, r3
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	1d5c      	adds	r4, r3, #5
 8001bde:	2148      	movs	r1, #72	; 0x48
 8001be0:	4610      	mov	r0, r2
 8001be2:	f7ff ff31 	bl	8001a48 <HC05_Divide_int16>
 8001be6:	4603      	mov	r3, r0
 8001be8:	7023      	strb	r3, [r4, #0]

	_frame[6] = HC05_Divide_int16(Complementary_q_z * 1000, 'L');
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	4b8c      	ldr	r3, [pc, #560]	; (8001e20 <HC05_Fill_Data_frame_to_PC+0x358>)
 8001bf0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001bf4:	f7fe fc68 	bl	80004c8 <__aeabi_dmul>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	460c      	mov	r4, r1
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	4621      	mov	r1, r4
 8001c00:	f7fe fefc 	bl	80009fc <__aeabi_d2iz>
 8001c04:	4603      	mov	r3, r0
 8001c06:	b21a      	sxth	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	1d9c      	adds	r4, r3, #6
 8001c0c:	214c      	movs	r1, #76	; 0x4c
 8001c0e:	4610      	mov	r0, r2
 8001c10:	f7ff ff1a 	bl	8001a48 <HC05_Divide_int16>
 8001c14:	4603      	mov	r3, r0
 8001c16:	7023      	strb	r3, [r4, #0]
	_frame[7] = HC05_Divide_int16(Complementary_q_z * 1000, 'H');
 8001c18:	f04f 0200 	mov.w	r2, #0
 8001c1c:	4b80      	ldr	r3, [pc, #512]	; (8001e20 <HC05_Fill_Data_frame_to_PC+0x358>)
 8001c1e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c22:	f7fe fc51 	bl	80004c8 <__aeabi_dmul>
 8001c26:	4603      	mov	r3, r0
 8001c28:	460c      	mov	r4, r1
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	4621      	mov	r1, r4
 8001c2e:	f7fe fee5 	bl	80009fc <__aeabi_d2iz>
 8001c32:	4603      	mov	r3, r0
 8001c34:	b21a      	sxth	r2, r3
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	1ddc      	adds	r4, r3, #7
 8001c3a:	2148      	movs	r1, #72	; 0x48
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	f7ff ff03 	bl	8001a48 <HC05_Divide_int16>
 8001c42:	4603      	mov	r3, r0
 8001c44:	7023      	strb	r3, [r4, #0]

	/* Kalman filter data */
	_frame[8] = HC05_Divide_int16(Kalman_q_w * 1000, 'L');
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	4b75      	ldr	r3, [pc, #468]	; (8001e20 <HC05_Fill_Data_frame_to_PC+0x358>)
 8001c4c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001c50:	f7fe fc3a 	bl	80004c8 <__aeabi_dmul>
 8001c54:	4603      	mov	r3, r0
 8001c56:	460c      	mov	r4, r1
 8001c58:	4618      	mov	r0, r3
 8001c5a:	4621      	mov	r1, r4
 8001c5c:	f7fe fece 	bl	80009fc <__aeabi_d2iz>
 8001c60:	4603      	mov	r3, r0
 8001c62:	b21a      	sxth	r2, r3
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	f103 0408 	add.w	r4, r3, #8
 8001c6a:	214c      	movs	r1, #76	; 0x4c
 8001c6c:	4610      	mov	r0, r2
 8001c6e:	f7ff feeb 	bl	8001a48 <HC05_Divide_int16>
 8001c72:	4603      	mov	r3, r0
 8001c74:	7023      	strb	r3, [r4, #0]
	_frame[9] = HC05_Divide_int16(Kalman_q_w * 1000, 'H');
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	4b69      	ldr	r3, [pc, #420]	; (8001e20 <HC05_Fill_Data_frame_to_PC+0x358>)
 8001c7c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001c80:	f7fe fc22 	bl	80004c8 <__aeabi_dmul>
 8001c84:	4603      	mov	r3, r0
 8001c86:	460c      	mov	r4, r1
 8001c88:	4618      	mov	r0, r3
 8001c8a:	4621      	mov	r1, r4
 8001c8c:	f7fe feb6 	bl	80009fc <__aeabi_d2iz>
 8001c90:	4603      	mov	r3, r0
 8001c92:	b21a      	sxth	r2, r3
 8001c94:	68bb      	ldr	r3, [r7, #8]
 8001c96:	f103 0409 	add.w	r4, r3, #9
 8001c9a:	2148      	movs	r1, #72	; 0x48
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	f7ff fed3 	bl	8001a48 <HC05_Divide_int16>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	7023      	strb	r3, [r4, #0]

	_frame[10] = HC05_Divide_int16(Kalman_q_x * 1000, 'L');
 8001ca6:	f04f 0200 	mov.w	r2, #0
 8001caa:	4b5d      	ldr	r3, [pc, #372]	; (8001e20 <HC05_Fill_Data_frame_to_PC+0x358>)
 8001cac:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001cb0:	f7fe fc0a 	bl	80004c8 <__aeabi_dmul>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	460c      	mov	r4, r1
 8001cb8:	4618      	mov	r0, r3
 8001cba:	4621      	mov	r1, r4
 8001cbc:	f7fe fe9e 	bl	80009fc <__aeabi_d2iz>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	b21a      	sxth	r2, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	f103 040a 	add.w	r4, r3, #10
 8001cca:	214c      	movs	r1, #76	; 0x4c
 8001ccc:	4610      	mov	r0, r2
 8001cce:	f7ff febb 	bl	8001a48 <HC05_Divide_int16>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	7023      	strb	r3, [r4, #0]
	_frame[11] = HC05_Divide_int16(Kalman_q_x * 1000, 'H');
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	4b51      	ldr	r3, [pc, #324]	; (8001e20 <HC05_Fill_Data_frame_to_PC+0x358>)
 8001cdc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001ce0:	f7fe fbf2 	bl	80004c8 <__aeabi_dmul>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	460c      	mov	r4, r1
 8001ce8:	4618      	mov	r0, r3
 8001cea:	4621      	mov	r1, r4
 8001cec:	f7fe fe86 	bl	80009fc <__aeabi_d2iz>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	b21a      	sxth	r2, r3
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	f103 040b 	add.w	r4, r3, #11
 8001cfa:	2148      	movs	r1, #72	; 0x48
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	f7ff fea3 	bl	8001a48 <HC05_Divide_int16>
 8001d02:	4603      	mov	r3, r0
 8001d04:	7023      	strb	r3, [r4, #0]

	_frame[12] = HC05_Divide_int16(Kalman_q_y * 1000, 'L');
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	4b45      	ldr	r3, [pc, #276]	; (8001e20 <HC05_Fill_Data_frame_to_PC+0x358>)
 8001d0c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001d10:	f7fe fbda 	bl	80004c8 <__aeabi_dmul>
 8001d14:	4603      	mov	r3, r0
 8001d16:	460c      	mov	r4, r1
 8001d18:	4618      	mov	r0, r3
 8001d1a:	4621      	mov	r1, r4
 8001d1c:	f7fe fe6e 	bl	80009fc <__aeabi_d2iz>
 8001d20:	4603      	mov	r3, r0
 8001d22:	b21a      	sxth	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	f103 040c 	add.w	r4, r3, #12
 8001d2a:	214c      	movs	r1, #76	; 0x4c
 8001d2c:	4610      	mov	r0, r2
 8001d2e:	f7ff fe8b 	bl	8001a48 <HC05_Divide_int16>
 8001d32:	4603      	mov	r3, r0
 8001d34:	7023      	strb	r3, [r4, #0]
	_frame[13] = HC05_Divide_int16(Kalman_q_y * 1000, 'H');
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	4b39      	ldr	r3, [pc, #228]	; (8001e20 <HC05_Fill_Data_frame_to_PC+0x358>)
 8001d3c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001d40:	f7fe fbc2 	bl	80004c8 <__aeabi_dmul>
 8001d44:	4603      	mov	r3, r0
 8001d46:	460c      	mov	r4, r1
 8001d48:	4618      	mov	r0, r3
 8001d4a:	4621      	mov	r1, r4
 8001d4c:	f7fe fe56 	bl	80009fc <__aeabi_d2iz>
 8001d50:	4603      	mov	r3, r0
 8001d52:	b21a      	sxth	r2, r3
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	f103 040d 	add.w	r4, r3, #13
 8001d5a:	2148      	movs	r1, #72	; 0x48
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	f7ff fe73 	bl	8001a48 <HC05_Divide_int16>
 8001d62:	4603      	mov	r3, r0
 8001d64:	7023      	strb	r3, [r4, #0]

	_frame[14] = HC05_Divide_int16(Kalman_q_z * 1000, 'L');
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	4b2d      	ldr	r3, [pc, #180]	; (8001e20 <HC05_Fill_Data_frame_to_PC+0x358>)
 8001d6c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001d70:	f7fe fbaa 	bl	80004c8 <__aeabi_dmul>
 8001d74:	4603      	mov	r3, r0
 8001d76:	460c      	mov	r4, r1
 8001d78:	4618      	mov	r0, r3
 8001d7a:	4621      	mov	r1, r4
 8001d7c:	f7fe fe3e 	bl	80009fc <__aeabi_d2iz>
 8001d80:	4603      	mov	r3, r0
 8001d82:	b21a      	sxth	r2, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f103 040e 	add.w	r4, r3, #14
 8001d8a:	214c      	movs	r1, #76	; 0x4c
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	f7ff fe5b 	bl	8001a48 <HC05_Divide_int16>
 8001d92:	4603      	mov	r3, r0
 8001d94:	7023      	strb	r3, [r4, #0]
	_frame[15] = HC05_Divide_int16(Kalman_q_z * 1000, 'H');
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <HC05_Fill_Data_frame_to_PC+0x358>)
 8001d9c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001da0:	f7fe fb92 	bl	80004c8 <__aeabi_dmul>
 8001da4:	4603      	mov	r3, r0
 8001da6:	460c      	mov	r4, r1
 8001da8:	4618      	mov	r0, r3
 8001daa:	4621      	mov	r1, r4
 8001dac:	f7fe fe26 	bl	80009fc <__aeabi_d2iz>
 8001db0:	4603      	mov	r3, r0
 8001db2:	b21a      	sxth	r2, r3
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	f103 040f 	add.w	r4, r3, #15
 8001dba:	2148      	movs	r1, #72	; 0x48
 8001dbc:	4610      	mov	r0, r2
 8001dbe:	f7ff fe43 	bl	8001a48 <HC05_Divide_int16>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	7023      	strb	r3, [r4, #0]

	/* Madgwick filter data */
	_frame[16] = HC05_Divide_int16(Madgwick_q_w * 1000, 'L');
 8001dc6:	f04f 0200 	mov.w	r2, #0
 8001dca:	4b15      	ldr	r3, [pc, #84]	; (8001e20 <HC05_Fill_Data_frame_to_PC+0x358>)
 8001dcc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001dd0:	f7fe fb7a 	bl	80004c8 <__aeabi_dmul>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	460c      	mov	r4, r1
 8001dd8:	4618      	mov	r0, r3
 8001dda:	4621      	mov	r1, r4
 8001ddc:	f7fe fe0e 	bl	80009fc <__aeabi_d2iz>
 8001de0:	4603      	mov	r3, r0
 8001de2:	b21a      	sxth	r2, r3
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	f103 0410 	add.w	r4, r3, #16
 8001dea:	214c      	movs	r1, #76	; 0x4c
 8001dec:	4610      	mov	r0, r2
 8001dee:	f7ff fe2b 	bl	8001a48 <HC05_Divide_int16>
 8001df2:	4603      	mov	r3, r0
 8001df4:	7023      	strb	r3, [r4, #0]
	_frame[17] = HC05_Divide_int16(Madgwick_q_w * 1000, 'H');
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HC05_Fill_Data_frame_to_PC+0x358>)
 8001dfc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001e00:	f7fe fb62 	bl	80004c8 <__aeabi_dmul>
 8001e04:	4603      	mov	r3, r0
 8001e06:	460c      	mov	r4, r1
 8001e08:	4618      	mov	r0, r3
 8001e0a:	4621      	mov	r1, r4
 8001e0c:	f7fe fdf6 	bl	80009fc <__aeabi_d2iz>
 8001e10:	4603      	mov	r3, r0
 8001e12:	b21a      	sxth	r2, r3
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f103 0411 	add.w	r4, r3, #17
 8001e1a:	2148      	movs	r1, #72	; 0x48
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	e001      	b.n	8001e24 <HC05_Fill_Data_frame_to_PC+0x35c>
 8001e20:	408f4000 	.word	0x408f4000
 8001e24:	f7ff fe10 	bl	8001a48 <HC05_Divide_int16>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	7023      	strb	r3, [r4, #0]

	_frame[18] = HC05_Divide_int16(Madgwick_q_x * 1000, 'L');
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	4b56      	ldr	r3, [pc, #344]	; (8001f8c <HC05_Fill_Data_frame_to_PC+0x4c4>)
 8001e32:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001e36:	f7fe fb47 	bl	80004c8 <__aeabi_dmul>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	460c      	mov	r4, r1
 8001e3e:	4618      	mov	r0, r3
 8001e40:	4621      	mov	r1, r4
 8001e42:	f7fe fddb 	bl	80009fc <__aeabi_d2iz>
 8001e46:	4603      	mov	r3, r0
 8001e48:	b21a      	sxth	r2, r3
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	f103 0412 	add.w	r4, r3, #18
 8001e50:	214c      	movs	r1, #76	; 0x4c
 8001e52:	4610      	mov	r0, r2
 8001e54:	f7ff fdf8 	bl	8001a48 <HC05_Divide_int16>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	7023      	strb	r3, [r4, #0]
	_frame[19] = HC05_Divide_int16(Madgwick_q_x * 1000, 'H');
 8001e5c:	f04f 0200 	mov.w	r2, #0
 8001e60:	4b4a      	ldr	r3, [pc, #296]	; (8001f8c <HC05_Fill_Data_frame_to_PC+0x4c4>)
 8001e62:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001e66:	f7fe fb2f 	bl	80004c8 <__aeabi_dmul>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	460c      	mov	r4, r1
 8001e6e:	4618      	mov	r0, r3
 8001e70:	4621      	mov	r1, r4
 8001e72:	f7fe fdc3 	bl	80009fc <__aeabi_d2iz>
 8001e76:	4603      	mov	r3, r0
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	f103 0413 	add.w	r4, r3, #19
 8001e80:	2148      	movs	r1, #72	; 0x48
 8001e82:	4610      	mov	r0, r2
 8001e84:	f7ff fde0 	bl	8001a48 <HC05_Divide_int16>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	7023      	strb	r3, [r4, #0]

	_frame[20] = HC05_Divide_int16(Madgwick_q_y * 1000, 'L');
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	4b3e      	ldr	r3, [pc, #248]	; (8001f8c <HC05_Fill_Data_frame_to_PC+0x4c4>)
 8001e92:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001e96:	f7fe fb17 	bl	80004c8 <__aeabi_dmul>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	460c      	mov	r4, r1
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	4621      	mov	r1, r4
 8001ea2:	f7fe fdab 	bl	80009fc <__aeabi_d2iz>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	b21a      	sxth	r2, r3
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	f103 0414 	add.w	r4, r3, #20
 8001eb0:	214c      	movs	r1, #76	; 0x4c
 8001eb2:	4610      	mov	r0, r2
 8001eb4:	f7ff fdc8 	bl	8001a48 <HC05_Divide_int16>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	7023      	strb	r3, [r4, #0]
	_frame[21] = HC05_Divide_int16(Madgwick_q_y * 1000, 'H');
 8001ebc:	f04f 0200 	mov.w	r2, #0
 8001ec0:	4b32      	ldr	r3, [pc, #200]	; (8001f8c <HC05_Fill_Data_frame_to_PC+0x4c4>)
 8001ec2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001ec6:	f7fe faff 	bl	80004c8 <__aeabi_dmul>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	460c      	mov	r4, r1
 8001ece:	4618      	mov	r0, r3
 8001ed0:	4621      	mov	r1, r4
 8001ed2:	f7fe fd93 	bl	80009fc <__aeabi_d2iz>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	b21a      	sxth	r2, r3
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	f103 0415 	add.w	r4, r3, #21
 8001ee0:	2148      	movs	r1, #72	; 0x48
 8001ee2:	4610      	mov	r0, r2
 8001ee4:	f7ff fdb0 	bl	8001a48 <HC05_Divide_int16>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	7023      	strb	r3, [r4, #0]

	_frame[22] = HC05_Divide_int16(Madgwick_q_z * 1000, 'L');
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <HC05_Fill_Data_frame_to_PC+0x4c4>)
 8001ef2:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001ef6:	f7fe fae7 	bl	80004c8 <__aeabi_dmul>
 8001efa:	4603      	mov	r3, r0
 8001efc:	460c      	mov	r4, r1
 8001efe:	4618      	mov	r0, r3
 8001f00:	4621      	mov	r1, r4
 8001f02:	f7fe fd7b 	bl	80009fc <__aeabi_d2iz>
 8001f06:	4603      	mov	r3, r0
 8001f08:	b21a      	sxth	r2, r3
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	f103 0416 	add.w	r4, r3, #22
 8001f10:	214c      	movs	r1, #76	; 0x4c
 8001f12:	4610      	mov	r0, r2
 8001f14:	f7ff fd98 	bl	8001a48 <HC05_Divide_int16>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	7023      	strb	r3, [r4, #0]
	_frame[23] = HC05_Divide_int16(Madgwick_q_z * 1000, 'H');
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	4b1a      	ldr	r3, [pc, #104]	; (8001f8c <HC05_Fill_Data_frame_to_PC+0x4c4>)
 8001f22:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001f26:	f7fe facf 	bl	80004c8 <__aeabi_dmul>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	460c      	mov	r4, r1
 8001f2e:	4618      	mov	r0, r3
 8001f30:	4621      	mov	r1, r4
 8001f32:	f7fe fd63 	bl	80009fc <__aeabi_d2iz>
 8001f36:	4603      	mov	r3, r0
 8001f38:	b21a      	sxth	r2, r3
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	f103 0417 	add.w	r4, r3, #23
 8001f40:	2148      	movs	r1, #72	; 0x48
 8001f42:	4610      	mov	r0, r2
 8001f44:	f7ff fd80 	bl	8001a48 <HC05_Divide_int16>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	7023      	strb	r3, [r4, #0]

	/* Test int */
	_frame[24] = HC05_Divide_int16(32768, 'L');
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	f103 0418 	add.w	r4, r3, #24
 8001f52:	214c      	movs	r1, #76	; 0x4c
 8001f54:	480e      	ldr	r0, [pc, #56]	; (8001f90 <HC05_Fill_Data_frame_to_PC+0x4c8>)
 8001f56:	f7ff fd77 	bl	8001a48 <HC05_Divide_int16>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	7023      	strb	r3, [r4, #0]
	_frame[25] = HC05_Divide_int16(32768, 'H');
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	f103 0419 	add.w	r4, r3, #25
 8001f64:	2148      	movs	r1, #72	; 0x48
 8001f66:	480a      	ldr	r0, [pc, #40]	; (8001f90 <HC05_Fill_Data_frame_to_PC+0x4c8>)
 8001f68:	f7ff fd6e 	bl	8001a48 <HC05_Divide_int16>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	7023      	strb	r3, [r4, #0]

	/* CRC */
	_frame[26] = CRC8_DataArray(_frame, DATA_FRAME_TO_PC_SIZE - 1);
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f103 041a 	add.w	r4, r3, #26
 8001f76:	211a      	movs	r1, #26
 8001f78:	68b8      	ldr	r0, [r7, #8]
 8001f7a:	f7ff f885 	bl	8001088 <CRC8_DataArray>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	7023      	strb	r3, [r4, #0]
}
 8001f82:	bf00      	nop
 8001f84:	3714      	adds	r7, #20
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd90      	pop	{r4, r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	408f4000 	.word	0x408f4000
 8001f90:	ffff8000 	.word	0xffff8000

08001f94 <HC05_Parse_Data_frame>:

/* --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

int HC05_Parse_Data_frame(struct Data_frame_from_PC *_data, uint8_t *_frame) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]

	uint8_t Actual_CRC = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	73fb      	strb	r3, [r7, #15]
	uint8_t Received_CRC = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	73bb      	strb	r3, [r7, #14]

	/* Filters data */
	_data->Complementary_filter_weight = HC05_Merge_bytes(_frame[0], _frame[1]);
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	781a      	ldrb	r2, [r3, #0]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	3301      	adds	r3, #1
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4610      	mov	r0, r2
 8001fb4:	f7ff fd65 	bl	8001a82 <HC05_Merge_bytes>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	461a      	mov	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	801a      	strh	r2, [r3, #0]
	_data->Kalman_filter_process_variance = HC05_Merge_bytes(_frame[2], _frame[3]);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	3302      	adds	r3, #2
 8001fc4:	781a      	ldrb	r2, [r3, #0]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	3303      	adds	r3, #3
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4610      	mov	r0, r2
 8001fd0:	f7ff fd57 	bl	8001a82 <HC05_Merge_bytes>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	805a      	strh	r2, [r3, #2]
	_data->Kalman_filter_measure_variance = HC05_Merge_bytes(_frame[4], _frame[5]);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	3304      	adds	r3, #4
 8001fe0:	781a      	ldrb	r2, [r3, #0]
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	3305      	adds	r3, #5
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4610      	mov	r0, r2
 8001fec:	f7ff fd49 	bl	8001a82 <HC05_Merge_bytes>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	809a      	strh	r2, [r3, #4]
	_data->Madgwick_filter_beta = HC05_Merge_bytes(_frame[6], _frame[7]);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	3306      	adds	r3, #6
 8001ffc:	781a      	ldrb	r2, [r3, #0]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	3307      	adds	r3, #7
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	4619      	mov	r1, r3
 8002006:	4610      	mov	r0, r2
 8002008:	f7ff fd3b 	bl	8001a82 <HC05_Merge_bytes>
 800200c:	4603      	mov	r3, r0
 800200e:	461a      	mov	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	80da      	strh	r2, [r3, #6]

	/* Additional data */
	_data->Which_filter = _frame[8];
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	3308      	adds	r3, #8
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	b25a      	sxtb	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	731a      	strb	r2, [r3, #12]

	/* CRC test */
	Received_CRC = _frame[9];
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	7a5b      	ldrb	r3, [r3, #9]
 8002024:	73bb      	strb	r3, [r7, #14]
	Actual_CRC = CRC8_DataArray(_frame, DATA_FRAME_FROM_PC_SIZE - 1);
 8002026:	2109      	movs	r1, #9
 8002028:	6838      	ldr	r0, [r7, #0]
 800202a:	f7ff f82d 	bl	8001088 <CRC8_DataArray>
 800202e:	4603      	mov	r3, r0
 8002030:	73fb      	strb	r3, [r7, #15]

	if( Actual_CRC != Received_CRC ) {
 8002032:	7bfa      	ldrb	r2, [r7, #15]
 8002034:	7bbb      	ldrb	r3, [r7, #14]
 8002036:	429a      	cmp	r2, r3
 8002038:	d002      	beq.n	8002040 <HC05_Parse_Data_frame+0xac>

		return -1;
 800203a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800203e:	e000      	b.n	8002042 <HC05_Parse_Data_frame+0xae>
	}

	return 0;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8002050:	4b12      	ldr	r3, [pc, #72]	; (800209c <MX_I2C1_Init+0x50>)
 8002052:	4a13      	ldr	r2, [pc, #76]	; (80020a0 <MX_I2C1_Init+0x54>)
 8002054:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002056:	4b11      	ldr	r3, [pc, #68]	; (800209c <MX_I2C1_Init+0x50>)
 8002058:	4a12      	ldr	r2, [pc, #72]	; (80020a4 <MX_I2C1_Init+0x58>)
 800205a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800205c:	4b0f      	ldr	r3, [pc, #60]	; (800209c <MX_I2C1_Init+0x50>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002062:	4b0e      	ldr	r3, [pc, #56]	; (800209c <MX_I2C1_Init+0x50>)
 8002064:	2200      	movs	r2, #0
 8002066:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002068:	4b0c      	ldr	r3, [pc, #48]	; (800209c <MX_I2C1_Init+0x50>)
 800206a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800206e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002070:	4b0a      	ldr	r3, [pc, #40]	; (800209c <MX_I2C1_Init+0x50>)
 8002072:	2200      	movs	r2, #0
 8002074:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <MX_I2C1_Init+0x50>)
 8002078:	2200      	movs	r2, #0
 800207a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800207c:	4b07      	ldr	r3, [pc, #28]	; (800209c <MX_I2C1_Init+0x50>)
 800207e:	2200      	movs	r2, #0
 8002080:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <MX_I2C1_Init+0x50>)
 8002084:	2200      	movs	r2, #0
 8002086:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002088:	4804      	ldr	r0, [pc, #16]	; (800209c <MX_I2C1_Init+0x50>)
 800208a:	f002 f8c1 	bl	8004210 <HAL_I2C_Init>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002094:	f000 f8f0 	bl	8002278 <Error_Handler>
  }

}
 8002098:	bf00      	nop
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20003434 	.word	0x20003434
 80020a0:	40005400 	.word	0x40005400
 80020a4:	000186a0 	.word	0x000186a0

080020a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b0:	f107 0310 	add.w	r3, r7, #16
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
 80020b8:	605a      	str	r2, [r3, #4]
 80020ba:	609a      	str	r2, [r3, #8]
 80020bc:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a3b      	ldr	r2, [pc, #236]	; (80021b0 <HAL_I2C_MspInit+0x108>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d16f      	bne.n	80021a8 <HAL_I2C_MspInit+0x100>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c8:	4b3a      	ldr	r3, [pc, #232]	; (80021b4 <HAL_I2C_MspInit+0x10c>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	4a39      	ldr	r2, [pc, #228]	; (80021b4 <HAL_I2C_MspInit+0x10c>)
 80020ce:	f043 0308 	orr.w	r3, r3, #8
 80020d2:	6193      	str	r3, [r2, #24]
 80020d4:	4b37      	ldr	r3, [pc, #220]	; (80021b4 <HAL_I2C_MspInit+0x10c>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	f003 0308 	and.w	r3, r3, #8
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_MPU9250_SCL_Pin|I2C1_MPU9250_SDA_Pin;
 80020e0:	23c0      	movs	r3, #192	; 0xc0
 80020e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020e4:	2312      	movs	r3, #18
 80020e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020e8:	2303      	movs	r3, #3
 80020ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ec:	f107 0310 	add.w	r3, r7, #16
 80020f0:	4619      	mov	r1, r3
 80020f2:	4831      	ldr	r0, [pc, #196]	; (80021b8 <HAL_I2C_MspInit+0x110>)
 80020f4:	f001 fee0 	bl	8003eb8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020f8:	4b2e      	ldr	r3, [pc, #184]	; (80021b4 <HAL_I2C_MspInit+0x10c>)
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	4a2d      	ldr	r2, [pc, #180]	; (80021b4 <HAL_I2C_MspInit+0x10c>)
 80020fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002102:	61d3      	str	r3, [r2, #28]
 8002104:	4b2b      	ldr	r3, [pc, #172]	; (80021b4 <HAL_I2C_MspInit+0x10c>)
 8002106:	69db      	ldr	r3, [r3, #28]
 8002108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	68bb      	ldr	r3, [r7, #8]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8002110:	4b2a      	ldr	r3, [pc, #168]	; (80021bc <HAL_I2C_MspInit+0x114>)
 8002112:	4a2b      	ldr	r2, [pc, #172]	; (80021c0 <HAL_I2C_MspInit+0x118>)
 8002114:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002116:	4b29      	ldr	r3, [pc, #164]	; (80021bc <HAL_I2C_MspInit+0x114>)
 8002118:	2200      	movs	r2, #0
 800211a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800211c:	4b27      	ldr	r3, [pc, #156]	; (80021bc <HAL_I2C_MspInit+0x114>)
 800211e:	2200      	movs	r2, #0
 8002120:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002122:	4b26      	ldr	r3, [pc, #152]	; (80021bc <HAL_I2C_MspInit+0x114>)
 8002124:	2280      	movs	r2, #128	; 0x80
 8002126:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002128:	4b24      	ldr	r3, [pc, #144]	; (80021bc <HAL_I2C_MspInit+0x114>)
 800212a:	2200      	movs	r2, #0
 800212c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800212e:	4b23      	ldr	r3, [pc, #140]	; (80021bc <HAL_I2C_MspInit+0x114>)
 8002130:	2200      	movs	r2, #0
 8002132:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002134:	4b21      	ldr	r3, [pc, #132]	; (80021bc <HAL_I2C_MspInit+0x114>)
 8002136:	2200      	movs	r2, #0
 8002138:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800213a:	4b20      	ldr	r3, [pc, #128]	; (80021bc <HAL_I2C_MspInit+0x114>)
 800213c:	2200      	movs	r2, #0
 800213e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002140:	481e      	ldr	r0, [pc, #120]	; (80021bc <HAL_I2C_MspInit+0x114>)
 8002142:	f001 fc55 	bl	80039f0 <HAL_DMA_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 800214c:	f000 f894 	bl	8002278 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a1a      	ldr	r2, [pc, #104]	; (80021bc <HAL_I2C_MspInit+0x114>)
 8002154:	639a      	str	r2, [r3, #56]	; 0x38
 8002156:	4a19      	ldr	r2, [pc, #100]	; (80021bc <HAL_I2C_MspInit+0x114>)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800215c:	4b19      	ldr	r3, [pc, #100]	; (80021c4 <HAL_I2C_MspInit+0x11c>)
 800215e:	4a1a      	ldr	r2, [pc, #104]	; (80021c8 <HAL_I2C_MspInit+0x120>)
 8002160:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002162:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <HAL_I2C_MspInit+0x11c>)
 8002164:	2210      	movs	r2, #16
 8002166:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002168:	4b16      	ldr	r3, [pc, #88]	; (80021c4 <HAL_I2C_MspInit+0x11c>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800216e:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <HAL_I2C_MspInit+0x11c>)
 8002170:	2280      	movs	r2, #128	; 0x80
 8002172:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002174:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <HAL_I2C_MspInit+0x11c>)
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800217a:	4b12      	ldr	r3, [pc, #72]	; (80021c4 <HAL_I2C_MspInit+0x11c>)
 800217c:	2200      	movs	r2, #0
 800217e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002180:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <HAL_I2C_MspInit+0x11c>)
 8002182:	2200      	movs	r2, #0
 8002184:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002186:	4b0f      	ldr	r3, [pc, #60]	; (80021c4 <HAL_I2C_MspInit+0x11c>)
 8002188:	2200      	movs	r2, #0
 800218a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800218c:	480d      	ldr	r0, [pc, #52]	; (80021c4 <HAL_I2C_MspInit+0x11c>)
 800218e:	f001 fc2f 	bl	80039f0 <HAL_DMA_Init>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 8002198:	f000 f86e 	bl	8002278 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a09      	ldr	r2, [pc, #36]	; (80021c4 <HAL_I2C_MspInit+0x11c>)
 80021a0:	635a      	str	r2, [r3, #52]	; 0x34
 80021a2:	4a08      	ldr	r2, [pc, #32]	; (80021c4 <HAL_I2C_MspInit+0x11c>)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80021a8:	bf00      	nop
 80021aa:	3720      	adds	r7, #32
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40005400 	.word	0x40005400
 80021b4:	40021000 	.word	0x40021000
 80021b8:	40010c00 	.word	0x40010c00
 80021bc:	20003488 	.word	0x20003488
 80021c0:	40020080 	.word	0x40020080
 80021c4:	200033f0 	.word	0x200033f0
 80021c8:	4002006c 	.word	0x4002006c

080021cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021d0:	f001 fa7c 	bl	80036cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021d4:	f000 f80f 	bl	80021f6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021d8:	f7ff fbc8 	bl	800196c <MX_GPIO_Init>
  MX_DMA_Init();
 80021dc:	f7fe ff76 	bl	80010cc <MX_DMA_Init>
  MX_I2C1_Init();
 80021e0:	f7ff ff34 	bl	800204c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80021e4:	f001 f916 	bl	8003414 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80021e8:	f001 f93e 	bl	8003468 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80021ec:	f7fe ffbc 	bl	8001168 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80021f0:	f004 faff 	bl	80067f2 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021f4:	e7fe      	b.n	80021f4 <main+0x28>

080021f6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b090      	sub	sp, #64	; 0x40
 80021fa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021fc:	f107 0318 	add.w	r3, r7, #24
 8002200:	2228      	movs	r2, #40	; 0x28
 8002202:	2100      	movs	r1, #0
 8002204:	4618      	mov	r0, r3
 8002206:	f005 fcea 	bl	8007bde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	2200      	movs	r2, #0
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	605a      	str	r2, [r3, #4]
 8002212:	609a      	str	r2, [r3, #8]
 8002214:	60da      	str	r2, [r3, #12]
 8002216:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002218:	2302      	movs	r3, #2
 800221a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800221c:	2301      	movs	r3, #1
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002220:	2310      	movs	r3, #16
 8002222:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002224:	2302      	movs	r3, #2
 8002226:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8002228:	2300      	movs	r3, #0
 800222a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800222c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8002230:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002232:	f107 0318 	add.w	r3, r7, #24
 8002236:	4618      	mov	r0, r3
 8002238:	f003 f89a 	bl	8005370 <HAL_RCC_OscConfig>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8002242:	f000 f819 	bl	8002278 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002246:	230f      	movs	r3, #15
 8002248:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800224a:	2302      	movs	r3, #2
 800224c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800224e:	2300      	movs	r3, #0
 8002250:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002256:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800225c:	1d3b      	adds	r3, r7, #4
 800225e:	2102      	movs	r1, #2
 8002260:	4618      	mov	r0, r3
 8002262:	f003 fb05 	bl	8005870 <HAL_RCC_ClockConfig>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800226c:	f000 f804 	bl	8002278 <Error_Handler>
  }
}
 8002270:	bf00      	nop
 8002272:	3740      	adds	r7, #64	; 0x40
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800227c:	bf00      	nop
 800227e:	46bd      	mov	sp, r7
 8002280:	bc80      	pop	{r7}
 8002282:	4770      	bx	lr

08002284 <MPU9250_Accelerometer_Configuration>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

MPU9250_Error_code MPU9250_Accelerometer_Configuration(I2C_HandleTypeDef *I2Cx,
													   struct MPU9250 *mpu,
													   MPU9250_Acce_range Range) {
 8002284:	b580      	push	{r7, lr}
 8002286:	b08a      	sub	sp, #40	; 0x28
 8002288:	af04      	add	r7, sp, #16
 800228a:	60f8      	str	r0, [r7, #12]
 800228c:	60b9      	str	r1, [r7, #8]
 800228e:	4613      	mov	r3, r2
 8002290:	71fb      	strb	r3, [r7, #7]

	uint8_t Byte_temp = 0x00;
 8002292:	2300      	movs	r3, #0
 8002294:	75fb      	strb	r3, [r7, #23]

	/* Case 1: Set accelerometer sensitivity range */
	Byte_temp = Range << 3;
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	b2db      	uxtb	r3, r3
 800229c:	75fb      	strb	r3, [r7, #23]

	if( HAL_I2C_Mem_Write(I2Cx, mpu->Device_addres, MPU9250_ACCEL_CONFIG, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	785b      	ldrb	r3, [r3, #1]
 80022a2:	b299      	uxth	r1, r3
 80022a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022a8:	9302      	str	r3, [sp, #8]
 80022aa:	2301      	movs	r3, #1
 80022ac:	9301      	str	r3, [sp, #4]
 80022ae:	f107 0317 	add.w	r3, r7, #23
 80022b2:	9300      	str	r3, [sp, #0]
 80022b4:	2301      	movs	r3, #1
 80022b6:	221c      	movs	r2, #28
 80022b8:	68f8      	ldr	r0, [r7, #12]
 80022ba:	f002 f8d1 	bl	8004460 <HAL_I2C_Mem_Write>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MPU9250_Accelerometer_Configuration+0x44>

		return MPU9250_Accelerometer_Config_FAIL;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e02b      	b.n	8002320 <MPU9250_Accelerometer_Configuration+0x9c>
		return MPU9250_Accelerometer_Config_FAIL;
	}
	*/

	/* Case 3: Save configuration to data structure */
	if(      Range == MPU9250_Acce_2G )     mpu->Accelerometer_sensitivity_factor = MPU9250_ACCE_SENSITIVITY_FACTOR_2G;
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d104      	bne.n	80022d8 <MPU9250_Accelerometer_Configuration+0x54>
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80022d4:	849a      	strh	r2, [r3, #36]	; 0x24
 80022d6:	e016      	b.n	8002306 <MPU9250_Accelerometer_Configuration+0x82>
	else if( Range == MPU9250_Acce_4G )		mpu->Accelerometer_sensitivity_factor = MPU9250_ACCE_SENSITIVITY_FACTOR_4G;
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d104      	bne.n	80022e8 <MPU9250_Accelerometer_Configuration+0x64>
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022e4:	849a      	strh	r2, [r3, #36]	; 0x24
 80022e6:	e00e      	b.n	8002306 <MPU9250_Accelerometer_Configuration+0x82>
	else if( Range == MPU9250_Acce_8G )		mpu->Accelerometer_sensitivity_factor = MPU9250_ACCE_SENSITIVITY_FACTOR_8G;
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d104      	bne.n	80022f8 <MPU9250_Accelerometer_Configuration+0x74>
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022f4:	849a      	strh	r2, [r3, #36]	; 0x24
 80022f6:	e006      	b.n	8002306 <MPU9250_Accelerometer_Configuration+0x82>
	else if( Range == MPU9250_Acce_16G )	mpu->Accelerometer_sensitivity_factor = MPU9250_ACCE_SENSITIVITY_FACTOR_16G;
 80022f8:	79fb      	ldrb	r3, [r7, #7]
 80022fa:	2b03      	cmp	r3, #3
 80022fc:	d103      	bne.n	8002306 <MPU9250_Accelerometer_Configuration+0x82>
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002304:	849a      	strh	r2, [r3, #36]	; 0x24

	mpu->Accelerometer_X_offset = 0;
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	f04f 0200 	mov.w	r2, #0
 800230c:	62da      	str	r2, [r3, #44]	; 0x2c
	mpu->Accelerometer_Y_offset = 0;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	631a      	str	r2, [r3, #48]	; 0x30
	mpu->Accelerometer_Z_offset = 0;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	f04f 0200 	mov.w	r2, #0
 800231c:	635a      	str	r2, [r3, #52]	; 0x34

	return MPU9250_Accelerometer_Config_OK;
 800231e:	2302      	movs	r3, #2
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <MPU9250_Gyroscope_Configuration>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

MPU9250_Error_code MPU9250_Gyroscope_Configuration(I2C_HandleTypeDef *I2Cx,
												   struct MPU9250 *mpu,
												   MPU9250_Gyro_range Range) {
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	; 0x28
 800232c:	af04      	add	r7, sp, #16
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	4613      	mov	r3, r2
 8002334:	71fb      	strb	r3, [r7, #7]

	uint8_t Byte_temp = 0x00;
 8002336:	2300      	movs	r3, #0
 8002338:	75fb      	strb	r3, [r7, #23]


	/* Case 1: Set gyroscope sensitivity range */
	Byte_temp = Range << 3;
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	75fb      	strb	r3, [r7, #23]

	if( HAL_I2C_Mem_Write(I2Cx, mpu->Device_addres, MPU9250_GYRO_CONFIG, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	785b      	ldrb	r3, [r3, #1]
 8002346:	b299      	uxth	r1, r3
 8002348:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800234c:	9302      	str	r3, [sp, #8]
 800234e:	2301      	movs	r3, #1
 8002350:	9301      	str	r3, [sp, #4]
 8002352:	f107 0317 	add.w	r3, r7, #23
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	2301      	movs	r3, #1
 800235a:	221b      	movs	r2, #27
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f002 f87f 	bl	8004460 <HAL_I2C_Mem_Write>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MPU9250_Gyroscope_Configuration+0x44>

		return MPU9250_Gyroscope_Config_FAIL;
 8002368:	2305      	movs	r3, #5
 800236a:	e03e      	b.n	80023ea <MPU9250_Gyroscope_Configuration+0xc2>
	}

	/* Case 2: Set gyroscope low pass filter cut-off frequency */
	Byte_temp = 0x0E;
 800236c:	230e      	movs	r3, #14
 800236e:	75fb      	strb	r3, [r7, #23]

	if( HAL_I2C_Mem_Write(I2Cx, mpu->Device_addres, MPU9250_CONFIG, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	785b      	ldrb	r3, [r3, #1]
 8002374:	b299      	uxth	r1, r3
 8002376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800237a:	9302      	str	r3, [sp, #8]
 800237c:	2301      	movs	r3, #1
 800237e:	9301      	str	r3, [sp, #4]
 8002380:	f107 0317 	add.w	r3, r7, #23
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	2301      	movs	r3, #1
 8002388:	221a      	movs	r2, #26
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f002 f868 	bl	8004460 <HAL_I2C_Mem_Write>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <MPU9250_Gyroscope_Configuration+0x72>

		return MPU9250_Gyroscope_Config_FAIL;
 8002396:	2305      	movs	r3, #5
 8002398:	e027      	b.n	80023ea <MPU9250_Gyroscope_Configuration+0xc2>
	}

	/* Case 3: Save configuration to data structure */
	if(      Range == MPU9250_Gyro_250s )   mpu->Gyroscope_sensitivity_factor = MPU9250_GYRO_SENSITIVITY_FACTOR_250s;
 800239a:	79fb      	ldrb	r3, [r7, #7]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d103      	bne.n	80023a8 <MPU9250_Gyroscope_Configuration+0x80>
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2283      	movs	r2, #131	; 0x83
 80023a4:	805a      	strh	r2, [r3, #2]
 80023a6:	e013      	b.n	80023d0 <MPU9250_Gyroscope_Configuration+0xa8>
	else if( Range == MPU9250_Gyro_500s )	mpu->Gyroscope_sensitivity_factor = MPU9250_GYRO_SENSITIVITY_FACTOR_500s;
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d103      	bne.n	80023b6 <MPU9250_Gyroscope_Configuration+0x8e>
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2241      	movs	r2, #65	; 0x41
 80023b2:	805a      	strh	r2, [r3, #2]
 80023b4:	e00c      	b.n	80023d0 <MPU9250_Gyroscope_Configuration+0xa8>
	else if( Range == MPU9250_Gyro_1000s )	mpu->Gyroscope_sensitivity_factor = MPU9250_GYRO_SENSITIVITY_FACTOR_1000s;
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d103      	bne.n	80023c4 <MPU9250_Gyroscope_Configuration+0x9c>
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	2220      	movs	r2, #32
 80023c0:	805a      	strh	r2, [r3, #2]
 80023c2:	e005      	b.n	80023d0 <MPU9250_Gyroscope_Configuration+0xa8>
	else if( Range == MPU9250_Gyro_2000s )	mpu->Gyroscope_sensitivity_factor = MPU9250_GYRO_SENSITIVITY_FACTOR_2000s;
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d102      	bne.n	80023d0 <MPU9250_Gyroscope_Configuration+0xa8>
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	2210      	movs	r2, #16
 80023ce:	805a      	strh	r2, [r3, #2]

	mpu->Gyroscope_X_offset = 0;
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	60da      	str	r2, [r3, #12]
	mpu->Gyroscope_Y_offset = 0;
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	f04f 0200 	mov.w	r2, #0
 80023de:	611a      	str	r2, [r3, #16]
	mpu->Gyroscope_Z_offset = 0;
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f04f 0200 	mov.w	r2, #0
 80023e6:	615a      	str	r2, [r3, #20]

	return MPU9250_Gyroscope_Config_OK;
 80023e8:	2304      	movs	r3, #4

}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <MPU9250_Magnetometer_Configuration>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

MPU9250_Error_code MPU9250_Magnetometer_Configuration(I2C_HandleTypeDef *I2Cx,
												      struct MPU9250 *mpu) {
 80023f4:	b590      	push	{r4, r7, lr}
 80023f6:	b089      	sub	sp, #36	; 0x24
 80023f8:	af04      	add	r7, sp, #16
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]


	uint8_t Byte_temp = 0x00;
 80023fe:	2300      	movs	r3, #0
 8002400:	73fb      	strb	r3, [r7, #15]
	uint8_t Bytes_temp[3] = {0};
 8002402:	f107 030c 	add.w	r3, r7, #12
 8002406:	2100      	movs	r1, #0
 8002408:	460a      	mov	r2, r1
 800240a:	801a      	strh	r2, [r3, #0]
 800240c:	460a      	mov	r2, r1
 800240e:	709a      	strb	r2, [r3, #2]

	mpu->Magnetometer_addres = 0x0C << 1;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	2218      	movs	r2, #24
 8002414:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
	mpu->Magnetometer_sesitivity_factor = 0.1499; /* 4912/32768 */
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	4a9b      	ldr	r2, [pc, #620]	; (8002688 <MPU9250_Magnetometer_Configuration+0x294>)
 800241c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

	// Case 2: Disable the I2C master interface
	Byte_temp = 0x00;
 8002420:	2300      	movs	r3, #0
 8002422:	73fb      	strb	r3, [r7, #15]

	if( HAL_I2C_Mem_Write(I2Cx, mpu->Device_addres, MPU9250_USER_CTRL, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	785b      	ldrb	r3, [r3, #1]
 8002428:	b299      	uxth	r1, r3
 800242a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800242e:	9302      	str	r3, [sp, #8]
 8002430:	2301      	movs	r3, #1
 8002432:	9301      	str	r3, [sp, #4]
 8002434:	f107 030f 	add.w	r3, r7, #15
 8002438:	9300      	str	r3, [sp, #0]
 800243a:	2301      	movs	r3, #1
 800243c:	226a      	movs	r2, #106	; 0x6a
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f002 f80e 	bl	8004460 <HAL_I2C_Mem_Write>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MPU9250_Magnetometer_Configuration+0x5a>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 800244a:	2307      	movs	r3, #7
 800244c:	e117      	b.n	800267e <MPU9250_Magnetometer_Configuration+0x28a>
	}

	// Case 3: Enable the bypass multiplexer
	Byte_temp = 0x02;
 800244e:	2302      	movs	r3, #2
 8002450:	73fb      	strb	r3, [r7, #15]

	if( HAL_I2C_Mem_Write(I2Cx, mpu->Device_addres, MPU9250_INT_PIN_CFG, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	785b      	ldrb	r3, [r3, #1]
 8002456:	b299      	uxth	r1, r3
 8002458:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800245c:	9302      	str	r3, [sp, #8]
 800245e:	2301      	movs	r3, #1
 8002460:	9301      	str	r3, [sp, #4]
 8002462:	f107 030f 	add.w	r3, r7, #15
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	2301      	movs	r3, #1
 800246a:	2237      	movs	r2, #55	; 0x37
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f001 fff7 	bl	8004460 <HAL_I2C_Mem_Write>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <MPU9250_Magnetometer_Configuration+0x88>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 8002478:	2307      	movs	r3, #7
 800247a:	e100      	b.n	800267e <MPU9250_Magnetometer_Configuration+0x28a>
	}

	// Case 1: Is device connected ?
	if( HAL_I2C_IsDeviceReady(I2Cx, mpu->Magnetometer_addres, 1, 1000) != HAL_OK ) {
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8002482:	b299      	uxth	r1, r3
 8002484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002488:	2201      	movs	r2, #1
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f002 fb18 	bl	8004ac0 <HAL_I2C_IsDeviceReady>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MPU9250_Magnetometer_Configuration+0xa6>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 8002496:	2307      	movs	r3, #7
 8002498:	e0f1      	b.n	800267e <MPU9250_Magnetometer_Configuration+0x28a>
	}

	// Case 2: Who am i test
	if( HAL_I2C_Mem_Read(I2Cx, mpu->Magnetometer_addres, AK9863_WIA, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80024a0:	b299      	uxth	r1, r3
 80024a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024a6:	9302      	str	r3, [sp, #8]
 80024a8:	2301      	movs	r3, #1
 80024aa:	9301      	str	r3, [sp, #4]
 80024ac:	f107 030f 	add.w	r3, r7, #15
 80024b0:	9300      	str	r3, [sp, #0]
 80024b2:	2301      	movs	r3, #1
 80024b4:	2200      	movs	r2, #0
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f002 f8cc 	bl	8004654 <HAL_I2C_Mem_Read>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MPU9250_Magnetometer_Configuration+0xd2>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Init_FAIL;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e0db      	b.n	800267e <MPU9250_Magnetometer_Configuration+0x28a>
	}

	if( Byte_temp != 0x48 ) {
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	2b48      	cmp	r3, #72	; 0x48
 80024ca:	d001      	beq.n	80024d0 <MPU9250_Magnetometer_Configuration+0xdc>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Init_FAIL;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e0d6      	b.n	800267e <MPU9250_Magnetometer_Configuration+0x28a>
	}

	// Case 4: Setup to fuse ROM access mode and 16-bit output
	Byte_temp = 0x1F;
 80024d0:	231f      	movs	r3, #31
 80024d2:	73fb      	strb	r3, [r7, #15]

	if( HAL_I2C_Mem_Write(I2Cx, mpu->Magnetometer_addres, AK9863_CNTL1, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80024da:	b299      	uxth	r1, r3
 80024dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024e0:	9302      	str	r3, [sp, #8]
 80024e2:	2301      	movs	r3, #1
 80024e4:	9301      	str	r3, [sp, #4]
 80024e6:	f107 030f 	add.w	r3, r7, #15
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	2301      	movs	r3, #1
 80024ee:	220a      	movs	r2, #10
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f001 ffb5 	bl	8004460 <HAL_I2C_Mem_Write>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d001      	beq.n	8002500 <MPU9250_Magnetometer_Configuration+0x10c>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 80024fc:	2307      	movs	r3, #7
 80024fe:	e0be      	b.n	800267e <MPU9250_Magnetometer_Configuration+0x28a>
	}

	HAL_Delay(100);
 8002500:	2064      	movs	r0, #100	; 0x64
 8002502:	f001 f945 	bl	8003790 <HAL_Delay>

	// Case 5: Read from the fuse ROM sensitivity adjustment values
	if( HAL_I2C_Mem_Read(I2Cx, mpu->Magnetometer_addres, AK9863_ASAX | 0x80, 1, Bytes_temp, 3, 1000) != HAL_OK ) {
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800250c:	b299      	uxth	r1, r3
 800250e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002512:	9302      	str	r3, [sp, #8]
 8002514:	2303      	movs	r3, #3
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	f107 030c 	add.w	r3, r7, #12
 800251c:	9300      	str	r3, [sp, #0]
 800251e:	2301      	movs	r3, #1
 8002520:	2290      	movs	r2, #144	; 0x90
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f002 f896 	bl	8004654 <HAL_I2C_Mem_Read>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MPU9250_Magnetometer_Configuration+0x13e>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 800252e:	2307      	movs	r3, #7
 8002530:	e0a5      	b.n	800267e <MPU9250_Magnetometer_Configuration+0x28a>
	}

	mpu->Magnetometer_ASAX = ( ( (Bytes_temp[0] - 128) * 0.5 ) / 128 ) + 1;
 8002532:	7b3b      	ldrb	r3, [r7, #12]
 8002534:	3b80      	subs	r3, #128	; 0x80
 8002536:	4618      	mov	r0, r3
 8002538:	f7fd ff5c 	bl	80003f4 <__aeabi_i2d>
 800253c:	f04f 0200 	mov.w	r2, #0
 8002540:	4b52      	ldr	r3, [pc, #328]	; (800268c <MPU9250_Magnetometer_Configuration+0x298>)
 8002542:	f7fd ffc1 	bl	80004c8 <__aeabi_dmul>
 8002546:	4603      	mov	r3, r0
 8002548:	460c      	mov	r4, r1
 800254a:	4618      	mov	r0, r3
 800254c:	4621      	mov	r1, r4
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	4b4f      	ldr	r3, [pc, #316]	; (8002690 <MPU9250_Magnetometer_Configuration+0x29c>)
 8002554:	f7fe f8e2 	bl	800071c <__aeabi_ddiv>
 8002558:	4603      	mov	r3, r0
 800255a:	460c      	mov	r4, r1
 800255c:	4618      	mov	r0, r3
 800255e:	4621      	mov	r1, r4
 8002560:	f04f 0200 	mov.w	r2, #0
 8002564:	4b4b      	ldr	r3, [pc, #300]	; (8002694 <MPU9250_Magnetometer_Configuration+0x2a0>)
 8002566:	f7fd fdf9 	bl	800015c <__adddf3>
 800256a:	4603      	mov	r3, r0
 800256c:	460c      	mov	r4, r1
 800256e:	4618      	mov	r0, r3
 8002570:	4621      	mov	r1, r4
 8002572:	f7fe fa6b 	bl	8000a4c <__aeabi_d2f>
 8002576:	4602      	mov	r2, r0
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
	mpu->Magnetometer_ASAY = ( ( (Bytes_temp[1] - 128) * 0.5 ) / 128 ) + 1;
 800257e:	7b7b      	ldrb	r3, [r7, #13]
 8002580:	3b80      	subs	r3, #128	; 0x80
 8002582:	4618      	mov	r0, r3
 8002584:	f7fd ff36 	bl	80003f4 <__aeabi_i2d>
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	4b3f      	ldr	r3, [pc, #252]	; (800268c <MPU9250_Magnetometer_Configuration+0x298>)
 800258e:	f7fd ff9b 	bl	80004c8 <__aeabi_dmul>
 8002592:	4603      	mov	r3, r0
 8002594:	460c      	mov	r4, r1
 8002596:	4618      	mov	r0, r3
 8002598:	4621      	mov	r1, r4
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	4b3c      	ldr	r3, [pc, #240]	; (8002690 <MPU9250_Magnetometer_Configuration+0x29c>)
 80025a0:	f7fe f8bc 	bl	800071c <__aeabi_ddiv>
 80025a4:	4603      	mov	r3, r0
 80025a6:	460c      	mov	r4, r1
 80025a8:	4618      	mov	r0, r3
 80025aa:	4621      	mov	r1, r4
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	4b38      	ldr	r3, [pc, #224]	; (8002694 <MPU9250_Magnetometer_Configuration+0x2a0>)
 80025b2:	f7fd fdd3 	bl	800015c <__adddf3>
 80025b6:	4603      	mov	r3, r0
 80025b8:	460c      	mov	r4, r1
 80025ba:	4618      	mov	r0, r3
 80025bc:	4621      	mov	r1, r4
 80025be:	f7fe fa45 	bl	8000a4c <__aeabi_d2f>
 80025c2:	4602      	mov	r2, r0
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	mpu->Magnetometer_ASAZ = ( ( (Bytes_temp[2] - 128) * 0.5 ) / 128 ) + 1;
 80025ca:	7bbb      	ldrb	r3, [r7, #14]
 80025cc:	3b80      	subs	r3, #128	; 0x80
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fd ff10 	bl	80003f4 <__aeabi_i2d>
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	4b2c      	ldr	r3, [pc, #176]	; (800268c <MPU9250_Magnetometer_Configuration+0x298>)
 80025da:	f7fd ff75 	bl	80004c8 <__aeabi_dmul>
 80025de:	4603      	mov	r3, r0
 80025e0:	460c      	mov	r4, r1
 80025e2:	4618      	mov	r0, r3
 80025e4:	4621      	mov	r1, r4
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	4b29      	ldr	r3, [pc, #164]	; (8002690 <MPU9250_Magnetometer_Configuration+0x29c>)
 80025ec:	f7fe f896 	bl	800071c <__aeabi_ddiv>
 80025f0:	4603      	mov	r3, r0
 80025f2:	460c      	mov	r4, r1
 80025f4:	4618      	mov	r0, r3
 80025f6:	4621      	mov	r1, r4
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	4b25      	ldr	r3, [pc, #148]	; (8002694 <MPU9250_Magnetometer_Configuration+0x2a0>)
 80025fe:	f7fd fdad 	bl	800015c <__adddf3>
 8002602:	4603      	mov	r3, r0
 8002604:	460c      	mov	r4, r1
 8002606:	4618      	mov	r0, r3
 8002608:	4621      	mov	r1, r4
 800260a:	f7fe fa1f 	bl	8000a4c <__aeabi_d2f>
 800260e:	4602      	mov	r2, r0
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	// Case 6: Reset to power down mode
	Byte_temp = 0x00;
 8002616:	2300      	movs	r3, #0
 8002618:	73fb      	strb	r3, [r7, #15]

	if( HAL_I2C_Mem_Write(I2Cx, mpu->Magnetometer_addres, AK9863_CNTL1, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8002620:	b299      	uxth	r1, r3
 8002622:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002626:	9302      	str	r3, [sp, #8]
 8002628:	2301      	movs	r3, #1
 800262a:	9301      	str	r3, [sp, #4]
 800262c:	f107 030f 	add.w	r3, r7, #15
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2301      	movs	r3, #1
 8002634:	220a      	movs	r2, #10
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f001 ff12 	bl	8004460 <HAL_I2C_Mem_Write>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <MPU9250_Magnetometer_Configuration+0x252>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 8002642:	2307      	movs	r3, #7
 8002644:	e01b      	b.n	800267e <MPU9250_Magnetometer_Configuration+0x28a>
	}

	// Case 7: Enable continuous mode 2 and 16-bit output
	Byte_temp = 0x16; // 0x16
 8002646:	2316      	movs	r3, #22
 8002648:	73fb      	strb	r3, [r7, #15]

	if( HAL_I2C_Mem_Write(I2Cx, mpu->Magnetometer_addres, AK9863_CNTL1, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8002650:	b299      	uxth	r1, r3
 8002652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002656:	9302      	str	r3, [sp, #8]
 8002658:	2301      	movs	r3, #1
 800265a:	9301      	str	r3, [sp, #4]
 800265c:	f107 030f 	add.w	r3, r7, #15
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	2301      	movs	r3, #1
 8002664:	220a      	movs	r2, #10
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f001 fefa 	bl	8004460 <HAL_I2C_Mem_Write>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MPU9250_Magnetometer_Configuration+0x282>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 8002672:	2307      	movs	r3, #7
 8002674:	e003      	b.n	800267e <MPU9250_Magnetometer_Configuration+0x28a>
	}

	HAL_Delay(100);
 8002676:	2064      	movs	r0, #100	; 0x64
 8002678:	f001 f88a 	bl	8003790 <HAL_Delay>

	return MPU9250_Magnetometer_Config_OK;
 800267c:	2306      	movs	r3, #6
}
 800267e:	4618      	mov	r0, r3
 8002680:	3714      	adds	r7, #20
 8002682:	46bd      	mov	sp, r7
 8002684:	bd90      	pop	{r4, r7, pc}
 8002686:	bf00      	nop
 8002688:	3e197f63 	.word	0x3e197f63
 800268c:	3fe00000 	.word	0x3fe00000
 8002690:	40600000 	.word	0x40600000
 8002694:	3ff00000 	.word	0x3ff00000

08002698 <MPU9250_Init>:

MPU9250_Error_code MPU9250_Init(I2C_HandleTypeDef *I2Cx,
								struct MPU9250 *mpu,
								MPU9250_Device_number Number,
								MPU9250_Acce_range Acce_range,
								MPU9250_Gyro_range Gyro_range) {
 8002698:	b580      	push	{r7, lr}
 800269a:	b08a      	sub	sp, #40	; 0x28
 800269c:	af04      	add	r7, sp, #16
 800269e:	60f8      	str	r0, [r7, #12]
 80026a0:	60b9      	str	r1, [r7, #8]
 80026a2:	4611      	mov	r1, r2
 80026a4:	461a      	mov	r2, r3
 80026a6:	460b      	mov	r3, r1
 80026a8:	71fb      	strb	r3, [r7, #7]
 80026aa:	4613      	mov	r3, r2
 80026ac:	71bb      	strb	r3, [r7, #6]

	uint8_t Byte_temp = 0x00;
 80026ae:	2300      	movs	r3, #0
 80026b0:	75fb      	strb	r3, [r7, #23]

	mpu->Device_number = Number;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	79fa      	ldrb	r2, [r7, #7]
 80026b6:	701a      	strb	r2, [r3, #0]
	mpu->Device_addres = (0x68 | mpu->Device_number) << 1;
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	f063 032f 	orn	r3, r3, #47	; 0x2f
 80026c4:	b2da      	uxtb	r2, r3
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	705a      	strb	r2, [r3, #1]

	/* Case 1: Is device connected ? */
	if( HAL_I2C_IsDeviceReady(I2Cx, mpu->Device_addres, 1, 1000) != HAL_OK ) {
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	785b      	ldrb	r3, [r3, #1]
 80026ce:	b299      	uxth	r1, r3
 80026d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026d4:	2201      	movs	r2, #1
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f002 f9f2 	bl	8004ac0 <HAL_I2C_IsDeviceReady>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MPU9250_Init+0x4e>

		return MPU9250_Init_FAIL;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e08a      	b.n	80027fc <MPU9250_Init+0x164>
	}

	/* Case 2: Who am i test */
	if( HAL_I2C_Mem_Read(I2Cx, mpu->Device_addres, MPU9250_WHO_AM_I, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	785b      	ldrb	r3, [r3, #1]
 80026ea:	b299      	uxth	r1, r3
 80026ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026f0:	9302      	str	r3, [sp, #8]
 80026f2:	2301      	movs	r3, #1
 80026f4:	9301      	str	r3, [sp, #4]
 80026f6:	f107 0317 	add.w	r3, r7, #23
 80026fa:	9300      	str	r3, [sp, #0]
 80026fc:	2301      	movs	r3, #1
 80026fe:	2275      	movs	r2, #117	; 0x75
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f001 ffa7 	bl	8004654 <HAL_I2C_Mem_Read>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MPU9250_Init+0x78>

		return MPU9250_Init_FAIL;
 800270c:	2301      	movs	r3, #1
 800270e:	e075      	b.n	80027fc <MPU9250_Init+0x164>
	}

	if( Byte_temp != 0x71 ) {
 8002710:	7dfb      	ldrb	r3, [r7, #23]
 8002712:	2b71      	cmp	r3, #113	; 0x71
 8002714:	d001      	beq.n	800271a <MPU9250_Init+0x82>

		return MPU9250_Init_FAIL;
 8002716:	2301      	movs	r3, #1
 8002718:	e070      	b.n	80027fc <MPU9250_Init+0x164>
	}

	/* Case 3: Wake up */
	Byte_temp = 0x01;
 800271a:	2301      	movs	r3, #1
 800271c:	75fb      	strb	r3, [r7, #23]

	if( HAL_I2C_Mem_Write(I2Cx, mpu->Device_addres, MPU9250_PWR_MGMT_1, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	785b      	ldrb	r3, [r3, #1]
 8002722:	b299      	uxth	r1, r3
 8002724:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002728:	9302      	str	r3, [sp, #8]
 800272a:	2301      	movs	r3, #1
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	f107 0317 	add.w	r3, r7, #23
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	2301      	movs	r3, #1
 8002736:	226b      	movs	r2, #107	; 0x6b
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f001 fe91 	bl	8004460 <HAL_I2C_Mem_Write>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <MPU9250_Init+0xb0>

		return MPU9250_Init_FAIL;
 8002744:	2301      	movs	r3, #1
 8002746:	e059      	b.n	80027fc <MPU9250_Init+0x164>
	}

	/* Case 4: Accelerometer configuration */
	if( MPU9250_Accelerometer_Configuration(I2Cx, mpu, Acce_range) != MPU9250_Accelerometer_Config_OK ) {
 8002748:	79bb      	ldrb	r3, [r7, #6]
 800274a:	461a      	mov	r2, r3
 800274c:	68b9      	ldr	r1, [r7, #8]
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f7ff fd98 	bl	8002284 <MPU9250_Accelerometer_Configuration>
 8002754:	4603      	mov	r3, r0
 8002756:	2b02      	cmp	r3, #2
 8002758:	d001      	beq.n	800275e <MPU9250_Init+0xc6>

		return MPU9250_Accelerometer_Config_FAIL;
 800275a:	2303      	movs	r3, #3
 800275c:	e04e      	b.n	80027fc <MPU9250_Init+0x164>
	}

	/* Case 5: Gyroscope configuration */
	if( MPU9250_Gyroscope_Configuration(I2Cx, mpu, Gyro_range) != MPU9250_Gyroscope_Config_OK ) {
 800275e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002762:	461a      	mov	r2, r3
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	68f8      	ldr	r0, [r7, #12]
 8002768:	f7ff fdde 	bl	8002328 <MPU9250_Gyroscope_Configuration>
 800276c:	4603      	mov	r3, r0
 800276e:	2b04      	cmp	r3, #4
 8002770:	d001      	beq.n	8002776 <MPU9250_Init+0xde>

		return MPU9250_Gyroscope_Config_FAIL;
 8002772:	2305      	movs	r3, #5
 8002774:	e042      	b.n	80027fc <MPU9250_Init+0x164>
	}

	/* Case 6: Magnetometer configuration */
	if( MPU9250_Magnetometer_Configuration(I2Cx, mpu) != MPU9250_Magnetometer_Config_OK ) {
 8002776:	68b9      	ldr	r1, [r7, #8]
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f7ff fe3b 	bl	80023f4 <MPU9250_Magnetometer_Configuration>
 800277e:	4603      	mov	r3, r0
 8002780:	2b06      	cmp	r3, #6
 8002782:	d001      	beq.n	8002788 <MPU9250_Init+0xf0>

		return MPU9250_Magnetometer_Config_FAIL;
 8002784:	2307      	movs	r3, #7
 8002786:	e039      	b.n	80027fc <MPU9250_Init+0x164>
	}

	/* Case 7: Default variables value */
	mpu->Magnetometer_X_scale = 1;
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800278e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	mpu->Magnetometer_Y_scale = 1;
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002798:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	mpu->Magnetometer_Z_scale = 1;
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80027a2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

	mpu->Magnetometer_X_offset = 0;
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	mpu->Magnetometer_Y_offset = 0;
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	mpu->Magnetometer_Z_offset = 0;
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	mpu->Accelerometer_vector_velocity.x = 0;
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	669a      	str	r2, [r3, #104]	; 0x68
	mpu->Accelerometer_vector_velocity.y = 0;
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f04f 0200 	mov.w	r2, #0
 80027d2:	66da      	str	r2, [r3, #108]	; 0x6c
	mpu->Accelerometer_vector_velocity.z = 0;
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	671a      	str	r2, [r3, #112]	; 0x70

	mpu->Accelerometer_vector_position.x = 0;
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	f04f 0200 	mov.w	r2, #0
 80027e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	mpu->Accelerometer_vector_position.y = 0;
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	mpu->Accelerometer_vector_position.z = 0;
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f04f 0200 	mov.w	r2, #0
 80027f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

	return MPU9250_Init_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <MPU9250_Read_Accelerometer>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

MPU9250_Error_code MPU9250_Read_Accelerometer(I2C_HandleTypeDef *I2Cx,
											  struct MPU9250 *mpu) {
 8002804:	b590      	push	{r4, r7, lr}
 8002806:	b089      	sub	sp, #36	; 0x24
 8002808:	af04      	add	r7, sp, #16
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]

	uint8_t Bytes_temp[6] = {0x00};
 800280e:	f107 0308 	add.w	r3, r7, #8
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	809a      	strh	r2, [r3, #4]

	if( HAL_I2C_Mem_Read(I2Cx, mpu->Device_addres, MPU9250_ACCEL_XOUT_H, 1, Bytes_temp , 6, 1000) != HAL_OK ) {
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	785b      	ldrb	r3, [r3, #1]
 800281c:	b299      	uxth	r1, r3
 800281e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002822:	9302      	str	r3, [sp, #8]
 8002824:	2306      	movs	r3, #6
 8002826:	9301      	str	r3, [sp, #4]
 8002828:	f107 0308 	add.w	r3, r7, #8
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	2301      	movs	r3, #1
 8002830:	223b      	movs	r2, #59	; 0x3b
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f001 ff0e 	bl	8004654 <HAL_I2C_Mem_Read>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <MPU9250_Read_Accelerometer+0x3e>

		return MPU9250_Read_Accelerometer_FAIL;
 800283e:	230f      	movs	r3, #15
 8002840:	e084      	b.n	800294c <MPU9250_Read_Accelerometer+0x148>
	}

	mpu->Accelerometer_X = ( Bytes_temp[0] << 8 | Bytes_temp[1] ) - mpu->Accelerometer_X_offset;
 8002842:	7a3b      	ldrb	r3, [r7, #8]
 8002844:	021b      	lsls	r3, r3, #8
 8002846:	7a7a      	ldrb	r2, [r7, #9]
 8002848:	4313      	orrs	r3, r2
 800284a:	4618      	mov	r0, r3
 800284c:	f7fe fa08 	bl	8000c60 <__aeabi_i2f>
 8002850:	4602      	mov	r2, r0
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002856:	4619      	mov	r1, r3
 8002858:	4610      	mov	r0, r2
 800285a:	f7fe f94b 	bl	8000af4 <__aeabi_fsub>
 800285e:	4603      	mov	r3, r0
 8002860:	4618      	mov	r0, r3
 8002862:	f7fe fba1 	bl	8000fa8 <__aeabi_f2iz>
 8002866:	4603      	mov	r3, r0
 8002868:	b21a      	sxth	r2, r3
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	84da      	strh	r2, [r3, #38]	; 0x26
	mpu->Accelerometer_Y = ( Bytes_temp[2] << 8 | Bytes_temp[3] ) - mpu->Accelerometer_Y_offset;
 800286e:	7abb      	ldrb	r3, [r7, #10]
 8002870:	021b      	lsls	r3, r3, #8
 8002872:	7afa      	ldrb	r2, [r7, #11]
 8002874:	4313      	orrs	r3, r2
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe f9f2 	bl	8000c60 <__aeabi_i2f>
 800287c:	4602      	mov	r2, r0
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	4619      	mov	r1, r3
 8002884:	4610      	mov	r0, r2
 8002886:	f7fe f935 	bl	8000af4 <__aeabi_fsub>
 800288a:	4603      	mov	r3, r0
 800288c:	4618      	mov	r0, r3
 800288e:	f7fe fb8b 	bl	8000fa8 <__aeabi_f2iz>
 8002892:	4603      	mov	r3, r0
 8002894:	b21a      	sxth	r2, r3
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	851a      	strh	r2, [r3, #40]	; 0x28
	mpu->Accelerometer_Z = ( Bytes_temp[4] << 8 | Bytes_temp[5] ) - mpu->Accelerometer_Z_offset;
 800289a:	7b3b      	ldrb	r3, [r7, #12]
 800289c:	021b      	lsls	r3, r3, #8
 800289e:	7b7a      	ldrb	r2, [r7, #13]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe f9dc 	bl	8000c60 <__aeabi_i2f>
 80028a8:	4602      	mov	r2, r0
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ae:	4619      	mov	r1, r3
 80028b0:	4610      	mov	r0, r2
 80028b2:	f7fe f91f 	bl	8000af4 <__aeabi_fsub>
 80028b6:	4603      	mov	r3, r0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7fe fb75 	bl	8000fa8 <__aeabi_f2iz>
 80028be:	4603      	mov	r3, r0
 80028c0:	b21a      	sxth	r2, r3
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	855a      	strh	r2, [r3, #42]	; 0x2a

	/* Case x: Calculate g-force values for XYZ axis */
	mpu->Accelerometer_vector_g.x = (float)(mpu->Accelerometer_X) / mpu->Accelerometer_sensitivity_factor;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7fe f9c7 	bl	8000c60 <__aeabi_i2f>
 80028d2:	4604      	mov	r4, r0
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80028da:	4618      	mov	r0, r3
 80028dc:	f7fe f9c0 	bl	8000c60 <__aeabi_i2f>
 80028e0:	4603      	mov	r3, r0
 80028e2:	4619      	mov	r1, r3
 80028e4:	4620      	mov	r0, r4
 80028e6:	f7fe fac3 	bl	8000e70 <__aeabi_fdiv>
 80028ea:	4603      	mov	r3, r0
 80028ec:	461a      	mov	r2, r3
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	639a      	str	r2, [r3, #56]	; 0x38
	mpu->Accelerometer_vector_g.y = (float)(mpu->Accelerometer_Y) / mpu->Accelerometer_sensitivity_factor;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fe f9b1 	bl	8000c60 <__aeabi_i2f>
 80028fe:	4604      	mov	r4, r0
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002906:	4618      	mov	r0, r3
 8002908:	f7fe f9aa 	bl	8000c60 <__aeabi_i2f>
 800290c:	4603      	mov	r3, r0
 800290e:	4619      	mov	r1, r3
 8002910:	4620      	mov	r0, r4
 8002912:	f7fe faad 	bl	8000e70 <__aeabi_fdiv>
 8002916:	4603      	mov	r3, r0
 8002918:	461a      	mov	r2, r3
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	63da      	str	r2, [r3, #60]	; 0x3c
	mpu->Accelerometer_vector_g.z = (float)(mpu->Accelerometer_Z) / mpu->Accelerometer_sensitivity_factor;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8002924:	4618      	mov	r0, r3
 8002926:	f7fe f99b 	bl	8000c60 <__aeabi_i2f>
 800292a:	4604      	mov	r4, r0
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002932:	4618      	mov	r0, r3
 8002934:	f7fe f994 	bl	8000c60 <__aeabi_i2f>
 8002938:	4603      	mov	r3, r0
 800293a:	4619      	mov	r1, r3
 800293c:	4620      	mov	r0, r4
 800293e:	f7fe fa97 	bl	8000e70 <__aeabi_fdiv>
 8002942:	4603      	mov	r3, r0
 8002944:	461a      	mov	r2, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	641a      	str	r2, [r3, #64]	; 0x40

	return MPU9250_Read_Accelerometer_OK;
 800294a:	230e      	movs	r3, #14
}
 800294c:	4618      	mov	r0, r3
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	bd90      	pop	{r4, r7, pc}

08002954 <MPU9250_Read_Gyroscope>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

MPU9250_Error_code MPU9250_Read_Gyroscope(I2C_HandleTypeDef *I2Cx,
										  struct MPU9250 *mpu) {
 8002954:	b590      	push	{r4, r7, lr}
 8002956:	b089      	sub	sp, #36	; 0x24
 8002958:	af04      	add	r7, sp, #16
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]

	uint8_t Bytes_temp[6] = { 0x00 };
 800295e:	f107 0308 	add.w	r3, r7, #8
 8002962:	2200      	movs	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
 8002966:	809a      	strh	r2, [r3, #4]

	if (HAL_I2C_Mem_Read(I2Cx, mpu->Device_addres, MPU9250_GYRO_XOUT_H, 1, Bytes_temp, 6, 1000) != HAL_OK) {
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	785b      	ldrb	r3, [r3, #1]
 800296c:	b299      	uxth	r1, r3
 800296e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002972:	9302      	str	r3, [sp, #8]
 8002974:	2306      	movs	r3, #6
 8002976:	9301      	str	r3, [sp, #4]
 8002978:	f107 0308 	add.w	r3, r7, #8
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	2301      	movs	r3, #1
 8002980:	2243      	movs	r2, #67	; 0x43
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f001 fe66 	bl	8004654 <HAL_I2C_Mem_Read>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <MPU9250_Read_Gyroscope+0x3e>

		return MPU9250_Read_Gyroscope_FAIL;
 800298e:	2311      	movs	r3, #17
 8002990:	e084      	b.n	8002a9c <MPU9250_Read_Gyroscope+0x148>
	}

	mpu->Gyroscope_X = ( Bytes_temp[0] << 8 | Bytes_temp[1] ) - mpu->Gyroscope_X_offset;
 8002992:	7a3b      	ldrb	r3, [r7, #8]
 8002994:	021b      	lsls	r3, r3, #8
 8002996:	7a7a      	ldrb	r2, [r7, #9]
 8002998:	4313      	orrs	r3, r2
 800299a:	4618      	mov	r0, r3
 800299c:	f7fe f960 	bl	8000c60 <__aeabi_i2f>
 80029a0:	4602      	mov	r2, r0
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	4619      	mov	r1, r3
 80029a8:	4610      	mov	r0, r2
 80029aa:	f7fe f8a3 	bl	8000af4 <__aeabi_fsub>
 80029ae:	4603      	mov	r3, r0
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7fe faf9 	bl	8000fa8 <__aeabi_f2iz>
 80029b6:	4603      	mov	r3, r0
 80029b8:	b21a      	sxth	r2, r3
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	809a      	strh	r2, [r3, #4]
	mpu->Gyroscope_Y = ( Bytes_temp[2] << 8 | Bytes_temp[3] ) - mpu->Gyroscope_Y_offset;
 80029be:	7abb      	ldrb	r3, [r7, #10]
 80029c0:	021b      	lsls	r3, r3, #8
 80029c2:	7afa      	ldrb	r2, [r7, #11]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7fe f94a 	bl	8000c60 <__aeabi_i2f>
 80029cc:	4602      	mov	r2, r0
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	4619      	mov	r1, r3
 80029d4:	4610      	mov	r0, r2
 80029d6:	f7fe f88d 	bl	8000af4 <__aeabi_fsub>
 80029da:	4603      	mov	r3, r0
 80029dc:	4618      	mov	r0, r3
 80029de:	f7fe fae3 	bl	8000fa8 <__aeabi_f2iz>
 80029e2:	4603      	mov	r3, r0
 80029e4:	b21a      	sxth	r2, r3
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	80da      	strh	r2, [r3, #6]
	mpu->Gyroscope_Z = ( Bytes_temp[4] << 8 | Bytes_temp[5] ) - mpu->Gyroscope_Z_offset;
 80029ea:	7b3b      	ldrb	r3, [r7, #12]
 80029ec:	021b      	lsls	r3, r3, #8
 80029ee:	7b7a      	ldrb	r2, [r7, #13]
 80029f0:	4313      	orrs	r3, r2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe f934 	bl	8000c60 <__aeabi_i2f>
 80029f8:	4602      	mov	r2, r0
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	4619      	mov	r1, r3
 8002a00:	4610      	mov	r0, r2
 8002a02:	f7fe f877 	bl	8000af4 <__aeabi_fsub>
 8002a06:	4603      	mov	r3, r0
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fe facd 	bl	8000fa8 <__aeabi_f2iz>
 8002a0e:	4603      	mov	r3, r0
 8002a10:	b21a      	sxth	r2, r3
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	811a      	strh	r2, [r3, #8]

	/* Case x: Calculate dgs/s values for XYZ axis */
	mpu->Gyroscope_X_dgs =  (float)(mpu->Gyroscope_X) / mpu->Gyroscope_sensitivity_factor;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fe f91f 	bl	8000c60 <__aeabi_i2f>
 8002a22:	4604      	mov	r4, r0
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fe f918 	bl	8000c60 <__aeabi_i2f>
 8002a30:	4603      	mov	r3, r0
 8002a32:	4619      	mov	r1, r3
 8002a34:	4620      	mov	r0, r4
 8002a36:	f7fe fa1b 	bl	8000e70 <__aeabi_fdiv>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	619a      	str	r2, [r3, #24]
	mpu->Gyroscope_Y_dgs =  (float)(mpu->Gyroscope_Y) / mpu->Gyroscope_sensitivity_factor;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fe f909 	bl	8000c60 <__aeabi_i2f>
 8002a4e:	4604      	mov	r4, r0
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fe f902 	bl	8000c60 <__aeabi_i2f>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4620      	mov	r0, r4
 8002a62:	f7fe fa05 	bl	8000e70 <__aeabi_fdiv>
 8002a66:	4603      	mov	r3, r0
 8002a68:	461a      	mov	r2, r3
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	61da      	str	r2, [r3, #28]
	mpu->Gyroscope_Z_dgs =  (float)(mpu->Gyroscope_Z) / mpu->Gyroscope_sensitivity_factor;
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7fe f8f3 	bl	8000c60 <__aeabi_i2f>
 8002a7a:	4604      	mov	r4, r0
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe f8ec 	bl	8000c60 <__aeabi_i2f>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	f7fe f9ef 	bl	8000e70 <__aeabi_fdiv>
 8002a92:	4603      	mov	r3, r0
 8002a94:	461a      	mov	r2, r3
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	621a      	str	r2, [r3, #32]

	return MPU9250_Read_Gyroscope_OK;
 8002a9a:	2310      	movs	r3, #16
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd90      	pop	{r4, r7, pc}

08002aa4 <MPU9250_Read_Magnetometer>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

MPU9250_Error_code MPU9250_Read_Magnetometer(I2C_HandleTypeDef *I2Cx,
										     struct MPU9250 *mpu) {
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08c      	sub	sp, #48	; 0x30
 8002aa8:	af04      	add	r7, sp, #16
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]

	uint8_t Bytes_temp[8] = { 0x00 };
 8002aae:	f107 030c 	add.w	r3, r7, #12
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	605a      	str	r2, [r3, #4]

	/* Case x: Read measured values from registers */
	if( HAL_I2C_Mem_Read(I2Cx, mpu->Magnetometer_addres, AK9863_ST1, 1, Bytes_temp, 8, 1000) != HAL_OK ) {
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8002abe:	b299      	uxth	r1, r3
 8002ac0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ac4:	9302      	str	r3, [sp, #8]
 8002ac6:	2308      	movs	r3, #8
 8002ac8:	9301      	str	r3, [sp, #4]
 8002aca:	f107 030c 	add.w	r3, r7, #12
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f001 fdbd 	bl	8004654 <HAL_I2C_Mem_Read>
 8002ada:	4603      	mov	r3, r0
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d001      	beq.n	8002ae4 <MPU9250_Read_Magnetometer+0x40>

		return MPU9250_Read_Magnetometer_FAIL;
 8002ae0:	2313      	movs	r3, #19
 8002ae2:	e0d1      	b.n	8002c88 <MPU9250_Read_Magnetometer+0x1e4>
	if( Bytes_temp[0] & 0x00 ) {

		return MPU9250_Read_Magnetometer_FAIL;
	}

	mpu->Magnetometer_X = ( ( Bytes_temp[2] << 8 | Bytes_temp[1] ) - mpu->Magnetometer_X_offset );
 8002ae4:	7bbb      	ldrb	r3, [r7, #14]
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	7b7a      	ldrb	r2, [r7, #13]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fe f8b7 	bl	8000c60 <__aeabi_i2f>
 8002af2:	4602      	mov	r2, r0
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002afa:	4619      	mov	r1, r3
 8002afc:	4610      	mov	r0, r2
 8002afe:	f7fd fff9 	bl	8000af4 <__aeabi_fsub>
 8002b02:	4603      	mov	r3, r0
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fe fa4f 	bl	8000fa8 <__aeabi_f2iz>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	b21a      	sxth	r2, r3
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	mpu->Magnetometer_Y = ( ( Bytes_temp[4] << 8 | Bytes_temp[3] ) - mpu->Magnetometer_Y_offset );
 8002b14:	7c3b      	ldrb	r3, [r7, #16]
 8002b16:	021b      	lsls	r3, r3, #8
 8002b18:	7bfa      	ldrb	r2, [r7, #15]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fe f89f 	bl	8000c60 <__aeabi_i2f>
 8002b22:	4602      	mov	r2, r0
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4610      	mov	r0, r2
 8002b2e:	f7fd ffe1 	bl	8000af4 <__aeabi_fsub>
 8002b32:	4603      	mov	r3, r0
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7fe fa37 	bl	8000fa8 <__aeabi_f2iz>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	b21a      	sxth	r2, r3
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	mpu->Magnetometer_Z = ( ( Bytes_temp[6] << 8 | Bytes_temp[5] ) - mpu->Magnetometer_Z_offset );
 8002b44:	7cbb      	ldrb	r3, [r7, #18]
 8002b46:	021b      	lsls	r3, r3, #8
 8002b48:	7c7a      	ldrb	r2, [r7, #17]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fe f887 	bl	8000c60 <__aeabi_i2f>
 8002b52:	4602      	mov	r2, r0
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	f7fd ffc9 	bl	8000af4 <__aeabi_fsub>
 8002b62:	4603      	mov	r3, r0
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fe fa1f 	bl	8000fa8 <__aeabi_f2iz>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	b21a      	sxth	r2, r3
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8

	/* Case x: Calculate uT (micro Tesla) value for XYZ axis */
	mpu->Magnetometer_X_uT = mpu->Magnetometer_X * mpu->Magnetometer_ASAX * mpu->Magnetometer_sesitivity_factor * mpu->Magnetometer_X_scale;
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	f9b3 30a4 	ldrsh.w	r3, [r3, #164]	; 0xa4
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fe f870 	bl	8000c60 <__aeabi_i2f>
 8002b80:	4602      	mov	r2, r0
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4610      	mov	r0, r2
 8002b8c:	f7fe f8bc 	bl	8000d08 <__aeabi_fmul>
 8002b90:	4603      	mov	r3, r0
 8002b92:	461a      	mov	r2, r3
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	f7fe f8b3 	bl	8000d08 <__aeabi_fmul>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8002bac:	4619      	mov	r1, r3
 8002bae:	4610      	mov	r0, r2
 8002bb0:	f7fe f8aa 	bl	8000d08 <__aeabi_fmul>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	mpu->Magnetometer_Y_uT = mpu->Magnetometer_Y * mpu->Magnetometer_ASAY * mpu->Magnetometer_sesitivity_factor * mpu->Magnetometer_Y_scale;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	f9b3 30a6 	ldrsh.w	r3, [r3, #166]	; 0xa6
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe f84b 	bl	8000c60 <__aeabi_i2f>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4610      	mov	r0, r2
 8002bd6:	f7fe f897 	bl	8000d08 <__aeabi_fmul>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	461a      	mov	r2, r3
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be4:	4619      	mov	r1, r3
 8002be6:	4610      	mov	r0, r2
 8002be8:	f7fe f88e 	bl	8000d08 <__aeabi_fmul>
 8002bec:	4603      	mov	r3, r0
 8002bee:	461a      	mov	r2, r3
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4610      	mov	r0, r2
 8002bfa:	f7fe f885 	bl	8000d08 <__aeabi_fmul>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	461a      	mov	r2, r3
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	mpu->Magnetometer_Z_uT = mpu->Magnetometer_Z * mpu->Magnetometer_ASAZ * mpu->Magnetometer_sesitivity_factor * mpu->Magnetometer_Z_scale;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	f9b3 30a8 	ldrsh.w	r3, [r3, #168]	; 0xa8
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe f826 	bl	8000c60 <__aeabi_i2f>
 8002c14:	4602      	mov	r2, r0
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4610      	mov	r0, r2
 8002c20:	f7fe f872 	bl	8000d08 <__aeabi_fmul>
 8002c24:	4603      	mov	r3, r0
 8002c26:	461a      	mov	r2, r3
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4610      	mov	r0, r2
 8002c32:	f7fe f869 	bl	8000d08 <__aeabi_fmul>
 8002c36:	4603      	mov	r3, r0
 8002c38:	461a      	mov	r2, r3
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002c40:	4619      	mov	r1, r3
 8002c42:	4610      	mov	r0, r2
 8002c44:	f7fe f860 	bl	8000d08 <__aeabi_fmul>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	float a = mpu->Magnetometer_X_uT;
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8002c58:	61fb      	str	r3, [r7, #28]
	float b = mpu->Magnetometer_Y_uT;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002c60:	61bb      	str	r3, [r7, #24]
	float c = mpu->Magnetometer_Z_uT;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002c68:	617b      	str	r3, [r7, #20]

	mpu->Magnetometer_X_uT = b;
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	mpu->Magnetometer_Y_uT = a;
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	mpu->Magnetometer_Z_uT = -c;
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	return MPU9250_Read_Magnetometer_OK;
 8002c86:	2312      	movs	r3, #18
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3720      	adds	r7, #32
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <MPU9250_Calibration_Acce>:

/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

void MPU9250_Calibration_Acce(I2C_HandleTypeDef *I2Cx,
	      	  	  	  	  	  	  	        struct MPU9250 *mpu) {
 8002c90:	b590      	push	{r4, r7, lr}
 8002c92:	b087      	sub	sp, #28
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]

	float Acce_X_offset = 0, Acce_Y_offset = 0, Acce_Z_offset = 0;
 8002c9a:	f04f 0300 	mov.w	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	f04f 0300 	mov.w	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 1000; ++i) {
 8002cac:	2300      	movs	r3, #0
 8002cae:	60bb      	str	r3, [r7, #8]
 8002cb0:	e02d      	b.n	8002d0e <MPU9250_Calibration_Acce+0x7e>

		MPU9250_Read_Accelerometer(I2Cx, mpu);
 8002cb2:	6839      	ldr	r1, [r7, #0]
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff fda5 	bl	8002804 <MPU9250_Read_Accelerometer>

		Acce_X_offset = Acce_X_offset + mpu->Accelerometer_X;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fd ffcd 	bl	8000c60 <__aeabi_i2f>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	4619      	mov	r1, r3
 8002cca:	6978      	ldr	r0, [r7, #20]
 8002ccc:	f7fd ff14 	bl	8000af8 <__addsf3>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	617b      	str	r3, [r7, #20]
		Acce_Y_offset = Acce_Y_offset + mpu->Accelerometer_Y;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fd ffc0 	bl	8000c60 <__aeabi_i2f>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	6938      	ldr	r0, [r7, #16]
 8002ce6:	f7fd ff07 	bl	8000af8 <__addsf3>
 8002cea:	4603      	mov	r3, r0
 8002cec:	613b      	str	r3, [r7, #16]
		Acce_Z_offset = Acce_Z_offset + mpu->Accelerometer_Z;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f7fd ffb3 	bl	8000c60 <__aeabi_i2f>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f7fd fefa 	bl	8000af8 <__addsf3>
 8002d04:	4603      	mov	r3, r0
 8002d06:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 1000; ++i) {
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d14:	dbcd      	blt.n	8002cb2 <MPU9250_Calibration_Acce+0x22>
	}

	mpu->Accelerometer_X_offset = Acce_X_offset / 1000;
 8002d16:	4916      	ldr	r1, [pc, #88]	; (8002d70 <MPU9250_Calibration_Acce+0xe0>)
 8002d18:	6978      	ldr	r0, [r7, #20]
 8002d1a:	f7fe f8a9 	bl	8000e70 <__aeabi_fdiv>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	461a      	mov	r2, r3
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	62da      	str	r2, [r3, #44]	; 0x2c
	mpu->Accelerometer_Y_offset = Acce_Y_offset / 1000;
 8002d26:	4912      	ldr	r1, [pc, #72]	; (8002d70 <MPU9250_Calibration_Acce+0xe0>)
 8002d28:	6938      	ldr	r0, [r7, #16]
 8002d2a:	f7fe f8a1 	bl	8000e70 <__aeabi_fdiv>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	461a      	mov	r2, r3
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	631a      	str	r2, [r3, #48]	; 0x30
	mpu->Accelerometer_Z_offset = Acce_Z_offset / 1000;
 8002d36:	490e      	ldr	r1, [pc, #56]	; (8002d70 <MPU9250_Calibration_Acce+0xe0>)
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f7fe f899 	bl	8000e70 <__aeabi_fdiv>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	461a      	mov	r2, r3
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	635a      	str	r2, [r3, #52]	; 0x34


	mpu->Accelerometer_Z_offset = mpu->Accelerometer_Z_offset - mpu->Accelerometer_sensitivity_factor;
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fd ff85 	bl	8000c60 <__aeabi_i2f>
 8002d56:	4603      	mov	r3, r0
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	f7fd feca 	bl	8000af4 <__aeabi_fsub>
 8002d60:	4603      	mov	r3, r0
 8002d62:	461a      	mov	r2, r3
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002d68:	bf00      	nop
 8002d6a:	371c      	adds	r7, #28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd90      	pop	{r4, r7, pc}
 8002d70:	447a0000 	.word	0x447a0000

08002d74 <MPU9250_Calibration_Gyro>:

/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

void MPU9250_Calibration_Gyro(I2C_HandleTypeDef *I2Cx,
	      	  	  	  	  	  	  	        struct MPU9250 *mpu) {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]

	float Gyro_X_offset = 0, Gyro_Y_offset = 0, Gyro_Z_offset = 0;
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
 8002d84:	f04f 0300 	mov.w	r3, #0
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 1000; ++i) {
 8002d90:	2300      	movs	r3, #0
 8002d92:	60bb      	str	r3, [r7, #8]
 8002d94:	e02d      	b.n	8002df2 <MPU9250_Calibration_Gyro+0x7e>

		MPU9250_Read_Gyroscope(I2Cx, mpu);
 8002d96:	6839      	ldr	r1, [r7, #0]
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff fddb 	bl	8002954 <MPU9250_Read_Gyroscope>

		Gyro_X_offset += mpu->Gyroscope_X;
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fd ff5b 	bl	8000c60 <__aeabi_i2f>
 8002daa:	4603      	mov	r3, r0
 8002dac:	4619      	mov	r1, r3
 8002dae:	6978      	ldr	r0, [r7, #20]
 8002db0:	f7fd fea2 	bl	8000af8 <__addsf3>
 8002db4:	4603      	mov	r3, r0
 8002db6:	617b      	str	r3, [r7, #20]
		Gyro_Y_offset += mpu->Gyroscope_Y;
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7fd ff4e 	bl	8000c60 <__aeabi_i2f>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	6938      	ldr	r0, [r7, #16]
 8002dca:	f7fd fe95 	bl	8000af8 <__addsf3>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	613b      	str	r3, [r7, #16]
		Gyro_Z_offset += mpu->Gyroscope_Z;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fd ff41 	bl	8000c60 <__aeabi_i2f>
 8002dde:	4603      	mov	r3, r0
 8002de0:	4619      	mov	r1, r3
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f7fd fe88 	bl	8000af8 <__addsf3>
 8002de8:	4603      	mov	r3, r0
 8002dea:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 1000; ++i) {
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	3301      	adds	r3, #1
 8002df0:	60bb      	str	r3, [r7, #8]
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002df8:	dbcd      	blt.n	8002d96 <MPU9250_Calibration_Gyro+0x22>
	}

	mpu->Gyroscope_X_offset = Gyro_X_offset / 1000;
 8002dfa:	490e      	ldr	r1, [pc, #56]	; (8002e34 <MPU9250_Calibration_Gyro+0xc0>)
 8002dfc:	6978      	ldr	r0, [r7, #20]
 8002dfe:	f7fe f837 	bl	8000e70 <__aeabi_fdiv>
 8002e02:	4603      	mov	r3, r0
 8002e04:	461a      	mov	r2, r3
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	60da      	str	r2, [r3, #12]
	mpu->Gyroscope_Y_offset = Gyro_Y_offset / 1000;
 8002e0a:	490a      	ldr	r1, [pc, #40]	; (8002e34 <MPU9250_Calibration_Gyro+0xc0>)
 8002e0c:	6938      	ldr	r0, [r7, #16]
 8002e0e:	f7fe f82f 	bl	8000e70 <__aeabi_fdiv>
 8002e12:	4603      	mov	r3, r0
 8002e14:	461a      	mov	r2, r3
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	611a      	str	r2, [r3, #16]
	mpu->Gyroscope_Z_offset = Gyro_Z_offset / 1000;
 8002e1a:	4906      	ldr	r1, [pc, #24]	; (8002e34 <MPU9250_Calibration_Gyro+0xc0>)
 8002e1c:	68f8      	ldr	r0, [r7, #12]
 8002e1e:	f7fe f827 	bl	8000e70 <__aeabi_fdiv>
 8002e22:	4603      	mov	r3, r0
 8002e24:	461a      	mov	r2, r3
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	615a      	str	r2, [r3, #20]

}
 8002e2a:	bf00      	nop
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	447a0000 	.word	0x447a0000

08002e38 <MPU9250_Set_Offsets>:
void MPU9250_Set_Offsets(I2C_HandleTypeDef *I2Cx,
	      	  	  	  	  	  	  	   struct MPU9250 *mpu,
									   float Acce_X_offset, float Acce_Y_offset, float Acce_Z_offset,
									   float Gyro_X_offset, float Gyro_Y_offset, float Gyro_Z_offset,
									   float Mag_X_offset, float Mag_Y_offset, float Mag_Z_offset,
									   float Mag_X_scale, float Mag_Y_scale, float Mag_Z_scale) {
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	603b      	str	r3, [r7, #0]

	mpu->Accelerometer_X_offset = Acce_X_offset;
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	62da      	str	r2, [r3, #44]	; 0x2c
	mpu->Accelerometer_Y_offset = Acce_Y_offset;
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	631a      	str	r2, [r3, #48]	; 0x30
	mpu->Accelerometer_Z_offset = Acce_Z_offset;
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	635a      	str	r2, [r3, #52]	; 0x34

	mpu->Gyroscope_X_offset = Gyro_X_offset;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	60da      	str	r2, [r3, #12]
	mpu->Gyroscope_Y_offset = Gyro_Y_offset;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	6a3a      	ldr	r2, [r7, #32]
 8002e62:	611a      	str	r2, [r3, #16]
	mpu->Gyroscope_Z_offset = Gyro_Z_offset;
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e68:	615a      	str	r2, [r3, #20]

	mpu->Magnetometer_X_offset = Mag_X_offset;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e6e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
	mpu->Magnetometer_Y_offset = Mag_Y_offset;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e76:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
	mpu->Magnetometer_Z_offset = Mag_Z_offset;
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e7e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	mpu->Magnetometer_X_scale = Mag_X_scale;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e86:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
	mpu->Magnetometer_Y_scale = Mag_Y_scale;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e8e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	mpu->Magnetometer_Z_scale = Mag_Z_scale;
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e96:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 8002e9a:	bf00      	nop
 8002e9c:	3714      	adds	r7, #20
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bc80      	pop	{r7}
 8002ea2:	4770      	bx	lr
 8002ea4:	0000      	movs	r0, r0
	...

08002ea8 <MPU9250_Update>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

void MPU9250_Update(I2C_HandleTypeDef *I2Cx,
				    struct MPU9250 *mpu,
				    float dt) {
 8002ea8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002eac:	b084      	sub	sp, #16
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	60f8      	str	r0, [r7, #12]
 8002eb2:	60b9      	str	r1, [r7, #8]
 8002eb4:	607a      	str	r2, [r7, #4]

	/* Case 1: Read data from AHRS */
	MPU9250_Read_Accelerometer(I2Cx, mpu);
 8002eb6:	68b9      	ldr	r1, [r7, #8]
 8002eb8:	68f8      	ldr	r0, [r7, #12]
 8002eba:	f7ff fca3 	bl	8002804 <MPU9250_Read_Accelerometer>
	MPU9250_Read_Gyroscope(I2Cx, mpu);
 8002ebe:	68b9      	ldr	r1, [r7, #8]
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f7ff fd47 	bl	8002954 <MPU9250_Read_Gyroscope>
	MPU9250_Read_Magnetometer(I2Cx, mpu);
 8002ec6:	68b9      	ldr	r1, [r7, #8]
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f7ff fdeb 	bl	8002aa4 <MPU9250_Read_Magnetometer>

	matrix_to_euler(&madgwick_matrix, &mpu->Madgwick_euler);
	*/

	/* Case 3: Delete g-force vector */
	mpu->Accelerometer_vector_g_offset.x = 0.9 * mpu->Accelerometer_vector_g_offset.x + (1 - 0.9) * mpu->Accelerometer_vector_g.x;
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fd faa0 	bl	8000418 <__aeabi_f2d>
 8002ed8:	a3bb      	add	r3, pc, #748	; (adr r3, 80031c8 <MPU9250_Update+0x320>)
 8002eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ede:	f7fd faf3 	bl	80004c8 <__aeabi_dmul>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	460c      	mov	r4, r1
 8002ee6:	4625      	mov	r5, r4
 8002ee8:	461c      	mov	r4, r3
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fd fa92 	bl	8000418 <__aeabi_f2d>
 8002ef4:	a3b6      	add	r3, pc, #728	; (adr r3, 80031d0 <MPU9250_Update+0x328>)
 8002ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002efa:	f7fd fae5 	bl	80004c8 <__aeabi_dmul>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4620      	mov	r0, r4
 8002f04:	4629      	mov	r1, r5
 8002f06:	f7fd f929 	bl	800015c <__adddf3>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	460c      	mov	r4, r1
 8002f0e:	4618      	mov	r0, r3
 8002f10:	4621      	mov	r1, r4
 8002f12:	f7fd fd9b 	bl	8000a4c <__aeabi_d2f>
 8002f16:	4602      	mov	r2, r0
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	645a      	str	r2, [r3, #68]	; 0x44
	mpu->Accelerometer_vector_g_offset.y = 0.9 * mpu->Accelerometer_vector_g_offset.y + (1 - 0.9) * mpu->Accelerometer_vector_g.y;
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd fa79 	bl	8000418 <__aeabi_f2d>
 8002f26:	a3a8      	add	r3, pc, #672	; (adr r3, 80031c8 <MPU9250_Update+0x320>)
 8002f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2c:	f7fd facc 	bl	80004c8 <__aeabi_dmul>
 8002f30:	4603      	mov	r3, r0
 8002f32:	460c      	mov	r4, r1
 8002f34:	4625      	mov	r5, r4
 8002f36:	461c      	mov	r4, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7fd fa6b 	bl	8000418 <__aeabi_f2d>
 8002f42:	a3a3      	add	r3, pc, #652	; (adr r3, 80031d0 <MPU9250_Update+0x328>)
 8002f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f48:	f7fd fabe 	bl	80004c8 <__aeabi_dmul>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4620      	mov	r0, r4
 8002f52:	4629      	mov	r1, r5
 8002f54:	f7fd f902 	bl	800015c <__adddf3>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	460c      	mov	r4, r1
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	4621      	mov	r1, r4
 8002f60:	f7fd fd74 	bl	8000a4c <__aeabi_d2f>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	649a      	str	r2, [r3, #72]	; 0x48
	mpu->Accelerometer_vector_g_offset.z = 0.9 * mpu->Accelerometer_vector_g_offset.z + (1 - 0.9) * mpu->Accelerometer_vector_g.z;
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7fd fa52 	bl	8000418 <__aeabi_f2d>
 8002f74:	a394      	add	r3, pc, #592	; (adr r3, 80031c8 <MPU9250_Update+0x320>)
 8002f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7a:	f7fd faa5 	bl	80004c8 <__aeabi_dmul>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	460c      	mov	r4, r1
 8002f82:	4625      	mov	r5, r4
 8002f84:	461c      	mov	r4, r3
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7fd fa44 	bl	8000418 <__aeabi_f2d>
 8002f90:	a38f      	add	r3, pc, #572	; (adr r3, 80031d0 <MPU9250_Update+0x328>)
 8002f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f96:	f7fd fa97 	bl	80004c8 <__aeabi_dmul>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	460b      	mov	r3, r1
 8002f9e:	4620      	mov	r0, r4
 8002fa0:	4629      	mov	r1, r5
 8002fa2:	f7fd f8db 	bl	800015c <__adddf3>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	460c      	mov	r4, r1
 8002faa:	4618      	mov	r0, r3
 8002fac:	4621      	mov	r1, r4
 8002fae:	f7fd fd4d 	bl	8000a4c <__aeabi_d2f>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	64da      	str	r2, [r3, #76]	; 0x4c

	mpu->Accelerometer_vector_without_g.x = (mpu->Accelerometer_vector_g.x - mpu->Accelerometer_vector_g_offset.x);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4610      	mov	r0, r2
 8002fc4:	f7fd fd96 	bl	8000af4 <__aeabi_fsub>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	461a      	mov	r2, r3
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	651a      	str	r2, [r3, #80]	; 0x50
	mpu->Accelerometer_vector_without_g.y = (mpu->Accelerometer_vector_g.y - mpu->Accelerometer_vector_g_offset.y);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4610      	mov	r0, r2
 8002fdc:	f7fd fd8a 	bl	8000af4 <__aeabi_fsub>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	655a      	str	r2, [r3, #84]	; 0x54
	mpu->Accelerometer_vector_without_g.z = (mpu->Accelerometer_vector_g.z - mpu->Accelerometer_vector_g_offset.z);
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4610      	mov	r0, r2
 8002ff4:	f7fd fd7e 	bl	8000af4 <__aeabi_fsub>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	659a      	str	r2, [r3, #88]	; 0x58

	/* Case 4: Calculate AHRS velocity */
	if( fabs(mpu->Accelerometer_vector_without_g.x) < 0.05 ) mpu->Accelerometer_vector_velocity.x = 0;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003004:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003008:	4618      	mov	r0, r3
 800300a:	f7fd fa05 	bl	8000418 <__aeabi_f2d>
 800300e:	a372      	add	r3, pc, #456	; (adr r3, 80031d8 <MPU9250_Update+0x330>)
 8003010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003014:	f7fd fcca 	bl	80009ac <__aeabi_dcmplt>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <MPU9250_Update+0x17e>
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	669a      	str	r2, [r3, #104]	; 0x68
	if( fabs(mpu->Accelerometer_vector_without_g.y) < 0.05 ) mpu->Accelerometer_vector_velocity.y = 0;
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800302e:	4618      	mov	r0, r3
 8003030:	f7fd f9f2 	bl	8000418 <__aeabi_f2d>
 8003034:	a368      	add	r3, pc, #416	; (adr r3, 80031d8 <MPU9250_Update+0x330>)
 8003036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303a:	f7fd fcb7 	bl	80009ac <__aeabi_dcmplt>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d003      	beq.n	800304c <MPU9250_Update+0x1a4>
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f04f 0200 	mov.w	r2, #0
 800304a:	66da      	str	r2, [r3, #108]	; 0x6c
	if( fabs(mpu->Accelerometer_vector_without_g.z) < 0.05 ) mpu->Accelerometer_vector_velocity.z = 0;
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003050:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003054:	4618      	mov	r0, r3
 8003056:	f7fd f9df 	bl	8000418 <__aeabi_f2d>
 800305a:	a35f      	add	r3, pc, #380	; (adr r3, 80031d8 <MPU9250_Update+0x330>)
 800305c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003060:	f7fd fca4 	bl	80009ac <__aeabi_dcmplt>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <MPU9250_Update+0x1ca>
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	671a      	str	r2, [r3, #112]	; 0x70

	mpu->Accelerometer_vector_velocity.x += mpu->Accelerometer_vector_without_g.x * G_TO_MS2 * dt;
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003076:	4618      	mov	r0, r3
 8003078:	f7fd f9ce 	bl	8000418 <__aeabi_f2d>
 800307c:	4604      	mov	r4, r0
 800307e:	460d      	mov	r5, r1
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003084:	4618      	mov	r0, r3
 8003086:	f7fd f9c7 	bl	8000418 <__aeabi_f2d>
 800308a:	a355      	add	r3, pc, #340	; (adr r3, 80031e0 <MPU9250_Update+0x338>)
 800308c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003090:	f7fd fa1a 	bl	80004c8 <__aeabi_dmul>
 8003094:	4602      	mov	r2, r0
 8003096:	460b      	mov	r3, r1
 8003098:	4690      	mov	r8, r2
 800309a:	4699      	mov	r9, r3
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f7fd f9bb 	bl	8000418 <__aeabi_f2d>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	4640      	mov	r0, r8
 80030a8:	4649      	mov	r1, r9
 80030aa:	f7fd fa0d 	bl	80004c8 <__aeabi_dmul>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4620      	mov	r0, r4
 80030b4:	4629      	mov	r1, r5
 80030b6:	f7fd f851 	bl	800015c <__adddf3>
 80030ba:	4603      	mov	r3, r0
 80030bc:	460c      	mov	r4, r1
 80030be:	4618      	mov	r0, r3
 80030c0:	4621      	mov	r1, r4
 80030c2:	f7fd fcc3 	bl	8000a4c <__aeabi_d2f>
 80030c6:	4602      	mov	r2, r0
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	669a      	str	r2, [r3, #104]	; 0x68
	mpu->Accelerometer_vector_velocity.y += mpu->Accelerometer_vector_without_g.y * G_TO_MS2 * dt;
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7fd f9a1 	bl	8000418 <__aeabi_f2d>
 80030d6:	4604      	mov	r4, r0
 80030d8:	460d      	mov	r5, r1
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fd f99a 	bl	8000418 <__aeabi_f2d>
 80030e4:	a33e      	add	r3, pc, #248	; (adr r3, 80031e0 <MPU9250_Update+0x338>)
 80030e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ea:	f7fd f9ed 	bl	80004c8 <__aeabi_dmul>
 80030ee:	4602      	mov	r2, r0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4690      	mov	r8, r2
 80030f4:	4699      	mov	r9, r3
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f7fd f98e 	bl	8000418 <__aeabi_f2d>
 80030fc:	4602      	mov	r2, r0
 80030fe:	460b      	mov	r3, r1
 8003100:	4640      	mov	r0, r8
 8003102:	4649      	mov	r1, r9
 8003104:	f7fd f9e0 	bl	80004c8 <__aeabi_dmul>
 8003108:	4602      	mov	r2, r0
 800310a:	460b      	mov	r3, r1
 800310c:	4620      	mov	r0, r4
 800310e:	4629      	mov	r1, r5
 8003110:	f7fd f824 	bl	800015c <__adddf3>
 8003114:	4603      	mov	r3, r0
 8003116:	460c      	mov	r4, r1
 8003118:	4618      	mov	r0, r3
 800311a:	4621      	mov	r1, r4
 800311c:	f7fd fc96 	bl	8000a4c <__aeabi_d2f>
 8003120:	4602      	mov	r2, r0
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	66da      	str	r2, [r3, #108]	; 0x6c
	mpu->Accelerometer_vector_velocity.z += mpu->Accelerometer_vector_without_g.z * G_TO_MS2 * dt;
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312a:	4618      	mov	r0, r3
 800312c:	f7fd f974 	bl	8000418 <__aeabi_f2d>
 8003130:	4604      	mov	r4, r0
 8003132:	460d      	mov	r5, r1
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003138:	4618      	mov	r0, r3
 800313a:	f7fd f96d 	bl	8000418 <__aeabi_f2d>
 800313e:	a328      	add	r3, pc, #160	; (adr r3, 80031e0 <MPU9250_Update+0x338>)
 8003140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003144:	f7fd f9c0 	bl	80004c8 <__aeabi_dmul>
 8003148:	4602      	mov	r2, r0
 800314a:	460b      	mov	r3, r1
 800314c:	4690      	mov	r8, r2
 800314e:	4699      	mov	r9, r3
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7fd f961 	bl	8000418 <__aeabi_f2d>
 8003156:	4602      	mov	r2, r0
 8003158:	460b      	mov	r3, r1
 800315a:	4640      	mov	r0, r8
 800315c:	4649      	mov	r1, r9
 800315e:	f7fd f9b3 	bl	80004c8 <__aeabi_dmul>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	4620      	mov	r0, r4
 8003168:	4629      	mov	r1, r5
 800316a:	f7fc fff7 	bl	800015c <__adddf3>
 800316e:	4603      	mov	r3, r0
 8003170:	460c      	mov	r4, r1
 8003172:	4618      	mov	r0, r3
 8003174:	4621      	mov	r1, r4
 8003176:	f7fd fc69 	bl	8000a4c <__aeabi_d2f>
 800317a:	4602      	mov	r2, r0
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	671a      	str	r2, [r3, #112]	; 0x70

	/* Case 5: Calculate AHRS positon */
	mpu->Accelerometer_vector_position.x += mpu->Accelerometer_vector_velocity.x * dt;
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800318a:	6879      	ldr	r1, [r7, #4]
 800318c:	4618      	mov	r0, r3
 800318e:	f7fd fdbb 	bl	8000d08 <__aeabi_fmul>
 8003192:	4603      	mov	r3, r0
 8003194:	4619      	mov	r1, r3
 8003196:	4620      	mov	r0, r4
 8003198:	f7fd fcae 	bl	8000af8 <__addsf3>
 800319c:	4603      	mov	r3, r0
 800319e:	461a      	mov	r2, r3
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	mpu->Accelerometer_vector_position.y += mpu->Accelerometer_vector_velocity.y * dt;
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd fda8 	bl	8000d08 <__aeabi_fmul>
 80031b8:	4603      	mov	r3, r0
 80031ba:	4619      	mov	r1, r3
 80031bc:	4620      	mov	r0, r4
 80031be:	f7fd fc9b 	bl	8000af8 <__addsf3>
 80031c2:	e011      	b.n	80031e8 <MPU9250_Update+0x340>
 80031c4:	f3af 8000 	nop.w
 80031c8:	cccccccd 	.word	0xcccccccd
 80031cc:	3feccccc 	.word	0x3feccccc
 80031d0:	99999998 	.word	0x99999998
 80031d4:	3fb99999 	.word	0x3fb99999
 80031d8:	9999999a 	.word	0x9999999a
 80031dc:	3fa99999 	.word	0x3fa99999
 80031e0:	ed916873 	.word	0xed916873
 80031e4:	40239f7c 	.word	0x40239f7c
 80031e8:	4603      	mov	r3, r0
 80031ea:	461a      	mov	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	mpu->Accelerometer_vector_position.z += mpu->Accelerometer_vector_velocity.z * dt;
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f8d3 4088 	ldr.w	r4, [r3, #136]	; 0x88
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fd fd82 	bl	8000d08 <__aeabi_fmul>
 8003204:	4603      	mov	r3, r0
 8003206:	4619      	mov	r1, r3
 8003208:	4620      	mov	r0, r4
 800320a:	f7fd fc75 	bl	8000af8 <__addsf3>
 800320e:	4603      	mov	r3, r0
 8003210:	461a      	mov	r2, r3
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8003218:	bf00      	nop
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003222:	bf00      	nop

08003224 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800322a:	4b18      	ldr	r3, [pc, #96]	; (800328c <HAL_MspInit+0x68>)
 800322c:	699b      	ldr	r3, [r3, #24]
 800322e:	4a17      	ldr	r2, [pc, #92]	; (800328c <HAL_MspInit+0x68>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	6193      	str	r3, [r2, #24]
 8003236:	4b15      	ldr	r3, [pc, #84]	; (800328c <HAL_MspInit+0x68>)
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	60bb      	str	r3, [r7, #8]
 8003240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003242:	4b12      	ldr	r3, [pc, #72]	; (800328c <HAL_MspInit+0x68>)
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	4a11      	ldr	r2, [pc, #68]	; (800328c <HAL_MspInit+0x68>)
 8003248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800324c:	61d3      	str	r3, [r2, #28]
 800324e:	4b0f      	ldr	r3, [pc, #60]	; (800328c <HAL_MspInit+0x68>)
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003256:	607b      	str	r3, [r7, #4]
 8003258:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800325a:	2200      	movs	r2, #0
 800325c:	210f      	movs	r1, #15
 800325e:	f06f 0001 	mvn.w	r0, #1
 8003262:	f000 fb8e 	bl	8003982 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003266:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <HAL_MspInit+0x6c>)
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	60fb      	str	r3, [r7, #12]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	4a04      	ldr	r2, [pc, #16]	; (8003290 <HAL_MspInit+0x6c>)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003282:	bf00      	nop
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40021000 	.word	0x40021000
 8003290:	40010000 	.word	0x40010000

08003294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003294:	b480      	push	{r7}
 8003296:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003298:	bf00      	nop
 800329a:	46bd      	mov	sp, r7
 800329c:	bc80      	pop	{r7}
 800329e:	4770      	bx	lr

080032a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032a0:	b480      	push	{r7}
 80032a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032a4:	e7fe      	b.n	80032a4 <HardFault_Handler+0x4>

080032a6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80032a6:	b480      	push	{r7}
 80032a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80032aa:	e7fe      	b.n	80032aa <MemManage_Handler+0x4>

080032ac <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80032b0:	e7fe      	b.n	80032b0 <BusFault_Handler+0x4>

080032b2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80032b2:	b480      	push	{r7}
 80032b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80032b6:	e7fe      	b.n	80032b6 <UsageFault_Handler+0x4>

080032b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80032bc:	bf00      	nop
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr

080032c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032c8:	f000 fa46 	bl	8003758 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80032cc:	f004 f856 	bl	800737c <xTaskGetSchedulerState>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d001      	beq.n	80032da <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80032d6:	f004 fa37 	bl	8007748 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80032e4:	4802      	ldr	r0, [pc, #8]	; (80032f0 <DMA1_Channel4_IRQHandler+0x10>)
 80032e6:	f000 fcb3 	bl	8003c50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80032ea:	bf00      	nop
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	200034cc 	.word	0x200034cc

080032f4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80032f8:	4802      	ldr	r0, [pc, #8]	; (8003304 <DMA1_Channel5_IRQHandler+0x10>)
 80032fa:	f000 fca9 	bl	8003c50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80032fe:	bf00      	nop
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	20003510 	.word	0x20003510

08003308 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800330c:	4802      	ldr	r0, [pc, #8]	; (8003318 <DMA1_Channel6_IRQHandler+0x10>)
 800330e:	f000 fc9f 	bl	8003c50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8003312:	bf00      	nop
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	200033f0 	.word	0x200033f0

0800331c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003320:	4802      	ldr	r0, [pc, #8]	; (800332c <DMA1_Channel7_IRQHandler+0x10>)
 8003322:	f000 fc95 	bl	8003c50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8003326:	bf00      	nop
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	20003488 	.word	0x20003488

08003330 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003334:	4802      	ldr	r0, [pc, #8]	; (8003340 <USART1_IRQHandler+0x10>)
 8003336:	f002 fe09 	bl	8005f4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800333a:	bf00      	nop
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	20003554 	.word	0x20003554

08003344 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003348:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800334c:	f000 ff3e 	bl	80041cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003350:	bf00      	nop
 8003352:	bd80      	pop	{r7, pc}

08003354 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800335c:	4b11      	ldr	r3, [pc, #68]	; (80033a4 <_sbrk+0x50>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d102      	bne.n	800336a <_sbrk+0x16>
		heap_end = &end;
 8003364:	4b0f      	ldr	r3, [pc, #60]	; (80033a4 <_sbrk+0x50>)
 8003366:	4a10      	ldr	r2, [pc, #64]	; (80033a8 <_sbrk+0x54>)
 8003368:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800336a:	4b0e      	ldr	r3, [pc, #56]	; (80033a4 <_sbrk+0x50>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003370:	4b0c      	ldr	r3, [pc, #48]	; (80033a4 <_sbrk+0x50>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4413      	add	r3, r2
 8003378:	466a      	mov	r2, sp
 800337a:	4293      	cmp	r3, r2
 800337c:	d907      	bls.n	800338e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800337e:	f004 fbf9 	bl	8007b74 <__errno>
 8003382:	4602      	mov	r2, r0
 8003384:	230c      	movs	r3, #12
 8003386:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003388:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800338c:	e006      	b.n	800339c <_sbrk+0x48>
	}

	heap_end += incr;
 800338e:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <_sbrk+0x50>)
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4413      	add	r3, r2
 8003396:	4a03      	ldr	r2, [pc, #12]	; (80033a4 <_sbrk+0x50>)
 8003398:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800339a:	68fb      	ldr	r3, [r7, #12]
}
 800339c:	4618      	mov	r0, r3
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	20000364 	.word	0x20000364
 80033a8:	200035e0 	.word	0x200035e0

080033ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80033b0:	4b15      	ldr	r3, [pc, #84]	; (8003408 <SystemInit+0x5c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a14      	ldr	r2, [pc, #80]	; (8003408 <SystemInit+0x5c>)
 80033b6:	f043 0301 	orr.w	r3, r3, #1
 80033ba:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80033bc:	4b12      	ldr	r3, [pc, #72]	; (8003408 <SystemInit+0x5c>)
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	4911      	ldr	r1, [pc, #68]	; (8003408 <SystemInit+0x5c>)
 80033c2:	4b12      	ldr	r3, [pc, #72]	; (800340c <SystemInit+0x60>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80033c8:	4b0f      	ldr	r3, [pc, #60]	; (8003408 <SystemInit+0x5c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a0e      	ldr	r2, [pc, #56]	; (8003408 <SystemInit+0x5c>)
 80033ce:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80033d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <SystemInit+0x5c>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a0a      	ldr	r2, [pc, #40]	; (8003408 <SystemInit+0x5c>)
 80033de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80033e4:	4b08      	ldr	r3, [pc, #32]	; (8003408 <SystemInit+0x5c>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	4a07      	ldr	r2, [pc, #28]	; (8003408 <SystemInit+0x5c>)
 80033ea:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80033ee:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80033f0:	4b05      	ldr	r3, [pc, #20]	; (8003408 <SystemInit+0x5c>)
 80033f2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80033f6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80033f8:	4b05      	ldr	r3, [pc, #20]	; (8003410 <SystemInit+0x64>)
 80033fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80033fe:	609a      	str	r2, [r3, #8]
#endif 
}
 8003400:	bf00      	nop
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr
 8003408:	40021000 	.word	0x40021000
 800340c:	f8ff0000 	.word	0xf8ff0000
 8003410:	e000ed00 	.word	0xe000ed00

08003414 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8003418:	4b11      	ldr	r3, [pc, #68]	; (8003460 <MX_USART1_UART_Init+0x4c>)
 800341a:	4a12      	ldr	r2, [pc, #72]	; (8003464 <MX_USART1_UART_Init+0x50>)
 800341c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800341e:	4b10      	ldr	r3, [pc, #64]	; (8003460 <MX_USART1_UART_Init+0x4c>)
 8003420:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003424:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003426:	4b0e      	ldr	r3, [pc, #56]	; (8003460 <MX_USART1_UART_Init+0x4c>)
 8003428:	2200      	movs	r2, #0
 800342a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800342c:	4b0c      	ldr	r3, [pc, #48]	; (8003460 <MX_USART1_UART_Init+0x4c>)
 800342e:	2200      	movs	r2, #0
 8003430:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003432:	4b0b      	ldr	r3, [pc, #44]	; (8003460 <MX_USART1_UART_Init+0x4c>)
 8003434:	2200      	movs	r2, #0
 8003436:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003438:	4b09      	ldr	r3, [pc, #36]	; (8003460 <MX_USART1_UART_Init+0x4c>)
 800343a:	220c      	movs	r2, #12
 800343c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800343e:	4b08      	ldr	r3, [pc, #32]	; (8003460 <MX_USART1_UART_Init+0x4c>)
 8003440:	2200      	movs	r2, #0
 8003442:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003444:	4b06      	ldr	r3, [pc, #24]	; (8003460 <MX_USART1_UART_Init+0x4c>)
 8003446:	2200      	movs	r2, #0
 8003448:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800344a:	4805      	ldr	r0, [pc, #20]	; (8003460 <MX_USART1_UART_Init+0x4c>)
 800344c:	f002 fbac 	bl	8005ba8 <HAL_UART_Init>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	d001      	beq.n	800345a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003456:	f7fe ff0f 	bl	8002278 <Error_Handler>
  }

}
 800345a:	bf00      	nop
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20003554 	.word	0x20003554
 8003464:	40013800 	.word	0x40013800

08003468 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800346c:	4b11      	ldr	r3, [pc, #68]	; (80034b4 <MX_USART2_UART_Init+0x4c>)
 800346e:	4a12      	ldr	r2, [pc, #72]	; (80034b8 <MX_USART2_UART_Init+0x50>)
 8003470:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003472:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <MX_USART2_UART_Init+0x4c>)
 8003474:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003478:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800347a:	4b0e      	ldr	r3, [pc, #56]	; (80034b4 <MX_USART2_UART_Init+0x4c>)
 800347c:	2200      	movs	r2, #0
 800347e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003480:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <MX_USART2_UART_Init+0x4c>)
 8003482:	2200      	movs	r2, #0
 8003484:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003486:	4b0b      	ldr	r3, [pc, #44]	; (80034b4 <MX_USART2_UART_Init+0x4c>)
 8003488:	2200      	movs	r2, #0
 800348a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800348c:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <MX_USART2_UART_Init+0x4c>)
 800348e:	220c      	movs	r2, #12
 8003490:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003492:	4b08      	ldr	r3, [pc, #32]	; (80034b4 <MX_USART2_UART_Init+0x4c>)
 8003494:	2200      	movs	r2, #0
 8003496:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003498:	4b06      	ldr	r3, [pc, #24]	; (80034b4 <MX_USART2_UART_Init+0x4c>)
 800349a:	2200      	movs	r2, #0
 800349c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800349e:	4805      	ldr	r0, [pc, #20]	; (80034b4 <MX_USART2_UART_Init+0x4c>)
 80034a0:	f002 fb82 	bl	8005ba8 <HAL_UART_Init>
 80034a4:	4603      	mov	r3, r0
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d001      	beq.n	80034ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80034aa:	f7fe fee5 	bl	8002278 <Error_Handler>
  }

}
 80034ae:	bf00      	nop
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20003594 	.word	0x20003594
 80034b8:	40004400 	.word	0x40004400

080034bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b08a      	sub	sp, #40	; 0x28
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c4:	f107 0318 	add.w	r3, r7, #24
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	605a      	str	r2, [r3, #4]
 80034ce:	609a      	str	r2, [r3, #8]
 80034d0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a62      	ldr	r2, [pc, #392]	; (8003660 <HAL_UART_MspInit+0x1a4>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	f040 8087 	bne.w	80035ec <HAL_UART_MspInit+0x130>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80034de:	4b61      	ldr	r3, [pc, #388]	; (8003664 <HAL_UART_MspInit+0x1a8>)
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	4a60      	ldr	r2, [pc, #384]	; (8003664 <HAL_UART_MspInit+0x1a8>)
 80034e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034e8:	6193      	str	r3, [r2, #24]
 80034ea:	4b5e      	ldr	r3, [pc, #376]	; (8003664 <HAL_UART_MspInit+0x1a8>)
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f6:	4b5b      	ldr	r3, [pc, #364]	; (8003664 <HAL_UART_MspInit+0x1a8>)
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	4a5a      	ldr	r2, [pc, #360]	; (8003664 <HAL_UART_MspInit+0x1a8>)
 80034fc:	f043 0304 	orr.w	r3, r3, #4
 8003500:	6193      	str	r3, [r2, #24]
 8003502:	4b58      	ldr	r3, [pc, #352]	; (8003664 <HAL_UART_MspInit+0x1a8>)
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	f003 0304 	and.w	r3, r3, #4
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = USART1_HC05_TX_Pin;
 800350e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003514:	2302      	movs	r3, #2
 8003516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003518:	2303      	movs	r3, #3
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(USART1_HC05_TX_GPIO_Port, &GPIO_InitStruct);
 800351c:	f107 0318 	add.w	r3, r7, #24
 8003520:	4619      	mov	r1, r3
 8003522:	4851      	ldr	r0, [pc, #324]	; (8003668 <HAL_UART_MspInit+0x1ac>)
 8003524:	f000 fcc8 	bl	8003eb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_HC05_RX_Pin;
 8003528:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800352c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003532:	2300      	movs	r3, #0
 8003534:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(USART1_HC05_RX_GPIO_Port, &GPIO_InitStruct);
 8003536:	f107 0318 	add.w	r3, r7, #24
 800353a:	4619      	mov	r1, r3
 800353c:	484a      	ldr	r0, [pc, #296]	; (8003668 <HAL_UART_MspInit+0x1ac>)
 800353e:	f000 fcbb 	bl	8003eb8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003542:	4b4a      	ldr	r3, [pc, #296]	; (800366c <HAL_UART_MspInit+0x1b0>)
 8003544:	4a4a      	ldr	r2, [pc, #296]	; (8003670 <HAL_UART_MspInit+0x1b4>)
 8003546:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003548:	4b48      	ldr	r3, [pc, #288]	; (800366c <HAL_UART_MspInit+0x1b0>)
 800354a:	2200      	movs	r2, #0
 800354c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800354e:	4b47      	ldr	r3, [pc, #284]	; (800366c <HAL_UART_MspInit+0x1b0>)
 8003550:	2200      	movs	r2, #0
 8003552:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003554:	4b45      	ldr	r3, [pc, #276]	; (800366c <HAL_UART_MspInit+0x1b0>)
 8003556:	2280      	movs	r2, #128	; 0x80
 8003558:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800355a:	4b44      	ldr	r3, [pc, #272]	; (800366c <HAL_UART_MspInit+0x1b0>)
 800355c:	2200      	movs	r2, #0
 800355e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003560:	4b42      	ldr	r3, [pc, #264]	; (800366c <HAL_UART_MspInit+0x1b0>)
 8003562:	2200      	movs	r2, #0
 8003564:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003566:	4b41      	ldr	r3, [pc, #260]	; (800366c <HAL_UART_MspInit+0x1b0>)
 8003568:	2200      	movs	r2, #0
 800356a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800356c:	4b3f      	ldr	r3, [pc, #252]	; (800366c <HAL_UART_MspInit+0x1b0>)
 800356e:	2200      	movs	r2, #0
 8003570:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003572:	483e      	ldr	r0, [pc, #248]	; (800366c <HAL_UART_MspInit+0x1b0>)
 8003574:	f000 fa3c 	bl	80039f0 <HAL_DMA_Init>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800357e:	f7fe fe7b 	bl	8002278 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a39      	ldr	r2, [pc, #228]	; (800366c <HAL_UART_MspInit+0x1b0>)
 8003586:	635a      	str	r2, [r3, #52]	; 0x34
 8003588:	4a38      	ldr	r2, [pc, #224]	; (800366c <HAL_UART_MspInit+0x1b0>)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800358e:	4b39      	ldr	r3, [pc, #228]	; (8003674 <HAL_UART_MspInit+0x1b8>)
 8003590:	4a39      	ldr	r2, [pc, #228]	; (8003678 <HAL_UART_MspInit+0x1bc>)
 8003592:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003594:	4b37      	ldr	r3, [pc, #220]	; (8003674 <HAL_UART_MspInit+0x1b8>)
 8003596:	2210      	movs	r2, #16
 8003598:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800359a:	4b36      	ldr	r3, [pc, #216]	; (8003674 <HAL_UART_MspInit+0x1b8>)
 800359c:	2200      	movs	r2, #0
 800359e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80035a0:	4b34      	ldr	r3, [pc, #208]	; (8003674 <HAL_UART_MspInit+0x1b8>)
 80035a2:	2280      	movs	r2, #128	; 0x80
 80035a4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035a6:	4b33      	ldr	r3, [pc, #204]	; (8003674 <HAL_UART_MspInit+0x1b8>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035ac:	4b31      	ldr	r3, [pc, #196]	; (8003674 <HAL_UART_MspInit+0x1b8>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80035b2:	4b30      	ldr	r3, [pc, #192]	; (8003674 <HAL_UART_MspInit+0x1b8>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80035b8:	4b2e      	ldr	r3, [pc, #184]	; (8003674 <HAL_UART_MspInit+0x1b8>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80035be:	482d      	ldr	r0, [pc, #180]	; (8003674 <HAL_UART_MspInit+0x1b8>)
 80035c0:	f000 fa16 	bl	80039f0 <HAL_DMA_Init>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80035ca:	f7fe fe55 	bl	8002278 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a28      	ldr	r2, [pc, #160]	; (8003674 <HAL_UART_MspInit+0x1b8>)
 80035d2:	631a      	str	r2, [r3, #48]	; 0x30
 80035d4:	4a27      	ldr	r2, [pc, #156]	; (8003674 <HAL_UART_MspInit+0x1b8>)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80035da:	2200      	movs	r2, #0
 80035dc:	2105      	movs	r1, #5
 80035de:	2025      	movs	r0, #37	; 0x25
 80035e0:	f000 f9cf 	bl	8003982 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80035e4:	2025      	movs	r0, #37	; 0x25
 80035e6:	f000 f9e8 	bl	80039ba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80035ea:	e034      	b.n	8003656 <HAL_UART_MspInit+0x19a>
  else if(uartHandle->Instance==USART2)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a22      	ldr	r2, [pc, #136]	; (800367c <HAL_UART_MspInit+0x1c0>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d12f      	bne.n	8003656 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80035f6:	4b1b      	ldr	r3, [pc, #108]	; (8003664 <HAL_UART_MspInit+0x1a8>)
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	4a1a      	ldr	r2, [pc, #104]	; (8003664 <HAL_UART_MspInit+0x1a8>)
 80035fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003600:	61d3      	str	r3, [r2, #28]
 8003602:	4b18      	ldr	r3, [pc, #96]	; (8003664 <HAL_UART_MspInit+0x1a8>)
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800360e:	4b15      	ldr	r3, [pc, #84]	; (8003664 <HAL_UART_MspInit+0x1a8>)
 8003610:	699b      	ldr	r3, [r3, #24]
 8003612:	4a14      	ldr	r2, [pc, #80]	; (8003664 <HAL_UART_MspInit+0x1a8>)
 8003614:	f043 0304 	orr.w	r3, r3, #4
 8003618:	6193      	str	r3, [r2, #24]
 800361a:	4b12      	ldr	r3, [pc, #72]	; (8003664 <HAL_UART_MspInit+0x1a8>)
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f003 0304 	and.w	r3, r3, #4
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003626:	2304      	movs	r3, #4
 8003628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362a:	2302      	movs	r3, #2
 800362c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800362e:	2303      	movs	r3, #3
 8003630:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003632:	f107 0318 	add.w	r3, r7, #24
 8003636:	4619      	mov	r1, r3
 8003638:	480b      	ldr	r0, [pc, #44]	; (8003668 <HAL_UART_MspInit+0x1ac>)
 800363a:	f000 fc3d 	bl	8003eb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800363e:	2308      	movs	r3, #8
 8003640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003642:	2300      	movs	r3, #0
 8003644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003646:	2300      	movs	r3, #0
 8003648:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800364a:	f107 0318 	add.w	r3, r7, #24
 800364e:	4619      	mov	r1, r3
 8003650:	4805      	ldr	r0, [pc, #20]	; (8003668 <HAL_UART_MspInit+0x1ac>)
 8003652:	f000 fc31 	bl	8003eb8 <HAL_GPIO_Init>
}
 8003656:	bf00      	nop
 8003658:	3728      	adds	r7, #40	; 0x28
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	40013800 	.word	0x40013800
 8003664:	40021000 	.word	0x40021000
 8003668:	40010800 	.word	0x40010800
 800366c:	20003510 	.word	0x20003510
 8003670:	40020058 	.word	0x40020058
 8003674:	200034cc 	.word	0x200034cc
 8003678:	40020044 	.word	0x40020044
 800367c:	40004400 	.word	0x40004400

08003680 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003680:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003682:	e003      	b.n	800368c <LoopCopyDataInit>

08003684 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003684:	4b0b      	ldr	r3, [pc, #44]	; (80036b4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003686:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003688:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800368a:	3104      	adds	r1, #4

0800368c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800368c:	480a      	ldr	r0, [pc, #40]	; (80036b8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800368e:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003690:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003692:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003694:	d3f6      	bcc.n	8003684 <CopyDataInit>
  ldr r2, =_sbss
 8003696:	4a0a      	ldr	r2, [pc, #40]	; (80036c0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003698:	e002      	b.n	80036a0 <LoopFillZerobss>

0800369a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800369a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800369c:	f842 3b04 	str.w	r3, [r2], #4

080036a0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80036a0:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80036a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80036a4:	d3f9      	bcc.n	800369a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80036a6:	f7ff fe81 	bl	80033ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036aa:	f004 fa69 	bl	8007b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80036ae:	f7fe fd8d 	bl	80021cc <main>
  bx lr
 80036b2:	4770      	bx	lr
  ldr r3, =_sidata
 80036b4:	08008590 	.word	0x08008590
  ldr r0, =_sdata
 80036b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80036bc:	2000007c 	.word	0x2000007c
  ldr r2, =_sbss
 80036c0:	2000007c 	.word	0x2000007c
  ldr r3, = _ebss
 80036c4:	200035dc 	.word	0x200035dc

080036c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036c8:	e7fe      	b.n	80036c8 <ADC1_2_IRQHandler>
	...

080036cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036d0:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <HAL_Init+0x28>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a07      	ldr	r2, [pc, #28]	; (80036f4 <HAL_Init+0x28>)
 80036d6:	f043 0310 	orr.w	r3, r3, #16
 80036da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036dc:	2003      	movs	r0, #3
 80036de:	f000 f945 	bl	800396c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036e2:	200f      	movs	r0, #15
 80036e4:	f000 f808 	bl	80036f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036e8:	f7ff fd9c 	bl	8003224 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	40022000 	.word	0x40022000

080036f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003700:	4b12      	ldr	r3, [pc, #72]	; (800374c <HAL_InitTick+0x54>)
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	4b12      	ldr	r3, [pc, #72]	; (8003750 <HAL_InitTick+0x58>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	4619      	mov	r1, r3
 800370a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800370e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003712:	fbb2 f3f3 	udiv	r3, r2, r3
 8003716:	4618      	mov	r0, r3
 8003718:	f000 f95d 	bl	80039d6 <HAL_SYSTICK_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d001      	beq.n	8003726 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e00e      	b.n	8003744 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b0f      	cmp	r3, #15
 800372a:	d80a      	bhi.n	8003742 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800372c:	2200      	movs	r2, #0
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003734:	f000 f925 	bl	8003982 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003738:	4a06      	ldr	r2, [pc, #24]	; (8003754 <HAL_InitTick+0x5c>)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800373e:	2300      	movs	r3, #0
 8003740:	e000      	b.n	8003744 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
}
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20000008 	.word	0x20000008
 8003750:	20000010 	.word	0x20000010
 8003754:	2000000c 	.word	0x2000000c

08003758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_IncTick+0x1c>)
 800375e:	781b      	ldrb	r3, [r3, #0]
 8003760:	461a      	mov	r2, r3
 8003762:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_IncTick+0x20>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4413      	add	r3, r2
 8003768:	4a03      	ldr	r2, [pc, #12]	; (8003778 <HAL_IncTick+0x20>)
 800376a:	6013      	str	r3, [r2, #0]
}
 800376c:	bf00      	nop
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr
 8003774:	20000010 	.word	0x20000010
 8003778:	200035d4 	.word	0x200035d4

0800377c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return uwTick;
 8003780:	4b02      	ldr	r3, [pc, #8]	; (800378c <HAL_GetTick+0x10>)
 8003782:	681b      	ldr	r3, [r3, #0]
}
 8003784:	4618      	mov	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	200035d4 	.word	0x200035d4

08003790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003798:	f7ff fff0 	bl	800377c <HAL_GetTick>
 800379c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037a8:	d005      	beq.n	80037b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037aa:	4b09      	ldr	r3, [pc, #36]	; (80037d0 <HAL_Delay+0x40>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	461a      	mov	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4413      	add	r3, r2
 80037b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037b6:	bf00      	nop
 80037b8:	f7ff ffe0 	bl	800377c <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d8f7      	bhi.n	80037b8 <HAL_Delay+0x28>
  {
  }
}
 80037c8:	bf00      	nop
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	20000010 	.word	0x20000010

080037d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037e4:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <__NVIC_SetPriorityGrouping+0x44>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037f0:	4013      	ands	r3, r2
 80037f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003806:	4a04      	ldr	r2, [pc, #16]	; (8003818 <__NVIC_SetPriorityGrouping+0x44>)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	60d3      	str	r3, [r2, #12]
}
 800380c:	bf00      	nop
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003820:	4b04      	ldr	r3, [pc, #16]	; (8003834 <__NVIC_GetPriorityGrouping+0x18>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	0a1b      	lsrs	r3, r3, #8
 8003826:	f003 0307 	and.w	r3, r3, #7
}
 800382a:	4618      	mov	r0, r3
 800382c:	46bd      	mov	sp, r7
 800382e:	bc80      	pop	{r7}
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	e000ed00 	.word	0xe000ed00

08003838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003846:	2b00      	cmp	r3, #0
 8003848:	db0b      	blt.n	8003862 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800384a:	79fb      	ldrb	r3, [r7, #7]
 800384c:	f003 021f 	and.w	r2, r3, #31
 8003850:	4906      	ldr	r1, [pc, #24]	; (800386c <__NVIC_EnableIRQ+0x34>)
 8003852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	2001      	movs	r0, #1
 800385a:	fa00 f202 	lsl.w	r2, r0, r2
 800385e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	bc80      	pop	{r7}
 800386a:	4770      	bx	lr
 800386c:	e000e100 	.word	0xe000e100

08003870 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003870:	b480      	push	{r7}
 8003872:	b083      	sub	sp, #12
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	6039      	str	r1, [r7, #0]
 800387a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800387c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003880:	2b00      	cmp	r3, #0
 8003882:	db0a      	blt.n	800389a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	b2da      	uxtb	r2, r3
 8003888:	490c      	ldr	r1, [pc, #48]	; (80038bc <__NVIC_SetPriority+0x4c>)
 800388a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388e:	0112      	lsls	r2, r2, #4
 8003890:	b2d2      	uxtb	r2, r2
 8003892:	440b      	add	r3, r1
 8003894:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003898:	e00a      	b.n	80038b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	b2da      	uxtb	r2, r3
 800389e:	4908      	ldr	r1, [pc, #32]	; (80038c0 <__NVIC_SetPriority+0x50>)
 80038a0:	79fb      	ldrb	r3, [r7, #7]
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	3b04      	subs	r3, #4
 80038a8:	0112      	lsls	r2, r2, #4
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	440b      	add	r3, r1
 80038ae:	761a      	strb	r2, [r3, #24]
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bc80      	pop	{r7}
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	e000e100 	.word	0xe000e100
 80038c0:	e000ed00 	.word	0xe000ed00

080038c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b089      	sub	sp, #36	; 0x24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f1c3 0307 	rsb	r3, r3, #7
 80038de:	2b04      	cmp	r3, #4
 80038e0:	bf28      	it	cs
 80038e2:	2304      	movcs	r3, #4
 80038e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	3304      	adds	r3, #4
 80038ea:	2b06      	cmp	r3, #6
 80038ec:	d902      	bls.n	80038f4 <NVIC_EncodePriority+0x30>
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	3b03      	subs	r3, #3
 80038f2:	e000      	b.n	80038f6 <NVIC_EncodePriority+0x32>
 80038f4:	2300      	movs	r3, #0
 80038f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80038fc:	69bb      	ldr	r3, [r7, #24]
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43da      	mvns	r2, r3
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	401a      	ands	r2, r3
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800390c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	fa01 f303 	lsl.w	r3, r1, r3
 8003916:	43d9      	mvns	r1, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800391c:	4313      	orrs	r3, r2
         );
}
 800391e:	4618      	mov	r0, r3
 8003920:	3724      	adds	r7, #36	; 0x24
 8003922:	46bd      	mov	sp, r7
 8003924:	bc80      	pop	{r7}
 8003926:	4770      	bx	lr

08003928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b082      	sub	sp, #8
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3b01      	subs	r3, #1
 8003934:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003938:	d301      	bcc.n	800393e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800393a:	2301      	movs	r3, #1
 800393c:	e00f      	b.n	800395e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800393e:	4a0a      	ldr	r2, [pc, #40]	; (8003968 <SysTick_Config+0x40>)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3b01      	subs	r3, #1
 8003944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003946:	210f      	movs	r1, #15
 8003948:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800394c:	f7ff ff90 	bl	8003870 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003950:	4b05      	ldr	r3, [pc, #20]	; (8003968 <SysTick_Config+0x40>)
 8003952:	2200      	movs	r2, #0
 8003954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003956:	4b04      	ldr	r3, [pc, #16]	; (8003968 <SysTick_Config+0x40>)
 8003958:	2207      	movs	r2, #7
 800395a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	e000e010 	.word	0xe000e010

0800396c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff ff2d 	bl	80037d4 <__NVIC_SetPriorityGrouping>
}
 800397a:	bf00      	nop
 800397c:	3708      	adds	r7, #8
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003982:	b580      	push	{r7, lr}
 8003984:	b086      	sub	sp, #24
 8003986:	af00      	add	r7, sp, #0
 8003988:	4603      	mov	r3, r0
 800398a:	60b9      	str	r1, [r7, #8]
 800398c:	607a      	str	r2, [r7, #4]
 800398e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003994:	f7ff ff42 	bl	800381c <__NVIC_GetPriorityGrouping>
 8003998:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	68b9      	ldr	r1, [r7, #8]
 800399e:	6978      	ldr	r0, [r7, #20]
 80039a0:	f7ff ff90 	bl	80038c4 <NVIC_EncodePriority>
 80039a4:	4602      	mov	r2, r0
 80039a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039aa:	4611      	mov	r1, r2
 80039ac:	4618      	mov	r0, r3
 80039ae:	f7ff ff5f 	bl	8003870 <__NVIC_SetPriority>
}
 80039b2:	bf00      	nop
 80039b4:	3718      	adds	r7, #24
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b082      	sub	sp, #8
 80039be:	af00      	add	r7, sp, #0
 80039c0:	4603      	mov	r3, r0
 80039c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7ff ff35 	bl	8003838 <__NVIC_EnableIRQ>
}
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}

080039d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b082      	sub	sp, #8
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7ff ffa2 	bl	8003928 <SysTick_Config>
 80039e4:	4603      	mov	r3, r0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3708      	adds	r7, #8
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
	...

080039f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80039f8:	2300      	movs	r3, #0
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e043      	b.n	8003a8e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	4b22      	ldr	r3, [pc, #136]	; (8003a98 <HAL_DMA_Init+0xa8>)
 8003a0e:	4413      	add	r3, r2
 8003a10:	4a22      	ldr	r2, [pc, #136]	; (8003a9c <HAL_DMA_Init+0xac>)
 8003a12:	fba2 2303 	umull	r2, r3, r2, r3
 8003a16:	091b      	lsrs	r3, r3, #4
 8003a18:	009a      	lsls	r2, r3, #2
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a1f      	ldr	r2, [pc, #124]	; (8003aa0 <HAL_DMA_Init+0xb0>)
 8003a22:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a3a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003a3e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003a48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	69db      	ldr	r3, [r3, #28]
 8003a66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3714      	adds	r7, #20
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bc80      	pop	{r7}
 8003a96:	4770      	bx	lr
 8003a98:	bffdfff8 	.word	0xbffdfff8
 8003a9c:	cccccccd 	.word	0xcccccccd
 8003aa0:	40020000 	.word	0x40020000

08003aa4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	60f8      	str	r0, [r7, #12]
 8003aac:	60b9      	str	r1, [r7, #8]
 8003aae:	607a      	str	r2, [r7, #4]
 8003ab0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_DMA_Start_IT+0x20>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e04a      	b.n	8003b5a <HAL_DMA_Start_IT+0xb6>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d13a      	bne.n	8003b4c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2202      	movs	r2, #2
 8003ada:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0201 	bic.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68b9      	ldr	r1, [r7, #8]
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 f9ae 	bl	8003e5c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d008      	beq.n	8003b1a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f042 020e 	orr.w	r2, r2, #14
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	e00f      	b.n	8003b3a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0204 	bic.w	r2, r2, #4
 8003b28:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f042 020a 	orr.w	r2, r2, #10
 8003b38:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681a      	ldr	r2, [r3, #0]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f042 0201 	orr.w	r2, r2, #1
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	e005      	b.n	8003b58 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003b54:	2302      	movs	r3, #2
 8003b56:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d005      	beq.n	8003b86 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2204      	movs	r2, #4
 8003b7e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	73fb      	strb	r3, [r7, #15]
 8003b84:	e051      	b.n	8003c2a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 020e 	bic.w	r2, r2, #14
 8003b94:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 0201 	bic.w	r2, r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a22      	ldr	r2, [pc, #136]	; (8003c34 <HAL_DMA_Abort_IT+0xd0>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d029      	beq.n	8003c04 <HAL_DMA_Abort_IT+0xa0>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a20      	ldr	r2, [pc, #128]	; (8003c38 <HAL_DMA_Abort_IT+0xd4>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d022      	beq.n	8003c00 <HAL_DMA_Abort_IT+0x9c>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a1f      	ldr	r2, [pc, #124]	; (8003c3c <HAL_DMA_Abort_IT+0xd8>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d01a      	beq.n	8003bfa <HAL_DMA_Abort_IT+0x96>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a1d      	ldr	r2, [pc, #116]	; (8003c40 <HAL_DMA_Abort_IT+0xdc>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d012      	beq.n	8003bf4 <HAL_DMA_Abort_IT+0x90>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a1c      	ldr	r2, [pc, #112]	; (8003c44 <HAL_DMA_Abort_IT+0xe0>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00a      	beq.n	8003bee <HAL_DMA_Abort_IT+0x8a>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a1a      	ldr	r2, [pc, #104]	; (8003c48 <HAL_DMA_Abort_IT+0xe4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d102      	bne.n	8003be8 <HAL_DMA_Abort_IT+0x84>
 8003be2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003be6:	e00e      	b.n	8003c06 <HAL_DMA_Abort_IT+0xa2>
 8003be8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bec:	e00b      	b.n	8003c06 <HAL_DMA_Abort_IT+0xa2>
 8003bee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003bf2:	e008      	b.n	8003c06 <HAL_DMA_Abort_IT+0xa2>
 8003bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bf8:	e005      	b.n	8003c06 <HAL_DMA_Abort_IT+0xa2>
 8003bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bfe:	e002      	b.n	8003c06 <HAL_DMA_Abort_IT+0xa2>
 8003c00:	2310      	movs	r3, #16
 8003c02:	e000      	b.n	8003c06 <HAL_DMA_Abort_IT+0xa2>
 8003c04:	2301      	movs	r3, #1
 8003c06:	4a11      	ldr	r2, [pc, #68]	; (8003c4c <HAL_DMA_Abort_IT+0xe8>)
 8003c08:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d003      	beq.n	8003c2a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	4798      	blx	r3
    } 
  }
  return status;
 8003c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	40020008 	.word	0x40020008
 8003c38:	4002001c 	.word	0x4002001c
 8003c3c:	40020030 	.word	0x40020030
 8003c40:	40020044 	.word	0x40020044
 8003c44:	40020058 	.word	0x40020058
 8003c48:	4002006c 	.word	0x4002006c
 8003c4c:	40020000 	.word	0x40020000

08003c50 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6c:	2204      	movs	r2, #4
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4013      	ands	r3, r2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d04f      	beq.n	8003d18 <HAL_DMA_IRQHandler+0xc8>
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	f003 0304 	and.w	r3, r3, #4
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d04a      	beq.n	8003d18 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d107      	bne.n	8003ca0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f022 0204 	bic.w	r2, r2, #4
 8003c9e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a66      	ldr	r2, [pc, #408]	; (8003e40 <HAL_DMA_IRQHandler+0x1f0>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d029      	beq.n	8003cfe <HAL_DMA_IRQHandler+0xae>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a65      	ldr	r2, [pc, #404]	; (8003e44 <HAL_DMA_IRQHandler+0x1f4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d022      	beq.n	8003cfa <HAL_DMA_IRQHandler+0xaa>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a63      	ldr	r2, [pc, #396]	; (8003e48 <HAL_DMA_IRQHandler+0x1f8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d01a      	beq.n	8003cf4 <HAL_DMA_IRQHandler+0xa4>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a62      	ldr	r2, [pc, #392]	; (8003e4c <HAL_DMA_IRQHandler+0x1fc>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d012      	beq.n	8003cee <HAL_DMA_IRQHandler+0x9e>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a60      	ldr	r2, [pc, #384]	; (8003e50 <HAL_DMA_IRQHandler+0x200>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d00a      	beq.n	8003ce8 <HAL_DMA_IRQHandler+0x98>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a5f      	ldr	r2, [pc, #380]	; (8003e54 <HAL_DMA_IRQHandler+0x204>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d102      	bne.n	8003ce2 <HAL_DMA_IRQHandler+0x92>
 8003cdc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ce0:	e00e      	b.n	8003d00 <HAL_DMA_IRQHandler+0xb0>
 8003ce2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003ce6:	e00b      	b.n	8003d00 <HAL_DMA_IRQHandler+0xb0>
 8003ce8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003cec:	e008      	b.n	8003d00 <HAL_DMA_IRQHandler+0xb0>
 8003cee:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003cf2:	e005      	b.n	8003d00 <HAL_DMA_IRQHandler+0xb0>
 8003cf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003cf8:	e002      	b.n	8003d00 <HAL_DMA_IRQHandler+0xb0>
 8003cfa:	2340      	movs	r3, #64	; 0x40
 8003cfc:	e000      	b.n	8003d00 <HAL_DMA_IRQHandler+0xb0>
 8003cfe:	2304      	movs	r3, #4
 8003d00:	4a55      	ldr	r2, [pc, #340]	; (8003e58 <HAL_DMA_IRQHandler+0x208>)
 8003d02:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	f000 8094 	beq.w	8003e36 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d12:	6878      	ldr	r0, [r7, #4]
 8003d14:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003d16:	e08e      	b.n	8003e36 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	2202      	movs	r2, #2
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4013      	ands	r3, r2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d056      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0x186>
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d051      	beq.n	8003dd6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0320 	and.w	r3, r3, #32
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10b      	bne.n	8003d58 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f022 020a 	bic.w	r2, r2, #10
 8003d4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a38      	ldr	r2, [pc, #224]	; (8003e40 <HAL_DMA_IRQHandler+0x1f0>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d029      	beq.n	8003db6 <HAL_DMA_IRQHandler+0x166>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a37      	ldr	r2, [pc, #220]	; (8003e44 <HAL_DMA_IRQHandler+0x1f4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d022      	beq.n	8003db2 <HAL_DMA_IRQHandler+0x162>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a35      	ldr	r2, [pc, #212]	; (8003e48 <HAL_DMA_IRQHandler+0x1f8>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d01a      	beq.n	8003dac <HAL_DMA_IRQHandler+0x15c>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a34      	ldr	r2, [pc, #208]	; (8003e4c <HAL_DMA_IRQHandler+0x1fc>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d012      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x156>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a32      	ldr	r2, [pc, #200]	; (8003e50 <HAL_DMA_IRQHandler+0x200>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d00a      	beq.n	8003da0 <HAL_DMA_IRQHandler+0x150>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a31      	ldr	r2, [pc, #196]	; (8003e54 <HAL_DMA_IRQHandler+0x204>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d102      	bne.n	8003d9a <HAL_DMA_IRQHandler+0x14a>
 8003d94:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d98:	e00e      	b.n	8003db8 <HAL_DMA_IRQHandler+0x168>
 8003d9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d9e:	e00b      	b.n	8003db8 <HAL_DMA_IRQHandler+0x168>
 8003da0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003da4:	e008      	b.n	8003db8 <HAL_DMA_IRQHandler+0x168>
 8003da6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003daa:	e005      	b.n	8003db8 <HAL_DMA_IRQHandler+0x168>
 8003dac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003db0:	e002      	b.n	8003db8 <HAL_DMA_IRQHandler+0x168>
 8003db2:	2320      	movs	r3, #32
 8003db4:	e000      	b.n	8003db8 <HAL_DMA_IRQHandler+0x168>
 8003db6:	2302      	movs	r3, #2
 8003db8:	4a27      	ldr	r2, [pc, #156]	; (8003e58 <HAL_DMA_IRQHandler+0x208>)
 8003dba:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d034      	beq.n	8003e36 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003dd4:	e02f      	b.n	8003e36 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	2208      	movs	r2, #8
 8003ddc:	409a      	lsls	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	4013      	ands	r3, r2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d028      	beq.n	8003e38 <HAL_DMA_IRQHandler+0x1e8>
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	f003 0308 	and.w	r3, r3, #8
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d023      	beq.n	8003e38 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f022 020e 	bic.w	r2, r2, #14
 8003dfe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e08:	2101      	movs	r1, #1
 8003e0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003e0e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d004      	beq.n	8003e38 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	4798      	blx	r3
    }
  }
  return;
 8003e36:	bf00      	nop
 8003e38:	bf00      	nop
}
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40020008 	.word	0x40020008
 8003e44:	4002001c 	.word	0x4002001c
 8003e48:	40020030 	.word	0x40020030
 8003e4c:	40020044 	.word	0x40020044
 8003e50:	40020058 	.word	0x40020058
 8003e54:	4002006c 	.word	0x4002006c
 8003e58:	40020000 	.word	0x40020000

08003e5c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
 8003e68:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e72:	2101      	movs	r1, #1
 8003e74:	fa01 f202 	lsl.w	r2, r1, r2
 8003e78:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	2b10      	cmp	r3, #16
 8003e88:	d108      	bne.n	8003e9c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e9a:	e007      	b.n	8003eac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	60da      	str	r2, [r3, #12]
}
 8003eac:	bf00      	nop
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bc80      	pop	{r7}
 8003eb4:	4770      	bx	lr
	...

08003eb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b08b      	sub	sp, #44	; 0x2c
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003eca:	e127      	b.n	800411c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003ecc:	2201      	movs	r2, #1
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	69fa      	ldr	r2, [r7, #28]
 8003edc:	4013      	ands	r3, r2
 8003ede:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	f040 8116 	bne.w	8004116 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	2b12      	cmp	r3, #18
 8003ef0:	d034      	beq.n	8003f5c <HAL_GPIO_Init+0xa4>
 8003ef2:	2b12      	cmp	r3, #18
 8003ef4:	d80d      	bhi.n	8003f12 <HAL_GPIO_Init+0x5a>
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d02b      	beq.n	8003f52 <HAL_GPIO_Init+0x9a>
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d804      	bhi.n	8003f08 <HAL_GPIO_Init+0x50>
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d031      	beq.n	8003f66 <HAL_GPIO_Init+0xae>
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d01c      	beq.n	8003f40 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003f06:	e048      	b.n	8003f9a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	d043      	beq.n	8003f94 <HAL_GPIO_Init+0xdc>
 8003f0c:	2b11      	cmp	r3, #17
 8003f0e:	d01b      	beq.n	8003f48 <HAL_GPIO_Init+0x90>
          break;
 8003f10:	e043      	b.n	8003f9a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003f12:	4a89      	ldr	r2, [pc, #548]	; (8004138 <HAL_GPIO_Init+0x280>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d026      	beq.n	8003f66 <HAL_GPIO_Init+0xae>
 8003f18:	4a87      	ldr	r2, [pc, #540]	; (8004138 <HAL_GPIO_Init+0x280>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d806      	bhi.n	8003f2c <HAL_GPIO_Init+0x74>
 8003f1e:	4a87      	ldr	r2, [pc, #540]	; (800413c <HAL_GPIO_Init+0x284>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d020      	beq.n	8003f66 <HAL_GPIO_Init+0xae>
 8003f24:	4a86      	ldr	r2, [pc, #536]	; (8004140 <HAL_GPIO_Init+0x288>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d01d      	beq.n	8003f66 <HAL_GPIO_Init+0xae>
          break;
 8003f2a:	e036      	b.n	8003f9a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003f2c:	4a85      	ldr	r2, [pc, #532]	; (8004144 <HAL_GPIO_Init+0x28c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d019      	beq.n	8003f66 <HAL_GPIO_Init+0xae>
 8003f32:	4a85      	ldr	r2, [pc, #532]	; (8004148 <HAL_GPIO_Init+0x290>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d016      	beq.n	8003f66 <HAL_GPIO_Init+0xae>
 8003f38:	4a84      	ldr	r2, [pc, #528]	; (800414c <HAL_GPIO_Init+0x294>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d013      	beq.n	8003f66 <HAL_GPIO_Init+0xae>
          break;
 8003f3e:	e02c      	b.n	8003f9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	623b      	str	r3, [r7, #32]
          break;
 8003f46:	e028      	b.n	8003f9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	3304      	adds	r3, #4
 8003f4e:	623b      	str	r3, [r7, #32]
          break;
 8003f50:	e023      	b.n	8003f9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	3308      	adds	r3, #8
 8003f58:	623b      	str	r3, [r7, #32]
          break;
 8003f5a:	e01e      	b.n	8003f9a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	330c      	adds	r3, #12
 8003f62:	623b      	str	r3, [r7, #32]
          break;
 8003f64:	e019      	b.n	8003f9a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d102      	bne.n	8003f74 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003f6e:	2304      	movs	r3, #4
 8003f70:	623b      	str	r3, [r7, #32]
          break;
 8003f72:	e012      	b.n	8003f9a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d105      	bne.n	8003f88 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f7c:	2308      	movs	r3, #8
 8003f7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69fa      	ldr	r2, [r7, #28]
 8003f84:	611a      	str	r2, [r3, #16]
          break;
 8003f86:	e008      	b.n	8003f9a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f88:	2308      	movs	r3, #8
 8003f8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	69fa      	ldr	r2, [r7, #28]
 8003f90:	615a      	str	r2, [r3, #20]
          break;
 8003f92:	e002      	b.n	8003f9a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003f94:	2300      	movs	r3, #0
 8003f96:	623b      	str	r3, [r7, #32]
          break;
 8003f98:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	2bff      	cmp	r3, #255	; 0xff
 8003f9e:	d801      	bhi.n	8003fa4 <HAL_GPIO_Init+0xec>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	e001      	b.n	8003fa8 <HAL_GPIO_Init+0xf0>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3304      	adds	r3, #4
 8003fa8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	2bff      	cmp	r3, #255	; 0xff
 8003fae:	d802      	bhi.n	8003fb6 <HAL_GPIO_Init+0xfe>
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	e002      	b.n	8003fbc <HAL_GPIO_Init+0x104>
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb8:	3b08      	subs	r3, #8
 8003fba:	009b      	lsls	r3, r3, #2
 8003fbc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	210f      	movs	r1, #15
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fca:	43db      	mvns	r3, r3
 8003fcc:	401a      	ands	r2, r3
 8003fce:	6a39      	ldr	r1, [r7, #32]
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	697b      	ldr	r3, [r7, #20]
 8003fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 8096 	beq.w	8004116 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003fea:	4b59      	ldr	r3, [pc, #356]	; (8004150 <HAL_GPIO_Init+0x298>)
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	4a58      	ldr	r2, [pc, #352]	; (8004150 <HAL_GPIO_Init+0x298>)
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	6193      	str	r3, [r2, #24]
 8003ff6:	4b56      	ldr	r3, [pc, #344]	; (8004150 <HAL_GPIO_Init+0x298>)
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	60bb      	str	r3, [r7, #8]
 8004000:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004002:	4a54      	ldr	r2, [pc, #336]	; (8004154 <HAL_GPIO_Init+0x29c>)
 8004004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004006:	089b      	lsrs	r3, r3, #2
 8004008:	3302      	adds	r3, #2
 800400a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800400e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004012:	f003 0303 	and.w	r3, r3, #3
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	220f      	movs	r2, #15
 800401a:	fa02 f303 	lsl.w	r3, r2, r3
 800401e:	43db      	mvns	r3, r3
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4013      	ands	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a4b      	ldr	r2, [pc, #300]	; (8004158 <HAL_GPIO_Init+0x2a0>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d013      	beq.n	8004056 <HAL_GPIO_Init+0x19e>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a4a      	ldr	r2, [pc, #296]	; (800415c <HAL_GPIO_Init+0x2a4>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d00d      	beq.n	8004052 <HAL_GPIO_Init+0x19a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a49      	ldr	r2, [pc, #292]	; (8004160 <HAL_GPIO_Init+0x2a8>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d007      	beq.n	800404e <HAL_GPIO_Init+0x196>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a48      	ldr	r2, [pc, #288]	; (8004164 <HAL_GPIO_Init+0x2ac>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d101      	bne.n	800404a <HAL_GPIO_Init+0x192>
 8004046:	2303      	movs	r3, #3
 8004048:	e006      	b.n	8004058 <HAL_GPIO_Init+0x1a0>
 800404a:	2304      	movs	r3, #4
 800404c:	e004      	b.n	8004058 <HAL_GPIO_Init+0x1a0>
 800404e:	2302      	movs	r3, #2
 8004050:	e002      	b.n	8004058 <HAL_GPIO_Init+0x1a0>
 8004052:	2301      	movs	r3, #1
 8004054:	e000      	b.n	8004058 <HAL_GPIO_Init+0x1a0>
 8004056:	2300      	movs	r3, #0
 8004058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800405a:	f002 0203 	and.w	r2, r2, #3
 800405e:	0092      	lsls	r2, r2, #2
 8004060:	4093      	lsls	r3, r2
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004068:	493a      	ldr	r1, [pc, #232]	; (8004154 <HAL_GPIO_Init+0x29c>)
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	089b      	lsrs	r3, r3, #2
 800406e:	3302      	adds	r3, #2
 8004070:	68fa      	ldr	r2, [r7, #12]
 8004072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d006      	beq.n	8004090 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004082:	4b39      	ldr	r3, [pc, #228]	; (8004168 <HAL_GPIO_Init+0x2b0>)
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	4938      	ldr	r1, [pc, #224]	; (8004168 <HAL_GPIO_Init+0x2b0>)
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	4313      	orrs	r3, r2
 800408c:	600b      	str	r3, [r1, #0]
 800408e:	e006      	b.n	800409e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004090:	4b35      	ldr	r3, [pc, #212]	; (8004168 <HAL_GPIO_Init+0x2b0>)
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	69bb      	ldr	r3, [r7, #24]
 8004096:	43db      	mvns	r3, r3
 8004098:	4933      	ldr	r1, [pc, #204]	; (8004168 <HAL_GPIO_Init+0x2b0>)
 800409a:	4013      	ands	r3, r2
 800409c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d006      	beq.n	80040b8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80040aa:	4b2f      	ldr	r3, [pc, #188]	; (8004168 <HAL_GPIO_Init+0x2b0>)
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	492e      	ldr	r1, [pc, #184]	; (8004168 <HAL_GPIO_Init+0x2b0>)
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	604b      	str	r3, [r1, #4]
 80040b6:	e006      	b.n	80040c6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80040b8:	4b2b      	ldr	r3, [pc, #172]	; (8004168 <HAL_GPIO_Init+0x2b0>)
 80040ba:	685a      	ldr	r2, [r3, #4]
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	43db      	mvns	r3, r3
 80040c0:	4929      	ldr	r1, [pc, #164]	; (8004168 <HAL_GPIO_Init+0x2b0>)
 80040c2:	4013      	ands	r3, r2
 80040c4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d006      	beq.n	80040e0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80040d2:	4b25      	ldr	r3, [pc, #148]	; (8004168 <HAL_GPIO_Init+0x2b0>)
 80040d4:	689a      	ldr	r2, [r3, #8]
 80040d6:	4924      	ldr	r1, [pc, #144]	; (8004168 <HAL_GPIO_Init+0x2b0>)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	4313      	orrs	r3, r2
 80040dc:	608b      	str	r3, [r1, #8]
 80040de:	e006      	b.n	80040ee <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80040e0:	4b21      	ldr	r3, [pc, #132]	; (8004168 <HAL_GPIO_Init+0x2b0>)
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	43db      	mvns	r3, r3
 80040e8:	491f      	ldr	r1, [pc, #124]	; (8004168 <HAL_GPIO_Init+0x2b0>)
 80040ea:	4013      	ands	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d006      	beq.n	8004108 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80040fa:	4b1b      	ldr	r3, [pc, #108]	; (8004168 <HAL_GPIO_Init+0x2b0>)
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	491a      	ldr	r1, [pc, #104]	; (8004168 <HAL_GPIO_Init+0x2b0>)
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	4313      	orrs	r3, r2
 8004104:	60cb      	str	r3, [r1, #12]
 8004106:	e006      	b.n	8004116 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004108:	4b17      	ldr	r3, [pc, #92]	; (8004168 <HAL_GPIO_Init+0x2b0>)
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	43db      	mvns	r3, r3
 8004110:	4915      	ldr	r1, [pc, #84]	; (8004168 <HAL_GPIO_Init+0x2b0>)
 8004112:	4013      	ands	r3, r2
 8004114:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004118:	3301      	adds	r3, #1
 800411a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	fa22 f303 	lsr.w	r3, r2, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	f47f aed0 	bne.w	8003ecc <HAL_GPIO_Init+0x14>
  }
}
 800412c:	bf00      	nop
 800412e:	372c      	adds	r7, #44	; 0x2c
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	10210000 	.word	0x10210000
 800413c:	10110000 	.word	0x10110000
 8004140:	10120000 	.word	0x10120000
 8004144:	10310000 	.word	0x10310000
 8004148:	10320000 	.word	0x10320000
 800414c:	10220000 	.word	0x10220000
 8004150:	40021000 	.word	0x40021000
 8004154:	40010000 	.word	0x40010000
 8004158:	40010800 	.word	0x40010800
 800415c:	40010c00 	.word	0x40010c00
 8004160:	40011000 	.word	0x40011000
 8004164:	40011400 	.word	0x40011400
 8004168:	40010400 	.word	0x40010400

0800416c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	460b      	mov	r3, r1
 8004176:	807b      	strh	r3, [r7, #2]
 8004178:	4613      	mov	r3, r2
 800417a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800417c:	787b      	ldrb	r3, [r7, #1]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004182:	887a      	ldrh	r2, [r7, #2]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004188:	e003      	b.n	8004192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800418a:	887b      	ldrh	r3, [r7, #2]
 800418c:	041a      	lsls	r2, r3, #16
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	611a      	str	r2, [r3, #16]
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr

0800419c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68da      	ldr	r2, [r3, #12]
 80041ac:	887b      	ldrh	r3, [r7, #2]
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80041b4:	887a      	ldrh	r2, [r7, #2]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80041ba:	e002      	b.n	80041c2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80041bc:	887a      	ldrh	r2, [r7, #2]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	611a      	str	r2, [r3, #16]
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bc80      	pop	{r7}
 80041ca:	4770      	bx	lr

080041cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	4603      	mov	r3, r0
 80041d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80041d6:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041d8:	695a      	ldr	r2, [r3, #20]
 80041da:	88fb      	ldrh	r3, [r7, #6]
 80041dc:	4013      	ands	r3, r2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d006      	beq.n	80041f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041e2:	4a05      	ldr	r2, [pc, #20]	; (80041f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041e4:	88fb      	ldrh	r3, [r7, #6]
 80041e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041e8:	88fb      	ldrh	r3, [r7, #6]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 f806 	bl	80041fc <HAL_GPIO_EXTI_Callback>
  }
}
 80041f0:	bf00      	nop
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40010400 	.word	0x40010400

080041fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	4603      	mov	r3, r0
 8004204:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	bc80      	pop	{r7}
 800420e:	4770      	bx	lr

08004210 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e10f      	b.n	8004442 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004228:	b2db      	uxtb	r3, r3
 800422a:	2b00      	cmp	r3, #0
 800422c:	d106      	bne.n	800423c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7fd ff36 	bl	80020a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2224      	movs	r2, #36	; 0x24
 8004240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f022 0201 	bic.w	r2, r2, #1
 8004252:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004254:	f001 fc62 	bl	8005b1c <HAL_RCC_GetPCLK1Freq>
 8004258:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	4a7b      	ldr	r2, [pc, #492]	; (800444c <HAL_I2C_Init+0x23c>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d807      	bhi.n	8004274 <HAL_I2C_Init+0x64>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	4a7a      	ldr	r2, [pc, #488]	; (8004450 <HAL_I2C_Init+0x240>)
 8004268:	4293      	cmp	r3, r2
 800426a:	bf94      	ite	ls
 800426c:	2301      	movls	r3, #1
 800426e:	2300      	movhi	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	e006      	b.n	8004282 <HAL_I2C_Init+0x72>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	4a77      	ldr	r2, [pc, #476]	; (8004454 <HAL_I2C_Init+0x244>)
 8004278:	4293      	cmp	r3, r2
 800427a:	bf94      	ite	ls
 800427c:	2301      	movls	r3, #1
 800427e:	2300      	movhi	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d001      	beq.n	800428a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e0db      	b.n	8004442 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	4a72      	ldr	r2, [pc, #456]	; (8004458 <HAL_I2C_Init+0x248>)
 800428e:	fba2 2303 	umull	r2, r3, r2, r3
 8004292:	0c9b      	lsrs	r3, r3, #18
 8004294:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	4a64      	ldr	r2, [pc, #400]	; (800444c <HAL_I2C_Init+0x23c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d802      	bhi.n	80042c4 <HAL_I2C_Init+0xb4>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	3301      	adds	r3, #1
 80042c2:	e009      	b.n	80042d8 <HAL_I2C_Init+0xc8>
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042ca:	fb02 f303 	mul.w	r3, r2, r3
 80042ce:	4a63      	ldr	r2, [pc, #396]	; (800445c <HAL_I2C_Init+0x24c>)
 80042d0:	fba2 2303 	umull	r2, r3, r2, r3
 80042d4:	099b      	lsrs	r3, r3, #6
 80042d6:	3301      	adds	r3, #1
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	430b      	orrs	r3, r1
 80042de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	4956      	ldr	r1, [pc, #344]	; (800444c <HAL_I2C_Init+0x23c>)
 80042f4:	428b      	cmp	r3, r1
 80042f6:	d80d      	bhi.n	8004314 <HAL_I2C_Init+0x104>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	1e59      	subs	r1, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	fbb1 f3f3 	udiv	r3, r1, r3
 8004306:	3301      	adds	r3, #1
 8004308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800430c:	2b04      	cmp	r3, #4
 800430e:	bf38      	it	cc
 8004310:	2304      	movcc	r3, #4
 8004312:	e04f      	b.n	80043b4 <HAL_I2C_Init+0x1a4>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d111      	bne.n	8004340 <HAL_I2C_Init+0x130>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	1e58      	subs	r0, r3, #1
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6859      	ldr	r1, [r3, #4]
 8004324:	460b      	mov	r3, r1
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	440b      	add	r3, r1
 800432a:	fbb0 f3f3 	udiv	r3, r0, r3
 800432e:	3301      	adds	r3, #1
 8004330:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004334:	2b00      	cmp	r3, #0
 8004336:	bf0c      	ite	eq
 8004338:	2301      	moveq	r3, #1
 800433a:	2300      	movne	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	e012      	b.n	8004366 <HAL_I2C_Init+0x156>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	1e58      	subs	r0, r3, #1
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6859      	ldr	r1, [r3, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	440b      	add	r3, r1
 800434e:	0099      	lsls	r1, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	fbb0 f3f3 	udiv	r3, r0, r3
 8004356:	3301      	adds	r3, #1
 8004358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800435c:	2b00      	cmp	r3, #0
 800435e:	bf0c      	ite	eq
 8004360:	2301      	moveq	r3, #1
 8004362:	2300      	movne	r3, #0
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <HAL_I2C_Init+0x15e>
 800436a:	2301      	movs	r3, #1
 800436c:	e022      	b.n	80043b4 <HAL_I2C_Init+0x1a4>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10e      	bne.n	8004394 <HAL_I2C_Init+0x184>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	1e58      	subs	r0, r3, #1
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6859      	ldr	r1, [r3, #4]
 800437e:	460b      	mov	r3, r1
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	440b      	add	r3, r1
 8004384:	fbb0 f3f3 	udiv	r3, r0, r3
 8004388:	3301      	adds	r3, #1
 800438a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800438e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004392:	e00f      	b.n	80043b4 <HAL_I2C_Init+0x1a4>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	1e58      	subs	r0, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6859      	ldr	r1, [r3, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	009b      	lsls	r3, r3, #2
 80043a0:	440b      	add	r3, r1
 80043a2:	0099      	lsls	r1, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043aa:	3301      	adds	r3, #1
 80043ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043b4:	6879      	ldr	r1, [r7, #4]
 80043b6:	6809      	ldr	r1, [r1, #0]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69da      	ldr	r2, [r3, #28]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	430a      	orrs	r2, r1
 80043d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80043e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6911      	ldr	r1, [r2, #16]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	68d2      	ldr	r2, [r2, #12]
 80043ee:	4311      	orrs	r1, r2
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6812      	ldr	r2, [r2, #0]
 80043f4:	430b      	orrs	r3, r1
 80043f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	695a      	ldr	r2, [r3, #20]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	430a      	orrs	r2, r1
 8004412:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0201 	orr.w	r2, r2, #1
 8004422:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2220      	movs	r2, #32
 800442e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	000186a0 	.word	0x000186a0
 8004450:	001e847f 	.word	0x001e847f
 8004454:	003d08ff 	.word	0x003d08ff
 8004458:	431bde83 	.word	0x431bde83
 800445c:	10624dd3 	.word	0x10624dd3

08004460 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af02      	add	r7, sp, #8
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	4608      	mov	r0, r1
 800446a:	4611      	mov	r1, r2
 800446c:	461a      	mov	r2, r3
 800446e:	4603      	mov	r3, r0
 8004470:	817b      	strh	r3, [r7, #10]
 8004472:	460b      	mov	r3, r1
 8004474:	813b      	strh	r3, [r7, #8]
 8004476:	4613      	mov	r3, r2
 8004478:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800447a:	f7ff f97f 	bl	800377c <HAL_GetTick>
 800447e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004486:	b2db      	uxtb	r3, r3
 8004488:	2b20      	cmp	r3, #32
 800448a:	f040 80d9 	bne.w	8004640 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	2319      	movs	r3, #25
 8004494:	2201      	movs	r2, #1
 8004496:	496d      	ldr	r1, [pc, #436]	; (800464c <HAL_I2C_Mem_Write+0x1ec>)
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 fd8d 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80044a4:	2302      	movs	r3, #2
 80044a6:	e0cc      	b.n	8004642 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d101      	bne.n	80044b6 <HAL_I2C_Mem_Write+0x56>
 80044b2:	2302      	movs	r3, #2
 80044b4:	e0c5      	b.n	8004642 <HAL_I2C_Mem_Write+0x1e2>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2201      	movs	r2, #1
 80044ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0301 	and.w	r3, r3, #1
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d007      	beq.n	80044dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0201 	orr.w	r2, r2, #1
 80044da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2221      	movs	r2, #33	; 0x21
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2240      	movs	r2, #64	; 0x40
 80044f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	2200      	movs	r2, #0
 8004500:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6a3a      	ldr	r2, [r7, #32]
 8004506:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800450c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004512:	b29a      	uxth	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4a4d      	ldr	r2, [pc, #308]	; (8004650 <HAL_I2C_Mem_Write+0x1f0>)
 800451c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800451e:	88f8      	ldrh	r0, [r7, #6]
 8004520:	893a      	ldrh	r2, [r7, #8]
 8004522:	8979      	ldrh	r1, [r7, #10]
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	9301      	str	r3, [sp, #4]
 8004528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452a:	9300      	str	r3, [sp, #0]
 800452c:	4603      	mov	r3, r0
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f000 fbe8 	bl	8004d04 <I2C_RequestMemoryWrite>
 8004534:	4603      	mov	r3, r0
 8004536:	2b00      	cmp	r3, #0
 8004538:	d052      	beq.n	80045e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e081      	b.n	8004642 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 fe0e 	bl	8005164 <I2C_WaitOnTXEFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00d      	beq.n	800456a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	2b04      	cmp	r3, #4
 8004554:	d107      	bne.n	8004566 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004564:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e06b      	b.n	8004642 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	781a      	ldrb	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004590:	b29b      	uxth	r3, r3
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	f003 0304 	and.w	r3, r3, #4
 80045a4:	2b04      	cmp	r3, #4
 80045a6:	d11b      	bne.n	80045e0 <HAL_I2C_Mem_Write+0x180>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d017      	beq.n	80045e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	781a      	ldrb	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	3b01      	subs	r3, #1
 80045da:	b29a      	uxth	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d1aa      	bne.n	800453e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045ec:	68f8      	ldr	r0, [r7, #12]
 80045ee:	f000 fdfa 	bl	80051e6 <I2C_WaitOnBTFFlagUntilTimeout>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00d      	beq.n	8004614 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fc:	2b04      	cmp	r3, #4
 80045fe:	d107      	bne.n	8004610 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800460e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e016      	b.n	8004642 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004622:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800463c:	2300      	movs	r3, #0
 800463e:	e000      	b.n	8004642 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004640:	2302      	movs	r3, #2
  }
}
 8004642:	4618      	mov	r0, r3
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	00100002 	.word	0x00100002
 8004650:	ffff0000 	.word	0xffff0000

08004654 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b08c      	sub	sp, #48	; 0x30
 8004658:	af02      	add	r7, sp, #8
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	4608      	mov	r0, r1
 800465e:	4611      	mov	r1, r2
 8004660:	461a      	mov	r2, r3
 8004662:	4603      	mov	r3, r0
 8004664:	817b      	strh	r3, [r7, #10]
 8004666:	460b      	mov	r3, r1
 8004668:	813b      	strh	r3, [r7, #8]
 800466a:	4613      	mov	r3, r2
 800466c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800466e:	f7ff f885 	bl	800377c <HAL_GetTick>
 8004672:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b20      	cmp	r3, #32
 800467e:	f040 8218 	bne.w	8004ab2 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	2319      	movs	r3, #25
 8004688:	2201      	movs	r2, #1
 800468a:	4981      	ldr	r1, [pc, #516]	; (8004890 <HAL_I2C_Mem_Read+0x23c>)
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 fc93 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004698:	2302      	movs	r3, #2
 800469a:	e20b      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d101      	bne.n	80046aa <HAL_I2C_Mem_Read+0x56>
 80046a6:	2302      	movs	r3, #2
 80046a8:	e204      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x460>
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d007      	beq.n	80046d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2222      	movs	r2, #34	; 0x22
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2240      	movs	r2, #64	; 0x40
 80046ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2200      	movs	r2, #0
 80046f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004700:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004706:	b29a      	uxth	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4a61      	ldr	r2, [pc, #388]	; (8004894 <HAL_I2C_Mem_Read+0x240>)
 8004710:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004712:	88f8      	ldrh	r0, [r7, #6]
 8004714:	893a      	ldrh	r2, [r7, #8]
 8004716:	8979      	ldrh	r1, [r7, #10]
 8004718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471a:	9301      	str	r3, [sp, #4]
 800471c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471e:	9300      	str	r3, [sp, #0]
 8004720:	4603      	mov	r3, r0
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f000 fb78 	bl	8004e18 <I2C_RequestMemoryRead>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e1c0      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004736:	2b00      	cmp	r3, #0
 8004738:	d113      	bne.n	8004762 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800473a:	2300      	movs	r3, #0
 800473c:	623b      	str	r3, [r7, #32]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	623b      	str	r3, [r7, #32]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	623b      	str	r3, [r7, #32]
 800474e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800475e:	601a      	str	r2, [r3, #0]
 8004760:	e194      	b.n	8004a8c <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004766:	2b01      	cmp	r3, #1
 8004768:	d11d      	bne.n	80047a6 <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004778:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800477a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800477c:	2300      	movs	r3, #0
 800477e:	61fb      	str	r3, [r7, #28]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	695b      	ldr	r3, [r3, #20]
 8004786:	61fb      	str	r3, [r7, #28]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	61fb      	str	r3, [r7, #28]
 8004790:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	681a      	ldr	r2, [r3, #0]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047a0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80047a2:	b662      	cpsie	i
 80047a4:	e172      	b.n	8004a8c <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d11d      	bne.n	80047ea <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80047be:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047c0:	2300      	movs	r3, #0
 80047c2:	61bb      	str	r3, [r7, #24]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	61bb      	str	r3, [r7, #24]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	61bb      	str	r3, [r7, #24]
 80047d4:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80047e6:	b662      	cpsie	i
 80047e8:	e150      	b.n	8004a8c <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047f8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047fa:	2300      	movs	r3, #0
 80047fc:	617b      	str	r3, [r7, #20]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	617b      	str	r3, [r7, #20]
 800480e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004810:	e13c      	b.n	8004a8c <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004816:	2b03      	cmp	r3, #3
 8004818:	f200 80f5 	bhi.w	8004a06 <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004820:	2b01      	cmp	r3, #1
 8004822:	d123      	bne.n	800486c <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004826:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004828:	68f8      	ldr	r0, [r7, #12]
 800482a:	f000 fd1d 	bl	8005268 <I2C_WaitOnRXNEFlagUntilTimeout>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d001      	beq.n	8004838 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	e13d      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	691a      	ldr	r2, [r3, #16]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004854:	3b01      	subs	r3, #1
 8004856:	b29a      	uxth	r2, r3
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004860:	b29b      	uxth	r3, r3
 8004862:	3b01      	subs	r3, #1
 8004864:	b29a      	uxth	r2, r3
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	855a      	strh	r2, [r3, #42]	; 0x2a
 800486a:	e10f      	b.n	8004a8c <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004870:	2b02      	cmp	r3, #2
 8004872:	d150      	bne.n	8004916 <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004876:	9300      	str	r3, [sp, #0]
 8004878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487a:	2200      	movs	r2, #0
 800487c:	4906      	ldr	r1, [pc, #24]	; (8004898 <HAL_I2C_Mem_Read+0x244>)
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 fb9a 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d008      	beq.n	800489c <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e112      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x460>
 800488e:	bf00      	nop
 8004890:	00100002 	.word	0x00100002
 8004894:	ffff0000 	.word	0xffff0000
 8004898:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800489c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ac:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	b2d2      	uxtb	r2, r2
 80048ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c0:	1c5a      	adds	r2, r3, #1
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ca:	3b01      	subs	r3, #1
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	3b01      	subs	r3, #1
 80048da:	b29a      	uxth	r2, r3
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80048e0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	691a      	ldr	r2, [r3, #16]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	b2d2      	uxtb	r2, r2
 80048ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	1c5a      	adds	r2, r3, #1
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048fe:	3b01      	subs	r3, #1
 8004900:	b29a      	uxth	r2, r3
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004914:	e0ba      	b.n	8004a8c <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491c:	2200      	movs	r2, #0
 800491e:	4967      	ldr	r1, [pc, #412]	; (8004abc <HAL_I2C_Mem_Read+0x468>)
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f000 fb49 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e0c1      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800493e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004940:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	691a      	ldr	r2, [r3, #16]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	b2d2      	uxtb	r2, r2
 800494e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800495e:	3b01      	subs	r3, #1
 8004960:	b29a      	uxth	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496a:	b29b      	uxth	r3, r3
 800496c:	3b01      	subs	r3, #1
 800496e:	b29a      	uxth	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	9300      	str	r3, [sp, #0]
 8004978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497a:	2200      	movs	r2, #0
 800497c:	494f      	ldr	r1, [pc, #316]	; (8004abc <HAL_I2C_Mem_Read+0x468>)
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 fb1a 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e092      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800499c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	691a      	ldr	r2, [r3, #16]
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	b2d2      	uxtb	r2, r2
 80049aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	1c5a      	adds	r2, r3, #1
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ba:	3b01      	subs	r3, #1
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	3b01      	subs	r3, #1
 80049ca:	b29a      	uxth	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80049d0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	691a      	ldr	r2, [r3, #16]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049ee:	3b01      	subs	r3, #1
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a04:	e042      	b.n	8004a8c <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 fc2c 	bl	8005268 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e04c      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	691a      	ldr	r2, [r3, #16]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	b2d2      	uxtb	r2, r2
 8004a26:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a36:	3b01      	subs	r3, #1
 8004a38:	b29a      	uxth	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	3b01      	subs	r3, #1
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	f003 0304 	and.w	r3, r3, #4
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d118      	bne.n	8004a8c <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	691a      	ldr	r2, [r3, #16]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	b2d2      	uxtb	r2, r2
 8004a66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6c:	1c5a      	adds	r2, r3, #1
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a76:	3b01      	subs	r3, #1
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f47f aebe 	bne.w	8004812 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	e000      	b.n	8004ab4 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8004ab2:	2302      	movs	r3, #2
  }
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3728      	adds	r7, #40	; 0x28
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	00010004 	.word	0x00010004

08004ac0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08a      	sub	sp, #40	; 0x28
 8004ac4:	af02      	add	r7, sp, #8
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	607a      	str	r2, [r7, #4]
 8004aca:	603b      	str	r3, [r7, #0]
 8004acc:	460b      	mov	r3, r1
 8004ace:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004ad0:	f7fe fe54 	bl	800377c <HAL_GetTick>
 8004ad4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b20      	cmp	r3, #32
 8004ae4:	f040 8105 	bne.w	8004cf2 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	9300      	str	r3, [sp, #0]
 8004aec:	2319      	movs	r3, #25
 8004aee:	2201      	movs	r2, #1
 8004af0:	4982      	ldr	r1, [pc, #520]	; (8004cfc <HAL_I2C_IsDeviceReady+0x23c>)
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f000 fa60 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004afe:	2302      	movs	r3, #2
 8004b00:	e0f8      	b.n	8004cf4 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d101      	bne.n	8004b10 <HAL_I2C_IsDeviceReady+0x50>
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	e0f1      	b.n	8004cf4 <HAL_I2C_IsDeviceReady+0x234>
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d007      	beq.n	8004b36 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f042 0201 	orr.w	r2, r2, #1
 8004b34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2224      	movs	r2, #36	; 0x24
 8004b4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	4a6a      	ldr	r2, [pc, #424]	; (8004d00 <HAL_I2C_IsDeviceReady+0x240>)
 8004b58:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b68:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f000 fa1e 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d001      	beq.n	8004b86 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e0b6      	b.n	8004cf4 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b86:	897b      	ldrh	r3, [r7, #10]
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b94:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004b96:	f7fe fdf1 	bl	800377c <HAL_GetTick>
 8004b9a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	bf0c      	ite	eq
 8004baa:	2301      	moveq	r3, #1
 8004bac:	2300      	movne	r3, #0
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc0:	bf0c      	ite	eq
 8004bc2:	2301      	moveq	r3, #1
 8004bc4:	2300      	movne	r3, #0
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004bca:	e025      	b.n	8004c18 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004bcc:	f7fe fdd6 	bl	800377c <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d302      	bcc.n	8004be2 <HAL_I2C_IsDeviceReady+0x122>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d103      	bne.n	8004bea <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	22a0      	movs	r2, #160	; 0xa0
 8004be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	bf0c      	ite	eq
 8004bf8:	2301      	moveq	r3, #1
 8004bfa:	2300      	movne	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c0e:	bf0c      	ite	eq
 8004c10:	2301      	moveq	r3, #1
 8004c12:	2300      	movne	r3, #0
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2ba0      	cmp	r3, #160	; 0xa0
 8004c22:	d005      	beq.n	8004c30 <HAL_I2C_IsDeviceReady+0x170>
 8004c24:	7dfb      	ldrb	r3, [r7, #23]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d102      	bne.n	8004c30 <HAL_I2C_IsDeviceReady+0x170>
 8004c2a:	7dbb      	ldrb	r3, [r7, #22]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d0cd      	beq.n	8004bcc <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d129      	bne.n	8004c9a <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c54:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c56:	2300      	movs	r3, #0
 8004c58:	613b      	str	r3, [r7, #16]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	613b      	str	r3, [r7, #16]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	613b      	str	r3, [r7, #16]
 8004c6a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	9300      	str	r3, [sp, #0]
 8004c70:	2319      	movs	r3, #25
 8004c72:	2201      	movs	r2, #1
 8004c74:	4921      	ldr	r1, [pc, #132]	; (8004cfc <HAL_I2C_IsDeviceReady+0x23c>)
 8004c76:	68f8      	ldr	r0, [r7, #12]
 8004c78:	f000 f99e 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e036      	b.n	8004cf4 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2220      	movs	r2, #32
 8004c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	e02c      	b.n	8004cf4 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ca8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004cb2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	9300      	str	r3, [sp, #0]
 8004cb8:	2319      	movs	r3, #25
 8004cba:	2201      	movs	r2, #1
 8004cbc:	490f      	ldr	r1, [pc, #60]	; (8004cfc <HAL_I2C_IsDeviceReady+0x23c>)
 8004cbe:	68f8      	ldr	r0, [r7, #12]
 8004cc0:	f000 f97a 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d001      	beq.n	8004cce <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e012      	b.n	8004cf4 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	f4ff af3e 	bcc.w	8004b5a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2220      	movs	r2, #32
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e000      	b.n	8004cf4 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8004cf2:	2302      	movs	r3, #2
  }
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3720      	adds	r7, #32
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	00100002 	.word	0x00100002
 8004d00:	ffff0000 	.word	0xffff0000

08004d04 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af02      	add	r7, sp, #8
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	4608      	mov	r0, r1
 8004d0e:	4611      	mov	r1, r2
 8004d10:	461a      	mov	r2, r3
 8004d12:	4603      	mov	r3, r0
 8004d14:	817b      	strh	r3, [r7, #10]
 8004d16:	460b      	mov	r3, r1
 8004d18:	813b      	strh	r3, [r7, #8]
 8004d1a:	4613      	mov	r3, r2
 8004d1c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d30:	9300      	str	r3, [sp, #0]
 8004d32:	6a3b      	ldr	r3, [r7, #32]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 f93c 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e05f      	b.n	8004e0a <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d4a:	897b      	ldrh	r3, [r7, #10]
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	461a      	mov	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004d58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	6a3a      	ldr	r2, [r7, #32]
 8004d5e:	492d      	ldr	r1, [pc, #180]	; (8004e14 <I2C_RequestMemoryWrite+0x110>)
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 f980 	bl	8005066 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d001      	beq.n	8004d70 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e04c      	b.n	8004e0a <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d70:	2300      	movs	r3, #0
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d88:	6a39      	ldr	r1, [r7, #32]
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 f9ea 	bl	8005164 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00d      	beq.n	8004db2 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d107      	bne.n	8004dae <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e02b      	b.n	8004e0a <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004db2:	88fb      	ldrh	r3, [r7, #6]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d105      	bne.n	8004dc4 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004db8:	893b      	ldrh	r3, [r7, #8]
 8004dba:	b2da      	uxtb	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	611a      	str	r2, [r3, #16]
 8004dc2:	e021      	b.n	8004e08 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004dc4:	893b      	ldrh	r3, [r7, #8]
 8004dc6:	0a1b      	lsrs	r3, r3, #8
 8004dc8:	b29b      	uxth	r3, r3
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd4:	6a39      	ldr	r1, [r7, #32]
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f000 f9c4 	bl	8005164 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00d      	beq.n	8004dfe <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de6:	2b04      	cmp	r3, #4
 8004de8:	d107      	bne.n	8004dfa <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004df8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e005      	b.n	8004e0a <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dfe:	893b      	ldrh	r3, [r7, #8]
 8004e00:	b2da      	uxtb	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3718      	adds	r7, #24
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	00010002 	.word	0x00010002

08004e18 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b088      	sub	sp, #32
 8004e1c:	af02      	add	r7, sp, #8
 8004e1e:	60f8      	str	r0, [r7, #12]
 8004e20:	4608      	mov	r0, r1
 8004e22:	4611      	mov	r1, r2
 8004e24:	461a      	mov	r2, r3
 8004e26:	4603      	mov	r3, r0
 8004e28:	817b      	strh	r3, [r7, #10]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	813b      	strh	r3, [r7, #8]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e40:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e5e:	68f8      	ldr	r0, [r7, #12]
 8004e60:	f000 f8aa 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d001      	beq.n	8004e6e <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e09e      	b.n	8004fac <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e6e:	897b      	ldrh	r3, [r7, #10]
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	461a      	mov	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	6a3a      	ldr	r2, [r7, #32]
 8004e82:	494c      	ldr	r1, [pc, #304]	; (8004fb4 <I2C_RequestMemoryRead+0x19c>)
 8004e84:	68f8      	ldr	r0, [r7, #12]
 8004e86:	f000 f8ee 	bl	8005066 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e08b      	b.n	8004fac <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e94:	2300      	movs	r3, #0
 8004e96:	617b      	str	r3, [r7, #20]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	695b      	ldr	r3, [r3, #20]
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eac:	6a39      	ldr	r1, [r7, #32]
 8004eae:	68f8      	ldr	r0, [r7, #12]
 8004eb0:	f000 f958 	bl	8005164 <I2C_WaitOnTXEFlagUntilTimeout>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00d      	beq.n	8004ed6 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d107      	bne.n	8004ed2 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ed0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e06a      	b.n	8004fac <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ed6:	88fb      	ldrh	r3, [r7, #6]
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d105      	bne.n	8004ee8 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004edc:	893b      	ldrh	r3, [r7, #8]
 8004ede:	b2da      	uxtb	r2, r3
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	611a      	str	r2, [r3, #16]
 8004ee6:	e021      	b.n	8004f2c <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ee8:	893b      	ldrh	r3, [r7, #8]
 8004eea:	0a1b      	lsrs	r3, r3, #8
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	b2da      	uxtb	r2, r3
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef8:	6a39      	ldr	r1, [r7, #32]
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 f932 	bl	8005164 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00d      	beq.n	8004f22 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d107      	bne.n	8004f1e <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e044      	b.n	8004fac <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004f22:	893b      	ldrh	r3, [r7, #8]
 8004f24:	b2da      	uxtb	r2, r3
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f2e:	6a39      	ldr	r1, [r7, #32]
 8004f30:	68f8      	ldr	r0, [r7, #12]
 8004f32:	f000 f917 	bl	8005164 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00d      	beq.n	8004f58 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f40:	2b04      	cmp	r3, #4
 8004f42:	d107      	bne.n	8004f54 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f52:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e029      	b.n	8004fac <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f66:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	6a3b      	ldr	r3, [r7, #32]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f000 f81f 	bl	8004fb8 <I2C_WaitOnFlagUntilTimeout>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d001      	beq.n	8004f84 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e013      	b.n	8004fac <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004f84:	897b      	ldrh	r3, [r7, #10]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	f043 0301 	orr.w	r3, r3, #1
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f96:	6a3a      	ldr	r2, [r7, #32]
 8004f98:	4906      	ldr	r1, [pc, #24]	; (8004fb4 <I2C_RequestMemoryRead+0x19c>)
 8004f9a:	68f8      	ldr	r0, [r7, #12]
 8004f9c:	f000 f863 	bl	8005066 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d001      	beq.n	8004faa <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e000      	b.n	8004fac <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}
 8004fb4:	00010002 	.word	0x00010002

08004fb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	603b      	str	r3, [r7, #0]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fc8:	e025      	b.n	8005016 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fd0:	d021      	beq.n	8005016 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd2:	f7fe fbd3 	bl	800377c <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d302      	bcc.n	8004fe8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d116      	bne.n	8005016 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	2200      	movs	r2, #0
 8004fec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005002:	f043 0220 	orr.w	r2, r3, #32
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2200      	movs	r2, #0
 800500e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e023      	b.n	800505e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	0c1b      	lsrs	r3, r3, #16
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b01      	cmp	r3, #1
 800501e:	d10d      	bne.n	800503c <I2C_WaitOnFlagUntilTimeout+0x84>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	43da      	mvns	r2, r3
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	4013      	ands	r3, r2
 800502c:	b29b      	uxth	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	bf0c      	ite	eq
 8005032:	2301      	moveq	r3, #1
 8005034:	2300      	movne	r3, #0
 8005036:	b2db      	uxtb	r3, r3
 8005038:	461a      	mov	r2, r3
 800503a:	e00c      	b.n	8005056 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	43da      	mvns	r2, r3
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	4013      	ands	r3, r2
 8005048:	b29b      	uxth	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	bf0c      	ite	eq
 800504e:	2301      	moveq	r3, #1
 8005050:	2300      	movne	r3, #0
 8005052:	b2db      	uxtb	r3, r3
 8005054:	461a      	mov	r2, r3
 8005056:	79fb      	ldrb	r3, [r7, #7]
 8005058:	429a      	cmp	r2, r3
 800505a:	d0b6      	beq.n	8004fca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3710      	adds	r7, #16
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}

08005066 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b084      	sub	sp, #16
 800506a:	af00      	add	r7, sp, #0
 800506c:	60f8      	str	r0, [r7, #12]
 800506e:	60b9      	str	r1, [r7, #8]
 8005070:	607a      	str	r2, [r7, #4]
 8005072:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005074:	e051      	b.n	800511a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005084:	d123      	bne.n	80050ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005094:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800509e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	f043 0204 	orr.w	r2, r3, #4
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050ca:	2301      	movs	r3, #1
 80050cc:	e046      	b.n	800515c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050d4:	d021      	beq.n	800511a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050d6:	f7fe fb51 	bl	800377c <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d302      	bcc.n	80050ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d116      	bne.n	800511a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2220      	movs	r2, #32
 80050f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	f043 0220 	orr.w	r2, r3, #32
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e020      	b.n	800515c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	0c1b      	lsrs	r3, r3, #16
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b01      	cmp	r3, #1
 8005122:	d10c      	bne.n	800513e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	43da      	mvns	r2, r3
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	4013      	ands	r3, r2
 8005130:	b29b      	uxth	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	bf14      	ite	ne
 8005136:	2301      	movne	r3, #1
 8005138:	2300      	moveq	r3, #0
 800513a:	b2db      	uxtb	r3, r3
 800513c:	e00b      	b.n	8005156 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	43da      	mvns	r2, r3
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	4013      	ands	r3, r2
 800514a:	b29b      	uxth	r3, r3
 800514c:	2b00      	cmp	r3, #0
 800514e:	bf14      	ite	ne
 8005150:	2301      	movne	r3, #1
 8005152:	2300      	moveq	r3, #0
 8005154:	b2db      	uxtb	r3, r3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d18d      	bne.n	8005076 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005170:	e02d      	b.n	80051ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f000 f8ce 	bl	8005314 <I2C_IsAcknowledgeFailed>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e02d      	b.n	80051de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005188:	d021      	beq.n	80051ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800518a:	f7fe faf7 	bl	800377c <HAL_GetTick>
 800518e:	4602      	mov	r2, r0
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	429a      	cmp	r2, r3
 8005198:	d302      	bcc.n	80051a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d116      	bne.n	80051ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2220      	movs	r2, #32
 80051aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	f043 0220 	orr.w	r2, r3, #32
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e007      	b.n	80051de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d8:	2b80      	cmp	r3, #128	; 0x80
 80051da:	d1ca      	bne.n	8005172 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051dc:	2300      	movs	r3, #0
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b084      	sub	sp, #16
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	60f8      	str	r0, [r7, #12]
 80051ee:	60b9      	str	r1, [r7, #8]
 80051f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051f2:	e02d      	b.n	8005250 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 f88d 	bl	8005314 <I2C_IsAcknowledgeFailed>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e02d      	b.n	8005260 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800520a:	d021      	beq.n	8005250 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800520c:	f7fe fab6 	bl	800377c <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	429a      	cmp	r2, r3
 800521a:	d302      	bcc.n	8005222 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d116      	bne.n	8005250 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	2200      	movs	r2, #0
 8005226:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2220      	movs	r2, #32
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523c:	f043 0220 	orr.w	r2, r3, #32
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e007      	b.n	8005260 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	f003 0304 	and.w	r3, r3, #4
 800525a:	2b04      	cmp	r3, #4
 800525c:	d1ca      	bne.n	80051f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005274:	e042      	b.n	80052fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	695b      	ldr	r3, [r3, #20]
 800527c:	f003 0310 	and.w	r3, r3, #16
 8005280:	2b10      	cmp	r3, #16
 8005282:	d119      	bne.n	80052b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f06f 0210 	mvn.w	r2, #16
 800528c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2200      	movs	r2, #0
 80052a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e029      	b.n	800530c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b8:	f7fe fa60 	bl	800377c <HAL_GetTick>
 80052bc:	4602      	mov	r2, r0
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d302      	bcc.n	80052ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d116      	bne.n	80052fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2200      	movs	r2, #0
 80052d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e8:	f043 0220 	orr.w	r2, r3, #32
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e007      	b.n	800530c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005306:	2b40      	cmp	r3, #64	; 0x40
 8005308:	d1b5      	bne.n	8005276 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800532a:	d11b      	bne.n	8005364 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005334:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005350:	f043 0204 	orr.w	r2, r3, #4
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e000      	b.n	8005366 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	bc80      	pop	{r7}
 800536e:	4770      	bx	lr

08005370 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e26c      	b.n	800585c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0301 	and.w	r3, r3, #1
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 8087 	beq.w	800549e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005390:	4b92      	ldr	r3, [pc, #584]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f003 030c 	and.w	r3, r3, #12
 8005398:	2b04      	cmp	r3, #4
 800539a:	d00c      	beq.n	80053b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800539c:	4b8f      	ldr	r3, [pc, #572]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f003 030c 	and.w	r3, r3, #12
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d112      	bne.n	80053ce <HAL_RCC_OscConfig+0x5e>
 80053a8:	4b8c      	ldr	r3, [pc, #560]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053b4:	d10b      	bne.n	80053ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053b6:	4b89      	ldr	r3, [pc, #548]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d06c      	beq.n	800549c <HAL_RCC_OscConfig+0x12c>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d168      	bne.n	800549c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	e246      	b.n	800585c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053d6:	d106      	bne.n	80053e6 <HAL_RCC_OscConfig+0x76>
 80053d8:	4b80      	ldr	r3, [pc, #512]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a7f      	ldr	r2, [pc, #508]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 80053de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e2:	6013      	str	r3, [r2, #0]
 80053e4:	e02e      	b.n	8005444 <HAL_RCC_OscConfig+0xd4>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10c      	bne.n	8005408 <HAL_RCC_OscConfig+0x98>
 80053ee:	4b7b      	ldr	r3, [pc, #492]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a7a      	ldr	r2, [pc, #488]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 80053f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053f8:	6013      	str	r3, [r2, #0]
 80053fa:	4b78      	ldr	r3, [pc, #480]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a77      	ldr	r2, [pc, #476]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 8005400:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	e01d      	b.n	8005444 <HAL_RCC_OscConfig+0xd4>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005410:	d10c      	bne.n	800542c <HAL_RCC_OscConfig+0xbc>
 8005412:	4b72      	ldr	r3, [pc, #456]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a71      	ldr	r2, [pc, #452]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 8005418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	4b6f      	ldr	r3, [pc, #444]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a6e      	ldr	r2, [pc, #440]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 8005424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	e00b      	b.n	8005444 <HAL_RCC_OscConfig+0xd4>
 800542c:	4b6b      	ldr	r3, [pc, #428]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a6a      	ldr	r2, [pc, #424]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 8005432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005436:	6013      	str	r3, [r2, #0]
 8005438:	4b68      	ldr	r3, [pc, #416]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a67      	ldr	r2, [pc, #412]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 800543e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005442:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d013      	beq.n	8005474 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800544c:	f7fe f996 	bl	800377c <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005452:	e008      	b.n	8005466 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005454:	f7fe f992 	bl	800377c <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b64      	cmp	r3, #100	; 0x64
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e1fa      	b.n	800585c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005466:	4b5d      	ldr	r3, [pc, #372]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d0f0      	beq.n	8005454 <HAL_RCC_OscConfig+0xe4>
 8005472:	e014      	b.n	800549e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005474:	f7fe f982 	bl	800377c <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800547c:	f7fe f97e 	bl	800377c <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b64      	cmp	r3, #100	; 0x64
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e1e6      	b.n	800585c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800548e:	4b53      	ldr	r3, [pc, #332]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1f0      	bne.n	800547c <HAL_RCC_OscConfig+0x10c>
 800549a:	e000      	b.n	800549e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800549c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d063      	beq.n	8005572 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80054aa:	4b4c      	ldr	r3, [pc, #304]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f003 030c 	and.w	r3, r3, #12
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00b      	beq.n	80054ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80054b6:	4b49      	ldr	r3, [pc, #292]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	f003 030c 	and.w	r3, r3, #12
 80054be:	2b08      	cmp	r3, #8
 80054c0:	d11c      	bne.n	80054fc <HAL_RCC_OscConfig+0x18c>
 80054c2:	4b46      	ldr	r3, [pc, #280]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d116      	bne.n	80054fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ce:	4b43      	ldr	r3, [pc, #268]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d005      	beq.n	80054e6 <HAL_RCC_OscConfig+0x176>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d001      	beq.n	80054e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e1ba      	b.n	800585c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e6:	4b3d      	ldr	r3, [pc, #244]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	4939      	ldr	r1, [pc, #228]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054fa:	e03a      	b.n	8005572 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d020      	beq.n	8005546 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005504:	4b36      	ldr	r3, [pc, #216]	; (80055e0 <HAL_RCC_OscConfig+0x270>)
 8005506:	2201      	movs	r2, #1
 8005508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800550a:	f7fe f937 	bl	800377c <HAL_GetTick>
 800550e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005512:	f7fe f933 	bl	800377c <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e19b      	b.n	800585c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005524:	4b2d      	ldr	r3, [pc, #180]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0f0      	beq.n	8005512 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005530:	4b2a      	ldr	r3, [pc, #168]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	695b      	ldr	r3, [r3, #20]
 800553c:	00db      	lsls	r3, r3, #3
 800553e:	4927      	ldr	r1, [pc, #156]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 8005540:	4313      	orrs	r3, r2
 8005542:	600b      	str	r3, [r1, #0]
 8005544:	e015      	b.n	8005572 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005546:	4b26      	ldr	r3, [pc, #152]	; (80055e0 <HAL_RCC_OscConfig+0x270>)
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800554c:	f7fe f916 	bl	800377c <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005554:	f7fe f912 	bl	800377c <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e17a      	b.n	800585c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005566:	4b1d      	ldr	r3, [pc, #116]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1f0      	bne.n	8005554 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b00      	cmp	r3, #0
 800557c:	d03a      	beq.n	80055f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d019      	beq.n	80055ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005586:	4b17      	ldr	r3, [pc, #92]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 8005588:	2201      	movs	r2, #1
 800558a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800558c:	f7fe f8f6 	bl	800377c <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005592:	e008      	b.n	80055a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005594:	f7fe f8f2 	bl	800377c <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e15a      	b.n	800585c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055a6:	4b0d      	ldr	r3, [pc, #52]	; (80055dc <HAL_RCC_OscConfig+0x26c>)
 80055a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d0f0      	beq.n	8005594 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80055b2:	2001      	movs	r0, #1
 80055b4:	f000 fada 	bl	8005b6c <RCC_Delay>
 80055b8:	e01c      	b.n	80055f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055ba:	4b0a      	ldr	r3, [pc, #40]	; (80055e4 <HAL_RCC_OscConfig+0x274>)
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055c0:	f7fe f8dc 	bl	800377c <HAL_GetTick>
 80055c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055c6:	e00f      	b.n	80055e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055c8:	f7fe f8d8 	bl	800377c <HAL_GetTick>
 80055cc:	4602      	mov	r2, r0
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	2b02      	cmp	r3, #2
 80055d4:	d908      	bls.n	80055e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80055d6:	2303      	movs	r3, #3
 80055d8:	e140      	b.n	800585c <HAL_RCC_OscConfig+0x4ec>
 80055da:	bf00      	nop
 80055dc:	40021000 	.word	0x40021000
 80055e0:	42420000 	.word	0x42420000
 80055e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055e8:	4b9e      	ldr	r3, [pc, #632]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1e9      	bne.n	80055c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0304 	and.w	r3, r3, #4
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 80a6 	beq.w	800574e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005602:	2300      	movs	r3, #0
 8005604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005606:	4b97      	ldr	r3, [pc, #604]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10d      	bne.n	800562e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005612:	4b94      	ldr	r3, [pc, #592]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	4a93      	ldr	r2, [pc, #588]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 8005618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800561c:	61d3      	str	r3, [r2, #28]
 800561e:	4b91      	ldr	r3, [pc, #580]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 8005620:	69db      	ldr	r3, [r3, #28]
 8005622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005626:	60bb      	str	r3, [r7, #8]
 8005628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800562a:	2301      	movs	r3, #1
 800562c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800562e:	4b8e      	ldr	r3, [pc, #568]	; (8005868 <HAL_RCC_OscConfig+0x4f8>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005636:	2b00      	cmp	r3, #0
 8005638:	d118      	bne.n	800566c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800563a:	4b8b      	ldr	r3, [pc, #556]	; (8005868 <HAL_RCC_OscConfig+0x4f8>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a8a      	ldr	r2, [pc, #552]	; (8005868 <HAL_RCC_OscConfig+0x4f8>)
 8005640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005646:	f7fe f899 	bl	800377c <HAL_GetTick>
 800564a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800564c:	e008      	b.n	8005660 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800564e:	f7fe f895 	bl	800377c <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b64      	cmp	r3, #100	; 0x64
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e0fd      	b.n	800585c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005660:	4b81      	ldr	r3, [pc, #516]	; (8005868 <HAL_RCC_OscConfig+0x4f8>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005668:	2b00      	cmp	r3, #0
 800566a:	d0f0      	beq.n	800564e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d106      	bne.n	8005682 <HAL_RCC_OscConfig+0x312>
 8005674:	4b7b      	ldr	r3, [pc, #492]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 8005676:	6a1b      	ldr	r3, [r3, #32]
 8005678:	4a7a      	ldr	r2, [pc, #488]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 800567a:	f043 0301 	orr.w	r3, r3, #1
 800567e:	6213      	str	r3, [r2, #32]
 8005680:	e02d      	b.n	80056de <HAL_RCC_OscConfig+0x36e>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10c      	bne.n	80056a4 <HAL_RCC_OscConfig+0x334>
 800568a:	4b76      	ldr	r3, [pc, #472]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	4a75      	ldr	r2, [pc, #468]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 8005690:	f023 0301 	bic.w	r3, r3, #1
 8005694:	6213      	str	r3, [r2, #32]
 8005696:	4b73      	ldr	r3, [pc, #460]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	4a72      	ldr	r2, [pc, #456]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 800569c:	f023 0304 	bic.w	r3, r3, #4
 80056a0:	6213      	str	r3, [r2, #32]
 80056a2:	e01c      	b.n	80056de <HAL_RCC_OscConfig+0x36e>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	2b05      	cmp	r3, #5
 80056aa:	d10c      	bne.n	80056c6 <HAL_RCC_OscConfig+0x356>
 80056ac:	4b6d      	ldr	r3, [pc, #436]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 80056ae:	6a1b      	ldr	r3, [r3, #32]
 80056b0:	4a6c      	ldr	r2, [pc, #432]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 80056b2:	f043 0304 	orr.w	r3, r3, #4
 80056b6:	6213      	str	r3, [r2, #32]
 80056b8:	4b6a      	ldr	r3, [pc, #424]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 80056ba:	6a1b      	ldr	r3, [r3, #32]
 80056bc:	4a69      	ldr	r2, [pc, #420]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 80056be:	f043 0301 	orr.w	r3, r3, #1
 80056c2:	6213      	str	r3, [r2, #32]
 80056c4:	e00b      	b.n	80056de <HAL_RCC_OscConfig+0x36e>
 80056c6:	4b67      	ldr	r3, [pc, #412]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	4a66      	ldr	r2, [pc, #408]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 80056cc:	f023 0301 	bic.w	r3, r3, #1
 80056d0:	6213      	str	r3, [r2, #32]
 80056d2:	4b64      	ldr	r3, [pc, #400]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	4a63      	ldr	r2, [pc, #396]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 80056d8:	f023 0304 	bic.w	r3, r3, #4
 80056dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d015      	beq.n	8005712 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056e6:	f7fe f849 	bl	800377c <HAL_GetTick>
 80056ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ec:	e00a      	b.n	8005704 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ee:	f7fe f845 	bl	800377c <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d901      	bls.n	8005704 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e0ab      	b.n	800585c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005704:	4b57      	ldr	r3, [pc, #348]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0ee      	beq.n	80056ee <HAL_RCC_OscConfig+0x37e>
 8005710:	e014      	b.n	800573c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005712:	f7fe f833 	bl	800377c <HAL_GetTick>
 8005716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005718:	e00a      	b.n	8005730 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800571a:	f7fe f82f 	bl	800377c <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	f241 3288 	movw	r2, #5000	; 0x1388
 8005728:	4293      	cmp	r3, r2
 800572a:	d901      	bls.n	8005730 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e095      	b.n	800585c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005730:	4b4c      	ldr	r3, [pc, #304]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 8005732:	6a1b      	ldr	r3, [r3, #32]
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1ee      	bne.n	800571a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800573c:	7dfb      	ldrb	r3, [r7, #23]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d105      	bne.n	800574e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005742:	4b48      	ldr	r3, [pc, #288]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	4a47      	ldr	r2, [pc, #284]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 8005748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800574c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	2b00      	cmp	r3, #0
 8005754:	f000 8081 	beq.w	800585a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005758:	4b42      	ldr	r3, [pc, #264]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f003 030c 	and.w	r3, r3, #12
 8005760:	2b08      	cmp	r3, #8
 8005762:	d061      	beq.n	8005828 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	69db      	ldr	r3, [r3, #28]
 8005768:	2b02      	cmp	r3, #2
 800576a:	d146      	bne.n	80057fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800576c:	4b3f      	ldr	r3, [pc, #252]	; (800586c <HAL_RCC_OscConfig+0x4fc>)
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005772:	f7fe f803 	bl	800377c <HAL_GetTick>
 8005776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005778:	e008      	b.n	800578c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800577a:	f7fd ffff 	bl	800377c <HAL_GetTick>
 800577e:	4602      	mov	r2, r0
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	1ad3      	subs	r3, r2, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d901      	bls.n	800578c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005788:	2303      	movs	r3, #3
 800578a:	e067      	b.n	800585c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800578c:	4b35      	ldr	r3, [pc, #212]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1f0      	bne.n	800577a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057a0:	d108      	bne.n	80057b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80057a2:	4b30      	ldr	r3, [pc, #192]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	492d      	ldr	r1, [pc, #180]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057b4:	4b2b      	ldr	r3, [pc, #172]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a19      	ldr	r1, [r3, #32]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	430b      	orrs	r3, r1
 80057c6:	4927      	ldr	r1, [pc, #156]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 80057c8:	4313      	orrs	r3, r2
 80057ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057cc:	4b27      	ldr	r3, [pc, #156]	; (800586c <HAL_RCC_OscConfig+0x4fc>)
 80057ce:	2201      	movs	r2, #1
 80057d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d2:	f7fd ffd3 	bl	800377c <HAL_GetTick>
 80057d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057d8:	e008      	b.n	80057ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057da:	f7fd ffcf 	bl	800377c <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e037      	b.n	800585c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057ec:	4b1d      	ldr	r3, [pc, #116]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d0f0      	beq.n	80057da <HAL_RCC_OscConfig+0x46a>
 80057f8:	e02f      	b.n	800585a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057fa:	4b1c      	ldr	r3, [pc, #112]	; (800586c <HAL_RCC_OscConfig+0x4fc>)
 80057fc:	2200      	movs	r2, #0
 80057fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005800:	f7fd ffbc 	bl	800377c <HAL_GetTick>
 8005804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005806:	e008      	b.n	800581a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005808:	f7fd ffb8 	bl	800377c <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	2b02      	cmp	r3, #2
 8005814:	d901      	bls.n	800581a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005816:	2303      	movs	r3, #3
 8005818:	e020      	b.n	800585c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800581a:	4b12      	ldr	r3, [pc, #72]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1f0      	bne.n	8005808 <HAL_RCC_OscConfig+0x498>
 8005826:	e018      	b.n	800585a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	69db      	ldr	r3, [r3, #28]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d101      	bne.n	8005834 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e013      	b.n	800585c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005834:	4b0b      	ldr	r3, [pc, #44]	; (8005864 <HAL_RCC_OscConfig+0x4f4>)
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	429a      	cmp	r2, r3
 8005846:	d106      	bne.n	8005856 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005852:	429a      	cmp	r2, r3
 8005854:	d001      	beq.n	800585a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e000      	b.n	800585c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3718      	adds	r7, #24
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	40021000 	.word	0x40021000
 8005868:	40007000 	.word	0x40007000
 800586c:	42420060 	.word	0x42420060

08005870 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d101      	bne.n	8005884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e0d0      	b.n	8005a26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005884:	4b6a      	ldr	r3, [pc, #424]	; (8005a30 <HAL_RCC_ClockConfig+0x1c0>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	429a      	cmp	r2, r3
 8005890:	d910      	bls.n	80058b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005892:	4b67      	ldr	r3, [pc, #412]	; (8005a30 <HAL_RCC_ClockConfig+0x1c0>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f023 0207 	bic.w	r2, r3, #7
 800589a:	4965      	ldr	r1, [pc, #404]	; (8005a30 <HAL_RCC_ClockConfig+0x1c0>)
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	4313      	orrs	r3, r2
 80058a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058a2:	4b63      	ldr	r3, [pc, #396]	; (8005a30 <HAL_RCC_ClockConfig+0x1c0>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0307 	and.w	r3, r3, #7
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d001      	beq.n	80058b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e0b8      	b.n	8005a26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d020      	beq.n	8005902 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d005      	beq.n	80058d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058cc:	4b59      	ldr	r3, [pc, #356]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	4a58      	ldr	r2, [pc, #352]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 80058d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80058d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 0308 	and.w	r3, r3, #8
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d005      	beq.n	80058f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058e4:	4b53      	ldr	r3, [pc, #332]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	4a52      	ldr	r2, [pc, #328]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 80058ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80058ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058f0:	4b50      	ldr	r3, [pc, #320]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	494d      	ldr	r1, [pc, #308]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d040      	beq.n	8005990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	2b01      	cmp	r3, #1
 8005914:	d107      	bne.n	8005926 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005916:	4b47      	ldr	r3, [pc, #284]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d115      	bne.n	800594e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e07f      	b.n	8005a26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	2b02      	cmp	r3, #2
 800592c:	d107      	bne.n	800593e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800592e:	4b41      	ldr	r3, [pc, #260]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d109      	bne.n	800594e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e073      	b.n	8005a26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800593e:	4b3d      	ldr	r3, [pc, #244]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e06b      	b.n	8005a26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800594e:	4b39      	ldr	r3, [pc, #228]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f023 0203 	bic.w	r2, r3, #3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	4936      	ldr	r1, [pc, #216]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 800595c:	4313      	orrs	r3, r2
 800595e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005960:	f7fd ff0c 	bl	800377c <HAL_GetTick>
 8005964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005966:	e00a      	b.n	800597e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005968:	f7fd ff08 	bl	800377c <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	f241 3288 	movw	r2, #5000	; 0x1388
 8005976:	4293      	cmp	r3, r2
 8005978:	d901      	bls.n	800597e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e053      	b.n	8005a26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800597e:	4b2d      	ldr	r3, [pc, #180]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f003 020c 	and.w	r2, r3, #12
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	429a      	cmp	r2, r3
 800598e:	d1eb      	bne.n	8005968 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005990:	4b27      	ldr	r3, [pc, #156]	; (8005a30 <HAL_RCC_ClockConfig+0x1c0>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d210      	bcs.n	80059c0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800599e:	4b24      	ldr	r3, [pc, #144]	; (8005a30 <HAL_RCC_ClockConfig+0x1c0>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f023 0207 	bic.w	r2, r3, #7
 80059a6:	4922      	ldr	r1, [pc, #136]	; (8005a30 <HAL_RCC_ClockConfig+0x1c0>)
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ae:	4b20      	ldr	r3, [pc, #128]	; (8005a30 <HAL_RCC_ClockConfig+0x1c0>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0307 	and.w	r3, r3, #7
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d001      	beq.n	80059c0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e032      	b.n	8005a26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0304 	and.w	r3, r3, #4
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d008      	beq.n	80059de <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059cc:	4b19      	ldr	r3, [pc, #100]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	4916      	ldr	r1, [pc, #88]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0308 	and.w	r3, r3, #8
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d009      	beq.n	80059fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80059ea:	4b12      	ldr	r3, [pc, #72]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	490e      	ldr	r1, [pc, #56]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80059fe:	f000 f821 	bl	8005a44 <HAL_RCC_GetSysClockFreq>
 8005a02:	4601      	mov	r1, r0
 8005a04:	4b0b      	ldr	r3, [pc, #44]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	091b      	lsrs	r3, r3, #4
 8005a0a:	f003 030f 	and.w	r3, r3, #15
 8005a0e:	4a0a      	ldr	r2, [pc, #40]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 8005a10:	5cd3      	ldrb	r3, [r2, r3]
 8005a12:	fa21 f303 	lsr.w	r3, r1, r3
 8005a16:	4a09      	ldr	r2, [pc, #36]	; (8005a3c <HAL_RCC_ClockConfig+0x1cc>)
 8005a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a1a:	4b09      	ldr	r3, [pc, #36]	; (8005a40 <HAL_RCC_ClockConfig+0x1d0>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fd fe6a 	bl	80036f8 <HAL_InitTick>

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3710      	adds	r7, #16
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
 8005a2e:	bf00      	nop
 8005a30:	40022000 	.word	0x40022000
 8005a34:	40021000 	.word	0x40021000
 8005a38:	0800853c 	.word	0x0800853c
 8005a3c:	20000008 	.word	0x20000008
 8005a40:	2000000c 	.word	0x2000000c

08005a44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a44:	b490      	push	{r4, r7}
 8005a46:	b08a      	sub	sp, #40	; 0x28
 8005a48:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8005a4a:	4b2a      	ldr	r3, [pc, #168]	; (8005af4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005a4c:	1d3c      	adds	r4, r7, #4
 8005a4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8005a50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8005a54:	4b28      	ldr	r3, [pc, #160]	; (8005af8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8005a56:	881b      	ldrh	r3, [r3, #0]
 8005a58:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	61fb      	str	r3, [r7, #28]
 8005a5e:	2300      	movs	r3, #0
 8005a60:	61bb      	str	r3, [r7, #24]
 8005a62:	2300      	movs	r3, #0
 8005a64:	627b      	str	r3, [r7, #36]	; 0x24
 8005a66:	2300      	movs	r3, #0
 8005a68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005a6e:	4b23      	ldr	r3, [pc, #140]	; (8005afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	f003 030c 	and.w	r3, r3, #12
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d002      	beq.n	8005a84 <HAL_RCC_GetSysClockFreq+0x40>
 8005a7e:	2b08      	cmp	r3, #8
 8005a80:	d003      	beq.n	8005a8a <HAL_RCC_GetSysClockFreq+0x46>
 8005a82:	e02d      	b.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a84:	4b1e      	ldr	r3, [pc, #120]	; (8005b00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a86:	623b      	str	r3, [r7, #32]
      break;
 8005a88:	e02d      	b.n	8005ae6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	0c9b      	lsrs	r3, r3, #18
 8005a8e:	f003 030f 	and.w	r3, r3, #15
 8005a92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005a96:	4413      	add	r3, r2
 8005a98:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8005a9c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005a9e:	69fb      	ldr	r3, [r7, #28]
 8005aa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d013      	beq.n	8005ad0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005aa8:	4b14      	ldr	r3, [pc, #80]	; (8005afc <HAL_RCC_GetSysClockFreq+0xb8>)
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	0c5b      	lsrs	r3, r3, #17
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005abc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	4a0f      	ldr	r2, [pc, #60]	; (8005b00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ac2:	fb02 f203 	mul.w	r2, r2, r3
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005acc:	627b      	str	r3, [r7, #36]	; 0x24
 8005ace:	e004      	b.n	8005ada <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	4a0c      	ldr	r2, [pc, #48]	; (8005b04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ad4:	fb02 f303 	mul.w	r3, r2, r3
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	623b      	str	r3, [r7, #32]
      break;
 8005ade:	e002      	b.n	8005ae6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ae0:	4b07      	ldr	r3, [pc, #28]	; (8005b00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ae2:	623b      	str	r3, [r7, #32]
      break;
 8005ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3728      	adds	r7, #40	; 0x28
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bc90      	pop	{r4, r7}
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	08008520 	.word	0x08008520
 8005af8:	08008530 	.word	0x08008530
 8005afc:	40021000 	.word	0x40021000
 8005b00:	007a1200 	.word	0x007a1200
 8005b04:	003d0900 	.word	0x003d0900

08005b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b0c:	4b02      	ldr	r3, [pc, #8]	; (8005b18 <HAL_RCC_GetHCLKFreq+0x10>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bc80      	pop	{r7}
 8005b16:	4770      	bx	lr
 8005b18:	20000008 	.word	0x20000008

08005b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005b20:	f7ff fff2 	bl	8005b08 <HAL_RCC_GetHCLKFreq>
 8005b24:	4601      	mov	r1, r0
 8005b26:	4b05      	ldr	r3, [pc, #20]	; (8005b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	0a1b      	lsrs	r3, r3, #8
 8005b2c:	f003 0307 	and.w	r3, r3, #7
 8005b30:	4a03      	ldr	r2, [pc, #12]	; (8005b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b32:	5cd3      	ldrb	r3, [r2, r3]
 8005b34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	0800854c 	.word	0x0800854c

08005b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b48:	f7ff ffde 	bl	8005b08 <HAL_RCC_GetHCLKFreq>
 8005b4c:	4601      	mov	r1, r0
 8005b4e:	4b05      	ldr	r3, [pc, #20]	; (8005b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	0adb      	lsrs	r3, r3, #11
 8005b54:	f003 0307 	and.w	r3, r3, #7
 8005b58:	4a03      	ldr	r2, [pc, #12]	; (8005b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b5a:	5cd3      	ldrb	r3, [r2, r3]
 8005b5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	40021000 	.word	0x40021000
 8005b68:	0800854c 	.word	0x0800854c

08005b6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005b74:	4b0a      	ldr	r3, [pc, #40]	; (8005ba0 <RCC_Delay+0x34>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a0a      	ldr	r2, [pc, #40]	; (8005ba4 <RCC_Delay+0x38>)
 8005b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7e:	0a5b      	lsrs	r3, r3, #9
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	fb02 f303 	mul.w	r3, r2, r3
 8005b86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005b88:	bf00      	nop
  }
  while (Delay --);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	1e5a      	subs	r2, r3, #1
 8005b8e:	60fa      	str	r2, [r7, #12]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d1f9      	bne.n	8005b88 <RCC_Delay+0x1c>
}
 8005b94:	bf00      	nop
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bc80      	pop	{r7}
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	20000008 	.word	0x20000008
 8005ba4:	10624dd3 	.word	0x10624dd3

08005ba8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e03f      	b.n	8005c3a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d106      	bne.n	8005bd4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7fd fc74 	bl	80034bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2224      	movs	r2, #36	; 0x24
 8005bd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68da      	ldr	r2, [r3, #12]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005bea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 fd0f 	bl	8006610 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	691a      	ldr	r2, [r3, #16]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	695a      	ldr	r2, [r3, #20]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c10:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68da      	ldr	r2, [r3, #12]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005c20:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b088      	sub	sp, #32
 8005c46:	af02      	add	r7, sp, #8
 8005c48:	60f8      	str	r0, [r7, #12]
 8005c4a:	60b9      	str	r1, [r7, #8]
 8005c4c:	603b      	str	r3, [r7, #0]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b20      	cmp	r3, #32
 8005c60:	f040 8083 	bne.w	8005d6a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <HAL_UART_Transmit+0x2e>
 8005c6a:	88fb      	ldrh	r3, [r7, #6]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e07b      	b.n	8005d6c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <HAL_UART_Transmit+0x40>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e074      	b.n	8005d6c <HAL_UART_Transmit+0x12a>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2221      	movs	r2, #33	; 0x21
 8005c94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005c98:	f7fd fd70 	bl	800377c <HAL_GetTick>
 8005c9c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	88fa      	ldrh	r2, [r7, #6]
 8005ca2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	88fa      	ldrh	r2, [r7, #6]
 8005ca8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005caa:	e042      	b.n	8005d32 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	3b01      	subs	r3, #1
 8005cb4:	b29a      	uxth	r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc2:	d122      	bne.n	8005d0a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	2180      	movs	r1, #128	; 0x80
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f000 fb1f 	bl	8006312 <UART_WaitOnFlagUntilTimeout>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d001      	beq.n	8005cde <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e046      	b.n	8005d6c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cf0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	691b      	ldr	r3, [r3, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d103      	bne.n	8005d02 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	3302      	adds	r3, #2
 8005cfe:	60bb      	str	r3, [r7, #8]
 8005d00:	e017      	b.n	8005d32 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	3301      	adds	r3, #1
 8005d06:	60bb      	str	r3, [r7, #8]
 8005d08:	e013      	b.n	8005d32 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2200      	movs	r2, #0
 8005d12:	2180      	movs	r1, #128	; 0x80
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 fafc 	bl	8006312 <UART_WaitOnFlagUntilTimeout>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e023      	b.n	8005d6c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	1c5a      	adds	r2, r3, #1
 8005d28:	60ba      	str	r2, [r7, #8]
 8005d2a:	781a      	ldrb	r2, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1b7      	bne.n	8005cac <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	2200      	movs	r2, #0
 8005d44:	2140      	movs	r1, #64	; 0x40
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 fae3 	bl	8006312 <UART_WaitOnFlagUntilTimeout>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e00a      	b.n	8005d6c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005d66:	2300      	movs	r3, #0
 8005d68:	e000      	b.n	8005d6c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005d6a:	2302      	movs	r3, #2
  }
}
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	3718      	adds	r7, #24
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}

08005d74 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b20      	cmp	r3, #32
 8005d8c:	d153      	bne.n	8005e36 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d002      	beq.n	8005d9a <HAL_UART_Transmit_DMA+0x26>
 8005d94:	88fb      	ldrh	r3, [r7, #6]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e04c      	b.n	8005e38 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d101      	bne.n	8005dac <HAL_UART_Transmit_DMA+0x38>
 8005da8:	2302      	movs	r3, #2
 8005daa:	e045      	b.n	8005e38 <HAL_UART_Transmit_DMA+0xc4>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005db4:	68ba      	ldr	r2, [r7, #8]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	88fa      	ldrh	r2, [r7, #6]
 8005dbe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	88fa      	ldrh	r2, [r7, #6]
 8005dc4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2221      	movs	r2, #33	; 0x21
 8005dd0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd8:	4a19      	ldr	r2, [pc, #100]	; (8005e40 <HAL_UART_Transmit_DMA+0xcc>)
 8005dda:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de0:	4a18      	ldr	r2, [pc, #96]	; (8005e44 <HAL_UART_Transmit_DMA+0xd0>)
 8005de2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de8:	4a17      	ldr	r2, [pc, #92]	; (8005e48 <HAL_UART_Transmit_DMA+0xd4>)
 8005dea:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df0:	2200      	movs	r2, #0
 8005df2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8005df4:	f107 0308 	add.w	r3, r7, #8
 8005df8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	6819      	ldr	r1, [r3, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	3304      	adds	r3, #4
 8005e08:	461a      	mov	r2, r3
 8005e0a:	88fb      	ldrh	r3, [r7, #6]
 8005e0c:	f7fd fe4a 	bl	8003aa4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e18:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	695a      	ldr	r2, [r3, #20]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e30:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	e000      	b.n	8005e38 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8005e36:	2302      	movs	r3, #2
  }
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3718      	adds	r7, #24
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	0800618d 	.word	0x0800618d
 8005e44:	080061df 	.word	0x080061df
 8005e48:	0800627f 	.word	0x0800627f

08005e4c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	4613      	mov	r3, r2
 8005e58:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b20      	cmp	r3, #32
 8005e64:	d166      	bne.n	8005f34 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <HAL_UART_Receive_DMA+0x26>
 8005e6c:	88fb      	ldrh	r3, [r7, #6]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e05f      	b.n	8005f36 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d101      	bne.n	8005e84 <HAL_UART_Receive_DMA+0x38>
 8005e80:	2302      	movs	r3, #2
 8005e82:	e058      	b.n	8005f36 <HAL_UART_Receive_DMA+0xea>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	88fa      	ldrh	r2, [r7, #6]
 8005e96:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2222      	movs	r2, #34	; 0x22
 8005ea2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eaa:	4a25      	ldr	r2, [pc, #148]	; (8005f40 <HAL_UART_Receive_DMA+0xf4>)
 8005eac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eb2:	4a24      	ldr	r2, [pc, #144]	; (8005f44 <HAL_UART_Receive_DMA+0xf8>)
 8005eb4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005eba:	4a23      	ldr	r2, [pc, #140]	; (8005f48 <HAL_UART_Receive_DMA+0xfc>)
 8005ebc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8005ec6:	f107 0308 	add.w	r3, r7, #8
 8005eca:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	88fb      	ldrh	r3, [r7, #6]
 8005ede:	f7fd fde1 	bl	8003aa4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	613b      	str	r3, [r7, #16]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	613b      	str	r3, [r7, #16]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	613b      	str	r3, [r7, #16]
 8005ef6:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f0e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	695a      	ldr	r2, [r3, #20]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f042 0201 	orr.w	r2, r2, #1
 8005f1e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	695a      	ldr	r2, [r3, #20]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f2e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005f30:	2300      	movs	r3, #0
 8005f32:	e000      	b.n	8005f36 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005f34:	2302      	movs	r3, #2
  }
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3718      	adds	r7, #24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	080061fb 	.word	0x080061fb
 8005f44:	08006263 	.word	0x08006263
 8005f48:	0800627f 	.word	0x0800627f

08005f4c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b088      	sub	sp, #32
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005f70:	2300      	movs	r3, #0
 8005f72:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	f003 030f 	and.w	r3, r3, #15
 8005f7a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10d      	bne.n	8005f9e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	f003 0320 	and.w	r3, r3, #32
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d008      	beq.n	8005f9e <HAL_UART_IRQHandler+0x52>
 8005f8c:	69bb      	ldr	r3, [r7, #24]
 8005f8e:	f003 0320 	and.w	r3, r3, #32
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fab8 	bl	800650c <UART_Receive_IT>
      return;
 8005f9c:	e0cc      	b.n	8006138 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 80ab 	beq.w	80060fc <HAL_UART_IRQHandler+0x1b0>
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d105      	bne.n	8005fbc <HAL_UART_IRQHandler+0x70>
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f000 80a0 	beq.w	80060fc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00a      	beq.n	8005fdc <HAL_UART_IRQHandler+0x90>
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d005      	beq.n	8005fdc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fd4:	f043 0201 	orr.w	r2, r3, #1
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	f003 0304 	and.w	r3, r3, #4
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00a      	beq.n	8005ffc <HAL_UART_IRQHandler+0xb0>
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f003 0301 	and.w	r3, r3, #1
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d005      	beq.n	8005ffc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff4:	f043 0202 	orr.w	r2, r3, #2
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	f003 0302 	and.w	r3, r3, #2
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00a      	beq.n	800601c <HAL_UART_IRQHandler+0xd0>
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	d005      	beq.n	800601c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006014:	f043 0204 	orr.w	r2, r3, #4
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	f003 0308 	and.w	r3, r3, #8
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00a      	beq.n	800603c <HAL_UART_IRQHandler+0xf0>
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b00      	cmp	r3, #0
 800602e:	d005      	beq.n	800603c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006034:	f043 0208 	orr.w	r2, r3, #8
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006040:	2b00      	cmp	r3, #0
 8006042:	d078      	beq.n	8006136 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	f003 0320 	and.w	r3, r3, #32
 800604a:	2b00      	cmp	r3, #0
 800604c:	d007      	beq.n	800605e <HAL_UART_IRQHandler+0x112>
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	f003 0320 	and.w	r3, r3, #32
 8006054:	2b00      	cmp	r3, #0
 8006056:	d002      	beq.n	800605e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fa57 	bl	800650c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006068:	2b00      	cmp	r3, #0
 800606a:	bf14      	ite	ne
 800606c:	2301      	movne	r3, #1
 800606e:	2300      	moveq	r3, #0
 8006070:	b2db      	uxtb	r3, r3
 8006072:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006078:	f003 0308 	and.w	r3, r3, #8
 800607c:	2b00      	cmp	r3, #0
 800607e:	d102      	bne.n	8006086 <HAL_UART_IRQHandler+0x13a>
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d031      	beq.n	80060ea <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f9a2 	bl	80063d0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006096:	2b00      	cmp	r3, #0
 8006098:	d023      	beq.n	80060e2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695a      	ldr	r2, [r3, #20]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060a8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d013      	beq.n	80060da <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060b6:	4a22      	ldr	r2, [pc, #136]	; (8006140 <HAL_UART_IRQHandler+0x1f4>)
 80060b8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fd fd50 	bl	8003b64 <HAL_DMA_Abort_IT>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d016      	beq.n	80060f8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80060d4:	4610      	mov	r0, r2
 80060d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d8:	e00e      	b.n	80060f8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f84d 	bl	800617a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e0:	e00a      	b.n	80060f8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f849 	bl	800617a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e8:	e006      	b.n	80060f8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f845 	bl	800617a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80060f6:	e01e      	b.n	8006136 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f8:	bf00      	nop
    return;
 80060fa:	e01c      	b.n	8006136 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006102:	2b00      	cmp	r3, #0
 8006104:	d008      	beq.n	8006118 <HAL_UART_IRQHandler+0x1cc>
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800610c:	2b00      	cmp	r3, #0
 800610e:	d003      	beq.n	8006118 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f98e 	bl	8006432 <UART_Transmit_IT>
    return;
 8006116:	e00f      	b.n	8006138 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006118:	69fb      	ldr	r3, [r7, #28]
 800611a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00a      	beq.n	8006138 <HAL_UART_IRQHandler+0x1ec>
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006128:	2b00      	cmp	r3, #0
 800612a:	d005      	beq.n	8006138 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f9d5 	bl	80064dc <UART_EndTransmit_IT>
    return;
 8006132:	bf00      	nop
 8006134:	e000      	b.n	8006138 <HAL_UART_IRQHandler+0x1ec>
    return;
 8006136:	bf00      	nop
  }
}
 8006138:	3720      	adds	r7, #32
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	0800640b 	.word	0x0800640b

08006144 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800614c:	bf00      	nop
 800614e:	370c      	adds	r7, #12
 8006150:	46bd      	mov	sp, r7
 8006152:	bc80      	pop	{r7}
 8006154:	4770      	bx	lr

08006156 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006156:	b480      	push	{r7}
 8006158:	b083      	sub	sp, #12
 800615a:	af00      	add	r7, sp, #0
 800615c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800615e:	bf00      	nop
 8006160:	370c      	adds	r7, #12
 8006162:	46bd      	mov	sp, r7
 8006164:	bc80      	pop	{r7}
 8006166:	4770      	bx	lr

08006168 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	bc80      	pop	{r7}
 8006178:	4770      	bx	lr

0800617a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800617a:	b480      	push	{r7}
 800617c:	b083      	sub	sp, #12
 800617e:	af00      	add	r7, sp, #0
 8006180:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006182:	bf00      	nop
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	bc80      	pop	{r7}
 800618a:	4770      	bx	lr

0800618c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006198:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0320 	and.w	r3, r3, #32
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d113      	bne.n	80061d0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	695a      	ldr	r2, [r3, #20]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061bc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68da      	ldr	r2, [r3, #12]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061cc:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80061ce:	e002      	b.n	80061d6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80061d0:	68f8      	ldr	r0, [r7, #12]
 80061d2:	f7ff ffb7 	bl	8006144 <HAL_UART_TxCpltCallback>
}
 80061d6:	bf00      	nop
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b084      	sub	sp, #16
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ea:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f7ff ffb2 	bl	8006156 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061f2:	bf00      	nop
 80061f4:	3710      	adds	r7, #16
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}

080061fa <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b084      	sub	sp, #16
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006206:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f003 0320 	and.w	r3, r3, #32
 8006212:	2b00      	cmp	r3, #0
 8006214:	d11e      	bne.n	8006254 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68da      	ldr	r2, [r3, #12]
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800622a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	695a      	ldr	r2, [r3, #20]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f022 0201 	bic.w	r2, r2, #1
 800623a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	695a      	ldr	r2, [r3, #20]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800624a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2220      	movs	r2, #32
 8006250:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f7fb fb57 	bl	8001908 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800625a:	bf00      	nop
 800625c:	3710      	adds	r7, #16
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}

08006262 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006262:	b580      	push	{r7, lr}
 8006264:	b084      	sub	sp, #16
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006270:	68f8      	ldr	r0, [r7, #12]
 8006272:	f7ff ff79 	bl	8006168 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006276:	bf00      	nop
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006286:	2300      	movs	r3, #0
 8006288:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629a:	2b00      	cmp	r3, #0
 800629c:	bf14      	ite	ne
 800629e:	2301      	movne	r3, #1
 80062a0:	2300      	moveq	r3, #0
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80062ac:	b2db      	uxtb	r3, r3
 80062ae:	2b21      	cmp	r3, #33	; 0x21
 80062b0:	d108      	bne.n	80062c4 <UART_DMAError+0x46>
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d005      	beq.n	80062c4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	2200      	movs	r2, #0
 80062bc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80062be:	68b8      	ldr	r0, [r7, #8]
 80062c0:	f000 f871 	bl	80063a6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	bf14      	ite	ne
 80062d2:	2301      	movne	r3, #1
 80062d4:	2300      	moveq	r3, #0
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b22      	cmp	r3, #34	; 0x22
 80062e4:	d108      	bne.n	80062f8 <UART_DMAError+0x7a>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d005      	beq.n	80062f8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	2200      	movs	r2, #0
 80062f0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80062f2:	68b8      	ldr	r0, [r7, #8]
 80062f4:	f000 f86c 	bl	80063d0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062fc:	f043 0210 	orr.w	r2, r3, #16
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006304:	68b8      	ldr	r0, [r7, #8]
 8006306:	f7ff ff38 	bl	800617a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800630a:	bf00      	nop
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b084      	sub	sp, #16
 8006316:	af00      	add	r7, sp, #0
 8006318:	60f8      	str	r0, [r7, #12]
 800631a:	60b9      	str	r1, [r7, #8]
 800631c:	603b      	str	r3, [r7, #0]
 800631e:	4613      	mov	r3, r2
 8006320:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006322:	e02c      	b.n	800637e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800632a:	d028      	beq.n	800637e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800632c:	69bb      	ldr	r3, [r7, #24]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d007      	beq.n	8006342 <UART_WaitOnFlagUntilTimeout+0x30>
 8006332:	f7fd fa23 	bl	800377c <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	69ba      	ldr	r2, [r7, #24]
 800633e:	429a      	cmp	r2, r3
 8006340:	d21d      	bcs.n	800637e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006350:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	695a      	ldr	r2, [r3, #20]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 0201 	bic.w	r2, r2, #1
 8006360:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2220      	movs	r2, #32
 8006366:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2220      	movs	r2, #32
 800636e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e00f      	b.n	800639e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	4013      	ands	r3, r2
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	429a      	cmp	r2, r3
 800638c:	bf0c      	ite	eq
 800638e:	2301      	moveq	r3, #1
 8006390:	2300      	movne	r3, #0
 8006392:	b2db      	uxtb	r3, r3
 8006394:	461a      	mov	r2, r3
 8006396:	79fb      	ldrb	r3, [r7, #7]
 8006398:	429a      	cmp	r2, r3
 800639a:	d0c3      	beq.n	8006324 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b083      	sub	sp, #12
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68da      	ldr	r2, [r3, #12]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80063bc:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2220      	movs	r2, #32
 80063c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80063c6:	bf00      	nop
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bc80      	pop	{r7}
 80063ce:	4770      	bx	lr

080063d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063d0:	b480      	push	{r7}
 80063d2:	b083      	sub	sp, #12
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68da      	ldr	r2, [r3, #12]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80063e6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	695a      	ldr	r2, [r3, #20]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0201 	bic.w	r2, r2, #1
 80063f6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2220      	movs	r2, #32
 80063fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	bc80      	pop	{r7}
 8006408:	4770      	bx	lr

0800640a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b084      	sub	sp, #16
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006416:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2200      	movs	r2, #0
 800641c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2200      	movs	r2, #0
 8006422:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f7ff fea8 	bl	800617a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800642a:	bf00      	nop
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006432:	b480      	push	{r7}
 8006434:	b085      	sub	sp, #20
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b21      	cmp	r3, #33	; 0x21
 8006444:	d144      	bne.n	80064d0 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800644e:	d11a      	bne.n	8006486 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a1b      	ldr	r3, [r3, #32]
 8006454:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	881b      	ldrh	r3, [r3, #0]
 800645a:	461a      	mov	r2, r3
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006464:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d105      	bne.n	800647a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	1c9a      	adds	r2, r3, #2
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	621a      	str	r2, [r3, #32]
 8006478:	e00e      	b.n	8006498 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	621a      	str	r2, [r3, #32]
 8006484:	e008      	b.n	8006498 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a1b      	ldr	r3, [r3, #32]
 800648a:	1c59      	adds	r1, r3, #1
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	6211      	str	r1, [r2, #32]
 8006490:	781a      	ldrb	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800649c:	b29b      	uxth	r3, r3
 800649e:	3b01      	subs	r3, #1
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	4619      	mov	r1, r3
 80064a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d10f      	bne.n	80064cc <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	68da      	ldr	r2, [r3, #12]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80064ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	68da      	ldr	r2, [r3, #12]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80064cc:	2300      	movs	r3, #0
 80064ce:	e000      	b.n	80064d2 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80064d0:	2302      	movs	r3, #2
  }
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bc80      	pop	{r7}
 80064da:	4770      	bx	lr

080064dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	68da      	ldr	r2, [r3, #12]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2220      	movs	r2, #32
 80064f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f7ff fe21 	bl	8006144 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3708      	adds	r7, #8
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b22      	cmp	r3, #34	; 0x22
 800651e:	d171      	bne.n	8006604 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006528:	d123      	bne.n	8006572 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	691b      	ldr	r3, [r3, #16]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d10e      	bne.n	8006556 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	b29b      	uxth	r3, r3
 8006540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006544:	b29a      	uxth	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800654e:	1c9a      	adds	r2, r3, #2
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	629a      	str	r2, [r3, #40]	; 0x28
 8006554:	e029      	b.n	80065aa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	b29b      	uxth	r3, r3
 800655e:	b2db      	uxtb	r3, r3
 8006560:	b29a      	uxth	r2, r3
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	629a      	str	r2, [r3, #40]	; 0x28
 8006570:	e01b      	b.n	80065aa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10a      	bne.n	8006590 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	6858      	ldr	r0, [r3, #4]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006584:	1c59      	adds	r1, r3, #1
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	6291      	str	r1, [r2, #40]	; 0x28
 800658a:	b2c2      	uxtb	r2, r0
 800658c:	701a      	strb	r2, [r3, #0]
 800658e:	e00c      	b.n	80065aa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	b2da      	uxtb	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659c:	1c58      	adds	r0, r3, #1
 800659e:	6879      	ldr	r1, [r7, #4]
 80065a0:	6288      	str	r0, [r1, #40]	; 0x28
 80065a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065a6:	b2d2      	uxtb	r2, r2
 80065a8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	3b01      	subs	r3, #1
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	4619      	mov	r1, r3
 80065b8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d120      	bne.n	8006600 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68da      	ldr	r2, [r3, #12]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f022 0220 	bic.w	r2, r2, #32
 80065cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68da      	ldr	r2, [r3, #12]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	695a      	ldr	r2, [r3, #20]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 0201 	bic.w	r2, r2, #1
 80065ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2220      	movs	r2, #32
 80065f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f7fb f986 	bl	8001908 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80065fc:	2300      	movs	r3, #0
 80065fe:	e002      	b.n	8006606 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006600:	2300      	movs	r3, #0
 8006602:	e000      	b.n	8006606 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006604:	2302      	movs	r3, #2
  }
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
	...

08006610 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	691b      	ldr	r3, [r3, #16]
 800661e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	689a      	ldr	r2, [r3, #8]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	431a      	orrs	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	4313      	orrs	r3, r2
 800663e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800664a:	f023 030c 	bic.w	r3, r3, #12
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	6812      	ldr	r2, [r2, #0]
 8006652:	68f9      	ldr	r1, [r7, #12]
 8006654:	430b      	orrs	r3, r1
 8006656:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	699a      	ldr	r2, [r3, #24]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a52      	ldr	r2, [pc, #328]	; (80067bc <UART_SetConfig+0x1ac>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d14e      	bne.n	8006716 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006678:	f7ff fa64 	bl	8005b44 <HAL_RCC_GetPCLK2Freq>
 800667c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	4613      	mov	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	009a      	lsls	r2, r3, #2
 8006688:	441a      	add	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	fbb2 f3f3 	udiv	r3, r2, r3
 8006694:	4a4a      	ldr	r2, [pc, #296]	; (80067c0 <UART_SetConfig+0x1b0>)
 8006696:	fba2 2303 	umull	r2, r3, r2, r3
 800669a:	095b      	lsrs	r3, r3, #5
 800669c:	0119      	lsls	r1, r3, #4
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	4613      	mov	r3, r2
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4413      	add	r3, r2
 80066a6:	009a      	lsls	r2, r3, #2
 80066a8:	441a      	add	r2, r3
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80066b4:	4b42      	ldr	r3, [pc, #264]	; (80067c0 <UART_SetConfig+0x1b0>)
 80066b6:	fba3 0302 	umull	r0, r3, r3, r2
 80066ba:	095b      	lsrs	r3, r3, #5
 80066bc:	2064      	movs	r0, #100	; 0x64
 80066be:	fb00 f303 	mul.w	r3, r0, r3
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	011b      	lsls	r3, r3, #4
 80066c6:	3332      	adds	r3, #50	; 0x32
 80066c8:	4a3d      	ldr	r2, [pc, #244]	; (80067c0 <UART_SetConfig+0x1b0>)
 80066ca:	fba2 2303 	umull	r2, r3, r2, r3
 80066ce:	095b      	lsrs	r3, r3, #5
 80066d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066d4:	4419      	add	r1, r3
 80066d6:	68ba      	ldr	r2, [r7, #8]
 80066d8:	4613      	mov	r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	009a      	lsls	r2, r3, #2
 80066e0:	441a      	add	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80066ec:	4b34      	ldr	r3, [pc, #208]	; (80067c0 <UART_SetConfig+0x1b0>)
 80066ee:	fba3 0302 	umull	r0, r3, r3, r2
 80066f2:	095b      	lsrs	r3, r3, #5
 80066f4:	2064      	movs	r0, #100	; 0x64
 80066f6:	fb00 f303 	mul.w	r3, r0, r3
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	011b      	lsls	r3, r3, #4
 80066fe:	3332      	adds	r3, #50	; 0x32
 8006700:	4a2f      	ldr	r2, [pc, #188]	; (80067c0 <UART_SetConfig+0x1b0>)
 8006702:	fba2 2303 	umull	r2, r3, r2, r3
 8006706:	095b      	lsrs	r3, r3, #5
 8006708:	f003 020f 	and.w	r2, r3, #15
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	440a      	add	r2, r1
 8006712:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8006714:	e04d      	b.n	80067b2 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8006716:	f7ff fa01 	bl	8005b1c <HAL_RCC_GetPCLK1Freq>
 800671a:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	4613      	mov	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	4413      	add	r3, r2
 8006724:	009a      	lsls	r2, r3, #2
 8006726:	441a      	add	r2, r3
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006732:	4a23      	ldr	r2, [pc, #140]	; (80067c0 <UART_SetConfig+0x1b0>)
 8006734:	fba2 2303 	umull	r2, r3, r2, r3
 8006738:	095b      	lsrs	r3, r3, #5
 800673a:	0119      	lsls	r1, r3, #4
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	009a      	lsls	r2, r3, #2
 8006746:	441a      	add	r2, r3
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006752:	4b1b      	ldr	r3, [pc, #108]	; (80067c0 <UART_SetConfig+0x1b0>)
 8006754:	fba3 0302 	umull	r0, r3, r3, r2
 8006758:	095b      	lsrs	r3, r3, #5
 800675a:	2064      	movs	r0, #100	; 0x64
 800675c:	fb00 f303 	mul.w	r3, r0, r3
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	011b      	lsls	r3, r3, #4
 8006764:	3332      	adds	r3, #50	; 0x32
 8006766:	4a16      	ldr	r2, [pc, #88]	; (80067c0 <UART_SetConfig+0x1b0>)
 8006768:	fba2 2303 	umull	r2, r3, r2, r3
 800676c:	095b      	lsrs	r3, r3, #5
 800676e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006772:	4419      	add	r1, r3
 8006774:	68ba      	ldr	r2, [r7, #8]
 8006776:	4613      	mov	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	009a      	lsls	r2, r3, #2
 800677e:	441a      	add	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	fbb2 f2f3 	udiv	r2, r2, r3
 800678a:	4b0d      	ldr	r3, [pc, #52]	; (80067c0 <UART_SetConfig+0x1b0>)
 800678c:	fba3 0302 	umull	r0, r3, r3, r2
 8006790:	095b      	lsrs	r3, r3, #5
 8006792:	2064      	movs	r0, #100	; 0x64
 8006794:	fb00 f303 	mul.w	r3, r0, r3
 8006798:	1ad3      	subs	r3, r2, r3
 800679a:	011b      	lsls	r3, r3, #4
 800679c:	3332      	adds	r3, #50	; 0x32
 800679e:	4a08      	ldr	r2, [pc, #32]	; (80067c0 <UART_SetConfig+0x1b0>)
 80067a0:	fba2 2303 	umull	r2, r3, r2, r3
 80067a4:	095b      	lsrs	r3, r3, #5
 80067a6:	f003 020f 	and.w	r2, r3, #15
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	440a      	add	r2, r1
 80067b0:	609a      	str	r2, [r3, #8]
}
 80067b2:	bf00      	nop
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	40013800 	.word	0x40013800
 80067c0:	51eb851f 	.word	0x51eb851f

080067c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	4603      	mov	r3, r0
 80067cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80067ce:	2300      	movs	r3, #0
 80067d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80067d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80067d6:	2b84      	cmp	r3, #132	; 0x84
 80067d8:	d005      	beq.n	80067e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80067da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	4413      	add	r3, r2
 80067e2:	3303      	adds	r3, #3
 80067e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80067e6:	68fb      	ldr	r3, [r7, #12]
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	bc80      	pop	{r7}
 80067f0:	4770      	bx	lr

080067f2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80067f6:	f000 facd 	bl	8006d94 <vTaskStartScheduler>
  
  return osOK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	bd80      	pop	{r7, pc}

08006800 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006800:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006802:	b089      	sub	sp, #36	; 0x24
 8006804:	af04      	add	r7, sp, #16
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d020      	beq.n	8006854 <osThreadCreate+0x54>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	699b      	ldr	r3, [r3, #24]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d01c      	beq.n	8006854 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685c      	ldr	r4, [r3, #4]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681d      	ldr	r5, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691e      	ldr	r6, [r3, #16]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800682c:	4618      	mov	r0, r3
 800682e:	f7ff ffc9 	bl	80067c4 <makeFreeRtosPriority>
 8006832:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	695b      	ldr	r3, [r3, #20]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800683c:	9202      	str	r2, [sp, #8]
 800683e:	9301      	str	r3, [sp, #4]
 8006840:	9100      	str	r1, [sp, #0]
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	4632      	mov	r2, r6
 8006846:	4629      	mov	r1, r5
 8006848:	4620      	mov	r0, r4
 800684a:	f000 f8e8 	bl	8006a1e <xTaskCreateStatic>
 800684e:	4603      	mov	r3, r0
 8006850:	60fb      	str	r3, [r7, #12]
 8006852:	e01c      	b.n	800688e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685c      	ldr	r4, [r3, #4]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006860:	b29e      	uxth	r6, r3
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006868:	4618      	mov	r0, r3
 800686a:	f7ff ffab 	bl	80067c4 <makeFreeRtosPriority>
 800686e:	4602      	mov	r2, r0
 8006870:	f107 030c 	add.w	r3, r7, #12
 8006874:	9301      	str	r3, [sp, #4]
 8006876:	9200      	str	r2, [sp, #0]
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	4632      	mov	r2, r6
 800687c:	4629      	mov	r1, r5
 800687e:	4620      	mov	r0, r4
 8006880:	f000 f926 	bl	8006ad0 <xTaskCreate>
 8006884:	4603      	mov	r3, r0
 8006886:	2b01      	cmp	r3, #1
 8006888:	d001      	beq.n	800688e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800688a:	2300      	movs	r3, #0
 800688c:	e000      	b.n	8006890 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800688e:	68fb      	ldr	r3, [r7, #12]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3714      	adds	r7, #20
 8006894:	46bd      	mov	sp, r7
 8006896:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006898 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <osDelay+0x16>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	e000      	b.n	80068b0 <osDelay+0x18>
 80068ae:	2301      	movs	r3, #1
 80068b0:	4618      	mov	r0, r3
 80068b2:	f000 fa3b 	bl	8006d2c <vTaskDelay>
  
  return osOK;
 80068b6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f103 0208 	add.w	r2, r3, #8
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f103 0208 	add.w	r2, r3, #8
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f103 0208 	add.w	r2, r3, #8
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bc80      	pop	{r7}
 80068fc:	4770      	bx	lr

080068fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80068fe:	b480      	push	{r7}
 8006900:	b083      	sub	sp, #12
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	bc80      	pop	{r7}
 8006914:	4770      	bx	lr

08006916 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006916:	b480      	push	{r7}
 8006918:	b085      	sub	sp, #20
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	689a      	ldr	r2, [r3, #8]
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	683a      	ldr	r2, [r7, #0]
 800693a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	1c5a      	adds	r2, r3, #1
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	601a      	str	r2, [r3, #0]
}
 8006952:	bf00      	nop
 8006954:	3714      	adds	r7, #20
 8006956:	46bd      	mov	sp, r7
 8006958:	bc80      	pop	{r7}
 800695a:	4770      	bx	lr

0800695c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006972:	d103      	bne.n	800697c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	60fb      	str	r3, [r7, #12]
 800697a:	e00c      	b.n	8006996 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	3308      	adds	r3, #8
 8006980:	60fb      	str	r3, [r7, #12]
 8006982:	e002      	b.n	800698a <vListInsert+0x2e>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	60fb      	str	r3, [r7, #12]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	429a      	cmp	r2, r3
 8006994:	d2f6      	bcs.n	8006984 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	685a      	ldr	r2, [r3, #4]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	683a      	ldr	r2, [r7, #0]
 80069a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	683a      	ldr	r2, [r7, #0]
 80069b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	1c5a      	adds	r2, r3, #1
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	601a      	str	r2, [r3, #0]
}
 80069c2:	bf00      	nop
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bc80      	pop	{r7}
 80069ca:	4770      	bx	lr

080069cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	6892      	ldr	r2, [r2, #8]
 80069e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	6852      	ldr	r2, [r2, #4]
 80069ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d103      	bne.n	8006a00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	689a      	ldr	r2, [r3, #8]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2200      	movs	r2, #0
 8006a04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	1e5a      	subs	r2, r3, #1
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
}
 8006a14:	4618      	mov	r0, r3
 8006a16:	3714      	adds	r7, #20
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bc80      	pop	{r7}
 8006a1c:	4770      	bx	lr

08006a1e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b08e      	sub	sp, #56	; 0x38
 8006a22:	af04      	add	r7, sp, #16
 8006a24:	60f8      	str	r0, [r7, #12]
 8006a26:	60b9      	str	r1, [r7, #8]
 8006a28:	607a      	str	r2, [r7, #4]
 8006a2a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d109      	bne.n	8006a46 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a36:	f383 8811 	msr	BASEPRI, r3
 8006a3a:	f3bf 8f6f 	isb	sy
 8006a3e:	f3bf 8f4f 	dsb	sy
 8006a42:	623b      	str	r3, [r7, #32]
 8006a44:	e7fe      	b.n	8006a44 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d109      	bne.n	8006a60 <xTaskCreateStatic+0x42>
 8006a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a50:	f383 8811 	msr	BASEPRI, r3
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	61fb      	str	r3, [r7, #28]
 8006a5e:	e7fe      	b.n	8006a5e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a60:	2354      	movs	r3, #84	; 0x54
 8006a62:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	2b54      	cmp	r3, #84	; 0x54
 8006a68:	d009      	beq.n	8006a7e <xTaskCreateStatic+0x60>
 8006a6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6e:	f383 8811 	msr	BASEPRI, r3
 8006a72:	f3bf 8f6f 	isb	sy
 8006a76:	f3bf 8f4f 	dsb	sy
 8006a7a:	61bb      	str	r3, [r7, #24]
 8006a7c:	e7fe      	b.n	8006a7c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d01e      	beq.n	8006ac2 <xTaskCreateStatic+0xa4>
 8006a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d01b      	beq.n	8006ac2 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a92:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	2202      	movs	r2, #2
 8006a98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	9303      	str	r3, [sp, #12]
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa2:	9302      	str	r3, [sp, #8]
 8006aa4:	f107 0314 	add.w	r3, r7, #20
 8006aa8:	9301      	str	r3, [sp, #4]
 8006aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aac:	9300      	str	r3, [sp, #0]
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	68b9      	ldr	r1, [r7, #8]
 8006ab4:	68f8      	ldr	r0, [r7, #12]
 8006ab6:	f000 f850 	bl	8006b5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006aba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006abc:	f000 f8cc 	bl	8006c58 <prvAddNewTaskToReadyList>
 8006ac0:	e001      	b.n	8006ac6 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006ac6:	697b      	ldr	r3, [r7, #20]
	}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3728      	adds	r7, #40	; 0x28
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b08c      	sub	sp, #48	; 0x30
 8006ad4:	af04      	add	r7, sp, #16
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	603b      	str	r3, [r7, #0]
 8006adc:	4613      	mov	r3, r2
 8006ade:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ae0:	88fb      	ldrh	r3, [r7, #6]
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f000 fe71 	bl	80077cc <pvPortMalloc>
 8006aea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d00e      	beq.n	8006b10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006af2:	2054      	movs	r0, #84	; 0x54
 8006af4:	f000 fe6a 	bl	80077cc <pvPortMalloc>
 8006af8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d003      	beq.n	8006b08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	631a      	str	r2, [r3, #48]	; 0x30
 8006b06:	e005      	b.n	8006b14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b08:	6978      	ldr	r0, [r7, #20]
 8006b0a:	f000 ff21 	bl	8007950 <vPortFree>
 8006b0e:	e001      	b.n	8006b14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b10:	2300      	movs	r3, #0
 8006b12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b14:	69fb      	ldr	r3, [r7, #28]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d017      	beq.n	8006b4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b22:	88fa      	ldrh	r2, [r7, #6]
 8006b24:	2300      	movs	r3, #0
 8006b26:	9303      	str	r3, [sp, #12]
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	9302      	str	r3, [sp, #8]
 8006b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b2e:	9301      	str	r3, [sp, #4]
 8006b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b32:	9300      	str	r3, [sp, #0]
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	68b9      	ldr	r1, [r7, #8]
 8006b38:	68f8      	ldr	r0, [r7, #12]
 8006b3a:	f000 f80e 	bl	8006b5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b3e:	69f8      	ldr	r0, [r7, #28]
 8006b40:	f000 f88a 	bl	8006c58 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b44:	2301      	movs	r3, #1
 8006b46:	61bb      	str	r3, [r7, #24]
 8006b48:	e002      	b.n	8006b50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b50:	69bb      	ldr	r3, [r7, #24]
	}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3720      	adds	r7, #32
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}

08006b5a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b5a:	b580      	push	{r7, lr}
 8006b5c:	b088      	sub	sp, #32
 8006b5e:	af00      	add	r7, sp, #0
 8006b60:	60f8      	str	r0, [r7, #12]
 8006b62:	60b9      	str	r1, [r7, #8]
 8006b64:	607a      	str	r2, [r7, #4]
 8006b66:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b72:	3b01      	subs	r3, #1
 8006b74:	009b      	lsls	r3, r3, #2
 8006b76:	4413      	add	r3, r2
 8006b78:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	f023 0307 	bic.w	r3, r3, #7
 8006b80:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	f003 0307 	and.w	r3, r3, #7
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d009      	beq.n	8006ba0 <prvInitialiseNewTask+0x46>
 8006b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	617b      	str	r3, [r7, #20]
 8006b9e:	e7fe      	b.n	8006b9e <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	61fb      	str	r3, [r7, #28]
 8006ba4:	e012      	b.n	8006bcc <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	69fb      	ldr	r3, [r7, #28]
 8006baa:	4413      	add	r3, r2
 8006bac:	7819      	ldrb	r1, [r3, #0]
 8006bae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	4413      	add	r3, r2
 8006bb4:	3334      	adds	r3, #52	; 0x34
 8006bb6:	460a      	mov	r2, r1
 8006bb8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d006      	beq.n	8006bd4 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	61fb      	str	r3, [r7, #28]
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	2b0f      	cmp	r3, #15
 8006bd0:	d9e9      	bls.n	8006ba6 <prvInitialiseNewTask+0x4c>
 8006bd2:	e000      	b.n	8006bd6 <prvInitialiseNewTask+0x7c>
		{
			break;
 8006bd4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd8:	2200      	movs	r2, #0
 8006bda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006be0:	2b06      	cmp	r3, #6
 8006be2:	d901      	bls.n	8006be8 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006be4:	2306      	movs	r3, #6
 8006be6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bf2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7ff fe7d 	bl	80068fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c06:	3318      	adds	r3, #24
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7ff fe78 	bl	80068fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c12:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c16:	f1c3 0207 	rsb	r2, r3, #7
 8006c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c1c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c26:	2200      	movs	r2, #0
 8006c28:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c32:	683a      	ldr	r2, [r7, #0]
 8006c34:	68f9      	ldr	r1, [r7, #12]
 8006c36:	69b8      	ldr	r0, [r7, #24]
 8006c38:	f000 fc24 	bl	8007484 <pxPortInitialiseStack>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c40:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d002      	beq.n	8006c4e <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c4c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c4e:	bf00      	nop
 8006c50:	3720      	adds	r7, #32
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
	...

08006c58 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c60:	f000 fcfa 	bl	8007658 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c64:	4b2a      	ldr	r3, [pc, #168]	; (8006d10 <prvAddNewTaskToReadyList+0xb8>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	4a29      	ldr	r2, [pc, #164]	; (8006d10 <prvAddNewTaskToReadyList+0xb8>)
 8006c6c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c6e:	4b29      	ldr	r3, [pc, #164]	; (8006d14 <prvAddNewTaskToReadyList+0xbc>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d109      	bne.n	8006c8a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c76:	4a27      	ldr	r2, [pc, #156]	; (8006d14 <prvAddNewTaskToReadyList+0xbc>)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c7c:	4b24      	ldr	r3, [pc, #144]	; (8006d10 <prvAddNewTaskToReadyList+0xb8>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d110      	bne.n	8006ca6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c84:	f000 fabc 	bl	8007200 <prvInitialiseTaskLists>
 8006c88:	e00d      	b.n	8006ca6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c8a:	4b23      	ldr	r3, [pc, #140]	; (8006d18 <prvAddNewTaskToReadyList+0xc0>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d109      	bne.n	8006ca6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c92:	4b20      	ldr	r3, [pc, #128]	; (8006d14 <prvAddNewTaskToReadyList+0xbc>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d802      	bhi.n	8006ca6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006ca0:	4a1c      	ldr	r2, [pc, #112]	; (8006d14 <prvAddNewTaskToReadyList+0xbc>)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ca6:	4b1d      	ldr	r3, [pc, #116]	; (8006d1c <prvAddNewTaskToReadyList+0xc4>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3301      	adds	r3, #1
 8006cac:	4a1b      	ldr	r2, [pc, #108]	; (8006d1c <prvAddNewTaskToReadyList+0xc4>)
 8006cae:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	409a      	lsls	r2, r3
 8006cb8:	4b19      	ldr	r3, [pc, #100]	; (8006d20 <prvAddNewTaskToReadyList+0xc8>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	4a18      	ldr	r2, [pc, #96]	; (8006d20 <prvAddNewTaskToReadyList+0xc8>)
 8006cc0:	6013      	str	r3, [r2, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	4413      	add	r3, r2
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	4a15      	ldr	r2, [pc, #84]	; (8006d24 <prvAddNewTaskToReadyList+0xcc>)
 8006cd0:	441a      	add	r2, r3
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	4610      	mov	r0, r2
 8006cda:	f7ff fe1c 	bl	8006916 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006cde:	f000 fce9 	bl	80076b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ce2:	4b0d      	ldr	r3, [pc, #52]	; (8006d18 <prvAddNewTaskToReadyList+0xc0>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d00e      	beq.n	8006d08 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006cea:	4b0a      	ldr	r3, [pc, #40]	; (8006d14 <prvAddNewTaskToReadyList+0xbc>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d207      	bcs.n	8006d08 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cf8:	4b0b      	ldr	r3, [pc, #44]	; (8006d28 <prvAddNewTaskToReadyList+0xd0>)
 8006cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cfe:	601a      	str	r2, [r3, #0]
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d08:	bf00      	nop
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	20000468 	.word	0x20000468
 8006d14:	20000368 	.word	0x20000368
 8006d18:	20000474 	.word	0x20000474
 8006d1c:	20000484 	.word	0x20000484
 8006d20:	20000470 	.word	0x20000470
 8006d24:	2000036c 	.word	0x2000036c
 8006d28:	e000ed04 	.word	0xe000ed04

08006d2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d34:	2300      	movs	r3, #0
 8006d36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d016      	beq.n	8006d6c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d3e:	4b13      	ldr	r3, [pc, #76]	; (8006d8c <vTaskDelay+0x60>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d009      	beq.n	8006d5a <vTaskDelay+0x2e>
 8006d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4a:	f383 8811 	msr	BASEPRI, r3
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f3bf 8f4f 	dsb	sy
 8006d56:	60bb      	str	r3, [r7, #8]
 8006d58:	e7fe      	b.n	8006d58 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006d5a:	f000 f879 	bl	8006e50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d5e:	2100      	movs	r1, #0
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 fb29 	bl	80073b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d66:	f000 f881 	bl	8006e6c <xTaskResumeAll>
 8006d6a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d107      	bne.n	8006d82 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006d72:	4b07      	ldr	r3, [pc, #28]	; (8006d90 <vTaskDelay+0x64>)
 8006d74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d78:	601a      	str	r2, [r3, #0]
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d82:	bf00      	nop
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop
 8006d8c:	20000490 	.word	0x20000490
 8006d90:	e000ed04 	.word	0xe000ed04

08006d94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b08a      	sub	sp, #40	; 0x28
 8006d98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006da2:	463a      	mov	r2, r7
 8006da4:	1d39      	adds	r1, r7, #4
 8006da6:	f107 0308 	add.w	r3, r7, #8
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fa f9c4 	bl	8001138 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006db0:	6839      	ldr	r1, [r7, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68ba      	ldr	r2, [r7, #8]
 8006db6:	9202      	str	r2, [sp, #8]
 8006db8:	9301      	str	r3, [sp, #4]
 8006dba:	2300      	movs	r3, #0
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	460a      	mov	r2, r1
 8006dc2:	491d      	ldr	r1, [pc, #116]	; (8006e38 <vTaskStartScheduler+0xa4>)
 8006dc4:	481d      	ldr	r0, [pc, #116]	; (8006e3c <vTaskStartScheduler+0xa8>)
 8006dc6:	f7ff fe2a 	bl	8006a1e <xTaskCreateStatic>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	4b1c      	ldr	r3, [pc, #112]	; (8006e40 <vTaskStartScheduler+0xac>)
 8006dce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006dd0:	4b1b      	ldr	r3, [pc, #108]	; (8006e40 <vTaskStartScheduler+0xac>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d002      	beq.n	8006dde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	617b      	str	r3, [r7, #20]
 8006ddc:	e001      	b.n	8006de2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006dde:	2300      	movs	r3, #0
 8006de0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d115      	bne.n	8006e14 <vTaskStartScheduler+0x80>
 8006de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dec:	f383 8811 	msr	BASEPRI, r3
 8006df0:	f3bf 8f6f 	isb	sy
 8006df4:	f3bf 8f4f 	dsb	sy
 8006df8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006dfa:	4b12      	ldr	r3, [pc, #72]	; (8006e44 <vTaskStartScheduler+0xb0>)
 8006dfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e00:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e02:	4b11      	ldr	r3, [pc, #68]	; (8006e48 <vTaskStartScheduler+0xb4>)
 8006e04:	2201      	movs	r2, #1
 8006e06:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006e08:	4b10      	ldr	r3, [pc, #64]	; (8006e4c <vTaskStartScheduler+0xb8>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e0e:	f000 fbb3 	bl	8007578 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e12:	e00d      	b.n	8006e30 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e1a:	d109      	bne.n	8006e30 <vTaskStartScheduler+0x9c>
 8006e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	60fb      	str	r3, [r7, #12]
 8006e2e:	e7fe      	b.n	8006e2e <vTaskStartScheduler+0x9a>
}
 8006e30:	bf00      	nop
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	08008534 	.word	0x08008534
 8006e3c:	080071d1 	.word	0x080071d1
 8006e40:	2000048c 	.word	0x2000048c
 8006e44:	20000488 	.word	0x20000488
 8006e48:	20000474 	.word	0x20000474
 8006e4c:	2000046c 	.word	0x2000046c

08006e50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e50:	b480      	push	{r7}
 8006e52:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006e54:	4b04      	ldr	r3, [pc, #16]	; (8006e68 <vTaskSuspendAll+0x18>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	4a03      	ldr	r2, [pc, #12]	; (8006e68 <vTaskSuspendAll+0x18>)
 8006e5c:	6013      	str	r3, [r2, #0]
}
 8006e5e:	bf00      	nop
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bc80      	pop	{r7}
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	20000490 	.word	0x20000490

08006e6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e72:	2300      	movs	r3, #0
 8006e74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e76:	2300      	movs	r3, #0
 8006e78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e7a:	4b41      	ldr	r3, [pc, #260]	; (8006f80 <xTaskResumeAll+0x114>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d109      	bne.n	8006e96 <xTaskResumeAll+0x2a>
 8006e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e86:	f383 8811 	msr	BASEPRI, r3
 8006e8a:	f3bf 8f6f 	isb	sy
 8006e8e:	f3bf 8f4f 	dsb	sy
 8006e92:	603b      	str	r3, [r7, #0]
 8006e94:	e7fe      	b.n	8006e94 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e96:	f000 fbdf 	bl	8007658 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e9a:	4b39      	ldr	r3, [pc, #228]	; (8006f80 <xTaskResumeAll+0x114>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	4a37      	ldr	r2, [pc, #220]	; (8006f80 <xTaskResumeAll+0x114>)
 8006ea2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ea4:	4b36      	ldr	r3, [pc, #216]	; (8006f80 <xTaskResumeAll+0x114>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d161      	bne.n	8006f70 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006eac:	4b35      	ldr	r3, [pc, #212]	; (8006f84 <xTaskResumeAll+0x118>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d05d      	beq.n	8006f70 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006eb4:	e02e      	b.n	8006f14 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006eb6:	4b34      	ldr	r3, [pc, #208]	; (8006f88 <xTaskResumeAll+0x11c>)
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	3318      	adds	r3, #24
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7ff fd82 	bl	80069cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7ff fd7d 	bl	80069cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	409a      	lsls	r2, r3
 8006eda:	4b2c      	ldr	r3, [pc, #176]	; (8006f8c <xTaskResumeAll+0x120>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	4a2a      	ldr	r2, [pc, #168]	; (8006f8c <xTaskResumeAll+0x120>)
 8006ee2:	6013      	str	r3, [r2, #0]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee8:	4613      	mov	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	4413      	add	r3, r2
 8006eee:	009b      	lsls	r3, r3, #2
 8006ef0:	4a27      	ldr	r2, [pc, #156]	; (8006f90 <xTaskResumeAll+0x124>)
 8006ef2:	441a      	add	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	4619      	mov	r1, r3
 8006efa:	4610      	mov	r0, r2
 8006efc:	f7ff fd0b 	bl	8006916 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f04:	4b23      	ldr	r3, [pc, #140]	; (8006f94 <xTaskResumeAll+0x128>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f0a:	429a      	cmp	r2, r3
 8006f0c:	d302      	bcc.n	8006f14 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8006f0e:	4b22      	ldr	r3, [pc, #136]	; (8006f98 <xTaskResumeAll+0x12c>)
 8006f10:	2201      	movs	r2, #1
 8006f12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f14:	4b1c      	ldr	r3, [pc, #112]	; (8006f88 <xTaskResumeAll+0x11c>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1cc      	bne.n	8006eb6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d001      	beq.n	8006f26 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f22:	f000 fa07 	bl	8007334 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006f26:	4b1d      	ldr	r3, [pc, #116]	; (8006f9c <xTaskResumeAll+0x130>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d010      	beq.n	8006f54 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f32:	f000 f837 	bl	8006fa4 <xTaskIncrementTick>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8006f3c:	4b16      	ldr	r3, [pc, #88]	; (8006f98 <xTaskResumeAll+0x12c>)
 8006f3e:	2201      	movs	r2, #1
 8006f40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	3b01      	subs	r3, #1
 8006f46:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1f1      	bne.n	8006f32 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8006f4e:	4b13      	ldr	r3, [pc, #76]	; (8006f9c <xTaskResumeAll+0x130>)
 8006f50:	2200      	movs	r2, #0
 8006f52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f54:	4b10      	ldr	r3, [pc, #64]	; (8006f98 <xTaskResumeAll+0x12c>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d009      	beq.n	8006f70 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f60:	4b0f      	ldr	r3, [pc, #60]	; (8006fa0 <xTaskResumeAll+0x134>)
 8006f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f70:	f000 fba0 	bl	80076b4 <vPortExitCritical>

	return xAlreadyYielded;
 8006f74:	68bb      	ldr	r3, [r7, #8]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3710      	adds	r7, #16
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	20000490 	.word	0x20000490
 8006f84:	20000468 	.word	0x20000468
 8006f88:	20000428 	.word	0x20000428
 8006f8c:	20000470 	.word	0x20000470
 8006f90:	2000036c 	.word	0x2000036c
 8006f94:	20000368 	.word	0x20000368
 8006f98:	2000047c 	.word	0x2000047c
 8006f9c:	20000478 	.word	0x20000478
 8006fa0:	e000ed04 	.word	0xe000ed04

08006fa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b086      	sub	sp, #24
 8006fa8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006faa:	2300      	movs	r3, #0
 8006fac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fae:	4b50      	ldr	r3, [pc, #320]	; (80070f0 <xTaskIncrementTick+0x14c>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f040 808c 	bne.w	80070d0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006fb8:	4b4e      	ldr	r3, [pc, #312]	; (80070f4 <xTaskIncrementTick+0x150>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	3301      	adds	r3, #1
 8006fbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006fc0:	4a4c      	ldr	r2, [pc, #304]	; (80070f4 <xTaskIncrementTick+0x150>)
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d11f      	bne.n	800700c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8006fcc:	4b4a      	ldr	r3, [pc, #296]	; (80070f8 <xTaskIncrementTick+0x154>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d009      	beq.n	8006fea <xTaskIncrementTick+0x46>
 8006fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	603b      	str	r3, [r7, #0]
 8006fe8:	e7fe      	b.n	8006fe8 <xTaskIncrementTick+0x44>
 8006fea:	4b43      	ldr	r3, [pc, #268]	; (80070f8 <xTaskIncrementTick+0x154>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	60fb      	str	r3, [r7, #12]
 8006ff0:	4b42      	ldr	r3, [pc, #264]	; (80070fc <xTaskIncrementTick+0x158>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a40      	ldr	r2, [pc, #256]	; (80070f8 <xTaskIncrementTick+0x154>)
 8006ff6:	6013      	str	r3, [r2, #0]
 8006ff8:	4a40      	ldr	r2, [pc, #256]	; (80070fc <xTaskIncrementTick+0x158>)
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6013      	str	r3, [r2, #0]
 8006ffe:	4b40      	ldr	r3, [pc, #256]	; (8007100 <xTaskIncrementTick+0x15c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3301      	adds	r3, #1
 8007004:	4a3e      	ldr	r2, [pc, #248]	; (8007100 <xTaskIncrementTick+0x15c>)
 8007006:	6013      	str	r3, [r2, #0]
 8007008:	f000 f994 	bl	8007334 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800700c:	4b3d      	ldr	r3, [pc, #244]	; (8007104 <xTaskIncrementTick+0x160>)
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	429a      	cmp	r2, r3
 8007014:	d34d      	bcc.n	80070b2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007016:	4b38      	ldr	r3, [pc, #224]	; (80070f8 <xTaskIncrementTick+0x154>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <xTaskIncrementTick+0x80>
 8007020:	2301      	movs	r3, #1
 8007022:	e000      	b.n	8007026 <xTaskIncrementTick+0x82>
 8007024:	2300      	movs	r3, #0
 8007026:	2b00      	cmp	r3, #0
 8007028:	d004      	beq.n	8007034 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800702a:	4b36      	ldr	r3, [pc, #216]	; (8007104 <xTaskIncrementTick+0x160>)
 800702c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007030:	601a      	str	r2, [r3, #0]
					break;
 8007032:	e03e      	b.n	80070b2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007034:	4b30      	ldr	r3, [pc, #192]	; (80070f8 <xTaskIncrementTick+0x154>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007044:	693a      	ldr	r2, [r7, #16]
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	429a      	cmp	r2, r3
 800704a:	d203      	bcs.n	8007054 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800704c:	4a2d      	ldr	r2, [pc, #180]	; (8007104 <xTaskIncrementTick+0x160>)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	6013      	str	r3, [r2, #0]
						break;
 8007052:	e02e      	b.n	80070b2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	3304      	adds	r3, #4
 8007058:	4618      	mov	r0, r3
 800705a:	f7ff fcb7 	bl	80069cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007062:	2b00      	cmp	r3, #0
 8007064:	d004      	beq.n	8007070 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	3318      	adds	r3, #24
 800706a:	4618      	mov	r0, r3
 800706c:	f7ff fcae 	bl	80069cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007074:	2201      	movs	r2, #1
 8007076:	409a      	lsls	r2, r3
 8007078:	4b23      	ldr	r3, [pc, #140]	; (8007108 <xTaskIncrementTick+0x164>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4313      	orrs	r3, r2
 800707e:	4a22      	ldr	r2, [pc, #136]	; (8007108 <xTaskIncrementTick+0x164>)
 8007080:	6013      	str	r3, [r2, #0]
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007086:	4613      	mov	r3, r2
 8007088:	009b      	lsls	r3, r3, #2
 800708a:	4413      	add	r3, r2
 800708c:	009b      	lsls	r3, r3, #2
 800708e:	4a1f      	ldr	r2, [pc, #124]	; (800710c <xTaskIncrementTick+0x168>)
 8007090:	441a      	add	r2, r3
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	3304      	adds	r3, #4
 8007096:	4619      	mov	r1, r3
 8007098:	4610      	mov	r0, r2
 800709a:	f7ff fc3c 	bl	8006916 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a2:	4b1b      	ldr	r3, [pc, #108]	; (8007110 <xTaskIncrementTick+0x16c>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d3b4      	bcc.n	8007016 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80070ac:	2301      	movs	r3, #1
 80070ae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070b0:	e7b1      	b.n	8007016 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070b2:	4b17      	ldr	r3, [pc, #92]	; (8007110 <xTaskIncrementTick+0x16c>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070b8:	4914      	ldr	r1, [pc, #80]	; (800710c <xTaskIncrementTick+0x168>)
 80070ba:	4613      	mov	r3, r2
 80070bc:	009b      	lsls	r3, r3, #2
 80070be:	4413      	add	r3, r2
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	440b      	add	r3, r1
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2b01      	cmp	r3, #1
 80070c8:	d907      	bls.n	80070da <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80070ca:	2301      	movs	r3, #1
 80070cc:	617b      	str	r3, [r7, #20]
 80070ce:	e004      	b.n	80070da <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80070d0:	4b10      	ldr	r3, [pc, #64]	; (8007114 <xTaskIncrementTick+0x170>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3301      	adds	r3, #1
 80070d6:	4a0f      	ldr	r2, [pc, #60]	; (8007114 <xTaskIncrementTick+0x170>)
 80070d8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80070da:	4b0f      	ldr	r3, [pc, #60]	; (8007118 <xTaskIncrementTick+0x174>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d001      	beq.n	80070e6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80070e2:	2301      	movs	r3, #1
 80070e4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80070e6:	697b      	ldr	r3, [r7, #20]
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3718      	adds	r7, #24
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	20000490 	.word	0x20000490
 80070f4:	2000046c 	.word	0x2000046c
 80070f8:	20000420 	.word	0x20000420
 80070fc:	20000424 	.word	0x20000424
 8007100:	20000480 	.word	0x20000480
 8007104:	20000488 	.word	0x20000488
 8007108:	20000470 	.word	0x20000470
 800710c:	2000036c 	.word	0x2000036c
 8007110:	20000368 	.word	0x20000368
 8007114:	20000478 	.word	0x20000478
 8007118:	2000047c 	.word	0x2000047c

0800711c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800711c:	b480      	push	{r7}
 800711e:	b087      	sub	sp, #28
 8007120:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007122:	4b26      	ldr	r3, [pc, #152]	; (80071bc <vTaskSwitchContext+0xa0>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d003      	beq.n	8007132 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800712a:	4b25      	ldr	r3, [pc, #148]	; (80071c0 <vTaskSwitchContext+0xa4>)
 800712c:	2201      	movs	r2, #1
 800712e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007130:	e03e      	b.n	80071b0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007132:	4b23      	ldr	r3, [pc, #140]	; (80071c0 <vTaskSwitchContext+0xa4>)
 8007134:	2200      	movs	r2, #0
 8007136:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007138:	4b22      	ldr	r3, [pc, #136]	; (80071c4 <vTaskSwitchContext+0xa8>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	fab3 f383 	clz	r3, r3
 8007144:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007146:	7afb      	ldrb	r3, [r7, #11]
 8007148:	f1c3 031f 	rsb	r3, r3, #31
 800714c:	617b      	str	r3, [r7, #20]
 800714e:	491e      	ldr	r1, [pc, #120]	; (80071c8 <vTaskSwitchContext+0xac>)
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	4613      	mov	r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	440b      	add	r3, r1
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d109      	bne.n	8007176 <vTaskSwitchContext+0x5a>
	__asm volatile
 8007162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	607b      	str	r3, [r7, #4]
 8007174:	e7fe      	b.n	8007174 <vTaskSwitchContext+0x58>
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	4613      	mov	r3, r2
 800717a:	009b      	lsls	r3, r3, #2
 800717c:	4413      	add	r3, r2
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	4a11      	ldr	r2, [pc, #68]	; (80071c8 <vTaskSwitchContext+0xac>)
 8007182:	4413      	add	r3, r2
 8007184:	613b      	str	r3, [r7, #16]
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	605a      	str	r2, [r3, #4]
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	685a      	ldr	r2, [r3, #4]
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	3308      	adds	r3, #8
 8007198:	429a      	cmp	r2, r3
 800719a:	d104      	bne.n	80071a6 <vTaskSwitchContext+0x8a>
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	605a      	str	r2, [r3, #4]
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	68db      	ldr	r3, [r3, #12]
 80071ac:	4a07      	ldr	r2, [pc, #28]	; (80071cc <vTaskSwitchContext+0xb0>)
 80071ae:	6013      	str	r3, [r2, #0]
}
 80071b0:	bf00      	nop
 80071b2:	371c      	adds	r7, #28
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bc80      	pop	{r7}
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	20000490 	.word	0x20000490
 80071c0:	2000047c 	.word	0x2000047c
 80071c4:	20000470 	.word	0x20000470
 80071c8:	2000036c 	.word	0x2000036c
 80071cc:	20000368 	.word	0x20000368

080071d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b082      	sub	sp, #8
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80071d8:	f000 f852 	bl	8007280 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80071dc:	4b06      	ldr	r3, [pc, #24]	; (80071f8 <prvIdleTask+0x28>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2b01      	cmp	r3, #1
 80071e2:	d9f9      	bls.n	80071d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80071e4:	4b05      	ldr	r3, [pc, #20]	; (80071fc <prvIdleTask+0x2c>)
 80071e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	f3bf 8f4f 	dsb	sy
 80071f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80071f4:	e7f0      	b.n	80071d8 <prvIdleTask+0x8>
 80071f6:	bf00      	nop
 80071f8:	2000036c 	.word	0x2000036c
 80071fc:	e000ed04 	.word	0xe000ed04

08007200 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007206:	2300      	movs	r3, #0
 8007208:	607b      	str	r3, [r7, #4]
 800720a:	e00c      	b.n	8007226 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	4613      	mov	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4413      	add	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4a12      	ldr	r2, [pc, #72]	; (8007260 <prvInitialiseTaskLists+0x60>)
 8007218:	4413      	add	r3, r2
 800721a:	4618      	mov	r0, r3
 800721c:	f7ff fb50 	bl	80068c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	3301      	adds	r3, #1
 8007224:	607b      	str	r3, [r7, #4]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2b06      	cmp	r3, #6
 800722a:	d9ef      	bls.n	800720c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800722c:	480d      	ldr	r0, [pc, #52]	; (8007264 <prvInitialiseTaskLists+0x64>)
 800722e:	f7ff fb47 	bl	80068c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007232:	480d      	ldr	r0, [pc, #52]	; (8007268 <prvInitialiseTaskLists+0x68>)
 8007234:	f7ff fb44 	bl	80068c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007238:	480c      	ldr	r0, [pc, #48]	; (800726c <prvInitialiseTaskLists+0x6c>)
 800723a:	f7ff fb41 	bl	80068c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800723e:	480c      	ldr	r0, [pc, #48]	; (8007270 <prvInitialiseTaskLists+0x70>)
 8007240:	f7ff fb3e 	bl	80068c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007244:	480b      	ldr	r0, [pc, #44]	; (8007274 <prvInitialiseTaskLists+0x74>)
 8007246:	f7ff fb3b 	bl	80068c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800724a:	4b0b      	ldr	r3, [pc, #44]	; (8007278 <prvInitialiseTaskLists+0x78>)
 800724c:	4a05      	ldr	r2, [pc, #20]	; (8007264 <prvInitialiseTaskLists+0x64>)
 800724e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007250:	4b0a      	ldr	r3, [pc, #40]	; (800727c <prvInitialiseTaskLists+0x7c>)
 8007252:	4a05      	ldr	r2, [pc, #20]	; (8007268 <prvInitialiseTaskLists+0x68>)
 8007254:	601a      	str	r2, [r3, #0]
}
 8007256:	bf00      	nop
 8007258:	3708      	adds	r7, #8
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	2000036c 	.word	0x2000036c
 8007264:	200003f8 	.word	0x200003f8
 8007268:	2000040c 	.word	0x2000040c
 800726c:	20000428 	.word	0x20000428
 8007270:	2000043c 	.word	0x2000043c
 8007274:	20000454 	.word	0x20000454
 8007278:	20000420 	.word	0x20000420
 800727c:	20000424 	.word	0x20000424

08007280 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b082      	sub	sp, #8
 8007284:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007286:	e019      	b.n	80072bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007288:	f000 f9e6 	bl	8007658 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800728c:	4b0f      	ldr	r3, [pc, #60]	; (80072cc <prvCheckTasksWaitingTermination+0x4c>)
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	68db      	ldr	r3, [r3, #12]
 8007292:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	3304      	adds	r3, #4
 8007298:	4618      	mov	r0, r3
 800729a:	f7ff fb97 	bl	80069cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800729e:	4b0c      	ldr	r3, [pc, #48]	; (80072d0 <prvCheckTasksWaitingTermination+0x50>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	3b01      	subs	r3, #1
 80072a4:	4a0a      	ldr	r2, [pc, #40]	; (80072d0 <prvCheckTasksWaitingTermination+0x50>)
 80072a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80072a8:	4b0a      	ldr	r3, [pc, #40]	; (80072d4 <prvCheckTasksWaitingTermination+0x54>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	3b01      	subs	r3, #1
 80072ae:	4a09      	ldr	r2, [pc, #36]	; (80072d4 <prvCheckTasksWaitingTermination+0x54>)
 80072b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80072b2:	f000 f9ff 	bl	80076b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f80e 	bl	80072d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072bc:	4b05      	ldr	r3, [pc, #20]	; (80072d4 <prvCheckTasksWaitingTermination+0x54>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d1e1      	bne.n	8007288 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80072c4:	bf00      	nop
 80072c6:	3708      	adds	r7, #8
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	2000043c 	.word	0x2000043c
 80072d0:	20000468 	.word	0x20000468
 80072d4:	20000450 	.word	0x20000450

080072d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d108      	bne.n	80072fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 fb2e 	bl	8007950 <vPortFree>
				vPortFree( pxTCB );
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 fb2b 	bl	8007950 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80072fa:	e017      	b.n	800732c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007302:	2b01      	cmp	r3, #1
 8007304:	d103      	bne.n	800730e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 fb22 	bl	8007950 <vPortFree>
	}
 800730c:	e00e      	b.n	800732c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007314:	2b02      	cmp	r3, #2
 8007316:	d009      	beq.n	800732c <prvDeleteTCB+0x54>
 8007318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800731c:	f383 8811 	msr	BASEPRI, r3
 8007320:	f3bf 8f6f 	isb	sy
 8007324:	f3bf 8f4f 	dsb	sy
 8007328:	60fb      	str	r3, [r7, #12]
 800732a:	e7fe      	b.n	800732a <prvDeleteTCB+0x52>
	}
 800732c:	bf00      	nop
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800733a:	4b0e      	ldr	r3, [pc, #56]	; (8007374 <prvResetNextTaskUnblockTime+0x40>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d101      	bne.n	8007348 <prvResetNextTaskUnblockTime+0x14>
 8007344:	2301      	movs	r3, #1
 8007346:	e000      	b.n	800734a <prvResetNextTaskUnblockTime+0x16>
 8007348:	2300      	movs	r3, #0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d004      	beq.n	8007358 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800734e:	4b0a      	ldr	r3, [pc, #40]	; (8007378 <prvResetNextTaskUnblockTime+0x44>)
 8007350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007354:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007356:	e008      	b.n	800736a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007358:	4b06      	ldr	r3, [pc, #24]	; (8007374 <prvResetNextTaskUnblockTime+0x40>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	68db      	ldr	r3, [r3, #12]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	4a04      	ldr	r2, [pc, #16]	; (8007378 <prvResetNextTaskUnblockTime+0x44>)
 8007368:	6013      	str	r3, [r2, #0]
}
 800736a:	bf00      	nop
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	bc80      	pop	{r7}
 8007372:	4770      	bx	lr
 8007374:	20000420 	.word	0x20000420
 8007378:	20000488 	.word	0x20000488

0800737c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007382:	4b0b      	ldr	r3, [pc, #44]	; (80073b0 <xTaskGetSchedulerState+0x34>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d102      	bne.n	8007390 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800738a:	2301      	movs	r3, #1
 800738c:	607b      	str	r3, [r7, #4]
 800738e:	e008      	b.n	80073a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007390:	4b08      	ldr	r3, [pc, #32]	; (80073b4 <xTaskGetSchedulerState+0x38>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d102      	bne.n	800739e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007398:	2302      	movs	r3, #2
 800739a:	607b      	str	r3, [r7, #4]
 800739c:	e001      	b.n	80073a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800739e:	2300      	movs	r3, #0
 80073a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80073a2:	687b      	ldr	r3, [r7, #4]
	}
 80073a4:	4618      	mov	r0, r3
 80073a6:	370c      	adds	r7, #12
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bc80      	pop	{r7}
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop
 80073b0:	20000474 	.word	0x20000474
 80073b4:	20000490 	.word	0x20000490

080073b8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073c2:	4b29      	ldr	r3, [pc, #164]	; (8007468 <prvAddCurrentTaskToDelayedList+0xb0>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073c8:	4b28      	ldr	r3, [pc, #160]	; (800746c <prvAddCurrentTaskToDelayedList+0xb4>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	3304      	adds	r3, #4
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7ff fafc 	bl	80069cc <uxListRemove>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d10b      	bne.n	80073f2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80073da:	4b24      	ldr	r3, [pc, #144]	; (800746c <prvAddCurrentTaskToDelayedList+0xb4>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e0:	2201      	movs	r2, #1
 80073e2:	fa02 f303 	lsl.w	r3, r2, r3
 80073e6:	43da      	mvns	r2, r3
 80073e8:	4b21      	ldr	r3, [pc, #132]	; (8007470 <prvAddCurrentTaskToDelayedList+0xb8>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4013      	ands	r3, r2
 80073ee:	4a20      	ldr	r2, [pc, #128]	; (8007470 <prvAddCurrentTaskToDelayedList+0xb8>)
 80073f0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073f8:	d10a      	bne.n	8007410 <prvAddCurrentTaskToDelayedList+0x58>
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d007      	beq.n	8007410 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007400:	4b1a      	ldr	r3, [pc, #104]	; (800746c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	3304      	adds	r3, #4
 8007406:	4619      	mov	r1, r3
 8007408:	481a      	ldr	r0, [pc, #104]	; (8007474 <prvAddCurrentTaskToDelayedList+0xbc>)
 800740a:	f7ff fa84 	bl	8006916 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800740e:	e026      	b.n	800745e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	4413      	add	r3, r2
 8007416:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007418:	4b14      	ldr	r3, [pc, #80]	; (800746c <prvAddCurrentTaskToDelayedList+0xb4>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007420:	68ba      	ldr	r2, [r7, #8]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	429a      	cmp	r2, r3
 8007426:	d209      	bcs.n	800743c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007428:	4b13      	ldr	r3, [pc, #76]	; (8007478 <prvAddCurrentTaskToDelayedList+0xc0>)
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	4b0f      	ldr	r3, [pc, #60]	; (800746c <prvAddCurrentTaskToDelayedList+0xb4>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	3304      	adds	r3, #4
 8007432:	4619      	mov	r1, r3
 8007434:	4610      	mov	r0, r2
 8007436:	f7ff fa91 	bl	800695c <vListInsert>
}
 800743a:	e010      	b.n	800745e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800743c:	4b0f      	ldr	r3, [pc, #60]	; (800747c <prvAddCurrentTaskToDelayedList+0xc4>)
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	4b0a      	ldr	r3, [pc, #40]	; (800746c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	3304      	adds	r3, #4
 8007446:	4619      	mov	r1, r3
 8007448:	4610      	mov	r0, r2
 800744a:	f7ff fa87 	bl	800695c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800744e:	4b0c      	ldr	r3, [pc, #48]	; (8007480 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	429a      	cmp	r2, r3
 8007456:	d202      	bcs.n	800745e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007458:	4a09      	ldr	r2, [pc, #36]	; (8007480 <prvAddCurrentTaskToDelayedList+0xc8>)
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	6013      	str	r3, [r2, #0]
}
 800745e:	bf00      	nop
 8007460:	3710      	adds	r7, #16
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
 8007466:	bf00      	nop
 8007468:	2000046c 	.word	0x2000046c
 800746c:	20000368 	.word	0x20000368
 8007470:	20000470 	.word	0x20000470
 8007474:	20000454 	.word	0x20000454
 8007478:	20000424 	.word	0x20000424
 800747c:	20000420 	.word	0x20000420
 8007480:	20000488 	.word	0x20000488

08007484 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	3b04      	subs	r3, #4
 8007494:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800749c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	3b04      	subs	r3, #4
 80074a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f023 0201 	bic.w	r2, r3, #1
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	3b04      	subs	r3, #4
 80074b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80074b4:	4a08      	ldr	r2, [pc, #32]	; (80074d8 <pxPortInitialiseStack+0x54>)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	3b14      	subs	r3, #20
 80074be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	3b20      	subs	r3, #32
 80074ca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80074cc:	68fb      	ldr	r3, [r7, #12]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3714      	adds	r7, #20
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bc80      	pop	{r7}
 80074d6:	4770      	bx	lr
 80074d8:	080074dd 	.word	0x080074dd

080074dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80074e2:	2300      	movs	r3, #0
 80074e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80074e6:	4b10      	ldr	r3, [pc, #64]	; (8007528 <prvTaskExitError+0x4c>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074ee:	d009      	beq.n	8007504 <prvTaskExitError+0x28>
 80074f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	60fb      	str	r3, [r7, #12]
 8007502:	e7fe      	b.n	8007502 <prvTaskExitError+0x26>
 8007504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007516:	bf00      	nop
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d0fc      	beq.n	8007518 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800751e:	bf00      	nop
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	bc80      	pop	{r7}
 8007526:	4770      	bx	lr
 8007528:	20000014 	.word	0x20000014
 800752c:	00000000 	.word	0x00000000

08007530 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007530:	4b07      	ldr	r3, [pc, #28]	; (8007550 <pxCurrentTCBConst2>)
 8007532:	6819      	ldr	r1, [r3, #0]
 8007534:	6808      	ldr	r0, [r1, #0]
 8007536:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800753a:	f380 8809 	msr	PSP, r0
 800753e:	f3bf 8f6f 	isb	sy
 8007542:	f04f 0000 	mov.w	r0, #0
 8007546:	f380 8811 	msr	BASEPRI, r0
 800754a:	f04e 0e0d 	orr.w	lr, lr, #13
 800754e:	4770      	bx	lr

08007550 <pxCurrentTCBConst2>:
 8007550:	20000368 	.word	0x20000368
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007554:	bf00      	nop
 8007556:	bf00      	nop

08007558 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007558:	4806      	ldr	r0, [pc, #24]	; (8007574 <prvPortStartFirstTask+0x1c>)
 800755a:	6800      	ldr	r0, [r0, #0]
 800755c:	6800      	ldr	r0, [r0, #0]
 800755e:	f380 8808 	msr	MSP, r0
 8007562:	b662      	cpsie	i
 8007564:	b661      	cpsie	f
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	f3bf 8f6f 	isb	sy
 800756e:	df00      	svc	0
 8007570:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007572:	bf00      	nop
 8007574:	e000ed08 	.word	0xe000ed08

08007578 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800757e:	4b31      	ldr	r3, [pc, #196]	; (8007644 <xPortStartScheduler+0xcc>)
 8007580:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	b2db      	uxtb	r3, r3
 8007588:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	22ff      	movs	r2, #255	; 0xff
 800758e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	b2db      	uxtb	r3, r3
 8007596:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007598:	78fb      	ldrb	r3, [r7, #3]
 800759a:	b2db      	uxtb	r3, r3
 800759c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80075a0:	b2da      	uxtb	r2, r3
 80075a2:	4b29      	ldr	r3, [pc, #164]	; (8007648 <xPortStartScheduler+0xd0>)
 80075a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80075a6:	4b29      	ldr	r3, [pc, #164]	; (800764c <xPortStartScheduler+0xd4>)
 80075a8:	2207      	movs	r2, #7
 80075aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075ac:	e009      	b.n	80075c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80075ae:	4b27      	ldr	r3, [pc, #156]	; (800764c <xPortStartScheduler+0xd4>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	3b01      	subs	r3, #1
 80075b4:	4a25      	ldr	r2, [pc, #148]	; (800764c <xPortStartScheduler+0xd4>)
 80075b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80075b8:	78fb      	ldrb	r3, [r7, #3]
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	005b      	lsls	r3, r3, #1
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80075c2:	78fb      	ldrb	r3, [r7, #3]
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ca:	2b80      	cmp	r3, #128	; 0x80
 80075cc:	d0ef      	beq.n	80075ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80075ce:	4b1f      	ldr	r3, [pc, #124]	; (800764c <xPortStartScheduler+0xd4>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f1c3 0307 	rsb	r3, r3, #7
 80075d6:	2b04      	cmp	r3, #4
 80075d8:	d009      	beq.n	80075ee <xPortStartScheduler+0x76>
 80075da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075de:	f383 8811 	msr	BASEPRI, r3
 80075e2:	f3bf 8f6f 	isb	sy
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	60bb      	str	r3, [r7, #8]
 80075ec:	e7fe      	b.n	80075ec <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075ee:	4b17      	ldr	r3, [pc, #92]	; (800764c <xPortStartScheduler+0xd4>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	021b      	lsls	r3, r3, #8
 80075f4:	4a15      	ldr	r2, [pc, #84]	; (800764c <xPortStartScheduler+0xd4>)
 80075f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075f8:	4b14      	ldr	r3, [pc, #80]	; (800764c <xPortStartScheduler+0xd4>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007600:	4a12      	ldr	r2, [pc, #72]	; (800764c <xPortStartScheduler+0xd4>)
 8007602:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	b2da      	uxtb	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800760c:	4b10      	ldr	r3, [pc, #64]	; (8007650 <xPortStartScheduler+0xd8>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	4a0f      	ldr	r2, [pc, #60]	; (8007650 <xPortStartScheduler+0xd8>)
 8007612:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007616:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007618:	4b0d      	ldr	r3, [pc, #52]	; (8007650 <xPortStartScheduler+0xd8>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a0c      	ldr	r2, [pc, #48]	; (8007650 <xPortStartScheduler+0xd8>)
 800761e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007622:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007624:	f000 f8b0 	bl	8007788 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007628:	4b0a      	ldr	r3, [pc, #40]	; (8007654 <xPortStartScheduler+0xdc>)
 800762a:	2200      	movs	r2, #0
 800762c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800762e:	f7ff ff93 	bl	8007558 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007632:	f7ff fd73 	bl	800711c <vTaskSwitchContext>
	prvTaskExitError();
 8007636:	f7ff ff51 	bl	80074dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	e000e400 	.word	0xe000e400
 8007648:	20000494 	.word	0x20000494
 800764c:	20000498 	.word	0x20000498
 8007650:	e000ed20 	.word	0xe000ed20
 8007654:	20000014 	.word	0x20000014

08007658 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007662:	f383 8811 	msr	BASEPRI, r3
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007670:	4b0e      	ldr	r3, [pc, #56]	; (80076ac <vPortEnterCritical+0x54>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	3301      	adds	r3, #1
 8007676:	4a0d      	ldr	r2, [pc, #52]	; (80076ac <vPortEnterCritical+0x54>)
 8007678:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800767a:	4b0c      	ldr	r3, [pc, #48]	; (80076ac <vPortEnterCritical+0x54>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d10e      	bne.n	80076a0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007682:	4b0b      	ldr	r3, [pc, #44]	; (80076b0 <vPortEnterCritical+0x58>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b00      	cmp	r3, #0
 800768a:	d009      	beq.n	80076a0 <vPortEnterCritical+0x48>
 800768c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007690:	f383 8811 	msr	BASEPRI, r3
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	603b      	str	r3, [r7, #0]
 800769e:	e7fe      	b.n	800769e <vPortEnterCritical+0x46>
	}
}
 80076a0:	bf00      	nop
 80076a2:	370c      	adds	r7, #12
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bc80      	pop	{r7}
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	20000014 	.word	0x20000014
 80076b0:	e000ed04 	.word	0xe000ed04

080076b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076ba:	4b10      	ldr	r3, [pc, #64]	; (80076fc <vPortExitCritical+0x48>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d109      	bne.n	80076d6 <vPortExitCritical+0x22>
 80076c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	607b      	str	r3, [r7, #4]
 80076d4:	e7fe      	b.n	80076d4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80076d6:	4b09      	ldr	r3, [pc, #36]	; (80076fc <vPortExitCritical+0x48>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	3b01      	subs	r3, #1
 80076dc:	4a07      	ldr	r2, [pc, #28]	; (80076fc <vPortExitCritical+0x48>)
 80076de:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076e0:	4b06      	ldr	r3, [pc, #24]	; (80076fc <vPortExitCritical+0x48>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d104      	bne.n	80076f2 <vPortExitCritical+0x3e>
 80076e8:	2300      	movs	r3, #0
 80076ea:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80076f2:	bf00      	nop
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bc80      	pop	{r7}
 80076fa:	4770      	bx	lr
 80076fc:	20000014 	.word	0x20000014

08007700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007700:	f3ef 8009 	mrs	r0, PSP
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	4b0d      	ldr	r3, [pc, #52]	; (8007740 <pxCurrentTCBConst>)
 800770a:	681a      	ldr	r2, [r3, #0]
 800770c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007710:	6010      	str	r0, [r2, #0]
 8007712:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007716:	f04f 0050 	mov.w	r0, #80	; 0x50
 800771a:	f380 8811 	msr	BASEPRI, r0
 800771e:	f7ff fcfd 	bl	800711c <vTaskSwitchContext>
 8007722:	f04f 0000 	mov.w	r0, #0
 8007726:	f380 8811 	msr	BASEPRI, r0
 800772a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800772e:	6819      	ldr	r1, [r3, #0]
 8007730:	6808      	ldr	r0, [r1, #0]
 8007732:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007736:	f380 8809 	msr	PSP, r0
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	4770      	bx	lr

08007740 <pxCurrentTCBConst>:
 8007740:	20000368 	.word	0x20000368
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007744:	bf00      	nop
 8007746:	bf00      	nop

08007748 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b082      	sub	sp, #8
 800774c:	af00      	add	r7, sp, #0
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007760:	f7ff fc20 	bl	8006fa4 <xTaskIncrementTick>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d003      	beq.n	8007772 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800776a:	4b06      	ldr	r3, [pc, #24]	; (8007784 <xPortSysTickHandler+0x3c>)
 800776c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007770:	601a      	str	r2, [r3, #0]
 8007772:	2300      	movs	r3, #0
 8007774:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800777c:	bf00      	nop
 800777e:	3708      	adds	r7, #8
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	e000ed04 	.word	0xe000ed04

08007788 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007788:	b480      	push	{r7}
 800778a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800778c:	4b0a      	ldr	r3, [pc, #40]	; (80077b8 <vPortSetupTimerInterrupt+0x30>)
 800778e:	2200      	movs	r2, #0
 8007790:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007792:	4b0a      	ldr	r3, [pc, #40]	; (80077bc <vPortSetupTimerInterrupt+0x34>)
 8007794:	2200      	movs	r2, #0
 8007796:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007798:	4b09      	ldr	r3, [pc, #36]	; (80077c0 <vPortSetupTimerInterrupt+0x38>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a09      	ldr	r2, [pc, #36]	; (80077c4 <vPortSetupTimerInterrupt+0x3c>)
 800779e:	fba2 2303 	umull	r2, r3, r2, r3
 80077a2:	099b      	lsrs	r3, r3, #6
 80077a4:	4a08      	ldr	r2, [pc, #32]	; (80077c8 <vPortSetupTimerInterrupt+0x40>)
 80077a6:	3b01      	subs	r3, #1
 80077a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077aa:	4b03      	ldr	r3, [pc, #12]	; (80077b8 <vPortSetupTimerInterrupt+0x30>)
 80077ac:	2207      	movs	r2, #7
 80077ae:	601a      	str	r2, [r3, #0]
}
 80077b0:	bf00      	nop
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bc80      	pop	{r7}
 80077b6:	4770      	bx	lr
 80077b8:	e000e010 	.word	0xe000e010
 80077bc:	e000e018 	.word	0xe000e018
 80077c0:	20000008 	.word	0x20000008
 80077c4:	10624dd3 	.word	0x10624dd3
 80077c8:	e000e014 	.word	0xe000e014

080077cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b08a      	sub	sp, #40	; 0x28
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80077d4:	2300      	movs	r3, #0
 80077d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80077d8:	f7ff fb3a 	bl	8006e50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80077dc:	4b57      	ldr	r3, [pc, #348]	; (800793c <pvPortMalloc+0x170>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d101      	bne.n	80077e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077e4:	f000 f90c 	bl	8007a00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077e8:	4b55      	ldr	r3, [pc, #340]	; (8007940 <pvPortMalloc+0x174>)
 80077ea:	681a      	ldr	r2, [r3, #0]
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4013      	ands	r3, r2
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f040 808c 	bne.w	800790e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d01c      	beq.n	8007836 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80077fc:	2208      	movs	r2, #8
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	4413      	add	r3, r2
 8007802:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f003 0307 	and.w	r3, r3, #7
 800780a:	2b00      	cmp	r3, #0
 800780c:	d013      	beq.n	8007836 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f023 0307 	bic.w	r3, r3, #7
 8007814:	3308      	adds	r3, #8
 8007816:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f003 0307 	and.w	r3, r3, #7
 800781e:	2b00      	cmp	r3, #0
 8007820:	d009      	beq.n	8007836 <pvPortMalloc+0x6a>
	__asm volatile
 8007822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007826:	f383 8811 	msr	BASEPRI, r3
 800782a:	f3bf 8f6f 	isb	sy
 800782e:	f3bf 8f4f 	dsb	sy
 8007832:	617b      	str	r3, [r7, #20]
 8007834:	e7fe      	b.n	8007834 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d068      	beq.n	800790e <pvPortMalloc+0x142>
 800783c:	4b41      	ldr	r3, [pc, #260]	; (8007944 <pvPortMalloc+0x178>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	429a      	cmp	r2, r3
 8007844:	d863      	bhi.n	800790e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007846:	4b40      	ldr	r3, [pc, #256]	; (8007948 <pvPortMalloc+0x17c>)
 8007848:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800784a:	4b3f      	ldr	r3, [pc, #252]	; (8007948 <pvPortMalloc+0x17c>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007850:	e004      	b.n	800785c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8007852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007854:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	429a      	cmp	r2, r3
 8007864:	d903      	bls.n	800786e <pvPortMalloc+0xa2>
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1f1      	bne.n	8007852 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800786e:	4b33      	ldr	r3, [pc, #204]	; (800793c <pvPortMalloc+0x170>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007874:	429a      	cmp	r2, r3
 8007876:	d04a      	beq.n	800790e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007878:	6a3b      	ldr	r3, [r7, #32]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2208      	movs	r2, #8
 800787e:	4413      	add	r3, r2
 8007880:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007884:	681a      	ldr	r2, [r3, #0]
 8007886:	6a3b      	ldr	r3, [r7, #32]
 8007888:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	685a      	ldr	r2, [r3, #4]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	1ad2      	subs	r2, r2, r3
 8007892:	2308      	movs	r3, #8
 8007894:	005b      	lsls	r3, r3, #1
 8007896:	429a      	cmp	r2, r3
 8007898:	d91e      	bls.n	80078d8 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800789a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4413      	add	r3, r2
 80078a0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	f003 0307 	and.w	r3, r3, #7
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d009      	beq.n	80078c0 <pvPortMalloc+0xf4>
 80078ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b0:	f383 8811 	msr	BASEPRI, r3
 80078b4:	f3bf 8f6f 	isb	sy
 80078b8:	f3bf 8f4f 	dsb	sy
 80078bc:	613b      	str	r3, [r7, #16]
 80078be:	e7fe      	b.n	80078be <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	685a      	ldr	r2, [r3, #4]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	1ad2      	subs	r2, r2, r3
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80078cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80078d2:	69b8      	ldr	r0, [r7, #24]
 80078d4:	f000 f8f6 	bl	8007ac4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078d8:	4b1a      	ldr	r3, [pc, #104]	; (8007944 <pvPortMalloc+0x178>)
 80078da:	681a      	ldr	r2, [r3, #0]
 80078dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	4a18      	ldr	r2, [pc, #96]	; (8007944 <pvPortMalloc+0x178>)
 80078e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078e6:	4b17      	ldr	r3, [pc, #92]	; (8007944 <pvPortMalloc+0x178>)
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	4b18      	ldr	r3, [pc, #96]	; (800794c <pvPortMalloc+0x180>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d203      	bcs.n	80078fa <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80078f2:	4b14      	ldr	r3, [pc, #80]	; (8007944 <pvPortMalloc+0x178>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a15      	ldr	r2, [pc, #84]	; (800794c <pvPortMalloc+0x180>)
 80078f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fc:	685a      	ldr	r2, [r3, #4]
 80078fe:	4b10      	ldr	r3, [pc, #64]	; (8007940 <pvPortMalloc+0x174>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	431a      	orrs	r2, r3
 8007904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007906:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	2200      	movs	r2, #0
 800790c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800790e:	f7ff faad 	bl	8006e6c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007912:	69fb      	ldr	r3, [r7, #28]
 8007914:	f003 0307 	and.w	r3, r3, #7
 8007918:	2b00      	cmp	r3, #0
 800791a:	d009      	beq.n	8007930 <pvPortMalloc+0x164>
 800791c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007920:	f383 8811 	msr	BASEPRI, r3
 8007924:	f3bf 8f6f 	isb	sy
 8007928:	f3bf 8f4f 	dsb	sy
 800792c:	60fb      	str	r3, [r7, #12]
 800792e:	e7fe      	b.n	800792e <pvPortMalloc+0x162>
	return pvReturn;
 8007930:	69fb      	ldr	r3, [r7, #28]
}
 8007932:	4618      	mov	r0, r3
 8007934:	3728      	adds	r7, #40	; 0x28
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	20003384 	.word	0x20003384
 8007940:	20003390 	.word	0x20003390
 8007944:	20003388 	.word	0x20003388
 8007948:	2000337c 	.word	0x2000337c
 800794c:	2000338c 	.word	0x2000338c

08007950 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b086      	sub	sp, #24
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d046      	beq.n	80079f0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007962:	2308      	movs	r3, #8
 8007964:	425b      	negs	r3, r3
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	4413      	add	r3, r2
 800796a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	685a      	ldr	r2, [r3, #4]
 8007974:	4b20      	ldr	r3, [pc, #128]	; (80079f8 <vPortFree+0xa8>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4013      	ands	r3, r2
 800797a:	2b00      	cmp	r3, #0
 800797c:	d109      	bne.n	8007992 <vPortFree+0x42>
 800797e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	60fb      	str	r3, [r7, #12]
 8007990:	e7fe      	b.n	8007990 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d009      	beq.n	80079ae <vPortFree+0x5e>
 800799a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	60bb      	str	r3, [r7, #8]
 80079ac:	e7fe      	b.n	80079ac <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	685a      	ldr	r2, [r3, #4]
 80079b2:	4b11      	ldr	r3, [pc, #68]	; (80079f8 <vPortFree+0xa8>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4013      	ands	r3, r2
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d019      	beq.n	80079f0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d115      	bne.n	80079f0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	685a      	ldr	r2, [r3, #4]
 80079c8:	4b0b      	ldr	r3, [pc, #44]	; (80079f8 <vPortFree+0xa8>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	43db      	mvns	r3, r3
 80079ce:	401a      	ands	r2, r3
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80079d4:	f7ff fa3c 	bl	8006e50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	685a      	ldr	r2, [r3, #4]
 80079dc:	4b07      	ldr	r3, [pc, #28]	; (80079fc <vPortFree+0xac>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4413      	add	r3, r2
 80079e2:	4a06      	ldr	r2, [pc, #24]	; (80079fc <vPortFree+0xac>)
 80079e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079e6:	6938      	ldr	r0, [r7, #16]
 80079e8:	f000 f86c 	bl	8007ac4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80079ec:	f7ff fa3e 	bl	8006e6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80079f0:	bf00      	nop
 80079f2:	3718      	adds	r7, #24
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	20003390 	.word	0x20003390
 80079fc:	20003388 	.word	0x20003388

08007a00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a06:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 8007a0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a0c:	4b27      	ldr	r3, [pc, #156]	; (8007aac <prvHeapInit+0xac>)
 8007a0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f003 0307 	and.w	r3, r3, #7
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00c      	beq.n	8007a34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	3307      	adds	r3, #7
 8007a1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f023 0307 	bic.w	r3, r3, #7
 8007a26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	4a1f      	ldr	r2, [pc, #124]	; (8007aac <prvHeapInit+0xac>)
 8007a30:	4413      	add	r3, r2
 8007a32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a38:	4a1d      	ldr	r2, [pc, #116]	; (8007ab0 <prvHeapInit+0xb0>)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a3e:	4b1c      	ldr	r3, [pc, #112]	; (8007ab0 <prvHeapInit+0xb0>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	4413      	add	r3, r2
 8007a4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a4c:	2208      	movs	r2, #8
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	1a9b      	subs	r3, r3, r2
 8007a52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f023 0307 	bic.w	r3, r3, #7
 8007a5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	4a15      	ldr	r2, [pc, #84]	; (8007ab4 <prvHeapInit+0xb4>)
 8007a60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a62:	4b14      	ldr	r3, [pc, #80]	; (8007ab4 <prvHeapInit+0xb4>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2200      	movs	r2, #0
 8007a68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a6a:	4b12      	ldr	r3, [pc, #72]	; (8007ab4 <prvHeapInit+0xb4>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	1ad2      	subs	r2, r2, r3
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a80:	4b0c      	ldr	r3, [pc, #48]	; (8007ab4 <prvHeapInit+0xb4>)
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	4a0a      	ldr	r2, [pc, #40]	; (8007ab8 <prvHeapInit+0xb8>)
 8007a8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	4a09      	ldr	r2, [pc, #36]	; (8007abc <prvHeapInit+0xbc>)
 8007a96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a98:	4b09      	ldr	r3, [pc, #36]	; (8007ac0 <prvHeapInit+0xc0>)
 8007a9a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a9e:	601a      	str	r2, [r3, #0]
}
 8007aa0:	bf00      	nop
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bc80      	pop	{r7}
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	2000049c 	.word	0x2000049c
 8007ab0:	2000337c 	.word	0x2000337c
 8007ab4:	20003384 	.word	0x20003384
 8007ab8:	2000338c 	.word	0x2000338c
 8007abc:	20003388 	.word	0x20003388
 8007ac0:	20003390 	.word	0x20003390

08007ac4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007acc:	4b27      	ldr	r3, [pc, #156]	; (8007b6c <prvInsertBlockIntoFreeList+0xa8>)
 8007ace:	60fb      	str	r3, [r7, #12]
 8007ad0:	e002      	b.n	8007ad8 <prvInsertBlockIntoFreeList+0x14>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	60fb      	str	r3, [r7, #12]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d8f7      	bhi.n	8007ad2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	4413      	add	r3, r2
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d108      	bne.n	8007b06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	441a      	add	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	441a      	add	r2, r3
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d118      	bne.n	8007b4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	4b14      	ldr	r3, [pc, #80]	; (8007b70 <prvInsertBlockIntoFreeList+0xac>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d00d      	beq.n	8007b42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685a      	ldr	r2, [r3, #4]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	441a      	add	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	601a      	str	r2, [r3, #0]
 8007b40:	e008      	b.n	8007b54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b42:	4b0b      	ldr	r3, [pc, #44]	; (8007b70 <prvInsertBlockIntoFreeList+0xac>)
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	601a      	str	r2, [r3, #0]
 8007b4a:	e003      	b.n	8007b54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d002      	beq.n	8007b62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b62:	bf00      	nop
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bc80      	pop	{r7}
 8007b6a:	4770      	bx	lr
 8007b6c:	2000337c 	.word	0x2000337c
 8007b70:	20003384 	.word	0x20003384

08007b74 <__errno>:
 8007b74:	4b01      	ldr	r3, [pc, #4]	; (8007b7c <__errno+0x8>)
 8007b76:	6818      	ldr	r0, [r3, #0]
 8007b78:	4770      	bx	lr
 8007b7a:	bf00      	nop
 8007b7c:	20000018 	.word	0x20000018

08007b80 <__libc_init_array>:
 8007b80:	b570      	push	{r4, r5, r6, lr}
 8007b82:	2500      	movs	r5, #0
 8007b84:	4e0c      	ldr	r6, [pc, #48]	; (8007bb8 <__libc_init_array+0x38>)
 8007b86:	4c0d      	ldr	r4, [pc, #52]	; (8007bbc <__libc_init_array+0x3c>)
 8007b88:	1ba4      	subs	r4, r4, r6
 8007b8a:	10a4      	asrs	r4, r4, #2
 8007b8c:	42a5      	cmp	r5, r4
 8007b8e:	d109      	bne.n	8007ba4 <__libc_init_array+0x24>
 8007b90:	f000 fc36 	bl	8008400 <_init>
 8007b94:	2500      	movs	r5, #0
 8007b96:	4e0a      	ldr	r6, [pc, #40]	; (8007bc0 <__libc_init_array+0x40>)
 8007b98:	4c0a      	ldr	r4, [pc, #40]	; (8007bc4 <__libc_init_array+0x44>)
 8007b9a:	1ba4      	subs	r4, r4, r6
 8007b9c:	10a4      	asrs	r4, r4, #2
 8007b9e:	42a5      	cmp	r5, r4
 8007ba0:	d105      	bne.n	8007bae <__libc_init_array+0x2e>
 8007ba2:	bd70      	pop	{r4, r5, r6, pc}
 8007ba4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ba8:	4798      	blx	r3
 8007baa:	3501      	adds	r5, #1
 8007bac:	e7ee      	b.n	8007b8c <__libc_init_array+0xc>
 8007bae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007bb2:	4798      	blx	r3
 8007bb4:	3501      	adds	r5, #1
 8007bb6:	e7f2      	b.n	8007b9e <__libc_init_array+0x1e>
 8007bb8:	08008588 	.word	0x08008588
 8007bbc:	08008588 	.word	0x08008588
 8007bc0:	08008588 	.word	0x08008588
 8007bc4:	0800858c 	.word	0x0800858c

08007bc8 <memcpy>:
 8007bc8:	b510      	push	{r4, lr}
 8007bca:	1e43      	subs	r3, r0, #1
 8007bcc:	440a      	add	r2, r1
 8007bce:	4291      	cmp	r1, r2
 8007bd0:	d100      	bne.n	8007bd4 <memcpy+0xc>
 8007bd2:	bd10      	pop	{r4, pc}
 8007bd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bdc:	e7f7      	b.n	8007bce <memcpy+0x6>

08007bde <memset>:
 8007bde:	4603      	mov	r3, r0
 8007be0:	4402      	add	r2, r0
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d100      	bne.n	8007be8 <memset+0xa>
 8007be6:	4770      	bx	lr
 8007be8:	f803 1b01 	strb.w	r1, [r3], #1
 8007bec:	e7f9      	b.n	8007be2 <memset+0x4>
	...

08007bf0 <siprintf>:
 8007bf0:	b40e      	push	{r1, r2, r3}
 8007bf2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007bf6:	b500      	push	{lr}
 8007bf8:	b09c      	sub	sp, #112	; 0x70
 8007bfa:	ab1d      	add	r3, sp, #116	; 0x74
 8007bfc:	9002      	str	r0, [sp, #8]
 8007bfe:	9006      	str	r0, [sp, #24]
 8007c00:	9107      	str	r1, [sp, #28]
 8007c02:	9104      	str	r1, [sp, #16]
 8007c04:	4808      	ldr	r0, [pc, #32]	; (8007c28 <siprintf+0x38>)
 8007c06:	4909      	ldr	r1, [pc, #36]	; (8007c2c <siprintf+0x3c>)
 8007c08:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c0c:	9105      	str	r1, [sp, #20]
 8007c0e:	6800      	ldr	r0, [r0, #0]
 8007c10:	a902      	add	r1, sp, #8
 8007c12:	9301      	str	r3, [sp, #4]
 8007c14:	f000 f866 	bl	8007ce4 <_svfiprintf_r>
 8007c18:	2200      	movs	r2, #0
 8007c1a:	9b02      	ldr	r3, [sp, #8]
 8007c1c:	701a      	strb	r2, [r3, #0]
 8007c1e:	b01c      	add	sp, #112	; 0x70
 8007c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c24:	b003      	add	sp, #12
 8007c26:	4770      	bx	lr
 8007c28:	20000018 	.word	0x20000018
 8007c2c:	ffff0208 	.word	0xffff0208

08007c30 <__ssputs_r>:
 8007c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c34:	688e      	ldr	r6, [r1, #8]
 8007c36:	4682      	mov	sl, r0
 8007c38:	429e      	cmp	r6, r3
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	4690      	mov	r8, r2
 8007c3e:	4699      	mov	r9, r3
 8007c40:	d837      	bhi.n	8007cb2 <__ssputs_r+0x82>
 8007c42:	898a      	ldrh	r2, [r1, #12]
 8007c44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c48:	d031      	beq.n	8007cae <__ssputs_r+0x7e>
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	6825      	ldr	r5, [r4, #0]
 8007c4e:	6909      	ldr	r1, [r1, #16]
 8007c50:	1a6f      	subs	r7, r5, r1
 8007c52:	6965      	ldr	r5, [r4, #20]
 8007c54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c58:	fb95 f5f3 	sdiv	r5, r5, r3
 8007c5c:	f109 0301 	add.w	r3, r9, #1
 8007c60:	443b      	add	r3, r7
 8007c62:	429d      	cmp	r5, r3
 8007c64:	bf38      	it	cc
 8007c66:	461d      	movcc	r5, r3
 8007c68:	0553      	lsls	r3, r2, #21
 8007c6a:	d530      	bpl.n	8007cce <__ssputs_r+0x9e>
 8007c6c:	4629      	mov	r1, r5
 8007c6e:	f000 fb2d 	bl	80082cc <_malloc_r>
 8007c72:	4606      	mov	r6, r0
 8007c74:	b950      	cbnz	r0, 8007c8c <__ssputs_r+0x5c>
 8007c76:	230c      	movs	r3, #12
 8007c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c7c:	f8ca 3000 	str.w	r3, [sl]
 8007c80:	89a3      	ldrh	r3, [r4, #12]
 8007c82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c86:	81a3      	strh	r3, [r4, #12]
 8007c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c8c:	463a      	mov	r2, r7
 8007c8e:	6921      	ldr	r1, [r4, #16]
 8007c90:	f7ff ff9a 	bl	8007bc8 <memcpy>
 8007c94:	89a3      	ldrh	r3, [r4, #12]
 8007c96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c9e:	81a3      	strh	r3, [r4, #12]
 8007ca0:	6126      	str	r6, [r4, #16]
 8007ca2:	443e      	add	r6, r7
 8007ca4:	6026      	str	r6, [r4, #0]
 8007ca6:	464e      	mov	r6, r9
 8007ca8:	6165      	str	r5, [r4, #20]
 8007caa:	1bed      	subs	r5, r5, r7
 8007cac:	60a5      	str	r5, [r4, #8]
 8007cae:	454e      	cmp	r6, r9
 8007cb0:	d900      	bls.n	8007cb4 <__ssputs_r+0x84>
 8007cb2:	464e      	mov	r6, r9
 8007cb4:	4632      	mov	r2, r6
 8007cb6:	4641      	mov	r1, r8
 8007cb8:	6820      	ldr	r0, [r4, #0]
 8007cba:	f000 faa1 	bl	8008200 <memmove>
 8007cbe:	68a3      	ldr	r3, [r4, #8]
 8007cc0:	2000      	movs	r0, #0
 8007cc2:	1b9b      	subs	r3, r3, r6
 8007cc4:	60a3      	str	r3, [r4, #8]
 8007cc6:	6823      	ldr	r3, [r4, #0]
 8007cc8:	441e      	add	r6, r3
 8007cca:	6026      	str	r6, [r4, #0]
 8007ccc:	e7dc      	b.n	8007c88 <__ssputs_r+0x58>
 8007cce:	462a      	mov	r2, r5
 8007cd0:	f000 fb56 	bl	8008380 <_realloc_r>
 8007cd4:	4606      	mov	r6, r0
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d1e2      	bne.n	8007ca0 <__ssputs_r+0x70>
 8007cda:	6921      	ldr	r1, [r4, #16]
 8007cdc:	4650      	mov	r0, sl
 8007cde:	f000 faa9 	bl	8008234 <_free_r>
 8007ce2:	e7c8      	b.n	8007c76 <__ssputs_r+0x46>

08007ce4 <_svfiprintf_r>:
 8007ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce8:	461d      	mov	r5, r3
 8007cea:	898b      	ldrh	r3, [r1, #12]
 8007cec:	b09d      	sub	sp, #116	; 0x74
 8007cee:	061f      	lsls	r7, r3, #24
 8007cf0:	4680      	mov	r8, r0
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	4616      	mov	r6, r2
 8007cf6:	d50f      	bpl.n	8007d18 <_svfiprintf_r+0x34>
 8007cf8:	690b      	ldr	r3, [r1, #16]
 8007cfa:	b96b      	cbnz	r3, 8007d18 <_svfiprintf_r+0x34>
 8007cfc:	2140      	movs	r1, #64	; 0x40
 8007cfe:	f000 fae5 	bl	80082cc <_malloc_r>
 8007d02:	6020      	str	r0, [r4, #0]
 8007d04:	6120      	str	r0, [r4, #16]
 8007d06:	b928      	cbnz	r0, 8007d14 <_svfiprintf_r+0x30>
 8007d08:	230c      	movs	r3, #12
 8007d0a:	f8c8 3000 	str.w	r3, [r8]
 8007d0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d12:	e0c8      	b.n	8007ea6 <_svfiprintf_r+0x1c2>
 8007d14:	2340      	movs	r3, #64	; 0x40
 8007d16:	6163      	str	r3, [r4, #20]
 8007d18:	2300      	movs	r3, #0
 8007d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8007d1c:	2320      	movs	r3, #32
 8007d1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d22:	2330      	movs	r3, #48	; 0x30
 8007d24:	f04f 0b01 	mov.w	fp, #1
 8007d28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d2c:	9503      	str	r5, [sp, #12]
 8007d2e:	4637      	mov	r7, r6
 8007d30:	463d      	mov	r5, r7
 8007d32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007d36:	b10b      	cbz	r3, 8007d3c <_svfiprintf_r+0x58>
 8007d38:	2b25      	cmp	r3, #37	; 0x25
 8007d3a:	d13e      	bne.n	8007dba <_svfiprintf_r+0xd6>
 8007d3c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007d40:	d00b      	beq.n	8007d5a <_svfiprintf_r+0x76>
 8007d42:	4653      	mov	r3, sl
 8007d44:	4632      	mov	r2, r6
 8007d46:	4621      	mov	r1, r4
 8007d48:	4640      	mov	r0, r8
 8007d4a:	f7ff ff71 	bl	8007c30 <__ssputs_r>
 8007d4e:	3001      	adds	r0, #1
 8007d50:	f000 80a4 	beq.w	8007e9c <_svfiprintf_r+0x1b8>
 8007d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d56:	4453      	add	r3, sl
 8007d58:	9309      	str	r3, [sp, #36]	; 0x24
 8007d5a:	783b      	ldrb	r3, [r7, #0]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f000 809d 	beq.w	8007e9c <_svfiprintf_r+0x1b8>
 8007d62:	2300      	movs	r3, #0
 8007d64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007d68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d6c:	9304      	str	r3, [sp, #16]
 8007d6e:	9307      	str	r3, [sp, #28]
 8007d70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d74:	931a      	str	r3, [sp, #104]	; 0x68
 8007d76:	462f      	mov	r7, r5
 8007d78:	2205      	movs	r2, #5
 8007d7a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007d7e:	4850      	ldr	r0, [pc, #320]	; (8007ec0 <_svfiprintf_r+0x1dc>)
 8007d80:	f000 fa30 	bl	80081e4 <memchr>
 8007d84:	9b04      	ldr	r3, [sp, #16]
 8007d86:	b9d0      	cbnz	r0, 8007dbe <_svfiprintf_r+0xda>
 8007d88:	06d9      	lsls	r1, r3, #27
 8007d8a:	bf44      	itt	mi
 8007d8c:	2220      	movmi	r2, #32
 8007d8e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d92:	071a      	lsls	r2, r3, #28
 8007d94:	bf44      	itt	mi
 8007d96:	222b      	movmi	r2, #43	; 0x2b
 8007d98:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007d9c:	782a      	ldrb	r2, [r5, #0]
 8007d9e:	2a2a      	cmp	r2, #42	; 0x2a
 8007da0:	d015      	beq.n	8007dce <_svfiprintf_r+0xea>
 8007da2:	462f      	mov	r7, r5
 8007da4:	2000      	movs	r0, #0
 8007da6:	250a      	movs	r5, #10
 8007da8:	9a07      	ldr	r2, [sp, #28]
 8007daa:	4639      	mov	r1, r7
 8007dac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007db0:	3b30      	subs	r3, #48	; 0x30
 8007db2:	2b09      	cmp	r3, #9
 8007db4:	d94d      	bls.n	8007e52 <_svfiprintf_r+0x16e>
 8007db6:	b1b8      	cbz	r0, 8007de8 <_svfiprintf_r+0x104>
 8007db8:	e00f      	b.n	8007dda <_svfiprintf_r+0xf6>
 8007dba:	462f      	mov	r7, r5
 8007dbc:	e7b8      	b.n	8007d30 <_svfiprintf_r+0x4c>
 8007dbe:	4a40      	ldr	r2, [pc, #256]	; (8007ec0 <_svfiprintf_r+0x1dc>)
 8007dc0:	463d      	mov	r5, r7
 8007dc2:	1a80      	subs	r0, r0, r2
 8007dc4:	fa0b f000 	lsl.w	r0, fp, r0
 8007dc8:	4318      	orrs	r0, r3
 8007dca:	9004      	str	r0, [sp, #16]
 8007dcc:	e7d3      	b.n	8007d76 <_svfiprintf_r+0x92>
 8007dce:	9a03      	ldr	r2, [sp, #12]
 8007dd0:	1d11      	adds	r1, r2, #4
 8007dd2:	6812      	ldr	r2, [r2, #0]
 8007dd4:	9103      	str	r1, [sp, #12]
 8007dd6:	2a00      	cmp	r2, #0
 8007dd8:	db01      	blt.n	8007dde <_svfiprintf_r+0xfa>
 8007dda:	9207      	str	r2, [sp, #28]
 8007ddc:	e004      	b.n	8007de8 <_svfiprintf_r+0x104>
 8007dde:	4252      	negs	r2, r2
 8007de0:	f043 0302 	orr.w	r3, r3, #2
 8007de4:	9207      	str	r2, [sp, #28]
 8007de6:	9304      	str	r3, [sp, #16]
 8007de8:	783b      	ldrb	r3, [r7, #0]
 8007dea:	2b2e      	cmp	r3, #46	; 0x2e
 8007dec:	d10c      	bne.n	8007e08 <_svfiprintf_r+0x124>
 8007dee:	787b      	ldrb	r3, [r7, #1]
 8007df0:	2b2a      	cmp	r3, #42	; 0x2a
 8007df2:	d133      	bne.n	8007e5c <_svfiprintf_r+0x178>
 8007df4:	9b03      	ldr	r3, [sp, #12]
 8007df6:	3702      	adds	r7, #2
 8007df8:	1d1a      	adds	r2, r3, #4
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	9203      	str	r2, [sp, #12]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	bfb8      	it	lt
 8007e02:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007e06:	9305      	str	r3, [sp, #20]
 8007e08:	4d2e      	ldr	r5, [pc, #184]	; (8007ec4 <_svfiprintf_r+0x1e0>)
 8007e0a:	2203      	movs	r2, #3
 8007e0c:	7839      	ldrb	r1, [r7, #0]
 8007e0e:	4628      	mov	r0, r5
 8007e10:	f000 f9e8 	bl	80081e4 <memchr>
 8007e14:	b138      	cbz	r0, 8007e26 <_svfiprintf_r+0x142>
 8007e16:	2340      	movs	r3, #64	; 0x40
 8007e18:	1b40      	subs	r0, r0, r5
 8007e1a:	fa03 f000 	lsl.w	r0, r3, r0
 8007e1e:	9b04      	ldr	r3, [sp, #16]
 8007e20:	3701      	adds	r7, #1
 8007e22:	4303      	orrs	r3, r0
 8007e24:	9304      	str	r3, [sp, #16]
 8007e26:	7839      	ldrb	r1, [r7, #0]
 8007e28:	2206      	movs	r2, #6
 8007e2a:	4827      	ldr	r0, [pc, #156]	; (8007ec8 <_svfiprintf_r+0x1e4>)
 8007e2c:	1c7e      	adds	r6, r7, #1
 8007e2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e32:	f000 f9d7 	bl	80081e4 <memchr>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	d038      	beq.n	8007eac <_svfiprintf_r+0x1c8>
 8007e3a:	4b24      	ldr	r3, [pc, #144]	; (8007ecc <_svfiprintf_r+0x1e8>)
 8007e3c:	bb13      	cbnz	r3, 8007e84 <_svfiprintf_r+0x1a0>
 8007e3e:	9b03      	ldr	r3, [sp, #12]
 8007e40:	3307      	adds	r3, #7
 8007e42:	f023 0307 	bic.w	r3, r3, #7
 8007e46:	3308      	adds	r3, #8
 8007e48:	9303      	str	r3, [sp, #12]
 8007e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e4c:	444b      	add	r3, r9
 8007e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e50:	e76d      	b.n	8007d2e <_svfiprintf_r+0x4a>
 8007e52:	fb05 3202 	mla	r2, r5, r2, r3
 8007e56:	2001      	movs	r0, #1
 8007e58:	460f      	mov	r7, r1
 8007e5a:	e7a6      	b.n	8007daa <_svfiprintf_r+0xc6>
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	250a      	movs	r5, #10
 8007e60:	4619      	mov	r1, r3
 8007e62:	3701      	adds	r7, #1
 8007e64:	9305      	str	r3, [sp, #20]
 8007e66:	4638      	mov	r0, r7
 8007e68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e6c:	3a30      	subs	r2, #48	; 0x30
 8007e6e:	2a09      	cmp	r2, #9
 8007e70:	d903      	bls.n	8007e7a <_svfiprintf_r+0x196>
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d0c8      	beq.n	8007e08 <_svfiprintf_r+0x124>
 8007e76:	9105      	str	r1, [sp, #20]
 8007e78:	e7c6      	b.n	8007e08 <_svfiprintf_r+0x124>
 8007e7a:	fb05 2101 	mla	r1, r5, r1, r2
 8007e7e:	2301      	movs	r3, #1
 8007e80:	4607      	mov	r7, r0
 8007e82:	e7f0      	b.n	8007e66 <_svfiprintf_r+0x182>
 8007e84:	ab03      	add	r3, sp, #12
 8007e86:	9300      	str	r3, [sp, #0]
 8007e88:	4622      	mov	r2, r4
 8007e8a:	4b11      	ldr	r3, [pc, #68]	; (8007ed0 <_svfiprintf_r+0x1ec>)
 8007e8c:	a904      	add	r1, sp, #16
 8007e8e:	4640      	mov	r0, r8
 8007e90:	f3af 8000 	nop.w
 8007e94:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8007e98:	4681      	mov	r9, r0
 8007e9a:	d1d6      	bne.n	8007e4a <_svfiprintf_r+0x166>
 8007e9c:	89a3      	ldrh	r3, [r4, #12]
 8007e9e:	065b      	lsls	r3, r3, #25
 8007ea0:	f53f af35 	bmi.w	8007d0e <_svfiprintf_r+0x2a>
 8007ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ea6:	b01d      	add	sp, #116	; 0x74
 8007ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eac:	ab03      	add	r3, sp, #12
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	4622      	mov	r2, r4
 8007eb2:	4b07      	ldr	r3, [pc, #28]	; (8007ed0 <_svfiprintf_r+0x1ec>)
 8007eb4:	a904      	add	r1, sp, #16
 8007eb6:	4640      	mov	r0, r8
 8007eb8:	f000 f882 	bl	8007fc0 <_printf_i>
 8007ebc:	e7ea      	b.n	8007e94 <_svfiprintf_r+0x1b0>
 8007ebe:	bf00      	nop
 8007ec0:	08008554 	.word	0x08008554
 8007ec4:	0800855a 	.word	0x0800855a
 8007ec8:	0800855e 	.word	0x0800855e
 8007ecc:	00000000 	.word	0x00000000
 8007ed0:	08007c31 	.word	0x08007c31

08007ed4 <_printf_common>:
 8007ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ed8:	4691      	mov	r9, r2
 8007eda:	461f      	mov	r7, r3
 8007edc:	688a      	ldr	r2, [r1, #8]
 8007ede:	690b      	ldr	r3, [r1, #16]
 8007ee0:	4606      	mov	r6, r0
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	bfb8      	it	lt
 8007ee6:	4613      	movlt	r3, r2
 8007ee8:	f8c9 3000 	str.w	r3, [r9]
 8007eec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007ef0:	460c      	mov	r4, r1
 8007ef2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ef6:	b112      	cbz	r2, 8007efe <_printf_common+0x2a>
 8007ef8:	3301      	adds	r3, #1
 8007efa:	f8c9 3000 	str.w	r3, [r9]
 8007efe:	6823      	ldr	r3, [r4, #0]
 8007f00:	0699      	lsls	r1, r3, #26
 8007f02:	bf42      	ittt	mi
 8007f04:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007f08:	3302      	addmi	r3, #2
 8007f0a:	f8c9 3000 	strmi.w	r3, [r9]
 8007f0e:	6825      	ldr	r5, [r4, #0]
 8007f10:	f015 0506 	ands.w	r5, r5, #6
 8007f14:	d107      	bne.n	8007f26 <_printf_common+0x52>
 8007f16:	f104 0a19 	add.w	sl, r4, #25
 8007f1a:	68e3      	ldr	r3, [r4, #12]
 8007f1c:	f8d9 2000 	ldr.w	r2, [r9]
 8007f20:	1a9b      	subs	r3, r3, r2
 8007f22:	42ab      	cmp	r3, r5
 8007f24:	dc29      	bgt.n	8007f7a <_printf_common+0xa6>
 8007f26:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007f2a:	6822      	ldr	r2, [r4, #0]
 8007f2c:	3300      	adds	r3, #0
 8007f2e:	bf18      	it	ne
 8007f30:	2301      	movne	r3, #1
 8007f32:	0692      	lsls	r2, r2, #26
 8007f34:	d42e      	bmi.n	8007f94 <_printf_common+0xc0>
 8007f36:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f3a:	4639      	mov	r1, r7
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	47c0      	blx	r8
 8007f40:	3001      	adds	r0, #1
 8007f42:	d021      	beq.n	8007f88 <_printf_common+0xb4>
 8007f44:	6823      	ldr	r3, [r4, #0]
 8007f46:	68e5      	ldr	r5, [r4, #12]
 8007f48:	f003 0306 	and.w	r3, r3, #6
 8007f4c:	2b04      	cmp	r3, #4
 8007f4e:	bf18      	it	ne
 8007f50:	2500      	movne	r5, #0
 8007f52:	f8d9 2000 	ldr.w	r2, [r9]
 8007f56:	f04f 0900 	mov.w	r9, #0
 8007f5a:	bf08      	it	eq
 8007f5c:	1aad      	subeq	r5, r5, r2
 8007f5e:	68a3      	ldr	r3, [r4, #8]
 8007f60:	6922      	ldr	r2, [r4, #16]
 8007f62:	bf08      	it	eq
 8007f64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	bfc4      	itt	gt
 8007f6c:	1a9b      	subgt	r3, r3, r2
 8007f6e:	18ed      	addgt	r5, r5, r3
 8007f70:	341a      	adds	r4, #26
 8007f72:	454d      	cmp	r5, r9
 8007f74:	d11a      	bne.n	8007fac <_printf_common+0xd8>
 8007f76:	2000      	movs	r0, #0
 8007f78:	e008      	b.n	8007f8c <_printf_common+0xb8>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	4652      	mov	r2, sl
 8007f7e:	4639      	mov	r1, r7
 8007f80:	4630      	mov	r0, r6
 8007f82:	47c0      	blx	r8
 8007f84:	3001      	adds	r0, #1
 8007f86:	d103      	bne.n	8007f90 <_printf_common+0xbc>
 8007f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f90:	3501      	adds	r5, #1
 8007f92:	e7c2      	b.n	8007f1a <_printf_common+0x46>
 8007f94:	2030      	movs	r0, #48	; 0x30
 8007f96:	18e1      	adds	r1, r4, r3
 8007f98:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007f9c:	1c5a      	adds	r2, r3, #1
 8007f9e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007fa2:	4422      	add	r2, r4
 8007fa4:	3302      	adds	r3, #2
 8007fa6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007faa:	e7c4      	b.n	8007f36 <_printf_common+0x62>
 8007fac:	2301      	movs	r3, #1
 8007fae:	4622      	mov	r2, r4
 8007fb0:	4639      	mov	r1, r7
 8007fb2:	4630      	mov	r0, r6
 8007fb4:	47c0      	blx	r8
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	d0e6      	beq.n	8007f88 <_printf_common+0xb4>
 8007fba:	f109 0901 	add.w	r9, r9, #1
 8007fbe:	e7d8      	b.n	8007f72 <_printf_common+0x9e>

08007fc0 <_printf_i>:
 8007fc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007fc4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007fc8:	460c      	mov	r4, r1
 8007fca:	7e09      	ldrb	r1, [r1, #24]
 8007fcc:	b085      	sub	sp, #20
 8007fce:	296e      	cmp	r1, #110	; 0x6e
 8007fd0:	4617      	mov	r7, r2
 8007fd2:	4606      	mov	r6, r0
 8007fd4:	4698      	mov	r8, r3
 8007fd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007fd8:	f000 80b3 	beq.w	8008142 <_printf_i+0x182>
 8007fdc:	d822      	bhi.n	8008024 <_printf_i+0x64>
 8007fde:	2963      	cmp	r1, #99	; 0x63
 8007fe0:	d036      	beq.n	8008050 <_printf_i+0x90>
 8007fe2:	d80a      	bhi.n	8007ffa <_printf_i+0x3a>
 8007fe4:	2900      	cmp	r1, #0
 8007fe6:	f000 80b9 	beq.w	800815c <_printf_i+0x19c>
 8007fea:	2958      	cmp	r1, #88	; 0x58
 8007fec:	f000 8083 	beq.w	80080f6 <_printf_i+0x136>
 8007ff0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ff4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007ff8:	e032      	b.n	8008060 <_printf_i+0xa0>
 8007ffa:	2964      	cmp	r1, #100	; 0x64
 8007ffc:	d001      	beq.n	8008002 <_printf_i+0x42>
 8007ffe:	2969      	cmp	r1, #105	; 0x69
 8008000:	d1f6      	bne.n	8007ff0 <_printf_i+0x30>
 8008002:	6820      	ldr	r0, [r4, #0]
 8008004:	6813      	ldr	r3, [r2, #0]
 8008006:	0605      	lsls	r5, r0, #24
 8008008:	f103 0104 	add.w	r1, r3, #4
 800800c:	d52a      	bpl.n	8008064 <_printf_i+0xa4>
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	6011      	str	r1, [r2, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	da03      	bge.n	800801e <_printf_i+0x5e>
 8008016:	222d      	movs	r2, #45	; 0x2d
 8008018:	425b      	negs	r3, r3
 800801a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800801e:	486f      	ldr	r0, [pc, #444]	; (80081dc <_printf_i+0x21c>)
 8008020:	220a      	movs	r2, #10
 8008022:	e039      	b.n	8008098 <_printf_i+0xd8>
 8008024:	2973      	cmp	r1, #115	; 0x73
 8008026:	f000 809d 	beq.w	8008164 <_printf_i+0x1a4>
 800802a:	d808      	bhi.n	800803e <_printf_i+0x7e>
 800802c:	296f      	cmp	r1, #111	; 0x6f
 800802e:	d020      	beq.n	8008072 <_printf_i+0xb2>
 8008030:	2970      	cmp	r1, #112	; 0x70
 8008032:	d1dd      	bne.n	8007ff0 <_printf_i+0x30>
 8008034:	6823      	ldr	r3, [r4, #0]
 8008036:	f043 0320 	orr.w	r3, r3, #32
 800803a:	6023      	str	r3, [r4, #0]
 800803c:	e003      	b.n	8008046 <_printf_i+0x86>
 800803e:	2975      	cmp	r1, #117	; 0x75
 8008040:	d017      	beq.n	8008072 <_printf_i+0xb2>
 8008042:	2978      	cmp	r1, #120	; 0x78
 8008044:	d1d4      	bne.n	8007ff0 <_printf_i+0x30>
 8008046:	2378      	movs	r3, #120	; 0x78
 8008048:	4865      	ldr	r0, [pc, #404]	; (80081e0 <_printf_i+0x220>)
 800804a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800804e:	e055      	b.n	80080fc <_printf_i+0x13c>
 8008050:	6813      	ldr	r3, [r2, #0]
 8008052:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008056:	1d19      	adds	r1, r3, #4
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	6011      	str	r1, [r2, #0]
 800805c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008060:	2301      	movs	r3, #1
 8008062:	e08c      	b.n	800817e <_printf_i+0x1be>
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f010 0f40 	tst.w	r0, #64	; 0x40
 800806a:	6011      	str	r1, [r2, #0]
 800806c:	bf18      	it	ne
 800806e:	b21b      	sxthne	r3, r3
 8008070:	e7cf      	b.n	8008012 <_printf_i+0x52>
 8008072:	6813      	ldr	r3, [r2, #0]
 8008074:	6825      	ldr	r5, [r4, #0]
 8008076:	1d18      	adds	r0, r3, #4
 8008078:	6010      	str	r0, [r2, #0]
 800807a:	0628      	lsls	r0, r5, #24
 800807c:	d501      	bpl.n	8008082 <_printf_i+0xc2>
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	e002      	b.n	8008088 <_printf_i+0xc8>
 8008082:	0668      	lsls	r0, r5, #25
 8008084:	d5fb      	bpl.n	800807e <_printf_i+0xbe>
 8008086:	881b      	ldrh	r3, [r3, #0]
 8008088:	296f      	cmp	r1, #111	; 0x6f
 800808a:	bf14      	ite	ne
 800808c:	220a      	movne	r2, #10
 800808e:	2208      	moveq	r2, #8
 8008090:	4852      	ldr	r0, [pc, #328]	; (80081dc <_printf_i+0x21c>)
 8008092:	2100      	movs	r1, #0
 8008094:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008098:	6865      	ldr	r5, [r4, #4]
 800809a:	2d00      	cmp	r5, #0
 800809c:	60a5      	str	r5, [r4, #8]
 800809e:	f2c0 8095 	blt.w	80081cc <_printf_i+0x20c>
 80080a2:	6821      	ldr	r1, [r4, #0]
 80080a4:	f021 0104 	bic.w	r1, r1, #4
 80080a8:	6021      	str	r1, [r4, #0]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d13d      	bne.n	800812a <_printf_i+0x16a>
 80080ae:	2d00      	cmp	r5, #0
 80080b0:	f040 808e 	bne.w	80081d0 <_printf_i+0x210>
 80080b4:	4665      	mov	r5, ip
 80080b6:	2a08      	cmp	r2, #8
 80080b8:	d10b      	bne.n	80080d2 <_printf_i+0x112>
 80080ba:	6823      	ldr	r3, [r4, #0]
 80080bc:	07db      	lsls	r3, r3, #31
 80080be:	d508      	bpl.n	80080d2 <_printf_i+0x112>
 80080c0:	6923      	ldr	r3, [r4, #16]
 80080c2:	6862      	ldr	r2, [r4, #4]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	bfde      	ittt	le
 80080c8:	2330      	movle	r3, #48	; 0x30
 80080ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080ce:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80080d2:	ebac 0305 	sub.w	r3, ip, r5
 80080d6:	6123      	str	r3, [r4, #16]
 80080d8:	f8cd 8000 	str.w	r8, [sp]
 80080dc:	463b      	mov	r3, r7
 80080de:	aa03      	add	r2, sp, #12
 80080e0:	4621      	mov	r1, r4
 80080e2:	4630      	mov	r0, r6
 80080e4:	f7ff fef6 	bl	8007ed4 <_printf_common>
 80080e8:	3001      	adds	r0, #1
 80080ea:	d14d      	bne.n	8008188 <_printf_i+0x1c8>
 80080ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080f0:	b005      	add	sp, #20
 80080f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80080f6:	4839      	ldr	r0, [pc, #228]	; (80081dc <_printf_i+0x21c>)
 80080f8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80080fc:	6813      	ldr	r3, [r2, #0]
 80080fe:	6821      	ldr	r1, [r4, #0]
 8008100:	1d1d      	adds	r5, r3, #4
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	6015      	str	r5, [r2, #0]
 8008106:	060a      	lsls	r2, r1, #24
 8008108:	d50b      	bpl.n	8008122 <_printf_i+0x162>
 800810a:	07ca      	lsls	r2, r1, #31
 800810c:	bf44      	itt	mi
 800810e:	f041 0120 	orrmi.w	r1, r1, #32
 8008112:	6021      	strmi	r1, [r4, #0]
 8008114:	b91b      	cbnz	r3, 800811e <_printf_i+0x15e>
 8008116:	6822      	ldr	r2, [r4, #0]
 8008118:	f022 0220 	bic.w	r2, r2, #32
 800811c:	6022      	str	r2, [r4, #0]
 800811e:	2210      	movs	r2, #16
 8008120:	e7b7      	b.n	8008092 <_printf_i+0xd2>
 8008122:	064d      	lsls	r5, r1, #25
 8008124:	bf48      	it	mi
 8008126:	b29b      	uxthmi	r3, r3
 8008128:	e7ef      	b.n	800810a <_printf_i+0x14a>
 800812a:	4665      	mov	r5, ip
 800812c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008130:	fb02 3311 	mls	r3, r2, r1, r3
 8008134:	5cc3      	ldrb	r3, [r0, r3]
 8008136:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800813a:	460b      	mov	r3, r1
 800813c:	2900      	cmp	r1, #0
 800813e:	d1f5      	bne.n	800812c <_printf_i+0x16c>
 8008140:	e7b9      	b.n	80080b6 <_printf_i+0xf6>
 8008142:	6813      	ldr	r3, [r2, #0]
 8008144:	6825      	ldr	r5, [r4, #0]
 8008146:	1d18      	adds	r0, r3, #4
 8008148:	6961      	ldr	r1, [r4, #20]
 800814a:	6010      	str	r0, [r2, #0]
 800814c:	0628      	lsls	r0, r5, #24
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	d501      	bpl.n	8008156 <_printf_i+0x196>
 8008152:	6019      	str	r1, [r3, #0]
 8008154:	e002      	b.n	800815c <_printf_i+0x19c>
 8008156:	066a      	lsls	r2, r5, #25
 8008158:	d5fb      	bpl.n	8008152 <_printf_i+0x192>
 800815a:	8019      	strh	r1, [r3, #0]
 800815c:	2300      	movs	r3, #0
 800815e:	4665      	mov	r5, ip
 8008160:	6123      	str	r3, [r4, #16]
 8008162:	e7b9      	b.n	80080d8 <_printf_i+0x118>
 8008164:	6813      	ldr	r3, [r2, #0]
 8008166:	1d19      	adds	r1, r3, #4
 8008168:	6011      	str	r1, [r2, #0]
 800816a:	681d      	ldr	r5, [r3, #0]
 800816c:	6862      	ldr	r2, [r4, #4]
 800816e:	2100      	movs	r1, #0
 8008170:	4628      	mov	r0, r5
 8008172:	f000 f837 	bl	80081e4 <memchr>
 8008176:	b108      	cbz	r0, 800817c <_printf_i+0x1bc>
 8008178:	1b40      	subs	r0, r0, r5
 800817a:	6060      	str	r0, [r4, #4]
 800817c:	6863      	ldr	r3, [r4, #4]
 800817e:	6123      	str	r3, [r4, #16]
 8008180:	2300      	movs	r3, #0
 8008182:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008186:	e7a7      	b.n	80080d8 <_printf_i+0x118>
 8008188:	6923      	ldr	r3, [r4, #16]
 800818a:	462a      	mov	r2, r5
 800818c:	4639      	mov	r1, r7
 800818e:	4630      	mov	r0, r6
 8008190:	47c0      	blx	r8
 8008192:	3001      	adds	r0, #1
 8008194:	d0aa      	beq.n	80080ec <_printf_i+0x12c>
 8008196:	6823      	ldr	r3, [r4, #0]
 8008198:	079b      	lsls	r3, r3, #30
 800819a:	d413      	bmi.n	80081c4 <_printf_i+0x204>
 800819c:	68e0      	ldr	r0, [r4, #12]
 800819e:	9b03      	ldr	r3, [sp, #12]
 80081a0:	4298      	cmp	r0, r3
 80081a2:	bfb8      	it	lt
 80081a4:	4618      	movlt	r0, r3
 80081a6:	e7a3      	b.n	80080f0 <_printf_i+0x130>
 80081a8:	2301      	movs	r3, #1
 80081aa:	464a      	mov	r2, r9
 80081ac:	4639      	mov	r1, r7
 80081ae:	4630      	mov	r0, r6
 80081b0:	47c0      	blx	r8
 80081b2:	3001      	adds	r0, #1
 80081b4:	d09a      	beq.n	80080ec <_printf_i+0x12c>
 80081b6:	3501      	adds	r5, #1
 80081b8:	68e3      	ldr	r3, [r4, #12]
 80081ba:	9a03      	ldr	r2, [sp, #12]
 80081bc:	1a9b      	subs	r3, r3, r2
 80081be:	42ab      	cmp	r3, r5
 80081c0:	dcf2      	bgt.n	80081a8 <_printf_i+0x1e8>
 80081c2:	e7eb      	b.n	800819c <_printf_i+0x1dc>
 80081c4:	2500      	movs	r5, #0
 80081c6:	f104 0919 	add.w	r9, r4, #25
 80081ca:	e7f5      	b.n	80081b8 <_printf_i+0x1f8>
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d1ac      	bne.n	800812a <_printf_i+0x16a>
 80081d0:	7803      	ldrb	r3, [r0, #0]
 80081d2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081da:	e76c      	b.n	80080b6 <_printf_i+0xf6>
 80081dc:	08008565 	.word	0x08008565
 80081e0:	08008576 	.word	0x08008576

080081e4 <memchr>:
 80081e4:	b510      	push	{r4, lr}
 80081e6:	b2c9      	uxtb	r1, r1
 80081e8:	4402      	add	r2, r0
 80081ea:	4290      	cmp	r0, r2
 80081ec:	4603      	mov	r3, r0
 80081ee:	d101      	bne.n	80081f4 <memchr+0x10>
 80081f0:	2300      	movs	r3, #0
 80081f2:	e003      	b.n	80081fc <memchr+0x18>
 80081f4:	781c      	ldrb	r4, [r3, #0]
 80081f6:	3001      	adds	r0, #1
 80081f8:	428c      	cmp	r4, r1
 80081fa:	d1f6      	bne.n	80081ea <memchr+0x6>
 80081fc:	4618      	mov	r0, r3
 80081fe:	bd10      	pop	{r4, pc}

08008200 <memmove>:
 8008200:	4288      	cmp	r0, r1
 8008202:	b510      	push	{r4, lr}
 8008204:	eb01 0302 	add.w	r3, r1, r2
 8008208:	d807      	bhi.n	800821a <memmove+0x1a>
 800820a:	1e42      	subs	r2, r0, #1
 800820c:	4299      	cmp	r1, r3
 800820e:	d00a      	beq.n	8008226 <memmove+0x26>
 8008210:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008214:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008218:	e7f8      	b.n	800820c <memmove+0xc>
 800821a:	4283      	cmp	r3, r0
 800821c:	d9f5      	bls.n	800820a <memmove+0xa>
 800821e:	1881      	adds	r1, r0, r2
 8008220:	1ad2      	subs	r2, r2, r3
 8008222:	42d3      	cmn	r3, r2
 8008224:	d100      	bne.n	8008228 <memmove+0x28>
 8008226:	bd10      	pop	{r4, pc}
 8008228:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800822c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008230:	e7f7      	b.n	8008222 <memmove+0x22>
	...

08008234 <_free_r>:
 8008234:	b538      	push	{r3, r4, r5, lr}
 8008236:	4605      	mov	r5, r0
 8008238:	2900      	cmp	r1, #0
 800823a:	d043      	beq.n	80082c4 <_free_r+0x90>
 800823c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008240:	1f0c      	subs	r4, r1, #4
 8008242:	2b00      	cmp	r3, #0
 8008244:	bfb8      	it	lt
 8008246:	18e4      	addlt	r4, r4, r3
 8008248:	f000 f8d0 	bl	80083ec <__malloc_lock>
 800824c:	4a1e      	ldr	r2, [pc, #120]	; (80082c8 <_free_r+0x94>)
 800824e:	6813      	ldr	r3, [r2, #0]
 8008250:	4610      	mov	r0, r2
 8008252:	b933      	cbnz	r3, 8008262 <_free_r+0x2e>
 8008254:	6063      	str	r3, [r4, #4]
 8008256:	6014      	str	r4, [r2, #0]
 8008258:	4628      	mov	r0, r5
 800825a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800825e:	f000 b8c6 	b.w	80083ee <__malloc_unlock>
 8008262:	42a3      	cmp	r3, r4
 8008264:	d90b      	bls.n	800827e <_free_r+0x4a>
 8008266:	6821      	ldr	r1, [r4, #0]
 8008268:	1862      	adds	r2, r4, r1
 800826a:	4293      	cmp	r3, r2
 800826c:	bf01      	itttt	eq
 800826e:	681a      	ldreq	r2, [r3, #0]
 8008270:	685b      	ldreq	r3, [r3, #4]
 8008272:	1852      	addeq	r2, r2, r1
 8008274:	6022      	streq	r2, [r4, #0]
 8008276:	6063      	str	r3, [r4, #4]
 8008278:	6004      	str	r4, [r0, #0]
 800827a:	e7ed      	b.n	8008258 <_free_r+0x24>
 800827c:	4613      	mov	r3, r2
 800827e:	685a      	ldr	r2, [r3, #4]
 8008280:	b10a      	cbz	r2, 8008286 <_free_r+0x52>
 8008282:	42a2      	cmp	r2, r4
 8008284:	d9fa      	bls.n	800827c <_free_r+0x48>
 8008286:	6819      	ldr	r1, [r3, #0]
 8008288:	1858      	adds	r0, r3, r1
 800828a:	42a0      	cmp	r0, r4
 800828c:	d10b      	bne.n	80082a6 <_free_r+0x72>
 800828e:	6820      	ldr	r0, [r4, #0]
 8008290:	4401      	add	r1, r0
 8008292:	1858      	adds	r0, r3, r1
 8008294:	4282      	cmp	r2, r0
 8008296:	6019      	str	r1, [r3, #0]
 8008298:	d1de      	bne.n	8008258 <_free_r+0x24>
 800829a:	6810      	ldr	r0, [r2, #0]
 800829c:	6852      	ldr	r2, [r2, #4]
 800829e:	4401      	add	r1, r0
 80082a0:	6019      	str	r1, [r3, #0]
 80082a2:	605a      	str	r2, [r3, #4]
 80082a4:	e7d8      	b.n	8008258 <_free_r+0x24>
 80082a6:	d902      	bls.n	80082ae <_free_r+0x7a>
 80082a8:	230c      	movs	r3, #12
 80082aa:	602b      	str	r3, [r5, #0]
 80082ac:	e7d4      	b.n	8008258 <_free_r+0x24>
 80082ae:	6820      	ldr	r0, [r4, #0]
 80082b0:	1821      	adds	r1, r4, r0
 80082b2:	428a      	cmp	r2, r1
 80082b4:	bf01      	itttt	eq
 80082b6:	6811      	ldreq	r1, [r2, #0]
 80082b8:	6852      	ldreq	r2, [r2, #4]
 80082ba:	1809      	addeq	r1, r1, r0
 80082bc:	6021      	streq	r1, [r4, #0]
 80082be:	6062      	str	r2, [r4, #4]
 80082c0:	605c      	str	r4, [r3, #4]
 80082c2:	e7c9      	b.n	8008258 <_free_r+0x24>
 80082c4:	bd38      	pop	{r3, r4, r5, pc}
 80082c6:	bf00      	nop
 80082c8:	20003394 	.word	0x20003394

080082cc <_malloc_r>:
 80082cc:	b570      	push	{r4, r5, r6, lr}
 80082ce:	1ccd      	adds	r5, r1, #3
 80082d0:	f025 0503 	bic.w	r5, r5, #3
 80082d4:	3508      	adds	r5, #8
 80082d6:	2d0c      	cmp	r5, #12
 80082d8:	bf38      	it	cc
 80082da:	250c      	movcc	r5, #12
 80082dc:	2d00      	cmp	r5, #0
 80082de:	4606      	mov	r6, r0
 80082e0:	db01      	blt.n	80082e6 <_malloc_r+0x1a>
 80082e2:	42a9      	cmp	r1, r5
 80082e4:	d903      	bls.n	80082ee <_malloc_r+0x22>
 80082e6:	230c      	movs	r3, #12
 80082e8:	6033      	str	r3, [r6, #0]
 80082ea:	2000      	movs	r0, #0
 80082ec:	bd70      	pop	{r4, r5, r6, pc}
 80082ee:	f000 f87d 	bl	80083ec <__malloc_lock>
 80082f2:	4a21      	ldr	r2, [pc, #132]	; (8008378 <_malloc_r+0xac>)
 80082f4:	6814      	ldr	r4, [r2, #0]
 80082f6:	4621      	mov	r1, r4
 80082f8:	b991      	cbnz	r1, 8008320 <_malloc_r+0x54>
 80082fa:	4c20      	ldr	r4, [pc, #128]	; (800837c <_malloc_r+0xb0>)
 80082fc:	6823      	ldr	r3, [r4, #0]
 80082fe:	b91b      	cbnz	r3, 8008308 <_malloc_r+0x3c>
 8008300:	4630      	mov	r0, r6
 8008302:	f000 f863 	bl	80083cc <_sbrk_r>
 8008306:	6020      	str	r0, [r4, #0]
 8008308:	4629      	mov	r1, r5
 800830a:	4630      	mov	r0, r6
 800830c:	f000 f85e 	bl	80083cc <_sbrk_r>
 8008310:	1c43      	adds	r3, r0, #1
 8008312:	d124      	bne.n	800835e <_malloc_r+0x92>
 8008314:	230c      	movs	r3, #12
 8008316:	4630      	mov	r0, r6
 8008318:	6033      	str	r3, [r6, #0]
 800831a:	f000 f868 	bl	80083ee <__malloc_unlock>
 800831e:	e7e4      	b.n	80082ea <_malloc_r+0x1e>
 8008320:	680b      	ldr	r3, [r1, #0]
 8008322:	1b5b      	subs	r3, r3, r5
 8008324:	d418      	bmi.n	8008358 <_malloc_r+0x8c>
 8008326:	2b0b      	cmp	r3, #11
 8008328:	d90f      	bls.n	800834a <_malloc_r+0x7e>
 800832a:	600b      	str	r3, [r1, #0]
 800832c:	18cc      	adds	r4, r1, r3
 800832e:	50cd      	str	r5, [r1, r3]
 8008330:	4630      	mov	r0, r6
 8008332:	f000 f85c 	bl	80083ee <__malloc_unlock>
 8008336:	f104 000b 	add.w	r0, r4, #11
 800833a:	1d23      	adds	r3, r4, #4
 800833c:	f020 0007 	bic.w	r0, r0, #7
 8008340:	1ac3      	subs	r3, r0, r3
 8008342:	d0d3      	beq.n	80082ec <_malloc_r+0x20>
 8008344:	425a      	negs	r2, r3
 8008346:	50e2      	str	r2, [r4, r3]
 8008348:	e7d0      	b.n	80082ec <_malloc_r+0x20>
 800834a:	684b      	ldr	r3, [r1, #4]
 800834c:	428c      	cmp	r4, r1
 800834e:	bf16      	itet	ne
 8008350:	6063      	strne	r3, [r4, #4]
 8008352:	6013      	streq	r3, [r2, #0]
 8008354:	460c      	movne	r4, r1
 8008356:	e7eb      	b.n	8008330 <_malloc_r+0x64>
 8008358:	460c      	mov	r4, r1
 800835a:	6849      	ldr	r1, [r1, #4]
 800835c:	e7cc      	b.n	80082f8 <_malloc_r+0x2c>
 800835e:	1cc4      	adds	r4, r0, #3
 8008360:	f024 0403 	bic.w	r4, r4, #3
 8008364:	42a0      	cmp	r0, r4
 8008366:	d005      	beq.n	8008374 <_malloc_r+0xa8>
 8008368:	1a21      	subs	r1, r4, r0
 800836a:	4630      	mov	r0, r6
 800836c:	f000 f82e 	bl	80083cc <_sbrk_r>
 8008370:	3001      	adds	r0, #1
 8008372:	d0cf      	beq.n	8008314 <_malloc_r+0x48>
 8008374:	6025      	str	r5, [r4, #0]
 8008376:	e7db      	b.n	8008330 <_malloc_r+0x64>
 8008378:	20003394 	.word	0x20003394
 800837c:	20003398 	.word	0x20003398

08008380 <_realloc_r>:
 8008380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008382:	4607      	mov	r7, r0
 8008384:	4614      	mov	r4, r2
 8008386:	460e      	mov	r6, r1
 8008388:	b921      	cbnz	r1, 8008394 <_realloc_r+0x14>
 800838a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800838e:	4611      	mov	r1, r2
 8008390:	f7ff bf9c 	b.w	80082cc <_malloc_r>
 8008394:	b922      	cbnz	r2, 80083a0 <_realloc_r+0x20>
 8008396:	f7ff ff4d 	bl	8008234 <_free_r>
 800839a:	4625      	mov	r5, r4
 800839c:	4628      	mov	r0, r5
 800839e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083a0:	f000 f826 	bl	80083f0 <_malloc_usable_size_r>
 80083a4:	42a0      	cmp	r0, r4
 80083a6:	d20f      	bcs.n	80083c8 <_realloc_r+0x48>
 80083a8:	4621      	mov	r1, r4
 80083aa:	4638      	mov	r0, r7
 80083ac:	f7ff ff8e 	bl	80082cc <_malloc_r>
 80083b0:	4605      	mov	r5, r0
 80083b2:	2800      	cmp	r0, #0
 80083b4:	d0f2      	beq.n	800839c <_realloc_r+0x1c>
 80083b6:	4631      	mov	r1, r6
 80083b8:	4622      	mov	r2, r4
 80083ba:	f7ff fc05 	bl	8007bc8 <memcpy>
 80083be:	4631      	mov	r1, r6
 80083c0:	4638      	mov	r0, r7
 80083c2:	f7ff ff37 	bl	8008234 <_free_r>
 80083c6:	e7e9      	b.n	800839c <_realloc_r+0x1c>
 80083c8:	4635      	mov	r5, r6
 80083ca:	e7e7      	b.n	800839c <_realloc_r+0x1c>

080083cc <_sbrk_r>:
 80083cc:	b538      	push	{r3, r4, r5, lr}
 80083ce:	2300      	movs	r3, #0
 80083d0:	4c05      	ldr	r4, [pc, #20]	; (80083e8 <_sbrk_r+0x1c>)
 80083d2:	4605      	mov	r5, r0
 80083d4:	4608      	mov	r0, r1
 80083d6:	6023      	str	r3, [r4, #0]
 80083d8:	f7fa ffbc 	bl	8003354 <_sbrk>
 80083dc:	1c43      	adds	r3, r0, #1
 80083de:	d102      	bne.n	80083e6 <_sbrk_r+0x1a>
 80083e0:	6823      	ldr	r3, [r4, #0]
 80083e2:	b103      	cbz	r3, 80083e6 <_sbrk_r+0x1a>
 80083e4:	602b      	str	r3, [r5, #0]
 80083e6:	bd38      	pop	{r3, r4, r5, pc}
 80083e8:	200035d8 	.word	0x200035d8

080083ec <__malloc_lock>:
 80083ec:	4770      	bx	lr

080083ee <__malloc_unlock>:
 80083ee:	4770      	bx	lr

080083f0 <_malloc_usable_size_r>:
 80083f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083f4:	1f18      	subs	r0, r3, #4
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	bfbc      	itt	lt
 80083fa:	580b      	ldrlt	r3, [r1, r0]
 80083fc:	18c0      	addlt	r0, r0, r3
 80083fe:	4770      	bx	lr

08008400 <_init>:
 8008400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008402:	bf00      	nop
 8008404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008406:	bc08      	pop	{r3}
 8008408:	469e      	mov	lr, r3
 800840a:	4770      	bx	lr

0800840c <_fini>:
 800840c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800840e:	bf00      	nop
 8008410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008412:	bc08      	pop	{r3}
 8008414:	469e      	mov	lr, r3
 8008416:	4770      	bx	lr
