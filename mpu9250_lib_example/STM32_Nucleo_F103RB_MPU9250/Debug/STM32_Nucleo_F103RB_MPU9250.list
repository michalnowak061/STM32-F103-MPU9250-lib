
STM32_Nucleo_F103RB_MPU9250.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c430  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  0800c540  0800c540  0001c540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9ec  0800c9ec  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  0800c9ec  0800c9ec  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c9ec  0800c9ec  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9ec  0800c9ec  0001c9ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9f0  0800c9f0  0001c9f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800c9f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003564  200000b4  0800caa8  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003618  0800caa8  00023618  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000144e4  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003235  00000000  00000000  000345c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f80  00000000  00000000  000377f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000df8  00000000  00000000  00038778  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016751  00000000  00000000  00039570  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ea93  00000000  00000000  0004fcc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00076a5f  00000000  00000000  0005e754  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d51b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045ec  00000000  00000000  000d5230  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000b4 	.word	0x200000b4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c528 	.word	0x0800c528

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000b8 	.word	0x200000b8
 800014c:	0800c528 	.word	0x0800c528

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	d1ed      	bne.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <__gesf2>:
 8000f84:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f88:	e006      	b.n	8000f98 <__cmpsf2+0x4>
 8000f8a:	bf00      	nop

08000f8c <__lesf2>:
 8000f8c:	f04f 0c01 	mov.w	ip, #1
 8000f90:	e002      	b.n	8000f98 <__cmpsf2+0x4>
 8000f92:	bf00      	nop

08000f94 <__cmpsf2>:
 8000f94:	f04f 0c01 	mov.w	ip, #1
 8000f98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fa4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fa8:	bf18      	it	ne
 8000faa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fae:	d011      	beq.n	8000fd4 <__cmpsf2+0x40>
 8000fb0:	b001      	add	sp, #4
 8000fb2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fb6:	bf18      	it	ne
 8000fb8:	ea90 0f01 	teqne	r0, r1
 8000fbc:	bf58      	it	pl
 8000fbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fc2:	bf88      	it	hi
 8000fc4:	17c8      	asrhi	r0, r1, #31
 8000fc6:	bf38      	it	cc
 8000fc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000fcc:	bf18      	it	ne
 8000fce:	f040 0001 	orrne.w	r0, r0, #1
 8000fd2:	4770      	bx	lr
 8000fd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fd8:	d102      	bne.n	8000fe0 <__cmpsf2+0x4c>
 8000fda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000fde:	d105      	bne.n	8000fec <__cmpsf2+0x58>
 8000fe0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fe4:	d1e4      	bne.n	8000fb0 <__cmpsf2+0x1c>
 8000fe6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000fea:	d0e1      	beq.n	8000fb0 <__cmpsf2+0x1c>
 8000fec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_cfrcmple>:
 8000ff4:	4684      	mov	ip, r0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	4661      	mov	r1, ip
 8000ffa:	e7ff      	b.n	8000ffc <__aeabi_cfcmpeq>

08000ffc <__aeabi_cfcmpeq>:
 8000ffc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ffe:	f7ff ffc9 	bl	8000f94 <__cmpsf2>
 8001002:	2800      	cmp	r0, #0
 8001004:	bf48      	it	mi
 8001006:	f110 0f00 	cmnmi.w	r0, #0
 800100a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800100c <__aeabi_fcmpeq>:
 800100c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001010:	f7ff fff4 	bl	8000ffc <__aeabi_cfcmpeq>
 8001014:	bf0c      	ite	eq
 8001016:	2001      	moveq	r0, #1
 8001018:	2000      	movne	r0, #0
 800101a:	f85d fb08 	ldr.w	pc, [sp], #8
 800101e:	bf00      	nop

08001020 <__aeabi_fcmplt>:
 8001020:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001024:	f7ff ffea 	bl	8000ffc <__aeabi_cfcmpeq>
 8001028:	bf34      	ite	cc
 800102a:	2001      	movcc	r0, #1
 800102c:	2000      	movcs	r0, #0
 800102e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001032:	bf00      	nop

08001034 <__aeabi_fcmple>:
 8001034:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001038:	f7ff ffe0 	bl	8000ffc <__aeabi_cfcmpeq>
 800103c:	bf94      	ite	ls
 800103e:	2001      	movls	r0, #1
 8001040:	2000      	movhi	r0, #0
 8001042:	f85d fb08 	ldr.w	pc, [sp], #8
 8001046:	bf00      	nop

08001048 <__aeabi_fcmpge>:
 8001048:	f84d ed08 	str.w	lr, [sp, #-8]!
 800104c:	f7ff ffd2 	bl	8000ff4 <__aeabi_cfrcmple>
 8001050:	bf94      	ite	ls
 8001052:	2001      	movls	r0, #1
 8001054:	2000      	movhi	r0, #0
 8001056:	f85d fb08 	ldr.w	pc, [sp], #8
 800105a:	bf00      	nop

0800105c <__aeabi_fcmpgt>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff ffc8 	bl	8000ff4 <__aeabi_cfrcmple>
 8001064:	bf34      	ite	cc
 8001066:	2001      	movcc	r0, #1
 8001068:	2000      	movcs	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmpun>:
 8001070:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001074:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001078:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800107c:	d102      	bne.n	8001084 <__aeabi_fcmpun+0x14>
 800107e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001082:	d108      	bne.n	8001096 <__aeabi_fcmpun+0x26>
 8001084:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001088:	d102      	bne.n	8001090 <__aeabi_fcmpun+0x20>
 800108a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108e:	d102      	bne.n	8001096 <__aeabi_fcmpun+0x26>
 8001090:	f04f 0000 	mov.w	r0, #0
 8001094:	4770      	bx	lr
 8001096:	f04f 0001 	mov.w	r0, #1
 800109a:	4770      	bx	lr

0800109c <__aeabi_f2iz>:
 800109c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010a4:	d30f      	bcc.n	80010c6 <__aeabi_f2iz+0x2a>
 80010a6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010aa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ae:	d90d      	bls.n	80010cc <__aeabi_f2iz+0x30>
 80010b0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010b8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010bc:	fa23 f002 	lsr.w	r0, r3, r2
 80010c0:	bf18      	it	ne
 80010c2:	4240      	negne	r0, r0
 80010c4:	4770      	bx	lr
 80010c6:	f04f 0000 	mov.w	r0, #0
 80010ca:	4770      	bx	lr
 80010cc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010d0:	d101      	bne.n	80010d6 <__aeabi_f2iz+0x3a>
 80010d2:	0242      	lsls	r2, r0, #9
 80010d4:	d105      	bne.n	80010e2 <__aeabi_f2iz+0x46>
 80010d6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 80010da:	bf08      	it	eq
 80010dc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80010e0:	4770      	bx	lr
 80010e2:	f04f 0000 	mov.w	r0, #0
 80010e6:	4770      	bx	lr

080010e8 <MadgwickAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float beta, float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz, float dt) {
 80010e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010ea:	b0ad      	sub	sp, #180	; 0xb4
 80010ec:	af04      	add	r7, sp, #16
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
 80010f4:	603b      	str	r3, [r7, #0]

	float sampleFreq = 1 /dt;
 80010f6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80010fa:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80010fe:	f7ff fea5 	bl	8000e4c <__aeabi_fdiv>
 8001102:	4603      	mov	r3, r0
 8001104:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	float recipNorm = 0;
 8001108:	f04f 0300 	mov.w	r3, #0
 800110c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	float s0 = 0, s1 = 0, s2 = 0, s3 = 0;
 8001110:	f04f 0300 	mov.w	r3, #0
 8001114:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001118:	f04f 0300 	mov.w	r3, #0
 800111c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001120:	f04f 0300 	mov.w	r3, #0
 8001124:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001126:	f04f 0300 	mov.w	r3, #0
 800112a:	67bb      	str	r3, [r7, #120]	; 0x78
	float qDot1 = 0, qDot2 = 0, qDot3 = 0, qDot4 = 0;
 800112c:	f04f 0300 	mov.w	r3, #0
 8001130:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800113c:	f04f 0300 	mov.w	r3, #0
 8001140:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001144:	f04f 0300 	mov.w	r3, #0
 8001148:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	float hx = 0, hy = 0;
 800114c:	f04f 0300 	mov.w	r3, #0
 8001150:	677b      	str	r3, [r7, #116]	; 0x74
 8001152:	f04f 0300 	mov.w	r3, #0
 8001156:	673b      	str	r3, [r7, #112]	; 0x70
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 8001158:	f04f 0100 	mov.w	r1, #0
 800115c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001160:	f7ff ff54 	bl	800100c <__aeabi_fcmpeq>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d025      	beq.n	80011b6 <MadgwickAHRSupdate+0xce>
 800116a:	f04f 0100 	mov.w	r1, #0
 800116e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001172:	f7ff ff4b 	bl	800100c <__aeabi_fcmpeq>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d01c      	beq.n	80011b6 <MadgwickAHRSupdate+0xce>
 800117c:	f04f 0100 	mov.w	r1, #0
 8001180:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8001184:	f7ff ff42 	bl	800100c <__aeabi_fcmpeq>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d013      	beq.n	80011b6 <MadgwickAHRSupdate+0xce>
		MadgwickAHRSupdateIMU(beta, gx, gy, gz, ax, ay, az, dt);
 800118e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001192:	9303      	str	r3, [sp, #12]
 8001194:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	68b9      	ldr	r1, [r7, #8]
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	f001 f95b 	bl	8002468 <MadgwickAHRSupdateIMU>
		return;
 80011b2:	f001 b94d 	b.w	8002450 <MadgwickAHRSupdate+0x1368>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80011b6:	4bb2      	ldr	r3, [pc, #712]	; (8001480 <MadgwickAHRSupdate+0x398>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80011be:	68b9      	ldr	r1, [r7, #8]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fd8f 	bl	8000ce4 <__aeabi_fmul>
 80011c6:	4603      	mov	r3, r0
 80011c8:	461c      	mov	r4, r3
 80011ca:	4bae      	ldr	r3, [pc, #696]	; (8001484 <MadgwickAHRSupdate+0x39c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff fd87 	bl	8000ce4 <__aeabi_fmul>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4619      	mov	r1, r3
 80011da:	4620      	mov	r0, r4
 80011dc:	f7ff fc78 	bl	8000ad0 <__aeabi_fsub>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461c      	mov	r4, r3
 80011e4:	4ba8      	ldr	r3, [pc, #672]	; (8001488 <MadgwickAHRSupdate+0x3a0>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6839      	ldr	r1, [r7, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff fd7a 	bl	8000ce4 <__aeabi_fmul>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4619      	mov	r1, r3
 80011f4:	4620      	mov	r0, r4
 80011f6:	f7ff fc6b 	bl	8000ad0 <__aeabi_fsub>
 80011fa:	4603      	mov	r3, r0
 80011fc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fd6f 	bl	8000ce4 <__aeabi_fmul>
 8001206:	4603      	mov	r3, r0
 8001208:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800120c:	4b9f      	ldr	r3, [pc, #636]	; (800148c <MadgwickAHRSupdate+0x3a4>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68b9      	ldr	r1, [r7, #8]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fd66 	bl	8000ce4 <__aeabi_fmul>
 8001218:	4603      	mov	r3, r0
 800121a:	461c      	mov	r4, r3
 800121c:	4b99      	ldr	r3, [pc, #612]	; (8001484 <MadgwickAHRSupdate+0x39c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6839      	ldr	r1, [r7, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fd5e 	bl	8000ce4 <__aeabi_fmul>
 8001228:	4603      	mov	r3, r0
 800122a:	4619      	mov	r1, r3
 800122c:	4620      	mov	r0, r4
 800122e:	f7ff fc51 	bl	8000ad4 <__addsf3>
 8001232:	4603      	mov	r3, r0
 8001234:	461c      	mov	r4, r3
 8001236:	4b94      	ldr	r3, [pc, #592]	; (8001488 <MadgwickAHRSupdate+0x3a0>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	6879      	ldr	r1, [r7, #4]
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff fd51 	bl	8000ce4 <__aeabi_fmul>
 8001242:	4603      	mov	r3, r0
 8001244:	4619      	mov	r1, r3
 8001246:	4620      	mov	r0, r4
 8001248:	f7ff fc42 	bl	8000ad0 <__aeabi_fsub>
 800124c:	4603      	mov	r3, r0
 800124e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fd46 	bl	8000ce4 <__aeabi_fmul>
 8001258:	4603      	mov	r3, r0
 800125a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800125e:	4b8b      	ldr	r3, [pc, #556]	; (800148c <MadgwickAHRSupdate+0x3a4>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fd3d 	bl	8000ce4 <__aeabi_fmul>
 800126a:	4603      	mov	r3, r0
 800126c:	461c      	mov	r4, r3
 800126e:	4b84      	ldr	r3, [pc, #528]	; (8001480 <MadgwickAHRSupdate+0x398>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	6839      	ldr	r1, [r7, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fd35 	bl	8000ce4 <__aeabi_fmul>
 800127a:	4603      	mov	r3, r0
 800127c:	4619      	mov	r1, r3
 800127e:	4620      	mov	r0, r4
 8001280:	f7ff fc26 	bl	8000ad0 <__aeabi_fsub>
 8001284:	4603      	mov	r3, r0
 8001286:	461c      	mov	r4, r3
 8001288:	4b7f      	ldr	r3, [pc, #508]	; (8001488 <MadgwickAHRSupdate+0x3a0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fd28 	bl	8000ce4 <__aeabi_fmul>
 8001294:	4603      	mov	r3, r0
 8001296:	4619      	mov	r1, r3
 8001298:	4620      	mov	r0, r4
 800129a:	f7ff fc1b 	bl	8000ad4 <__addsf3>
 800129e:	4603      	mov	r3, r0
 80012a0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fd1d 	bl	8000ce4 <__aeabi_fmul>
 80012aa:	4603      	mov	r3, r0
 80012ac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80012b0:	4b76      	ldr	r3, [pc, #472]	; (800148c <MadgwickAHRSupdate+0x3a4>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6839      	ldr	r1, [r7, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fd14 	bl	8000ce4 <__aeabi_fmul>
 80012bc:	4603      	mov	r3, r0
 80012be:	461c      	mov	r4, r3
 80012c0:	4b6f      	ldr	r3, [pc, #444]	; (8001480 <MadgwickAHRSupdate+0x398>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fd0c 	bl	8000ce4 <__aeabi_fmul>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4619      	mov	r1, r3
 80012d0:	4620      	mov	r0, r4
 80012d2:	f7ff fbff 	bl	8000ad4 <__addsf3>
 80012d6:	4603      	mov	r3, r0
 80012d8:	461c      	mov	r4, r3
 80012da:	4b6a      	ldr	r3, [pc, #424]	; (8001484 <MadgwickAHRSupdate+0x39c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68b9      	ldr	r1, [r7, #8]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fcff 	bl	8000ce4 <__aeabi_fmul>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4619      	mov	r1, r3
 80012ea:	4620      	mov	r0, r4
 80012ec:	f7ff fbf0 	bl	8000ad0 <__aeabi_fsub>
 80012f0:	4603      	mov	r3, r0
 80012f2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fcf4 	bl	8000ce4 <__aeabi_fmul>
 80012fc:	4603      	mov	r3, r0
 80012fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001302:	f04f 0100 	mov.w	r1, #0
 8001306:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800130a:	f7ff fe7f 	bl	800100c <__aeabi_fcmpeq>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d012      	beq.n	800133a <MadgwickAHRSupdate+0x252>
 8001314:	f04f 0100 	mov.w	r1, #0
 8001318:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800131c:	f7ff fe76 	bl	800100c <__aeabi_fcmpeq>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d009      	beq.n	800133a <MadgwickAHRSupdate+0x252>
 8001326:	f04f 0100 	mov.w	r1, #0
 800132a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800132e:	f7ff fe6d 	bl	800100c <__aeabi_fcmpeq>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	f040 87c4 	bne.w	80022c2 <MadgwickAHRSupdate+0x11da>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800133a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800133e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001342:	f7ff fccf 	bl	8000ce4 <__aeabi_fmul>
 8001346:	4603      	mov	r3, r0
 8001348:	461c      	mov	r4, r3
 800134a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800134e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8001352:	f7ff fcc7 	bl	8000ce4 <__aeabi_fmul>
 8001356:	4603      	mov	r3, r0
 8001358:	4619      	mov	r1, r3
 800135a:	4620      	mov	r0, r4
 800135c:	f7ff fbba 	bl	8000ad4 <__addsf3>
 8001360:	4603      	mov	r3, r0
 8001362:	461c      	mov	r4, r3
 8001364:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001368:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800136c:	f7ff fcba 	bl	8000ce4 <__aeabi_fmul>
 8001370:	4603      	mov	r3, r0
 8001372:	4619      	mov	r1, r3
 8001374:	4620      	mov	r0, r4
 8001376:	f7ff fbad 	bl	8000ad4 <__addsf3>
 800137a:	4603      	mov	r3, r0
 800137c:	4618      	mov	r0, r3
 800137e:	f001 fc4f 	bl	8002c20 <invSqrt>
 8001382:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		ax *= recipNorm;
 8001386:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800138a:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800138e:	f7ff fca9 	bl	8000ce4 <__aeabi_fmul>
 8001392:	4603      	mov	r3, r0
 8001394:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		ay *= recipNorm;
 8001398:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800139c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80013a0:	f7ff fca0 	bl	8000ce4 <__aeabi_fmul>
 80013a4:	4603      	mov	r3, r0
 80013a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		az *= recipNorm;   
 80013aa:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80013ae:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80013b2:	f7ff fc97 	bl	8000ce4 <__aeabi_fmul>
 80013b6:	4603      	mov	r3, r0
 80013b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 80013bc:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80013c0:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80013c4:	f7ff fc8e 	bl	8000ce4 <__aeabi_fmul>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461c      	mov	r4, r3
 80013cc:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80013d0:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80013d4:	f7ff fc86 	bl	8000ce4 <__aeabi_fmul>
 80013d8:	4603      	mov	r3, r0
 80013da:	4619      	mov	r1, r3
 80013dc:	4620      	mov	r0, r4
 80013de:	f7ff fb79 	bl	8000ad4 <__addsf3>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461c      	mov	r4, r3
 80013e6:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80013ea:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80013ee:	f7ff fc79 	bl	8000ce4 <__aeabi_fmul>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4619      	mov	r1, r3
 80013f6:	4620      	mov	r0, r4
 80013f8:	f7ff fb6c 	bl	8000ad4 <__addsf3>
 80013fc:	4603      	mov	r3, r0
 80013fe:	4618      	mov	r0, r3
 8001400:	f001 fc0e 	bl	8002c20 <invSqrt>
 8001404:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		mx *= recipNorm;
 8001408:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800140c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001410:	f7ff fc68 	bl	8000ce4 <__aeabi_fmul>
 8001414:	4603      	mov	r3, r0
 8001416:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		my *= recipNorm;
 800141a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800141e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001422:	f7ff fc5f 	bl	8000ce4 <__aeabi_fmul>
 8001426:	4603      	mov	r3, r0
 8001428:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
		mz *= recipNorm;
 800142c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001430:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8001434:	f7ff fc56 	bl	8000ce4 <__aeabi_fmul>
 8001438:	4603      	mov	r3, r0
 800143a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 800143e:	4b13      	ldr	r3, [pc, #76]	; (800148c <MadgwickAHRSupdate+0x3a4>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4619      	mov	r1, r3
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff fb45 	bl	8000ad4 <__addsf3>
 800144a:	4603      	mov	r3, r0
 800144c:	4619      	mov	r1, r3
 800144e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001452:	f7ff fc47 	bl	8000ce4 <__aeabi_fmul>
 8001456:	4603      	mov	r3, r0
 8001458:	66fb      	str	r3, [r7, #108]	; 0x6c
		_2q0my = 2.0f * q0 * my;
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <MadgwickAHRSupdate+0x3a4>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4619      	mov	r1, r3
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff fb37 	bl	8000ad4 <__addsf3>
 8001466:	4603      	mov	r3, r0
 8001468:	4619      	mov	r1, r3
 800146a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800146e:	f7ff fc39 	bl	8000ce4 <__aeabi_fmul>
 8001472:	4603      	mov	r3, r0
 8001474:	66bb      	str	r3, [r7, #104]	; 0x68
		_2q0mz = 2.0f * q0 * mz;
 8001476:	4b05      	ldr	r3, [pc, #20]	; (800148c <MadgwickAHRSupdate+0x3a4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4619      	mov	r1, r3
 800147c:	4618      	mov	r0, r3
 800147e:	e007      	b.n	8001490 <MadgwickAHRSupdate+0x3a8>
 8001480:	200000d0 	.word	0x200000d0
 8001484:	200000d4 	.word	0x200000d4
 8001488:	200000d8 	.word	0x200000d8
 800148c:	20000000 	.word	0x20000000
 8001490:	f7ff fb20 	bl	8000ad4 <__addsf3>
 8001494:	4603      	mov	r3, r0
 8001496:	4619      	mov	r1, r3
 8001498:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800149c:	f7ff fc22 	bl	8000ce4 <__aeabi_fmul>
 80014a0:	4603      	mov	r3, r0
 80014a2:	667b      	str	r3, [r7, #100]	; 0x64
		_2q1mx = 2.0f * q1 * mx;
 80014a4:	4b96      	ldr	r3, [pc, #600]	; (8001700 <MadgwickAHRSupdate+0x618>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4619      	mov	r1, r3
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fb12 	bl	8000ad4 <__addsf3>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4619      	mov	r1, r3
 80014b4:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80014b8:	f7ff fc14 	bl	8000ce4 <__aeabi_fmul>
 80014bc:	4603      	mov	r3, r0
 80014be:	663b      	str	r3, [r7, #96]	; 0x60
		_2q0 = 2.0f * q0;
 80014c0:	4b90      	ldr	r3, [pc, #576]	; (8001704 <MadgwickAHRSupdate+0x61c>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4619      	mov	r1, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fb04 	bl	8000ad4 <__addsf3>
 80014cc:	4603      	mov	r3, r0
 80014ce:	65fb      	str	r3, [r7, #92]	; 0x5c
		_2q1 = 2.0f * q1;
 80014d0:	4b8b      	ldr	r3, [pc, #556]	; (8001700 <MadgwickAHRSupdate+0x618>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4619      	mov	r1, r3
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fafc 	bl	8000ad4 <__addsf3>
 80014dc:	4603      	mov	r3, r0
 80014de:	65bb      	str	r3, [r7, #88]	; 0x58
		_2q2 = 2.0f * q2;
 80014e0:	4b89      	ldr	r3, [pc, #548]	; (8001708 <MadgwickAHRSupdate+0x620>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff faf4 	bl	8000ad4 <__addsf3>
 80014ec:	4603      	mov	r3, r0
 80014ee:	657b      	str	r3, [r7, #84]	; 0x54
		_2q3 = 2.0f * q3;
 80014f0:	4b86      	ldr	r3, [pc, #536]	; (800170c <MadgwickAHRSupdate+0x624>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4619      	mov	r1, r3
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff faec 	bl	8000ad4 <__addsf3>
 80014fc:	4603      	mov	r3, r0
 80014fe:	653b      	str	r3, [r7, #80]	; 0x50
		_2q0q2 = 2.0f * q0 * q2;
 8001500:	4b80      	ldr	r3, [pc, #512]	; (8001704 <MadgwickAHRSupdate+0x61c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff fae4 	bl	8000ad4 <__addsf3>
 800150c:	4603      	mov	r3, r0
 800150e:	461a      	mov	r2, r3
 8001510:	4b7d      	ldr	r3, [pc, #500]	; (8001708 <MadgwickAHRSupdate+0x620>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	4610      	mov	r0, r2
 8001518:	f7ff fbe4 	bl	8000ce4 <__aeabi_fmul>
 800151c:	4603      	mov	r3, r0
 800151e:	64fb      	str	r3, [r7, #76]	; 0x4c
		_2q2q3 = 2.0f * q2 * q3;
 8001520:	4b79      	ldr	r3, [pc, #484]	; (8001708 <MadgwickAHRSupdate+0x620>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fad4 	bl	8000ad4 <__addsf3>
 800152c:	4603      	mov	r3, r0
 800152e:	461a      	mov	r2, r3
 8001530:	4b76      	ldr	r3, [pc, #472]	; (800170c <MadgwickAHRSupdate+0x624>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	4610      	mov	r0, r2
 8001538:	f7ff fbd4 	bl	8000ce4 <__aeabi_fmul>
 800153c:	4603      	mov	r3, r0
 800153e:	64bb      	str	r3, [r7, #72]	; 0x48
		q0q0 = q0 * q0;
 8001540:	4b70      	ldr	r3, [pc, #448]	; (8001704 <MadgwickAHRSupdate+0x61c>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b6f      	ldr	r3, [pc, #444]	; (8001704 <MadgwickAHRSupdate+0x61c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4619      	mov	r1, r3
 800154a:	4610      	mov	r0, r2
 800154c:	f7ff fbca 	bl	8000ce4 <__aeabi_fmul>
 8001550:	4603      	mov	r3, r0
 8001552:	647b      	str	r3, [r7, #68]	; 0x44
		q0q1 = q0 * q1;
 8001554:	4b6b      	ldr	r3, [pc, #428]	; (8001704 <MadgwickAHRSupdate+0x61c>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b69      	ldr	r3, [pc, #420]	; (8001700 <MadgwickAHRSupdate+0x618>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4619      	mov	r1, r3
 800155e:	4610      	mov	r0, r2
 8001560:	f7ff fbc0 	bl	8000ce4 <__aeabi_fmul>
 8001564:	4603      	mov	r3, r0
 8001566:	643b      	str	r3, [r7, #64]	; 0x40
		q0q2 = q0 * q2;
 8001568:	4b66      	ldr	r3, [pc, #408]	; (8001704 <MadgwickAHRSupdate+0x61c>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b66      	ldr	r3, [pc, #408]	; (8001708 <MadgwickAHRSupdate+0x620>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	4610      	mov	r0, r2
 8001574:	f7ff fbb6 	bl	8000ce4 <__aeabi_fmul>
 8001578:	4603      	mov	r3, r0
 800157a:	63fb      	str	r3, [r7, #60]	; 0x3c
		q0q3 = q0 * q3;
 800157c:	4b61      	ldr	r3, [pc, #388]	; (8001704 <MadgwickAHRSupdate+0x61c>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b62      	ldr	r3, [pc, #392]	; (800170c <MadgwickAHRSupdate+0x624>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	4610      	mov	r0, r2
 8001588:	f7ff fbac 	bl	8000ce4 <__aeabi_fmul>
 800158c:	4603      	mov	r3, r0
 800158e:	63bb      	str	r3, [r7, #56]	; 0x38
		q1q1 = q1 * q1;
 8001590:	4b5b      	ldr	r3, [pc, #364]	; (8001700 <MadgwickAHRSupdate+0x618>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b5a      	ldr	r3, [pc, #360]	; (8001700 <MadgwickAHRSupdate+0x618>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	4610      	mov	r0, r2
 800159c:	f7ff fba2 	bl	8000ce4 <__aeabi_fmul>
 80015a0:	4603      	mov	r3, r0
 80015a2:	637b      	str	r3, [r7, #52]	; 0x34
		q1q2 = q1 * q2;
 80015a4:	4b56      	ldr	r3, [pc, #344]	; (8001700 <MadgwickAHRSupdate+0x618>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b57      	ldr	r3, [pc, #348]	; (8001708 <MadgwickAHRSupdate+0x620>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	4610      	mov	r0, r2
 80015b0:	f7ff fb98 	bl	8000ce4 <__aeabi_fmul>
 80015b4:	4603      	mov	r3, r0
 80015b6:	633b      	str	r3, [r7, #48]	; 0x30
		q1q3 = q1 * q3;
 80015b8:	4b51      	ldr	r3, [pc, #324]	; (8001700 <MadgwickAHRSupdate+0x618>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b53      	ldr	r3, [pc, #332]	; (800170c <MadgwickAHRSupdate+0x624>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	4610      	mov	r0, r2
 80015c4:	f7ff fb8e 	bl	8000ce4 <__aeabi_fmul>
 80015c8:	4603      	mov	r3, r0
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
		q2q2 = q2 * q2;
 80015cc:	4b4e      	ldr	r3, [pc, #312]	; (8001708 <MadgwickAHRSupdate+0x620>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b4d      	ldr	r3, [pc, #308]	; (8001708 <MadgwickAHRSupdate+0x620>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	4610      	mov	r0, r2
 80015d8:	f7ff fb84 	bl	8000ce4 <__aeabi_fmul>
 80015dc:	4603      	mov	r3, r0
 80015de:	62bb      	str	r3, [r7, #40]	; 0x28
		q2q3 = q2 * q3;
 80015e0:	4b49      	ldr	r3, [pc, #292]	; (8001708 <MadgwickAHRSupdate+0x620>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b49      	ldr	r3, [pc, #292]	; (800170c <MadgwickAHRSupdate+0x624>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	4610      	mov	r0, r2
 80015ec:	f7ff fb7a 	bl	8000ce4 <__aeabi_fmul>
 80015f0:	4603      	mov	r3, r0
 80015f2:	627b      	str	r3, [r7, #36]	; 0x24
		q3q3 = q3 * q3;
 80015f4:	4b45      	ldr	r3, [pc, #276]	; (800170c <MadgwickAHRSupdate+0x624>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b44      	ldr	r3, [pc, #272]	; (800170c <MadgwickAHRSupdate+0x624>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	4610      	mov	r0, r2
 8001600:	f7ff fb70 	bl	8000ce4 <__aeabi_fmul>
 8001604:	4603      	mov	r3, r0
 8001606:	623b      	str	r3, [r7, #32]

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8001608:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800160a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800160e:	f7ff fb69 	bl	8000ce4 <__aeabi_fmul>
 8001612:	4603      	mov	r3, r0
 8001614:	461c      	mov	r4, r3
 8001616:	4b3d      	ldr	r3, [pc, #244]	; (800170c <MadgwickAHRSupdate+0x624>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fb61 	bl	8000ce4 <__aeabi_fmul>
 8001622:	4603      	mov	r3, r0
 8001624:	4619      	mov	r1, r3
 8001626:	4620      	mov	r0, r4
 8001628:	f7ff fa52 	bl	8000ad0 <__aeabi_fsub>
 800162c:	4603      	mov	r3, r0
 800162e:	461c      	mov	r4, r3
 8001630:	4b35      	ldr	r3, [pc, #212]	; (8001708 <MadgwickAHRSupdate+0x620>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fb54 	bl	8000ce4 <__aeabi_fmul>
 800163c:	4603      	mov	r3, r0
 800163e:	4619      	mov	r1, r3
 8001640:	4620      	mov	r0, r4
 8001642:	f7ff fa47 	bl	8000ad4 <__addsf3>
 8001646:	4603      	mov	r3, r0
 8001648:	461c      	mov	r4, r3
 800164a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800164c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001650:	f7ff fb48 	bl	8000ce4 <__aeabi_fmul>
 8001654:	4603      	mov	r3, r0
 8001656:	4619      	mov	r1, r3
 8001658:	4620      	mov	r0, r4
 800165a:	f7ff fa3b 	bl	8000ad4 <__addsf3>
 800165e:	4603      	mov	r3, r0
 8001660:	461c      	mov	r4, r3
 8001662:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001666:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001668:	f7ff fb3c 	bl	8000ce4 <__aeabi_fmul>
 800166c:	4603      	mov	r3, r0
 800166e:	461a      	mov	r2, r3
 8001670:	4b25      	ldr	r3, [pc, #148]	; (8001708 <MadgwickAHRSupdate+0x620>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4619      	mov	r1, r3
 8001676:	4610      	mov	r0, r2
 8001678:	f7ff fb34 	bl	8000ce4 <__aeabi_fmul>
 800167c:	4603      	mov	r3, r0
 800167e:	4619      	mov	r1, r3
 8001680:	4620      	mov	r0, r4
 8001682:	f7ff fa27 	bl	8000ad4 <__addsf3>
 8001686:	4603      	mov	r3, r0
 8001688:	461c      	mov	r4, r3
 800168a:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800168e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001690:	f7ff fb28 	bl	8000ce4 <__aeabi_fmul>
 8001694:	4603      	mov	r3, r0
 8001696:	461a      	mov	r2, r3
 8001698:	4b1c      	ldr	r3, [pc, #112]	; (800170c <MadgwickAHRSupdate+0x624>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4619      	mov	r1, r3
 800169e:	4610      	mov	r0, r2
 80016a0:	f7ff fb20 	bl	8000ce4 <__aeabi_fmul>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4619      	mov	r1, r3
 80016a8:	4620      	mov	r0, r4
 80016aa:	f7ff fa13 	bl	8000ad4 <__addsf3>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461c      	mov	r4, r3
 80016b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80016b4:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80016b8:	f7ff fb14 	bl	8000ce4 <__aeabi_fmul>
 80016bc:	4603      	mov	r3, r0
 80016be:	4619      	mov	r1, r3
 80016c0:	4620      	mov	r0, r4
 80016c2:	f7ff fa05 	bl	8000ad0 <__aeabi_fsub>
 80016c6:	4603      	mov	r3, r0
 80016c8:	461c      	mov	r4, r3
 80016ca:	6a39      	ldr	r1, [r7, #32]
 80016cc:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80016d0:	f7ff fb08 	bl	8000ce4 <__aeabi_fmul>
 80016d4:	4603      	mov	r3, r0
 80016d6:	4619      	mov	r1, r3
 80016d8:	4620      	mov	r0, r4
 80016da:	f7ff f9f9 	bl	8000ad0 <__aeabi_fsub>
 80016de:	4603      	mov	r3, r0
 80016e0:	677b      	str	r3, [r7, #116]	; 0x74
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <MadgwickAHRSupdate+0x624>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fafb 	bl	8000ce4 <__aeabi_fmul>
 80016ee:	4603      	mov	r3, r0
 80016f0:	461c      	mov	r4, r3
 80016f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80016f4:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80016f8:	f7ff faf4 	bl	8000ce4 <__aeabi_fmul>
 80016fc:	4603      	mov	r3, r0
 80016fe:	e007      	b.n	8001710 <MadgwickAHRSupdate+0x628>
 8001700:	200000d0 	.word	0x200000d0
 8001704:	20000000 	.word	0x20000000
 8001708:	200000d4 	.word	0x200000d4
 800170c:	200000d8 	.word	0x200000d8
 8001710:	4619      	mov	r1, r3
 8001712:	4620      	mov	r0, r4
 8001714:	f7ff f9de 	bl	8000ad4 <__addsf3>
 8001718:	4603      	mov	r3, r0
 800171a:	461c      	mov	r4, r3
 800171c:	4ba2      	ldr	r3, [pc, #648]	; (80019a8 <MadgwickAHRSupdate+0x8c0>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fade 	bl	8000ce4 <__aeabi_fmul>
 8001728:	4603      	mov	r3, r0
 800172a:	4619      	mov	r1, r3
 800172c:	4620      	mov	r0, r4
 800172e:	f7ff f9cf 	bl	8000ad0 <__aeabi_fsub>
 8001732:	4603      	mov	r3, r0
 8001734:	461c      	mov	r4, r3
 8001736:	4b9d      	ldr	r3, [pc, #628]	; (80019ac <MadgwickAHRSupdate+0x8c4>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff fad1 	bl	8000ce4 <__aeabi_fmul>
 8001742:	4603      	mov	r3, r0
 8001744:	4619      	mov	r1, r3
 8001746:	4620      	mov	r0, r4
 8001748:	f7ff f9c4 	bl	8000ad4 <__addsf3>
 800174c:	4603      	mov	r3, r0
 800174e:	461c      	mov	r4, r3
 8001750:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001752:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001756:	f7ff fac5 	bl	8000ce4 <__aeabi_fmul>
 800175a:	4603      	mov	r3, r0
 800175c:	4619      	mov	r1, r3
 800175e:	4620      	mov	r0, r4
 8001760:	f7ff f9b6 	bl	8000ad0 <__aeabi_fsub>
 8001764:	4603      	mov	r3, r0
 8001766:	461c      	mov	r4, r3
 8001768:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800176a:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 800176e:	f7ff fab9 	bl	8000ce4 <__aeabi_fmul>
 8001772:	4603      	mov	r3, r0
 8001774:	4619      	mov	r1, r3
 8001776:	4620      	mov	r0, r4
 8001778:	f7ff f9ac 	bl	8000ad4 <__addsf3>
 800177c:	4603      	mov	r3, r0
 800177e:	461c      	mov	r4, r3
 8001780:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8001784:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001786:	f7ff faad 	bl	8000ce4 <__aeabi_fmul>
 800178a:	4603      	mov	r3, r0
 800178c:	461a      	mov	r2, r3
 800178e:	4b88      	ldr	r3, [pc, #544]	; (80019b0 <MadgwickAHRSupdate+0x8c8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4619      	mov	r1, r3
 8001794:	4610      	mov	r0, r2
 8001796:	f7ff faa5 	bl	8000ce4 <__aeabi_fmul>
 800179a:	4603      	mov	r3, r0
 800179c:	4619      	mov	r1, r3
 800179e:	4620      	mov	r0, r4
 80017a0:	f7ff f998 	bl	8000ad4 <__addsf3>
 80017a4:	4603      	mov	r3, r0
 80017a6:	461c      	mov	r4, r3
 80017a8:	6a39      	ldr	r1, [r7, #32]
 80017aa:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80017ae:	f7ff fa99 	bl	8000ce4 <__aeabi_fmul>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4619      	mov	r1, r3
 80017b6:	4620      	mov	r0, r4
 80017b8:	f7ff f98a 	bl	8000ad0 <__aeabi_fsub>
 80017bc:	4603      	mov	r3, r0
 80017be:	673b      	str	r3, [r7, #112]	; 0x70
		_2bx = sqrt(hx * hx + hy * hy);
 80017c0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80017c2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80017c4:	f7ff fa8e 	bl	8000ce4 <__aeabi_fmul>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461c      	mov	r4, r3
 80017cc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80017ce:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80017d0:	f7ff fa88 	bl	8000ce4 <__aeabi_fmul>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4619      	mov	r1, r3
 80017d8:	4620      	mov	r0, r4
 80017da:	f7ff f97b 	bl	8000ad4 <__addsf3>
 80017de:	4603      	mov	r3, r0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f7fe fe19 	bl	8000418 <__aeabi_f2d>
 80017e6:	4603      	mov	r3, r0
 80017e8:	460c      	mov	r4, r1
 80017ea:	4618      	mov	r0, r3
 80017ec:	4621      	mov	r1, r4
 80017ee:	f008 ff3d 	bl	800a66c <sqrt>
 80017f2:	4603      	mov	r3, r0
 80017f4:	460c      	mov	r4, r1
 80017f6:	4618      	mov	r0, r3
 80017f8:	4621      	mov	r1, r4
 80017fa:	f7ff f915 	bl	8000a28 <__aeabi_d2f>
 80017fe:	4603      	mov	r3, r0
 8001800:	61fb      	str	r3, [r7, #28]
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8001802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001804:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001808:	4b68      	ldr	r3, [pc, #416]	; (80019ac <MadgwickAHRSupdate+0x8c4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4619      	mov	r1, r3
 800180e:	4610      	mov	r0, r2
 8001810:	f7ff fa68 	bl	8000ce4 <__aeabi_fmul>
 8001814:	4603      	mov	r3, r0
 8001816:	461c      	mov	r4, r3
 8001818:	4b63      	ldr	r3, [pc, #396]	; (80019a8 <MadgwickAHRSupdate+0x8c0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fa60 	bl	8000ce4 <__aeabi_fmul>
 8001824:	4603      	mov	r3, r0
 8001826:	4619      	mov	r1, r3
 8001828:	4620      	mov	r0, r4
 800182a:	f7ff f953 	bl	8000ad4 <__addsf3>
 800182e:	4603      	mov	r3, r0
 8001830:	461c      	mov	r4, r3
 8001832:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001834:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8001838:	f7ff fa54 	bl	8000ce4 <__aeabi_fmul>
 800183c:	4603      	mov	r3, r0
 800183e:	4619      	mov	r1, r3
 8001840:	4620      	mov	r0, r4
 8001842:	f7ff f947 	bl	8000ad4 <__addsf3>
 8001846:	4603      	mov	r3, r0
 8001848:	461c      	mov	r4, r3
 800184a:	4b59      	ldr	r3, [pc, #356]	; (80019b0 <MadgwickAHRSupdate+0x8c8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff fa47 	bl	8000ce4 <__aeabi_fmul>
 8001856:	4603      	mov	r3, r0
 8001858:	4619      	mov	r1, r3
 800185a:	4620      	mov	r0, r4
 800185c:	f7ff f93a 	bl	8000ad4 <__addsf3>
 8001860:	4603      	mov	r3, r0
 8001862:	461c      	mov	r4, r3
 8001864:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001866:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800186a:	f7ff fa3b 	bl	8000ce4 <__aeabi_fmul>
 800186e:	4603      	mov	r3, r0
 8001870:	4619      	mov	r1, r3
 8001872:	4620      	mov	r0, r4
 8001874:	f7ff f92c 	bl	8000ad0 <__aeabi_fsub>
 8001878:	4603      	mov	r3, r0
 800187a:	461c      	mov	r4, r3
 800187c:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001880:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001882:	f7ff fa2f 	bl	8000ce4 <__aeabi_fmul>
 8001886:	4603      	mov	r3, r0
 8001888:	461a      	mov	r2, r3
 800188a:	4b49      	ldr	r3, [pc, #292]	; (80019b0 <MadgwickAHRSupdate+0x8c8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4619      	mov	r1, r3
 8001890:	4610      	mov	r0, r2
 8001892:	f7ff fa27 	bl	8000ce4 <__aeabi_fmul>
 8001896:	4603      	mov	r3, r0
 8001898:	4619      	mov	r1, r3
 800189a:	4620      	mov	r0, r4
 800189c:	f7ff f91a 	bl	8000ad4 <__addsf3>
 80018a0:	4603      	mov	r3, r0
 80018a2:	461c      	mov	r4, r3
 80018a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018a6:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80018aa:	f7ff fa1b 	bl	8000ce4 <__aeabi_fmul>
 80018ae:	4603      	mov	r3, r0
 80018b0:	4619      	mov	r1, r3
 80018b2:	4620      	mov	r0, r4
 80018b4:	f7ff f90c 	bl	8000ad0 <__aeabi_fsub>
 80018b8:	4603      	mov	r3, r0
 80018ba:	461c      	mov	r4, r3
 80018bc:	6a39      	ldr	r1, [r7, #32]
 80018be:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80018c2:	f7ff fa0f 	bl	8000ce4 <__aeabi_fmul>
 80018c6:	4603      	mov	r3, r0
 80018c8:	4619      	mov	r1, r3
 80018ca:	4620      	mov	r0, r4
 80018cc:	f7ff f902 	bl	8000ad4 <__addsf3>
 80018d0:	4603      	mov	r3, r0
 80018d2:	61bb      	str	r3, [r7, #24]
		_4bx = 2.0f * _2bx;
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	4619      	mov	r1, r3
 80018d8:	4618      	mov	r0, r3
 80018da:	f7ff f8fb 	bl	8000ad4 <__addsf3>
 80018de:	4603      	mov	r3, r0
 80018e0:	617b      	str	r3, [r7, #20]
		_4bz = 2.0f * _2bz;
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff f8f4 	bl	8000ad4 <__addsf3>
 80018ec:	4603      	mov	r3, r0
 80018ee:	613b      	str	r3, [r7, #16]

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 80018f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80018f2:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 80018f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f8:	4619      	mov	r1, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff f8ea 	bl	8000ad4 <__addsf3>
 8001900:	4603      	mov	r3, r0
 8001902:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff f8e3 	bl	8000ad0 <__aeabi_fsub>
 800190a:	4603      	mov	r3, r0
 800190c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff f8dd 	bl	8000ad0 <__aeabi_fsub>
 8001916:	4603      	mov	r3, r0
 8001918:	4619      	mov	r1, r3
 800191a:	4620      	mov	r0, r4
 800191c:	f7ff f9e2 	bl	8000ce4 <__aeabi_fmul>
 8001920:	4603      	mov	r3, r0
 8001922:	461c      	mov	r4, r3
 8001924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001926:	4619      	mov	r1, r3
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff f8d3 	bl	8000ad4 <__addsf3>
 800192e:	4603      	mov	r3, r0
 8001930:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff f8ce 	bl	8000ad4 <__addsf3>
 8001938:	4603      	mov	r3, r0
 800193a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff f8c6 	bl	8000ad0 <__aeabi_fsub>
 8001944:	4603      	mov	r3, r0
 8001946:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff f9cb 	bl	8000ce4 <__aeabi_fmul>
 800194e:	4603      	mov	r3, r0
 8001950:	4619      	mov	r1, r3
 8001952:	4620      	mov	r0, r4
 8001954:	f7ff f8be 	bl	8000ad4 <__addsf3>
 8001958:	4603      	mov	r3, r0
 800195a:	461c      	mov	r4, r3
 800195c:	4b13      	ldr	r3, [pc, #76]	; (80019ac <MadgwickAHRSupdate+0x8c4>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	69b9      	ldr	r1, [r7, #24]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff f9be 	bl	8000ce4 <__aeabi_fmul>
 8001968:	4603      	mov	r3, r0
 800196a:	461d      	mov	r5, r3
 800196c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800196e:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001972:	f7ff f8ad 	bl	8000ad0 <__aeabi_fsub>
 8001976:	4603      	mov	r3, r0
 8001978:	6a39      	ldr	r1, [r7, #32]
 800197a:	4618      	mov	r0, r3
 800197c:	f7ff f8a8 	bl	8000ad0 <__aeabi_fsub>
 8001980:	4603      	mov	r3, r0
 8001982:	69f9      	ldr	r1, [r7, #28]
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff f9ad 	bl	8000ce4 <__aeabi_fmul>
 800198a:	4603      	mov	r3, r0
 800198c:	461e      	mov	r6, r3
 800198e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001990:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001992:	f7ff f89d 	bl	8000ad0 <__aeabi_fsub>
 8001996:	4603      	mov	r3, r0
 8001998:	69b9      	ldr	r1, [r7, #24]
 800199a:	4618      	mov	r0, r3
 800199c:	f7ff f9a2 	bl	8000ce4 <__aeabi_fmul>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4619      	mov	r1, r3
 80019a4:	e006      	b.n	80019b4 <MadgwickAHRSupdate+0x8cc>
 80019a6:	bf00      	nop
 80019a8:	200000d0 	.word	0x200000d0
 80019ac:	200000d4 	.word	0x200000d4
 80019b0:	200000d8 	.word	0x200000d8
 80019b4:	4630      	mov	r0, r6
 80019b6:	f7ff f88d 	bl	8000ad4 <__addsf3>
 80019ba:	4603      	mov	r3, r0
 80019bc:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff f885 	bl	8000ad0 <__aeabi_fsub>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4619      	mov	r1, r3
 80019ca:	4628      	mov	r0, r5
 80019cc:	f7ff f98a 	bl	8000ce4 <__aeabi_fmul>
 80019d0:	4603      	mov	r3, r0
 80019d2:	4619      	mov	r1, r3
 80019d4:	4620      	mov	r0, r4
 80019d6:	f7ff f87b 	bl	8000ad0 <__aeabi_fsub>
 80019da:	4603      	mov	r3, r0
 80019dc:	461c      	mov	r4, r3
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80019e4:	4b9f      	ldr	r3, [pc, #636]	; (8001c64 <MadgwickAHRSupdate+0xb7c>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4619      	mov	r1, r3
 80019ea:	4610      	mov	r0, r2
 80019ec:	f7ff f97a 	bl	8000ce4 <__aeabi_fmul>
 80019f0:	4603      	mov	r3, r0
 80019f2:	461d      	mov	r5, r3
 80019f4:	4b9c      	ldr	r3, [pc, #624]	; (8001c68 <MadgwickAHRSupdate+0xb80>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	69b9      	ldr	r1, [r7, #24]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff f972 	bl	8000ce4 <__aeabi_fmul>
 8001a00:	4603      	mov	r3, r0
 8001a02:	4619      	mov	r1, r3
 8001a04:	4628      	mov	r0, r5
 8001a06:	f7ff f865 	bl	8000ad4 <__addsf3>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	461d      	mov	r5, r3
 8001a0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a12:	f7ff f85d 	bl	8000ad0 <__aeabi_fsub>
 8001a16:	4603      	mov	r3, r0
 8001a18:	69f9      	ldr	r1, [r7, #28]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff f962 	bl	8000ce4 <__aeabi_fmul>
 8001a20:	4603      	mov	r3, r0
 8001a22:	461e      	mov	r6, r3
 8001a24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a26:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001a28:	f7ff f854 	bl	8000ad4 <__addsf3>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	69b9      	ldr	r1, [r7, #24]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff f957 	bl	8000ce4 <__aeabi_fmul>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4630      	mov	r0, r6
 8001a3c:	f7ff f84a 	bl	8000ad4 <__addsf3>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff f842 	bl	8000ad0 <__aeabi_fsub>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4619      	mov	r1, r3
 8001a50:	4628      	mov	r0, r5
 8001a52:	f7ff f947 	bl	8000ce4 <__aeabi_fmul>
 8001a56:	4603      	mov	r3, r0
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4620      	mov	r0, r4
 8001a5c:	f7ff f83a 	bl	8000ad4 <__addsf3>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461c      	mov	r4, r3
 8001a64:	4b81      	ldr	r3, [pc, #516]	; (8001c6c <MadgwickAHRSupdate+0xb84>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	69f9      	ldr	r1, [r7, #28]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff f93a 	bl	8000ce4 <__aeabi_fmul>
 8001a70:	4603      	mov	r3, r0
 8001a72:	461d      	mov	r5, r3
 8001a74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001a76:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001a78:	f7ff f82c 	bl	8000ad4 <__addsf3>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	69f9      	ldr	r1, [r7, #28]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff f92f 	bl	8000ce4 <__aeabi_fmul>
 8001a86:	4603      	mov	r3, r0
 8001a88:	461e      	mov	r6, r3
 8001a8a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001a8c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001a90:	f7ff f81e 	bl	8000ad0 <__aeabi_fsub>
 8001a94:	4603      	mov	r3, r0
 8001a96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff f819 	bl	8000ad0 <__aeabi_fsub>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	69b9      	ldr	r1, [r7, #24]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff f91e 	bl	8000ce4 <__aeabi_fmul>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4630      	mov	r0, r6
 8001aae:	f7ff f811 	bl	8000ad4 <__addsf3>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff f809 	bl	8000ad0 <__aeabi_fsub>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4628      	mov	r0, r5
 8001ac4:	f7ff f90e 	bl	8000ce4 <__aeabi_fmul>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	4619      	mov	r1, r3
 8001acc:	4620      	mov	r0, r4
 8001ace:	f7ff f801 	bl	8000ad4 <__addsf3>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ada:	4619      	mov	r1, r3
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7fe fff9 	bl	8000ad4 <__addsf3>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f7fe fff2 	bl	8000ad0 <__aeabi_fsub>
 8001aec:	4603      	mov	r3, r0
 8001aee:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe ffec 	bl	8000ad0 <__aeabi_fsub>
 8001af8:	4603      	mov	r3, r0
 8001afa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff f8f1 	bl	8000ce4 <__aeabi_fmul>
 8001b02:	4603      	mov	r3, r0
 8001b04:	461c      	mov	r4, r3
 8001b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b08:	4619      	mov	r1, r3
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe ffe2 	bl	8000ad4 <__addsf3>
 8001b10:	4603      	mov	r3, r0
 8001b12:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe ffdd 	bl	8000ad4 <__addsf3>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe ffd5 	bl	8000ad0 <__aeabi_fsub>
 8001b26:	4603      	mov	r3, r0
 8001b28:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff f8da 	bl	8000ce4 <__aeabi_fmul>
 8001b30:	4603      	mov	r3, r0
 8001b32:	4619      	mov	r1, r3
 8001b34:	4620      	mov	r0, r4
 8001b36:	f7fe ffcd 	bl	8000ad4 <__addsf3>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	461c      	mov	r4, r3
 8001b3e:	4b4a      	ldr	r3, [pc, #296]	; (8001c68 <MadgwickAHRSupdate+0xb80>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7ff f8cc 	bl	8000ce4 <__aeabi_fmul>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	461d      	mov	r5, r3
 8001b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b52:	4619      	mov	r1, r3
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe ffbd 	bl	8000ad4 <__addsf3>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001b62:	f7fe ffb5 	bl	8000ad0 <__aeabi_fsub>
 8001b66:	4603      	mov	r3, r0
 8001b68:	461e      	mov	r6, r3
 8001b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7fe ffb0 	bl	8000ad4 <__addsf3>
 8001b74:	4603      	mov	r3, r0
 8001b76:	4619      	mov	r1, r3
 8001b78:	4630      	mov	r0, r6
 8001b7a:	f7fe ffa9 	bl	8000ad0 <__aeabi_fsub>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7fe ffa3 	bl	8000ad0 <__aeabi_fsub>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4628      	mov	r0, r5
 8001b90:	f7ff f8a8 	bl	8000ce4 <__aeabi_fmul>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4619      	mov	r1, r3
 8001b98:	4620      	mov	r0, r4
 8001b9a:	f7fe ff99 	bl	8000ad0 <__aeabi_fsub>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	461c      	mov	r4, r3
 8001ba2:	4b30      	ldr	r3, [pc, #192]	; (8001c64 <MadgwickAHRSupdate+0xb7c>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	69b9      	ldr	r1, [r7, #24]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff f89b 	bl	8000ce4 <__aeabi_fmul>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	461d      	mov	r5, r3
 8001bb2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bb4:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001bb8:	f7fe ff8a 	bl	8000ad0 <__aeabi_fsub>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	6a39      	ldr	r1, [r7, #32]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe ff85 	bl	8000ad0 <__aeabi_fsub>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	69f9      	ldr	r1, [r7, #28]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff f88a 	bl	8000ce4 <__aeabi_fmul>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	461e      	mov	r6, r3
 8001bd4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001bd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001bd8:	f7fe ff7a 	bl	8000ad0 <__aeabi_fsub>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	69b9      	ldr	r1, [r7, #24]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff f87f 	bl	8000ce4 <__aeabi_fmul>
 8001be6:	4603      	mov	r3, r0
 8001be8:	4619      	mov	r1, r3
 8001bea:	4630      	mov	r0, r6
 8001bec:	f7fe ff72 	bl	8000ad4 <__addsf3>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe ff6a 	bl	8000ad0 <__aeabi_fsub>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4628      	mov	r0, r5
 8001c02:	f7ff f86f 	bl	8000ce4 <__aeabi_fmul>
 8001c06:	4603      	mov	r3, r0
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4620      	mov	r0, r4
 8001c0c:	f7fe ff62 	bl	8000ad4 <__addsf3>
 8001c10:	4603      	mov	r3, r0
 8001c12:	461c      	mov	r4, r3
 8001c14:	4b15      	ldr	r3, [pc, #84]	; (8001c6c <MadgwickAHRSupdate+0xb84>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	69f9      	ldr	r1, [r7, #28]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff f862 	bl	8000ce4 <__aeabi_fmul>
 8001c20:	4603      	mov	r3, r0
 8001c22:	461d      	mov	r5, r3
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <MadgwickAHRSupdate+0xb88>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	69b9      	ldr	r1, [r7, #24]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff f85a 	bl	8000ce4 <__aeabi_fmul>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4619      	mov	r1, r3
 8001c34:	4628      	mov	r0, r5
 8001c36:	f7fe ff4d 	bl	8000ad4 <__addsf3>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	461d      	mov	r5, r3
 8001c3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c42:	f7fe ff45 	bl	8000ad0 <__aeabi_fsub>
 8001c46:	4603      	mov	r3, r0
 8001c48:	69f9      	ldr	r1, [r7, #28]
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff f84a 	bl	8000ce4 <__aeabi_fmul>
 8001c50:	4603      	mov	r3, r0
 8001c52:	461e      	mov	r6, r3
 8001c54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c56:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001c58:	f7fe ff3c 	bl	8000ad4 <__addsf3>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	69b9      	ldr	r1, [r7, #24]
 8001c60:	4618      	mov	r0, r3
 8001c62:	e007      	b.n	8001c74 <MadgwickAHRSupdate+0xb8c>
 8001c64:	200000d8 	.word	0x200000d8
 8001c68:	200000d0 	.word	0x200000d0
 8001c6c:	200000d4 	.word	0x200000d4
 8001c70:	20000000 	.word	0x20000000
 8001c74:	f7ff f836 	bl	8000ce4 <__aeabi_fmul>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4630      	mov	r0, r6
 8001c7e:	f7fe ff29 	bl	8000ad4 <__addsf3>
 8001c82:	4603      	mov	r3, r0
 8001c84:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7fe ff21 	bl	8000ad0 <__aeabi_fsub>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	4619      	mov	r1, r3
 8001c92:	4628      	mov	r0, r5
 8001c94:	f7ff f826 	bl	8000ce4 <__aeabi_fmul>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f7fe ff19 	bl	8000ad4 <__addsf3>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461c      	mov	r4, r3
 8001ca6:	4ba0      	ldr	r3, [pc, #640]	; (8001f28 <MadgwickAHRSupdate+0xe40>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	69f9      	ldr	r1, [r7, #28]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff f819 	bl	8000ce4 <__aeabi_fmul>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	461d      	mov	r5, r3
 8001cb6:	4b9d      	ldr	r3, [pc, #628]	; (8001f2c <MadgwickAHRSupdate+0xe44>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6939      	ldr	r1, [r7, #16]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff f811 	bl	8000ce4 <__aeabi_fmul>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4628      	mov	r0, r5
 8001cc8:	f7fe ff02 	bl	8000ad0 <__aeabi_fsub>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	461d      	mov	r5, r3
 8001cd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001cd2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001cd4:	f7fe fefe 	bl	8000ad4 <__addsf3>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	69f9      	ldr	r1, [r7, #28]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff f801 	bl	8000ce4 <__aeabi_fmul>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	461e      	mov	r6, r3
 8001ce6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001ce8:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001cec:	f7fe fef0 	bl	8000ad0 <__aeabi_fsub>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7fe feeb 	bl	8000ad0 <__aeabi_fsub>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	69b9      	ldr	r1, [r7, #24]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7fe fff0 	bl	8000ce4 <__aeabi_fmul>
 8001d04:	4603      	mov	r3, r0
 8001d06:	4619      	mov	r1, r3
 8001d08:	4630      	mov	r0, r6
 8001d0a:	f7fe fee3 	bl	8000ad4 <__addsf3>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7fe fedb 	bl	8000ad0 <__aeabi_fsub>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4628      	mov	r0, r5
 8001d20:	f7fe ffe0 	bl	8000ce4 <__aeabi_fmul>
 8001d24:	4603      	mov	r3, r0
 8001d26:	4619      	mov	r1, r3
 8001d28:	4620      	mov	r0, r4
 8001d2a:	f7fe fed3 	bl	8000ad4 <__addsf3>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001d34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d36:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fec8 	bl	8000ad4 <__addsf3>
 8001d44:	4603      	mov	r3, r0
 8001d46:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fec1 	bl	8000ad0 <__aeabi_fsub>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe febb 	bl	8000ad0 <__aeabi_fsub>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4620      	mov	r0, r4
 8001d60:	f7fe ffc0 	bl	8000ce4 <__aeabi_fmul>
 8001d64:	4603      	mov	r3, r0
 8001d66:	461c      	mov	r4, r3
 8001d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe feb1 	bl	8000ad4 <__addsf3>
 8001d72:	4603      	mov	r3, r0
 8001d74:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe feac 	bl	8000ad4 <__addsf3>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7fe fea4 	bl	8000ad0 <__aeabi_fsub>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7fe ffa9 	bl	8000ce4 <__aeabi_fmul>
 8001d92:	4603      	mov	r3, r0
 8001d94:	4619      	mov	r1, r3
 8001d96:	4620      	mov	r0, r4
 8001d98:	f7fe fe9c 	bl	8000ad4 <__addsf3>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	461c      	mov	r4, r3
 8001da0:	4b63      	ldr	r3, [pc, #396]	; (8001f30 <MadgwickAHRSupdate+0xe48>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe ff9b 	bl	8000ce4 <__aeabi_fmul>
 8001dae:	4603      	mov	r3, r0
 8001db0:	461d      	mov	r5, r3
 8001db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db4:	4619      	mov	r1, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fe8c 	bl	8000ad4 <__addsf3>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001dc4:	f7fe fe84 	bl	8000ad0 <__aeabi_fsub>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	461e      	mov	r6, r3
 8001dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe fe7f 	bl	8000ad4 <__addsf3>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4619      	mov	r1, r3
 8001dda:	4630      	mov	r0, r6
 8001ddc:	f7fe fe78 	bl	8000ad0 <__aeabi_fsub>
 8001de0:	4603      	mov	r3, r0
 8001de2:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fe72 	bl	8000ad0 <__aeabi_fsub>
 8001dec:	4603      	mov	r3, r0
 8001dee:	4619      	mov	r1, r3
 8001df0:	4628      	mov	r0, r5
 8001df2:	f7fe ff77 	bl	8000ce4 <__aeabi_fmul>
 8001df6:	4603      	mov	r3, r0
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4620      	mov	r0, r4
 8001dfc:	f7fe fe68 	bl	8000ad0 <__aeabi_fsub>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461c      	mov	r4, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001e0a:	4b49      	ldr	r3, [pc, #292]	; (8001f30 <MadgwickAHRSupdate+0xe48>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4610      	mov	r0, r2
 8001e12:	f7fe ff67 	bl	8000ce4 <__aeabi_fmul>
 8001e16:	4603      	mov	r3, r0
 8001e18:	461d      	mov	r5, r3
 8001e1a:	4b46      	ldr	r3, [pc, #280]	; (8001f34 <MadgwickAHRSupdate+0xe4c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	69b9      	ldr	r1, [r7, #24]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe ff5f 	bl	8000ce4 <__aeabi_fmul>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4628      	mov	r0, r5
 8001e2c:	f7fe fe50 	bl	8000ad0 <__aeabi_fsub>
 8001e30:	4603      	mov	r3, r0
 8001e32:	461d      	mov	r5, r3
 8001e34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e36:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001e3a:	f7fe fe49 	bl	8000ad0 <__aeabi_fsub>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	6a39      	ldr	r1, [r7, #32]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe fe44 	bl	8000ad0 <__aeabi_fsub>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	69f9      	ldr	r1, [r7, #28]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe ff49 	bl	8000ce4 <__aeabi_fmul>
 8001e52:	4603      	mov	r3, r0
 8001e54:	461e      	mov	r6, r3
 8001e56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001e58:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e5a:	f7fe fe39 	bl	8000ad0 <__aeabi_fsub>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	69b9      	ldr	r1, [r7, #24]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe ff3e 	bl	8000ce4 <__aeabi_fmul>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4630      	mov	r0, r6
 8001e6e:	f7fe fe31 	bl	8000ad4 <__addsf3>
 8001e72:	4603      	mov	r3, r0
 8001e74:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fe29 	bl	8000ad0 <__aeabi_fsub>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4619      	mov	r1, r3
 8001e82:	4628      	mov	r0, r5
 8001e84:	f7fe ff2e 	bl	8000ce4 <__aeabi_fmul>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	f7fe fe21 	bl	8000ad4 <__addsf3>
 8001e92:	4603      	mov	r3, r0
 8001e94:	461c      	mov	r4, r3
 8001e96:	4b25      	ldr	r3, [pc, #148]	; (8001f2c <MadgwickAHRSupdate+0xe44>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	69f9      	ldr	r1, [r7, #28]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe ff21 	bl	8000ce4 <__aeabi_fmul>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	461d      	mov	r5, r3
 8001ea6:	4b20      	ldr	r3, [pc, #128]	; (8001f28 <MadgwickAHRSupdate+0xe40>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	69b9      	ldr	r1, [r7, #24]
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7fe ff19 	bl	8000ce4 <__aeabi_fmul>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4628      	mov	r0, r5
 8001eb8:	f7fe fe0c 	bl	8000ad4 <__addsf3>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	461d      	mov	r5, r3
 8001ec0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001ec2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001ec4:	f7fe fe04 	bl	8000ad0 <__aeabi_fsub>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	69f9      	ldr	r1, [r7, #28]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe ff09 	bl	8000ce4 <__aeabi_fmul>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	461e      	mov	r6, r3
 8001ed6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ed8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001eda:	f7fe fdfb 	bl	8000ad4 <__addsf3>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	69b9      	ldr	r1, [r7, #24]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe fefe 	bl	8000ce4 <__aeabi_fmul>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	4619      	mov	r1, r3
 8001eec:	4630      	mov	r0, r6
 8001eee:	f7fe fdf1 	bl	8000ad4 <__addsf3>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7fe fde9 	bl	8000ad0 <__aeabi_fsub>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4619      	mov	r1, r3
 8001f02:	4628      	mov	r0, r5
 8001f04:	f7fe feee 	bl	8000ce4 <__aeabi_fmul>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4620      	mov	r0, r4
 8001f0e:	f7fe fde1 	bl	8000ad4 <__addsf3>
 8001f12:	4603      	mov	r3, r0
 8001f14:	461c      	mov	r4, r3
 8001f16:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <MadgwickAHRSupdate+0xe4c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	69f9      	ldr	r1, [r7, #28]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe fee1 	bl	8000ce4 <__aeabi_fmul>
 8001f22:	4603      	mov	r3, r0
 8001f24:	461d      	mov	r5, r3
 8001f26:	e007      	b.n	8001f38 <MadgwickAHRSupdate+0xe50>
 8001f28:	200000d8 	.word	0x200000d8
 8001f2c:	200000d0 	.word	0x200000d0
 8001f30:	200000d4 	.word	0x200000d4
 8001f34:	20000000 	.word	0x20000000
 8001f38:	4ba2      	ldr	r3, [pc, #648]	; (80021c4 <MadgwickAHRSupdate+0x10dc>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6939      	ldr	r1, [r7, #16]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe fed0 	bl	8000ce4 <__aeabi_fmul>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4619      	mov	r1, r3
 8001f48:	4628      	mov	r0, r5
 8001f4a:	f7fe fdc1 	bl	8000ad0 <__aeabi_fsub>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	461d      	mov	r5, r3
 8001f52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001f54:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001f56:	f7fe fdbd 	bl	8000ad4 <__addsf3>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	69f9      	ldr	r1, [r7, #28]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fec0 	bl	8000ce4 <__aeabi_fmul>
 8001f64:	4603      	mov	r3, r0
 8001f66:	461e      	mov	r6, r3
 8001f68:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001f6a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001f6e:	f7fe fdaf 	bl	8000ad0 <__aeabi_fsub>
 8001f72:	4603      	mov	r3, r0
 8001f74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7fe fdaa 	bl	8000ad0 <__aeabi_fsub>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	69b9      	ldr	r1, [r7, #24]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe feaf 	bl	8000ce4 <__aeabi_fmul>
 8001f86:	4603      	mov	r3, r0
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4630      	mov	r0, r6
 8001f8c:	f7fe fda2 	bl	8000ad4 <__addsf3>
 8001f90:	4603      	mov	r3, r0
 8001f92:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fd9a 	bl	8000ad0 <__aeabi_fsub>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	4628      	mov	r0, r5
 8001fa2:	f7fe fe9f 	bl	8000ce4 <__aeabi_fmul>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4620      	mov	r0, r4
 8001fac:	f7fe fd92 	bl	8000ad4 <__addsf3>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	67fb      	str	r3, [r7, #124]	; 0x7c
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe fd8b 	bl	8000ad4 <__addsf3>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe fd84 	bl	8000ad0 <__aeabi_fsub>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7fe fd7e 	bl	8000ad0 <__aeabi_fsub>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe fe83 	bl	8000ce4 <__aeabi_fmul>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	461c      	mov	r4, r3
 8001fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fd74 	bl	8000ad4 <__addsf3>
 8001fec:	4603      	mov	r3, r0
 8001fee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe fd6f 	bl	8000ad4 <__addsf3>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fd67 	bl	8000ad0 <__aeabi_fsub>
 8002002:	4603      	mov	r3, r0
 8002004:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002006:	4618      	mov	r0, r3
 8002008:	f7fe fe6c 	bl	8000ce4 <__aeabi_fmul>
 800200c:	4603      	mov	r3, r0
 800200e:	4619      	mov	r1, r3
 8002010:	4620      	mov	r0, r4
 8002012:	f7fe fd5f 	bl	8000ad4 <__addsf3>
 8002016:	4603      	mov	r3, r0
 8002018:	461c      	mov	r4, r3
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8002020:	4b69      	ldr	r3, [pc, #420]	; (80021c8 <MadgwickAHRSupdate+0x10e0>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4619      	mov	r1, r3
 8002026:	4610      	mov	r0, r2
 8002028:	f7fe fe5c 	bl	8000ce4 <__aeabi_fmul>
 800202c:	4603      	mov	r3, r0
 800202e:	461d      	mov	r5, r3
 8002030:	4b66      	ldr	r3, [pc, #408]	; (80021cc <MadgwickAHRSupdate+0x10e4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	69b9      	ldr	r1, [r7, #24]
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe fe54 	bl	8000ce4 <__aeabi_fmul>
 800203c:	4603      	mov	r3, r0
 800203e:	4619      	mov	r1, r3
 8002040:	4628      	mov	r0, r5
 8002042:	f7fe fd47 	bl	8000ad4 <__addsf3>
 8002046:	4603      	mov	r3, r0
 8002048:	461d      	mov	r5, r3
 800204a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800204c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8002050:	f7fe fd3e 	bl	8000ad0 <__aeabi_fsub>
 8002054:	4603      	mov	r3, r0
 8002056:	6a39      	ldr	r1, [r7, #32]
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe fd39 	bl	8000ad0 <__aeabi_fsub>
 800205e:	4603      	mov	r3, r0
 8002060:	69f9      	ldr	r1, [r7, #28]
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe fe3e 	bl	8000ce4 <__aeabi_fmul>
 8002068:	4603      	mov	r3, r0
 800206a:	461e      	mov	r6, r3
 800206c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800206e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002070:	f7fe fd2e 	bl	8000ad0 <__aeabi_fsub>
 8002074:	4603      	mov	r3, r0
 8002076:	69b9      	ldr	r1, [r7, #24]
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe fe33 	bl	8000ce4 <__aeabi_fmul>
 800207e:	4603      	mov	r3, r0
 8002080:	4619      	mov	r1, r3
 8002082:	4630      	mov	r0, r6
 8002084:	f7fe fd26 	bl	8000ad4 <__addsf3>
 8002088:	4603      	mov	r3, r0
 800208a:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe fd1e 	bl	8000ad0 <__aeabi_fsub>
 8002094:	4603      	mov	r3, r0
 8002096:	4619      	mov	r1, r3
 8002098:	4628      	mov	r0, r5
 800209a:	f7fe fe23 	bl	8000ce4 <__aeabi_fmul>
 800209e:	4603      	mov	r3, r0
 80020a0:	4619      	mov	r1, r3
 80020a2:	4620      	mov	r0, r4
 80020a4:	f7fe fd16 	bl	8000ad4 <__addsf3>
 80020a8:	4603      	mov	r3, r0
 80020aa:	461c      	mov	r4, r3
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 80020b2:	4b47      	ldr	r3, [pc, #284]	; (80021d0 <MadgwickAHRSupdate+0x10e8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4619      	mov	r1, r3
 80020b8:	4610      	mov	r0, r2
 80020ba:	f7fe fe13 	bl	8000ce4 <__aeabi_fmul>
 80020be:	4603      	mov	r3, r0
 80020c0:	461d      	mov	r5, r3
 80020c2:	4b40      	ldr	r3, [pc, #256]	; (80021c4 <MadgwickAHRSupdate+0x10dc>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	69b9      	ldr	r1, [r7, #24]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe fe0b 	bl	8000ce4 <__aeabi_fmul>
 80020ce:	4603      	mov	r3, r0
 80020d0:	4619      	mov	r1, r3
 80020d2:	4628      	mov	r0, r5
 80020d4:	f7fe fcfe 	bl	8000ad4 <__addsf3>
 80020d8:	4603      	mov	r3, r0
 80020da:	461d      	mov	r5, r3
 80020dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80020de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020e0:	f7fe fcf6 	bl	8000ad0 <__aeabi_fsub>
 80020e4:	4603      	mov	r3, r0
 80020e6:	69f9      	ldr	r1, [r7, #28]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe fdfb 	bl	8000ce4 <__aeabi_fmul>
 80020ee:	4603      	mov	r3, r0
 80020f0:	461e      	mov	r6, r3
 80020f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020f4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80020f6:	f7fe fced 	bl	8000ad4 <__addsf3>
 80020fa:	4603      	mov	r3, r0
 80020fc:	69b9      	ldr	r1, [r7, #24]
 80020fe:	4618      	mov	r0, r3
 8002100:	f7fe fdf0 	bl	8000ce4 <__aeabi_fmul>
 8002104:	4603      	mov	r3, r0
 8002106:	4619      	mov	r1, r3
 8002108:	4630      	mov	r0, r6
 800210a:	f7fe fce3 	bl	8000ad4 <__addsf3>
 800210e:	4603      	mov	r3, r0
 8002110:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8002114:	4618      	mov	r0, r3
 8002116:	f7fe fcdb 	bl	8000ad0 <__aeabi_fsub>
 800211a:	4603      	mov	r3, r0
 800211c:	4619      	mov	r1, r3
 800211e:	4628      	mov	r0, r5
 8002120:	f7fe fde0 	bl	8000ce4 <__aeabi_fmul>
 8002124:	4603      	mov	r3, r0
 8002126:	4619      	mov	r1, r3
 8002128:	4620      	mov	r0, r4
 800212a:	f7fe fcd3 	bl	8000ad4 <__addsf3>
 800212e:	4603      	mov	r3, r0
 8002130:	461c      	mov	r4, r3
 8002132:	4b26      	ldr	r3, [pc, #152]	; (80021cc <MadgwickAHRSupdate+0x10e4>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	69f9      	ldr	r1, [r7, #28]
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe fdd3 	bl	8000ce4 <__aeabi_fmul>
 800213e:	4603      	mov	r3, r0
 8002140:	461d      	mov	r5, r3
 8002142:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002144:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002146:	f7fe fcc5 	bl	8000ad4 <__addsf3>
 800214a:	4603      	mov	r3, r0
 800214c:	69f9      	ldr	r1, [r7, #28]
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe fdc8 	bl	8000ce4 <__aeabi_fmul>
 8002154:	4603      	mov	r3, r0
 8002156:	461e      	mov	r6, r3
 8002158:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800215a:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800215e:	f7fe fcb7 	bl	8000ad0 <__aeabi_fsub>
 8002162:	4603      	mov	r3, r0
 8002164:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe fcb2 	bl	8000ad0 <__aeabi_fsub>
 800216c:	4603      	mov	r3, r0
 800216e:	69b9      	ldr	r1, [r7, #24]
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe fdb7 	bl	8000ce4 <__aeabi_fmul>
 8002176:	4603      	mov	r3, r0
 8002178:	4619      	mov	r1, r3
 800217a:	4630      	mov	r0, r6
 800217c:	f7fe fcaa 	bl	8000ad4 <__addsf3>
 8002180:	4603      	mov	r3, r0
 8002182:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe fca2 	bl	8000ad0 <__aeabi_fsub>
 800218c:	4603      	mov	r3, r0
 800218e:	4619      	mov	r1, r3
 8002190:	4628      	mov	r0, r5
 8002192:	f7fe fda7 	bl	8000ce4 <__aeabi_fmul>
 8002196:	4603      	mov	r3, r0
 8002198:	4619      	mov	r1, r3
 800219a:	4620      	mov	r0, r4
 800219c:	f7fe fc9a 	bl	8000ad4 <__addsf3>
 80021a0:	4603      	mov	r3, r0
 80021a2:	67bb      	str	r3, [r7, #120]	; 0x78
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80021a4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80021a8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80021ac:	f7fe fd9a 	bl	8000ce4 <__aeabi_fmul>
 80021b0:	4603      	mov	r3, r0
 80021b2:	461c      	mov	r4, r3
 80021b4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80021b8:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80021bc:	f7fe fd92 	bl	8000ce4 <__aeabi_fmul>
 80021c0:	e008      	b.n	80021d4 <MadgwickAHRSupdate+0x10ec>
 80021c2:	bf00      	nop
 80021c4:	200000d4 	.word	0x200000d4
 80021c8:	200000d8 	.word	0x200000d8
 80021cc:	200000d0 	.word	0x200000d0
 80021d0:	20000000 	.word	0x20000000
 80021d4:	4603      	mov	r3, r0
 80021d6:	4619      	mov	r1, r3
 80021d8:	4620      	mov	r0, r4
 80021da:	f7fe fc7b 	bl	8000ad4 <__addsf3>
 80021de:	4603      	mov	r3, r0
 80021e0:	461c      	mov	r4, r3
 80021e2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80021e4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80021e6:	f7fe fd7d 	bl	8000ce4 <__aeabi_fmul>
 80021ea:	4603      	mov	r3, r0
 80021ec:	4619      	mov	r1, r3
 80021ee:	4620      	mov	r0, r4
 80021f0:	f7fe fc70 	bl	8000ad4 <__addsf3>
 80021f4:	4603      	mov	r3, r0
 80021f6:	461c      	mov	r4, r3
 80021f8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80021fa:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80021fc:	f7fe fd72 	bl	8000ce4 <__aeabi_fmul>
 8002200:	4603      	mov	r3, r0
 8002202:	4619      	mov	r1, r3
 8002204:	4620      	mov	r0, r4
 8002206:	f7fe fc65 	bl	8000ad4 <__addsf3>
 800220a:	4603      	mov	r3, r0
 800220c:	4618      	mov	r0, r3
 800220e:	f000 fd07 	bl	8002c20 <invSqrt>
 8002212:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		s0 *= recipNorm;
 8002216:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800221a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800221e:	f7fe fd61 	bl	8000ce4 <__aeabi_fmul>
 8002222:	4603      	mov	r3, r0
 8002224:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		s1 *= recipNorm;
 8002228:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800222c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002230:	f7fe fd58 	bl	8000ce4 <__aeabi_fmul>
 8002234:	4603      	mov	r3, r0
 8002236:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		s2 *= recipNorm;
 800223a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800223e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002240:	f7fe fd50 	bl	8000ce4 <__aeabi_fmul>
 8002244:	4603      	mov	r3, r0
 8002246:	67fb      	str	r3, [r7, #124]	; 0x7c
		s3 *= recipNorm;
 8002248:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800224c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800224e:	f7fe fd49 	bl	8000ce4 <__aeabi_fmul>
 8002252:	4603      	mov	r3, r0
 8002254:	67bb      	str	r3, [r7, #120]	; 0x78

		// Apply feedback step
		qDot1 -= beta * s0;
 8002256:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f7fe fd42 	bl	8000ce4 <__aeabi_fmul>
 8002260:	4603      	mov	r3, r0
 8002262:	4619      	mov	r1, r3
 8002264:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8002268:	f7fe fc32 	bl	8000ad0 <__aeabi_fsub>
 800226c:	4603      	mov	r3, r0
 800226e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		qDot2 -= beta * s1;
 8002272:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f7fe fd34 	bl	8000ce4 <__aeabi_fmul>
 800227c:	4603      	mov	r3, r0
 800227e:	4619      	mov	r1, r3
 8002280:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8002284:	f7fe fc24 	bl	8000ad0 <__aeabi_fsub>
 8002288:	4603      	mov	r3, r0
 800228a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		qDot3 -= beta * s2;
 800228e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002290:	68f8      	ldr	r0, [r7, #12]
 8002292:	f7fe fd27 	bl	8000ce4 <__aeabi_fmul>
 8002296:	4603      	mov	r3, r0
 8002298:	4619      	mov	r1, r3
 800229a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800229e:	f7fe fc17 	bl	8000ad0 <__aeabi_fsub>
 80022a2:	4603      	mov	r3, r0
 80022a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		qDot4 -= beta * s3;
 80022a8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f7fe fd1a 	bl	8000ce4 <__aeabi_fmul>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4619      	mov	r1, r3
 80022b4:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80022b8:	f7fe fc0a 	bl	8000ad0 <__aeabi_fsub>
 80022bc:	4603      	mov	r3, r0
 80022be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 80022c2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80022c6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80022ca:	f7fe fdbf 	bl	8000e4c <__aeabi_fdiv>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe fd05 	bl	8000ce4 <__aeabi_fmul>
 80022da:	4603      	mov	r3, r0
 80022dc:	461a      	mov	r2, r3
 80022de:	4b5e      	ldr	r3, [pc, #376]	; (8002458 <MadgwickAHRSupdate+0x1370>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4619      	mov	r1, r3
 80022e4:	4610      	mov	r0, r2
 80022e6:	f7fe fbf5 	bl	8000ad4 <__addsf3>
 80022ea:	4603      	mov	r3, r0
 80022ec:	461a      	mov	r2, r3
 80022ee:	4b5a      	ldr	r3, [pc, #360]	; (8002458 <MadgwickAHRSupdate+0x1370>)
 80022f0:	601a      	str	r2, [r3, #0]
	q1 += qDot2 * (1.0f / sampleFreq);
 80022f2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80022f6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80022fa:	f7fe fda7 	bl	8000e4c <__aeabi_fdiv>
 80022fe:	4603      	mov	r3, r0
 8002300:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe fced 	bl	8000ce4 <__aeabi_fmul>
 800230a:	4603      	mov	r3, r0
 800230c:	461a      	mov	r2, r3
 800230e:	4b53      	ldr	r3, [pc, #332]	; (800245c <MadgwickAHRSupdate+0x1374>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4619      	mov	r1, r3
 8002314:	4610      	mov	r0, r2
 8002316:	f7fe fbdd 	bl	8000ad4 <__addsf3>
 800231a:	4603      	mov	r3, r0
 800231c:	461a      	mov	r2, r3
 800231e:	4b4f      	ldr	r3, [pc, #316]	; (800245c <MadgwickAHRSupdate+0x1374>)
 8002320:	601a      	str	r2, [r3, #0]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002322:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002326:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800232a:	f7fe fd8f 	bl	8000e4c <__aeabi_fdiv>
 800232e:	4603      	mov	r3, r0
 8002330:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8002334:	4618      	mov	r0, r3
 8002336:	f7fe fcd5 	bl	8000ce4 <__aeabi_fmul>
 800233a:	4603      	mov	r3, r0
 800233c:	461a      	mov	r2, r3
 800233e:	4b48      	ldr	r3, [pc, #288]	; (8002460 <MadgwickAHRSupdate+0x1378>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4619      	mov	r1, r3
 8002344:	4610      	mov	r0, r2
 8002346:	f7fe fbc5 	bl	8000ad4 <__addsf3>
 800234a:	4603      	mov	r3, r0
 800234c:	461a      	mov	r2, r3
 800234e:	4b44      	ldr	r3, [pc, #272]	; (8002460 <MadgwickAHRSupdate+0x1378>)
 8002350:	601a      	str	r2, [r3, #0]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002352:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002356:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800235a:	f7fe fd77 	bl	8000e4c <__aeabi_fdiv>
 800235e:	4603      	mov	r3, r0
 8002360:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe fcbd 	bl	8000ce4 <__aeabi_fmul>
 800236a:	4603      	mov	r3, r0
 800236c:	461a      	mov	r2, r3
 800236e:	4b3d      	ldr	r3, [pc, #244]	; (8002464 <MadgwickAHRSupdate+0x137c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4619      	mov	r1, r3
 8002374:	4610      	mov	r0, r2
 8002376:	f7fe fbad 	bl	8000ad4 <__addsf3>
 800237a:	4603      	mov	r3, r0
 800237c:	461a      	mov	r2, r3
 800237e:	4b39      	ldr	r3, [pc, #228]	; (8002464 <MadgwickAHRSupdate+0x137c>)
 8002380:	601a      	str	r2, [r3, #0]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002382:	4b35      	ldr	r3, [pc, #212]	; (8002458 <MadgwickAHRSupdate+0x1370>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	4b34      	ldr	r3, [pc, #208]	; (8002458 <MadgwickAHRSupdate+0x1370>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4619      	mov	r1, r3
 800238c:	4610      	mov	r0, r2
 800238e:	f7fe fca9 	bl	8000ce4 <__aeabi_fmul>
 8002392:	4603      	mov	r3, r0
 8002394:	461c      	mov	r4, r3
 8002396:	4b31      	ldr	r3, [pc, #196]	; (800245c <MadgwickAHRSupdate+0x1374>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	4b30      	ldr	r3, [pc, #192]	; (800245c <MadgwickAHRSupdate+0x1374>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4619      	mov	r1, r3
 80023a0:	4610      	mov	r0, r2
 80023a2:	f7fe fc9f 	bl	8000ce4 <__aeabi_fmul>
 80023a6:	4603      	mov	r3, r0
 80023a8:	4619      	mov	r1, r3
 80023aa:	4620      	mov	r0, r4
 80023ac:	f7fe fb92 	bl	8000ad4 <__addsf3>
 80023b0:	4603      	mov	r3, r0
 80023b2:	461c      	mov	r4, r3
 80023b4:	4b2a      	ldr	r3, [pc, #168]	; (8002460 <MadgwickAHRSupdate+0x1378>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4b29      	ldr	r3, [pc, #164]	; (8002460 <MadgwickAHRSupdate+0x1378>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4619      	mov	r1, r3
 80023be:	4610      	mov	r0, r2
 80023c0:	f7fe fc90 	bl	8000ce4 <__aeabi_fmul>
 80023c4:	4603      	mov	r3, r0
 80023c6:	4619      	mov	r1, r3
 80023c8:	4620      	mov	r0, r4
 80023ca:	f7fe fb83 	bl	8000ad4 <__addsf3>
 80023ce:	4603      	mov	r3, r0
 80023d0:	461c      	mov	r4, r3
 80023d2:	4b24      	ldr	r3, [pc, #144]	; (8002464 <MadgwickAHRSupdate+0x137c>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4b23      	ldr	r3, [pc, #140]	; (8002464 <MadgwickAHRSupdate+0x137c>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4619      	mov	r1, r3
 80023dc:	4610      	mov	r0, r2
 80023de:	f7fe fc81 	bl	8000ce4 <__aeabi_fmul>
 80023e2:	4603      	mov	r3, r0
 80023e4:	4619      	mov	r1, r3
 80023e6:	4620      	mov	r0, r4
 80023e8:	f7fe fb74 	bl	8000ad4 <__addsf3>
 80023ec:	4603      	mov	r3, r0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f000 fc16 	bl	8002c20 <invSqrt>
 80023f4:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	q0 *= recipNorm;
 80023f8:	4b17      	ldr	r3, [pc, #92]	; (8002458 <MadgwickAHRSupdate+0x1370>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe fc6f 	bl	8000ce4 <__aeabi_fmul>
 8002406:	4603      	mov	r3, r0
 8002408:	461a      	mov	r2, r3
 800240a:	4b13      	ldr	r3, [pc, #76]	; (8002458 <MadgwickAHRSupdate+0x1370>)
 800240c:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 800240e:	4b13      	ldr	r3, [pc, #76]	; (800245c <MadgwickAHRSupdate+0x1374>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe fc64 	bl	8000ce4 <__aeabi_fmul>
 800241c:	4603      	mov	r3, r0
 800241e:	461a      	mov	r2, r3
 8002420:	4b0e      	ldr	r3, [pc, #56]	; (800245c <MadgwickAHRSupdate+0x1374>)
 8002422:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 8002424:	4b0e      	ldr	r3, [pc, #56]	; (8002460 <MadgwickAHRSupdate+0x1378>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe fc59 	bl	8000ce4 <__aeabi_fmul>
 8002432:	4603      	mov	r3, r0
 8002434:	461a      	mov	r2, r3
 8002436:	4b0a      	ldr	r3, [pc, #40]	; (8002460 <MadgwickAHRSupdate+0x1378>)
 8002438:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 800243a:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <MadgwickAHRSupdate+0x137c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe fc4e 	bl	8000ce4 <__aeabi_fmul>
 8002448:	4603      	mov	r3, r0
 800244a:	461a      	mov	r2, r3
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <MadgwickAHRSupdate+0x137c>)
 800244e:	601a      	str	r2, [r3, #0]
}
 8002450:	37a4      	adds	r7, #164	; 0xa4
 8002452:	46bd      	mov	sp, r7
 8002454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002456:	bf00      	nop
 8002458:	20000000 	.word	0x20000000
 800245c:	200000d0 	.word	0x200000d0
 8002460:	200000d4 	.word	0x200000d4
 8002464:	200000d8 	.word	0x200000d8

08002468 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float beta, float gx, float gy, float gz, float ax, float ay, float az, float dt) {
 8002468:	b590      	push	{r4, r7, lr}
 800246a:	b09d      	sub	sp, #116	; 0x74
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	607a      	str	r2, [r7, #4]
 8002474:	603b      	str	r3, [r7, #0]

	float sampleFreq = 1 /dt;
 8002476:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 800247a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800247e:	f7fe fce5 	bl	8000e4c <__aeabi_fdiv>
 8002482:	4603      	mov	r3, r0
 8002484:	65fb      	str	r3, [r7, #92]	; 0x5c
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8002486:	4ba5      	ldr	r3, [pc, #660]	; (800271c <MadgwickAHRSupdateIMU+0x2b4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800248e:	68b9      	ldr	r1, [r7, #8]
 8002490:	4618      	mov	r0, r3
 8002492:	f7fe fc27 	bl	8000ce4 <__aeabi_fmul>
 8002496:	4603      	mov	r3, r0
 8002498:	461c      	mov	r4, r3
 800249a:	4ba1      	ldr	r3, [pc, #644]	; (8002720 <MadgwickAHRSupdateIMU+0x2b8>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe fc1f 	bl	8000ce4 <__aeabi_fmul>
 80024a6:	4603      	mov	r3, r0
 80024a8:	4619      	mov	r1, r3
 80024aa:	4620      	mov	r0, r4
 80024ac:	f7fe fb10 	bl	8000ad0 <__aeabi_fsub>
 80024b0:	4603      	mov	r3, r0
 80024b2:	461c      	mov	r4, r3
 80024b4:	4b9b      	ldr	r3, [pc, #620]	; (8002724 <MadgwickAHRSupdateIMU+0x2bc>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6839      	ldr	r1, [r7, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fe fc12 	bl	8000ce4 <__aeabi_fmul>
 80024c0:	4603      	mov	r3, r0
 80024c2:	4619      	mov	r1, r3
 80024c4:	4620      	mov	r0, r4
 80024c6:	f7fe fb03 	bl	8000ad0 <__aeabi_fsub>
 80024ca:	4603      	mov	r3, r0
 80024cc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe fc07 	bl	8000ce4 <__aeabi_fmul>
 80024d6:	4603      	mov	r3, r0
 80024d8:	66fb      	str	r3, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 80024da:	4b93      	ldr	r3, [pc, #588]	; (8002728 <MadgwickAHRSupdateIMU+0x2c0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68b9      	ldr	r1, [r7, #8]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe fbff 	bl	8000ce4 <__aeabi_fmul>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461c      	mov	r4, r3
 80024ea:	4b8d      	ldr	r3, [pc, #564]	; (8002720 <MadgwickAHRSupdateIMU+0x2b8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6839      	ldr	r1, [r7, #0]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fe fbf7 	bl	8000ce4 <__aeabi_fmul>
 80024f6:	4603      	mov	r3, r0
 80024f8:	4619      	mov	r1, r3
 80024fa:	4620      	mov	r0, r4
 80024fc:	f7fe faea 	bl	8000ad4 <__addsf3>
 8002500:	4603      	mov	r3, r0
 8002502:	461c      	mov	r4, r3
 8002504:	4b87      	ldr	r3, [pc, #540]	; (8002724 <MadgwickAHRSupdateIMU+0x2bc>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6879      	ldr	r1, [r7, #4]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe fbea 	bl	8000ce4 <__aeabi_fmul>
 8002510:	4603      	mov	r3, r0
 8002512:	4619      	mov	r1, r3
 8002514:	4620      	mov	r0, r4
 8002516:	f7fe fadb 	bl	8000ad0 <__aeabi_fsub>
 800251a:	4603      	mov	r3, r0
 800251c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe fbdf 	bl	8000ce4 <__aeabi_fmul>
 8002526:	4603      	mov	r3, r0
 8002528:	66bb      	str	r3, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800252a:	4b7f      	ldr	r3, [pc, #508]	; (8002728 <MadgwickAHRSupdateIMU+0x2c0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6879      	ldr	r1, [r7, #4]
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe fbd7 	bl	8000ce4 <__aeabi_fmul>
 8002536:	4603      	mov	r3, r0
 8002538:	461c      	mov	r4, r3
 800253a:	4b78      	ldr	r3, [pc, #480]	; (800271c <MadgwickAHRSupdateIMU+0x2b4>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6839      	ldr	r1, [r7, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe fbcf 	bl	8000ce4 <__aeabi_fmul>
 8002546:	4603      	mov	r3, r0
 8002548:	4619      	mov	r1, r3
 800254a:	4620      	mov	r0, r4
 800254c:	f7fe fac0 	bl	8000ad0 <__aeabi_fsub>
 8002550:	4603      	mov	r3, r0
 8002552:	461c      	mov	r4, r3
 8002554:	4b73      	ldr	r3, [pc, #460]	; (8002724 <MadgwickAHRSupdateIMU+0x2bc>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	4618      	mov	r0, r3
 800255c:	f7fe fbc2 	bl	8000ce4 <__aeabi_fmul>
 8002560:	4603      	mov	r3, r0
 8002562:	4619      	mov	r1, r3
 8002564:	4620      	mov	r0, r4
 8002566:	f7fe fab5 	bl	8000ad4 <__addsf3>
 800256a:	4603      	mov	r3, r0
 800256c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe fbb7 	bl	8000ce4 <__aeabi_fmul>
 8002576:	4603      	mov	r3, r0
 8002578:	667b      	str	r3, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 800257a:	4b6b      	ldr	r3, [pc, #428]	; (8002728 <MadgwickAHRSupdateIMU+0x2c0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6839      	ldr	r1, [r7, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe fbaf 	bl	8000ce4 <__aeabi_fmul>
 8002586:	4603      	mov	r3, r0
 8002588:	461c      	mov	r4, r3
 800258a:	4b64      	ldr	r3, [pc, #400]	; (800271c <MadgwickAHRSupdateIMU+0x2b4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4618      	mov	r0, r3
 8002592:	f7fe fba7 	bl	8000ce4 <__aeabi_fmul>
 8002596:	4603      	mov	r3, r0
 8002598:	4619      	mov	r1, r3
 800259a:	4620      	mov	r0, r4
 800259c:	f7fe fa9a 	bl	8000ad4 <__addsf3>
 80025a0:	4603      	mov	r3, r0
 80025a2:	461c      	mov	r4, r3
 80025a4:	4b5e      	ldr	r3, [pc, #376]	; (8002720 <MadgwickAHRSupdateIMU+0x2b8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68b9      	ldr	r1, [r7, #8]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fe fb9a 	bl	8000ce4 <__aeabi_fmul>
 80025b0:	4603      	mov	r3, r0
 80025b2:	4619      	mov	r1, r3
 80025b4:	4620      	mov	r0, r4
 80025b6:	f7fe fa8b 	bl	8000ad0 <__aeabi_fsub>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fe fb8f 	bl	8000ce4 <__aeabi_fmul>
 80025c6:	4603      	mov	r3, r0
 80025c8:	663b      	str	r3, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 80025ca:	f04f 0100 	mov.w	r1, #0
 80025ce:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80025d2:	f7fe fd1b 	bl	800100c <__aeabi_fcmpeq>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d012      	beq.n	8002602 <MadgwickAHRSupdateIMU+0x19a>
 80025dc:	f04f 0100 	mov.w	r1, #0
 80025e0:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80025e4:	f7fe fd12 	bl	800100c <__aeabi_fcmpeq>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d009      	beq.n	8002602 <MadgwickAHRSupdateIMU+0x19a>
 80025ee:	f04f 0100 	mov.w	r1, #0
 80025f2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80025f6:	f7fe fd09 	bl	800100c <__aeabi_fcmpeq>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f040 8249 	bne.w	8002a94 <MadgwickAHRSupdateIMU+0x62c>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8002602:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002606:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800260a:	f7fe fb6b 	bl	8000ce4 <__aeabi_fmul>
 800260e:	4603      	mov	r3, r0
 8002610:	461c      	mov	r4, r3
 8002612:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8002616:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800261a:	f7fe fb63 	bl	8000ce4 <__aeabi_fmul>
 800261e:	4603      	mov	r3, r0
 8002620:	4619      	mov	r1, r3
 8002622:	4620      	mov	r0, r4
 8002624:	f7fe fa56 	bl	8000ad4 <__addsf3>
 8002628:	4603      	mov	r3, r0
 800262a:	461c      	mov	r4, r3
 800262c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002630:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002634:	f7fe fb56 	bl	8000ce4 <__aeabi_fmul>
 8002638:	4603      	mov	r3, r0
 800263a:	4619      	mov	r1, r3
 800263c:	4620      	mov	r0, r4
 800263e:	f7fe fa49 	bl	8000ad4 <__addsf3>
 8002642:	4603      	mov	r3, r0
 8002644:	4618      	mov	r0, r3
 8002646:	f000 faeb 	bl	8002c20 <invSqrt>
 800264a:	65b8      	str	r0, [r7, #88]	; 0x58
		ax *= recipNorm;
 800264c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800264e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002652:	f7fe fb47 	bl	8000ce4 <__aeabi_fmul>
 8002656:	4603      	mov	r3, r0
 8002658:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		ay *= recipNorm;
 800265c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800265e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002662:	f7fe fb3f 	bl	8000ce4 <__aeabi_fmul>
 8002666:	4603      	mov	r3, r0
 8002668:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		az *= recipNorm;   
 800266c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800266e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002672:	f7fe fb37 	bl	8000ce4 <__aeabi_fmul>
 8002676:	4603      	mov	r3, r0
 8002678:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 800267c:	4b2a      	ldr	r3, [pc, #168]	; (8002728 <MadgwickAHRSupdateIMU+0x2c0>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4619      	mov	r1, r3
 8002682:	4618      	mov	r0, r3
 8002684:	f7fe fa26 	bl	8000ad4 <__addsf3>
 8002688:	4603      	mov	r3, r0
 800268a:	657b      	str	r3, [r7, #84]	; 0x54
		_2q1 = 2.0f * q1;
 800268c:	4b23      	ldr	r3, [pc, #140]	; (800271c <MadgwickAHRSupdateIMU+0x2b4>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4619      	mov	r1, r3
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe fa1e 	bl	8000ad4 <__addsf3>
 8002698:	4603      	mov	r3, r0
 800269a:	653b      	str	r3, [r7, #80]	; 0x50
		_2q2 = 2.0f * q2;
 800269c:	4b20      	ldr	r3, [pc, #128]	; (8002720 <MadgwickAHRSupdateIMU+0x2b8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4619      	mov	r1, r3
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe fa16 	bl	8000ad4 <__addsf3>
 80026a8:	4603      	mov	r3, r0
 80026aa:	64fb      	str	r3, [r7, #76]	; 0x4c
		_2q3 = 2.0f * q3;
 80026ac:	4b1d      	ldr	r3, [pc, #116]	; (8002724 <MadgwickAHRSupdateIMU+0x2bc>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4619      	mov	r1, r3
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7fe fa0e 	bl	8000ad4 <__addsf3>
 80026b8:	4603      	mov	r3, r0
 80026ba:	64bb      	str	r3, [r7, #72]	; 0x48
		_4q0 = 4.0f * q0;
 80026bc:	4b1a      	ldr	r3, [pc, #104]	; (8002728 <MadgwickAHRSupdateIMU+0x2c0>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fe fb0d 	bl	8000ce4 <__aeabi_fmul>
 80026ca:	4603      	mov	r3, r0
 80026cc:	647b      	str	r3, [r7, #68]	; 0x44
		_4q1 = 4.0f * q1;
 80026ce:	4b13      	ldr	r3, [pc, #76]	; (800271c <MadgwickAHRSupdateIMU+0x2b4>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fb04 	bl	8000ce4 <__aeabi_fmul>
 80026dc:	4603      	mov	r3, r0
 80026de:	643b      	str	r3, [r7, #64]	; 0x40
		_4q2 = 4.0f * q2;
 80026e0:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <MadgwickAHRSupdateIMU+0x2b8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7fe fafb 	bl	8000ce4 <__aeabi_fmul>
 80026ee:	4603      	mov	r3, r0
 80026f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		_8q1 = 8.0f * q1;
 80026f2:	4b0a      	ldr	r3, [pc, #40]	; (800271c <MadgwickAHRSupdateIMU+0x2b4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fe faf2 	bl	8000ce4 <__aeabi_fmul>
 8002700:	4603      	mov	r3, r0
 8002702:	63bb      	str	r3, [r7, #56]	; 0x38
		_8q2 = 8.0f * q2;
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <MadgwickAHRSupdateIMU+0x2b8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe fae9 	bl	8000ce4 <__aeabi_fmul>
 8002712:	4603      	mov	r3, r0
 8002714:	637b      	str	r3, [r7, #52]	; 0x34
		q0q0 = q0 * q0;
 8002716:	4b04      	ldr	r3, [pc, #16]	; (8002728 <MadgwickAHRSupdateIMU+0x2c0>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	e007      	b.n	800272c <MadgwickAHRSupdateIMU+0x2c4>
 800271c:	200000d0 	.word	0x200000d0
 8002720:	200000d4 	.word	0x200000d4
 8002724:	200000d8 	.word	0x200000d8
 8002728:	20000000 	.word	0x20000000
 800272c:	4b9f      	ldr	r3, [pc, #636]	; (80029ac <MadgwickAHRSupdateIMU+0x544>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4619      	mov	r1, r3
 8002732:	4610      	mov	r0, r2
 8002734:	f7fe fad6 	bl	8000ce4 <__aeabi_fmul>
 8002738:	4603      	mov	r3, r0
 800273a:	633b      	str	r3, [r7, #48]	; 0x30
		q1q1 = q1 * q1;
 800273c:	4b9c      	ldr	r3, [pc, #624]	; (80029b0 <MadgwickAHRSupdateIMU+0x548>)
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	4b9b      	ldr	r3, [pc, #620]	; (80029b0 <MadgwickAHRSupdateIMU+0x548>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4619      	mov	r1, r3
 8002746:	4610      	mov	r0, r2
 8002748:	f7fe facc 	bl	8000ce4 <__aeabi_fmul>
 800274c:	4603      	mov	r3, r0
 800274e:	62fb      	str	r3, [r7, #44]	; 0x2c
		q2q2 = q2 * q2;
 8002750:	4b98      	ldr	r3, [pc, #608]	; (80029b4 <MadgwickAHRSupdateIMU+0x54c>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	4b97      	ldr	r3, [pc, #604]	; (80029b4 <MadgwickAHRSupdateIMU+0x54c>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4619      	mov	r1, r3
 800275a:	4610      	mov	r0, r2
 800275c:	f7fe fac2 	bl	8000ce4 <__aeabi_fmul>
 8002760:	4603      	mov	r3, r0
 8002762:	62bb      	str	r3, [r7, #40]	; 0x28
		q3q3 = q3 * q3;
 8002764:	4b94      	ldr	r3, [pc, #592]	; (80029b8 <MadgwickAHRSupdateIMU+0x550>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4b93      	ldr	r3, [pc, #588]	; (80029b8 <MadgwickAHRSupdateIMU+0x550>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4619      	mov	r1, r3
 800276e:	4610      	mov	r0, r2
 8002770:	f7fe fab8 	bl	8000ce4 <__aeabi_fmul>
 8002774:	4603      	mov	r3, r0
 8002776:	627b      	str	r3, [r7, #36]	; 0x24

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 8002778:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800277a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800277c:	f7fe fab2 	bl	8000ce4 <__aeabi_fmul>
 8002780:	4603      	mov	r3, r0
 8002782:	461c      	mov	r4, r3
 8002784:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002788:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800278a:	f7fe faab 	bl	8000ce4 <__aeabi_fmul>
 800278e:	4603      	mov	r3, r0
 8002790:	4619      	mov	r1, r3
 8002792:	4620      	mov	r0, r4
 8002794:	f7fe f99e 	bl	8000ad4 <__addsf3>
 8002798:	4603      	mov	r3, r0
 800279a:	461c      	mov	r4, r3
 800279c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800279e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80027a0:	f7fe faa0 	bl	8000ce4 <__aeabi_fmul>
 80027a4:	4603      	mov	r3, r0
 80027a6:	4619      	mov	r1, r3
 80027a8:	4620      	mov	r0, r4
 80027aa:	f7fe f993 	bl	8000ad4 <__addsf3>
 80027ae:	4603      	mov	r3, r0
 80027b0:	461c      	mov	r4, r3
 80027b2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80027b6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80027b8:	f7fe fa94 	bl	8000ce4 <__aeabi_fmul>
 80027bc:	4603      	mov	r3, r0
 80027be:	4619      	mov	r1, r3
 80027c0:	4620      	mov	r0, r4
 80027c2:	f7fe f985 	bl	8000ad0 <__aeabi_fsub>
 80027c6:	4603      	mov	r3, r0
 80027c8:	623b      	str	r3, [r7, #32]
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 80027ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027cc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80027ce:	f7fe fa89 	bl	8000ce4 <__aeabi_fmul>
 80027d2:	4603      	mov	r3, r0
 80027d4:	461c      	mov	r4, r3
 80027d6:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80027da:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80027dc:	f7fe fa82 	bl	8000ce4 <__aeabi_fmul>
 80027e0:	4603      	mov	r3, r0
 80027e2:	4619      	mov	r1, r3
 80027e4:	4620      	mov	r0, r4
 80027e6:	f7fe f973 	bl	8000ad0 <__aeabi_fsub>
 80027ea:	4603      	mov	r3, r0
 80027ec:	461c      	mov	r4, r3
 80027ee:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80027f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027f4:	f7fe fa76 	bl	8000ce4 <__aeabi_fmul>
 80027f8:	4603      	mov	r3, r0
 80027fa:	461a      	mov	r2, r3
 80027fc:	4b6c      	ldr	r3, [pc, #432]	; (80029b0 <MadgwickAHRSupdateIMU+0x548>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4619      	mov	r1, r3
 8002802:	4610      	mov	r0, r2
 8002804:	f7fe fa6e 	bl	8000ce4 <__aeabi_fmul>
 8002808:	4603      	mov	r3, r0
 800280a:	4619      	mov	r1, r3
 800280c:	4620      	mov	r0, r4
 800280e:	f7fe f961 	bl	8000ad4 <__addsf3>
 8002812:	4603      	mov	r3, r0
 8002814:	461c      	mov	r4, r3
 8002816:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800281a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800281c:	f7fe fa62 	bl	8000ce4 <__aeabi_fmul>
 8002820:	4603      	mov	r3, r0
 8002822:	4619      	mov	r1, r3
 8002824:	4620      	mov	r0, r4
 8002826:	f7fe f953 	bl	8000ad0 <__aeabi_fsub>
 800282a:	4603      	mov	r3, r0
 800282c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800282e:	4618      	mov	r0, r3
 8002830:	f7fe f94e 	bl	8000ad0 <__aeabi_fsub>
 8002834:	4603      	mov	r3, r0
 8002836:	461c      	mov	r4, r3
 8002838:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800283a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800283c:	f7fe fa52 	bl	8000ce4 <__aeabi_fmul>
 8002840:	4603      	mov	r3, r0
 8002842:	4619      	mov	r1, r3
 8002844:	4620      	mov	r0, r4
 8002846:	f7fe f945 	bl	8000ad4 <__addsf3>
 800284a:	4603      	mov	r3, r0
 800284c:	461c      	mov	r4, r3
 800284e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002850:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002852:	f7fe fa47 	bl	8000ce4 <__aeabi_fmul>
 8002856:	4603      	mov	r3, r0
 8002858:	4619      	mov	r1, r3
 800285a:	4620      	mov	r0, r4
 800285c:	f7fe f93a 	bl	8000ad4 <__addsf3>
 8002860:	4603      	mov	r3, r0
 8002862:	461c      	mov	r4, r3
 8002864:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002868:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800286a:	f7fe fa3b 	bl	8000ce4 <__aeabi_fmul>
 800286e:	4603      	mov	r3, r0
 8002870:	4619      	mov	r1, r3
 8002872:	4620      	mov	r0, r4
 8002874:	f7fe f92e 	bl	8000ad4 <__addsf3>
 8002878:	4603      	mov	r3, r0
 800287a:	61fb      	str	r3, [r7, #28]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 800287c:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002880:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002882:	f7fe fa2f 	bl	8000ce4 <__aeabi_fmul>
 8002886:	4603      	mov	r3, r0
 8002888:	461a      	mov	r2, r3
 800288a:	4b4a      	ldr	r3, [pc, #296]	; (80029b4 <MadgwickAHRSupdateIMU+0x54c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4619      	mov	r1, r3
 8002890:	4610      	mov	r0, r2
 8002892:	f7fe fa27 	bl	8000ce4 <__aeabi_fmul>
 8002896:	4603      	mov	r3, r0
 8002898:	461c      	mov	r4, r3
 800289a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800289e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80028a0:	f7fe fa20 	bl	8000ce4 <__aeabi_fmul>
 80028a4:	4603      	mov	r3, r0
 80028a6:	4619      	mov	r1, r3
 80028a8:	4620      	mov	r0, r4
 80028aa:	f7fe f913 	bl	8000ad4 <__addsf3>
 80028ae:	4603      	mov	r3, r0
 80028b0:	461c      	mov	r4, r3
 80028b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028b4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80028b6:	f7fe fa15 	bl	8000ce4 <__aeabi_fmul>
 80028ba:	4603      	mov	r3, r0
 80028bc:	4619      	mov	r1, r3
 80028be:	4620      	mov	r0, r4
 80028c0:	f7fe f908 	bl	8000ad4 <__addsf3>
 80028c4:	4603      	mov	r3, r0
 80028c6:	461c      	mov	r4, r3
 80028c8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80028cc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80028ce:	f7fe fa09 	bl	8000ce4 <__aeabi_fmul>
 80028d2:	4603      	mov	r3, r0
 80028d4:	4619      	mov	r1, r3
 80028d6:	4620      	mov	r0, r4
 80028d8:	f7fe f8fa 	bl	8000ad0 <__aeabi_fsub>
 80028dc:	4603      	mov	r3, r0
 80028de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7fe f8f5 	bl	8000ad0 <__aeabi_fsub>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461c      	mov	r4, r3
 80028ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80028ee:	f7fe f9f9 	bl	8000ce4 <__aeabi_fmul>
 80028f2:	4603      	mov	r3, r0
 80028f4:	4619      	mov	r1, r3
 80028f6:	4620      	mov	r0, r4
 80028f8:	f7fe f8ec 	bl	8000ad4 <__addsf3>
 80028fc:	4603      	mov	r3, r0
 80028fe:	461c      	mov	r4, r3
 8002900:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002902:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002904:	f7fe f9ee 	bl	8000ce4 <__aeabi_fmul>
 8002908:	4603      	mov	r3, r0
 800290a:	4619      	mov	r1, r3
 800290c:	4620      	mov	r0, r4
 800290e:	f7fe f8e1 	bl	8000ad4 <__addsf3>
 8002912:	4603      	mov	r3, r0
 8002914:	461c      	mov	r4, r3
 8002916:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800291a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800291c:	f7fe f9e2 	bl	8000ce4 <__aeabi_fmul>
 8002920:	4603      	mov	r3, r0
 8002922:	4619      	mov	r1, r3
 8002924:	4620      	mov	r0, r4
 8002926:	f7fe f8d5 	bl	8000ad4 <__addsf3>
 800292a:	4603      	mov	r3, r0
 800292c:	61bb      	str	r3, [r7, #24]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800292e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002932:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002934:	f7fe f9d6 	bl	8000ce4 <__aeabi_fmul>
 8002938:	4603      	mov	r3, r0
 800293a:	461a      	mov	r2, r3
 800293c:	4b1e      	ldr	r3, [pc, #120]	; (80029b8 <MadgwickAHRSupdateIMU+0x550>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4619      	mov	r1, r3
 8002942:	4610      	mov	r0, r2
 8002944:	f7fe f9ce 	bl	8000ce4 <__aeabi_fmul>
 8002948:	4603      	mov	r3, r0
 800294a:	461c      	mov	r4, r3
 800294c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002950:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002952:	f7fe f9c7 	bl	8000ce4 <__aeabi_fmul>
 8002956:	4603      	mov	r3, r0
 8002958:	4619      	mov	r1, r3
 800295a:	4620      	mov	r0, r4
 800295c:	f7fe f8b8 	bl	8000ad0 <__aeabi_fsub>
 8002960:	4603      	mov	r3, r0
 8002962:	461c      	mov	r4, r3
 8002964:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002968:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800296a:	f7fe f9bb 	bl	8000ce4 <__aeabi_fmul>
 800296e:	4603      	mov	r3, r0
 8002970:	461a      	mov	r2, r3
 8002972:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <MadgwickAHRSupdateIMU+0x550>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4619      	mov	r1, r3
 8002978:	4610      	mov	r0, r2
 800297a:	f7fe f9b3 	bl	8000ce4 <__aeabi_fmul>
 800297e:	4603      	mov	r3, r0
 8002980:	4619      	mov	r1, r3
 8002982:	4620      	mov	r0, r4
 8002984:	f7fe f8a6 	bl	8000ad4 <__addsf3>
 8002988:	4603      	mov	r3, r0
 800298a:	461c      	mov	r4, r3
 800298c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8002990:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002992:	f7fe f9a7 	bl	8000ce4 <__aeabi_fmul>
 8002996:	4603      	mov	r3, r0
 8002998:	4619      	mov	r1, r3
 800299a:	4620      	mov	r0, r4
 800299c:	f7fe f898 	bl	8000ad0 <__aeabi_fsub>
 80029a0:	4603      	mov	r3, r0
 80029a2:	617b      	str	r3, [r7, #20]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80029a4:	6a39      	ldr	r1, [r7, #32]
 80029a6:	6a38      	ldr	r0, [r7, #32]
 80029a8:	e008      	b.n	80029bc <MadgwickAHRSupdateIMU+0x554>
 80029aa:	bf00      	nop
 80029ac:	20000000 	.word	0x20000000
 80029b0:	200000d0 	.word	0x200000d0
 80029b4:	200000d4 	.word	0x200000d4
 80029b8:	200000d8 	.word	0x200000d8
 80029bc:	f7fe f992 	bl	8000ce4 <__aeabi_fmul>
 80029c0:	4603      	mov	r3, r0
 80029c2:	461c      	mov	r4, r3
 80029c4:	69f9      	ldr	r1, [r7, #28]
 80029c6:	69f8      	ldr	r0, [r7, #28]
 80029c8:	f7fe f98c 	bl	8000ce4 <__aeabi_fmul>
 80029cc:	4603      	mov	r3, r0
 80029ce:	4619      	mov	r1, r3
 80029d0:	4620      	mov	r0, r4
 80029d2:	f7fe f87f 	bl	8000ad4 <__addsf3>
 80029d6:	4603      	mov	r3, r0
 80029d8:	461c      	mov	r4, r3
 80029da:	69b9      	ldr	r1, [r7, #24]
 80029dc:	69b8      	ldr	r0, [r7, #24]
 80029de:	f7fe f981 	bl	8000ce4 <__aeabi_fmul>
 80029e2:	4603      	mov	r3, r0
 80029e4:	4619      	mov	r1, r3
 80029e6:	4620      	mov	r0, r4
 80029e8:	f7fe f874 	bl	8000ad4 <__addsf3>
 80029ec:	4603      	mov	r3, r0
 80029ee:	461c      	mov	r4, r3
 80029f0:	6979      	ldr	r1, [r7, #20]
 80029f2:	6978      	ldr	r0, [r7, #20]
 80029f4:	f7fe f976 	bl	8000ce4 <__aeabi_fmul>
 80029f8:	4603      	mov	r3, r0
 80029fa:	4619      	mov	r1, r3
 80029fc:	4620      	mov	r0, r4
 80029fe:	f7fe f869 	bl	8000ad4 <__addsf3>
 8002a02:	4603      	mov	r3, r0
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 f90b 	bl	8002c20 <invSqrt>
 8002a0a:	65b8      	str	r0, [r7, #88]	; 0x58
		s0 *= recipNorm;
 8002a0c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002a0e:	6a38      	ldr	r0, [r7, #32]
 8002a10:	f7fe f968 	bl	8000ce4 <__aeabi_fmul>
 8002a14:	4603      	mov	r3, r0
 8002a16:	623b      	str	r3, [r7, #32]
		s1 *= recipNorm;
 8002a18:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002a1a:	69f8      	ldr	r0, [r7, #28]
 8002a1c:	f7fe f962 	bl	8000ce4 <__aeabi_fmul>
 8002a20:	4603      	mov	r3, r0
 8002a22:	61fb      	str	r3, [r7, #28]
		s2 *= recipNorm;
 8002a24:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002a26:	69b8      	ldr	r0, [r7, #24]
 8002a28:	f7fe f95c 	bl	8000ce4 <__aeabi_fmul>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	61bb      	str	r3, [r7, #24]
		s3 *= recipNorm;
 8002a30:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002a32:	6978      	ldr	r0, [r7, #20]
 8002a34:	f7fe f956 	bl	8000ce4 <__aeabi_fmul>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	617b      	str	r3, [r7, #20]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002a3c:	6a39      	ldr	r1, [r7, #32]
 8002a3e:	68f8      	ldr	r0, [r7, #12]
 8002a40:	f7fe f950 	bl	8000ce4 <__aeabi_fmul>
 8002a44:	4603      	mov	r3, r0
 8002a46:	4619      	mov	r1, r3
 8002a48:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002a4a:	f7fe f841 	bl	8000ad0 <__aeabi_fsub>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	66fb      	str	r3, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 8002a52:	69f9      	ldr	r1, [r7, #28]
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f7fe f945 	bl	8000ce4 <__aeabi_fmul>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002a60:	f7fe f836 	bl	8000ad0 <__aeabi_fsub>
 8002a64:	4603      	mov	r3, r0
 8002a66:	66bb      	str	r3, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 8002a68:	69b9      	ldr	r1, [r7, #24]
 8002a6a:	68f8      	ldr	r0, [r7, #12]
 8002a6c:	f7fe f93a 	bl	8000ce4 <__aeabi_fmul>
 8002a70:	4603      	mov	r3, r0
 8002a72:	4619      	mov	r1, r3
 8002a74:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002a76:	f7fe f82b 	bl	8000ad0 <__aeabi_fsub>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	667b      	str	r3, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 8002a7e:	6979      	ldr	r1, [r7, #20]
 8002a80:	68f8      	ldr	r0, [r7, #12]
 8002a82:	f7fe f92f 	bl	8000ce4 <__aeabi_fmul>
 8002a86:	4603      	mov	r3, r0
 8002a88:	4619      	mov	r1, r3
 8002a8a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002a8c:	f7fe f820 	bl	8000ad0 <__aeabi_fsub>
 8002a90:	4603      	mov	r3, r0
 8002a92:	663b      	str	r3, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8002a94:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002a96:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002a9a:	f7fe f9d7 	bl	8000e4c <__aeabi_fdiv>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7fe f91e 	bl	8000ce4 <__aeabi_fmul>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	461a      	mov	r2, r3
 8002aac:	4b58      	ldr	r3, [pc, #352]	; (8002c10 <MadgwickAHRSupdateIMU+0x7a8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4610      	mov	r0, r2
 8002ab4:	f7fe f80e 	bl	8000ad4 <__addsf3>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	461a      	mov	r2, r3
 8002abc:	4b54      	ldr	r3, [pc, #336]	; (8002c10 <MadgwickAHRSupdateIMU+0x7a8>)
 8002abe:	601a      	str	r2, [r3, #0]
	q1 += qDot2 * (1.0f / sampleFreq);
 8002ac0:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002ac2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002ac6:	f7fe f9c1 	bl	8000e4c <__aeabi_fdiv>
 8002aca:	4603      	mov	r3, r0
 8002acc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7fe f908 	bl	8000ce4 <__aeabi_fmul>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	4b4e      	ldr	r3, [pc, #312]	; (8002c14 <MadgwickAHRSupdateIMU+0x7ac>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4619      	mov	r1, r3
 8002ade:	4610      	mov	r0, r2
 8002ae0:	f7fd fff8 	bl	8000ad4 <__addsf3>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	4b4a      	ldr	r3, [pc, #296]	; (8002c14 <MadgwickAHRSupdateIMU+0x7ac>)
 8002aea:	601a      	str	r2, [r3, #0]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002aec:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002aee:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002af2:	f7fe f9ab 	bl	8000e4c <__aeabi_fdiv>
 8002af6:	4603      	mov	r3, r0
 8002af8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fe f8f2 	bl	8000ce4 <__aeabi_fmul>
 8002b00:	4603      	mov	r3, r0
 8002b02:	461a      	mov	r2, r3
 8002b04:	4b44      	ldr	r3, [pc, #272]	; (8002c18 <MadgwickAHRSupdateIMU+0x7b0>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	f7fd ffe2 	bl	8000ad4 <__addsf3>
 8002b10:	4603      	mov	r3, r0
 8002b12:	461a      	mov	r2, r3
 8002b14:	4b40      	ldr	r3, [pc, #256]	; (8002c18 <MadgwickAHRSupdateIMU+0x7b0>)
 8002b16:	601a      	str	r2, [r3, #0]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002b18:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002b1a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002b1e:	f7fe f995 	bl	8000e4c <__aeabi_fdiv>
 8002b22:	4603      	mov	r3, r0
 8002b24:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7fe f8dc 	bl	8000ce4 <__aeabi_fmul>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	461a      	mov	r2, r3
 8002b30:	4b3a      	ldr	r3, [pc, #232]	; (8002c1c <MadgwickAHRSupdateIMU+0x7b4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4619      	mov	r1, r3
 8002b36:	4610      	mov	r0, r2
 8002b38:	f7fd ffcc 	bl	8000ad4 <__addsf3>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	461a      	mov	r2, r3
 8002b40:	4b36      	ldr	r3, [pc, #216]	; (8002c1c <MadgwickAHRSupdateIMU+0x7b4>)
 8002b42:	601a      	str	r2, [r3, #0]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002b44:	4b32      	ldr	r3, [pc, #200]	; (8002c10 <MadgwickAHRSupdateIMU+0x7a8>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4b31      	ldr	r3, [pc, #196]	; (8002c10 <MadgwickAHRSupdateIMU+0x7a8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	4610      	mov	r0, r2
 8002b50:	f7fe f8c8 	bl	8000ce4 <__aeabi_fmul>
 8002b54:	4603      	mov	r3, r0
 8002b56:	461c      	mov	r4, r3
 8002b58:	4b2e      	ldr	r3, [pc, #184]	; (8002c14 <MadgwickAHRSupdateIMU+0x7ac>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4b2d      	ldr	r3, [pc, #180]	; (8002c14 <MadgwickAHRSupdateIMU+0x7ac>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4619      	mov	r1, r3
 8002b62:	4610      	mov	r0, r2
 8002b64:	f7fe f8be 	bl	8000ce4 <__aeabi_fmul>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4620      	mov	r0, r4
 8002b6e:	f7fd ffb1 	bl	8000ad4 <__addsf3>
 8002b72:	4603      	mov	r3, r0
 8002b74:	461c      	mov	r4, r3
 8002b76:	4b28      	ldr	r3, [pc, #160]	; (8002c18 <MadgwickAHRSupdateIMU+0x7b0>)
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	4b27      	ldr	r3, [pc, #156]	; (8002c18 <MadgwickAHRSupdateIMU+0x7b0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4610      	mov	r0, r2
 8002b82:	f7fe f8af 	bl	8000ce4 <__aeabi_fmul>
 8002b86:	4603      	mov	r3, r0
 8002b88:	4619      	mov	r1, r3
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	f7fd ffa2 	bl	8000ad4 <__addsf3>
 8002b90:	4603      	mov	r3, r0
 8002b92:	461c      	mov	r4, r3
 8002b94:	4b21      	ldr	r3, [pc, #132]	; (8002c1c <MadgwickAHRSupdateIMU+0x7b4>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	4b20      	ldr	r3, [pc, #128]	; (8002c1c <MadgwickAHRSupdateIMU+0x7b4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	f7fe f8a0 	bl	8000ce4 <__aeabi_fmul>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	4620      	mov	r0, r4
 8002baa:	f7fd ff93 	bl	8000ad4 <__addsf3>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f000 f835 	bl	8002c20 <invSqrt>
 8002bb6:	65b8      	str	r0, [r7, #88]	; 0x58
	q0 *= recipNorm;
 8002bb8:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <MadgwickAHRSupdateIMU+0x7a8>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f7fe f890 	bl	8000ce4 <__aeabi_fmul>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <MadgwickAHRSupdateIMU+0x7a8>)
 8002bca:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 8002bcc:	4b11      	ldr	r3, [pc, #68]	; (8002c14 <MadgwickAHRSupdateIMU+0x7ac>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fe f886 	bl	8000ce4 <__aeabi_fmul>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <MadgwickAHRSupdateIMU+0x7ac>)
 8002bde:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 8002be0:	4b0d      	ldr	r3, [pc, #52]	; (8002c18 <MadgwickAHRSupdateIMU+0x7b0>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002be6:	4618      	mov	r0, r3
 8002be8:	f7fe f87c 	bl	8000ce4 <__aeabi_fmul>
 8002bec:	4603      	mov	r3, r0
 8002bee:	461a      	mov	r2, r3
 8002bf0:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <MadgwickAHRSupdateIMU+0x7b0>)
 8002bf2:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 8002bf4:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <MadgwickAHRSupdateIMU+0x7b4>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7fe f872 	bl	8000ce4 <__aeabi_fmul>
 8002c00:	4603      	mov	r3, r0
 8002c02:	461a      	mov	r2, r3
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <MadgwickAHRSupdateIMU+0x7b4>)
 8002c06:	601a      	str	r2, [r3, #0]
}
 8002c08:	bf00      	nop
 8002c0a:	3774      	adds	r7, #116	; 0x74
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd90      	pop	{r4, r7, pc}
 8002c10:	20000000 	.word	0x20000000
 8002c14:	200000d0 	.word	0x200000d0
 8002c18:	200000d4 	.word	0x200000d4
 8002c1c:	200000d8 	.word	0x200000d8

08002c20 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 8002c28:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f7fe f859 	bl	8000ce4 <__aeabi_fmul>
 8002c32:	4603      	mov	r3, r0
 8002c34:	617b      	str	r3, [r7, #20]
	float y = x;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002c3a:	f107 0310 	add.w	r3, r7, #16
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	105a      	asrs	r2, r3, #1
 8002c46:	4b13      	ldr	r3, [pc, #76]	; (8002c94 <invSqrt+0x74>)
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002c4c:	f107 030c 	add.w	r3, r7, #12
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	6979      	ldr	r1, [r7, #20]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fe f843 	bl	8000ce4 <__aeabi_fmul>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	461a      	mov	r2, r3
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4619      	mov	r1, r3
 8002c66:	4610      	mov	r0, r2
 8002c68:	f7fe f83c 	bl	8000ce4 <__aeabi_fmul>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4619      	mov	r1, r3
 8002c70:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8002c74:	f7fd ff2c 	bl	8000ad0 <__aeabi_fsub>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4610      	mov	r0, r2
 8002c82:	f7fe f82f 	bl	8000ce4 <__aeabi_fmul>
 8002c86:	4603      	mov	r3, r0
 8002c88:	613b      	str	r3, [r7, #16]
	return y;
 8002c8a:	693b      	ldr	r3, [r7, #16]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3718      	adds	r7, #24
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	5f3759df 	.word	0x5f3759df

08002c98 <CRC8_SingleByte>:
 *      Author: mnowak5
 */

#include "crc.h"

byte CRC8_SingleByte(byte CRC_prev, byte Data) {
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	460a      	mov	r2, r1
 8002ca2:	71fb      	strb	r3, [r7, #7]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	71bb      	strb	r3, [r7, #6]

	CRC_prev ^= Data;
 8002ca8:	79fa      	ldrb	r2, [r7, #7]
 8002caa:	79bb      	ldrb	r3, [r7, #6]
 8002cac:	4053      	eors	r3, r2
 8002cae:	71fb      	strb	r3, [r7, #7]

	for(byte Idx = 0; Idx < 8; ++Idx) {
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	73fb      	strb	r3, [r7, #15]
 8002cb4:	e011      	b.n	8002cda <CRC8_SingleByte+0x42>

		if( (CRC_prev & 0x80) != 0 ) {
 8002cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	da07      	bge.n	8002cce <CRC8_SingleByte+0x36>

			CRC_prev = (byte)( (CRC_prev << 1) ^ POLYNOMIAL_9 );
 8002cbe:	79fb      	ldrb	r3, [r7, #7]
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	b25b      	sxtb	r3, r3
 8002cc4:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8002cc8:	b25b      	sxtb	r3, r3
 8002cca:	71fb      	strb	r3, [r7, #7]
 8002ccc:	e002      	b.n	8002cd4 <CRC8_SingleByte+0x3c>
		} else {

			CRC_prev = (byte)(CRC_prev << 1);
 8002cce:	79fb      	ldrb	r3, [r7, #7]
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	71fb      	strb	r3, [r7, #7]
	for(byte Idx = 0; Idx < 8; ++Idx) {
 8002cd4:	7bfb      	ldrb	r3, [r7, #15]
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	73fb      	strb	r3, [r7, #15]
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
 8002cdc:	2b07      	cmp	r3, #7
 8002cde:	d9ea      	bls.n	8002cb6 <CRC8_SingleByte+0x1e>
		}
	}

	return CRC_prev;
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3714      	adds	r7, #20
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bc80      	pop	{r7}
 8002cea:	4770      	bx	lr

08002cec <CRC8_DataArray>:

byte CRC8_DataArray(byte *pData, byte Len) {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b084      	sub	sp, #16
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	70fb      	strb	r3, [r7, #3]

	byte CRC_final = 0xFF;
 8002cf8:	23ff      	movs	r3, #255	; 0xff
 8002cfa:	73fb      	strb	r3, [r7, #15]

	for(byte Idx = 0; Idx < Len; ++Idx) {
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	73bb      	strb	r3, [r7, #14]
 8002d00:	e00d      	b.n	8002d1e <CRC8_DataArray+0x32>

		CRC_final = CRC8_SingleByte(CRC_final, pData[Idx]);
 8002d02:	7bbb      	ldrb	r3, [r7, #14]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	4413      	add	r3, r2
 8002d08:	781a      	ldrb	r2, [r3, #0]
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
 8002d0c:	4611      	mov	r1, r2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff ffc2 	bl	8002c98 <CRC8_SingleByte>
 8002d14:	4603      	mov	r3, r0
 8002d16:	73fb      	strb	r3, [r7, #15]
	for(byte Idx = 0; Idx < Len; ++Idx) {
 8002d18:	7bbb      	ldrb	r3, [r7, #14]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	73bb      	strb	r3, [r7, #14]
 8002d1e:	7bba      	ldrb	r2, [r7, #14]
 8002d20:	78fb      	ldrb	r3, [r7, #3]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d3ed      	bcc.n	8002d02 <CRC8_DataArray+0x16>
	}

	return CRC_final;
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d36:	4b18      	ldr	r3, [pc, #96]	; (8002d98 <MX_DMA_Init+0x68>)
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	4a17      	ldr	r2, [pc, #92]	; (8002d98 <MX_DMA_Init+0x68>)
 8002d3c:	f043 0301 	orr.w	r3, r3, #1
 8002d40:	6153      	str	r3, [r2, #20]
 8002d42:	4b15      	ldr	r3, [pc, #84]	; (8002d98 <MX_DMA_Init+0x68>)
 8002d44:	695b      	ldr	r3, [r3, #20]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	607b      	str	r3, [r7, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8002d4e:	2200      	movs	r2, #0
 8002d50:	2105      	movs	r1, #5
 8002d52:	200e      	movs	r0, #14
 8002d54:	f003 fbbd 	bl	80064d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002d58:	200e      	movs	r0, #14
 8002d5a:	f003 fbd6 	bl	800650a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2105      	movs	r1, #5
 8002d62:	200f      	movs	r0, #15
 8002d64:	f003 fbb5 	bl	80064d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002d68:	200f      	movs	r0, #15
 8002d6a:	f003 fbce 	bl	800650a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8002d6e:	2200      	movs	r2, #0
 8002d70:	2105      	movs	r1, #5
 8002d72:	2010      	movs	r0, #16
 8002d74:	f003 fbad 	bl	80064d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002d78:	2010      	movs	r0, #16
 8002d7a:	f003 fbc6 	bl	800650a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2105      	movs	r1, #5
 8002d82:	2011      	movs	r0, #17
 8002d84:	f003 fba5 	bl	80064d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002d88:	2011      	movs	r0, #17
 8002d8a:	f003 fbbe 	bl	800650a <HAL_NVIC_EnableIRQ>

}
 8002d8e:	bf00      	nop
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40021000 	.word	0x40021000

08002d9c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4a06      	ldr	r2, [pc, #24]	; (8002dc4 <vApplicationGetIdleTaskMemory+0x28>)
 8002dac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	4a05      	ldr	r2, [pc, #20]	; (8002dc8 <vApplicationGetIdleTaskMemory+0x2c>)
 8002db2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2280      	movs	r2, #128	; 0x80
 8002db8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8002dba:	bf00      	nop
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr
 8002dc4:	2000016c 	.word	0x2000016c
 8002dc8:	200001c0 	.word	0x200001c0

08002dcc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002dcc:	b5b0      	push	{r4, r5, r7, lr}
 8002dce:	b08e      	sub	sp, #56	; 0x38
 8002dd0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of USART_Task */
  osThreadDef(USART_Task, Start_USART_Task, osPriorityNormal, 0, 512);
 8002dd2:	4b14      	ldr	r3, [pc, #80]	; (8002e24 <MX_FREERTOS_Init+0x58>)
 8002dd4:	f107 041c 	add.w	r4, r7, #28
 8002dd8:	461d      	mov	r5, r3
 8002dda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ddc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002dde:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002de2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USART_TaskHandle = osThreadCreate(osThread(USART_Task), NULL);
 8002de6:	f107 031c 	add.w	r3, r7, #28
 8002dea:	2100      	movs	r1, #0
 8002dec:	4618      	mov	r0, r3
 8002dee:	f006 f9e5 	bl	80091bc <osThreadCreate>
 8002df2:	4602      	mov	r2, r0
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <MX_FREERTOS_Init+0x5c>)
 8002df6:	601a      	str	r2, [r3, #0]

  /* definition and creation of IMU_Task */
  osThreadDef(IMU_Task, Start_IMU_Task, osPriorityRealtime, 0, 512);
 8002df8:	4b0c      	ldr	r3, [pc, #48]	; (8002e2c <MX_FREERTOS_Init+0x60>)
 8002dfa:	463c      	mov	r4, r7
 8002dfc:	461d      	mov	r5, r3
 8002dfe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IMU_TaskHandle = osThreadCreate(osThread(IMU_Task), NULL);
 8002e0a:	463b      	mov	r3, r7
 8002e0c:	2100      	movs	r1, #0
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f006 f9d4 	bl	80091bc <osThreadCreate>
 8002e14:	4602      	mov	r2, r0
 8002e16:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <MX_FREERTOS_Init+0x64>)
 8002e18:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002e1a:	bf00      	nop
 8002e1c:	3738      	adds	r7, #56	; 0x38
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bdb0      	pop	{r4, r5, r7, pc}
 8002e22:	bf00      	nop
 8002e24:	0800c54c 	.word	0x0800c54c
 8002e28:	20003434 	.word	0x20003434
 8002e2c:	0800c574 	.word	0x0800c574
 8002e30:	20003430 	.word	0x20003430

08002e34 <Start_USART_Task>:
* @brief Function implementing the USART_Task thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USART_Task */
void Start_USART_Task(void const *argument) {
 8002e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e36:	b08b      	sub	sp, #44	; 0x2c
 8002e38:	af08      	add	r7, sp, #32
 8002e3a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_USART_Task */

	/* Start receiving */
	HAL_UART_Receive_DMA(HC05_handle, Data_from_PC, DATA_FRAME_FROM_PC_SIZE);
 8002e3c:	4b18      	ldr	r3, [pc, #96]	; (8002ea0 <Start_USART_Task+0x6c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	220a      	movs	r2, #10
 8002e42:	4918      	ldr	r1, [pc, #96]	; (8002ea4 <Start_USART_Task+0x70>)
 8002e44:	4618      	mov	r0, r3
 8002e46:	f005 fd29 	bl	800889c <HAL_UART_Receive_DMA>

	/* Infinite loop */
	for (;;) {

		HC05_Fill_Data_frame_to_PC(&DT_PC, Data_to_PC,
 8002e4a:	4b17      	ldr	r3, [pc, #92]	; (8002ea8 <Start_USART_Task+0x74>)
 8002e4c:	681d      	ldr	r5, [r3, #0]
 8002e4e:	4b17      	ldr	r3, [pc, #92]	; (8002eac <Start_USART_Task+0x78>)
 8002e50:	681e      	ldr	r6, [r3, #0]
 8002e52:	4b17      	ldr	r3, [pc, #92]	; (8002eb0 <Start_USART_Task+0x7c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a17      	ldr	r2, [pc, #92]	; (8002eb4 <Start_USART_Task+0x80>)
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	4917      	ldr	r1, [pc, #92]	; (8002eb8 <Start_USART_Task+0x84>)
 8002e5c:	6809      	ldr	r1, [r1, #0]
 8002e5e:	4817      	ldr	r0, [pc, #92]	; (8002ebc <Start_USART_Task+0x88>)
 8002e60:	6800      	ldr	r0, [r0, #0]
 8002e62:	f04f 0400 	mov.w	r4, #0
 8002e66:	9406      	str	r4, [sp, #24]
 8002e68:	9005      	str	r0, [sp, #20]
 8002e6a:	9104      	str	r1, [sp, #16]
 8002e6c:	f04f 0100 	mov.w	r1, #0
 8002e70:	9103      	str	r1, [sp, #12]
 8002e72:	9202      	str	r2, [sp, #8]
 8002e74:	9301      	str	r3, [sp, #4]
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	4633      	mov	r3, r6
 8002e7e:	462a      	mov	r2, r5
 8002e80:	490f      	ldr	r1, [pc, #60]	; (8002ec0 <Start_USART_Task+0x8c>)
 8002e82:	4810      	ldr	r0, [pc, #64]	; (8002ec4 <Start_USART_Task+0x90>)
 8002e84:	f000 fb34 	bl	80034f0 <HC05_Fill_Data_frame_to_PC>
				Complementary_Roll_global, Complementary_Pitch_global, /*Complementary_Yaw_global*/0,
				Kalman_Roll_global, Kalman_Pitch_global, /*Kalman_Yaw_global*/0,
				Madgwick_Roll_global, Madgwick_Pitch_global, /*Madgwick_Yaw_global*/0);

		HAL_UART_Transmit_DMA(HC05_handle, Data_to_PC, DATA_FRAME_TO_PC_SIZE);
 8002e88:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <Start_USART_Task+0x6c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2215      	movs	r2, #21
 8002e8e:	490c      	ldr	r1, [pc, #48]	; (8002ec0 <Start_USART_Task+0x8c>)
 8002e90:	4618      	mov	r0, r3
 8002e92:	f005 fc97 	bl	80087c4 <HAL_UART_Transmit_DMA>

		osDelay(10);
 8002e96:	200a      	movs	r0, #10
 8002e98:	f006 f9dc 	bl	8009254 <osDelay>
		HC05_Fill_Data_frame_to_PC(&DT_PC, Data_to_PC,
 8002e9c:	e7d5      	b.n	8002e4a <Start_USART_Task+0x16>
 8002e9e:	bf00      	nop
 8002ea0:	20000020 	.word	0x20000020
 8002ea4:	20003438 	.word	0x20003438
 8002ea8:	20000140 	.word	0x20000140
 8002eac:	20000144 	.word	0x20000144
 8002eb0:	2000014c 	.word	0x2000014c
 8002eb4:	20000150 	.word	0x20000150
 8002eb8:	20000158 	.word	0x20000158
 8002ebc:	2000015c 	.word	0x2000015c
 8002ec0:	20003444 	.word	0x20003444
 8002ec4:	2000345c 	.word	0x2000345c

08002ec8 <Start_IMU_Task>:
* @brief Function implementing the IMU_Task thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_IMU_Task */
void Start_IMU_Task(void const *argument) {
 8002ec8:	b5b0      	push	{r4, r5, r7, lr}
 8002eca:	f5ad 7d2a 	sub.w	sp, sp, #680	; 0x2a8
 8002ece:	af02      	add	r7, sp, #8
 8002ed0:	1d3b      	adds	r3, r7, #4
 8002ed2:	6018      	str	r0, [r3, #0]
	/* USER CODE BEGIN Start_IMU_Task */

	/* IMU task variables */
	uint8_t mpu9250_correct_init_global = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f887 329f 	strb.w	r3, [r7, #671]	; 0x29f

	struct MPU9250 mpu1;

	uint32_t I_Time_Stop = 0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
	uint32_t I_Time_Start = 0;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c

	/* IMU task initialization */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002ee6:	2120      	movs	r1, #32
 8002ee8:	485d      	ldr	r0, [pc, #372]	; (8003060 <Start_IMU_Task+0x198>)
 8002eea:	f003 ff16 	bl	8006d1a <HAL_GPIO_TogglePin>
	osDelay(100);
 8002eee:	2064      	movs	r0, #100	; 0x64
 8002ef0:	f006 f9b0 	bl	8009254 <osDelay>

	if (MPU9250_Init(&hi2c1, &mpu1, MPU9250_Device_1, MPU9250_Acce_2G,
 8002ef4:	f107 0108 	add.w	r1, r7, #8
 8002ef8:	2303      	movs	r3, #3
 8002efa:	9300      	str	r3, [sp, #0]
 8002efc:	2300      	movs	r3, #0
 8002efe:	2200      	movs	r2, #0
 8002f00:	4858      	ldr	r0, [pc, #352]	; (8003064 <Start_IMU_Task+0x19c>)
 8002f02:	f001 fadd 	bl	80044c0 <MPU9250_Init>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d16e      	bne.n	8002fea <Start_IMU_Task+0x122>
			MPU9250_Gyro_2000s) == MPU9250_Init_OK) {

		//MPU9250_Set_Offsets(&hi2c1, &mpu1, 0,0,0, 0,0,0, 27.5,0.97,0.95, 1.07,1,1);

		MPU9250_Calibration_Acce(&hi2c1, &mpu1);
 8002f0c:	f107 0308 	add.w	r3, r7, #8
 8002f10:	4619      	mov	r1, r3
 8002f12:	4854      	ldr	r0, [pc, #336]	; (8003064 <Start_IMU_Task+0x19c>)
 8002f14:	f001 fd88 	bl	8004a28 <MPU9250_Calibration_Acce>
		MPU9250_Calibration_Gyro(&hi2c1, &mpu1);
 8002f18:	f107 0308 	add.w	r3, r7, #8
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4851      	ldr	r0, [pc, #324]	; (8003064 <Start_IMU_Task+0x19c>)
 8002f20:	f001 fdf4 	bl	8004b0c <MPU9250_Calibration_Gyro>
		MPU9250_Calibration_Mag(&hi2c1, &mpu1);
 8002f24:	f107 0308 	add.w	r3, r7, #8
 8002f28:	4619      	mov	r1, r3
 8002f2a:	484e      	ldr	r0, [pc, #312]	; (8003064 <Start_IMU_Task+0x19c>)
 8002f2c:	f001 fe50 	bl	8004bd0 <MPU9250_Calibration_Mag>

		a_x_offset_global = mpu1.Accelerometer_X_offset, a_y_offset_global = mpu1.Accelerometer_Y_offset, a_z_offset_global = mpu1.Accelerometer_Z_offset;
 8002f30:	f107 0308 	add.w	r3, r7, #8
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	4a4c      	ldr	r2, [pc, #304]	; (8003068 <Start_IMU_Task+0x1a0>)
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	f107 0308 	add.w	r3, r7, #8
 8002f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f40:	4a4a      	ldr	r2, [pc, #296]	; (800306c <Start_IMU_Task+0x1a4>)
 8002f42:	6013      	str	r3, [r2, #0]
 8002f44:	f107 0308 	add.w	r3, r7, #8
 8002f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f4a:	4a49      	ldr	r2, [pc, #292]	; (8003070 <Start_IMU_Task+0x1a8>)
 8002f4c:	6013      	str	r3, [r2, #0]
		g_x_offset_global = mpu1.Gyroscope_X_offset, g_y_offset_global = mpu1.Gyroscope_Y_offset, g_z_offset_global = mpu1.Gyroscope_Z_offset;
 8002f4e:	f107 0308 	add.w	r3, r7, #8
 8002f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f54:	4a47      	ldr	r2, [pc, #284]	; (8003074 <Start_IMU_Task+0x1ac>)
 8002f56:	6013      	str	r3, [r2, #0]
 8002f58:	f107 0308 	add.w	r3, r7, #8
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	4a46      	ldr	r2, [pc, #280]	; (8003078 <Start_IMU_Task+0x1b0>)
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	f107 0308 	add.w	r3, r7, #8
 8002f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f68:	4a44      	ldr	r2, [pc, #272]	; (800307c <Start_IMU_Task+0x1b4>)
 8002f6a:	6013      	str	r3, [r2, #0]
		m_x_offset_global = mpu1.Magnetometer_X_offset, m_y_offset_global = mpu1.Magnetometer_Y_offset, m_z_offset_global = mpu1.Magnetometer_Z_offset;
 8002f6c:	f107 0308 	add.w	r3, r7, #8
 8002f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f72:	4a43      	ldr	r2, [pc, #268]	; (8003080 <Start_IMU_Task+0x1b8>)
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	f107 0308 	add.w	r3, r7, #8
 8002f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f7c:	4a41      	ldr	r2, [pc, #260]	; (8003084 <Start_IMU_Task+0x1bc>)
 8002f7e:	6013      	str	r3, [r2, #0]
 8002f80:	f107 0308 	add.w	r3, r7, #8
 8002f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f86:	4a40      	ldr	r2, [pc, #256]	; (8003088 <Start_IMU_Task+0x1c0>)
 8002f88:	6013      	str	r3, [r2, #0]
		m_x_scale_global = mpu1.Magnetometer_X_scale, m_y_offset_global = mpu1.Magnetometer_Y_scale, m_z_offset_global = mpu1.Magnetometer_Z_scale;
 8002f8a:	f107 0308 	add.w	r3, r7, #8
 8002f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f90:	4a3e      	ldr	r2, [pc, #248]	; (800308c <Start_IMU_Task+0x1c4>)
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	f107 0308 	add.w	r3, r7, #8
 8002f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f9a:	4a3a      	ldr	r2, [pc, #232]	; (8003084 <Start_IMU_Task+0x1bc>)
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	f107 0308 	add.w	r3, r7, #8
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa4:	4a38      	ldr	r2, [pc, #224]	; (8003088 <Start_IMU_Task+0x1c0>)
 8002fa6:	6013      	str	r3, [r2, #0]

		for (int i = 0; i < 3; ++i) {
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8002fae:	e014      	b.n	8002fda <Start_IMU_Task+0x112>

			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	2120      	movs	r1, #32
 8002fb4:	482a      	ldr	r0, [pc, #168]	; (8003060 <Start_IMU_Task+0x198>)
 8002fb6:	f003 fe98 	bl	8006cea <HAL_GPIO_WritePin>
			osDelay(200);
 8002fba:	20c8      	movs	r0, #200	; 0xc8
 8002fbc:	f006 f94a 	bl	8009254 <osDelay>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	2120      	movs	r1, #32
 8002fc4:	4826      	ldr	r0, [pc, #152]	; (8003060 <Start_IMU_Task+0x198>)
 8002fc6:	f003 fe90 	bl	8006cea <HAL_GPIO_WritePin>
			osDelay(200);
 8002fca:	20c8      	movs	r0, #200	; 0xc8
 8002fcc:	f006 f942 	bl	8009254 <osDelay>
		for (int i = 0; i < 3; ++i) {
 8002fd0:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8002fda:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	dde6      	ble.n	8002fb0 <Start_IMU_Task+0xe8>
		}

		mpu9250_correct_init_global = 1;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	f887 329f 	strb.w	r3, [r7, #671]	; 0x29f
 8002fe8:	e002      	b.n	8002ff0 <Start_IMU_Task+0x128>
	} else {

		mpu9250_correct_init_global = 0;
 8002fea:	2300      	movs	r3, #0
 8002fec:	f887 329f 	strb.w	r3, [r7, #671]	; 0x29f
	}

	osDelay(100);
 8002ff0:	2064      	movs	r0, #100	; 0x64
 8002ff2:	f006 f92f 	bl	8009254 <osDelay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002ff6:	2120      	movs	r1, #32
 8002ff8:	4819      	ldr	r0, [pc, #100]	; (8003060 <Start_IMU_Task+0x198>)
 8002ffa:	f003 fe8e 	bl	8006d1a <HAL_GPIO_TogglePin>

	while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != GPIO_PIN_RESET) {
 8002ffe:	e002      	b.n	8003006 <Start_IMU_Task+0x13e>

		osDelay(10);
 8003000:	200a      	movs	r0, #10
 8003002:	f006 f927 	bl	8009254 <osDelay>
	while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) != GPIO_PIN_RESET) {
 8003006:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800300a:	4821      	ldr	r0, [pc, #132]	; (8003090 <Start_IMU_Task+0x1c8>)
 800300c:	f003 fe56 	bl	8006cbc <HAL_GPIO_ReadPin>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1f4      	bne.n	8003000 <Start_IMU_Task+0x138>
	}

	MPU9250_Calculate_RPY(&hi2c1, &mpu1, dt);
 8003016:	4b1f      	ldr	r3, [pc, #124]	; (8003094 <Start_IMU_Task+0x1cc>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	f107 0308 	add.w	r3, r7, #8
 800301e:	4619      	mov	r1, r3
 8003020:	4810      	ldr	r0, [pc, #64]	; (8003064 <Start_IMU_Task+0x19c>)
 8003022:	f001 fefd 	bl	8004e20 <MPU9250_Calculate_RPY>
	mpu1.Gyroscope_Roll  = mpu1.Accelerometer_Roll;
 8003026:	f107 0308 	add.w	r3, r7, #8
 800302a:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800302e:	f107 0308 	add.w	r3, r7, #8
 8003032:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	mpu1.Gyroscope_Pitch = mpu1.Accelerometer_Pitch;
 8003036:	f107 0308 	add.w	r3, r7, #8
 800303a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800303e:	f107 0308 	add.w	r3, r7, #8
 8003042:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	mpu1.Gyroscope_Yaw   = mpu1.Magnetometer_Yaw;
 8003046:	f107 0308 	add.w	r3, r7, #8
 800304a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800304e:	f107 0308 	add.w	r3, r7, #8
 8003052:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	for(int i = 0; i < 1000; ++i) {
 8003056:	2300      	movs	r3, #0
 8003058:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 800305c:	e039      	b.n	80030d2 <Start_IMU_Task+0x20a>
 800305e:	bf00      	nop
 8003060:	40010800 	.word	0x40010800
 8003064:	200034b4 	.word	0x200034b4
 8003068:	20000118 	.word	0x20000118
 800306c:	2000011c 	.word	0x2000011c
 8003070:	20000120 	.word	0x20000120
 8003074:	20000124 	.word	0x20000124
 8003078:	20000128 	.word	0x20000128
 800307c:	2000012c 	.word	0x2000012c
 8003080:	20000130 	.word	0x20000130
 8003084:	20000134 	.word	0x20000134
 8003088:	20000138 	.word	0x20000138
 800308c:	2000013c 	.word	0x2000013c
 8003090:	40011000 	.word	0x40011000
 8003094:	20000164 	.word	0x20000164

		MPU9250_Calculate_RPY(&hi2c1, &mpu1, dt);
 8003098:	4b83      	ldr	r3, [pc, #524]	; (80032a8 <Start_IMU_Task+0x3e0>)
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	f107 0308 	add.w	r3, r7, #8
 80030a0:	4619      	mov	r1, r3
 80030a2:	4882      	ldr	r0, [pc, #520]	; (80032ac <Start_IMU_Task+0x3e4>)
 80030a4:	f001 febc 	bl	8004e20 <MPU9250_Calculate_RPY>
		mpu1.Magnetometer_Yaw_offset += mpu1.Magnetometer_Yaw;
 80030a8:	f107 0308 	add.w	r3, r7, #8
 80030ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030ae:	f107 0308 	add.w	r3, r7, #8
 80030b2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80030b6:	4619      	mov	r1, r3
 80030b8:	4610      	mov	r0, r2
 80030ba:	f7fd fd0b 	bl	8000ad4 <__addsf3>
 80030be:	4603      	mov	r3, r0
 80030c0:	461a      	mov	r2, r3
 80030c2:	f107 0308 	add.w	r3, r7, #8
 80030c6:	661a      	str	r2, [r3, #96]	; 0x60
	for(int i = 0; i < 1000; ++i) {
 80030c8:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80030cc:	3301      	adds	r3, #1
 80030ce:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 80030d2:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80030d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030da:	dbdd      	blt.n	8003098 <Start_IMU_Task+0x1d0>
	}
	mpu1.Magnetometer_Yaw_offset = mpu1.Magnetometer_Yaw_offset / 1000;
 80030dc:	f107 0308 	add.w	r3, r7, #8
 80030e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e2:	4973      	ldr	r1, [pc, #460]	; (80032b0 <Start_IMU_Task+0x3e8>)
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fd feb1 	bl	8000e4c <__aeabi_fdiv>
 80030ea:	4603      	mov	r3, r0
 80030ec:	461a      	mov	r2, r3
 80030ee:	f107 0308 	add.w	r3, r7, #8
 80030f2:	661a      	str	r2, [r3, #96]	; 0x60

	/* Infinite loop */
	for (;;) {
		if (mpu9250_correct_init_global == 1) {
 80030f4:	f897 329f 	ldrb.w	r3, [r7, #671]	; 0x29f
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	f040 80d0 	bne.w	800329e <Start_IMU_Task+0x3d6>

			/* Case 1: Time measurement */
			I_Time_Start = I_Time_Stop;
 80030fe:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8003102:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
			I_Time_Stop = HAL_GetTick();
 8003106:	f003 f8e1 	bl	80062cc <HAL_GetTick>
 800310a:	f8c7 0298 	str.w	r0, [r7, #664]	; 0x298

			dt = (float) (I_Time_Stop - I_Time_Start) / 1000;
 800310e:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8003112:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	4618      	mov	r0, r3
 800311a:	f7fd fd8b 	bl	8000c34 <__aeabi_ui2f>
 800311e:	4603      	mov	r3, r0
 8003120:	4963      	ldr	r1, [pc, #396]	; (80032b0 <Start_IMU_Task+0x3e8>)
 8003122:	4618      	mov	r0, r3
 8003124:	f7fd fe92 	bl	8000e4c <__aeabi_fdiv>
 8003128:	4603      	mov	r3, r0
 800312a:	461a      	mov	r2, r3
 800312c:	4b5e      	ldr	r3, [pc, #376]	; (80032a8 <Start_IMU_Task+0x3e0>)
 800312e:	601a      	str	r2, [r3, #0]

			/* Case 2: RPY calculation */
			MPU9250_Calculate_RPY(&hi2c1, &mpu1, dt);
 8003130:	4b5d      	ldr	r3, [pc, #372]	; (80032a8 <Start_IMU_Task+0x3e0>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	f107 0308 	add.w	r3, r7, #8
 8003138:	4619      	mov	r1, r3
 800313a:	485c      	ldr	r0, [pc, #368]	; (80032ac <Start_IMU_Task+0x3e4>)
 800313c:	f001 fe70 	bl	8004e20 <MPU9250_Calculate_RPY>

			a_x_g_global = mpu1.Accelerometer_X_g, a_y_g_global = mpu1.Accelerometer_Y_g, a_z_g_global = mpu1.Accelerometer_Z_g;
 8003140:	f107 0308 	add.w	r3, r7, #8
 8003144:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003146:	4a5b      	ldr	r2, [pc, #364]	; (80032b4 <Start_IMU_Task+0x3ec>)
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	f107 0308 	add.w	r3, r7, #8
 800314e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003150:	4a59      	ldr	r2, [pc, #356]	; (80032b8 <Start_IMU_Task+0x3f0>)
 8003152:	6013      	str	r3, [r2, #0]
 8003154:	f107 0308 	add.w	r3, r7, #8
 8003158:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800315a:	4a58      	ldr	r2, [pc, #352]	; (80032bc <Start_IMU_Task+0x3f4>)
 800315c:	6013      	str	r3, [r2, #0]
			g_x_dgs_global = mpu1.Gyroscope_X_dgs, g_y_dgs_global = mpu1.Gyroscope_Y_dgs, g_z_dgs_global = mpu1.Gyroscope_Z_dgs;
 800315e:	f107 0308 	add.w	r3, r7, #8
 8003162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003164:	4a56      	ldr	r2, [pc, #344]	; (80032c0 <Start_IMU_Task+0x3f8>)
 8003166:	6013      	str	r3, [r2, #0]
 8003168:	f107 0308 	add.w	r3, r7, #8
 800316c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800316e:	4a55      	ldr	r2, [pc, #340]	; (80032c4 <Start_IMU_Task+0x3fc>)
 8003170:	6013      	str	r3, [r2, #0]
 8003172:	f107 0308 	add.w	r3, r7, #8
 8003176:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003178:	4a53      	ldr	r2, [pc, #332]	; (80032c8 <Start_IMU_Task+0x400>)
 800317a:	6013      	str	r3, [r2, #0]
			m_x_uT_global = mpu1.Magnetometer_X_uT, m_y_uT_global = mpu1.Magnetometer_Y_uT, m_z_uT_global = mpu1.Magnetometer_Z_uT;
 800317c:	f107 0308 	add.w	r3, r7, #8
 8003180:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003184:	4a51      	ldr	r2, [pc, #324]	; (80032cc <Start_IMU_Task+0x404>)
 8003186:	6013      	str	r3, [r2, #0]
 8003188:	f107 0308 	add.w	r3, r7, #8
 800318c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003190:	4a4f      	ldr	r2, [pc, #316]	; (80032d0 <Start_IMU_Task+0x408>)
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	f107 0308 	add.w	r3, r7, #8
 8003198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800319c:	4a4d      	ldr	r2, [pc, #308]	; (80032d4 <Start_IMU_Task+0x40c>)
 800319e:	6013      	str	r3, [r2, #0]

			a_roll_global = mpu1.Accelerometer_Roll, a_pitch_global = mpu1.Accelerometer_Pitch;
 80031a0:	f107 0308 	add.w	r3, r7, #8
 80031a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a8:	4a4b      	ldr	r2, [pc, #300]	; (80032d8 <Start_IMU_Task+0x410>)
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	f107 0308 	add.w	r3, r7, #8
 80031b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031b4:	4a49      	ldr	r2, [pc, #292]	; (80032dc <Start_IMU_Task+0x414>)
 80031b6:	6013      	str	r3, [r2, #0]
			g_roll_global = mpu1.Gyroscope_Roll, g_pitch_global = mpu1.Gyroscope_Pitch, g_yaw_global = mpu1.Gyroscope_Yaw;
 80031b8:	f107 0308 	add.w	r3, r7, #8
 80031bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031c0:	4a47      	ldr	r2, [pc, #284]	; (80032e0 <Start_IMU_Task+0x418>)
 80031c2:	6013      	str	r3, [r2, #0]
 80031c4:	f107 0308 	add.w	r3, r7, #8
 80031c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80031cc:	4a45      	ldr	r2, [pc, #276]	; (80032e4 <Start_IMU_Task+0x41c>)
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	f107 0308 	add.w	r3, r7, #8
 80031d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80031d8:	4a43      	ldr	r2, [pc, #268]	; (80032e8 <Start_IMU_Task+0x420>)
 80031da:	6013      	str	r3, [r2, #0]
			m_yaw_global = mpu1.Magnetometer_Yaw;
 80031dc:	f107 0308 	add.w	r3, r7, #8
 80031e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80031e4:	4a41      	ldr	r2, [pc, #260]	; (80032ec <Start_IMU_Task+0x424>)
 80031e6:	6013      	str	r3, [r2, #0]

			/* Case 3: Filters using */
			Complementary_filter(&mpu1, Filter_weight_RP_global, Filter_weight_Y_global, dt);
 80031e8:	4b41      	ldr	r3, [pc, #260]	; (80032f0 <Start_IMU_Task+0x428>)
 80031ea:	6819      	ldr	r1, [r3, #0]
 80031ec:	4b41      	ldr	r3, [pc, #260]	; (80032f4 <Start_IMU_Task+0x42c>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4b2d      	ldr	r3, [pc, #180]	; (80032a8 <Start_IMU_Task+0x3e0>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f107 0008 	add.w	r0, r7, #8
 80031f8:	f002 fbb6 	bl	8005968 <Complementary_filter>
			Kalman_filter(&mpu1,
 80031fc:	4b3e      	ldr	r3, [pc, #248]	; (80032f8 <Start_IMU_Task+0x430>)
 80031fe:	6819      	ldr	r1, [r3, #0]
 8003200:	4b3e      	ldr	r3, [pc, #248]	; (80032fc <Start_IMU_Task+0x434>)
 8003202:	681c      	ldr	r4, [r3, #0]
 8003204:	4b3e      	ldr	r3, [pc, #248]	; (8003300 <Start_IMU_Task+0x438>)
 8003206:	681d      	ldr	r5, [r3, #0]
 8003208:	4b3e      	ldr	r3, [pc, #248]	; (8003304 <Start_IMU_Task+0x43c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a26      	ldr	r2, [pc, #152]	; (80032a8 <Start_IMU_Task+0x3e0>)
 800320e:	6812      	ldr	r2, [r2, #0]
 8003210:	f107 0008 	add.w	r0, r7, #8
 8003214:	9201      	str	r2, [sp, #4]
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	462b      	mov	r3, r5
 800321a:	4622      	mov	r2, r4
 800321c:	f002 fc54 	bl	8005ac8 <Kalman_filter>
						  Kalman_filter_process_variance_RP, Kalman_filter_measure_variance_RP,
						  Kalman_filter_process_variance_Y, Kalman_filter_measure_variance_Y,
						  dt);
			Madgwick_filter(&mpu1, Madgwick_filter_beta, dt);
 8003220:	4b39      	ldr	r3, [pc, #228]	; (8003308 <Start_IMU_Task+0x440>)
 8003222:	6819      	ldr	r1, [r3, #0]
 8003224:	4b20      	ldr	r3, [pc, #128]	; (80032a8 <Start_IMU_Task+0x3e0>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	f107 0308 	add.w	r3, r7, #8
 800322c:	4618      	mov	r0, r3
 800322e:	f002 fce3 	bl	8005bf8 <Madgwick_filter>
					Filter_Pitch_global = mpu1.Mahony_filter_Pitch;
					Filter_Yaw_global   = mpu1.Mahony_filter_Yaw - mpu1.Magnetometer_Yaw_offset;
					break;
			}
			*/
			Complementary_Roll_global  = mpu1.Complementary_filter_Roll;
 8003232:	f107 0308 	add.w	r3, r7, #8
 8003236:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800323a:	4a34      	ldr	r2, [pc, #208]	; (800330c <Start_IMU_Task+0x444>)
 800323c:	6013      	str	r3, [r2, #0]
			Complementary_Pitch_global = mpu1.Complementary_filter_Pitch;
 800323e:	f107 0308 	add.w	r3, r7, #8
 8003242:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003246:	4a32      	ldr	r2, [pc, #200]	; (8003310 <Start_IMU_Task+0x448>)
 8003248:	6013      	str	r3, [r2, #0]
			Complementary_Yaw_global   = mpu1.Complementary_filter_Yaw;
 800324a:	f107 0308 	add.w	r3, r7, #8
 800324e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003252:	4a30      	ldr	r2, [pc, #192]	; (8003314 <Start_IMU_Task+0x44c>)
 8003254:	6013      	str	r3, [r2, #0]

			Kalman_Roll_global  = mpu1.Kalman_filter_Roll;
 8003256:	f107 0308 	add.w	r3, r7, #8
 800325a:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
 800325e:	4a2e      	ldr	r2, [pc, #184]	; (8003318 <Start_IMU_Task+0x450>)
 8003260:	6013      	str	r3, [r2, #0]
			Kalman_Pitch_global = mpu1.Kalman_filter_Pitch;
 8003262:	f107 0308 	add.w	r3, r7, #8
 8003266:	f8d3 325c 	ldr.w	r3, [r3, #604]	; 0x25c
 800326a:	4a2c      	ldr	r2, [pc, #176]	; (800331c <Start_IMU_Task+0x454>)
 800326c:	6013      	str	r3, [r2, #0]
			Kalman_Yaw_global   = mpu1.Kalman_filter_Yaw;
 800326e:	f107 0308 	add.w	r3, r7, #8
 8003272:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
 8003276:	4a2a      	ldr	r2, [pc, #168]	; (8003320 <Start_IMU_Task+0x458>)
 8003278:	6013      	str	r3, [r2, #0]

			Madgwick_Roll_global  = mpu1.Madgwick_filter_Roll;
 800327a:	f107 0308 	add.w	r3, r7, #8
 800327e:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
 8003282:	4a28      	ldr	r2, [pc, #160]	; (8003324 <Start_IMU_Task+0x45c>)
 8003284:	6013      	str	r3, [r2, #0]
			Madgwick_Pitch_global = mpu1.Madgwick_filter_Pitch;
 8003286:	f107 0308 	add.w	r3, r7, #8
 800328a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800328e:	4a26      	ldr	r2, [pc, #152]	; (8003328 <Start_IMU_Task+0x460>)
 8003290:	6013      	str	r3, [r2, #0]
			Madgwick_Yaw_global   = mpu1.Madgwick_filter_Yaw;
 8003292:	f107 0308 	add.w	r3, r7, #8
 8003296:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800329a:	4a24      	ldr	r2, [pc, #144]	; (800332c <Start_IMU_Task+0x464>)
 800329c:	6013      	str	r3, [r2, #0]
		}

		osDelay(10);
 800329e:	200a      	movs	r0, #10
 80032a0:	f005 ffd8 	bl	8009254 <osDelay>
		if (mpu9250_correct_init_global == 1) {
 80032a4:	e726      	b.n	80030f4 <Start_IMU_Task+0x22c>
 80032a6:	bf00      	nop
 80032a8:	20000164 	.word	0x20000164
 80032ac:	200034b4 	.word	0x200034b4
 80032b0:	447a0000 	.word	0x447a0000
 80032b4:	200000dc 	.word	0x200000dc
 80032b8:	200000e0 	.word	0x200000e0
 80032bc:	200000e4 	.word	0x200000e4
 80032c0:	200000e8 	.word	0x200000e8
 80032c4:	200000ec 	.word	0x200000ec
 80032c8:	200000f0 	.word	0x200000f0
 80032cc:	200000f4 	.word	0x200000f4
 80032d0:	200000f8 	.word	0x200000f8
 80032d4:	200000fc 	.word	0x200000fc
 80032d8:	20000100 	.word	0x20000100
 80032dc:	20000104 	.word	0x20000104
 80032e0:	20000108 	.word	0x20000108
 80032e4:	2000010c 	.word	0x2000010c
 80032e8:	20000110 	.word	0x20000110
 80032ec:	20000114 	.word	0x20000114
 80032f0:	20000004 	.word	0x20000004
 80032f4:	20000008 	.word	0x20000008
 80032f8:	2000000c 	.word	0x2000000c
 80032fc:	20000010 	.word	0x20000010
 8003300:	20000014 	.word	0x20000014
 8003304:	20000018 	.word	0x20000018
 8003308:	2000001c 	.word	0x2000001c
 800330c:	20000140 	.word	0x20000140
 8003310:	20000144 	.word	0x20000144
 8003314:	20000148 	.word	0x20000148
 8003318:	2000014c 	.word	0x2000014c
 800331c:	20000150 	.word	0x20000150
 8003320:	20000154 	.word	0x20000154
 8003324:	20000158 	.word	0x20000158
 8003328:	2000015c 	.word	0x2000015c
 800332c:	20000160 	.word	0x20000160

08003330 <HAL_UART_RxCpltCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
     
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART1) {
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a0f      	ldr	r2, [pc, #60]	; (800337c <HAL_UART_RxCpltCallback+0x4c>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d117      	bne.n	8003372 <HAL_UART_RxCpltCallback+0x42>

		HAL_UART_Receive_DMA(HC05_handle, Data_from_PC, DATA_FRAME_FROM_PC_SIZE);
 8003342:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <HAL_UART_RxCpltCallback+0x50>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	220a      	movs	r2, #10
 8003348:	490e      	ldr	r1, [pc, #56]	; (8003384 <HAL_UART_RxCpltCallback+0x54>)
 800334a:	4618      	mov	r0, r3
 800334c:	f005 faa6 	bl	800889c <HAL_UART_Receive_DMA>

		if( HC05_Parse_Data_frame(&DF_PC, Data_from_PC) == 0 ) {
 8003350:	490c      	ldr	r1, [pc, #48]	; (8003384 <HAL_UART_RxCpltCallback+0x54>)
 8003352:	480d      	ldr	r0, [pc, #52]	; (8003388 <HAL_UART_RxCpltCallback+0x58>)
 8003354:	f000 fa44 	bl	80037e0 <HC05_Parse_Data_frame>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d109      	bne.n	8003372 <HAL_UART_RxCpltCallback+0x42>

			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800335e:	2120      	movs	r1, #32
 8003360:	480a      	ldr	r0, [pc, #40]	; (800338c <HAL_UART_RxCpltCallback+0x5c>)
 8003362:	f003 fcda 	bl	8006d1a <HAL_GPIO_TogglePin>
			//Kalman_filter_measure_variance = DF_PC.Kalman_filter_measure_variance;

			//Madgwick_filter_beta           = (float) DF_PC.Madgwick_filter_beta / 1000;

			/* Additional data from PC */
			Which_filter_global = DF_PC.Which_filter;
 8003366:	4b08      	ldr	r3, [pc, #32]	; (8003388 <HAL_UART_RxCpltCallback+0x58>)
 8003368:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800336c:	b2da      	uxtb	r2, r3
 800336e:	4b08      	ldr	r3, [pc, #32]	; (8003390 <HAL_UART_RxCpltCallback+0x60>)
 8003370:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8003372:	bf00      	nop
 8003374:	3708      	adds	r7, #8
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40013800 	.word	0x40013800
 8003380:	20000020 	.word	0x20000020
 8003384:	20003438 	.word	0x20003438
 8003388:	20003420 	.word	0x20003420
 800338c:	40010800 	.word	0x40010800
 8003390:	20000168 	.word	0x20000168

08003394 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800339a:	f107 0310 	add.w	r3, r7, #16
 800339e:	2200      	movs	r2, #0
 80033a0:	601a      	str	r2, [r3, #0]
 80033a2:	605a      	str	r2, [r3, #4]
 80033a4:	609a      	str	r2, [r3, #8]
 80033a6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033a8:	4b2d      	ldr	r3, [pc, #180]	; (8003460 <MX_GPIO_Init+0xcc>)
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	4a2c      	ldr	r2, [pc, #176]	; (8003460 <MX_GPIO_Init+0xcc>)
 80033ae:	f043 0310 	orr.w	r3, r3, #16
 80033b2:	6193      	str	r3, [r2, #24]
 80033b4:	4b2a      	ldr	r3, [pc, #168]	; (8003460 <MX_GPIO_Init+0xcc>)
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	f003 0310 	and.w	r3, r3, #16
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033c0:	4b27      	ldr	r3, [pc, #156]	; (8003460 <MX_GPIO_Init+0xcc>)
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	4a26      	ldr	r2, [pc, #152]	; (8003460 <MX_GPIO_Init+0xcc>)
 80033c6:	f043 0320 	orr.w	r3, r3, #32
 80033ca:	6193      	str	r3, [r2, #24]
 80033cc:	4b24      	ldr	r3, [pc, #144]	; (8003460 <MX_GPIO_Init+0xcc>)
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	f003 0320 	and.w	r3, r3, #32
 80033d4:	60bb      	str	r3, [r7, #8]
 80033d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d8:	4b21      	ldr	r3, [pc, #132]	; (8003460 <MX_GPIO_Init+0xcc>)
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	4a20      	ldr	r2, [pc, #128]	; (8003460 <MX_GPIO_Init+0xcc>)
 80033de:	f043 0304 	orr.w	r3, r3, #4
 80033e2:	6193      	str	r3, [r2, #24]
 80033e4:	4b1e      	ldr	r3, [pc, #120]	; (8003460 <MX_GPIO_Init+0xcc>)
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	f003 0304 	and.w	r3, r3, #4
 80033ec:	607b      	str	r3, [r7, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033f0:	4b1b      	ldr	r3, [pc, #108]	; (8003460 <MX_GPIO_Init+0xcc>)
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	4a1a      	ldr	r2, [pc, #104]	; (8003460 <MX_GPIO_Init+0xcc>)
 80033f6:	f043 0308 	orr.w	r3, r3, #8
 80033fa:	6193      	str	r3, [r2, #24]
 80033fc:	4b18      	ldr	r3, [pc, #96]	; (8003460 <MX_GPIO_Init+0xcc>)
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	603b      	str	r3, [r7, #0]
 8003406:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003408:	2200      	movs	r2, #0
 800340a:	2120      	movs	r1, #32
 800340c:	4815      	ldr	r0, [pc, #84]	; (8003464 <MX_GPIO_Init+0xd0>)
 800340e:	f003 fc6c 	bl	8006cea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003412:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003416:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003418:	4b13      	ldr	r3, [pc, #76]	; (8003468 <MX_GPIO_Init+0xd4>)
 800341a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341c:	2300      	movs	r3, #0
 800341e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003420:	f107 0310 	add.w	r3, r7, #16
 8003424:	4619      	mov	r1, r3
 8003426:	4811      	ldr	r0, [pc, #68]	; (800346c <MX_GPIO_Init+0xd8>)
 8003428:	f003 faee 	bl	8006a08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800342c:	2320      	movs	r3, #32
 800342e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003430:	2301      	movs	r3, #1
 8003432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003434:	2300      	movs	r3, #0
 8003436:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003438:	2302      	movs	r3, #2
 800343a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800343c:	f107 0310 	add.w	r3, r7, #16
 8003440:	4619      	mov	r1, r3
 8003442:	4808      	ldr	r0, [pc, #32]	; (8003464 <MX_GPIO_Init+0xd0>)
 8003444:	f003 fae0 	bl	8006a08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003448:	2200      	movs	r2, #0
 800344a:	2105      	movs	r1, #5
 800344c:	2028      	movs	r0, #40	; 0x28
 800344e:	f003 f840 	bl	80064d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003452:	2028      	movs	r0, #40	; 0x28
 8003454:	f003 f859 	bl	800650a <HAL_NVIC_EnableIRQ>

}
 8003458:	bf00      	nop
 800345a:	3720      	adds	r7, #32
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	40021000 	.word	0x40021000
 8003464:	40010800 	.word	0x40010800
 8003468:	10110000 	.word	0x10110000
 800346c:	40011000 	.word	0x40011000

08003470 <HC05_Divide_int16>:

#include "hc05.h"

/* --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

uint8_t HC05_Divide_int16(int16_t _data, uint8_t _which_byte) {
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	4603      	mov	r3, r0
 8003478:	460a      	mov	r2, r1
 800347a:	80fb      	strh	r3, [r7, #6]
 800347c:	4613      	mov	r3, r2
 800347e:	717b      	strb	r3, [r7, #5]

	if(_which_byte == 'L') {
 8003480:	797b      	ldrb	r3, [r7, #5]
 8003482:	2b4c      	cmp	r3, #76	; 0x4c
 8003484:	d102      	bne.n	800348c <HC05_Divide_int16+0x1c>

		return (_data & 0xFF); // return lower byte
 8003486:	88fb      	ldrh	r3, [r7, #6]
 8003488:	b2db      	uxtb	r3, r3
 800348a:	e009      	b.n	80034a0 <HC05_Divide_int16+0x30>
	}
	else if(_which_byte == 'H'){
 800348c:	797b      	ldrb	r3, [r7, #5]
 800348e:	2b48      	cmp	r3, #72	; 0x48
 8003490:	d105      	bne.n	800349e <HC05_Divide_int16+0x2e>

		return (_data >> 8);   // return higher byte
 8003492:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003496:	121b      	asrs	r3, r3, #8
 8003498:	b21b      	sxth	r3, r3
 800349a:	b2db      	uxtb	r3, r3
 800349c:	e000      	b.n	80034a0 <HC05_Divide_int16+0x30>
	}

	return 0;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bc80      	pop	{r7}
 80034a8:	4770      	bx	lr

080034aa <HC05_Merge_bytes>:

/* --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

int16_t HC05_Merge_bytes(uint8_t _lower_byte, uint8_t _higher_byte) {
 80034aa:	b480      	push	{r7}
 80034ac:	b085      	sub	sp, #20
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	4603      	mov	r3, r0
 80034b2:	460a      	mov	r2, r1
 80034b4:	71fb      	strb	r3, [r7, #7]
 80034b6:	4613      	mov	r3, r2
 80034b8:	71bb      	strb	r3, [r7, #6]

	int16_t uint16t_byte = ( (_higher_byte << 8) + _lower_byte );
 80034ba:	79bb      	ldrb	r3, [r7, #6]
 80034bc:	b29b      	uxth	r3, r3
 80034be:	021b      	lsls	r3, r3, #8
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	79fb      	ldrb	r3, [r7, #7]
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	4413      	add	r3, r2
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	81fb      	strh	r3, [r7, #14]

	if(uint16t_byte >= 32767) {
 80034cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80034d0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d104      	bne.n	80034e2 <HC05_Merge_bytes+0x38>

		int16_t int_byte = uint16t_byte - ( 2 * 32768);
 80034d8:	89fb      	ldrh	r3, [r7, #14]
 80034da:	81bb      	strh	r3, [r7, #12]
		return int_byte;
 80034dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80034e0:	e001      	b.n	80034e6 <HC05_Merge_bytes+0x3c>
	}
	else  return uint16t_byte;
 80034e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

	return 0;
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3714      	adds	r7, #20
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bc80      	pop	{r7}
 80034ee:	4770      	bx	lr

080034f0 <HC05_Fill_Data_frame_to_PC>:
/* --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

void HC05_Fill_Data_frame_to_PC(struct Data_frame_to_PC *_data, uint8_t *_frame,
							    float Complementary_Roll, float Complementary_Pitch, float Complementary_Yaw,
								float Kalman_Roll, float Kalman_Pitch, float Kalman_Yaw,
								float Madgwick_Roll, float Madgwick_Pitch, float Madgwick_Yaw) {
 80034f0:	b590      	push	{r4, r7, lr}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	603b      	str	r3, [r7, #0]

	/* Complementary filter data */
	_frame[0] = HC05_Divide_int16(Complementary_Roll * 100, 'L');
 80034fe:	49b6      	ldr	r1, [pc, #728]	; (80037d8 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f7fd fbef 	bl	8000ce4 <__aeabi_fmul>
 8003506:	4603      	mov	r3, r0
 8003508:	4618      	mov	r0, r3
 800350a:	f7fd fdc7 	bl	800109c <__aeabi_f2iz>
 800350e:	4603      	mov	r3, r0
 8003510:	b21b      	sxth	r3, r3
 8003512:	214c      	movs	r1, #76	; 0x4c
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff ffab 	bl	8003470 <HC05_Divide_int16>
 800351a:	4603      	mov	r3, r0
 800351c:	461a      	mov	r2, r3
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	701a      	strb	r2, [r3, #0]
	_frame[1] = HC05_Divide_int16(Complementary_Roll * 100, 'H');
 8003522:	49ad      	ldr	r1, [pc, #692]	; (80037d8 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 8003524:	6878      	ldr	r0, [r7, #4]
 8003526:	f7fd fbdd 	bl	8000ce4 <__aeabi_fmul>
 800352a:	4603      	mov	r3, r0
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd fdb5 	bl	800109c <__aeabi_f2iz>
 8003532:	4603      	mov	r3, r0
 8003534:	b21a      	sxth	r2, r3
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	1c5c      	adds	r4, r3, #1
 800353a:	2148      	movs	r1, #72	; 0x48
 800353c:	4610      	mov	r0, r2
 800353e:	f7ff ff97 	bl	8003470 <HC05_Divide_int16>
 8003542:	4603      	mov	r3, r0
 8003544:	7023      	strb	r3, [r4, #0]

	_frame[2] = HC05_Divide_int16(Complementary_Pitch * 100, 'L');
 8003546:	49a4      	ldr	r1, [pc, #656]	; (80037d8 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 8003548:	6838      	ldr	r0, [r7, #0]
 800354a:	f7fd fbcb 	bl	8000ce4 <__aeabi_fmul>
 800354e:	4603      	mov	r3, r0
 8003550:	4618      	mov	r0, r3
 8003552:	f7fd fda3 	bl	800109c <__aeabi_f2iz>
 8003556:	4603      	mov	r3, r0
 8003558:	b21a      	sxth	r2, r3
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	1c9c      	adds	r4, r3, #2
 800355e:	214c      	movs	r1, #76	; 0x4c
 8003560:	4610      	mov	r0, r2
 8003562:	f7ff ff85 	bl	8003470 <HC05_Divide_int16>
 8003566:	4603      	mov	r3, r0
 8003568:	7023      	strb	r3, [r4, #0]
	_frame[3] = HC05_Divide_int16(Complementary_Pitch * 100, 'H');
 800356a:	499b      	ldr	r1, [pc, #620]	; (80037d8 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 800356c:	6838      	ldr	r0, [r7, #0]
 800356e:	f7fd fbb9 	bl	8000ce4 <__aeabi_fmul>
 8003572:	4603      	mov	r3, r0
 8003574:	4618      	mov	r0, r3
 8003576:	f7fd fd91 	bl	800109c <__aeabi_f2iz>
 800357a:	4603      	mov	r3, r0
 800357c:	b21a      	sxth	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	1cdc      	adds	r4, r3, #3
 8003582:	2148      	movs	r1, #72	; 0x48
 8003584:	4610      	mov	r0, r2
 8003586:	f7ff ff73 	bl	8003470 <HC05_Divide_int16>
 800358a:	4603      	mov	r3, r0
 800358c:	7023      	strb	r3, [r4, #0]

	_frame[4] = HC05_Divide_int16(Complementary_Yaw * 100, 'L');
 800358e:	4992      	ldr	r1, [pc, #584]	; (80037d8 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 8003590:	6a38      	ldr	r0, [r7, #32]
 8003592:	f7fd fba7 	bl	8000ce4 <__aeabi_fmul>
 8003596:	4603      	mov	r3, r0
 8003598:	4618      	mov	r0, r3
 800359a:	f7fd fd7f 	bl	800109c <__aeabi_f2iz>
 800359e:	4603      	mov	r3, r0
 80035a0:	b21a      	sxth	r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	1d1c      	adds	r4, r3, #4
 80035a6:	214c      	movs	r1, #76	; 0x4c
 80035a8:	4610      	mov	r0, r2
 80035aa:	f7ff ff61 	bl	8003470 <HC05_Divide_int16>
 80035ae:	4603      	mov	r3, r0
 80035b0:	7023      	strb	r3, [r4, #0]
	_frame[5] = HC05_Divide_int16(Complementary_Yaw * 100, 'H');
 80035b2:	4989      	ldr	r1, [pc, #548]	; (80037d8 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 80035b4:	6a38      	ldr	r0, [r7, #32]
 80035b6:	f7fd fb95 	bl	8000ce4 <__aeabi_fmul>
 80035ba:	4603      	mov	r3, r0
 80035bc:	4618      	mov	r0, r3
 80035be:	f7fd fd6d 	bl	800109c <__aeabi_f2iz>
 80035c2:	4603      	mov	r3, r0
 80035c4:	b21a      	sxth	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	1d5c      	adds	r4, r3, #5
 80035ca:	2148      	movs	r1, #72	; 0x48
 80035cc:	4610      	mov	r0, r2
 80035ce:	f7ff ff4f 	bl	8003470 <HC05_Divide_int16>
 80035d2:	4603      	mov	r3, r0
 80035d4:	7023      	strb	r3, [r4, #0]

	/* Complementary filter data */
	_frame[6] = HC05_Divide_int16(Kalman_Roll * 100, 'L');
 80035d6:	4980      	ldr	r1, [pc, #512]	; (80037d8 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 80035d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035da:	f7fd fb83 	bl	8000ce4 <__aeabi_fmul>
 80035de:	4603      	mov	r3, r0
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fd fd5b 	bl	800109c <__aeabi_f2iz>
 80035e6:	4603      	mov	r3, r0
 80035e8:	b21a      	sxth	r2, r3
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	1d9c      	adds	r4, r3, #6
 80035ee:	214c      	movs	r1, #76	; 0x4c
 80035f0:	4610      	mov	r0, r2
 80035f2:	f7ff ff3d 	bl	8003470 <HC05_Divide_int16>
 80035f6:	4603      	mov	r3, r0
 80035f8:	7023      	strb	r3, [r4, #0]
	_frame[7] = HC05_Divide_int16(Kalman_Roll * 100, 'H');
 80035fa:	4977      	ldr	r1, [pc, #476]	; (80037d8 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 80035fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80035fe:	f7fd fb71 	bl	8000ce4 <__aeabi_fmul>
 8003602:	4603      	mov	r3, r0
 8003604:	4618      	mov	r0, r3
 8003606:	f7fd fd49 	bl	800109c <__aeabi_f2iz>
 800360a:	4603      	mov	r3, r0
 800360c:	b21a      	sxth	r2, r3
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	1ddc      	adds	r4, r3, #7
 8003612:	2148      	movs	r1, #72	; 0x48
 8003614:	4610      	mov	r0, r2
 8003616:	f7ff ff2b 	bl	8003470 <HC05_Divide_int16>
 800361a:	4603      	mov	r3, r0
 800361c:	7023      	strb	r3, [r4, #0]

	_frame[8] = HC05_Divide_int16(Kalman_Pitch * 100, 'L');
 800361e:	496e      	ldr	r1, [pc, #440]	; (80037d8 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 8003620:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003622:	f7fd fb5f 	bl	8000ce4 <__aeabi_fmul>
 8003626:	4603      	mov	r3, r0
 8003628:	4618      	mov	r0, r3
 800362a:	f7fd fd37 	bl	800109c <__aeabi_f2iz>
 800362e:	4603      	mov	r3, r0
 8003630:	b21a      	sxth	r2, r3
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f103 0408 	add.w	r4, r3, #8
 8003638:	214c      	movs	r1, #76	; 0x4c
 800363a:	4610      	mov	r0, r2
 800363c:	f7ff ff18 	bl	8003470 <HC05_Divide_int16>
 8003640:	4603      	mov	r3, r0
 8003642:	7023      	strb	r3, [r4, #0]
	_frame[9] = HC05_Divide_int16(Kalman_Pitch * 100, 'H');
 8003644:	4964      	ldr	r1, [pc, #400]	; (80037d8 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 8003646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003648:	f7fd fb4c 	bl	8000ce4 <__aeabi_fmul>
 800364c:	4603      	mov	r3, r0
 800364e:	4618      	mov	r0, r3
 8003650:	f7fd fd24 	bl	800109c <__aeabi_f2iz>
 8003654:	4603      	mov	r3, r0
 8003656:	b21a      	sxth	r2, r3
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	f103 0409 	add.w	r4, r3, #9
 800365e:	2148      	movs	r1, #72	; 0x48
 8003660:	4610      	mov	r0, r2
 8003662:	f7ff ff05 	bl	8003470 <HC05_Divide_int16>
 8003666:	4603      	mov	r3, r0
 8003668:	7023      	strb	r3, [r4, #0]

	_frame[10] = HC05_Divide_int16(Kalman_Yaw * 100, 'L');
 800366a:	495b      	ldr	r1, [pc, #364]	; (80037d8 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 800366c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800366e:	f7fd fb39 	bl	8000ce4 <__aeabi_fmul>
 8003672:	4603      	mov	r3, r0
 8003674:	4618      	mov	r0, r3
 8003676:	f7fd fd11 	bl	800109c <__aeabi_f2iz>
 800367a:	4603      	mov	r3, r0
 800367c:	b21a      	sxth	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f103 040a 	add.w	r4, r3, #10
 8003684:	214c      	movs	r1, #76	; 0x4c
 8003686:	4610      	mov	r0, r2
 8003688:	f7ff fef2 	bl	8003470 <HC05_Divide_int16>
 800368c:	4603      	mov	r3, r0
 800368e:	7023      	strb	r3, [r4, #0]
	_frame[11] = HC05_Divide_int16(Kalman_Yaw * 100, 'H');
 8003690:	4951      	ldr	r1, [pc, #324]	; (80037d8 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 8003692:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003694:	f7fd fb26 	bl	8000ce4 <__aeabi_fmul>
 8003698:	4603      	mov	r3, r0
 800369a:	4618      	mov	r0, r3
 800369c:	f7fd fcfe 	bl	800109c <__aeabi_f2iz>
 80036a0:	4603      	mov	r3, r0
 80036a2:	b21a      	sxth	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f103 040b 	add.w	r4, r3, #11
 80036aa:	2148      	movs	r1, #72	; 0x48
 80036ac:	4610      	mov	r0, r2
 80036ae:	f7ff fedf 	bl	8003470 <HC05_Divide_int16>
 80036b2:	4603      	mov	r3, r0
 80036b4:	7023      	strb	r3, [r4, #0]

	/* Complementary filter data */
	_frame[12] = HC05_Divide_int16(Madgwick_Roll * 100, 'L');
 80036b6:	4948      	ldr	r1, [pc, #288]	; (80037d8 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 80036b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036ba:	f7fd fb13 	bl	8000ce4 <__aeabi_fmul>
 80036be:	4603      	mov	r3, r0
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fd fceb 	bl	800109c <__aeabi_f2iz>
 80036c6:	4603      	mov	r3, r0
 80036c8:	b21a      	sxth	r2, r3
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f103 040c 	add.w	r4, r3, #12
 80036d0:	214c      	movs	r1, #76	; 0x4c
 80036d2:	4610      	mov	r0, r2
 80036d4:	f7ff fecc 	bl	8003470 <HC05_Divide_int16>
 80036d8:	4603      	mov	r3, r0
 80036da:	7023      	strb	r3, [r4, #0]
	_frame[13] = HC05_Divide_int16(Madgwick_Roll * 100, 'H');
 80036dc:	493e      	ldr	r1, [pc, #248]	; (80037d8 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 80036de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036e0:	f7fd fb00 	bl	8000ce4 <__aeabi_fmul>
 80036e4:	4603      	mov	r3, r0
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fd fcd8 	bl	800109c <__aeabi_f2iz>
 80036ec:	4603      	mov	r3, r0
 80036ee:	b21a      	sxth	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f103 040d 	add.w	r4, r3, #13
 80036f6:	2148      	movs	r1, #72	; 0x48
 80036f8:	4610      	mov	r0, r2
 80036fa:	f7ff feb9 	bl	8003470 <HC05_Divide_int16>
 80036fe:	4603      	mov	r3, r0
 8003700:	7023      	strb	r3, [r4, #0]

	_frame[14] = HC05_Divide_int16(Madgwick_Pitch * 100, 'L');
 8003702:	4935      	ldr	r1, [pc, #212]	; (80037d8 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 8003704:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003706:	f7fd faed 	bl	8000ce4 <__aeabi_fmul>
 800370a:	4603      	mov	r3, r0
 800370c:	4618      	mov	r0, r3
 800370e:	f7fd fcc5 	bl	800109c <__aeabi_f2iz>
 8003712:	4603      	mov	r3, r0
 8003714:	b21a      	sxth	r2, r3
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f103 040e 	add.w	r4, r3, #14
 800371c:	214c      	movs	r1, #76	; 0x4c
 800371e:	4610      	mov	r0, r2
 8003720:	f7ff fea6 	bl	8003470 <HC05_Divide_int16>
 8003724:	4603      	mov	r3, r0
 8003726:	7023      	strb	r3, [r4, #0]
	_frame[15] = HC05_Divide_int16(Madgwick_Pitch * 100, 'H');
 8003728:	492b      	ldr	r1, [pc, #172]	; (80037d8 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 800372a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800372c:	f7fd fada 	bl	8000ce4 <__aeabi_fmul>
 8003730:	4603      	mov	r3, r0
 8003732:	4618      	mov	r0, r3
 8003734:	f7fd fcb2 	bl	800109c <__aeabi_f2iz>
 8003738:	4603      	mov	r3, r0
 800373a:	b21a      	sxth	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f103 040f 	add.w	r4, r3, #15
 8003742:	2148      	movs	r1, #72	; 0x48
 8003744:	4610      	mov	r0, r2
 8003746:	f7ff fe93 	bl	8003470 <HC05_Divide_int16>
 800374a:	4603      	mov	r3, r0
 800374c:	7023      	strb	r3, [r4, #0]

	_frame[16] = HC05_Divide_int16(Madgwick_Yaw * 100, 'L');
 800374e:	4922      	ldr	r1, [pc, #136]	; (80037d8 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 8003750:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003752:	f7fd fac7 	bl	8000ce4 <__aeabi_fmul>
 8003756:	4603      	mov	r3, r0
 8003758:	4618      	mov	r0, r3
 800375a:	f7fd fc9f 	bl	800109c <__aeabi_f2iz>
 800375e:	4603      	mov	r3, r0
 8003760:	b21a      	sxth	r2, r3
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f103 0410 	add.w	r4, r3, #16
 8003768:	214c      	movs	r1, #76	; 0x4c
 800376a:	4610      	mov	r0, r2
 800376c:	f7ff fe80 	bl	8003470 <HC05_Divide_int16>
 8003770:	4603      	mov	r3, r0
 8003772:	7023      	strb	r3, [r4, #0]
	_frame[17] = HC05_Divide_int16(Madgwick_Yaw * 100, 'H');
 8003774:	4918      	ldr	r1, [pc, #96]	; (80037d8 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 8003776:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003778:	f7fd fab4 	bl	8000ce4 <__aeabi_fmul>
 800377c:	4603      	mov	r3, r0
 800377e:	4618      	mov	r0, r3
 8003780:	f7fd fc8c 	bl	800109c <__aeabi_f2iz>
 8003784:	4603      	mov	r3, r0
 8003786:	b21a      	sxth	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f103 0411 	add.w	r4, r3, #17
 800378e:	2148      	movs	r1, #72	; 0x48
 8003790:	4610      	mov	r0, r2
 8003792:	f7ff fe6d 	bl	8003470 <HC05_Divide_int16>
 8003796:	4603      	mov	r3, r0
 8003798:	7023      	strb	r3, [r4, #0]

	_frame[18] = HC05_Divide_int16(32768, 'L');
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	f103 0412 	add.w	r4, r3, #18
 80037a0:	214c      	movs	r1, #76	; 0x4c
 80037a2:	480e      	ldr	r0, [pc, #56]	; (80037dc <HC05_Fill_Data_frame_to_PC+0x2ec>)
 80037a4:	f7ff fe64 	bl	8003470 <HC05_Divide_int16>
 80037a8:	4603      	mov	r3, r0
 80037aa:	7023      	strb	r3, [r4, #0]
	_frame[19] = HC05_Divide_int16(32768, 'H');
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f103 0413 	add.w	r4, r3, #19
 80037b2:	2148      	movs	r1, #72	; 0x48
 80037b4:	4809      	ldr	r0, [pc, #36]	; (80037dc <HC05_Fill_Data_frame_to_PC+0x2ec>)
 80037b6:	f7ff fe5b 	bl	8003470 <HC05_Divide_int16>
 80037ba:	4603      	mov	r3, r0
 80037bc:	7023      	strb	r3, [r4, #0]

	/* CRC */
	_frame[20] = CRC8_DataArray(_frame, DATA_FRAME_TO_PC_SIZE - 1);
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f103 0414 	add.w	r4, r3, #20
 80037c4:	2114      	movs	r1, #20
 80037c6:	68b8      	ldr	r0, [r7, #8]
 80037c8:	f7ff fa90 	bl	8002cec <CRC8_DataArray>
 80037cc:	4603      	mov	r3, r0
 80037ce:	7023      	strb	r3, [r4, #0]
}
 80037d0:	bf00      	nop
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd90      	pop	{r4, r7, pc}
 80037d8:	42c80000 	.word	0x42c80000
 80037dc:	ffff8000 	.word	0xffff8000

080037e0 <HC05_Parse_Data_frame>:

/* --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

int HC05_Parse_Data_frame(struct Data_frame_from_PC *_data, uint8_t *_frame) {
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]

	uint8_t Actual_CRC = 0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	73fb      	strb	r3, [r7, #15]
	uint8_t Received_CRC = 0;
 80037ee:	2300      	movs	r3, #0
 80037f0:	73bb      	strb	r3, [r7, #14]

	/* Filters data */
	_data->Complementary_filter_weight = HC05_Merge_bytes(_frame[0], _frame[1]);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	781a      	ldrb	r2, [r3, #0]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	3301      	adds	r3, #1
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	4619      	mov	r1, r3
 80037fe:	4610      	mov	r0, r2
 8003800:	f7ff fe53 	bl	80034aa <HC05_Merge_bytes>
 8003804:	4603      	mov	r3, r0
 8003806:	461a      	mov	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	801a      	strh	r2, [r3, #0]
	_data->Kalman_filter_process_variance = HC05_Merge_bytes(_frame[2], _frame[3]);
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	3302      	adds	r3, #2
 8003810:	781a      	ldrb	r2, [r3, #0]
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	3303      	adds	r3, #3
 8003816:	781b      	ldrb	r3, [r3, #0]
 8003818:	4619      	mov	r1, r3
 800381a:	4610      	mov	r0, r2
 800381c:	f7ff fe45 	bl	80034aa <HC05_Merge_bytes>
 8003820:	4603      	mov	r3, r0
 8003822:	461a      	mov	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	805a      	strh	r2, [r3, #2]
	_data->Kalman_filter_measure_variance = HC05_Merge_bytes(_frame[4], _frame[5]);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	3304      	adds	r3, #4
 800382c:	781a      	ldrb	r2, [r3, #0]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	3305      	adds	r3, #5
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	4619      	mov	r1, r3
 8003836:	4610      	mov	r0, r2
 8003838:	f7ff fe37 	bl	80034aa <HC05_Merge_bytes>
 800383c:	4603      	mov	r3, r0
 800383e:	461a      	mov	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	809a      	strh	r2, [r3, #4]
	_data->Madgwick_filter_beta = HC05_Merge_bytes(_frame[6], _frame[7]);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	3306      	adds	r3, #6
 8003848:	781a      	ldrb	r2, [r3, #0]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	3307      	adds	r3, #7
 800384e:	781b      	ldrb	r3, [r3, #0]
 8003850:	4619      	mov	r1, r3
 8003852:	4610      	mov	r0, r2
 8003854:	f7ff fe29 	bl	80034aa <HC05_Merge_bytes>
 8003858:	4603      	mov	r3, r0
 800385a:	461a      	mov	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	80da      	strh	r2, [r3, #6]

	/* Additional data */
	_data->Which_filter = _frame[8];
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	3308      	adds	r3, #8
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	b25a      	sxtb	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	731a      	strb	r2, [r3, #12]

	/* CRC test */
	Received_CRC = _frame[9];
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	7a5b      	ldrb	r3, [r3, #9]
 8003870:	73bb      	strb	r3, [r7, #14]
	Actual_CRC = CRC8_DataArray(_frame, DATA_FRAME_FROM_PC_SIZE - 1);
 8003872:	2109      	movs	r1, #9
 8003874:	6838      	ldr	r0, [r7, #0]
 8003876:	f7ff fa39 	bl	8002cec <CRC8_DataArray>
 800387a:	4603      	mov	r3, r0
 800387c:	73fb      	strb	r3, [r7, #15]

	if( Actual_CRC != Received_CRC ) {
 800387e:	7bfa      	ldrb	r2, [r7, #15]
 8003880:	7bbb      	ldrb	r3, [r7, #14]
 8003882:	429a      	cmp	r2, r3
 8003884:	d002      	beq.n	800388c <HC05_Parse_Data_frame+0xac>

		return -1;
 8003886:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800388a:	e000      	b.n	800388e <HC05_Parse_Data_frame+0xae>
	}

	return 0;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
	...

08003898 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 800389c:	4b12      	ldr	r3, [pc, #72]	; (80038e8 <MX_I2C1_Init+0x50>)
 800389e:	4a13      	ldr	r2, [pc, #76]	; (80038ec <MX_I2C1_Init+0x54>)
 80038a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80038a2:	4b11      	ldr	r3, [pc, #68]	; (80038e8 <MX_I2C1_Init+0x50>)
 80038a4:	4a12      	ldr	r2, [pc, #72]	; (80038f0 <MX_I2C1_Init+0x58>)
 80038a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80038a8:	4b0f      	ldr	r3, [pc, #60]	; (80038e8 <MX_I2C1_Init+0x50>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80038ae:	4b0e      	ldr	r3, [pc, #56]	; (80038e8 <MX_I2C1_Init+0x50>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80038b4:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <MX_I2C1_Init+0x50>)
 80038b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80038bc:	4b0a      	ldr	r3, [pc, #40]	; (80038e8 <MX_I2C1_Init+0x50>)
 80038be:	2200      	movs	r2, #0
 80038c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80038c2:	4b09      	ldr	r3, [pc, #36]	; (80038e8 <MX_I2C1_Init+0x50>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80038c8:	4b07      	ldr	r3, [pc, #28]	; (80038e8 <MX_I2C1_Init+0x50>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80038ce:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <MX_I2C1_Init+0x50>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80038d4:	4804      	ldr	r0, [pc, #16]	; (80038e8 <MX_I2C1_Init+0x50>)
 80038d6:	f003 fa5b 	bl	8006d90 <HAL_I2C_Init>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80038e0:	f000 fbd2 	bl	8004088 <Error_Handler>
  }

}
 80038e4:	bf00      	nop
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	200034b4 	.word	0x200034b4
 80038ec:	40005400 	.word	0x40005400
 80038f0:	000186a0 	.word	0x000186a0

080038f4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b088      	sub	sp, #32
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038fc:	f107 0310 	add.w	r3, r7, #16
 8003900:	2200      	movs	r2, #0
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	605a      	str	r2, [r3, #4]
 8003906:	609a      	str	r2, [r3, #8]
 8003908:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a3b      	ldr	r2, [pc, #236]	; (80039fc <HAL_I2C_MspInit+0x108>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d16f      	bne.n	80039f4 <HAL_I2C_MspInit+0x100>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003914:	4b3a      	ldr	r3, [pc, #232]	; (8003a00 <HAL_I2C_MspInit+0x10c>)
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	4a39      	ldr	r2, [pc, #228]	; (8003a00 <HAL_I2C_MspInit+0x10c>)
 800391a:	f043 0308 	orr.w	r3, r3, #8
 800391e:	6193      	str	r3, [r2, #24]
 8003920:	4b37      	ldr	r3, [pc, #220]	; (8003a00 <HAL_I2C_MspInit+0x10c>)
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_MPU9250_SCL_Pin|I2C1_MPU9250_SDA_Pin;
 800392c:	23c0      	movs	r3, #192	; 0xc0
 800392e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003930:	2312      	movs	r3, #18
 8003932:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003934:	2303      	movs	r3, #3
 8003936:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003938:	f107 0310 	add.w	r3, r7, #16
 800393c:	4619      	mov	r1, r3
 800393e:	4831      	ldr	r0, [pc, #196]	; (8003a04 <HAL_I2C_MspInit+0x110>)
 8003940:	f003 f862 	bl	8006a08 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003944:	4b2e      	ldr	r3, [pc, #184]	; (8003a00 <HAL_I2C_MspInit+0x10c>)
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	4a2d      	ldr	r2, [pc, #180]	; (8003a00 <HAL_I2C_MspInit+0x10c>)
 800394a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800394e:	61d3      	str	r3, [r2, #28]
 8003950:	4b2b      	ldr	r3, [pc, #172]	; (8003a00 <HAL_I2C_MspInit+0x10c>)
 8003952:	69db      	ldr	r3, [r3, #28]
 8003954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	68bb      	ldr	r3, [r7, #8]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 800395c:	4b2a      	ldr	r3, [pc, #168]	; (8003a08 <HAL_I2C_MspInit+0x114>)
 800395e:	4a2b      	ldr	r2, [pc, #172]	; (8003a0c <HAL_I2C_MspInit+0x118>)
 8003960:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003962:	4b29      	ldr	r3, [pc, #164]	; (8003a08 <HAL_I2C_MspInit+0x114>)
 8003964:	2200      	movs	r2, #0
 8003966:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003968:	4b27      	ldr	r3, [pc, #156]	; (8003a08 <HAL_I2C_MspInit+0x114>)
 800396a:	2200      	movs	r2, #0
 800396c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800396e:	4b26      	ldr	r3, [pc, #152]	; (8003a08 <HAL_I2C_MspInit+0x114>)
 8003970:	2280      	movs	r2, #128	; 0x80
 8003972:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003974:	4b24      	ldr	r3, [pc, #144]	; (8003a08 <HAL_I2C_MspInit+0x114>)
 8003976:	2200      	movs	r2, #0
 8003978:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800397a:	4b23      	ldr	r3, [pc, #140]	; (8003a08 <HAL_I2C_MspInit+0x114>)
 800397c:	2200      	movs	r2, #0
 800397e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003980:	4b21      	ldr	r3, [pc, #132]	; (8003a08 <HAL_I2C_MspInit+0x114>)
 8003982:	2200      	movs	r2, #0
 8003984:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003986:	4b20      	ldr	r3, [pc, #128]	; (8003a08 <HAL_I2C_MspInit+0x114>)
 8003988:	2200      	movs	r2, #0
 800398a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800398c:	481e      	ldr	r0, [pc, #120]	; (8003a08 <HAL_I2C_MspInit+0x114>)
 800398e:	f002 fdd7 	bl	8006540 <HAL_DMA_Init>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8003998:	f000 fb76 	bl	8004088 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a1a      	ldr	r2, [pc, #104]	; (8003a08 <HAL_I2C_MspInit+0x114>)
 80039a0:	639a      	str	r2, [r3, #56]	; 0x38
 80039a2:	4a19      	ldr	r2, [pc, #100]	; (8003a08 <HAL_I2C_MspInit+0x114>)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80039a8:	4b19      	ldr	r3, [pc, #100]	; (8003a10 <HAL_I2C_MspInit+0x11c>)
 80039aa:	4a1a      	ldr	r2, [pc, #104]	; (8003a14 <HAL_I2C_MspInit+0x120>)
 80039ac:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039ae:	4b18      	ldr	r3, [pc, #96]	; (8003a10 <HAL_I2C_MspInit+0x11c>)
 80039b0:	2210      	movs	r2, #16
 80039b2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039b4:	4b16      	ldr	r3, [pc, #88]	; (8003a10 <HAL_I2C_MspInit+0x11c>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80039ba:	4b15      	ldr	r3, [pc, #84]	; (8003a10 <HAL_I2C_MspInit+0x11c>)
 80039bc:	2280      	movs	r2, #128	; 0x80
 80039be:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039c0:	4b13      	ldr	r3, [pc, #76]	; (8003a10 <HAL_I2C_MspInit+0x11c>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039c6:	4b12      	ldr	r3, [pc, #72]	; (8003a10 <HAL_I2C_MspInit+0x11c>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80039cc:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <HAL_I2C_MspInit+0x11c>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80039d2:	4b0f      	ldr	r3, [pc, #60]	; (8003a10 <HAL_I2C_MspInit+0x11c>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80039d8:	480d      	ldr	r0, [pc, #52]	; (8003a10 <HAL_I2C_MspInit+0x11c>)
 80039da:	f002 fdb1 	bl	8006540 <HAL_DMA_Init>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 80039e4:	f000 fb50 	bl	8004088 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a09      	ldr	r2, [pc, #36]	; (8003a10 <HAL_I2C_MspInit+0x11c>)
 80039ec:	635a      	str	r2, [r3, #52]	; 0x34
 80039ee:	4a08      	ldr	r2, [pc, #32]	; (8003a10 <HAL_I2C_MspInit+0x11c>)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80039f4:	bf00      	nop
 80039f6:	3720      	adds	r7, #32
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	40005400 	.word	0x40005400
 8003a00:	40021000 	.word	0x40021000
 8003a04:	40010c00 	.word	0x40010c00
 8003a08:	20003508 	.word	0x20003508
 8003a0c:	40020080 	.word	0x40020080
 8003a10:	20003470 	.word	0x20003470
 8003a14:	4002006c 	.word	0x4002006c

08003a18 <Kalman_filter_init>:

#include "kalman.h"

/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

void Kalman_filter_init(struct Kalman *k, double q, double r) {
 8003a18:	b490      	push	{r4, r7}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	e9c7 2300 	strd	r2, r3, [r7]

	// stan
	k->stan_theta = 0;
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	f04f 0400 	mov.w	r4, #0
 8003a2e:	e9c2 3400 	strd	r3, r4, [r2]
	k->stan_omega = 0;
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	f04f 0300 	mov.w	r3, #0
 8003a38:	f04f 0400 	mov.w	r4, #0
 8003a3c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	k->stan_pomiar_theta = 0;
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	f04f 0300 	mov.w	r3, #0
 8003a46:	f04f 0400 	mov.w	r4, #0
 8003a4a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	k->stan_pomiar_omega = 0;
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	f04f 0400 	mov.w	r4, #0
 8003a58:	e9c2 3406 	strd	r3, r4, [r2, #24]

	// kalman
	k->kalman_Q = q;
 8003a5c:	68fa      	ldr	r2, [r7, #12]
 8003a5e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003a62:	e9c2 3408 	strd	r3, r4, [r2, #32]
	k->kalman_R = r;
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003a6c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	k->kalman_theta = 0;
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	f04f 0300 	mov.w	r3, #0
 8003a76:	f04f 0400 	mov.w	r4, #0
 8003a7a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	k->kalman_omega = 0;
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	f04f 0400 	mov.w	r4, #0
 8003a88:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	k->kalman_g_bias = 0;
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	f04f 0400 	mov.w	r4, #0
 8003a96:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

	k->kalman_P11 = k->kalman_R;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8003aa0:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	k->kalman_P13 = 0;
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	f04f 0400 	mov.w	r4, #0
 8003ab4:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	k->kalman_P21 = 0;
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	f04f 0300 	mov.w	r3, #0
 8003abe:	f04f 0400 	mov.w	r4, #0
 8003ac2:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	k->kalman_P31 = 0;
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	f04f 0400 	mov.w	r4, #0
 8003ad0:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	k->kalman_P33 = 0;
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	f04f 0300 	mov.w	r3, #0
 8003ada:	f04f 0400 	mov.w	r4, #0
 8003ade:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	k->kalman_K1 = 0;
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	f04f 0400 	mov.w	r4, #0
 8003aec:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	k->kalman_K2 = 0;
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	f04f 0400 	mov.w	r4, #0
 8003afa:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	k->kalman_K3 = 0;
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	f04f 0300 	mov.w	r3, #0
 8003b04:	f04f 0400 	mov.w	r4, #0
 8003b08:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 8003b0c:	bf00      	nop
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc90      	pop	{r4, r7}
 8003b14:	4770      	bx	lr
	...

08003b18 <Kalman_filter_calculate>:

/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

float Kalman_filter_calculate(struct Kalman *k, float Acce, float Gyro, float dt) {
 8003b18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b1c:	b084      	sub	sp, #16
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	60f8      	str	r0, [r7, #12]
 8003b22:	60b9      	str	r1, [r7, #8]
 8003b24:	607a      	str	r2, [r7, #4]
 8003b26:	603b      	str	r3, [r7, #0]

	// pomiar
	k->stan_pomiar_theta = Acce;
 8003b28:	68b8      	ldr	r0, [r7, #8]
 8003b2a:	f7fc fc75 	bl	8000418 <__aeabi_f2d>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	460c      	mov	r4, r1
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	e9c2 3404 	strd	r3, r4, [r2, #16]
	k->stan_pomiar_omega = Gyro;
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f7fc fc6d 	bl	8000418 <__aeabi_f2d>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	460c      	mov	r4, r1
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	e9c2 3406 	strd	r3, r4, [r2, #24]

	// predykcja
	k->kalman_theta = k->kalman_theta + ( k->stan_pomiar_omega - k->kalman_g_bias ) * dt;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003b5a:	f7fc fafd 	bl	8000158 <__aeabi_dsub>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	4690      	mov	r8, r2
 8003b64:	4699      	mov	r9, r3
 8003b66:	6838      	ldr	r0, [r7, #0]
 8003b68:	f7fc fc56 	bl	8000418 <__aeabi_f2d>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4640      	mov	r0, r8
 8003b72:	4649      	mov	r1, r9
 8003b74:	f7fc fca8 	bl	80004c8 <__aeabi_dmul>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4620      	mov	r0, r4
 8003b7e:	4629      	mov	r1, r5
 8003b80:	f7fc faec 	bl	800015c <__adddf3>
 8003b84:	4603      	mov	r3, r0
 8003b86:	460c      	mov	r4, r1
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	k->kalman_omega = k->stan_pomiar_omega - k->kalman_g_bias;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8003b9a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	4623      	mov	r3, r4
 8003ba2:	f7fc fad9 	bl	8000158 <__aeabi_dsub>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	460c      	mov	r4, r1
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	k->kalman_P11 = k->kalman_P11 - k->kalman_P31 * dt + k->kalman_P33 * dt * dt - k->kalman_P13 * dt + k->kalman_Q;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	e9d3 8918 	ldrd	r8, r9, [r3, #96]	; 0x60
 8003bbc:	6838      	ldr	r0, [r7, #0]
 8003bbe:	f7fc fc2b 	bl	8000418 <__aeabi_f2d>
 8003bc2:	4602      	mov	r2, r0
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	4640      	mov	r0, r8
 8003bc8:	4649      	mov	r1, r9
 8003bca:	f7fc fc7d 	bl	80004c8 <__aeabi_dmul>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	4629      	mov	r1, r5
 8003bd6:	f7fc fabf 	bl	8000158 <__aeabi_dsub>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	460c      	mov	r4, r1
 8003bde:	4698      	mov	r8, r3
 8003be0:	46a1      	mov	r9, r4
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	e9d3 451a 	ldrd	r4, r5, [r3, #104]	; 0x68
 8003be8:	6838      	ldr	r0, [r7, #0]
 8003bea:	f7fc fc15 	bl	8000418 <__aeabi_f2d>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	460b      	mov	r3, r1
 8003bf2:	4620      	mov	r0, r4
 8003bf4:	4629      	mov	r1, r5
 8003bf6:	f7fc fc67 	bl	80004c8 <__aeabi_dmul>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	460c      	mov	r4, r1
 8003bfe:	4625      	mov	r5, r4
 8003c00:	461c      	mov	r4, r3
 8003c02:	6838      	ldr	r0, [r7, #0]
 8003c04:	f7fc fc08 	bl	8000418 <__aeabi_f2d>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4620      	mov	r0, r4
 8003c0e:	4629      	mov	r1, r5
 8003c10:	f7fc fc5a 	bl	80004c8 <__aeabi_dmul>
 8003c14:	4603      	mov	r3, r0
 8003c16:	460c      	mov	r4, r1
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4623      	mov	r3, r4
 8003c1c:	4640      	mov	r0, r8
 8003c1e:	4649      	mov	r1, r9
 8003c20:	f7fc fa9c 	bl	800015c <__adddf3>
 8003c24:	4603      	mov	r3, r0
 8003c26:	460c      	mov	r4, r1
 8003c28:	4698      	mov	r8, r3
 8003c2a:	46a1      	mov	r9, r4
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8003c32:	6838      	ldr	r0, [r7, #0]
 8003c34:	f7fc fbf0 	bl	8000418 <__aeabi_f2d>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	4629      	mov	r1, r5
 8003c40:	f7fc fc42 	bl	80004c8 <__aeabi_dmul>
 8003c44:	4603      	mov	r3, r0
 8003c46:	460c      	mov	r4, r1
 8003c48:	461a      	mov	r2, r3
 8003c4a:	4623      	mov	r3, r4
 8003c4c:	4640      	mov	r0, r8
 8003c4e:	4649      	mov	r1, r9
 8003c50:	f7fc fa82 	bl	8000158 <__aeabi_dsub>
 8003c54:	4603      	mov	r3, r0
 8003c56:	460c      	mov	r4, r1
 8003c58:	4618      	mov	r0, r3
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f103 0420 	add.w	r4, r3, #32
 8003c62:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003c66:	461a      	mov	r2, r3
 8003c68:	4623      	mov	r3, r4
 8003c6a:	f7fc fa77 	bl	800015c <__adddf3>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	460c      	mov	r4, r1
 8003c72:	68fa      	ldr	r2, [r7, #12]
 8003c74:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	k->kalman_P13 = k->kalman_P13 - k->kalman_P33 * dt;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 8003c84:	6838      	ldr	r0, [r7, #0]
 8003c86:	f7fc fbc7 	bl	8000418 <__aeabi_f2d>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4640      	mov	r0, r8
 8003c90:	4649      	mov	r1, r9
 8003c92:	f7fc fc19 	bl	80004c8 <__aeabi_dmul>
 8003c96:	4602      	mov	r2, r0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	4629      	mov	r1, r5
 8003c9e:	f7fc fa5b 	bl	8000158 <__aeabi_dsub>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	460c      	mov	r4, r1
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	k->kalman_P21 = k->kalman_P33 * dt - k->kalman_P31;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	e9d3 451a 	ldrd	r4, r5, [r3, #104]	; 0x68
 8003cb2:	6838      	ldr	r0, [r7, #0]
 8003cb4:	f7fc fbb0 	bl	8000418 <__aeabi_f2d>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	f7fc fc02 	bl	80004c8 <__aeabi_dmul>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	460c      	mov	r4, r1
 8003cc8:	4618      	mov	r0, r3
 8003cca:	4621      	mov	r1, r4
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8003cd2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	4623      	mov	r3, r4
 8003cda:	f7fc fa3d 	bl	8000158 <__aeabi_dsub>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	460c      	mov	r4, r1
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	k->kalman_P31 = k->kalman_P31 - k->kalman_P33 * dt;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	; 0x60
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 8003cf4:	6838      	ldr	r0, [r7, #0]
 8003cf6:	f7fc fb8f 	bl	8000418 <__aeabi_f2d>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4640      	mov	r0, r8
 8003d00:	4649      	mov	r1, r9
 8003d02:	f7fc fbe1 	bl	80004c8 <__aeabi_dmul>
 8003d06:	4602      	mov	r2, r0
 8003d08:	460b      	mov	r3, r1
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	4629      	mov	r1, r5
 8003d0e:	f7fc fa23 	bl	8000158 <__aeabi_dsub>
 8003d12:	4603      	mov	r3, r0
 8003d14:	460c      	mov	r4, r1
 8003d16:	68fa      	ldr	r2, [r7, #12]
 8003d18:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	k->kalman_P33 = k->kalman_P33 + k->kalman_Q;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f103 0420 	add.w	r4, r3, #32
 8003d28:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	4623      	mov	r3, r4
 8003d30:	f7fc fa14 	bl	800015c <__adddf3>
 8003d34:	4603      	mov	r3, r0
 8003d36:	460c      	mov	r4, r1
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	// korekcja
	k->kalman_K1 = k->kalman_P11 * ( 1 / ( k->kalman_P11 + k->kalman_R ) );
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003d50:	f7fc fa04 	bl	800015c <__adddf3>
 8003d54:	4602      	mov	r2, r0
 8003d56:	460b      	mov	r3, r1
 8003d58:	f04f 0000 	mov.w	r0, #0
 8003d5c:	499f      	ldr	r1, [pc, #636]	; (8003fdc <Kalman_filter_calculate+0x4c4>)
 8003d5e:	f7fc fcdd 	bl	800071c <__aeabi_ddiv>
 8003d62:	4602      	mov	r2, r0
 8003d64:	460b      	mov	r3, r1
 8003d66:	4620      	mov	r0, r4
 8003d68:	4629      	mov	r1, r5
 8003d6a:	f7fc fbad 	bl	80004c8 <__aeabi_dmul>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	460c      	mov	r4, r1
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	k->kalman_K2 = k->kalman_P21 * ( 1 / ( k->kalman_P11 + k->kalman_R ) );
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003d8a:	f7fc f9e7 	bl	800015c <__adddf3>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	460b      	mov	r3, r1
 8003d92:	f04f 0000 	mov.w	r0, #0
 8003d96:	4991      	ldr	r1, [pc, #580]	; (8003fdc <Kalman_filter_calculate+0x4c4>)
 8003d98:	f7fc fcc0 	bl	800071c <__aeabi_ddiv>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	4620      	mov	r0, r4
 8003da2:	4629      	mov	r1, r5
 8003da4:	f7fc fb90 	bl	80004c8 <__aeabi_dmul>
 8003da8:	4603      	mov	r3, r0
 8003daa:	460c      	mov	r4, r1
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	k->kalman_K3 = k->kalman_P31 * ( 1 / ( k->kalman_P11 + k->kalman_R ) );
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	; 0x60
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003dc4:	f7fc f9ca 	bl	800015c <__adddf3>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	f04f 0000 	mov.w	r0, #0
 8003dd0:	4982      	ldr	r1, [pc, #520]	; (8003fdc <Kalman_filter_calculate+0x4c4>)
 8003dd2:	f7fc fca3 	bl	800071c <__aeabi_ddiv>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	460b      	mov	r3, r1
 8003dda:	4620      	mov	r0, r4
 8003ddc:	4629      	mov	r1, r5
 8003dde:	f7fc fb73 	bl	80004c8 <__aeabi_dmul>
 8003de2:	4603      	mov	r3, r0
 8003de4:	460c      	mov	r4, r1
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	k->kalman_theta  = k->kalman_theta  + k->kalman_K1 * ( k->stan_pomiar_theta - k->kalman_theta);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	e9d3 891c 	ldrd	r8, r9, [r3, #112]	; 0x70
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003e04:	f7fc f9a8 	bl	8000158 <__aeabi_dsub>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4640      	mov	r0, r8
 8003e0e:	4649      	mov	r1, r9
 8003e10:	f7fc fb5a 	bl	80004c8 <__aeabi_dmul>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	4620      	mov	r0, r4
 8003e1a:	4629      	mov	r1, r5
 8003e1c:	f7fc f99e 	bl	800015c <__adddf3>
 8003e20:	4603      	mov	r3, r0
 8003e22:	460c      	mov	r4, r1
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	k->kalman_omega  = k->kalman_omega  + k->kalman_K2 * ( k->stan_pomiar_theta - k->kalman_theta);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	e9d3 891e 	ldrd	r8, r9, [r3, #120]	; 0x78
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003e42:	f7fc f989 	bl	8000158 <__aeabi_dsub>
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4640      	mov	r0, r8
 8003e4c:	4649      	mov	r1, r9
 8003e4e:	f7fc fb3b 	bl	80004c8 <__aeabi_dmul>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4620      	mov	r0, r4
 8003e58:	4629      	mov	r1, r5
 8003e5a:	f7fc f97f 	bl	800015c <__adddf3>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	460c      	mov	r4, r1
 8003e62:	68fa      	ldr	r2, [r7, #12]
 8003e64:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	k->kalman_g_bias = k->kalman_g_bias + k->kalman_K3 * ( k->stan_pomiar_theta - k->kalman_theta);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	e9d3 8920 	ldrd	r8, r9, [r3, #128]	; 0x80
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003e80:	f7fc f96a 	bl	8000158 <__aeabi_dsub>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4640      	mov	r0, r8
 8003e8a:	4649      	mov	r1, r9
 8003e8c:	f7fc fb1c 	bl	80004c8 <__aeabi_dmul>
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4620      	mov	r0, r4
 8003e96:	4629      	mov	r1, r5
 8003e98:	f7fc f960 	bl	800015c <__adddf3>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	460c      	mov	r4, r1
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

	// a posteriori
	k->kalman_P11 = ( 1 - k->kalman_K1 ) * k->kalman_P11;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8003eac:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	4623      	mov	r3, r4
 8003eb4:	f04f 0000 	mov.w	r0, #0
 8003eb8:	4948      	ldr	r1, [pc, #288]	; (8003fdc <Kalman_filter_calculate+0x4c4>)
 8003eba:	f7fc f94d 	bl	8000158 <__aeabi_dsub>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	460c      	mov	r4, r1
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	4621      	mov	r1, r4
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8003ecc:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	4623      	mov	r3, r4
 8003ed4:	f7fc faf8 	bl	80004c8 <__aeabi_dmul>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	460c      	mov	r4, r1
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	k->kalman_P13 = ( 1 - k->kalman_K1 ) * k->kalman_P13;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8003ee8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003eec:	461a      	mov	r2, r3
 8003eee:	4623      	mov	r3, r4
 8003ef0:	f04f 0000 	mov.w	r0, #0
 8003ef4:	4939      	ldr	r1, [pc, #228]	; (8003fdc <Kalman_filter_calculate+0x4c4>)
 8003ef6:	f7fc f92f 	bl	8000158 <__aeabi_dsub>
 8003efa:	4603      	mov	r3, r0
 8003efc:	460c      	mov	r4, r1
 8003efe:	4618      	mov	r0, r3
 8003f00:	4621      	mov	r1, r4
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8003f08:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4623      	mov	r3, r4
 8003f10:	f7fc fada 	bl	80004c8 <__aeabi_dmul>
 8003f14:	4603      	mov	r3, r0
 8003f16:	460c      	mov	r4, r1
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	k->kalman_P21 = k->kalman_P21 - k->kalman_P11 * k->kalman_K2;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003f30:	f7fc faca 	bl	80004c8 <__aeabi_dmul>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4620      	mov	r0, r4
 8003f3a:	4629      	mov	r1, r5
 8003f3c:	f7fc f90c 	bl	8000158 <__aeabi_dsub>
 8003f40:	4603      	mov	r3, r0
 8003f42:	460c      	mov	r4, r1
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	k->kalman_P31 = k->kalman_P31 - k->kalman_P11 * k->kalman_K3;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	; 0x60
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003f5c:	f7fc fab4 	bl	80004c8 <__aeabi_dmul>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4620      	mov	r0, r4
 8003f66:	4629      	mov	r1, r5
 8003f68:	f7fc f8f6 	bl	8000158 <__aeabi_dsub>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	460c      	mov	r4, r1
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	k->kalman_P33 = k->kalman_P33 - k->kalman_P13 * k->kalman_K3;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	e9d3 451a 	ldrd	r4, r5, [r3, #104]	; 0x68
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003f88:	f7fc fa9e 	bl	80004c8 <__aeabi_dmul>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	460b      	mov	r3, r1
 8003f90:	4620      	mov	r0, r4
 8003f92:	4629      	mov	r1, r5
 8003f94:	f7fc f8e0 	bl	8000158 <__aeabi_dsub>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	460c      	mov	r4, r1
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	// aktualizacja wektora stanu
	k->stan_theta = k->kalman_theta;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8003fa8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	e9c2 3400 	strd	r3, r4, [r2]
	k->stan_omega = k->kalman_omega;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8003fb8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	e9c2 3402 	strd	r3, r4, [r2, #8]

	return k->stan_theta;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	cb18      	ldmia	r3, {r3, r4}
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	4621      	mov	r1, r4
 8003fca:	f7fc fd2d 	bl	8000a28 <__aeabi_d2f>
 8003fce:	4603      	mov	r3, r0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3710      	adds	r7, #16
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003fda:	bf00      	nop
 8003fdc:	3ff00000 	.word	0x3ff00000

08003fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003fe4:	f002 f91a 	bl	800621c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003fe8:	f000 f80d 	bl	8004006 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003fec:	f7ff f9d2 	bl	8003394 <MX_GPIO_Init>
  MX_DMA_Init();
 8003ff0:	f7fe fe9e 	bl	8002d30 <MX_DMA_Init>
  MX_I2C1_Init();
 8003ff4:	f7ff fc50 	bl	8003898 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8003ff8:	f002 f816 	bl	8006028 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8003ffc:	f7fe fee6 	bl	8002dcc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8004000:	f005 f8d5 	bl	80091ae <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004004:	e7fe      	b.n	8004004 <main+0x24>

08004006 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b090      	sub	sp, #64	; 0x40
 800400a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800400c:	f107 0318 	add.w	r3, r7, #24
 8004010:	2228      	movs	r2, #40	; 0x28
 8004012:	2100      	movs	r1, #0
 8004014:	4618      	mov	r0, r3
 8004016:	f006 fab7 	bl	800a588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800401a:	1d3b      	adds	r3, r7, #4
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	605a      	str	r2, [r3, #4]
 8004022:	609a      	str	r2, [r3, #8]
 8004024:	60da      	str	r2, [r3, #12]
 8004026:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004028:	2302      	movs	r3, #2
 800402a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800402c:	2301      	movs	r3, #1
 800402e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004030:	2310      	movs	r3, #16
 8004032:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004034:	2302      	movs	r3, #2
 8004036:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8004038:	2300      	movs	r3, #0
 800403a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800403c:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8004040:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004042:	f107 0318 	add.w	r3, r7, #24
 8004046:	4618      	mov	r0, r3
 8004048:	f003 ff52 	bl	8007ef0 <HAL_RCC_OscConfig>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8004052:	f000 f819 	bl	8004088 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004056:	230f      	movs	r3, #15
 8004058:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800405a:	2302      	movs	r3, #2
 800405c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800405e:	2300      	movs	r3, #0
 8004060:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004062:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004066:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004068:	2300      	movs	r3, #0
 800406a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800406c:	1d3b      	adds	r3, r7, #4
 800406e:	2102      	movs	r1, #2
 8004070:	4618      	mov	r0, r3
 8004072:	f004 f9bd 	bl	80083f0 <HAL_RCC_ClockConfig>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d001      	beq.n	8004080 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800407c:	f000 f804 	bl	8004088 <Error_Handler>
  }
}
 8004080:	bf00      	nop
 8004082:	3740      	adds	r7, #64	; 0x40
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800408c:	bf00      	nop
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr

08004094 <MPU9250_Accelerometer_Configuration>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

MPU9250_Error_code MPU9250_Accelerometer_Configuration(I2C_HandleTypeDef *I2Cx,
													   struct MPU9250 *DataStructure,
													   MPU9250_Acce_range Range) {
 8004094:	b580      	push	{r7, lr}
 8004096:	b08a      	sub	sp, #40	; 0x28
 8004098:	af04      	add	r7, sp, #16
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	4613      	mov	r3, r2
 80040a0:	71fb      	strb	r3, [r7, #7]

	uint8_t Byte_temp = 0x00;
 80040a2:	2300      	movs	r3, #0
 80040a4:	75fb      	strb	r3, [r7, #23]

	/* Case 1: Set accelerometer sensitivity range */
	Byte_temp = Range << 3;
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	75fb      	strb	r3, [r7, #23]

	if( HAL_I2C_Mem_Write(I2Cx, DataStructure->Device_addres, MPU9250_ACCEL_CONFIG, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	785b      	ldrb	r3, [r3, #1]
 80040b2:	b299      	uxth	r1, r3
 80040b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040b8:	9302      	str	r3, [sp, #8]
 80040ba:	2301      	movs	r3, #1
 80040bc:	9301      	str	r3, [sp, #4]
 80040be:	f107 0317 	add.w	r3, r7, #23
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	2301      	movs	r3, #1
 80040c6:	221c      	movs	r2, #28
 80040c8:	68f8      	ldr	r0, [r7, #12]
 80040ca:	f002 ff89 	bl	8006fe0 <HAL_I2C_Mem_Write>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <MPU9250_Accelerometer_Configuration+0x44>

		return MPU9250_Accelerometer_Config_FAIL;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e02b      	b.n	8004130 <MPU9250_Accelerometer_Configuration+0x9c>
		return MPU9250_Accelerometer_Config_FAIL;
	}
	*/

	/* Case 3: Save configuration to data structure */
	if(      Range == MPU9250_Acce_2G )     DataStructure->Accelerometer_sensitivity_factor = MPU9250_ACCE_SENSITIVITY_FACTOR_2G;
 80040d8:	79fb      	ldrb	r3, [r7, #7]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d104      	bne.n	80040e8 <MPU9250_Accelerometer_Configuration+0x54>
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80040e4:	811a      	strh	r2, [r3, #8]
 80040e6:	e016      	b.n	8004116 <MPU9250_Accelerometer_Configuration+0x82>
	else if( Range == MPU9250_Acce_4G )		DataStructure->Accelerometer_sensitivity_factor = MPU9250_ACCE_SENSITIVITY_FACTOR_4G;
 80040e8:	79fb      	ldrb	r3, [r7, #7]
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d104      	bne.n	80040f8 <MPU9250_Accelerometer_Configuration+0x64>
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040f4:	811a      	strh	r2, [r3, #8]
 80040f6:	e00e      	b.n	8004116 <MPU9250_Accelerometer_Configuration+0x82>
	else if( Range == MPU9250_Acce_8G )		DataStructure->Accelerometer_sensitivity_factor = MPU9250_ACCE_SENSITIVITY_FACTOR_8G;
 80040f8:	79fb      	ldrb	r3, [r7, #7]
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d104      	bne.n	8004108 <MPU9250_Accelerometer_Configuration+0x74>
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004104:	811a      	strh	r2, [r3, #8]
 8004106:	e006      	b.n	8004116 <MPU9250_Accelerometer_Configuration+0x82>
	else if( Range == MPU9250_Acce_16G )	DataStructure->Accelerometer_sensitivity_factor = MPU9250_ACCE_SENSITIVITY_FACTOR_16G;
 8004108:	79fb      	ldrb	r3, [r7, #7]
 800410a:	2b03      	cmp	r3, #3
 800410c:	d103      	bne.n	8004116 <MPU9250_Accelerometer_Configuration+0x82>
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004114:	811a      	strh	r2, [r3, #8]

	DataStructure->Accelerometer_X_offset = 0;
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	f04f 0200 	mov.w	r2, #0
 800411c:	631a      	str	r2, [r3, #48]	; 0x30
	DataStructure->Accelerometer_Y_offset = 0;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	f04f 0200 	mov.w	r2, #0
 8004124:	635a      	str	r2, [r3, #52]	; 0x34
	DataStructure->Accelerometer_Z_offset = 0;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	639a      	str	r2, [r3, #56]	; 0x38

	return MPU9250_Accelerometer_Config_OK;
 800412e:	2302      	movs	r3, #2
}
 8004130:	4618      	mov	r0, r3
 8004132:	3718      	adds	r7, #24
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <MPU9250_Gyroscope_Configuration>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

MPU9250_Error_code MPU9250_Gyroscope_Configuration(I2C_HandleTypeDef *I2Cx,
												   struct MPU9250 *DataStructure,
												   MPU9250_Gyro_range Range) {
 8004138:	b580      	push	{r7, lr}
 800413a:	b08a      	sub	sp, #40	; 0x28
 800413c:	af04      	add	r7, sp, #16
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	4613      	mov	r3, r2
 8004144:	71fb      	strb	r3, [r7, #7]

	uint8_t Byte_temp = 0x00;
 8004146:	2300      	movs	r3, #0
 8004148:	75fb      	strb	r3, [r7, #23]


	/* Case 1: Set gyroscope sensitivity range */
	Byte_temp = Range << 3;
 800414a:	79fb      	ldrb	r3, [r7, #7]
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	b2db      	uxtb	r3, r3
 8004150:	75fb      	strb	r3, [r7, #23]

	if( HAL_I2C_Mem_Write(I2Cx, DataStructure->Device_addres, MPU9250_GYRO_CONFIG, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	785b      	ldrb	r3, [r3, #1]
 8004156:	b299      	uxth	r1, r3
 8004158:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800415c:	9302      	str	r3, [sp, #8]
 800415e:	2301      	movs	r3, #1
 8004160:	9301      	str	r3, [sp, #4]
 8004162:	f107 0317 	add.w	r3, r7, #23
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	2301      	movs	r3, #1
 800416a:	221b      	movs	r2, #27
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f002 ff37 	bl	8006fe0 <HAL_I2C_Mem_Write>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d001      	beq.n	800417c <MPU9250_Gyroscope_Configuration+0x44>

		return MPU9250_Gyroscope_Config_FAIL;
 8004178:	2305      	movs	r3, #5
 800417a:	e03e      	b.n	80041fa <MPU9250_Gyroscope_Configuration+0xc2>
	}

	/* Case 2: Set gyroscope low pass filter cut-off frequency */
	Byte_temp = 0x0E;
 800417c:	230e      	movs	r3, #14
 800417e:	75fb      	strb	r3, [r7, #23]

	if( HAL_I2C_Mem_Write(I2Cx, DataStructure->Device_addres, MPU9250_CONFIG, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	785b      	ldrb	r3, [r3, #1]
 8004184:	b299      	uxth	r1, r3
 8004186:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800418a:	9302      	str	r3, [sp, #8]
 800418c:	2301      	movs	r3, #1
 800418e:	9301      	str	r3, [sp, #4]
 8004190:	f107 0317 	add.w	r3, r7, #23
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	2301      	movs	r3, #1
 8004198:	221a      	movs	r2, #26
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f002 ff20 	bl	8006fe0 <HAL_I2C_Mem_Write>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <MPU9250_Gyroscope_Configuration+0x72>

		return MPU9250_Gyroscope_Config_FAIL;
 80041a6:	2305      	movs	r3, #5
 80041a8:	e027      	b.n	80041fa <MPU9250_Gyroscope_Configuration+0xc2>
	}

	/* Case 3: Save configuration to data structure */
	if(      Range == MPU9250_Gyro_250s )   DataStructure->Gyroscope_sensitivity_factor = MPU9250_GYRO_SENSITIVITY_FACTOR_250s;
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d103      	bne.n	80041b8 <MPU9250_Gyroscope_Configuration+0x80>
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	2283      	movs	r2, #131	; 0x83
 80041b4:	815a      	strh	r2, [r3, #10]
 80041b6:	e013      	b.n	80041e0 <MPU9250_Gyroscope_Configuration+0xa8>
	else if( Range == MPU9250_Gyro_500s )	DataStructure->Gyroscope_sensitivity_factor = MPU9250_GYRO_SENSITIVITY_FACTOR_500s;
 80041b8:	79fb      	ldrb	r3, [r7, #7]
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d103      	bne.n	80041c6 <MPU9250_Gyroscope_Configuration+0x8e>
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2241      	movs	r2, #65	; 0x41
 80041c2:	815a      	strh	r2, [r3, #10]
 80041c4:	e00c      	b.n	80041e0 <MPU9250_Gyroscope_Configuration+0xa8>
	else if( Range == MPU9250_Gyro_1000s )	DataStructure->Gyroscope_sensitivity_factor = MPU9250_GYRO_SENSITIVITY_FACTOR_1000s;
 80041c6:	79fb      	ldrb	r3, [r7, #7]
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d103      	bne.n	80041d4 <MPU9250_Gyroscope_Configuration+0x9c>
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2220      	movs	r2, #32
 80041d0:	815a      	strh	r2, [r3, #10]
 80041d2:	e005      	b.n	80041e0 <MPU9250_Gyroscope_Configuration+0xa8>
	else if( Range == MPU9250_Gyro_2000s )	DataStructure->Gyroscope_sensitivity_factor = MPU9250_GYRO_SENSITIVITY_FACTOR_2000s;
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d102      	bne.n	80041e0 <MPU9250_Gyroscope_Configuration+0xa8>
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2210      	movs	r2, #16
 80041de:	815a      	strh	r2, [r3, #10]

	DataStructure->Gyroscope_X_offset = 0;
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	63da      	str	r2, [r3, #60]	; 0x3c
	DataStructure->Gyroscope_Y_offset = 0;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f04f 0200 	mov.w	r2, #0
 80041ee:	641a      	str	r2, [r3, #64]	; 0x40
	DataStructure->Gyroscope_Z_offset = 0;
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	645a      	str	r2, [r3, #68]	; 0x44

	return MPU9250_Gyroscope_Config_OK;
 80041f8:	2304      	movs	r3, #4

}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3718      	adds	r7, #24
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <MPU9250_Magnetometer_Configuration>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

MPU9250_Error_code MPU9250_Magnetometer_Configuration(I2C_HandleTypeDef *I2Cx,
												      struct MPU9250 *DataStructure) {
 8004204:	b590      	push	{r4, r7, lr}
 8004206:	b089      	sub	sp, #36	; 0x24
 8004208:	af04      	add	r7, sp, #16
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]


	uint8_t Byte_temp = 0x00;
 800420e:	2300      	movs	r3, #0
 8004210:	73fb      	strb	r3, [r7, #15]
	uint8_t Bytes_temp[3] = {0};
 8004212:	f107 030c 	add.w	r3, r7, #12
 8004216:	2100      	movs	r1, #0
 8004218:	460a      	mov	r2, r1
 800421a:	801a      	strh	r2, [r3, #0]
 800421c:	460a      	mov	r2, r1
 800421e:	709a      	strb	r2, [r3, #2]

	DataStructure->Magnetometer_addres = 0x0C << 1;
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	2218      	movs	r2, #24
 8004224:	709a      	strb	r2, [r3, #2]
	DataStructure->Magnetometer_sesitivity_factor = 0.1499; /* 4912/32768 */
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	4aa1      	ldr	r2, [pc, #644]	; (80044b0 <MPU9250_Magnetometer_Configuration+0x2ac>)
 800422a:	60da      	str	r2, [r3, #12]

	// Case 2: Disable the I2C master interface
	Byte_temp = 0x00;
 800422c:	2300      	movs	r3, #0
 800422e:	73fb      	strb	r3, [r7, #15]

	if( HAL_I2C_Mem_Write(I2Cx, DataStructure->Device_addres, MPU9250_USER_CTRL, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	785b      	ldrb	r3, [r3, #1]
 8004234:	b299      	uxth	r1, r3
 8004236:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800423a:	9302      	str	r3, [sp, #8]
 800423c:	2301      	movs	r3, #1
 800423e:	9301      	str	r3, [sp, #4]
 8004240:	f107 030f 	add.w	r3, r7, #15
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	2301      	movs	r3, #1
 8004248:	226a      	movs	r2, #106	; 0x6a
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f002 fec8 	bl	8006fe0 <HAL_I2C_Mem_Write>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <MPU9250_Magnetometer_Configuration+0x56>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 8004256:	2307      	movs	r3, #7
 8004258:	e126      	b.n	80044a8 <MPU9250_Magnetometer_Configuration+0x2a4>
	}

	// Case 3: Enable the bypass multiplexer
	Byte_temp = 0x02;
 800425a:	2302      	movs	r3, #2
 800425c:	73fb      	strb	r3, [r7, #15]

	if( HAL_I2C_Mem_Write(I2Cx, DataStructure->Device_addres, MPU9250_INT_PIN_CFG, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	785b      	ldrb	r3, [r3, #1]
 8004262:	b299      	uxth	r1, r3
 8004264:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004268:	9302      	str	r3, [sp, #8]
 800426a:	2301      	movs	r3, #1
 800426c:	9301      	str	r3, [sp, #4]
 800426e:	f107 030f 	add.w	r3, r7, #15
 8004272:	9300      	str	r3, [sp, #0]
 8004274:	2301      	movs	r3, #1
 8004276:	2237      	movs	r2, #55	; 0x37
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f002 feb1 	bl	8006fe0 <HAL_I2C_Mem_Write>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <MPU9250_Magnetometer_Configuration+0x84>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 8004284:	2307      	movs	r3, #7
 8004286:	e10f      	b.n	80044a8 <MPU9250_Magnetometer_Configuration+0x2a4>
	}

	// Case 1: Is device connected ?
	if( HAL_I2C_IsDeviceReady(I2Cx, DataStructure->Magnetometer_addres, 1, 1000) != HAL_OK ) {
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	789b      	ldrb	r3, [r3, #2]
 800428c:	b299      	uxth	r1, r3
 800428e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004292:	2201      	movs	r2, #1
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f003 f9d3 	bl	8007640 <HAL_I2C_IsDeviceReady>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <MPU9250_Magnetometer_Configuration+0xa0>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 80042a0:	2307      	movs	r3, #7
 80042a2:	e101      	b.n	80044a8 <MPU9250_Magnetometer_Configuration+0x2a4>
	}

	// Case 2: Who am i test
	if( HAL_I2C_Mem_Read(I2Cx, DataStructure->Magnetometer_addres, AK9863_WIA, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	789b      	ldrb	r3, [r3, #2]
 80042a8:	b299      	uxth	r1, r3
 80042aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042ae:	9302      	str	r3, [sp, #8]
 80042b0:	2301      	movs	r3, #1
 80042b2:	9301      	str	r3, [sp, #4]
 80042b4:	f107 030f 	add.w	r3, r7, #15
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	2301      	movs	r3, #1
 80042bc:	2200      	movs	r2, #0
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f002 ff88 	bl	80071d4 <HAL_I2C_Mem_Read>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <MPU9250_Magnetometer_Configuration+0xca>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Init_FAIL;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e0ec      	b.n	80044a8 <MPU9250_Magnetometer_Configuration+0x2a4>
	}

	if( Byte_temp != 0x48 ) {
 80042ce:	7bfb      	ldrb	r3, [r7, #15]
 80042d0:	2b48      	cmp	r3, #72	; 0x48
 80042d2:	d001      	beq.n	80042d8 <MPU9250_Magnetometer_Configuration+0xd4>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Init_FAIL;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e0e7      	b.n	80044a8 <MPU9250_Magnetometer_Configuration+0x2a4>
	}

	// Case 4: Setup to fuse ROM access mode and 16-bit output
	Byte_temp = 0x1F;
 80042d8:	231f      	movs	r3, #31
 80042da:	73fb      	strb	r3, [r7, #15]

	if( HAL_I2C_Mem_Write(I2Cx, DataStructure->Magnetometer_addres, AK9863_CNTL1, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	789b      	ldrb	r3, [r3, #2]
 80042e0:	b299      	uxth	r1, r3
 80042e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042e6:	9302      	str	r3, [sp, #8]
 80042e8:	2301      	movs	r3, #1
 80042ea:	9301      	str	r3, [sp, #4]
 80042ec:	f107 030f 	add.w	r3, r7, #15
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	2301      	movs	r3, #1
 80042f4:	220a      	movs	r2, #10
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f002 fe72 	bl	8006fe0 <HAL_I2C_Mem_Write>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <MPU9250_Magnetometer_Configuration+0x102>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 8004302:	2307      	movs	r3, #7
 8004304:	e0d0      	b.n	80044a8 <MPU9250_Magnetometer_Configuration+0x2a4>
	}

	HAL_Delay(100);
 8004306:	2064      	movs	r0, #100	; 0x64
 8004308:	f001 ffea 	bl	80062e0 <HAL_Delay>

	// Case 5: Read from the fuse ROM sensitivity adjustment values
	if( HAL_I2C_Mem_Read(I2Cx, DataStructure->Magnetometer_addres, AK9863_ASAX | 0x80, 1, Bytes_temp, 3, 1000) != HAL_OK ) {
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	789b      	ldrb	r3, [r3, #2]
 8004310:	b299      	uxth	r1, r3
 8004312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004316:	9302      	str	r3, [sp, #8]
 8004318:	2303      	movs	r3, #3
 800431a:	9301      	str	r3, [sp, #4]
 800431c:	f107 030c 	add.w	r3, r7, #12
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	2301      	movs	r3, #1
 8004324:	2290      	movs	r2, #144	; 0x90
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f002 ff54 	bl	80071d4 <HAL_I2C_Mem_Read>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d001      	beq.n	8004336 <MPU9250_Magnetometer_Configuration+0x132>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 8004332:	2307      	movs	r3, #7
 8004334:	e0b8      	b.n	80044a8 <MPU9250_Magnetometer_Configuration+0x2a4>
	}

	DataStructure->Magnetometer_ASAX = ( ( (Bytes_temp[0] - 128) * 0.5 ) / 128 ) + 1;
 8004336:	7b3b      	ldrb	r3, [r7, #12]
 8004338:	3b80      	subs	r3, #128	; 0x80
 800433a:	4618      	mov	r0, r3
 800433c:	f7fc f85a 	bl	80003f4 <__aeabi_i2d>
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	4b5b      	ldr	r3, [pc, #364]	; (80044b4 <MPU9250_Magnetometer_Configuration+0x2b0>)
 8004346:	f7fc f8bf 	bl	80004c8 <__aeabi_dmul>
 800434a:	4603      	mov	r3, r0
 800434c:	460c      	mov	r4, r1
 800434e:	4618      	mov	r0, r3
 8004350:	4621      	mov	r1, r4
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	4b58      	ldr	r3, [pc, #352]	; (80044b8 <MPU9250_Magnetometer_Configuration+0x2b4>)
 8004358:	f7fc f9e0 	bl	800071c <__aeabi_ddiv>
 800435c:	4603      	mov	r3, r0
 800435e:	460c      	mov	r4, r1
 8004360:	4618      	mov	r0, r3
 8004362:	4621      	mov	r1, r4
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	4b54      	ldr	r3, [pc, #336]	; (80044bc <MPU9250_Magnetometer_Configuration+0x2b8>)
 800436a:	f7fb fef7 	bl	800015c <__adddf3>
 800436e:	4603      	mov	r3, r0
 8004370:	460c      	mov	r4, r1
 8004372:	4618      	mov	r0, r3
 8004374:	4621      	mov	r1, r4
 8004376:	f7fc fb57 	bl	8000a28 <__aeabi_d2f>
 800437a:	4602      	mov	r2, r0
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	611a      	str	r2, [r3, #16]
	DataStructure->Magnetometer_ASAY = ( ( (Bytes_temp[1] - 128) * 0.5 ) / 128 ) + 1;
 8004380:	7b7b      	ldrb	r3, [r7, #13]
 8004382:	3b80      	subs	r3, #128	; 0x80
 8004384:	4618      	mov	r0, r3
 8004386:	f7fc f835 	bl	80003f4 <__aeabi_i2d>
 800438a:	f04f 0200 	mov.w	r2, #0
 800438e:	4b49      	ldr	r3, [pc, #292]	; (80044b4 <MPU9250_Magnetometer_Configuration+0x2b0>)
 8004390:	f7fc f89a 	bl	80004c8 <__aeabi_dmul>
 8004394:	4603      	mov	r3, r0
 8004396:	460c      	mov	r4, r1
 8004398:	4618      	mov	r0, r3
 800439a:	4621      	mov	r1, r4
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	4b45      	ldr	r3, [pc, #276]	; (80044b8 <MPU9250_Magnetometer_Configuration+0x2b4>)
 80043a2:	f7fc f9bb 	bl	800071c <__aeabi_ddiv>
 80043a6:	4603      	mov	r3, r0
 80043a8:	460c      	mov	r4, r1
 80043aa:	4618      	mov	r0, r3
 80043ac:	4621      	mov	r1, r4
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	4b42      	ldr	r3, [pc, #264]	; (80044bc <MPU9250_Magnetometer_Configuration+0x2b8>)
 80043b4:	f7fb fed2 	bl	800015c <__adddf3>
 80043b8:	4603      	mov	r3, r0
 80043ba:	460c      	mov	r4, r1
 80043bc:	4618      	mov	r0, r3
 80043be:	4621      	mov	r1, r4
 80043c0:	f7fc fb32 	bl	8000a28 <__aeabi_d2f>
 80043c4:	4602      	mov	r2, r0
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	615a      	str	r2, [r3, #20]
	DataStructure->Magnetometer_ASAZ = ( ( (Bytes_temp[2] - 128) * 0.5 ) / 128 ) + 1;
 80043ca:	7bbb      	ldrb	r3, [r7, #14]
 80043cc:	3b80      	subs	r3, #128	; 0x80
 80043ce:	4618      	mov	r0, r3
 80043d0:	f7fc f810 	bl	80003f4 <__aeabi_i2d>
 80043d4:	f04f 0200 	mov.w	r2, #0
 80043d8:	4b36      	ldr	r3, [pc, #216]	; (80044b4 <MPU9250_Magnetometer_Configuration+0x2b0>)
 80043da:	f7fc f875 	bl	80004c8 <__aeabi_dmul>
 80043de:	4603      	mov	r3, r0
 80043e0:	460c      	mov	r4, r1
 80043e2:	4618      	mov	r0, r3
 80043e4:	4621      	mov	r1, r4
 80043e6:	f04f 0200 	mov.w	r2, #0
 80043ea:	4b33      	ldr	r3, [pc, #204]	; (80044b8 <MPU9250_Magnetometer_Configuration+0x2b4>)
 80043ec:	f7fc f996 	bl	800071c <__aeabi_ddiv>
 80043f0:	4603      	mov	r3, r0
 80043f2:	460c      	mov	r4, r1
 80043f4:	4618      	mov	r0, r3
 80043f6:	4621      	mov	r1, r4
 80043f8:	f04f 0200 	mov.w	r2, #0
 80043fc:	4b2f      	ldr	r3, [pc, #188]	; (80044bc <MPU9250_Magnetometer_Configuration+0x2b8>)
 80043fe:	f7fb fead 	bl	800015c <__adddf3>
 8004402:	4603      	mov	r3, r0
 8004404:	460c      	mov	r4, r1
 8004406:	4618      	mov	r0, r3
 8004408:	4621      	mov	r1, r4
 800440a:	f7fc fb0d 	bl	8000a28 <__aeabi_d2f>
 800440e:	4602      	mov	r2, r0
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	619a      	str	r2, [r3, #24]

	// Case 6: Reset to power down mode
	Byte_temp = 0x00;
 8004414:	2300      	movs	r3, #0
 8004416:	73fb      	strb	r3, [r7, #15]

	if( HAL_I2C_Mem_Write(I2Cx, DataStructure->Magnetometer_addres, AK9863_CNTL1, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	789b      	ldrb	r3, [r3, #2]
 800441c:	b299      	uxth	r1, r3
 800441e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004422:	9302      	str	r3, [sp, #8]
 8004424:	2301      	movs	r3, #1
 8004426:	9301      	str	r3, [sp, #4]
 8004428:	f107 030f 	add.w	r3, r7, #15
 800442c:	9300      	str	r3, [sp, #0]
 800442e:	2301      	movs	r3, #1
 8004430:	220a      	movs	r2, #10
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f002 fdd4 	bl	8006fe0 <HAL_I2C_Mem_Write>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <MPU9250_Magnetometer_Configuration+0x23e>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 800443e:	2307      	movs	r3, #7
 8004440:	e032      	b.n	80044a8 <MPU9250_Magnetometer_Configuration+0x2a4>
	}

	// Case 7: Enable continuous mode 2 and 16-bit output
	Byte_temp = 0x16; // 0x16
 8004442:	2316      	movs	r3, #22
 8004444:	73fb      	strb	r3, [r7, #15]

	if( HAL_I2C_Mem_Write(I2Cx, DataStructure->Magnetometer_addres, AK9863_CNTL1, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	789b      	ldrb	r3, [r3, #2]
 800444a:	b299      	uxth	r1, r3
 800444c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004450:	9302      	str	r3, [sp, #8]
 8004452:	2301      	movs	r3, #1
 8004454:	9301      	str	r3, [sp, #4]
 8004456:	f107 030f 	add.w	r3, r7, #15
 800445a:	9300      	str	r3, [sp, #0]
 800445c:	2301      	movs	r3, #1
 800445e:	220a      	movs	r2, #10
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f002 fdbd 	bl	8006fe0 <HAL_I2C_Mem_Write>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d001      	beq.n	8004470 <MPU9250_Magnetometer_Configuration+0x26c>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 800446c:	2307      	movs	r3, #7
 800446e:	e01b      	b.n	80044a8 <MPU9250_Magnetometer_Configuration+0x2a4>
	}

	HAL_Delay(100);
 8004470:	2064      	movs	r0, #100	; 0x64
 8004472:	f001 ff35 	bl	80062e0 <HAL_Delay>

	/* Default variables value */
	DataStructure->Magnetometer_X_scale = 1;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800447c:	655a      	str	r2, [r3, #84]	; 0x54
	DataStructure->Magnetometer_Y_scale = 1;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004484:	659a      	str	r2, [r3, #88]	; 0x58
	DataStructure->Magnetometer_Z_scale = 1;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800448c:	65da      	str	r2, [r3, #92]	; 0x5c

	DataStructure->Magnetometer_X_offset = 0;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	649a      	str	r2, [r3, #72]	; 0x48
	DataStructure->Magnetometer_Y_offset = 0;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	f04f 0200 	mov.w	r2, #0
 800449c:	64da      	str	r2, [r3, #76]	; 0x4c
	DataStructure->Magnetometer_Z_offset = 0;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	651a      	str	r2, [r3, #80]	; 0x50

	return MPU9250_Magnetometer_Config_OK;
 80044a6:	2306      	movs	r3, #6
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3714      	adds	r7, #20
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd90      	pop	{r4, r7, pc}
 80044b0:	3e197f63 	.word	0x3e197f63
 80044b4:	3fe00000 	.word	0x3fe00000
 80044b8:	40600000 	.word	0x40600000
 80044bc:	3ff00000 	.word	0x3ff00000

080044c0 <MPU9250_Init>:

MPU9250_Error_code MPU9250_Init(I2C_HandleTypeDef *I2Cx,
								struct MPU9250 *DataStructure,
								MPU9250_Device_number Number,
								MPU9250_Acce_range Acce_range,
								MPU9250_Gyro_range Gyro_range) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b08a      	sub	sp, #40	; 0x28
 80044c4:	af04      	add	r7, sp, #16
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	4611      	mov	r1, r2
 80044cc:	461a      	mov	r2, r3
 80044ce:	460b      	mov	r3, r1
 80044d0:	71fb      	strb	r3, [r7, #7]
 80044d2:	4613      	mov	r3, r2
 80044d4:	71bb      	strb	r3, [r7, #6]

	uint8_t Byte_temp = 0x00;
 80044d6:	2300      	movs	r3, #0
 80044d8:	75fb      	strb	r3, [r7, #23]

	DataStructure->Device_number = Number;
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	79fa      	ldrb	r2, [r7, #7]
 80044de:	701a      	strb	r2, [r3, #0]
	DataStructure->Device_addres = (0x68 | DataStructure->Device_number) << 1;
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	781b      	ldrb	r3, [r3, #0]
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	f063 032f 	orn	r3, r3, #47	; 0x2f
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	705a      	strb	r2, [r3, #1]

	/* Case 1: Is device connected ? */
	if( HAL_I2C_IsDeviceReady(I2Cx, DataStructure->Device_addres, 1, 1000) != HAL_OK ) {
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	785b      	ldrb	r3, [r3, #1]
 80044f6:	b299      	uxth	r1, r3
 80044f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044fc:	2201      	movs	r2, #1
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f003 f89e 	bl	8007640 <HAL_I2C_IsDeviceReady>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <MPU9250_Init+0x4e>

		return MPU9250_Init_FAIL;
 800450a:	2301      	movs	r3, #1
 800450c:	e051      	b.n	80045b2 <MPU9250_Init+0xf2>
	}

	/* Case 2: Who am i test */
	if( HAL_I2C_Mem_Read(I2Cx, DataStructure->Device_addres, MPU9250_WHO_AM_I, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	785b      	ldrb	r3, [r3, #1]
 8004512:	b299      	uxth	r1, r3
 8004514:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004518:	9302      	str	r3, [sp, #8]
 800451a:	2301      	movs	r3, #1
 800451c:	9301      	str	r3, [sp, #4]
 800451e:	f107 0317 	add.w	r3, r7, #23
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	2301      	movs	r3, #1
 8004526:	2275      	movs	r2, #117	; 0x75
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f002 fe53 	bl	80071d4 <HAL_I2C_Mem_Read>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <MPU9250_Init+0x78>

		return MPU9250_Init_FAIL;
 8004534:	2301      	movs	r3, #1
 8004536:	e03c      	b.n	80045b2 <MPU9250_Init+0xf2>
	}

	if( Byte_temp != 0x71 ) {
 8004538:	7dfb      	ldrb	r3, [r7, #23]
 800453a:	2b71      	cmp	r3, #113	; 0x71
 800453c:	d001      	beq.n	8004542 <MPU9250_Init+0x82>

		return MPU9250_Init_FAIL;
 800453e:	2301      	movs	r3, #1
 8004540:	e037      	b.n	80045b2 <MPU9250_Init+0xf2>
	}

	/* Case 3: Wake up */
	Byte_temp = 0x01;
 8004542:	2301      	movs	r3, #1
 8004544:	75fb      	strb	r3, [r7, #23]

	if( HAL_I2C_Mem_Write(I2Cx, DataStructure->Device_addres, MPU9250_PWR_MGMT_1, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	785b      	ldrb	r3, [r3, #1]
 800454a:	b299      	uxth	r1, r3
 800454c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004550:	9302      	str	r3, [sp, #8]
 8004552:	2301      	movs	r3, #1
 8004554:	9301      	str	r3, [sp, #4]
 8004556:	f107 0317 	add.w	r3, r7, #23
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	2301      	movs	r3, #1
 800455e:	226b      	movs	r2, #107	; 0x6b
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	f002 fd3d 	bl	8006fe0 <HAL_I2C_Mem_Write>
 8004566:	4603      	mov	r3, r0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d001      	beq.n	8004570 <MPU9250_Init+0xb0>

		return MPU9250_Init_FAIL;
 800456c:	2301      	movs	r3, #1
 800456e:	e020      	b.n	80045b2 <MPU9250_Init+0xf2>
	}

	/* Case 4: Accelerometer configuration */
	if( MPU9250_Accelerometer_Configuration(I2Cx, DataStructure, Acce_range) != MPU9250_Accelerometer_Config_OK ) {
 8004570:	79bb      	ldrb	r3, [r7, #6]
 8004572:	461a      	mov	r2, r3
 8004574:	68b9      	ldr	r1, [r7, #8]
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f7ff fd8c 	bl	8004094 <MPU9250_Accelerometer_Configuration>
 800457c:	4603      	mov	r3, r0
 800457e:	2b02      	cmp	r3, #2
 8004580:	d001      	beq.n	8004586 <MPU9250_Init+0xc6>

		return MPU9250_Accelerometer_Config_FAIL;
 8004582:	2303      	movs	r3, #3
 8004584:	e015      	b.n	80045b2 <MPU9250_Init+0xf2>
	}

	/* Case 5: Gyroscope configuration */
	if( MPU9250_Gyroscope_Configuration(I2Cx, DataStructure, Gyro_range) != MPU9250_Gyroscope_Config_OK ) {
 8004586:	f897 3020 	ldrb.w	r3, [r7, #32]
 800458a:	461a      	mov	r2, r3
 800458c:	68b9      	ldr	r1, [r7, #8]
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f7ff fdd2 	bl	8004138 <MPU9250_Gyroscope_Configuration>
 8004594:	4603      	mov	r3, r0
 8004596:	2b04      	cmp	r3, #4
 8004598:	d001      	beq.n	800459e <MPU9250_Init+0xde>

		return MPU9250_Gyroscope_Config_FAIL;
 800459a:	2305      	movs	r3, #5
 800459c:	e009      	b.n	80045b2 <MPU9250_Init+0xf2>
	}

	/* Case 6: Magnetometer configuration */
	if( MPU9250_Magnetometer_Configuration(I2Cx, DataStructure) != MPU9250_Magnetometer_Config_OK ) {
 800459e:	68b9      	ldr	r1, [r7, #8]
 80045a0:	68f8      	ldr	r0, [r7, #12]
 80045a2:	f7ff fe2f 	bl	8004204 <MPU9250_Magnetometer_Configuration>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b06      	cmp	r3, #6
 80045aa:	d001      	beq.n	80045b0 <MPU9250_Init+0xf0>

		return MPU9250_Magnetometer_Config_FAIL;
 80045ac:	2307      	movs	r3, #7
 80045ae:	e000      	b.n	80045b2 <MPU9250_Init+0xf2>
	}

	return MPU9250_Init_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3718      	adds	r7, #24
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}

080045ba <MPU9250_Read_Accelerometer>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

MPU9250_Error_code MPU9250_Read_Accelerometer(I2C_HandleTypeDef *I2Cx,
											  struct MPU9250 *DataStructure) {
 80045ba:	b590      	push	{r4, r7, lr}
 80045bc:	b089      	sub	sp, #36	; 0x24
 80045be:	af04      	add	r7, sp, #16
 80045c0:	6078      	str	r0, [r7, #4]
 80045c2:	6039      	str	r1, [r7, #0]

	uint8_t Bytes_temp[6] = {0x00};
 80045c4:	f107 0308 	add.w	r3, r7, #8
 80045c8:	2200      	movs	r2, #0
 80045ca:	601a      	str	r2, [r3, #0]
 80045cc:	809a      	strh	r2, [r3, #4]

	if( HAL_I2C_Mem_Read(I2Cx, DataStructure->Device_addres, MPU9250_ACCEL_XOUT_H, 1, Bytes_temp , 6, 1000) != HAL_OK ) {
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	785b      	ldrb	r3, [r3, #1]
 80045d2:	b299      	uxth	r1, r3
 80045d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045d8:	9302      	str	r3, [sp, #8]
 80045da:	2306      	movs	r3, #6
 80045dc:	9301      	str	r3, [sp, #4]
 80045de:	f107 0308 	add.w	r3, r7, #8
 80045e2:	9300      	str	r3, [sp, #0]
 80045e4:	2301      	movs	r3, #1
 80045e6:	223b      	movs	r2, #59	; 0x3b
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f002 fdf3 	bl	80071d4 <HAL_I2C_Mem_Read>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d001      	beq.n	80045f8 <MPU9250_Read_Accelerometer+0x3e>

		return MPU9250_Read_Accelerometer_FAIL;
 80045f4:	230f      	movs	r3, #15
 80045f6:	e084      	b.n	8004702 <MPU9250_Read_Accelerometer+0x148>
	}

	DataStructure->Accelerometer_X = ( Bytes_temp[0] << 8 | Bytes_temp[1] ) - DataStructure->Accelerometer_X_offset;
 80045f8:	7a3b      	ldrb	r3, [r7, #8]
 80045fa:	021b      	lsls	r3, r3, #8
 80045fc:	7a7a      	ldrb	r2, [r7, #9]
 80045fe:	4313      	orrs	r3, r2
 8004600:	4618      	mov	r0, r3
 8004602:	f7fc fb1b 	bl	8000c3c <__aeabi_i2f>
 8004606:	4602      	mov	r2, r0
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460c:	4619      	mov	r1, r3
 800460e:	4610      	mov	r0, r2
 8004610:	f7fc fa5e 	bl	8000ad0 <__aeabi_fsub>
 8004614:	4603      	mov	r3, r0
 8004616:	4618      	mov	r0, r3
 8004618:	f7fc fd40 	bl	800109c <__aeabi_f2iz>
 800461c:	4603      	mov	r3, r0
 800461e:	b21a      	sxth	r2, r3
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	839a      	strh	r2, [r3, #28]
	DataStructure->Accelerometer_Y = ( Bytes_temp[2] << 8 | Bytes_temp[3] ) - DataStructure->Accelerometer_Y_offset;
 8004624:	7abb      	ldrb	r3, [r7, #10]
 8004626:	021b      	lsls	r3, r3, #8
 8004628:	7afa      	ldrb	r2, [r7, #11]
 800462a:	4313      	orrs	r3, r2
 800462c:	4618      	mov	r0, r3
 800462e:	f7fc fb05 	bl	8000c3c <__aeabi_i2f>
 8004632:	4602      	mov	r2, r0
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004638:	4619      	mov	r1, r3
 800463a:	4610      	mov	r0, r2
 800463c:	f7fc fa48 	bl	8000ad0 <__aeabi_fsub>
 8004640:	4603      	mov	r3, r0
 8004642:	4618      	mov	r0, r3
 8004644:	f7fc fd2a 	bl	800109c <__aeabi_f2iz>
 8004648:	4603      	mov	r3, r0
 800464a:	b21a      	sxth	r2, r3
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	83da      	strh	r2, [r3, #30]
	DataStructure->Accelerometer_Z = ( Bytes_temp[4] << 8 | Bytes_temp[5] ) - DataStructure->Accelerometer_Z_offset;
 8004650:	7b3b      	ldrb	r3, [r7, #12]
 8004652:	021b      	lsls	r3, r3, #8
 8004654:	7b7a      	ldrb	r2, [r7, #13]
 8004656:	4313      	orrs	r3, r2
 8004658:	4618      	mov	r0, r3
 800465a:	f7fc faef 	bl	8000c3c <__aeabi_i2f>
 800465e:	4602      	mov	r2, r0
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004664:	4619      	mov	r1, r3
 8004666:	4610      	mov	r0, r2
 8004668:	f7fc fa32 	bl	8000ad0 <__aeabi_fsub>
 800466c:	4603      	mov	r3, r0
 800466e:	4618      	mov	r0, r3
 8004670:	f7fc fd14 	bl	800109c <__aeabi_f2iz>
 8004674:	4603      	mov	r3, r0
 8004676:	b21a      	sxth	r2, r3
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	841a      	strh	r2, [r3, #32]

	/* Case x: Calculate g-force values for XYZ axis */
	DataStructure->Accelerometer_X_g = (float)(DataStructure->Accelerometer_X) / DataStructure->Accelerometer_sensitivity_factor;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004682:	4618      	mov	r0, r3
 8004684:	f7fc fada 	bl	8000c3c <__aeabi_i2f>
 8004688:	4604      	mov	r4, r0
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004690:	4618      	mov	r0, r3
 8004692:	f7fc fad3 	bl	8000c3c <__aeabi_i2f>
 8004696:	4603      	mov	r3, r0
 8004698:	4619      	mov	r1, r3
 800469a:	4620      	mov	r0, r4
 800469c:	f7fc fbd6 	bl	8000e4c <__aeabi_fdiv>
 80046a0:	4603      	mov	r3, r0
 80046a2:	461a      	mov	r2, r3
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	665a      	str	r2, [r3, #100]	; 0x64
	DataStructure->Accelerometer_Y_g = (float)(DataStructure->Accelerometer_Y) / DataStructure->Accelerometer_sensitivity_factor;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fc fac4 	bl	8000c3c <__aeabi_i2f>
 80046b4:	4604      	mov	r4, r0
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fc fabd 	bl	8000c3c <__aeabi_i2f>
 80046c2:	4603      	mov	r3, r0
 80046c4:	4619      	mov	r1, r3
 80046c6:	4620      	mov	r0, r4
 80046c8:	f7fc fbc0 	bl	8000e4c <__aeabi_fdiv>
 80046cc:	4603      	mov	r3, r0
 80046ce:	461a      	mov	r2, r3
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	669a      	str	r2, [r3, #104]	; 0x68
	DataStructure->Accelerometer_Z_g = (float)(DataStructure->Accelerometer_Z) / DataStructure->Accelerometer_sensitivity_factor;
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80046da:	4618      	mov	r0, r3
 80046dc:	f7fc faae 	bl	8000c3c <__aeabi_i2f>
 80046e0:	4604      	mov	r4, r0
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fc faa7 	bl	8000c3c <__aeabi_i2f>
 80046ee:	4603      	mov	r3, r0
 80046f0:	4619      	mov	r1, r3
 80046f2:	4620      	mov	r0, r4
 80046f4:	f7fc fbaa 	bl	8000e4c <__aeabi_fdiv>
 80046f8:	4603      	mov	r3, r0
 80046fa:	461a      	mov	r2, r3
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	66da      	str	r2, [r3, #108]	; 0x6c

	return MPU9250_Read_Accelerometer_OK;
 8004700:	230e      	movs	r3, #14
}
 8004702:	4618      	mov	r0, r3
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	bd90      	pop	{r4, r7, pc}

0800470a <MPU9250_Read_Gyroscope>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

MPU9250_Error_code MPU9250_Read_Gyroscope(I2C_HandleTypeDef *I2Cx,
										  struct MPU9250 *DataStructure) {
 800470a:	b590      	push	{r4, r7, lr}
 800470c:	b089      	sub	sp, #36	; 0x24
 800470e:	af04      	add	r7, sp, #16
 8004710:	6078      	str	r0, [r7, #4]
 8004712:	6039      	str	r1, [r7, #0]

	uint8_t Bytes_temp[6] = { 0x00 };
 8004714:	f107 0308 	add.w	r3, r7, #8
 8004718:	2200      	movs	r2, #0
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	809a      	strh	r2, [r3, #4]

	if (HAL_I2C_Mem_Read(I2Cx, DataStructure->Device_addres, MPU9250_GYRO_XOUT_H, 1, Bytes_temp, 6, 1000) != HAL_OK) {
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	785b      	ldrb	r3, [r3, #1]
 8004722:	b299      	uxth	r1, r3
 8004724:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004728:	9302      	str	r3, [sp, #8]
 800472a:	2306      	movs	r3, #6
 800472c:	9301      	str	r3, [sp, #4]
 800472e:	f107 0308 	add.w	r3, r7, #8
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	2301      	movs	r3, #1
 8004736:	2243      	movs	r2, #67	; 0x43
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f002 fd4b 	bl	80071d4 <HAL_I2C_Mem_Read>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <MPU9250_Read_Gyroscope+0x3e>

		return MPU9250_Read_Gyroscope_FAIL;
 8004744:	2311      	movs	r3, #17
 8004746:	e084      	b.n	8004852 <MPU9250_Read_Gyroscope+0x148>
	}

	DataStructure->Gyroscope_X = ( Bytes_temp[0] << 8 | Bytes_temp[1] ) - DataStructure->Gyroscope_X_offset;
 8004748:	7a3b      	ldrb	r3, [r7, #8]
 800474a:	021b      	lsls	r3, r3, #8
 800474c:	7a7a      	ldrb	r2, [r7, #9]
 800474e:	4313      	orrs	r3, r2
 8004750:	4618      	mov	r0, r3
 8004752:	f7fc fa73 	bl	8000c3c <__aeabi_i2f>
 8004756:	4602      	mov	r2, r0
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475c:	4619      	mov	r1, r3
 800475e:	4610      	mov	r0, r2
 8004760:	f7fc f9b6 	bl	8000ad0 <__aeabi_fsub>
 8004764:	4603      	mov	r3, r0
 8004766:	4618      	mov	r0, r3
 8004768:	f7fc fc98 	bl	800109c <__aeabi_f2iz>
 800476c:	4603      	mov	r3, r0
 800476e:	b21a      	sxth	r2, r3
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	845a      	strh	r2, [r3, #34]	; 0x22
	DataStructure->Gyroscope_Y = ( Bytes_temp[2] << 8 | Bytes_temp[3] ) - DataStructure->Gyroscope_Y_offset;
 8004774:	7abb      	ldrb	r3, [r7, #10]
 8004776:	021b      	lsls	r3, r3, #8
 8004778:	7afa      	ldrb	r2, [r7, #11]
 800477a:	4313      	orrs	r3, r2
 800477c:	4618      	mov	r0, r3
 800477e:	f7fc fa5d 	bl	8000c3c <__aeabi_i2f>
 8004782:	4602      	mov	r2, r0
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	4619      	mov	r1, r3
 800478a:	4610      	mov	r0, r2
 800478c:	f7fc f9a0 	bl	8000ad0 <__aeabi_fsub>
 8004790:	4603      	mov	r3, r0
 8004792:	4618      	mov	r0, r3
 8004794:	f7fc fc82 	bl	800109c <__aeabi_f2iz>
 8004798:	4603      	mov	r3, r0
 800479a:	b21a      	sxth	r2, r3
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	849a      	strh	r2, [r3, #36]	; 0x24
	DataStructure->Gyroscope_Z = ( Bytes_temp[4] << 8 | Bytes_temp[5] ) - DataStructure->Gyroscope_Z_offset;
 80047a0:	7b3b      	ldrb	r3, [r7, #12]
 80047a2:	021b      	lsls	r3, r3, #8
 80047a4:	7b7a      	ldrb	r2, [r7, #13]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7fc fa47 	bl	8000c3c <__aeabi_i2f>
 80047ae:	4602      	mov	r2, r0
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b4:	4619      	mov	r1, r3
 80047b6:	4610      	mov	r0, r2
 80047b8:	f7fc f98a 	bl	8000ad0 <__aeabi_fsub>
 80047bc:	4603      	mov	r3, r0
 80047be:	4618      	mov	r0, r3
 80047c0:	f7fc fc6c 	bl	800109c <__aeabi_f2iz>
 80047c4:	4603      	mov	r3, r0
 80047c6:	b21a      	sxth	r2, r3
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	84da      	strh	r2, [r3, #38]	; 0x26

	/* Case x: Calculate dgs/s values for XYZ axis */
	DataStructure->Gyroscope_X_dgs =  (float)(DataStructure->Gyroscope_X) / DataStructure->Gyroscope_sensitivity_factor;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fc fa32 	bl	8000c3c <__aeabi_i2f>
 80047d8:	4604      	mov	r4, r0
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7fc fa2b 	bl	8000c3c <__aeabi_i2f>
 80047e6:	4603      	mov	r3, r0
 80047e8:	4619      	mov	r1, r3
 80047ea:	4620      	mov	r0, r4
 80047ec:	f7fc fb2e 	bl	8000e4c <__aeabi_fdiv>
 80047f0:	4603      	mov	r3, r0
 80047f2:	461a      	mov	r2, r3
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	671a      	str	r2, [r3, #112]	; 0x70
	DataStructure->Gyroscope_Y_dgs =  (float)(DataStructure->Gyroscope_Y) / DataStructure->Gyroscope_sensitivity_factor;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fc fa1c 	bl	8000c3c <__aeabi_i2f>
 8004804:	4604      	mov	r4, r0
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800480c:	4618      	mov	r0, r3
 800480e:	f7fc fa15 	bl	8000c3c <__aeabi_i2f>
 8004812:	4603      	mov	r3, r0
 8004814:	4619      	mov	r1, r3
 8004816:	4620      	mov	r0, r4
 8004818:	f7fc fb18 	bl	8000e4c <__aeabi_fdiv>
 800481c:	4603      	mov	r3, r0
 800481e:	461a      	mov	r2, r3
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	675a      	str	r2, [r3, #116]	; 0x74
	DataStructure->Gyroscope_Z_dgs =  (float)(DataStructure->Gyroscope_Z) / DataStructure->Gyroscope_sensitivity_factor;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 800482a:	4618      	mov	r0, r3
 800482c:	f7fc fa06 	bl	8000c3c <__aeabi_i2f>
 8004830:	4604      	mov	r4, r0
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8004838:	4618      	mov	r0, r3
 800483a:	f7fc f9ff 	bl	8000c3c <__aeabi_i2f>
 800483e:	4603      	mov	r3, r0
 8004840:	4619      	mov	r1, r3
 8004842:	4620      	mov	r0, r4
 8004844:	f7fc fb02 	bl	8000e4c <__aeabi_fdiv>
 8004848:	4603      	mov	r3, r0
 800484a:	461a      	mov	r2, r3
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	679a      	str	r2, [r3, #120]	; 0x78

	return MPU9250_Read_Gyroscope_OK;
 8004850:	2310      	movs	r3, #16
}
 8004852:	4618      	mov	r0, r3
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	bd90      	pop	{r4, r7, pc}

0800485a <MPU9250_Read_Magnetometer>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

MPU9250_Error_code MPU9250_Read_Magnetometer(I2C_HandleTypeDef *I2Cx,
										     struct MPU9250 *DataStructure) {
 800485a:	b580      	push	{r7, lr}
 800485c:	b08c      	sub	sp, #48	; 0x30
 800485e:	af04      	add	r7, sp, #16
 8004860:	6078      	str	r0, [r7, #4]
 8004862:	6039      	str	r1, [r7, #0]

	uint8_t Bytes_temp[8] = { 0x00 };
 8004864:	f107 030c 	add.w	r3, r7, #12
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	605a      	str	r2, [r3, #4]

	/* Case x: Read measured values from registers */
	if( HAL_I2C_Mem_Read(I2Cx, DataStructure->Magnetometer_addres, AK9863_ST1, 1, Bytes_temp, 8, 1000) != HAL_OK ) {
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	789b      	ldrb	r3, [r3, #2]
 8004872:	b299      	uxth	r1, r3
 8004874:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004878:	9302      	str	r3, [sp, #8]
 800487a:	2308      	movs	r3, #8
 800487c:	9301      	str	r3, [sp, #4]
 800487e:	f107 030c 	add.w	r3, r7, #12
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	2301      	movs	r3, #1
 8004886:	2202      	movs	r2, #2
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f002 fca3 	bl	80071d4 <HAL_I2C_Mem_Read>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <MPU9250_Read_Magnetometer+0x3e>

		return MPU9250_Read_Magnetometer_FAIL;
 8004894:	2313      	movs	r3, #19
 8004896:	e0c2      	b.n	8004a1e <MPU9250_Read_Magnetometer+0x1c4>
	if( Bytes_temp[0] & 0x00 ) {

		return MPU9250_Read_Magnetometer_FAIL;
	}

	DataStructure->Magnetometer_X = ( ( Bytes_temp[2] << 8 | Bytes_temp[1] ) - DataStructure->Magnetometer_X_offset );
 8004898:	7bbb      	ldrb	r3, [r7, #14]
 800489a:	021b      	lsls	r3, r3, #8
 800489c:	7b7a      	ldrb	r2, [r7, #13]
 800489e:	4313      	orrs	r3, r2
 80048a0:	4618      	mov	r0, r3
 80048a2:	f7fc f9cb 	bl	8000c3c <__aeabi_i2f>
 80048a6:	4602      	mov	r2, r0
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048ac:	4619      	mov	r1, r3
 80048ae:	4610      	mov	r0, r2
 80048b0:	f7fc f90e 	bl	8000ad0 <__aeabi_fsub>
 80048b4:	4603      	mov	r3, r0
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fc fbf0 	bl	800109c <__aeabi_f2iz>
 80048bc:	4603      	mov	r3, r0
 80048be:	b21a      	sxth	r2, r3
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	851a      	strh	r2, [r3, #40]	; 0x28
	DataStructure->Magnetometer_Y = ( ( Bytes_temp[4] << 8 | Bytes_temp[3] ) - DataStructure->Magnetometer_Y_offset );
 80048c4:	7c3b      	ldrb	r3, [r7, #16]
 80048c6:	021b      	lsls	r3, r3, #8
 80048c8:	7bfa      	ldrb	r2, [r7, #15]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7fc f9b5 	bl	8000c3c <__aeabi_i2f>
 80048d2:	4602      	mov	r2, r0
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d8:	4619      	mov	r1, r3
 80048da:	4610      	mov	r0, r2
 80048dc:	f7fc f8f8 	bl	8000ad0 <__aeabi_fsub>
 80048e0:	4603      	mov	r3, r0
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fc fbda 	bl	800109c <__aeabi_f2iz>
 80048e8:	4603      	mov	r3, r0
 80048ea:	b21a      	sxth	r2, r3
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	855a      	strh	r2, [r3, #42]	; 0x2a
	DataStructure->Magnetometer_Z = ( ( Bytes_temp[6] << 8 | Bytes_temp[5] ) - DataStructure->Magnetometer_Z_offset );
 80048f0:	7cbb      	ldrb	r3, [r7, #18]
 80048f2:	021b      	lsls	r3, r3, #8
 80048f4:	7c7a      	ldrb	r2, [r7, #17]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7fc f99f 	bl	8000c3c <__aeabi_i2f>
 80048fe:	4602      	mov	r2, r0
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004904:	4619      	mov	r1, r3
 8004906:	4610      	mov	r0, r2
 8004908:	f7fc f8e2 	bl	8000ad0 <__aeabi_fsub>
 800490c:	4603      	mov	r3, r0
 800490e:	4618      	mov	r0, r3
 8004910:	f7fc fbc4 	bl	800109c <__aeabi_f2iz>
 8004914:	4603      	mov	r3, r0
 8004916:	b21a      	sxth	r2, r3
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	859a      	strh	r2, [r3, #44]	; 0x2c

	/* Case x: Calculate uT (micro Tesla) value for XYZ axis */
	DataStructure->Magnetometer_X_uT = DataStructure->Magnetometer_X * DataStructure->Magnetometer_ASAX * DataStructure->Magnetometer_sesitivity_factor * DataStructure->Magnetometer_X_scale;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8004922:	4618      	mov	r0, r3
 8004924:	f7fc f98a 	bl	8000c3c <__aeabi_i2f>
 8004928:	4602      	mov	r2, r0
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	4619      	mov	r1, r3
 8004930:	4610      	mov	r0, r2
 8004932:	f7fc f9d7 	bl	8000ce4 <__aeabi_fmul>
 8004936:	4603      	mov	r3, r0
 8004938:	461a      	mov	r2, r3
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	4619      	mov	r1, r3
 8004940:	4610      	mov	r0, r2
 8004942:	f7fc f9cf 	bl	8000ce4 <__aeabi_fmul>
 8004946:	4603      	mov	r3, r0
 8004948:	461a      	mov	r2, r3
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494e:	4619      	mov	r1, r3
 8004950:	4610      	mov	r0, r2
 8004952:	f7fc f9c7 	bl	8000ce4 <__aeabi_fmul>
 8004956:	4603      	mov	r3, r0
 8004958:	461a      	mov	r2, r3
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	DataStructure->Magnetometer_Y_uT = DataStructure->Magnetometer_Y * DataStructure->Magnetometer_ASAY * DataStructure->Magnetometer_sesitivity_factor * DataStructure->Magnetometer_Y_scale;
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8004966:	4618      	mov	r0, r3
 8004968:	f7fc f968 	bl	8000c3c <__aeabi_i2f>
 800496c:	4602      	mov	r2, r0
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	4619      	mov	r1, r3
 8004974:	4610      	mov	r0, r2
 8004976:	f7fc f9b5 	bl	8000ce4 <__aeabi_fmul>
 800497a:	4603      	mov	r3, r0
 800497c:	461a      	mov	r2, r3
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	4619      	mov	r1, r3
 8004984:	4610      	mov	r0, r2
 8004986:	f7fc f9ad 	bl	8000ce4 <__aeabi_fmul>
 800498a:	4603      	mov	r3, r0
 800498c:	461a      	mov	r2, r3
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004992:	4619      	mov	r1, r3
 8004994:	4610      	mov	r0, r2
 8004996:	f7fc f9a5 	bl	8000ce4 <__aeabi_fmul>
 800499a:	4603      	mov	r3, r0
 800499c:	461a      	mov	r2, r3
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	DataStructure->Magnetometer_Z_uT = DataStructure->Magnetometer_Z * DataStructure->Magnetometer_ASAZ * DataStructure->Magnetometer_sesitivity_factor * DataStructure->Magnetometer_Z_scale;
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fc f946 	bl	8000c3c <__aeabi_i2f>
 80049b0:	4602      	mov	r2, r0
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	4619      	mov	r1, r3
 80049b8:	4610      	mov	r0, r2
 80049ba:	f7fc f993 	bl	8000ce4 <__aeabi_fmul>
 80049be:	4603      	mov	r3, r0
 80049c0:	461a      	mov	r2, r3
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	4619      	mov	r1, r3
 80049c8:	4610      	mov	r0, r2
 80049ca:	f7fc f98b 	bl	8000ce4 <__aeabi_fmul>
 80049ce:	4603      	mov	r3, r0
 80049d0:	461a      	mov	r2, r3
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d6:	4619      	mov	r1, r3
 80049d8:	4610      	mov	r0, r2
 80049da:	f7fc f983 	bl	8000ce4 <__aeabi_fmul>
 80049de:	4603      	mov	r3, r0
 80049e0:	461a      	mov	r2, r3
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	float a = DataStructure->Magnetometer_X_uT;
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ee:	61fb      	str	r3, [r7, #28]
	float b = DataStructure->Magnetometer_Y_uT;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049f6:	61bb      	str	r3, [r7, #24]
	float c = DataStructure->Magnetometer_Z_uT;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fe:	617b      	str	r3, [r7, #20]

	DataStructure->Magnetometer_X_uT = b;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	69ba      	ldr	r2, [r7, #24]
 8004a04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	DataStructure->Magnetometer_Y_uT = a;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	69fa      	ldr	r2, [r7, #28]
 8004a0c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	DataStructure->Magnetometer_Z_uT = -c;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

	return MPU9250_Read_Magnetometer_OK;
 8004a1c:	2312      	movs	r3, #18
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3720      	adds	r7, #32
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
	...

08004a28 <MPU9250_Calibration_Acce>:

/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

void MPU9250_Calibration_Acce(I2C_HandleTypeDef *I2Cx,
	      	  	  	  	  	  	  	        struct MPU9250 *DataStructure) {
 8004a28:	b590      	push	{r4, r7, lr}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	6039      	str	r1, [r7, #0]

	float Acce_X_offset = 0, Acce_Y_offset = 0, Acce_Z_offset = 0;
 8004a32:	f04f 0300 	mov.w	r3, #0
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	f04f 0300 	mov.w	r3, #0
 8004a3c:	613b      	str	r3, [r7, #16]
 8004a3e:	f04f 0300 	mov.w	r3, #0
 8004a42:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 1000; ++i) {
 8004a44:	2300      	movs	r3, #0
 8004a46:	60bb      	str	r3, [r7, #8]
 8004a48:	e02d      	b.n	8004aa6 <MPU9250_Calibration_Acce+0x7e>

		MPU9250_Read_Accelerometer(I2Cx, DataStructure);
 8004a4a:	6839      	ldr	r1, [r7, #0]
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f7ff fdb4 	bl	80045ba <MPU9250_Read_Accelerometer>

		Acce_X_offset = Acce_X_offset + DataStructure->Accelerometer_X;
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7fc f8ef 	bl	8000c3c <__aeabi_i2f>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	4619      	mov	r1, r3
 8004a62:	6978      	ldr	r0, [r7, #20]
 8004a64:	f7fc f836 	bl	8000ad4 <__addsf3>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	617b      	str	r3, [r7, #20]
		Acce_Y_offset = Acce_Y_offset + DataStructure->Accelerometer_Y;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fc f8e2 	bl	8000c3c <__aeabi_i2f>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	6938      	ldr	r0, [r7, #16]
 8004a7e:	f7fc f829 	bl	8000ad4 <__addsf3>
 8004a82:	4603      	mov	r3, r0
 8004a84:	613b      	str	r3, [r7, #16]
		Acce_Z_offset = Acce_Z_offset + DataStructure->Accelerometer_Z;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fc f8d5 	bl	8000c3c <__aeabi_i2f>
 8004a92:	4603      	mov	r3, r0
 8004a94:	4619      	mov	r1, r3
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f7fc f81c 	bl	8000ad4 <__addsf3>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 1000; ++i) {
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	60bb      	str	r3, [r7, #8]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004aac:	dbcd      	blt.n	8004a4a <MPU9250_Calibration_Acce+0x22>
	}

	DataStructure->Accelerometer_X_offset = Acce_X_offset / 1000;
 8004aae:	4916      	ldr	r1, [pc, #88]	; (8004b08 <MPU9250_Calibration_Acce+0xe0>)
 8004ab0:	6978      	ldr	r0, [r7, #20]
 8004ab2:	f7fc f9cb 	bl	8000e4c <__aeabi_fdiv>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	461a      	mov	r2, r3
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	631a      	str	r2, [r3, #48]	; 0x30
	DataStructure->Accelerometer_Y_offset = Acce_Y_offset / 1000;
 8004abe:	4912      	ldr	r1, [pc, #72]	; (8004b08 <MPU9250_Calibration_Acce+0xe0>)
 8004ac0:	6938      	ldr	r0, [r7, #16]
 8004ac2:	f7fc f9c3 	bl	8000e4c <__aeabi_fdiv>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	461a      	mov	r2, r3
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	635a      	str	r2, [r3, #52]	; 0x34
	DataStructure->Accelerometer_Z_offset = Acce_Z_offset / 1000;
 8004ace:	490e      	ldr	r1, [pc, #56]	; (8004b08 <MPU9250_Calibration_Acce+0xe0>)
 8004ad0:	68f8      	ldr	r0, [r7, #12]
 8004ad2:	f7fc f9bb 	bl	8000e4c <__aeabi_fdiv>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	461a      	mov	r2, r3
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	639a      	str	r2, [r3, #56]	; 0x38


	DataStructure->Accelerometer_Z_offset = DataStructure->Accelerometer_Z_offset - DataStructure->Accelerometer_sensitivity_factor;
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7fc f8a7 	bl	8000c3c <__aeabi_i2f>
 8004aee:	4603      	mov	r3, r0
 8004af0:	4619      	mov	r1, r3
 8004af2:	4620      	mov	r0, r4
 8004af4:	f7fb ffec 	bl	8000ad0 <__aeabi_fsub>
 8004af8:	4603      	mov	r3, r0
 8004afa:	461a      	mov	r2, r3
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004b00:	bf00      	nop
 8004b02:	371c      	adds	r7, #28
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd90      	pop	{r4, r7, pc}
 8004b08:	447a0000 	.word	0x447a0000

08004b0c <MPU9250_Calibration_Gyro>:

/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

void MPU9250_Calibration_Gyro(I2C_HandleTypeDef *I2Cx,
	      	  	  	  	  	  	  	        struct MPU9250 *DataStructure) {
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b086      	sub	sp, #24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]

	float Gyro_X_offset = 0, Gyro_Y_offset = 0, Gyro_Z_offset = 0;
 8004b16:	f04f 0300 	mov.w	r3, #0
 8004b1a:	617b      	str	r3, [r7, #20]
 8004b1c:	f04f 0300 	mov.w	r3, #0
 8004b20:	613b      	str	r3, [r7, #16]
 8004b22:	f04f 0300 	mov.w	r3, #0
 8004b26:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 1000; ++i) {
 8004b28:	2300      	movs	r3, #0
 8004b2a:	60bb      	str	r3, [r7, #8]
 8004b2c:	e02d      	b.n	8004b8a <MPU9250_Calibration_Gyro+0x7e>

		MPU9250_Read_Gyroscope(I2Cx, DataStructure);
 8004b2e:	6839      	ldr	r1, [r7, #0]
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7ff fdea 	bl	800470a <MPU9250_Read_Gyroscope>

		Gyro_X_offset += DataStructure->Gyroscope_X;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fc f87d 	bl	8000c3c <__aeabi_i2f>
 8004b42:	4603      	mov	r3, r0
 8004b44:	4619      	mov	r1, r3
 8004b46:	6978      	ldr	r0, [r7, #20]
 8004b48:	f7fb ffc4 	bl	8000ad4 <__addsf3>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	617b      	str	r3, [r7, #20]
		Gyro_Y_offset += DataStructure->Gyroscope_Y;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fc f870 	bl	8000c3c <__aeabi_i2f>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	4619      	mov	r1, r3
 8004b60:	6938      	ldr	r0, [r7, #16]
 8004b62:	f7fb ffb7 	bl	8000ad4 <__addsf3>
 8004b66:	4603      	mov	r3, r0
 8004b68:	613b      	str	r3, [r7, #16]
		Gyro_Z_offset += DataStructure->Gyroscope_Z;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004b70:	4618      	mov	r0, r3
 8004b72:	f7fc f863 	bl	8000c3c <__aeabi_i2f>
 8004b76:	4603      	mov	r3, r0
 8004b78:	4619      	mov	r1, r3
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f7fb ffaa 	bl	8000ad4 <__addsf3>
 8004b80:	4603      	mov	r3, r0
 8004b82:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 1000; ++i) {
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	3301      	adds	r3, #1
 8004b88:	60bb      	str	r3, [r7, #8]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b90:	dbcd      	blt.n	8004b2e <MPU9250_Calibration_Gyro+0x22>
	}

	DataStructure->Gyroscope_X_offset = Gyro_X_offset / 1000;
 8004b92:	490e      	ldr	r1, [pc, #56]	; (8004bcc <MPU9250_Calibration_Gyro+0xc0>)
 8004b94:	6978      	ldr	r0, [r7, #20]
 8004b96:	f7fc f959 	bl	8000e4c <__aeabi_fdiv>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	63da      	str	r2, [r3, #60]	; 0x3c
	DataStructure->Gyroscope_Y_offset = Gyro_Y_offset / 1000;
 8004ba2:	490a      	ldr	r1, [pc, #40]	; (8004bcc <MPU9250_Calibration_Gyro+0xc0>)
 8004ba4:	6938      	ldr	r0, [r7, #16]
 8004ba6:	f7fc f951 	bl	8000e4c <__aeabi_fdiv>
 8004baa:	4603      	mov	r3, r0
 8004bac:	461a      	mov	r2, r3
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	641a      	str	r2, [r3, #64]	; 0x40
	DataStructure->Gyroscope_Z_offset = Gyro_Z_offset / 1000;
 8004bb2:	4906      	ldr	r1, [pc, #24]	; (8004bcc <MPU9250_Calibration_Gyro+0xc0>)
 8004bb4:	68f8      	ldr	r0, [r7, #12]
 8004bb6:	f7fc f949 	bl	8000e4c <__aeabi_fdiv>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	645a      	str	r2, [r3, #68]	; 0x44

}
 8004bc2:	bf00      	nop
 8004bc4:	3718      	adds	r7, #24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	447a0000 	.word	0x447a0000

08004bd0 <MPU9250_Calibration_Mag>:

/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */
void MPU9250_Calibration_Mag(I2C_HandleTypeDef *I2Cx,
	      	  	  	  	  	  	  	        struct MPU9250 *DataStructure) {
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08e      	sub	sp, #56	; 0x38
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]

	float X_max = -99999, X_min = 99999, Y_max = -99999, Y_min = 99999, Z_max = -99999, Z_min = 99999;
 8004bda:	4b8e      	ldr	r3, [pc, #568]	; (8004e14 <MPU9250_Calibration_Mag+0x244>)
 8004bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8004bde:	4b8e      	ldr	r3, [pc, #568]	; (8004e18 <MPU9250_Calibration_Mag+0x248>)
 8004be0:	633b      	str	r3, [r7, #48]	; 0x30
 8004be2:	4b8c      	ldr	r3, [pc, #560]	; (8004e14 <MPU9250_Calibration_Mag+0x244>)
 8004be4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004be6:	4b8c      	ldr	r3, [pc, #560]	; (8004e18 <MPU9250_Calibration_Mag+0x248>)
 8004be8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bea:	4b8a      	ldr	r3, [pc, #552]	; (8004e14 <MPU9250_Calibration_Mag+0x244>)
 8004bec:	627b      	str	r3, [r7, #36]	; 0x24
 8004bee:	4b8a      	ldr	r3, [pc, #552]	; (8004e18 <MPU9250_Calibration_Mag+0x248>)
 8004bf0:	623b      	str	r3, [r7, #32]

	/* Hard Iron effect compensation */
	for (int i = 0; i < 1000; ++i) {
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	61fb      	str	r3, [r7, #28]
 8004bf6:	e08d      	b.n	8004d14 <MPU9250_Calibration_Mag+0x144>

		MPU9250_Read_Magnetometer(I2Cx, DataStructure);
 8004bf8:	6839      	ldr	r1, [r7, #0]
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7ff fe2d 	bl	800485a <MPU9250_Read_Magnetometer>

		if (DataStructure->Magnetometer_X > X_max)
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fc f818 	bl	8000c3c <__aeabi_i2f>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	4619      	mov	r1, r3
 8004c10:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004c12:	f7fc fa05 	bl	8001020 <__aeabi_fcmplt>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d007      	beq.n	8004c2c <MPU9250_Calibration_Mag+0x5c>
			X_max = DataStructure->Magnetometer_X;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fc f80a 	bl	8000c3c <__aeabi_i2f>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	637b      	str	r3, [r7, #52]	; 0x34
		if (DataStructure->Magnetometer_Y > Y_max)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fc f802 	bl	8000c3c <__aeabi_i2f>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c3e:	f7fc f9ef 	bl	8001020 <__aeabi_fcmplt>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d007      	beq.n	8004c58 <MPU9250_Calibration_Mag+0x88>
			Y_max = DataStructure->Magnetometer_Y;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f7fb fff4 	bl	8000c3c <__aeabi_i2f>
 8004c54:	4603      	mov	r3, r0
 8004c56:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (DataStructure->Magnetometer_Z > Z_max)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fb ffec 	bl	8000c3c <__aeabi_i2f>
 8004c64:	4603      	mov	r3, r0
 8004c66:	4619      	mov	r1, r3
 8004c68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c6a:	f7fc f9d9 	bl	8001020 <__aeabi_fcmplt>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d007      	beq.n	8004c84 <MPU9250_Calibration_Mag+0xb4>
			Z_max = DataStructure->Magnetometer_Z;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fb ffde 	bl	8000c3c <__aeabi_i2f>
 8004c80:	4603      	mov	r3, r0
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24

		if (DataStructure->Magnetometer_X < X_min)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f7fb ffd6 	bl	8000c3c <__aeabi_i2f>
 8004c90:	4603      	mov	r3, r0
 8004c92:	4619      	mov	r1, r3
 8004c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c96:	f7fc f9e1 	bl	800105c <__aeabi_fcmpgt>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d007      	beq.n	8004cb0 <MPU9250_Calibration_Mag+0xe0>
			X_min = DataStructure->Magnetometer_X;
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7fb ffc8 	bl	8000c3c <__aeabi_i2f>
 8004cac:	4603      	mov	r3, r0
 8004cae:	633b      	str	r3, [r7, #48]	; 0x30
		if (DataStructure->Magnetometer_Y < Y_min)
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fb ffc0 	bl	8000c3c <__aeabi_i2f>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cc2:	f7fc f9cb 	bl	800105c <__aeabi_fcmpgt>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d007      	beq.n	8004cdc <MPU9250_Calibration_Mag+0x10c>
			Y_min = DataStructure->Magnetometer_Y;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7fb ffb2 	bl	8000c3c <__aeabi_i2f>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	62bb      	str	r3, [r7, #40]	; 0x28
		if (DataStructure->Magnetometer_Z < Z_min)
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fb ffaa 	bl	8000c3c <__aeabi_i2f>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	4619      	mov	r1, r3
 8004cec:	6a38      	ldr	r0, [r7, #32]
 8004cee:	f7fc f9b5 	bl	800105c <__aeabi_fcmpgt>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d007      	beq.n	8004d08 <MPU9250_Calibration_Mag+0x138>
			Z_min = DataStructure->Magnetometer_Z;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fb ff9c 	bl	8000c3c <__aeabi_i2f>
 8004d04:	4603      	mov	r3, r0
 8004d06:	623b      	str	r3, [r7, #32]

		HAL_Delay(20);
 8004d08:	2014      	movs	r0, #20
 8004d0a:	f001 fae9 	bl	80062e0 <HAL_Delay>
	for (int i = 0; i < 1000; ++i) {
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	3301      	adds	r3, #1
 8004d12:	61fb      	str	r3, [r7, #28]
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004d1a:	f6ff af6d 	blt.w	8004bf8 <MPU9250_Calibration_Mag+0x28>
	}

	DataStructure->Magnetometer_X_offset = (X_max + X_min) / 2;
 8004d1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d20:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004d22:	f7fb fed7 	bl	8000ad4 <__addsf3>
 8004d26:	4603      	mov	r3, r0
 8004d28:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f7fc f88d 	bl	8000e4c <__aeabi_fdiv>
 8004d32:	4603      	mov	r3, r0
 8004d34:	461a      	mov	r2, r3
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	649a      	str	r2, [r3, #72]	; 0x48
	DataStructure->Magnetometer_Y_offset = (Y_max + Y_min) / 2;
 8004d3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d3e:	f7fb fec9 	bl	8000ad4 <__addsf3>
 8004d42:	4603      	mov	r3, r0
 8004d44:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fc f87f 	bl	8000e4c <__aeabi_fdiv>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	461a      	mov	r2, r3
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	64da      	str	r2, [r3, #76]	; 0x4c
	DataStructure->Magnetometer_Z_offset = (Z_max + Z_min) / 2;
 8004d56:	6a39      	ldr	r1, [r7, #32]
 8004d58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d5a:	f7fb febb 	bl	8000ad4 <__addsf3>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004d64:	4618      	mov	r0, r3
 8004d66:	f7fc f871 	bl	8000e4c <__aeabi_fdiv>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	651a      	str	r2, [r3, #80]	; 0x50

	/* Soft Iron effect compensation */
	float delta_x = (X_max - X_min) / 2;
 8004d72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d74:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004d76:	f7fb feab 	bl	8000ad0 <__aeabi_fsub>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7fc f863 	bl	8000e4c <__aeabi_fdiv>
 8004d86:	4603      	mov	r3, r0
 8004d88:	61bb      	str	r3, [r7, #24]
	float delta_y = (Y_max - Y_min) / 2;
 8004d8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d8e:	f7fb fe9f 	bl	8000ad0 <__aeabi_fsub>
 8004d92:	4603      	mov	r3, r0
 8004d94:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7fc f857 	bl	8000e4c <__aeabi_fdiv>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	617b      	str	r3, [r7, #20]
	float delta_z = (Z_max - Z_min) / 2;
 8004da2:	6a39      	ldr	r1, [r7, #32]
 8004da4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004da6:	f7fb fe93 	bl	8000ad0 <__aeabi_fsub>
 8004daa:	4603      	mov	r3, r0
 8004dac:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7fc f84b 	bl	8000e4c <__aeabi_fdiv>
 8004db6:	4603      	mov	r3, r0
 8004db8:	613b      	str	r3, [r7, #16]

	float delta = (delta_x + delta_y + delta_z) / 3;
 8004dba:	6979      	ldr	r1, [r7, #20]
 8004dbc:	69b8      	ldr	r0, [r7, #24]
 8004dbe:	f7fb fe89 	bl	8000ad4 <__addsf3>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	6939      	ldr	r1, [r7, #16]
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7fb fe84 	bl	8000ad4 <__addsf3>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	4913      	ldr	r1, [pc, #76]	; (8004e1c <MPU9250_Calibration_Mag+0x24c>)
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7fc f83b 	bl	8000e4c <__aeabi_fdiv>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	60fb      	str	r3, [r7, #12]

	DataStructure->Magnetometer_X_scale = delta / delta_x;
 8004dda:	69b9      	ldr	r1, [r7, #24]
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f7fc f835 	bl	8000e4c <__aeabi_fdiv>
 8004de2:	4603      	mov	r3, r0
 8004de4:	461a      	mov	r2, r3
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	655a      	str	r2, [r3, #84]	; 0x54
	DataStructure->Magnetometer_Y_scale = delta / delta_y;
 8004dea:	6979      	ldr	r1, [r7, #20]
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f7fc f82d 	bl	8000e4c <__aeabi_fdiv>
 8004df2:	4603      	mov	r3, r0
 8004df4:	461a      	mov	r2, r3
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	659a      	str	r2, [r3, #88]	; 0x58
	DataStructure->Magnetometer_Z_scale = delta / delta_z;
 8004dfa:	6939      	ldr	r1, [r7, #16]
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f7fc f825 	bl	8000e4c <__aeabi_fdiv>
 8004e02:	4603      	mov	r3, r0
 8004e04:	461a      	mov	r2, r3
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004e0a:	bf00      	nop
 8004e0c:	3738      	adds	r7, #56	; 0x38
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	c7c34f80 	.word	0xc7c34f80
 8004e18:	47c34f80 	.word	0x47c34f80
 8004e1c:	40400000 	.word	0x40400000

08004e20 <MPU9250_Calculate_RPY>:
	  r21p = 0, r22p = 1, r23p = 0,
	  r31p = 0, r32p = 0, r33p = 1;

void MPU9250_Calculate_RPY(I2C_HandleTypeDef *I2Cx,
	      	  	  	  	  	  	  		 struct MPU9250 *DataStructure,
										 float dt) {
 8004e20:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004e24:	b08c      	sub	sp, #48	; 0x30
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	60b9      	str	r1, [r7, #8]
 8004e2c:	607a      	str	r2, [r7, #4]

	/* Case 1: */
	MPU9250_Read_Accelerometer(I2Cx, DataStructure);
 8004e2e:	68b9      	ldr	r1, [r7, #8]
 8004e30:	68f8      	ldr	r0, [r7, #12]
 8004e32:	f7ff fbc2 	bl	80045ba <MPU9250_Read_Accelerometer>
	MPU9250_Read_Gyroscope(I2Cx, DataStructure);
 8004e36:	68b9      	ldr	r1, [r7, #8]
 8004e38:	68f8      	ldr	r0, [r7, #12]
 8004e3a:	f7ff fc66 	bl	800470a <MPU9250_Read_Gyroscope>
	MPU9250_Read_Magnetometer(I2Cx, DataStructure);
 8004e3e:	68b9      	ldr	r1, [r7, #8]
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f7ff fd0a 	bl	800485a <MPU9250_Read_Magnetometer>

	/* Case 2: Calculate accelerometer Roll and Pitch */
	DataStructure->Accelerometer_Roll  = atan2f(DataStructure->Accelerometer_Y_g, DataStructure->Accelerometer_Z_g) * (180 / M_PI);
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e4e:	4619      	mov	r1, r3
 8004e50:	4610      	mov	r0, r2
 8004e52:	f005 fcad 	bl	800a7b0 <atan2f>
 8004e56:	4603      	mov	r3, r0
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fb fadd 	bl	8000418 <__aeabi_f2d>
 8004e5e:	a3c4      	add	r3, pc, #784	; (adr r3, 8005170 <MPU9250_Calculate_RPY+0x350>)
 8004e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e64:	f7fb fb30 	bl	80004c8 <__aeabi_dmul>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	460c      	mov	r4, r1
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	4621      	mov	r1, r4
 8004e70:	f7fb fdda 	bl	8000a28 <__aeabi_d2f>
 8004e74:	4602      	mov	r2, r0
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
	DataStructure->Accelerometer_Pitch = atan2f(-DataStructure->Accelerometer_X_g, sqrtf(powf(DataStructure->Accelerometer_Y_g,2) + powf(DataStructure->Accelerometer_Z_g,2))) * (180 / M_PI);
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e80:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e88:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f005 fc91 	bl	800a7b4 <powf>
 8004e92:	4605      	mov	r5, r0
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e98:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f005 fc89 	bl	800a7b4 <powf>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	f7fb fe14 	bl	8000ad4 <__addsf3>
 8004eac:	4603      	mov	r3, r0
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f005 fde0 	bl	800aa74 <sqrtf>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4620      	mov	r0, r4
 8004eba:	f005 fc79 	bl	800a7b0 <atan2f>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fb faa9 	bl	8000418 <__aeabi_f2d>
 8004ec6:	a3aa      	add	r3, pc, #680	; (adr r3, 8005170 <MPU9250_Calculate_RPY+0x350>)
 8004ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ecc:	f7fb fafc 	bl	80004c8 <__aeabi_dmul>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	460c      	mov	r4, r1
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	f7fb fda6 	bl	8000a28 <__aeabi_d2f>
 8004edc:	4602      	mov	r2, r0
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

	/* Case 3: Calculate gyroscope Roll, Pitch and Yaw */
	r11 = r11p + (r12p * DataStructure->Gyroscope_Z_dgs * (M_PI / 180) * dt) - (r13p * DataStructure->Gyroscope_Y_dgs * (M_PI / 180) * dt);
 8004ee4:	4ba6      	ldr	r3, [pc, #664]	; (8005180 <MPU9250_Calculate_RPY+0x360>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fb fa95 	bl	8000418 <__aeabi_f2d>
 8004eee:	4604      	mov	r4, r0
 8004ef0:	460d      	mov	r5, r1
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004ef6:	4ba3      	ldr	r3, [pc, #652]	; (8005184 <MPU9250_Calculate_RPY+0x364>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	4619      	mov	r1, r3
 8004efc:	4610      	mov	r0, r2
 8004efe:	f7fb fef1 	bl	8000ce4 <__aeabi_fmul>
 8004f02:	4603      	mov	r3, r0
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fb fa87 	bl	8000418 <__aeabi_f2d>
 8004f0a:	a39b      	add	r3, pc, #620	; (adr r3, 8005178 <MPU9250_Calculate_RPY+0x358>)
 8004f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f10:	f7fb fada 	bl	80004c8 <__aeabi_dmul>
 8004f14:	4602      	mov	r2, r0
 8004f16:	460b      	mov	r3, r1
 8004f18:	4690      	mov	r8, r2
 8004f1a:	4699      	mov	r9, r3
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f7fb fa7b 	bl	8000418 <__aeabi_f2d>
 8004f22:	4602      	mov	r2, r0
 8004f24:	460b      	mov	r3, r1
 8004f26:	4640      	mov	r0, r8
 8004f28:	4649      	mov	r1, r9
 8004f2a:	f7fb facd 	bl	80004c8 <__aeabi_dmul>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	460b      	mov	r3, r1
 8004f32:	4620      	mov	r0, r4
 8004f34:	4629      	mov	r1, r5
 8004f36:	f7fb f911 	bl	800015c <__adddf3>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	460c      	mov	r4, r1
 8004f3e:	4625      	mov	r5, r4
 8004f40:	461c      	mov	r4, r3
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004f46:	4b90      	ldr	r3, [pc, #576]	; (8005188 <MPU9250_Calculate_RPY+0x368>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	4610      	mov	r0, r2
 8004f4e:	f7fb fec9 	bl	8000ce4 <__aeabi_fmul>
 8004f52:	4603      	mov	r3, r0
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7fb fa5f 	bl	8000418 <__aeabi_f2d>
 8004f5a:	a387      	add	r3, pc, #540	; (adr r3, 8005178 <MPU9250_Calculate_RPY+0x358>)
 8004f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f60:	f7fb fab2 	bl	80004c8 <__aeabi_dmul>
 8004f64:	4602      	mov	r2, r0
 8004f66:	460b      	mov	r3, r1
 8004f68:	4690      	mov	r8, r2
 8004f6a:	4699      	mov	r9, r3
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7fb fa53 	bl	8000418 <__aeabi_f2d>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4640      	mov	r0, r8
 8004f78:	4649      	mov	r1, r9
 8004f7a:	f7fb faa5 	bl	80004c8 <__aeabi_dmul>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	460b      	mov	r3, r1
 8004f82:	4620      	mov	r0, r4
 8004f84:	4629      	mov	r1, r5
 8004f86:	f7fb f8e7 	bl	8000158 <__aeabi_dsub>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	460c      	mov	r4, r1
 8004f8e:	4618      	mov	r0, r3
 8004f90:	4621      	mov	r1, r4
 8004f92:	f7fb fd49 	bl	8000a28 <__aeabi_d2f>
 8004f96:	4602      	mov	r2, r0
 8004f98:	4b7c      	ldr	r3, [pc, #496]	; (800518c <MPU9250_Calculate_RPY+0x36c>)
 8004f9a:	601a      	str	r2, [r3, #0]
	r12 = (-r11p * DataStructure->Gyroscope_Z_dgs * (M_PI / 180) * dt) + r12p + (r13p * DataStructure->Gyroscope_X_dgs * (M_PI / 180) * dt);
 8004f9c:	4b78      	ldr	r3, [pc, #480]	; (8005180 <MPU9250_Calculate_RPY+0x360>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4610      	mov	r0, r2
 8004fac:	f7fb fe9a 	bl	8000ce4 <__aeabi_fmul>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fb fa30 	bl	8000418 <__aeabi_f2d>
 8004fb8:	a36f      	add	r3, pc, #444	; (adr r3, 8005178 <MPU9250_Calculate_RPY+0x358>)
 8004fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbe:	f7fb fa83 	bl	80004c8 <__aeabi_dmul>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	460c      	mov	r4, r1
 8004fc6:	4625      	mov	r5, r4
 8004fc8:	461c      	mov	r4, r3
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fb fa24 	bl	8000418 <__aeabi_f2d>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	460b      	mov	r3, r1
 8004fd4:	4620      	mov	r0, r4
 8004fd6:	4629      	mov	r1, r5
 8004fd8:	f7fb fa76 	bl	80004c8 <__aeabi_dmul>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	460c      	mov	r4, r1
 8004fe0:	4625      	mov	r5, r4
 8004fe2:	461c      	mov	r4, r3
 8004fe4:	4b67      	ldr	r3, [pc, #412]	; (8005184 <MPU9250_Calculate_RPY+0x364>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fb fa15 	bl	8000418 <__aeabi_f2d>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	4629      	mov	r1, r5
 8004ff6:	f7fb f8b1 	bl	800015c <__adddf3>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	460c      	mov	r4, r1
 8004ffe:	4625      	mov	r5, r4
 8005000:	461c      	mov	r4, r3
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005006:	4b60      	ldr	r3, [pc, #384]	; (8005188 <MPU9250_Calculate_RPY+0x368>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4619      	mov	r1, r3
 800500c:	4610      	mov	r0, r2
 800500e:	f7fb fe69 	bl	8000ce4 <__aeabi_fmul>
 8005012:	4603      	mov	r3, r0
 8005014:	4618      	mov	r0, r3
 8005016:	f7fb f9ff 	bl	8000418 <__aeabi_f2d>
 800501a:	a357      	add	r3, pc, #348	; (adr r3, 8005178 <MPU9250_Calculate_RPY+0x358>)
 800501c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005020:	f7fb fa52 	bl	80004c8 <__aeabi_dmul>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4690      	mov	r8, r2
 800502a:	4699      	mov	r9, r3
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f7fb f9f3 	bl	8000418 <__aeabi_f2d>
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	4640      	mov	r0, r8
 8005038:	4649      	mov	r1, r9
 800503a:	f7fb fa45 	bl	80004c8 <__aeabi_dmul>
 800503e:	4602      	mov	r2, r0
 8005040:	460b      	mov	r3, r1
 8005042:	4620      	mov	r0, r4
 8005044:	4629      	mov	r1, r5
 8005046:	f7fb f889 	bl	800015c <__adddf3>
 800504a:	4603      	mov	r3, r0
 800504c:	460c      	mov	r4, r1
 800504e:	4618      	mov	r0, r3
 8005050:	4621      	mov	r1, r4
 8005052:	f7fb fce9 	bl	8000a28 <__aeabi_d2f>
 8005056:	4602      	mov	r2, r0
 8005058:	4b4d      	ldr	r3, [pc, #308]	; (8005190 <MPU9250_Calculate_RPY+0x370>)
 800505a:	601a      	str	r2, [r3, #0]
	r13 = (r11p * DataStructure->Gyroscope_Y_dgs * (M_PI / 180) * dt) - (r12p * DataStructure->Gyroscope_X_dgs * (M_PI / 180) * dt) + r13p;
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005060:	4b47      	ldr	r3, [pc, #284]	; (8005180 <MPU9250_Calculate_RPY+0x360>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4619      	mov	r1, r3
 8005066:	4610      	mov	r0, r2
 8005068:	f7fb fe3c 	bl	8000ce4 <__aeabi_fmul>
 800506c:	4603      	mov	r3, r0
 800506e:	4618      	mov	r0, r3
 8005070:	f7fb f9d2 	bl	8000418 <__aeabi_f2d>
 8005074:	a340      	add	r3, pc, #256	; (adr r3, 8005178 <MPU9250_Calculate_RPY+0x358>)
 8005076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507a:	f7fb fa25 	bl	80004c8 <__aeabi_dmul>
 800507e:	4603      	mov	r3, r0
 8005080:	460c      	mov	r4, r1
 8005082:	4625      	mov	r5, r4
 8005084:	461c      	mov	r4, r3
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7fb f9c6 	bl	8000418 <__aeabi_f2d>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	4620      	mov	r0, r4
 8005092:	4629      	mov	r1, r5
 8005094:	f7fb fa18 	bl	80004c8 <__aeabi_dmul>
 8005098:	4603      	mov	r3, r0
 800509a:	460c      	mov	r4, r1
 800509c:	4625      	mov	r5, r4
 800509e:	461c      	mov	r4, r3
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80050a4:	4b37      	ldr	r3, [pc, #220]	; (8005184 <MPU9250_Calculate_RPY+0x364>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4619      	mov	r1, r3
 80050aa:	4610      	mov	r0, r2
 80050ac:	f7fb fe1a 	bl	8000ce4 <__aeabi_fmul>
 80050b0:	4603      	mov	r3, r0
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7fb f9b0 	bl	8000418 <__aeabi_f2d>
 80050b8:	a32f      	add	r3, pc, #188	; (adr r3, 8005178 <MPU9250_Calculate_RPY+0x358>)
 80050ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050be:	f7fb fa03 	bl	80004c8 <__aeabi_dmul>
 80050c2:	4602      	mov	r2, r0
 80050c4:	460b      	mov	r3, r1
 80050c6:	4690      	mov	r8, r2
 80050c8:	4699      	mov	r9, r3
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7fb f9a4 	bl	8000418 <__aeabi_f2d>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4640      	mov	r0, r8
 80050d6:	4649      	mov	r1, r9
 80050d8:	f7fb f9f6 	bl	80004c8 <__aeabi_dmul>
 80050dc:	4602      	mov	r2, r0
 80050de:	460b      	mov	r3, r1
 80050e0:	4620      	mov	r0, r4
 80050e2:	4629      	mov	r1, r5
 80050e4:	f7fb f838 	bl	8000158 <__aeabi_dsub>
 80050e8:	4603      	mov	r3, r0
 80050ea:	460c      	mov	r4, r1
 80050ec:	4625      	mov	r5, r4
 80050ee:	461c      	mov	r4, r3
 80050f0:	4b25      	ldr	r3, [pc, #148]	; (8005188 <MPU9250_Calculate_RPY+0x368>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7fb f98f 	bl	8000418 <__aeabi_f2d>
 80050fa:	4602      	mov	r2, r0
 80050fc:	460b      	mov	r3, r1
 80050fe:	4620      	mov	r0, r4
 8005100:	4629      	mov	r1, r5
 8005102:	f7fb f82b 	bl	800015c <__adddf3>
 8005106:	4603      	mov	r3, r0
 8005108:	460c      	mov	r4, r1
 800510a:	4618      	mov	r0, r3
 800510c:	4621      	mov	r1, r4
 800510e:	f7fb fc8b 	bl	8000a28 <__aeabi_d2f>
 8005112:	4602      	mov	r2, r0
 8005114:	4b1f      	ldr	r3, [pc, #124]	; (8005194 <MPU9250_Calculate_RPY+0x374>)
 8005116:	601a      	str	r2, [r3, #0]

	r21 = r21p + (r22p * DataStructure->Gyroscope_Z_dgs * (M_PI / 180) * dt) - (r23p * DataStructure->Gyroscope_Y_dgs * (M_PI / 180) * dt);
 8005118:	4b1f      	ldr	r3, [pc, #124]	; (8005198 <MPU9250_Calculate_RPY+0x378>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4618      	mov	r0, r3
 800511e:	f7fb f97b 	bl	8000418 <__aeabi_f2d>
 8005122:	4604      	mov	r4, r0
 8005124:	460d      	mov	r5, r1
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800512a:	4b1c      	ldr	r3, [pc, #112]	; (800519c <MPU9250_Calculate_RPY+0x37c>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4619      	mov	r1, r3
 8005130:	4610      	mov	r0, r2
 8005132:	f7fb fdd7 	bl	8000ce4 <__aeabi_fmul>
 8005136:	4603      	mov	r3, r0
 8005138:	4618      	mov	r0, r3
 800513a:	f7fb f96d 	bl	8000418 <__aeabi_f2d>
 800513e:	a30e      	add	r3, pc, #56	; (adr r3, 8005178 <MPU9250_Calculate_RPY+0x358>)
 8005140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005144:	f7fb f9c0 	bl	80004c8 <__aeabi_dmul>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	4690      	mov	r8, r2
 800514e:	4699      	mov	r9, r3
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7fb f961 	bl	8000418 <__aeabi_f2d>
 8005156:	4602      	mov	r2, r0
 8005158:	460b      	mov	r3, r1
 800515a:	4640      	mov	r0, r8
 800515c:	4649      	mov	r1, r9
 800515e:	f7fb f9b3 	bl	80004c8 <__aeabi_dmul>
 8005162:	4602      	mov	r2, r0
 8005164:	460b      	mov	r3, r1
 8005166:	4620      	mov	r0, r4
 8005168:	4629      	mov	r1, r5
 800516a:	e019      	b.n	80051a0 <MPU9250_Calculate_RPY+0x380>
 800516c:	f3af 8000 	nop.w
 8005170:	1a63c1f8 	.word	0x1a63c1f8
 8005174:	404ca5dc 	.word	0x404ca5dc
 8005178:	a2529d39 	.word	0xa2529d39
 800517c:	3f91df46 	.word	0x3f91df46
 8005180:	20000030 	.word	0x20000030
 8005184:	200003d8 	.word	0x200003d8
 8005188:	200003dc 	.word	0x200003dc
 800518c:	20000024 	.word	0x20000024
 8005190:	200003c0 	.word	0x200003c0
 8005194:	200003c4 	.word	0x200003c4
 8005198:	200003e0 	.word	0x200003e0
 800519c:	20000034 	.word	0x20000034
 80051a0:	f7fa ffdc 	bl	800015c <__adddf3>
 80051a4:	4603      	mov	r3, r0
 80051a6:	460c      	mov	r4, r1
 80051a8:	4625      	mov	r5, r4
 80051aa:	461c      	mov	r4, r3
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80051b0:	4bc5      	ldr	r3, [pc, #788]	; (80054c8 <MPU9250_Calculate_RPY+0x6a8>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4619      	mov	r1, r3
 80051b6:	4610      	mov	r0, r2
 80051b8:	f7fb fd94 	bl	8000ce4 <__aeabi_fmul>
 80051bc:	4603      	mov	r3, r0
 80051be:	4618      	mov	r0, r3
 80051c0:	f7fb f92a 	bl	8000418 <__aeabi_f2d>
 80051c4:	a3be      	add	r3, pc, #760	; (adr r3, 80054c0 <MPU9250_Calculate_RPY+0x6a0>)
 80051c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ca:	f7fb f97d 	bl	80004c8 <__aeabi_dmul>
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	4690      	mov	r8, r2
 80051d4:	4699      	mov	r9, r3
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f7fb f91e 	bl	8000418 <__aeabi_f2d>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4640      	mov	r0, r8
 80051e2:	4649      	mov	r1, r9
 80051e4:	f7fb f970 	bl	80004c8 <__aeabi_dmul>
 80051e8:	4602      	mov	r2, r0
 80051ea:	460b      	mov	r3, r1
 80051ec:	4620      	mov	r0, r4
 80051ee:	4629      	mov	r1, r5
 80051f0:	f7fa ffb2 	bl	8000158 <__aeabi_dsub>
 80051f4:	4603      	mov	r3, r0
 80051f6:	460c      	mov	r4, r1
 80051f8:	4618      	mov	r0, r3
 80051fa:	4621      	mov	r1, r4
 80051fc:	f7fb fc14 	bl	8000a28 <__aeabi_d2f>
 8005200:	4602      	mov	r2, r0
 8005202:	4bb2      	ldr	r3, [pc, #712]	; (80054cc <MPU9250_Calculate_RPY+0x6ac>)
 8005204:	601a      	str	r2, [r3, #0]
	r22 = (-r21p * DataStructure->Gyroscope_Z_dgs * (M_PI / 180) * dt) + r22p + (r23p * DataStructure->Gyroscope_X_dgs * (M_PI / 180) * dt);
 8005206:	4bb2      	ldr	r3, [pc, #712]	; (80054d0 <MPU9250_Calculate_RPY+0x6b0>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005212:	4619      	mov	r1, r3
 8005214:	4610      	mov	r0, r2
 8005216:	f7fb fd65 	bl	8000ce4 <__aeabi_fmul>
 800521a:	4603      	mov	r3, r0
 800521c:	4618      	mov	r0, r3
 800521e:	f7fb f8fb 	bl	8000418 <__aeabi_f2d>
 8005222:	a3a7      	add	r3, pc, #668	; (adr r3, 80054c0 <MPU9250_Calculate_RPY+0x6a0>)
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	f7fb f94e 	bl	80004c8 <__aeabi_dmul>
 800522c:	4603      	mov	r3, r0
 800522e:	460c      	mov	r4, r1
 8005230:	4625      	mov	r5, r4
 8005232:	461c      	mov	r4, r3
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7fb f8ef 	bl	8000418 <__aeabi_f2d>
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	4620      	mov	r0, r4
 8005240:	4629      	mov	r1, r5
 8005242:	f7fb f941 	bl	80004c8 <__aeabi_dmul>
 8005246:	4603      	mov	r3, r0
 8005248:	460c      	mov	r4, r1
 800524a:	4625      	mov	r5, r4
 800524c:	461c      	mov	r4, r3
 800524e:	4ba1      	ldr	r3, [pc, #644]	; (80054d4 <MPU9250_Calculate_RPY+0x6b4>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4618      	mov	r0, r3
 8005254:	f7fb f8e0 	bl	8000418 <__aeabi_f2d>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4620      	mov	r0, r4
 800525e:	4629      	mov	r1, r5
 8005260:	f7fa ff7c 	bl	800015c <__adddf3>
 8005264:	4603      	mov	r3, r0
 8005266:	460c      	mov	r4, r1
 8005268:	4625      	mov	r5, r4
 800526a:	461c      	mov	r4, r3
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005270:	4b95      	ldr	r3, [pc, #596]	; (80054c8 <MPU9250_Calculate_RPY+0x6a8>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4619      	mov	r1, r3
 8005276:	4610      	mov	r0, r2
 8005278:	f7fb fd34 	bl	8000ce4 <__aeabi_fmul>
 800527c:	4603      	mov	r3, r0
 800527e:	4618      	mov	r0, r3
 8005280:	f7fb f8ca 	bl	8000418 <__aeabi_f2d>
 8005284:	a38e      	add	r3, pc, #568	; (adr r3, 80054c0 <MPU9250_Calculate_RPY+0x6a0>)
 8005286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800528a:	f7fb f91d 	bl	80004c8 <__aeabi_dmul>
 800528e:	4602      	mov	r2, r0
 8005290:	460b      	mov	r3, r1
 8005292:	4690      	mov	r8, r2
 8005294:	4699      	mov	r9, r3
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f7fb f8be 	bl	8000418 <__aeabi_f2d>
 800529c:	4602      	mov	r2, r0
 800529e:	460b      	mov	r3, r1
 80052a0:	4640      	mov	r0, r8
 80052a2:	4649      	mov	r1, r9
 80052a4:	f7fb f910 	bl	80004c8 <__aeabi_dmul>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	4620      	mov	r0, r4
 80052ae:	4629      	mov	r1, r5
 80052b0:	f7fa ff54 	bl	800015c <__adddf3>
 80052b4:	4603      	mov	r3, r0
 80052b6:	460c      	mov	r4, r1
 80052b8:	4618      	mov	r0, r3
 80052ba:	4621      	mov	r1, r4
 80052bc:	f7fb fbb4 	bl	8000a28 <__aeabi_d2f>
 80052c0:	4602      	mov	r2, r0
 80052c2:	4b85      	ldr	r3, [pc, #532]	; (80054d8 <MPU9250_Calculate_RPY+0x6b8>)
 80052c4:	601a      	str	r2, [r3, #0]
	r23 = (r21p * DataStructure->Gyroscope_Y_dgs * (M_PI / 180) * dt) - (r22p * DataStructure->Gyroscope_X_dgs * (M_PI / 180) * dt) + r23p;
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80052ca:	4b81      	ldr	r3, [pc, #516]	; (80054d0 <MPU9250_Calculate_RPY+0x6b0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4619      	mov	r1, r3
 80052d0:	4610      	mov	r0, r2
 80052d2:	f7fb fd07 	bl	8000ce4 <__aeabi_fmul>
 80052d6:	4603      	mov	r3, r0
 80052d8:	4618      	mov	r0, r3
 80052da:	f7fb f89d 	bl	8000418 <__aeabi_f2d>
 80052de:	a378      	add	r3, pc, #480	; (adr r3, 80054c0 <MPU9250_Calculate_RPY+0x6a0>)
 80052e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052e4:	f7fb f8f0 	bl	80004c8 <__aeabi_dmul>
 80052e8:	4603      	mov	r3, r0
 80052ea:	460c      	mov	r4, r1
 80052ec:	4625      	mov	r5, r4
 80052ee:	461c      	mov	r4, r3
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f7fb f891 	bl	8000418 <__aeabi_f2d>
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	4620      	mov	r0, r4
 80052fc:	4629      	mov	r1, r5
 80052fe:	f7fb f8e3 	bl	80004c8 <__aeabi_dmul>
 8005302:	4603      	mov	r3, r0
 8005304:	460c      	mov	r4, r1
 8005306:	4625      	mov	r5, r4
 8005308:	461c      	mov	r4, r3
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800530e:	4b71      	ldr	r3, [pc, #452]	; (80054d4 <MPU9250_Calculate_RPY+0x6b4>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4619      	mov	r1, r3
 8005314:	4610      	mov	r0, r2
 8005316:	f7fb fce5 	bl	8000ce4 <__aeabi_fmul>
 800531a:	4603      	mov	r3, r0
 800531c:	4618      	mov	r0, r3
 800531e:	f7fb f87b 	bl	8000418 <__aeabi_f2d>
 8005322:	a367      	add	r3, pc, #412	; (adr r3, 80054c0 <MPU9250_Calculate_RPY+0x6a0>)
 8005324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005328:	f7fb f8ce 	bl	80004c8 <__aeabi_dmul>
 800532c:	4602      	mov	r2, r0
 800532e:	460b      	mov	r3, r1
 8005330:	4690      	mov	r8, r2
 8005332:	4699      	mov	r9, r3
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7fb f86f 	bl	8000418 <__aeabi_f2d>
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	4640      	mov	r0, r8
 8005340:	4649      	mov	r1, r9
 8005342:	f7fb f8c1 	bl	80004c8 <__aeabi_dmul>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4620      	mov	r0, r4
 800534c:	4629      	mov	r1, r5
 800534e:	f7fa ff03 	bl	8000158 <__aeabi_dsub>
 8005352:	4603      	mov	r3, r0
 8005354:	460c      	mov	r4, r1
 8005356:	4625      	mov	r5, r4
 8005358:	461c      	mov	r4, r3
 800535a:	4b5b      	ldr	r3, [pc, #364]	; (80054c8 <MPU9250_Calculate_RPY+0x6a8>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4618      	mov	r0, r3
 8005360:	f7fb f85a 	bl	8000418 <__aeabi_f2d>
 8005364:	4602      	mov	r2, r0
 8005366:	460b      	mov	r3, r1
 8005368:	4620      	mov	r0, r4
 800536a:	4629      	mov	r1, r5
 800536c:	f7fa fef6 	bl	800015c <__adddf3>
 8005370:	4603      	mov	r3, r0
 8005372:	460c      	mov	r4, r1
 8005374:	4618      	mov	r0, r3
 8005376:	4621      	mov	r1, r4
 8005378:	f7fb fb56 	bl	8000a28 <__aeabi_d2f>
 800537c:	4602      	mov	r2, r0
 800537e:	4b57      	ldr	r3, [pc, #348]	; (80054dc <MPU9250_Calculate_RPY+0x6bc>)
 8005380:	601a      	str	r2, [r3, #0]

	r31 = r31p + (r32p * DataStructure->Gyroscope_Z_dgs * (M_PI / 180) * dt) - (r33p * DataStructure->Gyroscope_Y_dgs * (M_PI / 180) * dt);
 8005382:	4b57      	ldr	r3, [pc, #348]	; (80054e0 <MPU9250_Calculate_RPY+0x6c0>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4618      	mov	r0, r3
 8005388:	f7fb f846 	bl	8000418 <__aeabi_f2d>
 800538c:	4604      	mov	r4, r0
 800538e:	460d      	mov	r5, r1
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005394:	4b53      	ldr	r3, [pc, #332]	; (80054e4 <MPU9250_Calculate_RPY+0x6c4>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4619      	mov	r1, r3
 800539a:	4610      	mov	r0, r2
 800539c:	f7fb fca2 	bl	8000ce4 <__aeabi_fmul>
 80053a0:	4603      	mov	r3, r0
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fb f838 	bl	8000418 <__aeabi_f2d>
 80053a8:	a345      	add	r3, pc, #276	; (adr r3, 80054c0 <MPU9250_Calculate_RPY+0x6a0>)
 80053aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ae:	f7fb f88b 	bl	80004c8 <__aeabi_dmul>
 80053b2:	4602      	mov	r2, r0
 80053b4:	460b      	mov	r3, r1
 80053b6:	4690      	mov	r8, r2
 80053b8:	4699      	mov	r9, r3
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f7fb f82c 	bl	8000418 <__aeabi_f2d>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4640      	mov	r0, r8
 80053c6:	4649      	mov	r1, r9
 80053c8:	f7fb f87e 	bl	80004c8 <__aeabi_dmul>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4620      	mov	r0, r4
 80053d2:	4629      	mov	r1, r5
 80053d4:	f7fa fec2 	bl	800015c <__adddf3>
 80053d8:	4603      	mov	r3, r0
 80053da:	460c      	mov	r4, r1
 80053dc:	4625      	mov	r5, r4
 80053de:	461c      	mov	r4, r3
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80053e4:	4b40      	ldr	r3, [pc, #256]	; (80054e8 <MPU9250_Calculate_RPY+0x6c8>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4619      	mov	r1, r3
 80053ea:	4610      	mov	r0, r2
 80053ec:	f7fb fc7a 	bl	8000ce4 <__aeabi_fmul>
 80053f0:	4603      	mov	r3, r0
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fb f810 	bl	8000418 <__aeabi_f2d>
 80053f8:	a331      	add	r3, pc, #196	; (adr r3, 80054c0 <MPU9250_Calculate_RPY+0x6a0>)
 80053fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fe:	f7fb f863 	bl	80004c8 <__aeabi_dmul>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	4690      	mov	r8, r2
 8005408:	4699      	mov	r9, r3
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7fb f804 	bl	8000418 <__aeabi_f2d>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	4640      	mov	r0, r8
 8005416:	4649      	mov	r1, r9
 8005418:	f7fb f856 	bl	80004c8 <__aeabi_dmul>
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	4620      	mov	r0, r4
 8005422:	4629      	mov	r1, r5
 8005424:	f7fa fe98 	bl	8000158 <__aeabi_dsub>
 8005428:	4603      	mov	r3, r0
 800542a:	460c      	mov	r4, r1
 800542c:	4618      	mov	r0, r3
 800542e:	4621      	mov	r1, r4
 8005430:	f7fb fafa 	bl	8000a28 <__aeabi_d2f>
 8005434:	4602      	mov	r2, r0
 8005436:	4b2d      	ldr	r3, [pc, #180]	; (80054ec <MPU9250_Calculate_RPY+0x6cc>)
 8005438:	601a      	str	r2, [r3, #0]
	r32 = (-r31p * DataStructure->Gyroscope_Z_dgs * (M_PI / 180) * dt) + r32p + (r33p * DataStructure->Gyroscope_X_dgs * (M_PI / 180) * dt);
 800543a:	4b29      	ldr	r3, [pc, #164]	; (80054e0 <MPU9250_Calculate_RPY+0x6c0>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005446:	4619      	mov	r1, r3
 8005448:	4610      	mov	r0, r2
 800544a:	f7fb fc4b 	bl	8000ce4 <__aeabi_fmul>
 800544e:	4603      	mov	r3, r0
 8005450:	4618      	mov	r0, r3
 8005452:	f7fa ffe1 	bl	8000418 <__aeabi_f2d>
 8005456:	a31a      	add	r3, pc, #104	; (adr r3, 80054c0 <MPU9250_Calculate_RPY+0x6a0>)
 8005458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545c:	f7fb f834 	bl	80004c8 <__aeabi_dmul>
 8005460:	4603      	mov	r3, r0
 8005462:	460c      	mov	r4, r1
 8005464:	4625      	mov	r5, r4
 8005466:	461c      	mov	r4, r3
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f7fa ffd5 	bl	8000418 <__aeabi_f2d>
 800546e:	4602      	mov	r2, r0
 8005470:	460b      	mov	r3, r1
 8005472:	4620      	mov	r0, r4
 8005474:	4629      	mov	r1, r5
 8005476:	f7fb f827 	bl	80004c8 <__aeabi_dmul>
 800547a:	4603      	mov	r3, r0
 800547c:	460c      	mov	r4, r1
 800547e:	4625      	mov	r5, r4
 8005480:	461c      	mov	r4, r3
 8005482:	4b18      	ldr	r3, [pc, #96]	; (80054e4 <MPU9250_Calculate_RPY+0x6c4>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4618      	mov	r0, r3
 8005488:	f7fa ffc6 	bl	8000418 <__aeabi_f2d>
 800548c:	4602      	mov	r2, r0
 800548e:	460b      	mov	r3, r1
 8005490:	4620      	mov	r0, r4
 8005492:	4629      	mov	r1, r5
 8005494:	f7fa fe62 	bl	800015c <__adddf3>
 8005498:	4603      	mov	r3, r0
 800549a:	460c      	mov	r4, r1
 800549c:	4625      	mov	r5, r4
 800549e:	461c      	mov	r4, r3
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80054a4:	4b10      	ldr	r3, [pc, #64]	; (80054e8 <MPU9250_Calculate_RPY+0x6c8>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4619      	mov	r1, r3
 80054aa:	4610      	mov	r0, r2
 80054ac:	f7fb fc1a 	bl	8000ce4 <__aeabi_fmul>
 80054b0:	4603      	mov	r3, r0
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fa ffb0 	bl	8000418 <__aeabi_f2d>
 80054b8:	e01a      	b.n	80054f0 <MPU9250_Calculate_RPY+0x6d0>
 80054ba:	bf00      	nop
 80054bc:	f3af 8000 	nop.w
 80054c0:	a2529d39 	.word	0xa2529d39
 80054c4:	3f91df46 	.word	0x3f91df46
 80054c8:	200003e4 	.word	0x200003e4
 80054cc:	200003c8 	.word	0x200003c8
 80054d0:	200003e0 	.word	0x200003e0
 80054d4:	20000034 	.word	0x20000034
 80054d8:	20000028 	.word	0x20000028
 80054dc:	200003cc 	.word	0x200003cc
 80054e0:	200003e8 	.word	0x200003e8
 80054e4:	200003ec 	.word	0x200003ec
 80054e8:	20000038 	.word	0x20000038
 80054ec:	200003d0 	.word	0x200003d0
 80054f0:	a3b3      	add	r3, pc, #716	; (adr r3, 80057c0 <MPU9250_Calculate_RPY+0x9a0>)
 80054f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f6:	f7fa ffe7 	bl	80004c8 <__aeabi_dmul>
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	4690      	mov	r8, r2
 8005500:	4699      	mov	r9, r3
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7fa ff88 	bl	8000418 <__aeabi_f2d>
 8005508:	4602      	mov	r2, r0
 800550a:	460b      	mov	r3, r1
 800550c:	4640      	mov	r0, r8
 800550e:	4649      	mov	r1, r9
 8005510:	f7fa ffda 	bl	80004c8 <__aeabi_dmul>
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	4620      	mov	r0, r4
 800551a:	4629      	mov	r1, r5
 800551c:	f7fa fe1e 	bl	800015c <__adddf3>
 8005520:	4603      	mov	r3, r0
 8005522:	460c      	mov	r4, r1
 8005524:	4618      	mov	r0, r3
 8005526:	4621      	mov	r1, r4
 8005528:	f7fb fa7e 	bl	8000a28 <__aeabi_d2f>
 800552c:	4602      	mov	r2, r0
 800552e:	4ba8      	ldr	r3, [pc, #672]	; (80057d0 <MPU9250_Calculate_RPY+0x9b0>)
 8005530:	601a      	str	r2, [r3, #0]
	r33 = (r31p * DataStructure->Gyroscope_Y_dgs * (M_PI / 180) * dt) - (r32p * DataStructure->Gyroscope_X_dgs * (M_PI / 180) * dt) + r33p;
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005536:	4ba7      	ldr	r3, [pc, #668]	; (80057d4 <MPU9250_Calculate_RPY+0x9b4>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4619      	mov	r1, r3
 800553c:	4610      	mov	r0, r2
 800553e:	f7fb fbd1 	bl	8000ce4 <__aeabi_fmul>
 8005542:	4603      	mov	r3, r0
 8005544:	4618      	mov	r0, r3
 8005546:	f7fa ff67 	bl	8000418 <__aeabi_f2d>
 800554a:	a39d      	add	r3, pc, #628	; (adr r3, 80057c0 <MPU9250_Calculate_RPY+0x9a0>)
 800554c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005550:	f7fa ffba 	bl	80004c8 <__aeabi_dmul>
 8005554:	4603      	mov	r3, r0
 8005556:	460c      	mov	r4, r1
 8005558:	4625      	mov	r5, r4
 800555a:	461c      	mov	r4, r3
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7fa ff5b 	bl	8000418 <__aeabi_f2d>
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	4620      	mov	r0, r4
 8005568:	4629      	mov	r1, r5
 800556a:	f7fa ffad 	bl	80004c8 <__aeabi_dmul>
 800556e:	4603      	mov	r3, r0
 8005570:	460c      	mov	r4, r1
 8005572:	4625      	mov	r5, r4
 8005574:	461c      	mov	r4, r3
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800557a:	4b97      	ldr	r3, [pc, #604]	; (80057d8 <MPU9250_Calculate_RPY+0x9b8>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4619      	mov	r1, r3
 8005580:	4610      	mov	r0, r2
 8005582:	f7fb fbaf 	bl	8000ce4 <__aeabi_fmul>
 8005586:	4603      	mov	r3, r0
 8005588:	4618      	mov	r0, r3
 800558a:	f7fa ff45 	bl	8000418 <__aeabi_f2d>
 800558e:	a38c      	add	r3, pc, #560	; (adr r3, 80057c0 <MPU9250_Calculate_RPY+0x9a0>)
 8005590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005594:	f7fa ff98 	bl	80004c8 <__aeabi_dmul>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4690      	mov	r8, r2
 800559e:	4699      	mov	r9, r3
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7fa ff39 	bl	8000418 <__aeabi_f2d>
 80055a6:	4602      	mov	r2, r0
 80055a8:	460b      	mov	r3, r1
 80055aa:	4640      	mov	r0, r8
 80055ac:	4649      	mov	r1, r9
 80055ae:	f7fa ff8b 	bl	80004c8 <__aeabi_dmul>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	4620      	mov	r0, r4
 80055b8:	4629      	mov	r1, r5
 80055ba:	f7fa fdcd 	bl	8000158 <__aeabi_dsub>
 80055be:	4603      	mov	r3, r0
 80055c0:	460c      	mov	r4, r1
 80055c2:	4625      	mov	r5, r4
 80055c4:	461c      	mov	r4, r3
 80055c6:	4b85      	ldr	r3, [pc, #532]	; (80057dc <MPU9250_Calculate_RPY+0x9bc>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fa ff24 	bl	8000418 <__aeabi_f2d>
 80055d0:	4602      	mov	r2, r0
 80055d2:	460b      	mov	r3, r1
 80055d4:	4620      	mov	r0, r4
 80055d6:	4629      	mov	r1, r5
 80055d8:	f7fa fdc0 	bl	800015c <__adddf3>
 80055dc:	4603      	mov	r3, r0
 80055de:	460c      	mov	r4, r1
 80055e0:	4618      	mov	r0, r3
 80055e2:	4621      	mov	r1, r4
 80055e4:	f7fb fa20 	bl	8000a28 <__aeabi_d2f>
 80055e8:	4602      	mov	r2, r0
 80055ea:	4b7d      	ldr	r3, [pc, #500]	; (80057e0 <MPU9250_Calculate_RPY+0x9c0>)
 80055ec:	601a      	str	r2, [r3, #0]

	r11p = r11, r12p = r12, r13p = r13,
 80055ee:	4b7d      	ldr	r3, [pc, #500]	; (80057e4 <MPU9250_Calculate_RPY+0x9c4>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a7d      	ldr	r2, [pc, #500]	; (80057e8 <MPU9250_Calculate_RPY+0x9c8>)
 80055f4:	6013      	str	r3, [r2, #0]
 80055f6:	4b7d      	ldr	r3, [pc, #500]	; (80057ec <MPU9250_Calculate_RPY+0x9cc>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a7d      	ldr	r2, [pc, #500]	; (80057f0 <MPU9250_Calculate_RPY+0x9d0>)
 80055fc:	6013      	str	r3, [r2, #0]
 80055fe:	4b7d      	ldr	r3, [pc, #500]	; (80057f4 <MPU9250_Calculate_RPY+0x9d4>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a7d      	ldr	r2, [pc, #500]	; (80057f8 <MPU9250_Calculate_RPY+0x9d8>)
 8005604:	6013      	str	r3, [r2, #0]
	r21p = r21, r22p = r22, r23p = r23,
 8005606:	4b7d      	ldr	r3, [pc, #500]	; (80057fc <MPU9250_Calculate_RPY+0x9dc>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a7d      	ldr	r2, [pc, #500]	; (8005800 <MPU9250_Calculate_RPY+0x9e0>)
 800560c:	6013      	str	r3, [r2, #0]
 800560e:	4b7d      	ldr	r3, [pc, #500]	; (8005804 <MPU9250_Calculate_RPY+0x9e4>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a7d      	ldr	r2, [pc, #500]	; (8005808 <MPU9250_Calculate_RPY+0x9e8>)
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	4b7d      	ldr	r3, [pc, #500]	; (800580c <MPU9250_Calculate_RPY+0x9ec>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a7d      	ldr	r2, [pc, #500]	; (8005810 <MPU9250_Calculate_RPY+0x9f0>)
 800561c:	6013      	str	r3, [r2, #0]
	r31p = r31, r32p = r32, r33p = r33;
 800561e:	4b7d      	ldr	r3, [pc, #500]	; (8005814 <MPU9250_Calculate_RPY+0x9f4>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a6c      	ldr	r2, [pc, #432]	; (80057d4 <MPU9250_Calculate_RPY+0x9b4>)
 8005624:	6013      	str	r3, [r2, #0]
 8005626:	4b6a      	ldr	r3, [pc, #424]	; (80057d0 <MPU9250_Calculate_RPY+0x9b0>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a6b      	ldr	r2, [pc, #428]	; (80057d8 <MPU9250_Calculate_RPY+0x9b8>)
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	4b6c      	ldr	r3, [pc, #432]	; (80057e0 <MPU9250_Calculate_RPY+0x9c0>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a6a      	ldr	r2, [pc, #424]	; (80057dc <MPU9250_Calculate_RPY+0x9bc>)
 8005634:	6013      	str	r3, [r2, #0]

	float Beta = atan2f(-r31, sqrtf( powf(r11,2) + powf(r21,2) ) );
 8005636:	4b77      	ldr	r3, [pc, #476]	; (8005814 <MPU9250_Calculate_RPY+0x9f4>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 800563e:	4b69      	ldr	r3, [pc, #420]	; (80057e4 <MPU9250_Calculate_RPY+0x9c4>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005646:	4618      	mov	r0, r3
 8005648:	f005 f8b4 	bl	800a7b4 <powf>
 800564c:	4605      	mov	r5, r0
 800564e:	4b6b      	ldr	r3, [pc, #428]	; (80057fc <MPU9250_Calculate_RPY+0x9dc>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005656:	4618      	mov	r0, r3
 8005658:	f005 f8ac 	bl	800a7b4 <powf>
 800565c:	4603      	mov	r3, r0
 800565e:	4619      	mov	r1, r3
 8005660:	4628      	mov	r0, r5
 8005662:	f7fb fa37 	bl	8000ad4 <__addsf3>
 8005666:	4603      	mov	r3, r0
 8005668:	4618      	mov	r0, r3
 800566a:	f005 fa03 	bl	800aa74 <sqrtf>
 800566e:	4603      	mov	r3, r0
 8005670:	4619      	mov	r1, r3
 8005672:	4620      	mov	r0, r4
 8005674:	f005 f89c 	bl	800a7b0 <atan2f>
 8005678:	62f8      	str	r0, [r7, #44]	; 0x2c

	DataStructure->Gyroscope_Pitch = Beta * (180 / M_PI);
 800567a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800567c:	f7fa fecc 	bl	8000418 <__aeabi_f2d>
 8005680:	a351      	add	r3, pc, #324	; (adr r3, 80057c8 <MPU9250_Calculate_RPY+0x9a8>)
 8005682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005686:	f7fa ff1f 	bl	80004c8 <__aeabi_dmul>
 800568a:	4603      	mov	r3, r0
 800568c:	460c      	mov	r4, r1
 800568e:	4618      	mov	r0, r3
 8005690:	4621      	mov	r1, r4
 8005692:	f7fb f9c9 	bl	8000a28 <__aeabi_d2f>
 8005696:	4602      	mov	r2, r0
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	DataStructure->Gyroscope_Roll  = atan2f(r32 / cosf(Beta), r33 / cosf(Beta) ) * (180 / M_PI);
 800569e:	4b4c      	ldr	r3, [pc, #304]	; (80057d0 <MPU9250_Calculate_RPY+0x9b0>)
 80056a0:	681c      	ldr	r4, [r3, #0]
 80056a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056a4:	f004 ff78 	bl	800a598 <cosf>
 80056a8:	4603      	mov	r3, r0
 80056aa:	4619      	mov	r1, r3
 80056ac:	4620      	mov	r0, r4
 80056ae:	f7fb fbcd 	bl	8000e4c <__aeabi_fdiv>
 80056b2:	4603      	mov	r3, r0
 80056b4:	461d      	mov	r5, r3
 80056b6:	4b4a      	ldr	r3, [pc, #296]	; (80057e0 <MPU9250_Calculate_RPY+0x9c0>)
 80056b8:	681c      	ldr	r4, [r3, #0]
 80056ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80056bc:	f004 ff6c 	bl	800a598 <cosf>
 80056c0:	4603      	mov	r3, r0
 80056c2:	4619      	mov	r1, r3
 80056c4:	4620      	mov	r0, r4
 80056c6:	f7fb fbc1 	bl	8000e4c <__aeabi_fdiv>
 80056ca:	4603      	mov	r3, r0
 80056cc:	4619      	mov	r1, r3
 80056ce:	4628      	mov	r0, r5
 80056d0:	f005 f86e 	bl	800a7b0 <atan2f>
 80056d4:	4603      	mov	r3, r0
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fa fe9e 	bl	8000418 <__aeabi_f2d>
 80056dc:	a33a      	add	r3, pc, #232	; (adr r3, 80057c8 <MPU9250_Calculate_RPY+0x9a8>)
 80056de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e2:	f7fa fef1 	bl	80004c8 <__aeabi_dmul>
 80056e6:	4603      	mov	r3, r0
 80056e8:	460c      	mov	r4, r1
 80056ea:	4618      	mov	r0, r3
 80056ec:	4621      	mov	r1, r4
 80056ee:	f7fb f99b 	bl	8000a28 <__aeabi_d2f>
 80056f2:	4602      	mov	r2, r0
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	DataStructure->Gyroscope_Yaw   = atan2f(r21 / cosf(Beta), r11 / cosf(Beta) ) * (180 / M_PI);
 80056fa:	4b40      	ldr	r3, [pc, #256]	; (80057fc <MPU9250_Calculate_RPY+0x9dc>)
 80056fc:	681c      	ldr	r4, [r3, #0]
 80056fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005700:	f004 ff4a 	bl	800a598 <cosf>
 8005704:	4603      	mov	r3, r0
 8005706:	4619      	mov	r1, r3
 8005708:	4620      	mov	r0, r4
 800570a:	f7fb fb9f 	bl	8000e4c <__aeabi_fdiv>
 800570e:	4603      	mov	r3, r0
 8005710:	461d      	mov	r5, r3
 8005712:	4b34      	ldr	r3, [pc, #208]	; (80057e4 <MPU9250_Calculate_RPY+0x9c4>)
 8005714:	681c      	ldr	r4, [r3, #0]
 8005716:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005718:	f004 ff3e 	bl	800a598 <cosf>
 800571c:	4603      	mov	r3, r0
 800571e:	4619      	mov	r1, r3
 8005720:	4620      	mov	r0, r4
 8005722:	f7fb fb93 	bl	8000e4c <__aeabi_fdiv>
 8005726:	4603      	mov	r3, r0
 8005728:	4619      	mov	r1, r3
 800572a:	4628      	mov	r0, r5
 800572c:	f005 f840 	bl	800a7b0 <atan2f>
 8005730:	4603      	mov	r3, r0
 8005732:	4618      	mov	r0, r3
 8005734:	f7fa fe70 	bl	8000418 <__aeabi_f2d>
 8005738:	a323      	add	r3, pc, #140	; (adr r3, 80057c8 <MPU9250_Calculate_RPY+0x9a8>)
 800573a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573e:	f7fa fec3 	bl	80004c8 <__aeabi_dmul>
 8005742:	4603      	mov	r3, r0
 8005744:	460c      	mov	r4, r1
 8005746:	4618      	mov	r0, r3
 8005748:	4621      	mov	r1, r4
 800574a:	f7fb f96d 	bl	8000a28 <__aeabi_d2f>
 800574e:	4602      	mov	r2, r0
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

	/* Case 4: Calculate magnetometer Yaw */
	int16_t m_x = DataStructure->Magnetometer_X_uT;
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800575c:	4618      	mov	r0, r3
 800575e:	f7fb fc9d 	bl	800109c <__aeabi_f2iz>
 8005762:	4603      	mov	r3, r0
 8005764:	857b      	strh	r3, [r7, #42]	; 0x2a
	int16_t m_y = DataStructure->Magnetometer_Y_uT;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800576c:	4618      	mov	r0, r3
 800576e:	f7fb fc95 	bl	800109c <__aeabi_f2iz>
 8005772:	4603      	mov	r3, r0
 8005774:	853b      	strh	r3, [r7, #40]	; 0x28
	int16_t m_z = DataStructure->Magnetometer_Z_uT;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577c:	4618      	mov	r0, r3
 800577e:	f7fb fc8d 	bl	800109c <__aeabi_f2iz>
 8005782:	4603      	mov	r3, r0
 8005784:	84fb      	strh	r3, [r7, #38]	; 0x26

	float Roll  = DataStructure->Accelerometer_Roll  * (M_PI / 180);
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800578c:	4618      	mov	r0, r3
 800578e:	f7fa fe43 	bl	8000418 <__aeabi_f2d>
 8005792:	a30b      	add	r3, pc, #44	; (adr r3, 80057c0 <MPU9250_Calculate_RPY+0x9a0>)
 8005794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005798:	f7fa fe96 	bl	80004c8 <__aeabi_dmul>
 800579c:	4603      	mov	r3, r0
 800579e:	460c      	mov	r4, r1
 80057a0:	4618      	mov	r0, r3
 80057a2:	4621      	mov	r1, r4
 80057a4:	f7fb f940 	bl	8000a28 <__aeabi_d2f>
 80057a8:	4603      	mov	r3, r0
 80057aa:	623b      	str	r3, [r7, #32]
	float Pitch = DataStructure->Accelerometer_Pitch * (M_PI / 180);
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fa fe30 	bl	8000418 <__aeabi_f2d>
 80057b8:	e02e      	b.n	8005818 <MPU9250_Calculate_RPY+0x9f8>
 80057ba:	bf00      	nop
 80057bc:	f3af 8000 	nop.w
 80057c0:	a2529d39 	.word	0xa2529d39
 80057c4:	3f91df46 	.word	0x3f91df46
 80057c8:	1a63c1f8 	.word	0x1a63c1f8
 80057cc:	404ca5dc 	.word	0x404ca5dc
 80057d0:	200003d4 	.word	0x200003d4
 80057d4:	200003e8 	.word	0x200003e8
 80057d8:	200003ec 	.word	0x200003ec
 80057dc:	20000038 	.word	0x20000038
 80057e0:	2000002c 	.word	0x2000002c
 80057e4:	20000024 	.word	0x20000024
 80057e8:	20000030 	.word	0x20000030
 80057ec:	200003c0 	.word	0x200003c0
 80057f0:	200003d8 	.word	0x200003d8
 80057f4:	200003c4 	.word	0x200003c4
 80057f8:	200003dc 	.word	0x200003dc
 80057fc:	200003c8 	.word	0x200003c8
 8005800:	200003e0 	.word	0x200003e0
 8005804:	20000028 	.word	0x20000028
 8005808:	20000034 	.word	0x20000034
 800580c:	200003cc 	.word	0x200003cc
 8005810:	200003e4 	.word	0x200003e4
 8005814:	200003d0 	.word	0x200003d0
 8005818:	a34f      	add	r3, pc, #316	; (adr r3, 8005958 <MPU9250_Calculate_RPY+0xb38>)
 800581a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581e:	f7fa fe53 	bl	80004c8 <__aeabi_dmul>
 8005822:	4603      	mov	r3, r0
 8005824:	460c      	mov	r4, r1
 8005826:	4618      	mov	r0, r3
 8005828:	4621      	mov	r1, r4
 800582a:	f7fb f8fd 	bl	8000a28 <__aeabi_d2f>
 800582e:	4603      	mov	r3, r0
 8005830:	61fb      	str	r3, [r7, #28]

	float X_h = m_x * cosf(Pitch) + m_y * sinf(Roll) * sinf(Pitch) + m_z * cosf(Roll) * sinf(Pitch);
 8005832:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8005836:	4618      	mov	r0, r3
 8005838:	f7fb fa00 	bl	8000c3c <__aeabi_i2f>
 800583c:	4604      	mov	r4, r0
 800583e:	69f8      	ldr	r0, [r7, #28]
 8005840:	f004 feaa 	bl	800a598 <cosf>
 8005844:	4603      	mov	r3, r0
 8005846:	4619      	mov	r1, r3
 8005848:	4620      	mov	r0, r4
 800584a:	f7fb fa4b 	bl	8000ce4 <__aeabi_fmul>
 800584e:	4603      	mov	r3, r0
 8005850:	461c      	mov	r4, r3
 8005852:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8005856:	4618      	mov	r0, r3
 8005858:	f7fb f9f0 	bl	8000c3c <__aeabi_i2f>
 800585c:	4605      	mov	r5, r0
 800585e:	6a38      	ldr	r0, [r7, #32]
 8005860:	f004 fece 	bl	800a600 <sinf>
 8005864:	4603      	mov	r3, r0
 8005866:	4619      	mov	r1, r3
 8005868:	4628      	mov	r0, r5
 800586a:	f7fb fa3b 	bl	8000ce4 <__aeabi_fmul>
 800586e:	4603      	mov	r3, r0
 8005870:	461d      	mov	r5, r3
 8005872:	69f8      	ldr	r0, [r7, #28]
 8005874:	f004 fec4 	bl	800a600 <sinf>
 8005878:	4603      	mov	r3, r0
 800587a:	4619      	mov	r1, r3
 800587c:	4628      	mov	r0, r5
 800587e:	f7fb fa31 	bl	8000ce4 <__aeabi_fmul>
 8005882:	4603      	mov	r3, r0
 8005884:	4619      	mov	r1, r3
 8005886:	4620      	mov	r0, r4
 8005888:	f7fb f924 	bl	8000ad4 <__addsf3>
 800588c:	4603      	mov	r3, r0
 800588e:	461c      	mov	r4, r3
 8005890:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8005894:	4618      	mov	r0, r3
 8005896:	f7fb f9d1 	bl	8000c3c <__aeabi_i2f>
 800589a:	4605      	mov	r5, r0
 800589c:	6a38      	ldr	r0, [r7, #32]
 800589e:	f004 fe7b 	bl	800a598 <cosf>
 80058a2:	4603      	mov	r3, r0
 80058a4:	4619      	mov	r1, r3
 80058a6:	4628      	mov	r0, r5
 80058a8:	f7fb fa1c 	bl	8000ce4 <__aeabi_fmul>
 80058ac:	4603      	mov	r3, r0
 80058ae:	461d      	mov	r5, r3
 80058b0:	69f8      	ldr	r0, [r7, #28]
 80058b2:	f004 fea5 	bl	800a600 <sinf>
 80058b6:	4603      	mov	r3, r0
 80058b8:	4619      	mov	r1, r3
 80058ba:	4628      	mov	r0, r5
 80058bc:	f7fb fa12 	bl	8000ce4 <__aeabi_fmul>
 80058c0:	4603      	mov	r3, r0
 80058c2:	4619      	mov	r1, r3
 80058c4:	4620      	mov	r0, r4
 80058c6:	f7fb f905 	bl	8000ad4 <__addsf3>
 80058ca:	4603      	mov	r3, r0
 80058cc:	61bb      	str	r3, [r7, #24]
	float Y_h = m_y * cosf(Roll)  - m_z * sinf(Roll);
 80058ce:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fb f9b2 	bl	8000c3c <__aeabi_i2f>
 80058d8:	4604      	mov	r4, r0
 80058da:	6a38      	ldr	r0, [r7, #32]
 80058dc:	f004 fe5c 	bl	800a598 <cosf>
 80058e0:	4603      	mov	r3, r0
 80058e2:	4619      	mov	r1, r3
 80058e4:	4620      	mov	r0, r4
 80058e6:	f7fb f9fd 	bl	8000ce4 <__aeabi_fmul>
 80058ea:	4603      	mov	r3, r0
 80058ec:	461c      	mov	r4, r3
 80058ee:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fb f9a2 	bl	8000c3c <__aeabi_i2f>
 80058f8:	4605      	mov	r5, r0
 80058fa:	6a38      	ldr	r0, [r7, #32]
 80058fc:	f004 fe80 	bl	800a600 <sinf>
 8005900:	4603      	mov	r3, r0
 8005902:	4619      	mov	r1, r3
 8005904:	4628      	mov	r0, r5
 8005906:	f7fb f9ed 	bl	8000ce4 <__aeabi_fmul>
 800590a:	4603      	mov	r3, r0
 800590c:	4619      	mov	r1, r3
 800590e:	4620      	mov	r0, r4
 8005910:	f7fb f8de 	bl	8000ad0 <__aeabi_fsub>
 8005914:	4603      	mov	r3, r0
 8005916:	617b      	str	r3, [r7, #20]

	DataStructure->Magnetometer_Yaw = atan2f(-Y_h, X_h) * (180 / M_PI);
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800591e:	69b9      	ldr	r1, [r7, #24]
 8005920:	4618      	mov	r0, r3
 8005922:	f004 ff45 	bl	800a7b0 <atan2f>
 8005926:	4603      	mov	r3, r0
 8005928:	4618      	mov	r0, r3
 800592a:	f7fa fd75 	bl	8000418 <__aeabi_f2d>
 800592e:	a30c      	add	r3, pc, #48	; (adr r3, 8005960 <MPU9250_Calculate_RPY+0xb40>)
 8005930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005934:	f7fa fdc8 	bl	80004c8 <__aeabi_dmul>
 8005938:	4603      	mov	r3, r0
 800593a:	460c      	mov	r4, r1
 800593c:	4618      	mov	r0, r3
 800593e:	4621      	mov	r1, r4
 8005940:	f7fb f872 	bl	8000a28 <__aeabi_d2f>
 8005944:	4602      	mov	r2, r0
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800594c:	bf00      	nop
 800594e:	3730      	adds	r7, #48	; 0x30
 8005950:	46bd      	mov	sp, r7
 8005952:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005956:	bf00      	nop
 8005958:	a2529d39 	.word	0xa2529d39
 800595c:	3f91df46 	.word	0x3f91df46
 8005960:	1a63c1f8 	.word	0x1a63c1f8
 8005964:	404ca5dc 	.word	0x404ca5dc

08005968 <Complementary_filter>:
float Complementary_filter_Yaw_past = 0;

void Complementary_filter(struct MPU9250 *DataStructure,
						  float weight_Roll_Pitch,
						  float weight_Yaw,
						  float dt) {
 8005968:	b5b0      	push	{r4, r5, r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	603b      	str	r3, [r7, #0]

	DataStructure->Complementary_filter_Roll   = ( (1-weight_Roll_Pitch) * (DataStructure->Complementary_filter_Roll  + DataStructure->Gyroscope_X_dgs * dt )
 8005976:	68b9      	ldr	r1, [r7, #8]
 8005978:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800597c:	f7fb f8a8 	bl	8000ad0 <__aeabi_fsub>
 8005980:	4603      	mov	r3, r0
 8005982:	461d      	mov	r5, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f8d3 40b4 	ldr.w	r4, [r3, #180]	; 0xb4
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598e:	6839      	ldr	r1, [r7, #0]
 8005990:	4618      	mov	r0, r3
 8005992:	f7fb f9a7 	bl	8000ce4 <__aeabi_fmul>
 8005996:	4603      	mov	r3, r0
 8005998:	4619      	mov	r1, r3
 800599a:	4620      	mov	r0, r4
 800599c:	f7fb f89a 	bl	8000ad4 <__addsf3>
 80059a0:	4603      	mov	r3, r0
 80059a2:	4619      	mov	r1, r3
 80059a4:	4628      	mov	r0, r5
 80059a6:	f7fb f99d 	bl	8000ce4 <__aeabi_fmul>
 80059aa:	4603      	mov	r3, r0
 80059ac:	461c      	mov	r4, r3
			                                   + (weight_Roll_Pitch * DataStructure->Accelerometer_Roll)  );
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059b4:	68b9      	ldr	r1, [r7, #8]
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7fb f994 	bl	8000ce4 <__aeabi_fmul>
 80059bc:	4603      	mov	r3, r0
 80059be:	4619      	mov	r1, r3
 80059c0:	4620      	mov	r0, r4
 80059c2:	f7fb f887 	bl	8000ad4 <__addsf3>
 80059c6:	4603      	mov	r3, r0
 80059c8:	461a      	mov	r2, r3
	DataStructure->Complementary_filter_Roll   = ( (1-weight_Roll_Pitch) * (DataStructure->Complementary_filter_Roll  + DataStructure->Gyroscope_X_dgs * dt )
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

	DataStructure->Complementary_filter_Pitch  = ( (1-weight_Roll_Pitch) * (DataStructure->Complementary_filter_Pitch + DataStructure->Gyroscope_Y_dgs * dt )
 80059d0:	68b9      	ldr	r1, [r7, #8]
 80059d2:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80059d6:	f7fb f87b 	bl	8000ad0 <__aeabi_fsub>
 80059da:	4603      	mov	r3, r0
 80059dc:	461d      	mov	r5, r3
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f8d3 40b8 	ldr.w	r4, [r3, #184]	; 0xb8
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059e8:	6839      	ldr	r1, [r7, #0]
 80059ea:	4618      	mov	r0, r3
 80059ec:	f7fb f97a 	bl	8000ce4 <__aeabi_fmul>
 80059f0:	4603      	mov	r3, r0
 80059f2:	4619      	mov	r1, r3
 80059f4:	4620      	mov	r0, r4
 80059f6:	f7fb f86d 	bl	8000ad4 <__addsf3>
 80059fa:	4603      	mov	r3, r0
 80059fc:	4619      	mov	r1, r3
 80059fe:	4628      	mov	r0, r5
 8005a00:	f7fb f970 	bl	8000ce4 <__aeabi_fmul>
 8005a04:	4603      	mov	r3, r0
 8005a06:	461c      	mov	r4, r3
											   + (weight_Roll_Pitch * DataStructure->Accelerometer_Pitch) );
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a0e:	68b9      	ldr	r1, [r7, #8]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7fb f967 	bl	8000ce4 <__aeabi_fmul>
 8005a16:	4603      	mov	r3, r0
 8005a18:	4619      	mov	r1, r3
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	f7fb f85a 	bl	8000ad4 <__addsf3>
 8005a20:	4603      	mov	r3, r0
 8005a22:	461a      	mov	r2, r3
	DataStructure->Complementary_filter_Pitch  = ( (1-weight_Roll_Pitch) * (DataStructure->Complementary_filter_Pitch + DataStructure->Gyroscope_Y_dgs * dt )
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8

	DataStructure->Complementary_filter_Yaw    = ( (1-weight_Yaw) * (DataStructure->Complementary_filter_Yaw   + DataStructure->Gyroscope_Z_dgs * dt )
 8005a2a:	6879      	ldr	r1, [r7, #4]
 8005a2c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005a30:	f7fb f84e 	bl	8000ad0 <__aeabi_fsub>
 8005a34:	4603      	mov	r3, r0
 8005a36:	461d      	mov	r5, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f8d3 40bc 	ldr.w	r4, [r3, #188]	; 0xbc
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a42:	6839      	ldr	r1, [r7, #0]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7fb f94d 	bl	8000ce4 <__aeabi_fmul>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	4620      	mov	r0, r4
 8005a50:	f7fb f840 	bl	8000ad4 <__addsf3>
 8005a54:	4603      	mov	r3, r0
 8005a56:	4619      	mov	r1, r3
 8005a58:	4628      	mov	r0, r5
 8005a5a:	f7fb f943 	bl	8000ce4 <__aeabi_fmul>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	461c      	mov	r4, r3
											   + (weight_Yaw * DataStructure->Magnetometer_Yaw)    );
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005a68:	6879      	ldr	r1, [r7, #4]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fb f93a 	bl	8000ce4 <__aeabi_fmul>
 8005a70:	4603      	mov	r3, r0
 8005a72:	4619      	mov	r1, r3
 8005a74:	4620      	mov	r0, r4
 8005a76:	f7fb f82d 	bl	8000ad4 <__addsf3>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	461a      	mov	r2, r3
	DataStructure->Complementary_filter_Yaw    = ( (1-weight_Yaw) * (DataStructure->Complementary_filter_Yaw   + DataStructure->Gyroscope_Z_dgs * dt )
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc


	if( DataStructure->Complementary_filter_Roll >= 170 && flag_global == 0 ) {
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005a8a:	490c      	ldr	r1, [pc, #48]	; (8005abc <Complementary_filter+0x154>)
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7fb fadb 	bl	8001048 <__aeabi_fcmpge>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00a      	beq.n	8005aae <Complementary_filter+0x146>
 8005a98:	4b09      	ldr	r3, [pc, #36]	; (8005ac0 <Complementary_filter+0x158>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d106      	bne.n	8005aae <Complementary_filter+0x146>

		DataStructure->Complementary_filter_Roll = -179;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	4a08      	ldr	r2, [pc, #32]	; (8005ac4 <Complementary_filter+0x15c>)
 8005aa4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		flag_global = 1;
 8005aa8:	4b05      	ldr	r3, [pc, #20]	; (8005ac0 <Complementary_filter+0x158>)
 8005aaa:	2201      	movs	r2, #1
 8005aac:	601a      	str	r2, [r3, #0]
	}

	flag_global = 0;
 8005aae:	4b04      	ldr	r3, [pc, #16]	; (8005ac0 <Complementary_filter+0x158>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	601a      	str	r2, [r3, #0]
	}
	*/

	//flag_global = 0;
	//Complementary_filter_Yaw_past = DataStructure->Complementary_filter_Yaw;
}
 8005ab4:	bf00      	nop
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bdb0      	pop	{r4, r5, r7, pc}
 8005abc:	432a0000 	.word	0x432a0000
 8005ac0:	200003f0 	.word	0x200003f0
 8005ac4:	c3330000 	.word	0xc3330000

08005ac8 <Kalman_filter>:
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

void Kalman_filter(struct MPU9250 *DataStructure,
				   float Q_Roll_Pitch, float R_Roll_Pitch,
				   float Q_Yaw, float R_Yaw,
				   float dt) {
 8005ac8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005acc:	b086      	sub	sp, #24
 8005ace:	af02      	add	r7, sp, #8
 8005ad0:	60f8      	str	r0, [r7, #12]
 8005ad2:	60b9      	str	r1, [r7, #8]
 8005ad4:	607a      	str	r2, [r7, #4]
 8005ad6:	603b      	str	r3, [r7, #0]

	/* Case 1: Update Q and R value */
	if( DataStructure->Kalman_P.kalman_Q != Q_Roll_Pitch || DataStructure->Kalman_P.kalman_R != R_Roll_Pitch ) {
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005ade:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005ae2:	68b8      	ldr	r0, [r7, #8]
 8005ae4:	f7fa fc98 	bl	8000418 <__aeabi_f2d>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4620      	mov	r0, r4
 8005aee:	4629      	mov	r1, r5
 8005af0:	f7fa ff52 	bl	8000998 <__aeabi_dcmpeq>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d010      	beq.n	8005b1c <Kalman_filter+0x54>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8005b00:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f7fa fc87 	bl	8000418 <__aeabi_f2d>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4620      	mov	r0, r4
 8005b10:	4629      	mov	r1, r5
 8005b12:	f7fa ff41 	bl	8000998 <__aeabi_dcmpeq>
 8005b16:	4603      	mov	r3, r0
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d13c      	bne.n	8005b96 <Kalman_filter+0xce>

		Kalman_filter_init(&DataStructure->Kalman_R, Q_Roll_Pitch, R_Roll_Pitch);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f103 05c0 	add.w	r5, r3, #192	; 0xc0
 8005b22:	68b8      	ldr	r0, [r7, #8]
 8005b24:	f7fa fc78 	bl	8000418 <__aeabi_f2d>
 8005b28:	4680      	mov	r8, r0
 8005b2a:	4689      	mov	r9, r1
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7fa fc73 	bl	8000418 <__aeabi_f2d>
 8005b32:	4603      	mov	r3, r0
 8005b34:	460c      	mov	r4, r1
 8005b36:	e9cd 3400 	strd	r3, r4, [sp]
 8005b3a:	4642      	mov	r2, r8
 8005b3c:	464b      	mov	r3, r9
 8005b3e:	4628      	mov	r0, r5
 8005b40:	f7fd ff6a 	bl	8003a18 <Kalman_filter_init>
		Kalman_filter_init(&DataStructure->Kalman_P, Q_Roll_Pitch, R_Roll_Pitch);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f503 75a4 	add.w	r5, r3, #328	; 0x148
 8005b4a:	68b8      	ldr	r0, [r7, #8]
 8005b4c:	f7fa fc64 	bl	8000418 <__aeabi_f2d>
 8005b50:	4680      	mov	r8, r0
 8005b52:	4689      	mov	r9, r1
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7fa fc5f 	bl	8000418 <__aeabi_f2d>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	460c      	mov	r4, r1
 8005b5e:	e9cd 3400 	strd	r3, r4, [sp]
 8005b62:	4642      	mov	r2, r8
 8005b64:	464b      	mov	r3, r9
 8005b66:	4628      	mov	r0, r5
 8005b68:	f7fd ff56 	bl	8003a18 <Kalman_filter_init>
		Kalman_filter_init(&DataStructure->Kalman_Y, Q_Yaw, R_Yaw);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f503 75e8 	add.w	r5, r3, #464	; 0x1d0
 8005b72:	6838      	ldr	r0, [r7, #0]
 8005b74:	f7fa fc50 	bl	8000418 <__aeabi_f2d>
 8005b78:	4680      	mov	r8, r0
 8005b7a:	4689      	mov	r9, r1
 8005b7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b7e:	f7fa fc4b 	bl	8000418 <__aeabi_f2d>
 8005b82:	4603      	mov	r3, r0
 8005b84:	460c      	mov	r4, r1
 8005b86:	e9cd 3400 	strd	r3, r4, [sp]
 8005b8a:	4642      	mov	r2, r8
 8005b8c:	464b      	mov	r3, r9
 8005b8e:	4628      	mov	r0, r5
 8005b90:	f7fd ff42 	bl	8003a18 <Kalman_filter_init>

		return;
 8005b94:	e02c      	b.n	8005bf0 <Kalman_filter+0x128>
	}

	/* Case 2: */
	DataStructure->Kalman_filter_Roll  = Kalman_filter_calculate(&DataStructure->Kalman_R, DataStructure->Accelerometer_Roll,  DataStructure->Gyroscope_X_dgs, dt);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba8:	f7fd ffb6 	bl	8003b18 <Kalman_filter_calculate>
 8005bac:	4602      	mov	r2, r0
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	f8c3 2258 	str.w	r2, [r3, #600]	; 0x258
	DataStructure->Kalman_filter_Pitch = Kalman_filter_calculate(&DataStructure->Kalman_P, DataStructure->Accelerometer_Pitch, DataStructure->Gyroscope_Y_dgs, dt);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f503 70a4 	add.w	r0, r3, #328	; 0x148
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f8d3 1098 	ldr.w	r1, [r3, #152]	; 0x98
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8005bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc6:	f7fd ffa7 	bl	8003b18 <Kalman_filter_calculate>
 8005bca:	4602      	mov	r2, r0
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f8c3 225c 	str.w	r2, [r3, #604]	; 0x25c
	DataStructure->Kalman_filter_Yaw   = Kalman_filter_calculate(&DataStructure->Kalman_Y, DataStructure->Magnetometer_Yaw,    DataStructure->Gyroscope_Z_dgs, dt);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f503 70e8 	add.w	r0, r3, #464	; 0x1d0
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be4:	f7fd ff98 	bl	8003b18 <Kalman_filter_calculate>
 8005be8:	4602      	mov	r2, r0
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f8c3 2260 	str.w	r2, [r3, #608]	; 0x260
}
 8005bf0:	3710      	adds	r7, #16
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08005bf8 <Madgwick_filter>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

void Madgwick_filter(struct MPU9250 *DataStructure,
					 float beta,
					 float dt) {
 8005bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bfc:	b08d      	sub	sp, #52	; 0x34
 8005bfe:	af08      	add	r7, sp, #32
 8005c00:	60f8      	str	r0, [r7, #12]
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	607a      	str	r2, [r7, #4]

	MadgwickAHRSupdate(beta,
					   DataStructure->Gyroscope_X_dgs * (M_PI / 180), DataStructure->Gyroscope_Y_dgs * (M_PI / 180), DataStructure->Gyroscope_Z_dgs * (M_PI / 180),
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fa fc04 	bl	8000418 <__aeabi_f2d>
 8005c10:	a397      	add	r3, pc, #604	; (adr r3, 8005e70 <Madgwick_filter+0x278>)
 8005c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c16:	f7fa fc57 	bl	80004c8 <__aeabi_dmul>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	460c      	mov	r4, r1
	MadgwickAHRSupdate(beta,
 8005c1e:	4618      	mov	r0, r3
 8005c20:	4621      	mov	r1, r4
 8005c22:	f7fa ff01 	bl	8000a28 <__aeabi_d2f>
 8005c26:	4680      	mov	r8, r0
					   DataStructure->Gyroscope_X_dgs * (M_PI / 180), DataStructure->Gyroscope_Y_dgs * (M_PI / 180), DataStructure->Gyroscope_Z_dgs * (M_PI / 180),
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7fa fbf3 	bl	8000418 <__aeabi_f2d>
 8005c32:	a38f      	add	r3, pc, #572	; (adr r3, 8005e70 <Madgwick_filter+0x278>)
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	f7fa fc46 	bl	80004c8 <__aeabi_dmul>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	460c      	mov	r4, r1
	MadgwickAHRSupdate(beta,
 8005c40:	4618      	mov	r0, r3
 8005c42:	4621      	mov	r1, r4
 8005c44:	f7fa fef0 	bl	8000a28 <__aeabi_d2f>
 8005c48:	4681      	mov	r9, r0
					   DataStructure->Gyroscope_X_dgs * (M_PI / 180), DataStructure->Gyroscope_Y_dgs * (M_PI / 180), DataStructure->Gyroscope_Z_dgs * (M_PI / 180),
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7fa fbe2 	bl	8000418 <__aeabi_f2d>
 8005c54:	a386      	add	r3, pc, #536	; (adr r3, 8005e70 <Madgwick_filter+0x278>)
 8005c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5a:	f7fa fc35 	bl	80004c8 <__aeabi_dmul>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	460c      	mov	r4, r1
	MadgwickAHRSupdate(beta,
 8005c62:	4618      	mov	r0, r3
 8005c64:	4621      	mov	r1, r4
 8005c66:	f7fa fedf 	bl	8000a28 <__aeabi_d2f>
 8005c6a:	4684      	mov	ip, r0
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005c74:	68f9      	ldr	r1, [r7, #12]
 8005c76:	6ec9      	ldr	r1, [r1, #108]	; 0x6c
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
 8005c7e:	68fc      	ldr	r4, [r7, #12]
 8005c80:	f8d4 408c 	ldr.w	r4, [r4, #140]	; 0x8c
 8005c84:	68fd      	ldr	r5, [r7, #12]
 8005c86:	f8d5 5090 	ldr.w	r5, [r5, #144]	; 0x90
 8005c8a:	687e      	ldr	r6, [r7, #4]
 8005c8c:	9606      	str	r6, [sp, #24]
 8005c8e:	9505      	str	r5, [sp, #20]
 8005c90:	9404      	str	r4, [sp, #16]
 8005c92:	9003      	str	r0, [sp, #12]
 8005c94:	9102      	str	r1, [sp, #8]
 8005c96:	9201      	str	r2, [sp, #4]
 8005c98:	9300      	str	r3, [sp, #0]
 8005c9a:	4663      	mov	r3, ip
 8005c9c:	464a      	mov	r2, r9
 8005c9e:	4641      	mov	r1, r8
 8005ca0:	68b8      	ldr	r0, [r7, #8]
 8005ca2:	f7fb fa21 	bl	80010e8 <MadgwickAHRSupdate>
					   DataStructure->Accelerometer_X_g, DataStructure->Accelerometer_Y_g, DataStructure->Accelerometer_Z_g,
					   DataStructure->Magnetometer_X_uT, DataStructure->Magnetometer_Y_uT, DataStructure->Magnetometer_Z_uT,
					   dt);

	DataStructure->Madgwick_filter_Roll  = atan2f( 2 * (q0*q1 + q2*q3), 1 - 2 * (powf(q1,2) + powf(q2,2)) ) * (180 / M_PI);
 8005ca6:	4b76      	ldr	r3, [pc, #472]	; (8005e80 <Madgwick_filter+0x288>)
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	4b76      	ldr	r3, [pc, #472]	; (8005e84 <Madgwick_filter+0x28c>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	f7fb f817 	bl	8000ce4 <__aeabi_fmul>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	461c      	mov	r4, r3
 8005cba:	4b73      	ldr	r3, [pc, #460]	; (8005e88 <Madgwick_filter+0x290>)
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	4b73      	ldr	r3, [pc, #460]	; (8005e8c <Madgwick_filter+0x294>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	f7fb f80d 	bl	8000ce4 <__aeabi_fmul>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	4619      	mov	r1, r3
 8005cce:	4620      	mov	r0, r4
 8005cd0:	f7fa ff00 	bl	8000ad4 <__addsf3>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7fa fefb 	bl	8000ad4 <__addsf3>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	461c      	mov	r4, r3
 8005ce2:	4b68      	ldr	r3, [pc, #416]	; (8005e84 <Madgwick_filter+0x28c>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005cea:	4618      	mov	r0, r3
 8005cec:	f004 fd62 	bl	800a7b4 <powf>
 8005cf0:	4605      	mov	r5, r0
 8005cf2:	4b65      	ldr	r3, [pc, #404]	; (8005e88 <Madgwick_filter+0x290>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f004 fd5a 	bl	800a7b4 <powf>
 8005d00:	4603      	mov	r3, r0
 8005d02:	4619      	mov	r1, r3
 8005d04:	4628      	mov	r0, r5
 8005d06:	f7fa fee5 	bl	8000ad4 <__addsf3>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f7fa fee0 	bl	8000ad4 <__addsf3>
 8005d14:	4603      	mov	r3, r0
 8005d16:	4619      	mov	r1, r3
 8005d18:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005d1c:	f7fa fed8 	bl	8000ad0 <__aeabi_fsub>
 8005d20:	4603      	mov	r3, r0
 8005d22:	4619      	mov	r1, r3
 8005d24:	4620      	mov	r0, r4
 8005d26:	f004 fd43 	bl	800a7b0 <atan2f>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fa fb73 	bl	8000418 <__aeabi_f2d>
 8005d32:	a351      	add	r3, pc, #324	; (adr r3, 8005e78 <Madgwick_filter+0x280>)
 8005d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d38:	f7fa fbc6 	bl	80004c8 <__aeabi_dmul>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	460c      	mov	r4, r1
 8005d40:	4618      	mov	r0, r3
 8005d42:	4621      	mov	r1, r4
 8005d44:	f7fa fe70 	bl	8000a28 <__aeabi_d2f>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
	DataStructure->Madgwick_filter_Pitch = asinf( 2 * (q0*q2 - q3*q1) )                                     * (180 / M_PI);
 8005d50:	4b4b      	ldr	r3, [pc, #300]	; (8005e80 <Madgwick_filter+0x288>)
 8005d52:	681a      	ldr	r2, [r3, #0]
 8005d54:	4b4c      	ldr	r3, [pc, #304]	; (8005e88 <Madgwick_filter+0x290>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4619      	mov	r1, r3
 8005d5a:	4610      	mov	r0, r2
 8005d5c:	f7fa ffc2 	bl	8000ce4 <__aeabi_fmul>
 8005d60:	4603      	mov	r3, r0
 8005d62:	461c      	mov	r4, r3
 8005d64:	4b49      	ldr	r3, [pc, #292]	; (8005e8c <Madgwick_filter+0x294>)
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	4b46      	ldr	r3, [pc, #280]	; (8005e84 <Madgwick_filter+0x28c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	4610      	mov	r0, r2
 8005d70:	f7fa ffb8 	bl	8000ce4 <__aeabi_fmul>
 8005d74:	4603      	mov	r3, r0
 8005d76:	4619      	mov	r1, r3
 8005d78:	4620      	mov	r0, r4
 8005d7a:	f7fa fea9 	bl	8000ad0 <__aeabi_fsub>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	4619      	mov	r1, r3
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fa fea6 	bl	8000ad4 <__addsf3>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f004 fcc2 	bl	800a714 <asinf>
 8005d90:	4603      	mov	r3, r0
 8005d92:	4618      	mov	r0, r3
 8005d94:	f7fa fb40 	bl	8000418 <__aeabi_f2d>
 8005d98:	a337      	add	r3, pc, #220	; (adr r3, 8005e78 <Madgwick_filter+0x280>)
 8005d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9e:	f7fa fb93 	bl	80004c8 <__aeabi_dmul>
 8005da2:	4603      	mov	r3, r0
 8005da4:	460c      	mov	r4, r1
 8005da6:	4618      	mov	r0, r3
 8005da8:	4621      	mov	r1, r4
 8005daa:	f7fa fe3d 	bl	8000a28 <__aeabi_d2f>
 8005dae:	4602      	mov	r2, r0
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
	DataStructure->Madgwick_filter_Yaw   = atan2f( 2 * (q0*q3 + q1*q2), 1 - 2 * (powf(q2,2) + powf(q3,2)) ) * (180 / M_PI);
 8005db6:	4b32      	ldr	r3, [pc, #200]	; (8005e80 <Madgwick_filter+0x288>)
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	4b34      	ldr	r3, [pc, #208]	; (8005e8c <Madgwick_filter+0x294>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	4610      	mov	r0, r2
 8005dc2:	f7fa ff8f 	bl	8000ce4 <__aeabi_fmul>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	461c      	mov	r4, r3
 8005dca:	4b2e      	ldr	r3, [pc, #184]	; (8005e84 <Madgwick_filter+0x28c>)
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	4b2e      	ldr	r3, [pc, #184]	; (8005e88 <Madgwick_filter+0x290>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	4610      	mov	r0, r2
 8005dd6:	f7fa ff85 	bl	8000ce4 <__aeabi_fmul>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	4619      	mov	r1, r3
 8005dde:	4620      	mov	r0, r4
 8005de0:	f7fa fe78 	bl	8000ad4 <__addsf3>
 8005de4:	4603      	mov	r3, r0
 8005de6:	4619      	mov	r1, r3
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7fa fe73 	bl	8000ad4 <__addsf3>
 8005dee:	4603      	mov	r3, r0
 8005df0:	461c      	mov	r4, r3
 8005df2:	4b25      	ldr	r3, [pc, #148]	; (8005e88 <Madgwick_filter+0x290>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f004 fcda 	bl	800a7b4 <powf>
 8005e00:	4605      	mov	r5, r0
 8005e02:	4b22      	ldr	r3, [pc, #136]	; (8005e8c <Madgwick_filter+0x294>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f004 fcd2 	bl	800a7b4 <powf>
 8005e10:	4603      	mov	r3, r0
 8005e12:	4619      	mov	r1, r3
 8005e14:	4628      	mov	r0, r5
 8005e16:	f7fa fe5d 	bl	8000ad4 <__addsf3>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fa fe58 	bl	8000ad4 <__addsf3>
 8005e24:	4603      	mov	r3, r0
 8005e26:	4619      	mov	r1, r3
 8005e28:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005e2c:	f7fa fe50 	bl	8000ad0 <__aeabi_fsub>
 8005e30:	4603      	mov	r3, r0
 8005e32:	4619      	mov	r1, r3
 8005e34:	4620      	mov	r0, r4
 8005e36:	f004 fcbb 	bl	800a7b0 <atan2f>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7fa faeb 	bl	8000418 <__aeabi_f2d>
 8005e42:	a30d      	add	r3, pc, #52	; (adr r3, 8005e78 <Madgwick_filter+0x280>)
 8005e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e48:	f7fa fb3e 	bl	80004c8 <__aeabi_dmul>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	460c      	mov	r4, r1
 8005e50:	4618      	mov	r0, r3
 8005e52:	4621      	mov	r1, r4
 8005e54:	f7fa fde8 	bl	8000a28 <__aeabi_d2f>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
}
 8005e60:	bf00      	nop
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e6a:	bf00      	nop
 8005e6c:	f3af 8000 	nop.w
 8005e70:	a2529d39 	.word	0xa2529d39
 8005e74:	3f91df46 	.word	0x3f91df46
 8005e78:	1a63c1f8 	.word	0x1a63c1f8
 8005e7c:	404ca5dc 	.word	0x404ca5dc
 8005e80:	20000000 	.word	0x20000000
 8005e84:	200000d0 	.word	0x200000d0
 8005e88:	200000d4 	.word	0x200000d4
 8005e8c:	200000d8 	.word	0x200000d8

08005e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8005e96:	4b18      	ldr	r3, [pc, #96]	; (8005ef8 <HAL_MspInit+0x68>)
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	4a17      	ldr	r2, [pc, #92]	; (8005ef8 <HAL_MspInit+0x68>)
 8005e9c:	f043 0301 	orr.w	r3, r3, #1
 8005ea0:	6193      	str	r3, [r2, #24]
 8005ea2:	4b15      	ldr	r3, [pc, #84]	; (8005ef8 <HAL_MspInit+0x68>)
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	60bb      	str	r3, [r7, #8]
 8005eac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005eae:	4b12      	ldr	r3, [pc, #72]	; (8005ef8 <HAL_MspInit+0x68>)
 8005eb0:	69db      	ldr	r3, [r3, #28]
 8005eb2:	4a11      	ldr	r2, [pc, #68]	; (8005ef8 <HAL_MspInit+0x68>)
 8005eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb8:	61d3      	str	r3, [r2, #28]
 8005eba:	4b0f      	ldr	r3, [pc, #60]	; (8005ef8 <HAL_MspInit+0x68>)
 8005ebc:	69db      	ldr	r3, [r3, #28]
 8005ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ec2:	607b      	str	r3, [r7, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	210f      	movs	r1, #15
 8005eca:	f06f 0001 	mvn.w	r0, #1
 8005ece:	f000 fb00 	bl	80064d2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8005ed2:	4b0a      	ldr	r3, [pc, #40]	; (8005efc <HAL_MspInit+0x6c>)
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005ee6:	60fb      	str	r3, [r7, #12]
 8005ee8:	4a04      	ldr	r2, [pc, #16]	; (8005efc <HAL_MspInit+0x6c>)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005eee:	bf00      	nop
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	40021000 	.word	0x40021000
 8005efc:	40010000 	.word	0x40010000

08005f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005f04:	bf00      	nop
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bc80      	pop	{r7}
 8005f0a:	4770      	bx	lr

08005f0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005f10:	e7fe      	b.n	8005f10 <HardFault_Handler+0x4>

08005f12 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005f12:	b480      	push	{r7}
 8005f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005f16:	e7fe      	b.n	8005f16 <MemManage_Handler+0x4>

08005f18 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005f1c:	e7fe      	b.n	8005f1c <BusFault_Handler+0x4>

08005f1e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005f22:	e7fe      	b.n	8005f22 <UsageFault_Handler+0x4>

08005f24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005f24:	b480      	push	{r7}
 8005f26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005f28:	bf00      	nop
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bc80      	pop	{r7}
 8005f2e:	4770      	bx	lr

08005f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f34:	f000 f9b8 	bl	80062a8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005f38:	f003 fefe 	bl	8009d38 <xTaskGetSchedulerState>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d001      	beq.n	8005f46 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8005f42:	f004 f8e1 	bl	800a108 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f46:	bf00      	nop
 8005f48:	bd80      	pop	{r7, pc}
	...

08005f4c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8005f50:	4802      	ldr	r0, [pc, #8]	; (8005f5c <DMA1_Channel4_IRQHandler+0x10>)
 8005f52:	f000 fc25 	bl	80067a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005f56:	bf00      	nop
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	2000354c 	.word	0x2000354c

08005f60 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005f64:	4802      	ldr	r0, [pc, #8]	; (8005f70 <DMA1_Channel5_IRQHandler+0x10>)
 8005f66:	f000 fc1b 	bl	80067a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8005f6a:	bf00      	nop
 8005f6c:	bd80      	pop	{r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	20003590 	.word	0x20003590

08005f74 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005f78:	4802      	ldr	r0, [pc, #8]	; (8005f84 <DMA1_Channel6_IRQHandler+0x10>)
 8005f7a:	f000 fc11 	bl	80067a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8005f7e:	bf00      	nop
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	20003470 	.word	0x20003470

08005f88 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8005f8c:	4802      	ldr	r0, [pc, #8]	; (8005f98 <DMA1_Channel7_IRQHandler+0x10>)
 8005f8e:	f000 fc07 	bl	80067a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8005f92:	bf00      	nop
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	20003508 	.word	0x20003508

08005f9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005fa0:	4802      	ldr	r0, [pc, #8]	; (8005fac <USART1_IRQHandler+0x10>)
 8005fa2:	f002 fcfb 	bl	800899c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8005fa6:	bf00      	nop
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	200035d4 	.word	0x200035d4

08005fb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005fb4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005fb8:	f000 fec8 	bl	8006d4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005fbc:	bf00      	nop
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8005fc4:	4b15      	ldr	r3, [pc, #84]	; (800601c <SystemInit+0x5c>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a14      	ldr	r2, [pc, #80]	; (800601c <SystemInit+0x5c>)
 8005fca:	f043 0301 	orr.w	r3, r3, #1
 8005fce:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8005fd0:	4b12      	ldr	r3, [pc, #72]	; (800601c <SystemInit+0x5c>)
 8005fd2:	685a      	ldr	r2, [r3, #4]
 8005fd4:	4911      	ldr	r1, [pc, #68]	; (800601c <SystemInit+0x5c>)
 8005fd6:	4b12      	ldr	r3, [pc, #72]	; (8006020 <SystemInit+0x60>)
 8005fd8:	4013      	ands	r3, r2
 8005fda:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8005fdc:	4b0f      	ldr	r3, [pc, #60]	; (800601c <SystemInit+0x5c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a0e      	ldr	r2, [pc, #56]	; (800601c <SystemInit+0x5c>)
 8005fe2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8005fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fea:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005fec:	4b0b      	ldr	r3, [pc, #44]	; (800601c <SystemInit+0x5c>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	4a0a      	ldr	r2, [pc, #40]	; (800601c <SystemInit+0x5c>)
 8005ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ff6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005ff8:	4b08      	ldr	r3, [pc, #32]	; (800601c <SystemInit+0x5c>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	4a07      	ldr	r2, [pc, #28]	; (800601c <SystemInit+0x5c>)
 8005ffe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006002:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006004:	4b05      	ldr	r3, [pc, #20]	; (800601c <SystemInit+0x5c>)
 8006006:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800600a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800600c:	4b05      	ldr	r3, [pc, #20]	; (8006024 <SystemInit+0x64>)
 800600e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006012:	609a      	str	r2, [r3, #8]
#endif 
}
 8006014:	bf00      	nop
 8006016:	46bd      	mov	sp, r7
 8006018:	bc80      	pop	{r7}
 800601a:	4770      	bx	lr
 800601c:	40021000 	.word	0x40021000
 8006020:	f8ff0000 	.word	0xf8ff0000
 8006024:	e000ed00 	.word	0xe000ed00

08006028 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800602c:	4b11      	ldr	r3, [pc, #68]	; (8006074 <MX_USART1_UART_Init+0x4c>)
 800602e:	4a12      	ldr	r2, [pc, #72]	; (8006078 <MX_USART1_UART_Init+0x50>)
 8006030:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006032:	4b10      	ldr	r3, [pc, #64]	; (8006074 <MX_USART1_UART_Init+0x4c>)
 8006034:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006038:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800603a:	4b0e      	ldr	r3, [pc, #56]	; (8006074 <MX_USART1_UART_Init+0x4c>)
 800603c:	2200      	movs	r2, #0
 800603e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006040:	4b0c      	ldr	r3, [pc, #48]	; (8006074 <MX_USART1_UART_Init+0x4c>)
 8006042:	2200      	movs	r2, #0
 8006044:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006046:	4b0b      	ldr	r3, [pc, #44]	; (8006074 <MX_USART1_UART_Init+0x4c>)
 8006048:	2200      	movs	r2, #0
 800604a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800604c:	4b09      	ldr	r3, [pc, #36]	; (8006074 <MX_USART1_UART_Init+0x4c>)
 800604e:	220c      	movs	r2, #12
 8006050:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006052:	4b08      	ldr	r3, [pc, #32]	; (8006074 <MX_USART1_UART_Init+0x4c>)
 8006054:	2200      	movs	r2, #0
 8006056:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006058:	4b06      	ldr	r3, [pc, #24]	; (8006074 <MX_USART1_UART_Init+0x4c>)
 800605a:	2200      	movs	r2, #0
 800605c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800605e:	4805      	ldr	r0, [pc, #20]	; (8006074 <MX_USART1_UART_Init+0x4c>)
 8006060:	f002 fb62 	bl	8008728 <HAL_UART_Init>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800606a:	f7fe f80d 	bl	8004088 <Error_Handler>
  }

}
 800606e:	bf00      	nop
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	200035d4 	.word	0x200035d4
 8006078:	40013800 	.word	0x40013800

0800607c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b088      	sub	sp, #32
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006084:	f107 0310 	add.w	r3, r7, #16
 8006088:	2200      	movs	r2, #0
 800608a:	601a      	str	r2, [r3, #0]
 800608c:	605a      	str	r2, [r3, #4]
 800608e:	609a      	str	r2, [r3, #8]
 8006090:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a47      	ldr	r2, [pc, #284]	; (80061b4 <HAL_UART_MspInit+0x138>)
 8006098:	4293      	cmp	r3, r2
 800609a:	f040 8086 	bne.w	80061aa <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800609e:	4b46      	ldr	r3, [pc, #280]	; (80061b8 <HAL_UART_MspInit+0x13c>)
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	4a45      	ldr	r2, [pc, #276]	; (80061b8 <HAL_UART_MspInit+0x13c>)
 80060a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060a8:	6193      	str	r3, [r2, #24]
 80060aa:	4b43      	ldr	r3, [pc, #268]	; (80061b8 <HAL_UART_MspInit+0x13c>)
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060b6:	4b40      	ldr	r3, [pc, #256]	; (80061b8 <HAL_UART_MspInit+0x13c>)
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	4a3f      	ldr	r2, [pc, #252]	; (80061b8 <HAL_UART_MspInit+0x13c>)
 80060bc:	f043 0304 	orr.w	r3, r3, #4
 80060c0:	6193      	str	r3, [r2, #24]
 80060c2:	4b3d      	ldr	r3, [pc, #244]	; (80061b8 <HAL_UART_MspInit+0x13c>)
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	f003 0304 	and.w	r3, r3, #4
 80060ca:	60bb      	str	r3, [r7, #8]
 80060cc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = USART1_HC05_TX_Pin;
 80060ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060d4:	2302      	movs	r3, #2
 80060d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80060d8:	2303      	movs	r3, #3
 80060da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USART1_HC05_TX_GPIO_Port, &GPIO_InitStruct);
 80060dc:	f107 0310 	add.w	r3, r7, #16
 80060e0:	4619      	mov	r1, r3
 80060e2:	4836      	ldr	r0, [pc, #216]	; (80061bc <HAL_UART_MspInit+0x140>)
 80060e4:	f000 fc90 	bl	8006a08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_HC05_RX_Pin;
 80060e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80060ee:	2300      	movs	r3, #0
 80060f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(USART1_HC05_RX_GPIO_Port, &GPIO_InitStruct);
 80060f6:	f107 0310 	add.w	r3, r7, #16
 80060fa:	4619      	mov	r1, r3
 80060fc:	482f      	ldr	r0, [pc, #188]	; (80061bc <HAL_UART_MspInit+0x140>)
 80060fe:	f000 fc83 	bl	8006a08 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006102:	4b2f      	ldr	r3, [pc, #188]	; (80061c0 <HAL_UART_MspInit+0x144>)
 8006104:	4a2f      	ldr	r2, [pc, #188]	; (80061c4 <HAL_UART_MspInit+0x148>)
 8006106:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006108:	4b2d      	ldr	r3, [pc, #180]	; (80061c0 <HAL_UART_MspInit+0x144>)
 800610a:	2200      	movs	r2, #0
 800610c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800610e:	4b2c      	ldr	r3, [pc, #176]	; (80061c0 <HAL_UART_MspInit+0x144>)
 8006110:	2200      	movs	r2, #0
 8006112:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006114:	4b2a      	ldr	r3, [pc, #168]	; (80061c0 <HAL_UART_MspInit+0x144>)
 8006116:	2280      	movs	r2, #128	; 0x80
 8006118:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800611a:	4b29      	ldr	r3, [pc, #164]	; (80061c0 <HAL_UART_MspInit+0x144>)
 800611c:	2200      	movs	r2, #0
 800611e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006120:	4b27      	ldr	r3, [pc, #156]	; (80061c0 <HAL_UART_MspInit+0x144>)
 8006122:	2200      	movs	r2, #0
 8006124:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006126:	4b26      	ldr	r3, [pc, #152]	; (80061c0 <HAL_UART_MspInit+0x144>)
 8006128:	2200      	movs	r2, #0
 800612a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800612c:	4b24      	ldr	r3, [pc, #144]	; (80061c0 <HAL_UART_MspInit+0x144>)
 800612e:	2200      	movs	r2, #0
 8006130:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006132:	4823      	ldr	r0, [pc, #140]	; (80061c0 <HAL_UART_MspInit+0x144>)
 8006134:	f000 fa04 	bl	8006540 <HAL_DMA_Init>
 8006138:	4603      	mov	r3, r0
 800613a:	2b00      	cmp	r3, #0
 800613c:	d001      	beq.n	8006142 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800613e:	f7fd ffa3 	bl	8004088 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a1e      	ldr	r2, [pc, #120]	; (80061c0 <HAL_UART_MspInit+0x144>)
 8006146:	635a      	str	r2, [r3, #52]	; 0x34
 8006148:	4a1d      	ldr	r2, [pc, #116]	; (80061c0 <HAL_UART_MspInit+0x144>)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800614e:	4b1e      	ldr	r3, [pc, #120]	; (80061c8 <HAL_UART_MspInit+0x14c>)
 8006150:	4a1e      	ldr	r2, [pc, #120]	; (80061cc <HAL_UART_MspInit+0x150>)
 8006152:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006154:	4b1c      	ldr	r3, [pc, #112]	; (80061c8 <HAL_UART_MspInit+0x14c>)
 8006156:	2210      	movs	r2, #16
 8006158:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800615a:	4b1b      	ldr	r3, [pc, #108]	; (80061c8 <HAL_UART_MspInit+0x14c>)
 800615c:	2200      	movs	r2, #0
 800615e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006160:	4b19      	ldr	r3, [pc, #100]	; (80061c8 <HAL_UART_MspInit+0x14c>)
 8006162:	2280      	movs	r2, #128	; 0x80
 8006164:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006166:	4b18      	ldr	r3, [pc, #96]	; (80061c8 <HAL_UART_MspInit+0x14c>)
 8006168:	2200      	movs	r2, #0
 800616a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800616c:	4b16      	ldr	r3, [pc, #88]	; (80061c8 <HAL_UART_MspInit+0x14c>)
 800616e:	2200      	movs	r2, #0
 8006170:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006172:	4b15      	ldr	r3, [pc, #84]	; (80061c8 <HAL_UART_MspInit+0x14c>)
 8006174:	2200      	movs	r2, #0
 8006176:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006178:	4b13      	ldr	r3, [pc, #76]	; (80061c8 <HAL_UART_MspInit+0x14c>)
 800617a:	2200      	movs	r2, #0
 800617c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800617e:	4812      	ldr	r0, [pc, #72]	; (80061c8 <HAL_UART_MspInit+0x14c>)
 8006180:	f000 f9de 	bl	8006540 <HAL_DMA_Init>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800618a:	f7fd ff7d 	bl	8004088 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a0d      	ldr	r2, [pc, #52]	; (80061c8 <HAL_UART_MspInit+0x14c>)
 8006192:	631a      	str	r2, [r3, #48]	; 0x30
 8006194:	4a0c      	ldr	r2, [pc, #48]	; (80061c8 <HAL_UART_MspInit+0x14c>)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800619a:	2200      	movs	r2, #0
 800619c:	2105      	movs	r1, #5
 800619e:	2025      	movs	r0, #37	; 0x25
 80061a0:	f000 f997 	bl	80064d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80061a4:	2025      	movs	r0, #37	; 0x25
 80061a6:	f000 f9b0 	bl	800650a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80061aa:	bf00      	nop
 80061ac:	3720      	adds	r7, #32
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	40013800 	.word	0x40013800
 80061b8:	40021000 	.word	0x40021000
 80061bc:	40010800 	.word	0x40010800
 80061c0:	20003590 	.word	0x20003590
 80061c4:	40020058 	.word	0x40020058
 80061c8:	2000354c 	.word	0x2000354c
 80061cc:	40020044 	.word	0x40020044

080061d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80061d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80061d2:	e003      	b.n	80061dc <LoopCopyDataInit>

080061d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80061d4:	4b0b      	ldr	r3, [pc, #44]	; (8006204 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80061d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80061d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80061da:	3104      	adds	r1, #4

080061dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80061dc:	480a      	ldr	r0, [pc, #40]	; (8006208 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80061de:	4b0b      	ldr	r3, [pc, #44]	; (800620c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80061e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80061e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80061e4:	d3f6      	bcc.n	80061d4 <CopyDataInit>
  ldr r2, =_sbss
 80061e6:	4a0a      	ldr	r2, [pc, #40]	; (8006210 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80061e8:	e002      	b.n	80061f0 <LoopFillZerobss>

080061ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80061ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80061ec:	f842 3b04 	str.w	r3, [r2], #4

080061f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80061f0:	4b08      	ldr	r3, [pc, #32]	; (8006214 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80061f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80061f4:	d3f9      	bcc.n	80061ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80061f6:	f7ff fee3 	bl	8005fc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80061fa:	f004 f9a1 	bl	800a540 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80061fe:	f7fd feef 	bl	8003fe0 <main>
  bx lr
 8006202:	4770      	bx	lr
  ldr r3, =_sidata
 8006204:	0800c9f4 	.word	0x0800c9f4
  ldr r0, =_sdata
 8006208:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800620c:	200000b4 	.word	0x200000b4
  ldr r2, =_sbss
 8006210:	200000b4 	.word	0x200000b4
  ldr r3, = _ebss
 8006214:	20003618 	.word	0x20003618

08006218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006218:	e7fe      	b.n	8006218 <ADC1_2_IRQHandler>
	...

0800621c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006220:	4b08      	ldr	r3, [pc, #32]	; (8006244 <HAL_Init+0x28>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a07      	ldr	r2, [pc, #28]	; (8006244 <HAL_Init+0x28>)
 8006226:	f043 0310 	orr.w	r3, r3, #16
 800622a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800622c:	2003      	movs	r0, #3
 800622e:	f000 f945 	bl	80064bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006232:	200f      	movs	r0, #15
 8006234:	f000 f808 	bl	8006248 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006238:	f7ff fe2a 	bl	8005e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	bd80      	pop	{r7, pc}
 8006242:	bf00      	nop
 8006244:	40022000 	.word	0x40022000

08006248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006248:	b580      	push	{r7, lr}
 800624a:	b082      	sub	sp, #8
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006250:	4b12      	ldr	r3, [pc, #72]	; (800629c <HAL_InitTick+0x54>)
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	4b12      	ldr	r3, [pc, #72]	; (80062a0 <HAL_InitTick+0x58>)
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	4619      	mov	r1, r3
 800625a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800625e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006262:	fbb2 f3f3 	udiv	r3, r2, r3
 8006266:	4618      	mov	r0, r3
 8006268:	f000 f95d 	bl	8006526 <HAL_SYSTICK_Config>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d001      	beq.n	8006276 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e00e      	b.n	8006294 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2b0f      	cmp	r3, #15
 800627a:	d80a      	bhi.n	8006292 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800627c:	2200      	movs	r2, #0
 800627e:	6879      	ldr	r1, [r7, #4]
 8006280:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006284:	f000 f925 	bl	80064d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006288:	4a06      	ldr	r2, [pc, #24]	; (80062a4 <HAL_InitTick+0x5c>)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800628e:	2300      	movs	r3, #0
 8006290:	e000      	b.n	8006294 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006292:	2301      	movs	r3, #1
}
 8006294:	4618      	mov	r0, r3
 8006296:	3708      	adds	r7, #8
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}
 800629c:	2000003c 	.word	0x2000003c
 80062a0:	20000044 	.word	0x20000044
 80062a4:	20000040 	.word	0x20000040

080062a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80062a8:	b480      	push	{r7}
 80062aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80062ac:	4b05      	ldr	r3, [pc, #20]	; (80062c4 <HAL_IncTick+0x1c>)
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	461a      	mov	r2, r3
 80062b2:	4b05      	ldr	r3, [pc, #20]	; (80062c8 <HAL_IncTick+0x20>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	4413      	add	r3, r2
 80062b8:	4a03      	ldr	r2, [pc, #12]	; (80062c8 <HAL_IncTick+0x20>)
 80062ba:	6013      	str	r3, [r2, #0]
}
 80062bc:	bf00      	nop
 80062be:	46bd      	mov	sp, r7
 80062c0:	bc80      	pop	{r7}
 80062c2:	4770      	bx	lr
 80062c4:	20000044 	.word	0x20000044
 80062c8:	20003614 	.word	0x20003614

080062cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80062cc:	b480      	push	{r7}
 80062ce:	af00      	add	r7, sp, #0
  return uwTick;
 80062d0:	4b02      	ldr	r3, [pc, #8]	; (80062dc <HAL_GetTick+0x10>)
 80062d2:	681b      	ldr	r3, [r3, #0]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bc80      	pop	{r7}
 80062da:	4770      	bx	lr
 80062dc:	20003614 	.word	0x20003614

080062e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80062e8:	f7ff fff0 	bl	80062cc <HAL_GetTick>
 80062ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062f8:	d005      	beq.n	8006306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80062fa:	4b09      	ldr	r3, [pc, #36]	; (8006320 <HAL_Delay+0x40>)
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	461a      	mov	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4413      	add	r3, r2
 8006304:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006306:	bf00      	nop
 8006308:	f7ff ffe0 	bl	80062cc <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	429a      	cmp	r2, r3
 8006316:	d8f7      	bhi.n	8006308 <HAL_Delay+0x28>
  {
  }
}
 8006318:	bf00      	nop
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}
 8006320:	20000044 	.word	0x20000044

08006324 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f003 0307 	and.w	r3, r3, #7
 8006332:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006334:	4b0c      	ldr	r3, [pc, #48]	; (8006368 <__NVIC_SetPriorityGrouping+0x44>)
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006340:	4013      	ands	r3, r2
 8006342:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800634c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006350:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006356:	4a04      	ldr	r2, [pc, #16]	; (8006368 <__NVIC_SetPriorityGrouping+0x44>)
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	60d3      	str	r3, [r2, #12]
}
 800635c:	bf00      	nop
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	bc80      	pop	{r7}
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	e000ed00 	.word	0xe000ed00

0800636c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006370:	4b04      	ldr	r3, [pc, #16]	; (8006384 <__NVIC_GetPriorityGrouping+0x18>)
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	0a1b      	lsrs	r3, r3, #8
 8006376:	f003 0307 	and.w	r3, r3, #7
}
 800637a:	4618      	mov	r0, r3
 800637c:	46bd      	mov	sp, r7
 800637e:	bc80      	pop	{r7}
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	e000ed00 	.word	0xe000ed00

08006388 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	4603      	mov	r3, r0
 8006390:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006396:	2b00      	cmp	r3, #0
 8006398:	db0b      	blt.n	80063b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800639a:	79fb      	ldrb	r3, [r7, #7]
 800639c:	f003 021f 	and.w	r2, r3, #31
 80063a0:	4906      	ldr	r1, [pc, #24]	; (80063bc <__NVIC_EnableIRQ+0x34>)
 80063a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063a6:	095b      	lsrs	r3, r3, #5
 80063a8:	2001      	movs	r0, #1
 80063aa:	fa00 f202 	lsl.w	r2, r0, r2
 80063ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80063b2:	bf00      	nop
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bc80      	pop	{r7}
 80063ba:	4770      	bx	lr
 80063bc:	e000e100 	.word	0xe000e100

080063c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	4603      	mov	r3, r0
 80063c8:	6039      	str	r1, [r7, #0]
 80063ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	db0a      	blt.n	80063ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	b2da      	uxtb	r2, r3
 80063d8:	490c      	ldr	r1, [pc, #48]	; (800640c <__NVIC_SetPriority+0x4c>)
 80063da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063de:	0112      	lsls	r2, r2, #4
 80063e0:	b2d2      	uxtb	r2, r2
 80063e2:	440b      	add	r3, r1
 80063e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80063e8:	e00a      	b.n	8006400 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	4908      	ldr	r1, [pc, #32]	; (8006410 <__NVIC_SetPriority+0x50>)
 80063f0:	79fb      	ldrb	r3, [r7, #7]
 80063f2:	f003 030f 	and.w	r3, r3, #15
 80063f6:	3b04      	subs	r3, #4
 80063f8:	0112      	lsls	r2, r2, #4
 80063fa:	b2d2      	uxtb	r2, r2
 80063fc:	440b      	add	r3, r1
 80063fe:	761a      	strb	r2, [r3, #24]
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	bc80      	pop	{r7}
 8006408:	4770      	bx	lr
 800640a:	bf00      	nop
 800640c:	e000e100 	.word	0xe000e100
 8006410:	e000ed00 	.word	0xe000ed00

08006414 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006414:	b480      	push	{r7}
 8006416:	b089      	sub	sp, #36	; 0x24
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f003 0307 	and.w	r3, r3, #7
 8006426:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	f1c3 0307 	rsb	r3, r3, #7
 800642e:	2b04      	cmp	r3, #4
 8006430:	bf28      	it	cs
 8006432:	2304      	movcs	r3, #4
 8006434:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	3304      	adds	r3, #4
 800643a:	2b06      	cmp	r3, #6
 800643c:	d902      	bls.n	8006444 <NVIC_EncodePriority+0x30>
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	3b03      	subs	r3, #3
 8006442:	e000      	b.n	8006446 <NVIC_EncodePriority+0x32>
 8006444:	2300      	movs	r3, #0
 8006446:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006448:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	fa02 f303 	lsl.w	r3, r2, r3
 8006452:	43da      	mvns	r2, r3
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	401a      	ands	r2, r3
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800645c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	fa01 f303 	lsl.w	r3, r1, r3
 8006466:	43d9      	mvns	r1, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800646c:	4313      	orrs	r3, r2
         );
}
 800646e:	4618      	mov	r0, r3
 8006470:	3724      	adds	r7, #36	; 0x24
 8006472:	46bd      	mov	sp, r7
 8006474:	bc80      	pop	{r7}
 8006476:	4770      	bx	lr

08006478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b082      	sub	sp, #8
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	3b01      	subs	r3, #1
 8006484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006488:	d301      	bcc.n	800648e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800648a:	2301      	movs	r3, #1
 800648c:	e00f      	b.n	80064ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800648e:	4a0a      	ldr	r2, [pc, #40]	; (80064b8 <SysTick_Config+0x40>)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	3b01      	subs	r3, #1
 8006494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006496:	210f      	movs	r1, #15
 8006498:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800649c:	f7ff ff90 	bl	80063c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80064a0:	4b05      	ldr	r3, [pc, #20]	; (80064b8 <SysTick_Config+0x40>)
 80064a2:	2200      	movs	r2, #0
 80064a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80064a6:	4b04      	ldr	r3, [pc, #16]	; (80064b8 <SysTick_Config+0x40>)
 80064a8:	2207      	movs	r2, #7
 80064aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80064ac:	2300      	movs	r3, #0
}
 80064ae:	4618      	mov	r0, r3
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	e000e010 	.word	0xe000e010

080064bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7ff ff2d 	bl	8006324 <__NVIC_SetPriorityGrouping>
}
 80064ca:	bf00      	nop
 80064cc:	3708      	adds	r7, #8
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}

080064d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80064d2:	b580      	push	{r7, lr}
 80064d4:	b086      	sub	sp, #24
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	4603      	mov	r3, r0
 80064da:	60b9      	str	r1, [r7, #8]
 80064dc:	607a      	str	r2, [r7, #4]
 80064de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80064e0:	2300      	movs	r3, #0
 80064e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80064e4:	f7ff ff42 	bl	800636c <__NVIC_GetPriorityGrouping>
 80064e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	68b9      	ldr	r1, [r7, #8]
 80064ee:	6978      	ldr	r0, [r7, #20]
 80064f0:	f7ff ff90 	bl	8006414 <NVIC_EncodePriority>
 80064f4:	4602      	mov	r2, r0
 80064f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064fa:	4611      	mov	r1, r2
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7ff ff5f 	bl	80063c0 <__NVIC_SetPriority>
}
 8006502:	bf00      	nop
 8006504:	3718      	adds	r7, #24
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b082      	sub	sp, #8
 800650e:	af00      	add	r7, sp, #0
 8006510:	4603      	mov	r3, r0
 8006512:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006518:	4618      	mov	r0, r3
 800651a:	f7ff ff35 	bl	8006388 <__NVIC_EnableIRQ>
}
 800651e:	bf00      	nop
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b082      	sub	sp, #8
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f7ff ffa2 	bl	8006478 <SysTick_Config>
 8006534:	4603      	mov	r3, r0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3708      	adds	r7, #8
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
	...

08006540 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006540:	b480      	push	{r7}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006548:	2300      	movs	r3, #0
 800654a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d101      	bne.n	8006556 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e043      	b.n	80065de <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	461a      	mov	r2, r3
 800655c:	4b22      	ldr	r3, [pc, #136]	; (80065e8 <HAL_DMA_Init+0xa8>)
 800655e:	4413      	add	r3, r2
 8006560:	4a22      	ldr	r2, [pc, #136]	; (80065ec <HAL_DMA_Init+0xac>)
 8006562:	fba2 2303 	umull	r2, r3, r2, r3
 8006566:	091b      	lsrs	r3, r3, #4
 8006568:	009a      	lsls	r2, r3, #2
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a1f      	ldr	r2, [pc, #124]	; (80065f0 <HAL_DMA_Init+0xb0>)
 8006572:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800658a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800658e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006598:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68db      	ldr	r3, [r3, #12]
 800659e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	69db      	ldr	r3, [r3, #28]
 80065b6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80065dc:	2300      	movs	r3, #0
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bc80      	pop	{r7}
 80065e6:	4770      	bx	lr
 80065e8:	bffdfff8 	.word	0xbffdfff8
 80065ec:	cccccccd 	.word	0xcccccccd
 80065f0:	40020000 	.word	0x40020000

080065f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b086      	sub	sp, #24
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
 8006600:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d101      	bne.n	8006614 <HAL_DMA_Start_IT+0x20>
 8006610:	2302      	movs	r3, #2
 8006612:	e04a      	b.n	80066aa <HAL_DMA_Start_IT+0xb6>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006622:	2b01      	cmp	r3, #1
 8006624:	d13a      	bne.n	800669c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	2202      	movs	r2, #2
 800662a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 0201 	bic.w	r2, r2, #1
 8006642:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	68b9      	ldr	r1, [r7, #8]
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f000 f9ae 	bl	80069ac <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006654:	2b00      	cmp	r3, #0
 8006656:	d008      	beq.n	800666a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f042 020e 	orr.w	r2, r2, #14
 8006666:	601a      	str	r2, [r3, #0]
 8006668:	e00f      	b.n	800668a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f022 0204 	bic.w	r2, r2, #4
 8006678:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f042 020a 	orr.w	r2, r2, #10
 8006688:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f042 0201 	orr.w	r2, r2, #1
 8006698:	601a      	str	r2, [r3, #0]
 800669a:	e005      	b.n	80066a8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80066a4:	2302      	movs	r3, #2
 80066a6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80066a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
	...

080066b4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066bc:	2300      	movs	r3, #0
 80066be:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d005      	beq.n	80066d6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2204      	movs	r2, #4
 80066ce:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	73fb      	strb	r3, [r7, #15]
 80066d4:	e051      	b.n	800677a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f022 020e 	bic.w	r2, r2, #14
 80066e4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f022 0201 	bic.w	r2, r2, #1
 80066f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a22      	ldr	r2, [pc, #136]	; (8006784 <HAL_DMA_Abort_IT+0xd0>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d029      	beq.n	8006754 <HAL_DMA_Abort_IT+0xa0>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a20      	ldr	r2, [pc, #128]	; (8006788 <HAL_DMA_Abort_IT+0xd4>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d022      	beq.n	8006750 <HAL_DMA_Abort_IT+0x9c>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a1f      	ldr	r2, [pc, #124]	; (800678c <HAL_DMA_Abort_IT+0xd8>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d01a      	beq.n	800674a <HAL_DMA_Abort_IT+0x96>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a1d      	ldr	r2, [pc, #116]	; (8006790 <HAL_DMA_Abort_IT+0xdc>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d012      	beq.n	8006744 <HAL_DMA_Abort_IT+0x90>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a1c      	ldr	r2, [pc, #112]	; (8006794 <HAL_DMA_Abort_IT+0xe0>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d00a      	beq.n	800673e <HAL_DMA_Abort_IT+0x8a>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a1a      	ldr	r2, [pc, #104]	; (8006798 <HAL_DMA_Abort_IT+0xe4>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d102      	bne.n	8006738 <HAL_DMA_Abort_IT+0x84>
 8006732:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006736:	e00e      	b.n	8006756 <HAL_DMA_Abort_IT+0xa2>
 8006738:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800673c:	e00b      	b.n	8006756 <HAL_DMA_Abort_IT+0xa2>
 800673e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006742:	e008      	b.n	8006756 <HAL_DMA_Abort_IT+0xa2>
 8006744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006748:	e005      	b.n	8006756 <HAL_DMA_Abort_IT+0xa2>
 800674a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800674e:	e002      	b.n	8006756 <HAL_DMA_Abort_IT+0xa2>
 8006750:	2310      	movs	r3, #16
 8006752:	e000      	b.n	8006756 <HAL_DMA_Abort_IT+0xa2>
 8006754:	2301      	movs	r3, #1
 8006756:	4a11      	ldr	r2, [pc, #68]	; (800679c <HAL_DMA_Abort_IT+0xe8>)
 8006758:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	4798      	blx	r3
    } 
  }
  return status;
 800677a:	7bfb      	ldrb	r3, [r7, #15]
}
 800677c:	4618      	mov	r0, r3
 800677e:	3710      	adds	r7, #16
 8006780:	46bd      	mov	sp, r7
 8006782:	bd80      	pop	{r7, pc}
 8006784:	40020008 	.word	0x40020008
 8006788:	4002001c 	.word	0x4002001c
 800678c:	40020030 	.word	0x40020030
 8006790:	40020044 	.word	0x40020044
 8006794:	40020058 	.word	0x40020058
 8006798:	4002006c 	.word	0x4002006c
 800679c:	40020000 	.word	0x40020000

080067a0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067bc:	2204      	movs	r2, #4
 80067be:	409a      	lsls	r2, r3
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	4013      	ands	r3, r2
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d04f      	beq.n	8006868 <HAL_DMA_IRQHandler+0xc8>
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f003 0304 	and.w	r3, r3, #4
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d04a      	beq.n	8006868 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0320 	and.w	r3, r3, #32
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d107      	bne.n	80067f0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f022 0204 	bic.w	r2, r2, #4
 80067ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4a66      	ldr	r2, [pc, #408]	; (8006990 <HAL_DMA_IRQHandler+0x1f0>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d029      	beq.n	800684e <HAL_DMA_IRQHandler+0xae>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a65      	ldr	r2, [pc, #404]	; (8006994 <HAL_DMA_IRQHandler+0x1f4>)
 8006800:	4293      	cmp	r3, r2
 8006802:	d022      	beq.n	800684a <HAL_DMA_IRQHandler+0xaa>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	4a63      	ldr	r2, [pc, #396]	; (8006998 <HAL_DMA_IRQHandler+0x1f8>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d01a      	beq.n	8006844 <HAL_DMA_IRQHandler+0xa4>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a62      	ldr	r2, [pc, #392]	; (800699c <HAL_DMA_IRQHandler+0x1fc>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d012      	beq.n	800683e <HAL_DMA_IRQHandler+0x9e>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a60      	ldr	r2, [pc, #384]	; (80069a0 <HAL_DMA_IRQHandler+0x200>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d00a      	beq.n	8006838 <HAL_DMA_IRQHandler+0x98>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a5f      	ldr	r2, [pc, #380]	; (80069a4 <HAL_DMA_IRQHandler+0x204>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d102      	bne.n	8006832 <HAL_DMA_IRQHandler+0x92>
 800682c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006830:	e00e      	b.n	8006850 <HAL_DMA_IRQHandler+0xb0>
 8006832:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006836:	e00b      	b.n	8006850 <HAL_DMA_IRQHandler+0xb0>
 8006838:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800683c:	e008      	b.n	8006850 <HAL_DMA_IRQHandler+0xb0>
 800683e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006842:	e005      	b.n	8006850 <HAL_DMA_IRQHandler+0xb0>
 8006844:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006848:	e002      	b.n	8006850 <HAL_DMA_IRQHandler+0xb0>
 800684a:	2340      	movs	r3, #64	; 0x40
 800684c:	e000      	b.n	8006850 <HAL_DMA_IRQHandler+0xb0>
 800684e:	2304      	movs	r3, #4
 8006850:	4a55      	ldr	r2, [pc, #340]	; (80069a8 <HAL_DMA_IRQHandler+0x208>)
 8006852:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006858:	2b00      	cmp	r3, #0
 800685a:	f000 8094 	beq.w	8006986 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8006866:	e08e      	b.n	8006986 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800686c:	2202      	movs	r2, #2
 800686e:	409a      	lsls	r2, r3
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	4013      	ands	r3, r2
 8006874:	2b00      	cmp	r3, #0
 8006876:	d056      	beq.n	8006926 <HAL_DMA_IRQHandler+0x186>
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	f003 0302 	and.w	r3, r3, #2
 800687e:	2b00      	cmp	r3, #0
 8006880:	d051      	beq.n	8006926 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0320 	and.w	r3, r3, #32
 800688c:	2b00      	cmp	r3, #0
 800688e:	d10b      	bne.n	80068a8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f022 020a 	bic.w	r2, r2, #10
 800689e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a38      	ldr	r2, [pc, #224]	; (8006990 <HAL_DMA_IRQHandler+0x1f0>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d029      	beq.n	8006906 <HAL_DMA_IRQHandler+0x166>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a37      	ldr	r2, [pc, #220]	; (8006994 <HAL_DMA_IRQHandler+0x1f4>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d022      	beq.n	8006902 <HAL_DMA_IRQHandler+0x162>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a35      	ldr	r2, [pc, #212]	; (8006998 <HAL_DMA_IRQHandler+0x1f8>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d01a      	beq.n	80068fc <HAL_DMA_IRQHandler+0x15c>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a34      	ldr	r2, [pc, #208]	; (800699c <HAL_DMA_IRQHandler+0x1fc>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d012      	beq.n	80068f6 <HAL_DMA_IRQHandler+0x156>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a32      	ldr	r2, [pc, #200]	; (80069a0 <HAL_DMA_IRQHandler+0x200>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d00a      	beq.n	80068f0 <HAL_DMA_IRQHandler+0x150>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a31      	ldr	r2, [pc, #196]	; (80069a4 <HAL_DMA_IRQHandler+0x204>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d102      	bne.n	80068ea <HAL_DMA_IRQHandler+0x14a>
 80068e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80068e8:	e00e      	b.n	8006908 <HAL_DMA_IRQHandler+0x168>
 80068ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068ee:	e00b      	b.n	8006908 <HAL_DMA_IRQHandler+0x168>
 80068f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80068f4:	e008      	b.n	8006908 <HAL_DMA_IRQHandler+0x168>
 80068f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80068fa:	e005      	b.n	8006908 <HAL_DMA_IRQHandler+0x168>
 80068fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006900:	e002      	b.n	8006908 <HAL_DMA_IRQHandler+0x168>
 8006902:	2320      	movs	r3, #32
 8006904:	e000      	b.n	8006908 <HAL_DMA_IRQHandler+0x168>
 8006906:	2302      	movs	r3, #2
 8006908:	4a27      	ldr	r2, [pc, #156]	; (80069a8 <HAL_DMA_IRQHandler+0x208>)
 800690a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006918:	2b00      	cmp	r3, #0
 800691a:	d034      	beq.n	8006986 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006924:	e02f      	b.n	8006986 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692a:	2208      	movs	r2, #8
 800692c:	409a      	lsls	r2, r3
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	4013      	ands	r3, r2
 8006932:	2b00      	cmp	r3, #0
 8006934:	d028      	beq.n	8006988 <HAL_DMA_IRQHandler+0x1e8>
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	f003 0308 	and.w	r3, r3, #8
 800693c:	2b00      	cmp	r3, #0
 800693e:	d023      	beq.n	8006988 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 020e 	bic.w	r2, r2, #14
 800694e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006958:	2101      	movs	r1, #1
 800695a:	fa01 f202 	lsl.w	r2, r1, r2
 800695e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2201      	movs	r2, #1
 8006964:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697a:	2b00      	cmp	r3, #0
 800697c:	d004      	beq.n	8006988 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	4798      	blx	r3
    }
  }
  return;
 8006986:	bf00      	nop
 8006988:	bf00      	nop
}
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	40020008 	.word	0x40020008
 8006994:	4002001c 	.word	0x4002001c
 8006998:	40020030 	.word	0x40020030
 800699c:	40020044 	.word	0x40020044
 80069a0:	40020058 	.word	0x40020058
 80069a4:	4002006c 	.word	0x4002006c
 80069a8:	40020000 	.word	0x40020000

080069ac <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
 80069b8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069c2:	2101      	movs	r1, #1
 80069c4:	fa01 f202 	lsl.w	r2, r1, r2
 80069c8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	2b10      	cmp	r3, #16
 80069d8:	d108      	bne.n	80069ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	68ba      	ldr	r2, [r7, #8]
 80069e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80069ea:	e007      	b.n	80069fc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	68ba      	ldr	r2, [r7, #8]
 80069f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	60da      	str	r2, [r3, #12]
}
 80069fc:	bf00      	nop
 80069fe:	3714      	adds	r7, #20
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bc80      	pop	{r7}
 8006a04:	4770      	bx	lr
	...

08006a08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b08b      	sub	sp, #44	; 0x2c
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006a12:	2300      	movs	r3, #0
 8006a14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006a16:	2300      	movs	r3, #0
 8006a18:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006a1a:	e127      	b.n	8006c6c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a20:	fa02 f303 	lsl.w	r3, r2, r3
 8006a24:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	69fa      	ldr	r2, [r7, #28]
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8006a30:	69ba      	ldr	r2, [r7, #24]
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	f040 8116 	bne.w	8006c66 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	2b12      	cmp	r3, #18
 8006a40:	d034      	beq.n	8006aac <HAL_GPIO_Init+0xa4>
 8006a42:	2b12      	cmp	r3, #18
 8006a44:	d80d      	bhi.n	8006a62 <HAL_GPIO_Init+0x5a>
 8006a46:	2b02      	cmp	r3, #2
 8006a48:	d02b      	beq.n	8006aa2 <HAL_GPIO_Init+0x9a>
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d804      	bhi.n	8006a58 <HAL_GPIO_Init+0x50>
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d031      	beq.n	8006ab6 <HAL_GPIO_Init+0xae>
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d01c      	beq.n	8006a90 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8006a56:	e048      	b.n	8006aea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8006a58:	2b03      	cmp	r3, #3
 8006a5a:	d043      	beq.n	8006ae4 <HAL_GPIO_Init+0xdc>
 8006a5c:	2b11      	cmp	r3, #17
 8006a5e:	d01b      	beq.n	8006a98 <HAL_GPIO_Init+0x90>
          break;
 8006a60:	e043      	b.n	8006aea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8006a62:	4a89      	ldr	r2, [pc, #548]	; (8006c88 <HAL_GPIO_Init+0x280>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d026      	beq.n	8006ab6 <HAL_GPIO_Init+0xae>
 8006a68:	4a87      	ldr	r2, [pc, #540]	; (8006c88 <HAL_GPIO_Init+0x280>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d806      	bhi.n	8006a7c <HAL_GPIO_Init+0x74>
 8006a6e:	4a87      	ldr	r2, [pc, #540]	; (8006c8c <HAL_GPIO_Init+0x284>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d020      	beq.n	8006ab6 <HAL_GPIO_Init+0xae>
 8006a74:	4a86      	ldr	r2, [pc, #536]	; (8006c90 <HAL_GPIO_Init+0x288>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d01d      	beq.n	8006ab6 <HAL_GPIO_Init+0xae>
          break;
 8006a7a:	e036      	b.n	8006aea <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8006a7c:	4a85      	ldr	r2, [pc, #532]	; (8006c94 <HAL_GPIO_Init+0x28c>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d019      	beq.n	8006ab6 <HAL_GPIO_Init+0xae>
 8006a82:	4a85      	ldr	r2, [pc, #532]	; (8006c98 <HAL_GPIO_Init+0x290>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d016      	beq.n	8006ab6 <HAL_GPIO_Init+0xae>
 8006a88:	4a84      	ldr	r2, [pc, #528]	; (8006c9c <HAL_GPIO_Init+0x294>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d013      	beq.n	8006ab6 <HAL_GPIO_Init+0xae>
          break;
 8006a8e:	e02c      	b.n	8006aea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	623b      	str	r3, [r7, #32]
          break;
 8006a96:	e028      	b.n	8006aea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	3304      	adds	r3, #4
 8006a9e:	623b      	str	r3, [r7, #32]
          break;
 8006aa0:	e023      	b.n	8006aea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	623b      	str	r3, [r7, #32]
          break;
 8006aaa:	e01e      	b.n	8006aea <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	330c      	adds	r3, #12
 8006ab2:	623b      	str	r3, [r7, #32]
          break;
 8006ab4:	e019      	b.n	8006aea <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d102      	bne.n	8006ac4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006abe:	2304      	movs	r3, #4
 8006ac0:	623b      	str	r3, [r7, #32]
          break;
 8006ac2:	e012      	b.n	8006aea <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d105      	bne.n	8006ad8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006acc:	2308      	movs	r3, #8
 8006ace:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	69fa      	ldr	r2, [r7, #28]
 8006ad4:	611a      	str	r2, [r3, #16]
          break;
 8006ad6:	e008      	b.n	8006aea <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006ad8:	2308      	movs	r3, #8
 8006ada:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	69fa      	ldr	r2, [r7, #28]
 8006ae0:	615a      	str	r2, [r3, #20]
          break;
 8006ae2:	e002      	b.n	8006aea <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	623b      	str	r3, [r7, #32]
          break;
 8006ae8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	2bff      	cmp	r3, #255	; 0xff
 8006aee:	d801      	bhi.n	8006af4 <HAL_GPIO_Init+0xec>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	e001      	b.n	8006af8 <HAL_GPIO_Init+0xf0>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	3304      	adds	r3, #4
 8006af8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	2bff      	cmp	r3, #255	; 0xff
 8006afe:	d802      	bhi.n	8006b06 <HAL_GPIO_Init+0xfe>
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	e002      	b.n	8006b0c <HAL_GPIO_Init+0x104>
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	3b08      	subs	r3, #8
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	210f      	movs	r1, #15
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	fa01 f303 	lsl.w	r3, r1, r3
 8006b1a:	43db      	mvns	r3, r3
 8006b1c:	401a      	ands	r2, r3
 8006b1e:	6a39      	ldr	r1, [r7, #32]
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	fa01 f303 	lsl.w	r3, r1, r3
 8006b26:	431a      	orrs	r2, r3
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 8096 	beq.w	8006c66 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006b3a:	4b59      	ldr	r3, [pc, #356]	; (8006ca0 <HAL_GPIO_Init+0x298>)
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	4a58      	ldr	r2, [pc, #352]	; (8006ca0 <HAL_GPIO_Init+0x298>)
 8006b40:	f043 0301 	orr.w	r3, r3, #1
 8006b44:	6193      	str	r3, [r2, #24]
 8006b46:	4b56      	ldr	r3, [pc, #344]	; (8006ca0 <HAL_GPIO_Init+0x298>)
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	f003 0301 	and.w	r3, r3, #1
 8006b4e:	60bb      	str	r3, [r7, #8]
 8006b50:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8006b52:	4a54      	ldr	r2, [pc, #336]	; (8006ca4 <HAL_GPIO_Init+0x29c>)
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	089b      	lsrs	r3, r3, #2
 8006b58:	3302      	adds	r3, #2
 8006b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b5e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b62:	f003 0303 	and.w	r3, r3, #3
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	220f      	movs	r2, #15
 8006b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b6e:	43db      	mvns	r3, r3
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	4013      	ands	r3, r2
 8006b74:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a4b      	ldr	r2, [pc, #300]	; (8006ca8 <HAL_GPIO_Init+0x2a0>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d013      	beq.n	8006ba6 <HAL_GPIO_Init+0x19e>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a4a      	ldr	r2, [pc, #296]	; (8006cac <HAL_GPIO_Init+0x2a4>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d00d      	beq.n	8006ba2 <HAL_GPIO_Init+0x19a>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	4a49      	ldr	r2, [pc, #292]	; (8006cb0 <HAL_GPIO_Init+0x2a8>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d007      	beq.n	8006b9e <HAL_GPIO_Init+0x196>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	4a48      	ldr	r2, [pc, #288]	; (8006cb4 <HAL_GPIO_Init+0x2ac>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d101      	bne.n	8006b9a <HAL_GPIO_Init+0x192>
 8006b96:	2303      	movs	r3, #3
 8006b98:	e006      	b.n	8006ba8 <HAL_GPIO_Init+0x1a0>
 8006b9a:	2304      	movs	r3, #4
 8006b9c:	e004      	b.n	8006ba8 <HAL_GPIO_Init+0x1a0>
 8006b9e:	2302      	movs	r3, #2
 8006ba0:	e002      	b.n	8006ba8 <HAL_GPIO_Init+0x1a0>
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e000      	b.n	8006ba8 <HAL_GPIO_Init+0x1a0>
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006baa:	f002 0203 	and.w	r2, r2, #3
 8006bae:	0092      	lsls	r2, r2, #2
 8006bb0:	4093      	lsls	r3, r2
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8006bb8:	493a      	ldr	r1, [pc, #232]	; (8006ca4 <HAL_GPIO_Init+0x29c>)
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	089b      	lsrs	r3, r3, #2
 8006bbe:	3302      	adds	r3, #2
 8006bc0:	68fa      	ldr	r2, [r7, #12]
 8006bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	685b      	ldr	r3, [r3, #4]
 8006bca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d006      	beq.n	8006be0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8006bd2:	4b39      	ldr	r3, [pc, #228]	; (8006cb8 <HAL_GPIO_Init+0x2b0>)
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	4938      	ldr	r1, [pc, #224]	; (8006cb8 <HAL_GPIO_Init+0x2b0>)
 8006bd8:	69bb      	ldr	r3, [r7, #24]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	600b      	str	r3, [r1, #0]
 8006bde:	e006      	b.n	8006bee <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006be0:	4b35      	ldr	r3, [pc, #212]	; (8006cb8 <HAL_GPIO_Init+0x2b0>)
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	69bb      	ldr	r3, [r7, #24]
 8006be6:	43db      	mvns	r3, r3
 8006be8:	4933      	ldr	r1, [pc, #204]	; (8006cb8 <HAL_GPIO_Init+0x2b0>)
 8006bea:	4013      	ands	r3, r2
 8006bec:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d006      	beq.n	8006c08 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8006bfa:	4b2f      	ldr	r3, [pc, #188]	; (8006cb8 <HAL_GPIO_Init+0x2b0>)
 8006bfc:	685a      	ldr	r2, [r3, #4]
 8006bfe:	492e      	ldr	r1, [pc, #184]	; (8006cb8 <HAL_GPIO_Init+0x2b0>)
 8006c00:	69bb      	ldr	r3, [r7, #24]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	604b      	str	r3, [r1, #4]
 8006c06:	e006      	b.n	8006c16 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006c08:	4b2b      	ldr	r3, [pc, #172]	; (8006cb8 <HAL_GPIO_Init+0x2b0>)
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	69bb      	ldr	r3, [r7, #24]
 8006c0e:	43db      	mvns	r3, r3
 8006c10:	4929      	ldr	r1, [pc, #164]	; (8006cb8 <HAL_GPIO_Init+0x2b0>)
 8006c12:	4013      	ands	r3, r2
 8006c14:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d006      	beq.n	8006c30 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8006c22:	4b25      	ldr	r3, [pc, #148]	; (8006cb8 <HAL_GPIO_Init+0x2b0>)
 8006c24:	689a      	ldr	r2, [r3, #8]
 8006c26:	4924      	ldr	r1, [pc, #144]	; (8006cb8 <HAL_GPIO_Init+0x2b0>)
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	608b      	str	r3, [r1, #8]
 8006c2e:	e006      	b.n	8006c3e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006c30:	4b21      	ldr	r3, [pc, #132]	; (8006cb8 <HAL_GPIO_Init+0x2b0>)
 8006c32:	689a      	ldr	r2, [r3, #8]
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	43db      	mvns	r3, r3
 8006c38:	491f      	ldr	r1, [pc, #124]	; (8006cb8 <HAL_GPIO_Init+0x2b0>)
 8006c3a:	4013      	ands	r3, r2
 8006c3c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d006      	beq.n	8006c58 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8006c4a:	4b1b      	ldr	r3, [pc, #108]	; (8006cb8 <HAL_GPIO_Init+0x2b0>)
 8006c4c:	68da      	ldr	r2, [r3, #12]
 8006c4e:	491a      	ldr	r1, [pc, #104]	; (8006cb8 <HAL_GPIO_Init+0x2b0>)
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	4313      	orrs	r3, r2
 8006c54:	60cb      	str	r3, [r1, #12]
 8006c56:	e006      	b.n	8006c66 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006c58:	4b17      	ldr	r3, [pc, #92]	; (8006cb8 <HAL_GPIO_Init+0x2b0>)
 8006c5a:	68da      	ldr	r2, [r3, #12]
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	43db      	mvns	r3, r3
 8006c60:	4915      	ldr	r1, [pc, #84]	; (8006cb8 <HAL_GPIO_Init+0x2b0>)
 8006c62:	4013      	ands	r3, r2
 8006c64:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	3301      	adds	r3, #1
 8006c6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	fa22 f303 	lsr.w	r3, r2, r3
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f47f aed0 	bne.w	8006a1c <HAL_GPIO_Init+0x14>
  }
}
 8006c7c:	bf00      	nop
 8006c7e:	372c      	adds	r7, #44	; 0x2c
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bc80      	pop	{r7}
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop
 8006c88:	10210000 	.word	0x10210000
 8006c8c:	10110000 	.word	0x10110000
 8006c90:	10120000 	.word	0x10120000
 8006c94:	10310000 	.word	0x10310000
 8006c98:	10320000 	.word	0x10320000
 8006c9c:	10220000 	.word	0x10220000
 8006ca0:	40021000 	.word	0x40021000
 8006ca4:	40010000 	.word	0x40010000
 8006ca8:	40010800 	.word	0x40010800
 8006cac:	40010c00 	.word	0x40010c00
 8006cb0:	40011000 	.word	0x40011000
 8006cb4:	40011400 	.word	0x40011400
 8006cb8:	40010400 	.word	0x40010400

08006cbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	689a      	ldr	r2, [r3, #8]
 8006ccc:	887b      	ldrh	r3, [r7, #2]
 8006cce:	4013      	ands	r3, r2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d002      	beq.n	8006cda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	73fb      	strb	r3, [r7, #15]
 8006cd8:	e001      	b.n	8006cde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3714      	adds	r7, #20
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bc80      	pop	{r7}
 8006ce8:	4770      	bx	lr

08006cea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006cea:	b480      	push	{r7}
 8006cec:	b083      	sub	sp, #12
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
 8006cf2:	460b      	mov	r3, r1
 8006cf4:	807b      	strh	r3, [r7, #2]
 8006cf6:	4613      	mov	r3, r2
 8006cf8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006cfa:	787b      	ldrb	r3, [r7, #1]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d003      	beq.n	8006d08 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d00:	887a      	ldrh	r2, [r7, #2]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8006d06:	e003      	b.n	8006d10 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006d08:	887b      	ldrh	r3, [r7, #2]
 8006d0a:	041a      	lsls	r2, r3, #16
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	611a      	str	r2, [r3, #16]
}
 8006d10:	bf00      	nop
 8006d12:	370c      	adds	r7, #12
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bc80      	pop	{r7}
 8006d18:	4770      	bx	lr

08006d1a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	460b      	mov	r3, r1
 8006d24:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68da      	ldr	r2, [r3, #12]
 8006d2a:	887b      	ldrh	r3, [r7, #2]
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d003      	beq.n	8006d3a <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006d32:	887a      	ldrh	r2, [r7, #2]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8006d38:	e002      	b.n	8006d40 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006d3a:	887a      	ldrh	r2, [r7, #2]
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	611a      	str	r2, [r3, #16]
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bc80      	pop	{r7}
 8006d48:	4770      	bx	lr
	...

08006d4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	4603      	mov	r3, r0
 8006d54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006d56:	4b08      	ldr	r3, [pc, #32]	; (8006d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d58:	695a      	ldr	r2, [r3, #20]
 8006d5a:	88fb      	ldrh	r3, [r7, #6]
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d006      	beq.n	8006d70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006d62:	4a05      	ldr	r2, [pc, #20]	; (8006d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006d64:	88fb      	ldrh	r3, [r7, #6]
 8006d66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006d68:	88fb      	ldrh	r3, [r7, #6]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f000 f806 	bl	8006d7c <HAL_GPIO_EXTI_Callback>
  }
}
 8006d70:	bf00      	nop
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	40010400 	.word	0x40010400

08006d7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b083      	sub	sp, #12
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	4603      	mov	r3, r0
 8006d84:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8006d86:	bf00      	nop
 8006d88:	370c      	adds	r7, #12
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bc80      	pop	{r7}
 8006d8e:	4770      	bx	lr

08006d90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e10f      	b.n	8006fc2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d106      	bne.n	8006dbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f7fc fd9c 	bl	80038f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2224      	movs	r2, #36	; 0x24
 8006dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f022 0201 	bic.w	r2, r2, #1
 8006dd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006dd4:	f001 fc62 	bl	800869c <HAL_RCC_GetPCLK1Freq>
 8006dd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	4a7b      	ldr	r2, [pc, #492]	; (8006fcc <HAL_I2C_Init+0x23c>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d807      	bhi.n	8006df4 <HAL_I2C_Init+0x64>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4a7a      	ldr	r2, [pc, #488]	; (8006fd0 <HAL_I2C_Init+0x240>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	bf94      	ite	ls
 8006dec:	2301      	movls	r3, #1
 8006dee:	2300      	movhi	r3, #0
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	e006      	b.n	8006e02 <HAL_I2C_Init+0x72>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4a77      	ldr	r2, [pc, #476]	; (8006fd4 <HAL_I2C_Init+0x244>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	bf94      	ite	ls
 8006dfc:	2301      	movls	r3, #1
 8006dfe:	2300      	movhi	r3, #0
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e0db      	b.n	8006fc2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	4a72      	ldr	r2, [pc, #456]	; (8006fd8 <HAL_I2C_Init+0x248>)
 8006e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e12:	0c9b      	lsrs	r3, r3, #18
 8006e14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	6a1b      	ldr	r3, [r3, #32]
 8006e30:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	4a64      	ldr	r2, [pc, #400]	; (8006fcc <HAL_I2C_Init+0x23c>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d802      	bhi.n	8006e44 <HAL_I2C_Init+0xb4>
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	3301      	adds	r3, #1
 8006e42:	e009      	b.n	8006e58 <HAL_I2C_Init+0xc8>
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006e4a:	fb02 f303 	mul.w	r3, r2, r3
 8006e4e:	4a63      	ldr	r2, [pc, #396]	; (8006fdc <HAL_I2C_Init+0x24c>)
 8006e50:	fba2 2303 	umull	r2, r3, r2, r3
 8006e54:	099b      	lsrs	r3, r3, #6
 8006e56:	3301      	adds	r3, #1
 8006e58:	687a      	ldr	r2, [r7, #4]
 8006e5a:	6812      	ldr	r2, [r2, #0]
 8006e5c:	430b      	orrs	r3, r1
 8006e5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	69db      	ldr	r3, [r3, #28]
 8006e66:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006e6a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	4956      	ldr	r1, [pc, #344]	; (8006fcc <HAL_I2C_Init+0x23c>)
 8006e74:	428b      	cmp	r3, r1
 8006e76:	d80d      	bhi.n	8006e94 <HAL_I2C_Init+0x104>
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	1e59      	subs	r1, r3, #1
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	005b      	lsls	r3, r3, #1
 8006e82:	fbb1 f3f3 	udiv	r3, r1, r3
 8006e86:	3301      	adds	r3, #1
 8006e88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e8c:	2b04      	cmp	r3, #4
 8006e8e:	bf38      	it	cc
 8006e90:	2304      	movcc	r3, #4
 8006e92:	e04f      	b.n	8006f34 <HAL_I2C_Init+0x1a4>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d111      	bne.n	8006ec0 <HAL_I2C_Init+0x130>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	1e58      	subs	r0, r3, #1
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6859      	ldr	r1, [r3, #4]
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	005b      	lsls	r3, r3, #1
 8006ea8:	440b      	add	r3, r1
 8006eaa:	fbb0 f3f3 	udiv	r3, r0, r3
 8006eae:	3301      	adds	r3, #1
 8006eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	bf0c      	ite	eq
 8006eb8:	2301      	moveq	r3, #1
 8006eba:	2300      	movne	r3, #0
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	e012      	b.n	8006ee6 <HAL_I2C_Init+0x156>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	1e58      	subs	r0, r3, #1
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6859      	ldr	r1, [r3, #4]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	440b      	add	r3, r1
 8006ece:	0099      	lsls	r1, r3, #2
 8006ed0:	440b      	add	r3, r1
 8006ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ed6:	3301      	adds	r3, #1
 8006ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	bf0c      	ite	eq
 8006ee0:	2301      	moveq	r3, #1
 8006ee2:	2300      	movne	r3, #0
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d001      	beq.n	8006eee <HAL_I2C_Init+0x15e>
 8006eea:	2301      	movs	r3, #1
 8006eec:	e022      	b.n	8006f34 <HAL_I2C_Init+0x1a4>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10e      	bne.n	8006f14 <HAL_I2C_Init+0x184>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	1e58      	subs	r0, r3, #1
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6859      	ldr	r1, [r3, #4]
 8006efe:	460b      	mov	r3, r1
 8006f00:	005b      	lsls	r3, r3, #1
 8006f02:	440b      	add	r3, r1
 8006f04:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f08:	3301      	adds	r3, #1
 8006f0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f12:	e00f      	b.n	8006f34 <HAL_I2C_Init+0x1a4>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	1e58      	subs	r0, r3, #1
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6859      	ldr	r1, [r3, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	440b      	add	r3, r1
 8006f22:	0099      	lsls	r1, r3, #2
 8006f24:	440b      	add	r3, r1
 8006f26:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f34:	6879      	ldr	r1, [r7, #4]
 8006f36:	6809      	ldr	r1, [r1, #0]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	69da      	ldr	r2, [r3, #28]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a1b      	ldr	r3, [r3, #32]
 8006f4e:	431a      	orrs	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	430a      	orrs	r2, r1
 8006f56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006f62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	6911      	ldr	r1, [r2, #16]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	68d2      	ldr	r2, [r2, #12]
 8006f6e:	4311      	orrs	r1, r2
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	6812      	ldr	r2, [r2, #0]
 8006f74:	430b      	orrs	r3, r1
 8006f76:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	695a      	ldr	r2, [r3, #20]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	430a      	orrs	r2, r1
 8006f92:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0201 	orr.w	r2, r2, #1
 8006fa2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2220      	movs	r2, #32
 8006fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3710      	adds	r7, #16
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	000186a0 	.word	0x000186a0
 8006fd0:	001e847f 	.word	0x001e847f
 8006fd4:	003d08ff 	.word	0x003d08ff
 8006fd8:	431bde83 	.word	0x431bde83
 8006fdc:	10624dd3 	.word	0x10624dd3

08006fe0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b088      	sub	sp, #32
 8006fe4:	af02      	add	r7, sp, #8
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	4608      	mov	r0, r1
 8006fea:	4611      	mov	r1, r2
 8006fec:	461a      	mov	r2, r3
 8006fee:	4603      	mov	r3, r0
 8006ff0:	817b      	strh	r3, [r7, #10]
 8006ff2:	460b      	mov	r3, r1
 8006ff4:	813b      	strh	r3, [r7, #8]
 8006ff6:	4613      	mov	r3, r2
 8006ff8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ffa:	f7ff f967 	bl	80062cc <HAL_GetTick>
 8006ffe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007006:	b2db      	uxtb	r3, r3
 8007008:	2b20      	cmp	r3, #32
 800700a:	f040 80d9 	bne.w	80071c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	2319      	movs	r3, #25
 8007014:	2201      	movs	r2, #1
 8007016:	496d      	ldr	r1, [pc, #436]	; (80071cc <HAL_I2C_Mem_Write+0x1ec>)
 8007018:	68f8      	ldr	r0, [r7, #12]
 800701a:	f000 fd8d 	bl	8007b38 <I2C_WaitOnFlagUntilTimeout>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d001      	beq.n	8007028 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007024:	2302      	movs	r3, #2
 8007026:	e0cc      	b.n	80071c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800702e:	2b01      	cmp	r3, #1
 8007030:	d101      	bne.n	8007036 <HAL_I2C_Mem_Write+0x56>
 8007032:	2302      	movs	r3, #2
 8007034:	e0c5      	b.n	80071c2 <HAL_I2C_Mem_Write+0x1e2>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0301 	and.w	r3, r3, #1
 8007048:	2b01      	cmp	r3, #1
 800704a:	d007      	beq.n	800705c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f042 0201 	orr.w	r2, r2, #1
 800705a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800706a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2221      	movs	r2, #33	; 0x21
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2240      	movs	r2, #64	; 0x40
 8007078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6a3a      	ldr	r2, [r7, #32]
 8007086:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800708c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007092:	b29a      	uxth	r2, r3
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	4a4d      	ldr	r2, [pc, #308]	; (80071d0 <HAL_I2C_Mem_Write+0x1f0>)
 800709c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800709e:	88f8      	ldrh	r0, [r7, #6]
 80070a0:	893a      	ldrh	r2, [r7, #8]
 80070a2:	8979      	ldrh	r1, [r7, #10]
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	9301      	str	r3, [sp, #4]
 80070a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070aa:	9300      	str	r3, [sp, #0]
 80070ac:	4603      	mov	r3, r0
 80070ae:	68f8      	ldr	r0, [r7, #12]
 80070b0:	f000 fbe8 	bl	8007884 <I2C_RequestMemoryWrite>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d052      	beq.n	8007160 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e081      	b.n	80071c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f000 fe0e 	bl	8007ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00d      	beq.n	80070ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d2:	2b04      	cmp	r3, #4
 80070d4:	d107      	bne.n	80070e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	681a      	ldr	r2, [r3, #0]
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e06b      	b.n	80071c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ee:	781a      	ldrb	r2, [r3, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fa:	1c5a      	adds	r2, r3, #1
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007104:	3b01      	subs	r3, #1
 8007106:	b29a      	uxth	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007110:	b29b      	uxth	r3, r3
 8007112:	3b01      	subs	r3, #1
 8007114:	b29a      	uxth	r2, r3
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	695b      	ldr	r3, [r3, #20]
 8007120:	f003 0304 	and.w	r3, r3, #4
 8007124:	2b04      	cmp	r3, #4
 8007126:	d11b      	bne.n	8007160 <HAL_I2C_Mem_Write+0x180>
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800712c:	2b00      	cmp	r3, #0
 800712e:	d017      	beq.n	8007160 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007134:	781a      	ldrb	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007140:	1c5a      	adds	r2, r3, #1
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800714a:	3b01      	subs	r3, #1
 800714c:	b29a      	uxth	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007156:	b29b      	uxth	r3, r3
 8007158:	3b01      	subs	r3, #1
 800715a:	b29a      	uxth	r2, r3
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007164:	2b00      	cmp	r3, #0
 8007166:	d1aa      	bne.n	80070be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007168:	697a      	ldr	r2, [r7, #20]
 800716a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 fdfa 	bl	8007d66 <I2C_WaitOnBTFFlagUntilTimeout>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00d      	beq.n	8007194 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800717c:	2b04      	cmp	r3, #4
 800717e:	d107      	bne.n	8007190 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	681a      	ldr	r2, [r3, #0]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800718e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007190:	2301      	movs	r3, #1
 8007192:	e016      	b.n	80071c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2220      	movs	r2, #32
 80071a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	2200      	movs	r2, #0
 80071b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	2200      	movs	r2, #0
 80071b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80071bc:	2300      	movs	r3, #0
 80071be:	e000      	b.n	80071c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80071c0:	2302      	movs	r3, #2
  }
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3718      	adds	r7, #24
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	00100002 	.word	0x00100002
 80071d0:	ffff0000 	.word	0xffff0000

080071d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b08c      	sub	sp, #48	; 0x30
 80071d8:	af02      	add	r7, sp, #8
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	4608      	mov	r0, r1
 80071de:	4611      	mov	r1, r2
 80071e0:	461a      	mov	r2, r3
 80071e2:	4603      	mov	r3, r0
 80071e4:	817b      	strh	r3, [r7, #10]
 80071e6:	460b      	mov	r3, r1
 80071e8:	813b      	strh	r3, [r7, #8]
 80071ea:	4613      	mov	r3, r2
 80071ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80071ee:	f7ff f86d 	bl	80062cc <HAL_GetTick>
 80071f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b20      	cmp	r3, #32
 80071fe:	f040 8218 	bne.w	8007632 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007204:	9300      	str	r3, [sp, #0]
 8007206:	2319      	movs	r3, #25
 8007208:	2201      	movs	r2, #1
 800720a:	4981      	ldr	r1, [pc, #516]	; (8007410 <HAL_I2C_Mem_Read+0x23c>)
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f000 fc93 	bl	8007b38 <I2C_WaitOnFlagUntilTimeout>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	d001      	beq.n	800721c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007218:	2302      	movs	r3, #2
 800721a:	e20b      	b.n	8007634 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007222:	2b01      	cmp	r3, #1
 8007224:	d101      	bne.n	800722a <HAL_I2C_Mem_Read+0x56>
 8007226:	2302      	movs	r3, #2
 8007228:	e204      	b.n	8007634 <HAL_I2C_Mem_Read+0x460>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2201      	movs	r2, #1
 800722e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f003 0301 	and.w	r3, r3, #1
 800723c:	2b01      	cmp	r3, #1
 800723e:	d007      	beq.n	8007250 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f042 0201 	orr.w	r2, r2, #1
 800724e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	681a      	ldr	r2, [r3, #0]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800725e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2222      	movs	r2, #34	; 0x22
 8007264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2240      	movs	r2, #64	; 0x40
 800726c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2200      	movs	r2, #0
 8007274:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800727a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007280:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007286:	b29a      	uxth	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	4a61      	ldr	r2, [pc, #388]	; (8007414 <HAL_I2C_Mem_Read+0x240>)
 8007290:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007292:	88f8      	ldrh	r0, [r7, #6]
 8007294:	893a      	ldrh	r2, [r7, #8]
 8007296:	8979      	ldrh	r1, [r7, #10]
 8007298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729a:	9301      	str	r3, [sp, #4]
 800729c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	4603      	mov	r3, r0
 80072a2:	68f8      	ldr	r0, [r7, #12]
 80072a4:	f000 fb78 	bl	8007998 <I2C_RequestMemoryRead>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d001      	beq.n	80072b2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e1c0      	b.n	8007634 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d113      	bne.n	80072e2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072ba:	2300      	movs	r3, #0
 80072bc:	623b      	str	r3, [r7, #32]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	695b      	ldr	r3, [r3, #20]
 80072c4:	623b      	str	r3, [r7, #32]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	699b      	ldr	r3, [r3, #24]
 80072cc:	623b      	str	r3, [r7, #32]
 80072ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072de:	601a      	str	r2, [r3, #0]
 80072e0:	e194      	b.n	800760c <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d11d      	bne.n	8007326 <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072f8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80072fa:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072fc:	2300      	movs	r3, #0
 80072fe:	61fb      	str	r3, [r7, #28]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	695b      	ldr	r3, [r3, #20]
 8007306:	61fb      	str	r3, [r7, #28]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	699b      	ldr	r3, [r3, #24]
 800730e:	61fb      	str	r3, [r7, #28]
 8007310:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007320:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007322:	b662      	cpsie	i
 8007324:	e172      	b.n	800760c <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800732a:	2b02      	cmp	r3, #2
 800732c:	d11d      	bne.n	800736a <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800733c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800733e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007340:	2300      	movs	r3, #0
 8007342:	61bb      	str	r3, [r7, #24]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	61bb      	str	r3, [r7, #24]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	699b      	ldr	r3, [r3, #24]
 8007352:	61bb      	str	r3, [r7, #24]
 8007354:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007364:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007366:	b662      	cpsie	i
 8007368:	e150      	b.n	800760c <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007378:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800737a:	2300      	movs	r3, #0
 800737c:	617b      	str	r3, [r7, #20]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	695b      	ldr	r3, [r3, #20]
 8007384:	617b      	str	r3, [r7, #20]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	617b      	str	r3, [r7, #20]
 800738e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007390:	e13c      	b.n	800760c <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007396:	2b03      	cmp	r3, #3
 8007398:	f200 80f5 	bhi.w	8007586 <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d123      	bne.n	80073ec <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 fd1d 	bl	8007de8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d001      	beq.n	80073b8 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 80073b4:	2301      	movs	r3, #1
 80073b6:	e13d      	b.n	8007634 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	691a      	ldr	r2, [r3, #16]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c2:	b2d2      	uxtb	r2, r2
 80073c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ca:	1c5a      	adds	r2, r3, #1
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073d4:	3b01      	subs	r3, #1
 80073d6:	b29a      	uxth	r2, r3
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	3b01      	subs	r3, #1
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80073ea:	e10f      	b.n	800760c <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073f0:	2b02      	cmp	r3, #2
 80073f2:	d150      	bne.n	8007496 <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	9300      	str	r3, [sp, #0]
 80073f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fa:	2200      	movs	r2, #0
 80073fc:	4906      	ldr	r1, [pc, #24]	; (8007418 <HAL_I2C_Mem_Read+0x244>)
 80073fe:	68f8      	ldr	r0, [r7, #12]
 8007400:	f000 fb9a 	bl	8007b38 <I2C_WaitOnFlagUntilTimeout>
 8007404:	4603      	mov	r3, r0
 8007406:	2b00      	cmp	r3, #0
 8007408:	d008      	beq.n	800741c <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e112      	b.n	8007634 <HAL_I2C_Mem_Read+0x460>
 800740e:	bf00      	nop
 8007410:	00100002 	.word	0x00100002
 8007414:	ffff0000 	.word	0xffff0000
 8007418:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800741c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	681a      	ldr	r2, [r3, #0]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800742c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	691a      	ldr	r2, [r3, #16]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007438:	b2d2      	uxtb	r2, r2
 800743a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007440:	1c5a      	adds	r2, r3, #1
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800744a:	3b01      	subs	r3, #1
 800744c:	b29a      	uxth	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007456:	b29b      	uxth	r3, r3
 8007458:	3b01      	subs	r3, #1
 800745a:	b29a      	uxth	r2, r3
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007460:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	691a      	ldr	r2, [r3, #16]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746c:	b2d2      	uxtb	r2, r2
 800746e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007474:	1c5a      	adds	r2, r3, #1
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800747e:	3b01      	subs	r3, #1
 8007480:	b29a      	uxth	r2, r3
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800748a:	b29b      	uxth	r3, r3
 800748c:	3b01      	subs	r3, #1
 800748e:	b29a      	uxth	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007494:	e0ba      	b.n	800760c <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749c:	2200      	movs	r2, #0
 800749e:	4967      	ldr	r1, [pc, #412]	; (800763c <HAL_I2C_Mem_Read+0x468>)
 80074a0:	68f8      	ldr	r0, [r7, #12]
 80074a2:	f000 fb49 	bl	8007b38 <I2C_WaitOnFlagUntilTimeout>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d001      	beq.n	80074b0 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 80074ac:	2301      	movs	r3, #1
 80074ae:	e0c1      	b.n	8007634 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80074c0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	691a      	ldr	r2, [r3, #16]
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074cc:	b2d2      	uxtb	r2, r2
 80074ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d4:	1c5a      	adds	r2, r3, #1
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074de:	3b01      	subs	r3, #1
 80074e0:	b29a      	uxth	r2, r3
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	3b01      	subs	r3, #1
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fa:	2200      	movs	r2, #0
 80074fc:	494f      	ldr	r1, [pc, #316]	; (800763c <HAL_I2C_Mem_Read+0x468>)
 80074fe:	68f8      	ldr	r0, [r7, #12]
 8007500:	f000 fb1a 	bl	8007b38 <I2C_WaitOnFlagUntilTimeout>
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d001      	beq.n	800750e <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e092      	b.n	8007634 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	681a      	ldr	r2, [r3, #0]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800751c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	691a      	ldr	r2, [r3, #16]
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007528:	b2d2      	uxtb	r2, r2
 800752a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007530:	1c5a      	adds	r2, r3, #1
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800753a:	3b01      	subs	r3, #1
 800753c:	b29a      	uxth	r2, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007546:	b29b      	uxth	r3, r3
 8007548:	3b01      	subs	r3, #1
 800754a:	b29a      	uxth	r2, r3
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007550:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	691a      	ldr	r2, [r3, #16]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755c:	b2d2      	uxtb	r2, r2
 800755e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	1c5a      	adds	r2, r3, #1
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800756e:	3b01      	subs	r3, #1
 8007570:	b29a      	uxth	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800757a:	b29b      	uxth	r3, r3
 800757c:	3b01      	subs	r3, #1
 800757e:	b29a      	uxth	r2, r3
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007584:	e042      	b.n	800760c <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007586:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007588:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800758a:	68f8      	ldr	r0, [r7, #12]
 800758c:	f000 fc2c 	bl	8007de8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d001      	beq.n	800759a <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e04c      	b.n	8007634 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	691a      	ldr	r2, [r3, #16]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	b2d2      	uxtb	r2, r2
 80075a6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ac:	1c5a      	adds	r2, r3, #1
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075b6:	3b01      	subs	r3, #1
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	3b01      	subs	r3, #1
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	f003 0304 	and.w	r3, r3, #4
 80075d6:	2b04      	cmp	r3, #4
 80075d8:	d118      	bne.n	800760c <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	691a      	ldr	r2, [r3, #16]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e4:	b2d2      	uxtb	r2, r2
 80075e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ec:	1c5a      	adds	r2, r3, #1
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075f6:	3b01      	subs	r3, #1
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007602:	b29b      	uxth	r3, r3
 8007604:	3b01      	subs	r3, #1
 8007606:	b29a      	uxth	r2, r3
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007610:	2b00      	cmp	r3, #0
 8007612:	f47f aebe 	bne.w	8007392 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2220      	movs	r2, #32
 800761a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	e000      	b.n	8007634 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8007632:	2302      	movs	r3, #2
  }
}
 8007634:	4618      	mov	r0, r3
 8007636:	3728      	adds	r7, #40	; 0x28
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	00010004 	.word	0x00010004

08007640 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b08a      	sub	sp, #40	; 0x28
 8007644:	af02      	add	r7, sp, #8
 8007646:	60f8      	str	r0, [r7, #12]
 8007648:	607a      	str	r2, [r7, #4]
 800764a:	603b      	str	r3, [r7, #0]
 800764c:	460b      	mov	r3, r1
 800764e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8007650:	f7fe fe3c 	bl	80062cc <HAL_GetTick>
 8007654:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8007656:	2301      	movs	r3, #1
 8007658:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007660:	b2db      	uxtb	r3, r3
 8007662:	2b20      	cmp	r3, #32
 8007664:	f040 8105 	bne.w	8007872 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	2319      	movs	r3, #25
 800766e:	2201      	movs	r2, #1
 8007670:	4982      	ldr	r1, [pc, #520]	; (800787c <HAL_I2C_IsDeviceReady+0x23c>)
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f000 fa60 	bl	8007b38 <I2C_WaitOnFlagUntilTimeout>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d001      	beq.n	8007682 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800767e:	2302      	movs	r3, #2
 8007680:	e0f8      	b.n	8007874 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007688:	2b01      	cmp	r3, #1
 800768a:	d101      	bne.n	8007690 <HAL_I2C_IsDeviceReady+0x50>
 800768c:	2302      	movs	r3, #2
 800768e:	e0f1      	b.n	8007874 <HAL_I2C_IsDeviceReady+0x234>
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2201      	movs	r2, #1
 8007694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f003 0301 	and.w	r3, r3, #1
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d007      	beq.n	80076b6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f042 0201 	orr.w	r2, r2, #1
 80076b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	2224      	movs	r2, #36	; 0x24
 80076ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	4a6a      	ldr	r2, [pc, #424]	; (8007880 <HAL_I2C_IsDeviceReady+0x240>)
 80076d8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076e8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f000 fa1e 	bl	8007b38 <I2C_WaitOnFlagUntilTimeout>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d001      	beq.n	8007706 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e0b6      	b.n	8007874 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007706:	897b      	ldrh	r3, [r7, #10]
 8007708:	b2db      	uxtb	r3, r3
 800770a:	461a      	mov	r2, r3
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007714:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8007716:	f7fe fdd9 	bl	80062cc <HAL_GetTick>
 800771a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	f003 0302 	and.w	r3, r3, #2
 8007726:	2b02      	cmp	r3, #2
 8007728:	bf0c      	ite	eq
 800772a:	2301      	moveq	r3, #1
 800772c:	2300      	movne	r3, #0
 800772e:	b2db      	uxtb	r3, r3
 8007730:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	695b      	ldr	r3, [r3, #20]
 8007738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800773c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007740:	bf0c      	ite	eq
 8007742:	2301      	moveq	r3, #1
 8007744:	2300      	movne	r3, #0
 8007746:	b2db      	uxtb	r3, r3
 8007748:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800774a:	e025      	b.n	8007798 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800774c:	f7fe fdbe 	bl	80062cc <HAL_GetTick>
 8007750:	4602      	mov	r2, r0
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	1ad3      	subs	r3, r2, r3
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	429a      	cmp	r2, r3
 800775a:	d302      	bcc.n	8007762 <HAL_I2C_IsDeviceReady+0x122>
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d103      	bne.n	800776a <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	22a0      	movs	r2, #160	; 0xa0
 8007766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	695b      	ldr	r3, [r3, #20]
 8007770:	f003 0302 	and.w	r3, r3, #2
 8007774:	2b02      	cmp	r3, #2
 8007776:	bf0c      	ite	eq
 8007778:	2301      	moveq	r3, #1
 800777a:	2300      	movne	r3, #0
 800777c:	b2db      	uxtb	r3, r3
 800777e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800778a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800778e:	bf0c      	ite	eq
 8007790:	2301      	moveq	r3, #1
 8007792:	2300      	movne	r3, #0
 8007794:	b2db      	uxtb	r3, r3
 8007796:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800779e:	b2db      	uxtb	r3, r3
 80077a0:	2ba0      	cmp	r3, #160	; 0xa0
 80077a2:	d005      	beq.n	80077b0 <HAL_I2C_IsDeviceReady+0x170>
 80077a4:	7dfb      	ldrb	r3, [r7, #23]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d102      	bne.n	80077b0 <HAL_I2C_IsDeviceReady+0x170>
 80077aa:	7dbb      	ldrb	r3, [r7, #22]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d0cd      	beq.n	800774c <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2220      	movs	r2, #32
 80077b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	695b      	ldr	r3, [r3, #20]
 80077be:	f003 0302 	and.w	r3, r3, #2
 80077c2:	2b02      	cmp	r3, #2
 80077c4:	d129      	bne.n	800781a <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077d4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077d6:	2300      	movs	r3, #0
 80077d8:	613b      	str	r3, [r7, #16]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	695b      	ldr	r3, [r3, #20]
 80077e0:	613b      	str	r3, [r7, #16]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	699b      	ldr	r3, [r3, #24]
 80077e8:	613b      	str	r3, [r7, #16]
 80077ea:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	9300      	str	r3, [sp, #0]
 80077f0:	2319      	movs	r3, #25
 80077f2:	2201      	movs	r2, #1
 80077f4:	4921      	ldr	r1, [pc, #132]	; (800787c <HAL_I2C_IsDeviceReady+0x23c>)
 80077f6:	68f8      	ldr	r0, [r7, #12]
 80077f8:	f000 f99e 	bl	8007b38 <I2C_WaitOnFlagUntilTimeout>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d001      	beq.n	8007806 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e036      	b.n	8007874 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2220      	movs	r2, #32
 800780a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2200      	movs	r2, #0
 8007812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8007816:	2300      	movs	r3, #0
 8007818:	e02c      	b.n	8007874 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007828:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007832:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	9300      	str	r3, [sp, #0]
 8007838:	2319      	movs	r3, #25
 800783a:	2201      	movs	r2, #1
 800783c:	490f      	ldr	r1, [pc, #60]	; (800787c <HAL_I2C_IsDeviceReady+0x23c>)
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f000 f97a 	bl	8007b38 <I2C_WaitOnFlagUntilTimeout>
 8007844:	4603      	mov	r3, r0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d001      	beq.n	800784e <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e012      	b.n	8007874 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	3301      	adds	r3, #1
 8007852:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8007854:	69ba      	ldr	r2, [r7, #24]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	429a      	cmp	r2, r3
 800785a:	f4ff af3e 	bcc.w	80076da <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2220      	movs	r2, #32
 8007862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e000      	b.n	8007874 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8007872:	2302      	movs	r3, #2
  }
}
 8007874:	4618      	mov	r0, r3
 8007876:	3720      	adds	r7, #32
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}
 800787c:	00100002 	.word	0x00100002
 8007880:	ffff0000 	.word	0xffff0000

08007884 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b088      	sub	sp, #32
 8007888:	af02      	add	r7, sp, #8
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	4608      	mov	r0, r1
 800788e:	4611      	mov	r1, r2
 8007890:	461a      	mov	r2, r3
 8007892:	4603      	mov	r3, r0
 8007894:	817b      	strh	r3, [r7, #10]
 8007896:	460b      	mov	r3, r1
 8007898:	813b      	strh	r3, [r7, #8]
 800789a:	4613      	mov	r3, r2
 800789c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	6a3b      	ldr	r3, [r7, #32]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 f93c 	bl	8007b38 <I2C_WaitOnFlagUntilTimeout>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e05f      	b.n	800798a <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80078ca:	897b      	ldrh	r3, [r7, #10]
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	461a      	mov	r2, r3
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80078d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	6a3a      	ldr	r2, [r7, #32]
 80078de:	492d      	ldr	r1, [pc, #180]	; (8007994 <I2C_RequestMemoryWrite+0x110>)
 80078e0:	68f8      	ldr	r0, [r7, #12]
 80078e2:	f000 f980 	bl	8007be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d001      	beq.n	80078f0 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	e04c      	b.n	800798a <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078f0:	2300      	movs	r3, #0
 80078f2:	617b      	str	r3, [r7, #20]
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	617b      	str	r3, [r7, #20]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	699b      	ldr	r3, [r3, #24]
 8007902:	617b      	str	r3, [r7, #20]
 8007904:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007908:	6a39      	ldr	r1, [r7, #32]
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f000 f9ea 	bl	8007ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00d      	beq.n	8007932 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800791a:	2b04      	cmp	r3, #4
 800791c:	d107      	bne.n	800792e <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800792c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e02b      	b.n	800798a <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007932:	88fb      	ldrh	r3, [r7, #6]
 8007934:	2b01      	cmp	r3, #1
 8007936:	d105      	bne.n	8007944 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007938:	893b      	ldrh	r3, [r7, #8]
 800793a:	b2da      	uxtb	r2, r3
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	611a      	str	r2, [r3, #16]
 8007942:	e021      	b.n	8007988 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007944:	893b      	ldrh	r3, [r7, #8]
 8007946:	0a1b      	lsrs	r3, r3, #8
 8007948:	b29b      	uxth	r3, r3
 800794a:	b2da      	uxtb	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007954:	6a39      	ldr	r1, [r7, #32]
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f000 f9c4 	bl	8007ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00d      	beq.n	800797e <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007966:	2b04      	cmp	r3, #4
 8007968:	d107      	bne.n	800797a <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007978:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e005      	b.n	800798a <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800797e:	893b      	ldrh	r3, [r7, #8]
 8007980:	b2da      	uxtb	r2, r3
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3718      	adds	r7, #24
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	00010002 	.word	0x00010002

08007998 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b088      	sub	sp, #32
 800799c:	af02      	add	r7, sp, #8
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	4608      	mov	r0, r1
 80079a2:	4611      	mov	r1, r2
 80079a4:	461a      	mov	r2, r3
 80079a6:	4603      	mov	r3, r0
 80079a8:	817b      	strh	r3, [r7, #10]
 80079aa:	460b      	mov	r3, r1
 80079ac:	813b      	strh	r3, [r7, #8]
 80079ae:	4613      	mov	r3, r2
 80079b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80079d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	2200      	movs	r2, #0
 80079da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f000 f8aa 	bl	8007b38 <I2C_WaitOnFlagUntilTimeout>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e09e      	b.n	8007b2c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80079ee:	897b      	ldrh	r3, [r7, #10]
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	461a      	mov	r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80079fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80079fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a00:	6a3a      	ldr	r2, [r7, #32]
 8007a02:	494c      	ldr	r1, [pc, #304]	; (8007b34 <I2C_RequestMemoryRead+0x19c>)
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f000 f8ee 	bl	8007be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d001      	beq.n	8007a14 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8007a10:	2301      	movs	r3, #1
 8007a12:	e08b      	b.n	8007b2c <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007a14:	2300      	movs	r3, #0
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	617b      	str	r3, [r7, #20]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	617b      	str	r3, [r7, #20]
 8007a28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a2c:	6a39      	ldr	r1, [r7, #32]
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f000 f958 	bl	8007ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d00d      	beq.n	8007a56 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3e:	2b04      	cmp	r3, #4
 8007a40:	d107      	bne.n	8007a52 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007a52:	2301      	movs	r3, #1
 8007a54:	e06a      	b.n	8007b2c <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a56:	88fb      	ldrh	r3, [r7, #6]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d105      	bne.n	8007a68 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007a5c:	893b      	ldrh	r3, [r7, #8]
 8007a5e:	b2da      	uxtb	r2, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	611a      	str	r2, [r3, #16]
 8007a66:	e021      	b.n	8007aac <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007a68:	893b      	ldrh	r3, [r7, #8]
 8007a6a:	0a1b      	lsrs	r3, r3, #8
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a78:	6a39      	ldr	r1, [r7, #32]
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 f932 	bl	8007ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d00d      	beq.n	8007aa2 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8a:	2b04      	cmp	r3, #4
 8007a8c:	d107      	bne.n	8007a9e <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e044      	b.n	8007b2c <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007aa2:	893b      	ldrh	r3, [r7, #8]
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aae:	6a39      	ldr	r1, [r7, #32]
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 f917 	bl	8007ce4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00d      	beq.n	8007ad8 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac0:	2b04      	cmp	r3, #4
 8007ac2:	d107      	bne.n	8007ad4 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007ad2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e029      	b.n	8007b2c <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	681a      	ldr	r2, [r3, #0]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ae6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	9300      	str	r3, [sp, #0]
 8007aec:	6a3b      	ldr	r3, [r7, #32]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f000 f81f 	bl	8007b38 <I2C_WaitOnFlagUntilTimeout>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e013      	b.n	8007b2c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007b04:	897b      	ldrh	r3, [r7, #10]
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	f043 0301 	orr.w	r3, r3, #1
 8007b0c:	b2da      	uxtb	r2, r3
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b16:	6a3a      	ldr	r2, [r7, #32]
 8007b18:	4906      	ldr	r1, [pc, #24]	; (8007b34 <I2C_RequestMemoryRead+0x19c>)
 8007b1a:	68f8      	ldr	r0, [r7, #12]
 8007b1c:	f000 f863 	bl	8007be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d001      	beq.n	8007b2a <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8007b26:	2301      	movs	r3, #1
 8007b28:	e000      	b.n	8007b2c <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3718      	adds	r7, #24
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	00010002 	.word	0x00010002

08007b38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	603b      	str	r3, [r7, #0]
 8007b44:	4613      	mov	r3, r2
 8007b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b48:	e025      	b.n	8007b96 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b50:	d021      	beq.n	8007b96 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b52:	f7fe fbbb 	bl	80062cc <HAL_GetTick>
 8007b56:	4602      	mov	r2, r0
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d302      	bcc.n	8007b68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d116      	bne.n	8007b96 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2220      	movs	r2, #32
 8007b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b82:	f043 0220 	orr.w	r2, r3, #32
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e023      	b.n	8007bde <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	0c1b      	lsrs	r3, r3, #16
 8007b9a:	b2db      	uxtb	r3, r3
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d10d      	bne.n	8007bbc <I2C_WaitOnFlagUntilTimeout+0x84>
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	695b      	ldr	r3, [r3, #20]
 8007ba6:	43da      	mvns	r2, r3
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	4013      	ands	r3, r2
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	bf0c      	ite	eq
 8007bb2:	2301      	moveq	r3, #1
 8007bb4:	2300      	movne	r3, #0
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	461a      	mov	r2, r3
 8007bba:	e00c      	b.n	8007bd6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	43da      	mvns	r2, r3
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	4013      	ands	r3, r2
 8007bc8:	b29b      	uxth	r3, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	bf0c      	ite	eq
 8007bce:	2301      	moveq	r3, #1
 8007bd0:	2300      	movne	r3, #0
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	79fb      	ldrb	r3, [r7, #7]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d0b6      	beq.n	8007b4a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3710      	adds	r7, #16
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b084      	sub	sp, #16
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	60f8      	str	r0, [r7, #12]
 8007bee:	60b9      	str	r1, [r7, #8]
 8007bf0:	607a      	str	r2, [r7, #4]
 8007bf2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007bf4:	e051      	b.n	8007c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	695b      	ldr	r3, [r3, #20]
 8007bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c04:	d123      	bne.n	8007c4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	681a      	ldr	r2, [r3, #0]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2200      	movs	r2, #0
 8007c24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2220      	movs	r2, #32
 8007c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c3a:	f043 0204 	orr.w	r2, r3, #4
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2200      	movs	r2, #0
 8007c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e046      	b.n	8007cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c54:	d021      	beq.n	8007c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c56:	f7fe fb39 	bl	80062cc <HAL_GetTick>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	1ad3      	subs	r3, r2, r3
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d302      	bcc.n	8007c6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d116      	bne.n	8007c9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2220      	movs	r2, #32
 8007c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c86:	f043 0220 	orr.w	r2, r3, #32
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e020      	b.n	8007cdc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	0c1b      	lsrs	r3, r3, #16
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	d10c      	bne.n	8007cbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	43da      	mvns	r2, r3
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	4013      	ands	r3, r2
 8007cb0:	b29b      	uxth	r3, r3
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	bf14      	ite	ne
 8007cb6:	2301      	movne	r3, #1
 8007cb8:	2300      	moveq	r3, #0
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	e00b      	b.n	8007cd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	699b      	ldr	r3, [r3, #24]
 8007cc4:	43da      	mvns	r2, r3
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	4013      	ands	r3, r2
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	bf14      	ite	ne
 8007cd0:	2301      	movne	r3, #1
 8007cd2:	2300      	moveq	r3, #0
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d18d      	bne.n	8007bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cf0:	e02d      	b.n	8007d4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007cf2:	68f8      	ldr	r0, [r7, #12]
 8007cf4:	f000 f8ce 	bl	8007e94 <I2C_IsAcknowledgeFailed>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d001      	beq.n	8007d02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e02d      	b.n	8007d5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d08:	d021      	beq.n	8007d4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d0a:	f7fe fadf 	bl	80062cc <HAL_GetTick>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d302      	bcc.n	8007d20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d116      	bne.n	8007d4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2200      	movs	r2, #0
 8007d24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2220      	movs	r2, #32
 8007d2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3a:	f043 0220 	orr.w	r2, r3, #32
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e007      	b.n	8007d5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	695b      	ldr	r3, [r3, #20]
 8007d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d58:	2b80      	cmp	r3, #128	; 0x80
 8007d5a:	d1ca      	bne.n	8007cf2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d5c:	2300      	movs	r3, #0
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3710      	adds	r7, #16
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}

08007d66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d66:	b580      	push	{r7, lr}
 8007d68:	b084      	sub	sp, #16
 8007d6a:	af00      	add	r7, sp, #0
 8007d6c:	60f8      	str	r0, [r7, #12]
 8007d6e:	60b9      	str	r1, [r7, #8]
 8007d70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d72:	e02d      	b.n	8007dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f000 f88d 	bl	8007e94 <I2C_IsAcknowledgeFailed>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e02d      	b.n	8007de0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d8a:	d021      	beq.n	8007dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d8c:	f7fe fa9e 	bl	80062cc <HAL_GetTick>
 8007d90:	4602      	mov	r2, r0
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	68ba      	ldr	r2, [r7, #8]
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d302      	bcc.n	8007da2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d116      	bne.n	8007dd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2220      	movs	r2, #32
 8007dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dbc:	f043 0220 	orr.w	r2, r3, #32
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	e007      	b.n	8007de0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	f003 0304 	and.w	r3, r3, #4
 8007dda:	2b04      	cmp	r3, #4
 8007ddc:	d1ca      	bne.n	8007d74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b084      	sub	sp, #16
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007df4:	e042      	b.n	8007e7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	f003 0310 	and.w	r3, r3, #16
 8007e00:	2b10      	cmp	r3, #16
 8007e02:	d119      	bne.n	8007e38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f06f 0210 	mvn.w	r2, #16
 8007e0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2200      	movs	r2, #0
 8007e12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2220      	movs	r2, #32
 8007e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	e029      	b.n	8007e8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e38:	f7fe fa48 	bl	80062cc <HAL_GetTick>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d302      	bcc.n	8007e4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d116      	bne.n	8007e7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2220      	movs	r2, #32
 8007e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e68:	f043 0220 	orr.w	r2, r3, #32
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007e78:	2301      	movs	r3, #1
 8007e7a:	e007      	b.n	8007e8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e86:	2b40      	cmp	r3, #64	; 0x40
 8007e88:	d1b5      	bne.n	8007df6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eaa:	d11b      	bne.n	8007ee4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007eb4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2220      	movs	r2, #32
 8007ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ed0:	f043 0204 	orr.w	r2, r3, #4
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	e000      	b.n	8007ee6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	370c      	adds	r7, #12
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bc80      	pop	{r7}
 8007eee:	4770      	bx	lr

08007ef0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b086      	sub	sp, #24
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d101      	bne.n	8007f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007efe:	2301      	movs	r3, #1
 8007f00:	e26c      	b.n	80083dc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f003 0301 	and.w	r3, r3, #1
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	f000 8087 	beq.w	800801e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007f10:	4b92      	ldr	r3, [pc, #584]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	f003 030c 	and.w	r3, r3, #12
 8007f18:	2b04      	cmp	r3, #4
 8007f1a:	d00c      	beq.n	8007f36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007f1c:	4b8f      	ldr	r3, [pc, #572]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	f003 030c 	and.w	r3, r3, #12
 8007f24:	2b08      	cmp	r3, #8
 8007f26:	d112      	bne.n	8007f4e <HAL_RCC_OscConfig+0x5e>
 8007f28:	4b8c      	ldr	r3, [pc, #560]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f34:	d10b      	bne.n	8007f4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f36:	4b89      	ldr	r3, [pc, #548]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d06c      	beq.n	800801c <HAL_RCC_OscConfig+0x12c>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d168      	bne.n	800801c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	e246      	b.n	80083dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f56:	d106      	bne.n	8007f66 <HAL_RCC_OscConfig+0x76>
 8007f58:	4b80      	ldr	r3, [pc, #512]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a7f      	ldr	r2, [pc, #508]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 8007f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f62:	6013      	str	r3, [r2, #0]
 8007f64:	e02e      	b.n	8007fc4 <HAL_RCC_OscConfig+0xd4>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10c      	bne.n	8007f88 <HAL_RCC_OscConfig+0x98>
 8007f6e:	4b7b      	ldr	r3, [pc, #492]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a7a      	ldr	r2, [pc, #488]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 8007f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f78:	6013      	str	r3, [r2, #0]
 8007f7a:	4b78      	ldr	r3, [pc, #480]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a77      	ldr	r2, [pc, #476]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 8007f80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f84:	6013      	str	r3, [r2, #0]
 8007f86:	e01d      	b.n	8007fc4 <HAL_RCC_OscConfig+0xd4>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f90:	d10c      	bne.n	8007fac <HAL_RCC_OscConfig+0xbc>
 8007f92:	4b72      	ldr	r3, [pc, #456]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a71      	ldr	r2, [pc, #452]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 8007f98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f9c:	6013      	str	r3, [r2, #0]
 8007f9e:	4b6f      	ldr	r3, [pc, #444]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4a6e      	ldr	r2, [pc, #440]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 8007fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fa8:	6013      	str	r3, [r2, #0]
 8007faa:	e00b      	b.n	8007fc4 <HAL_RCC_OscConfig+0xd4>
 8007fac:	4b6b      	ldr	r3, [pc, #428]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a6a      	ldr	r2, [pc, #424]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 8007fb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fb6:	6013      	str	r3, [r2, #0]
 8007fb8:	4b68      	ldr	r3, [pc, #416]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a67      	ldr	r2, [pc, #412]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 8007fbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007fc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d013      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fcc:	f7fe f97e 	bl	80062cc <HAL_GetTick>
 8007fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fd2:	e008      	b.n	8007fe6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007fd4:	f7fe f97a 	bl	80062cc <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	2b64      	cmp	r3, #100	; 0x64
 8007fe0:	d901      	bls.n	8007fe6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e1fa      	b.n	80083dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fe6:	4b5d      	ldr	r3, [pc, #372]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d0f0      	beq.n	8007fd4 <HAL_RCC_OscConfig+0xe4>
 8007ff2:	e014      	b.n	800801e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ff4:	f7fe f96a 	bl	80062cc <HAL_GetTick>
 8007ff8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ffa:	e008      	b.n	800800e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ffc:	f7fe f966 	bl	80062cc <HAL_GetTick>
 8008000:	4602      	mov	r2, r0
 8008002:	693b      	ldr	r3, [r7, #16]
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	2b64      	cmp	r3, #100	; 0x64
 8008008:	d901      	bls.n	800800e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800800a:	2303      	movs	r3, #3
 800800c:	e1e6      	b.n	80083dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800800e:	4b53      	ldr	r3, [pc, #332]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1f0      	bne.n	8007ffc <HAL_RCC_OscConfig+0x10c>
 800801a:	e000      	b.n	800801e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800801c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0302 	and.w	r3, r3, #2
 8008026:	2b00      	cmp	r3, #0
 8008028:	d063      	beq.n	80080f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800802a:	4b4c      	ldr	r3, [pc, #304]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	f003 030c 	and.w	r3, r3, #12
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00b      	beq.n	800804e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008036:	4b49      	ldr	r3, [pc, #292]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	f003 030c 	and.w	r3, r3, #12
 800803e:	2b08      	cmp	r3, #8
 8008040:	d11c      	bne.n	800807c <HAL_RCC_OscConfig+0x18c>
 8008042:	4b46      	ldr	r3, [pc, #280]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800804a:	2b00      	cmp	r3, #0
 800804c:	d116      	bne.n	800807c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800804e:	4b43      	ldr	r3, [pc, #268]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f003 0302 	and.w	r3, r3, #2
 8008056:	2b00      	cmp	r3, #0
 8008058:	d005      	beq.n	8008066 <HAL_RCC_OscConfig+0x176>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	2b01      	cmp	r3, #1
 8008060:	d001      	beq.n	8008066 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e1ba      	b.n	80083dc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008066:	4b3d      	ldr	r3, [pc, #244]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	695b      	ldr	r3, [r3, #20]
 8008072:	00db      	lsls	r3, r3, #3
 8008074:	4939      	ldr	r1, [pc, #228]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 8008076:	4313      	orrs	r3, r2
 8008078:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800807a:	e03a      	b.n	80080f2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d020      	beq.n	80080c6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008084:	4b36      	ldr	r3, [pc, #216]	; (8008160 <HAL_RCC_OscConfig+0x270>)
 8008086:	2201      	movs	r2, #1
 8008088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800808a:	f7fe f91f 	bl	80062cc <HAL_GetTick>
 800808e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008090:	e008      	b.n	80080a4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008092:	f7fe f91b 	bl	80062cc <HAL_GetTick>
 8008096:	4602      	mov	r2, r0
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	2b02      	cmp	r3, #2
 800809e:	d901      	bls.n	80080a4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e19b      	b.n	80083dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080a4:	4b2d      	ldr	r3, [pc, #180]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0302 	and.w	r3, r3, #2
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d0f0      	beq.n	8008092 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080b0:	4b2a      	ldr	r3, [pc, #168]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	695b      	ldr	r3, [r3, #20]
 80080bc:	00db      	lsls	r3, r3, #3
 80080be:	4927      	ldr	r1, [pc, #156]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 80080c0:	4313      	orrs	r3, r2
 80080c2:	600b      	str	r3, [r1, #0]
 80080c4:	e015      	b.n	80080f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80080c6:	4b26      	ldr	r3, [pc, #152]	; (8008160 <HAL_RCC_OscConfig+0x270>)
 80080c8:	2200      	movs	r2, #0
 80080ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080cc:	f7fe f8fe 	bl	80062cc <HAL_GetTick>
 80080d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080d2:	e008      	b.n	80080e6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080d4:	f7fe f8fa 	bl	80062cc <HAL_GetTick>
 80080d8:	4602      	mov	r2, r0
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d901      	bls.n	80080e6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80080e2:	2303      	movs	r3, #3
 80080e4:	e17a      	b.n	80083dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080e6:	4b1d      	ldr	r3, [pc, #116]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 0302 	and.w	r3, r3, #2
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d1f0      	bne.n	80080d4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f003 0308 	and.w	r3, r3, #8
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d03a      	beq.n	8008174 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d019      	beq.n	800813a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008106:	4b17      	ldr	r3, [pc, #92]	; (8008164 <HAL_RCC_OscConfig+0x274>)
 8008108:	2201      	movs	r2, #1
 800810a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800810c:	f7fe f8de 	bl	80062cc <HAL_GetTick>
 8008110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008112:	e008      	b.n	8008126 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008114:	f7fe f8da 	bl	80062cc <HAL_GetTick>
 8008118:	4602      	mov	r2, r0
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	1ad3      	subs	r3, r2, r3
 800811e:	2b02      	cmp	r3, #2
 8008120:	d901      	bls.n	8008126 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008122:	2303      	movs	r3, #3
 8008124:	e15a      	b.n	80083dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008126:	4b0d      	ldr	r3, [pc, #52]	; (800815c <HAL_RCC_OscConfig+0x26c>)
 8008128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812a:	f003 0302 	and.w	r3, r3, #2
 800812e:	2b00      	cmp	r3, #0
 8008130:	d0f0      	beq.n	8008114 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008132:	2001      	movs	r0, #1
 8008134:	f000 fada 	bl	80086ec <RCC_Delay>
 8008138:	e01c      	b.n	8008174 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800813a:	4b0a      	ldr	r3, [pc, #40]	; (8008164 <HAL_RCC_OscConfig+0x274>)
 800813c:	2200      	movs	r2, #0
 800813e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008140:	f7fe f8c4 	bl	80062cc <HAL_GetTick>
 8008144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008146:	e00f      	b.n	8008168 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008148:	f7fe f8c0 	bl	80062cc <HAL_GetTick>
 800814c:	4602      	mov	r2, r0
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	2b02      	cmp	r3, #2
 8008154:	d908      	bls.n	8008168 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e140      	b.n	80083dc <HAL_RCC_OscConfig+0x4ec>
 800815a:	bf00      	nop
 800815c:	40021000 	.word	0x40021000
 8008160:	42420000 	.word	0x42420000
 8008164:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008168:	4b9e      	ldr	r3, [pc, #632]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 800816a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816c:	f003 0302 	and.w	r3, r3, #2
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1e9      	bne.n	8008148 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 0304 	and.w	r3, r3, #4
 800817c:	2b00      	cmp	r3, #0
 800817e:	f000 80a6 	beq.w	80082ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008182:	2300      	movs	r3, #0
 8008184:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008186:	4b97      	ldr	r3, [pc, #604]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 8008188:	69db      	ldr	r3, [r3, #28]
 800818a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800818e:	2b00      	cmp	r3, #0
 8008190:	d10d      	bne.n	80081ae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008192:	4b94      	ldr	r3, [pc, #592]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	4a93      	ldr	r2, [pc, #588]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 8008198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800819c:	61d3      	str	r3, [r2, #28]
 800819e:	4b91      	ldr	r3, [pc, #580]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 80081a0:	69db      	ldr	r3, [r3, #28]
 80081a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081a6:	60bb      	str	r3, [r7, #8]
 80081a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80081aa:	2301      	movs	r3, #1
 80081ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081ae:	4b8e      	ldr	r3, [pc, #568]	; (80083e8 <HAL_RCC_OscConfig+0x4f8>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d118      	bne.n	80081ec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80081ba:	4b8b      	ldr	r3, [pc, #556]	; (80083e8 <HAL_RCC_OscConfig+0x4f8>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a8a      	ldr	r2, [pc, #552]	; (80083e8 <HAL_RCC_OscConfig+0x4f8>)
 80081c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80081c6:	f7fe f881 	bl	80062cc <HAL_GetTick>
 80081ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081cc:	e008      	b.n	80081e0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081ce:	f7fe f87d 	bl	80062cc <HAL_GetTick>
 80081d2:	4602      	mov	r2, r0
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	1ad3      	subs	r3, r2, r3
 80081d8:	2b64      	cmp	r3, #100	; 0x64
 80081da:	d901      	bls.n	80081e0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80081dc:	2303      	movs	r3, #3
 80081de:	e0fd      	b.n	80083dc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081e0:	4b81      	ldr	r3, [pc, #516]	; (80083e8 <HAL_RCC_OscConfig+0x4f8>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d0f0      	beq.n	80081ce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	68db      	ldr	r3, [r3, #12]
 80081f0:	2b01      	cmp	r3, #1
 80081f2:	d106      	bne.n	8008202 <HAL_RCC_OscConfig+0x312>
 80081f4:	4b7b      	ldr	r3, [pc, #492]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 80081f6:	6a1b      	ldr	r3, [r3, #32]
 80081f8:	4a7a      	ldr	r2, [pc, #488]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 80081fa:	f043 0301 	orr.w	r3, r3, #1
 80081fe:	6213      	str	r3, [r2, #32]
 8008200:	e02d      	b.n	800825e <HAL_RCC_OscConfig+0x36e>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10c      	bne.n	8008224 <HAL_RCC_OscConfig+0x334>
 800820a:	4b76      	ldr	r3, [pc, #472]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 800820c:	6a1b      	ldr	r3, [r3, #32]
 800820e:	4a75      	ldr	r2, [pc, #468]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 8008210:	f023 0301 	bic.w	r3, r3, #1
 8008214:	6213      	str	r3, [r2, #32]
 8008216:	4b73      	ldr	r3, [pc, #460]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 8008218:	6a1b      	ldr	r3, [r3, #32]
 800821a:	4a72      	ldr	r2, [pc, #456]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 800821c:	f023 0304 	bic.w	r3, r3, #4
 8008220:	6213      	str	r3, [r2, #32]
 8008222:	e01c      	b.n	800825e <HAL_RCC_OscConfig+0x36e>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	68db      	ldr	r3, [r3, #12]
 8008228:	2b05      	cmp	r3, #5
 800822a:	d10c      	bne.n	8008246 <HAL_RCC_OscConfig+0x356>
 800822c:	4b6d      	ldr	r3, [pc, #436]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 800822e:	6a1b      	ldr	r3, [r3, #32]
 8008230:	4a6c      	ldr	r2, [pc, #432]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 8008232:	f043 0304 	orr.w	r3, r3, #4
 8008236:	6213      	str	r3, [r2, #32]
 8008238:	4b6a      	ldr	r3, [pc, #424]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 800823a:	6a1b      	ldr	r3, [r3, #32]
 800823c:	4a69      	ldr	r2, [pc, #420]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 800823e:	f043 0301 	orr.w	r3, r3, #1
 8008242:	6213      	str	r3, [r2, #32]
 8008244:	e00b      	b.n	800825e <HAL_RCC_OscConfig+0x36e>
 8008246:	4b67      	ldr	r3, [pc, #412]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 8008248:	6a1b      	ldr	r3, [r3, #32]
 800824a:	4a66      	ldr	r2, [pc, #408]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 800824c:	f023 0301 	bic.w	r3, r3, #1
 8008250:	6213      	str	r3, [r2, #32]
 8008252:	4b64      	ldr	r3, [pc, #400]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 8008254:	6a1b      	ldr	r3, [r3, #32]
 8008256:	4a63      	ldr	r2, [pc, #396]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 8008258:	f023 0304 	bic.w	r3, r3, #4
 800825c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d015      	beq.n	8008292 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008266:	f7fe f831 	bl	80062cc <HAL_GetTick>
 800826a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800826c:	e00a      	b.n	8008284 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800826e:	f7fe f82d 	bl	80062cc <HAL_GetTick>
 8008272:	4602      	mov	r2, r0
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	1ad3      	subs	r3, r2, r3
 8008278:	f241 3288 	movw	r2, #5000	; 0x1388
 800827c:	4293      	cmp	r3, r2
 800827e:	d901      	bls.n	8008284 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008280:	2303      	movs	r3, #3
 8008282:	e0ab      	b.n	80083dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008284:	4b57      	ldr	r3, [pc, #348]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 8008286:	6a1b      	ldr	r3, [r3, #32]
 8008288:	f003 0302 	and.w	r3, r3, #2
 800828c:	2b00      	cmp	r3, #0
 800828e:	d0ee      	beq.n	800826e <HAL_RCC_OscConfig+0x37e>
 8008290:	e014      	b.n	80082bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008292:	f7fe f81b 	bl	80062cc <HAL_GetTick>
 8008296:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008298:	e00a      	b.n	80082b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800829a:	f7fe f817 	bl	80062cc <HAL_GetTick>
 800829e:	4602      	mov	r2, r0
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d901      	bls.n	80082b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e095      	b.n	80083dc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082b0:	4b4c      	ldr	r3, [pc, #304]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 80082b2:	6a1b      	ldr	r3, [r3, #32]
 80082b4:	f003 0302 	and.w	r3, r3, #2
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d1ee      	bne.n	800829a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80082bc:	7dfb      	ldrb	r3, [r7, #23]
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d105      	bne.n	80082ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082c2:	4b48      	ldr	r3, [pc, #288]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 80082c4:	69db      	ldr	r3, [r3, #28]
 80082c6:	4a47      	ldr	r2, [pc, #284]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 80082c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	69db      	ldr	r3, [r3, #28]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f000 8081 	beq.w	80083da <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80082d8:	4b42      	ldr	r3, [pc, #264]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f003 030c 	and.w	r3, r3, #12
 80082e0:	2b08      	cmp	r3, #8
 80082e2:	d061      	beq.n	80083a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	69db      	ldr	r3, [r3, #28]
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d146      	bne.n	800837a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082ec:	4b3f      	ldr	r3, [pc, #252]	; (80083ec <HAL_RCC_OscConfig+0x4fc>)
 80082ee:	2200      	movs	r2, #0
 80082f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082f2:	f7fd ffeb 	bl	80062cc <HAL_GetTick>
 80082f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80082f8:	e008      	b.n	800830c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082fa:	f7fd ffe7 	bl	80062cc <HAL_GetTick>
 80082fe:	4602      	mov	r2, r0
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	1ad3      	subs	r3, r2, r3
 8008304:	2b02      	cmp	r3, #2
 8008306:	d901      	bls.n	800830c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008308:	2303      	movs	r3, #3
 800830a:	e067      	b.n	80083dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800830c:	4b35      	ldr	r3, [pc, #212]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008314:	2b00      	cmp	r3, #0
 8008316:	d1f0      	bne.n	80082fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a1b      	ldr	r3, [r3, #32]
 800831c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008320:	d108      	bne.n	8008334 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008322:	4b30      	ldr	r3, [pc, #192]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	492d      	ldr	r1, [pc, #180]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 8008330:	4313      	orrs	r3, r2
 8008332:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008334:	4b2b      	ldr	r3, [pc, #172]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6a19      	ldr	r1, [r3, #32]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008344:	430b      	orrs	r3, r1
 8008346:	4927      	ldr	r1, [pc, #156]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 8008348:	4313      	orrs	r3, r2
 800834a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800834c:	4b27      	ldr	r3, [pc, #156]	; (80083ec <HAL_RCC_OscConfig+0x4fc>)
 800834e:	2201      	movs	r2, #1
 8008350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008352:	f7fd ffbb 	bl	80062cc <HAL_GetTick>
 8008356:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008358:	e008      	b.n	800836c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800835a:	f7fd ffb7 	bl	80062cc <HAL_GetTick>
 800835e:	4602      	mov	r2, r0
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	1ad3      	subs	r3, r2, r3
 8008364:	2b02      	cmp	r3, #2
 8008366:	d901      	bls.n	800836c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008368:	2303      	movs	r3, #3
 800836a:	e037      	b.n	80083dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800836c:	4b1d      	ldr	r3, [pc, #116]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008374:	2b00      	cmp	r3, #0
 8008376:	d0f0      	beq.n	800835a <HAL_RCC_OscConfig+0x46a>
 8008378:	e02f      	b.n	80083da <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800837a:	4b1c      	ldr	r3, [pc, #112]	; (80083ec <HAL_RCC_OscConfig+0x4fc>)
 800837c:	2200      	movs	r2, #0
 800837e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008380:	f7fd ffa4 	bl	80062cc <HAL_GetTick>
 8008384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008386:	e008      	b.n	800839a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008388:	f7fd ffa0 	bl	80062cc <HAL_GetTick>
 800838c:	4602      	mov	r2, r0
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	2b02      	cmp	r3, #2
 8008394:	d901      	bls.n	800839a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	e020      	b.n	80083dc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800839a:	4b12      	ldr	r3, [pc, #72]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1f0      	bne.n	8008388 <HAL_RCC_OscConfig+0x498>
 80083a6:	e018      	b.n	80083da <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	69db      	ldr	r3, [r3, #28]
 80083ac:	2b01      	cmp	r3, #1
 80083ae:	d101      	bne.n	80083b4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80083b0:	2301      	movs	r3, #1
 80083b2:	e013      	b.n	80083dc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80083b4:	4b0b      	ldr	r3, [pc, #44]	; (80083e4 <HAL_RCC_OscConfig+0x4f4>)
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a1b      	ldr	r3, [r3, #32]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d106      	bne.n	80083d6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d001      	beq.n	80083da <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80083d6:	2301      	movs	r3, #1
 80083d8:	e000      	b.n	80083dc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80083da:	2300      	movs	r3, #0
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3718      	adds	r7, #24
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	40021000 	.word	0x40021000
 80083e8:	40007000 	.word	0x40007000
 80083ec:	42420060 	.word	0x42420060

080083f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d101      	bne.n	8008404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e0d0      	b.n	80085a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008404:	4b6a      	ldr	r3, [pc, #424]	; (80085b0 <HAL_RCC_ClockConfig+0x1c0>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0307 	and.w	r3, r3, #7
 800840c:	683a      	ldr	r2, [r7, #0]
 800840e:	429a      	cmp	r2, r3
 8008410:	d910      	bls.n	8008434 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008412:	4b67      	ldr	r3, [pc, #412]	; (80085b0 <HAL_RCC_ClockConfig+0x1c0>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f023 0207 	bic.w	r2, r3, #7
 800841a:	4965      	ldr	r1, [pc, #404]	; (80085b0 <HAL_RCC_ClockConfig+0x1c0>)
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	4313      	orrs	r3, r2
 8008420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008422:	4b63      	ldr	r3, [pc, #396]	; (80085b0 <HAL_RCC_ClockConfig+0x1c0>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f003 0307 	and.w	r3, r3, #7
 800842a:	683a      	ldr	r2, [r7, #0]
 800842c:	429a      	cmp	r2, r3
 800842e:	d001      	beq.n	8008434 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008430:	2301      	movs	r3, #1
 8008432:	e0b8      	b.n	80085a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f003 0302 	and.w	r3, r3, #2
 800843c:	2b00      	cmp	r3, #0
 800843e:	d020      	beq.n	8008482 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0304 	and.w	r3, r3, #4
 8008448:	2b00      	cmp	r3, #0
 800844a:	d005      	beq.n	8008458 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800844c:	4b59      	ldr	r3, [pc, #356]	; (80085b4 <HAL_RCC_ClockConfig+0x1c4>)
 800844e:	685b      	ldr	r3, [r3, #4]
 8008450:	4a58      	ldr	r2, [pc, #352]	; (80085b4 <HAL_RCC_ClockConfig+0x1c4>)
 8008452:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008456:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 0308 	and.w	r3, r3, #8
 8008460:	2b00      	cmp	r3, #0
 8008462:	d005      	beq.n	8008470 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008464:	4b53      	ldr	r3, [pc, #332]	; (80085b4 <HAL_RCC_ClockConfig+0x1c4>)
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	4a52      	ldr	r2, [pc, #328]	; (80085b4 <HAL_RCC_ClockConfig+0x1c4>)
 800846a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800846e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008470:	4b50      	ldr	r3, [pc, #320]	; (80085b4 <HAL_RCC_ClockConfig+0x1c4>)
 8008472:	685b      	ldr	r3, [r3, #4]
 8008474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	494d      	ldr	r1, [pc, #308]	; (80085b4 <HAL_RCC_ClockConfig+0x1c4>)
 800847e:	4313      	orrs	r3, r2
 8008480:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 0301 	and.w	r3, r3, #1
 800848a:	2b00      	cmp	r3, #0
 800848c:	d040      	beq.n	8008510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	2b01      	cmp	r3, #1
 8008494:	d107      	bne.n	80084a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008496:	4b47      	ldr	r3, [pc, #284]	; (80085b4 <HAL_RCC_ClockConfig+0x1c4>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d115      	bne.n	80084ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	e07f      	b.n	80085a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	685b      	ldr	r3, [r3, #4]
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d107      	bne.n	80084be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80084ae:	4b41      	ldr	r3, [pc, #260]	; (80085b4 <HAL_RCC_ClockConfig+0x1c4>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d109      	bne.n	80084ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084ba:	2301      	movs	r3, #1
 80084bc:	e073      	b.n	80085a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084be:	4b3d      	ldr	r3, [pc, #244]	; (80085b4 <HAL_RCC_ClockConfig+0x1c4>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 0302 	and.w	r3, r3, #2
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d101      	bne.n	80084ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e06b      	b.n	80085a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80084ce:	4b39      	ldr	r3, [pc, #228]	; (80085b4 <HAL_RCC_ClockConfig+0x1c4>)
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	f023 0203 	bic.w	r2, r3, #3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	4936      	ldr	r1, [pc, #216]	; (80085b4 <HAL_RCC_ClockConfig+0x1c4>)
 80084dc:	4313      	orrs	r3, r2
 80084de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80084e0:	f7fd fef4 	bl	80062cc <HAL_GetTick>
 80084e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084e6:	e00a      	b.n	80084fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084e8:	f7fd fef0 	bl	80062cc <HAL_GetTick>
 80084ec:	4602      	mov	r2, r0
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d901      	bls.n	80084fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80084fa:	2303      	movs	r3, #3
 80084fc:	e053      	b.n	80085a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084fe:	4b2d      	ldr	r3, [pc, #180]	; (80085b4 <HAL_RCC_ClockConfig+0x1c4>)
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	f003 020c 	and.w	r2, r3, #12
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	429a      	cmp	r2, r3
 800850e:	d1eb      	bne.n	80084e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008510:	4b27      	ldr	r3, [pc, #156]	; (80085b0 <HAL_RCC_ClockConfig+0x1c0>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f003 0307 	and.w	r3, r3, #7
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	429a      	cmp	r2, r3
 800851c:	d210      	bcs.n	8008540 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800851e:	4b24      	ldr	r3, [pc, #144]	; (80085b0 <HAL_RCC_ClockConfig+0x1c0>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f023 0207 	bic.w	r2, r3, #7
 8008526:	4922      	ldr	r1, [pc, #136]	; (80085b0 <HAL_RCC_ClockConfig+0x1c0>)
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	4313      	orrs	r3, r2
 800852c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800852e:	4b20      	ldr	r3, [pc, #128]	; (80085b0 <HAL_RCC_ClockConfig+0x1c0>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 0307 	and.w	r3, r3, #7
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	429a      	cmp	r2, r3
 800853a:	d001      	beq.n	8008540 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e032      	b.n	80085a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 0304 	and.w	r3, r3, #4
 8008548:	2b00      	cmp	r3, #0
 800854a:	d008      	beq.n	800855e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800854c:	4b19      	ldr	r3, [pc, #100]	; (80085b4 <HAL_RCC_ClockConfig+0x1c4>)
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	4916      	ldr	r1, [pc, #88]	; (80085b4 <HAL_RCC_ClockConfig+0x1c4>)
 800855a:	4313      	orrs	r3, r2
 800855c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 0308 	and.w	r3, r3, #8
 8008566:	2b00      	cmp	r3, #0
 8008568:	d009      	beq.n	800857e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800856a:	4b12      	ldr	r3, [pc, #72]	; (80085b4 <HAL_RCC_ClockConfig+0x1c4>)
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	691b      	ldr	r3, [r3, #16]
 8008576:	00db      	lsls	r3, r3, #3
 8008578:	490e      	ldr	r1, [pc, #56]	; (80085b4 <HAL_RCC_ClockConfig+0x1c4>)
 800857a:	4313      	orrs	r3, r2
 800857c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800857e:	f000 f821 	bl	80085c4 <HAL_RCC_GetSysClockFreq>
 8008582:	4601      	mov	r1, r0
 8008584:	4b0b      	ldr	r3, [pc, #44]	; (80085b4 <HAL_RCC_ClockConfig+0x1c4>)
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	091b      	lsrs	r3, r3, #4
 800858a:	f003 030f 	and.w	r3, r3, #15
 800858e:	4a0a      	ldr	r2, [pc, #40]	; (80085b8 <HAL_RCC_ClockConfig+0x1c8>)
 8008590:	5cd3      	ldrb	r3, [r2, r3]
 8008592:	fa21 f303 	lsr.w	r3, r1, r3
 8008596:	4a09      	ldr	r2, [pc, #36]	; (80085bc <HAL_RCC_ClockConfig+0x1cc>)
 8008598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800859a:	4b09      	ldr	r3, [pc, #36]	; (80085c0 <HAL_RCC_ClockConfig+0x1d0>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fd fe52 	bl	8006248 <HAL_InitTick>

  return HAL_OK;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3710      	adds	r7, #16
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	bf00      	nop
 80085b0:	40022000 	.word	0x40022000
 80085b4:	40021000 	.word	0x40021000
 80085b8:	0800c5ac 	.word	0x0800c5ac
 80085bc:	2000003c 	.word	0x2000003c
 80085c0:	20000040 	.word	0x20000040

080085c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085c4:	b490      	push	{r4, r7}
 80085c6:	b08a      	sub	sp, #40	; 0x28
 80085c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80085ca:	4b2a      	ldr	r3, [pc, #168]	; (8008674 <HAL_RCC_GetSysClockFreq+0xb0>)
 80085cc:	1d3c      	adds	r4, r7, #4
 80085ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80085d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80085d4:	4b28      	ldr	r3, [pc, #160]	; (8008678 <HAL_RCC_GetSysClockFreq+0xb4>)
 80085d6:	881b      	ldrh	r3, [r3, #0]
 80085d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80085da:	2300      	movs	r3, #0
 80085dc:	61fb      	str	r3, [r7, #28]
 80085de:	2300      	movs	r3, #0
 80085e0:	61bb      	str	r3, [r7, #24]
 80085e2:	2300      	movs	r3, #0
 80085e4:	627b      	str	r3, [r7, #36]	; 0x24
 80085e6:	2300      	movs	r3, #0
 80085e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80085ea:	2300      	movs	r3, #0
 80085ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80085ee:	4b23      	ldr	r3, [pc, #140]	; (800867c <HAL_RCC_GetSysClockFreq+0xb8>)
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80085f4:	69fb      	ldr	r3, [r7, #28]
 80085f6:	f003 030c 	and.w	r3, r3, #12
 80085fa:	2b04      	cmp	r3, #4
 80085fc:	d002      	beq.n	8008604 <HAL_RCC_GetSysClockFreq+0x40>
 80085fe:	2b08      	cmp	r3, #8
 8008600:	d003      	beq.n	800860a <HAL_RCC_GetSysClockFreq+0x46>
 8008602:	e02d      	b.n	8008660 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008604:	4b1e      	ldr	r3, [pc, #120]	; (8008680 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008606:	623b      	str	r3, [r7, #32]
      break;
 8008608:	e02d      	b.n	8008666 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	0c9b      	lsrs	r3, r3, #18
 800860e:	f003 030f 	and.w	r3, r3, #15
 8008612:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008616:	4413      	add	r3, r2
 8008618:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800861c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008624:	2b00      	cmp	r3, #0
 8008626:	d013      	beq.n	8008650 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8008628:	4b14      	ldr	r3, [pc, #80]	; (800867c <HAL_RCC_GetSysClockFreq+0xb8>)
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	0c5b      	lsrs	r3, r3, #17
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008636:	4413      	add	r3, r2
 8008638:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800863c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	4a0f      	ldr	r2, [pc, #60]	; (8008680 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008642:	fb02 f203 	mul.w	r2, r2, r3
 8008646:	69bb      	ldr	r3, [r7, #24]
 8008648:	fbb2 f3f3 	udiv	r3, r2, r3
 800864c:	627b      	str	r3, [r7, #36]	; 0x24
 800864e:	e004      	b.n	800865a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	4a0c      	ldr	r2, [pc, #48]	; (8008684 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008654:	fb02 f303 	mul.w	r3, r2, r3
 8008658:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865c:	623b      	str	r3, [r7, #32]
      break;
 800865e:	e002      	b.n	8008666 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008660:	4b07      	ldr	r3, [pc, #28]	; (8008680 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008662:	623b      	str	r3, [r7, #32]
      break;
 8008664:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008666:	6a3b      	ldr	r3, [r7, #32]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3728      	adds	r7, #40	; 0x28
 800866c:	46bd      	mov	sp, r7
 800866e:	bc90      	pop	{r4, r7}
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	0800c590 	.word	0x0800c590
 8008678:	0800c5a0 	.word	0x0800c5a0
 800867c:	40021000 	.word	0x40021000
 8008680:	007a1200 	.word	0x007a1200
 8008684:	003d0900 	.word	0x003d0900

08008688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008688:	b480      	push	{r7}
 800868a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800868c:	4b02      	ldr	r3, [pc, #8]	; (8008698 <HAL_RCC_GetHCLKFreq+0x10>)
 800868e:	681b      	ldr	r3, [r3, #0]
}
 8008690:	4618      	mov	r0, r3
 8008692:	46bd      	mov	sp, r7
 8008694:	bc80      	pop	{r7}
 8008696:	4770      	bx	lr
 8008698:	2000003c 	.word	0x2000003c

0800869c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80086a0:	f7ff fff2 	bl	8008688 <HAL_RCC_GetHCLKFreq>
 80086a4:	4601      	mov	r1, r0
 80086a6:	4b05      	ldr	r3, [pc, #20]	; (80086bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80086a8:	685b      	ldr	r3, [r3, #4]
 80086aa:	0a1b      	lsrs	r3, r3, #8
 80086ac:	f003 0307 	and.w	r3, r3, #7
 80086b0:	4a03      	ldr	r2, [pc, #12]	; (80086c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80086b2:	5cd3      	ldrb	r3, [r2, r3]
 80086b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	40021000 	.word	0x40021000
 80086c0:	0800c5bc 	.word	0x0800c5bc

080086c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80086c8:	f7ff ffde 	bl	8008688 <HAL_RCC_GetHCLKFreq>
 80086cc:	4601      	mov	r1, r0
 80086ce:	4b05      	ldr	r3, [pc, #20]	; (80086e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	0adb      	lsrs	r3, r3, #11
 80086d4:	f003 0307 	and.w	r3, r3, #7
 80086d8:	4a03      	ldr	r2, [pc, #12]	; (80086e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80086da:	5cd3      	ldrb	r3, [r2, r3]
 80086dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	bd80      	pop	{r7, pc}
 80086e4:	40021000 	.word	0x40021000
 80086e8:	0800c5bc 	.word	0x0800c5bc

080086ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b085      	sub	sp, #20
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80086f4:	4b0a      	ldr	r3, [pc, #40]	; (8008720 <RCC_Delay+0x34>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a0a      	ldr	r2, [pc, #40]	; (8008724 <RCC_Delay+0x38>)
 80086fa:	fba2 2303 	umull	r2, r3, r2, r3
 80086fe:	0a5b      	lsrs	r3, r3, #9
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	fb02 f303 	mul.w	r3, r2, r3
 8008706:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8008708:	bf00      	nop
  }
  while (Delay --);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	1e5a      	subs	r2, r3, #1
 800870e:	60fa      	str	r2, [r7, #12]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d1f9      	bne.n	8008708 <RCC_Delay+0x1c>
}
 8008714:	bf00      	nop
 8008716:	3714      	adds	r7, #20
 8008718:	46bd      	mov	sp, r7
 800871a:	bc80      	pop	{r7}
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	2000003c 	.word	0x2000003c
 8008724:	10624dd3 	.word	0x10624dd3

08008728 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b082      	sub	sp, #8
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d101      	bne.n	800873a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e03f      	b.n	80087ba <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b00      	cmp	r3, #0
 8008744:	d106      	bne.n	8008754 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f7fd fc94 	bl	800607c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2224      	movs	r2, #36	; 0x24
 8008758:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	68da      	ldr	r2, [r3, #12]
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800876a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fc2d 	bl	8008fcc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	691a      	ldr	r2, [r3, #16]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008780:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	695a      	ldr	r2, [r3, #20]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008790:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68da      	ldr	r2, [r3, #12]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80087a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2220      	movs	r2, #32
 80087ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2220      	movs	r2, #32
 80087b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80087b8:	2300      	movs	r3, #0
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3708      	adds	r7, #8
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
	...

080087c4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b086      	sub	sp, #24
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	4613      	mov	r3, r2
 80087d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	2b20      	cmp	r3, #32
 80087dc:	d153      	bne.n	8008886 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <HAL_UART_Transmit_DMA+0x26>
 80087e4:	88fb      	ldrh	r3, [r7, #6]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d101      	bne.n	80087ee <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e04c      	b.n	8008888 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d101      	bne.n	80087fc <HAL_UART_Transmit_DMA+0x38>
 80087f8:	2302      	movs	r3, #2
 80087fa:	e045      	b.n	8008888 <HAL_UART_Transmit_DMA+0xc4>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	88fa      	ldrh	r2, [r7, #6]
 800880e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	88fa      	ldrh	r2, [r7, #6]
 8008814:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2200      	movs	r2, #0
 800881a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2221      	movs	r2, #33	; 0x21
 8008820:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008828:	4a19      	ldr	r2, [pc, #100]	; (8008890 <HAL_UART_Transmit_DMA+0xcc>)
 800882a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008830:	4a18      	ldr	r2, [pc, #96]	; (8008894 <HAL_UART_Transmit_DMA+0xd0>)
 8008832:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008838:	4a17      	ldr	r2, [pc, #92]	; (8008898 <HAL_UART_Transmit_DMA+0xd4>)
 800883a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008840:	2200      	movs	r2, #0
 8008842:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8008844:	f107 0308 	add.w	r3, r7, #8
 8008848:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	6819      	ldr	r1, [r3, #0]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	3304      	adds	r3, #4
 8008858:	461a      	mov	r2, r3
 800885a:	88fb      	ldrh	r3, [r7, #6]
 800885c:	f7fd feca 	bl	80065f4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008868:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	695a      	ldr	r2, [r3, #20]
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008880:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008882:	2300      	movs	r3, #0
 8008884:	e000      	b.n	8008888 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8008886:	2302      	movs	r3, #2
  }
}
 8008888:	4618      	mov	r0, r3
 800888a:	3718      	adds	r7, #24
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}
 8008890:	08008bdd 	.word	0x08008bdd
 8008894:	08008c2f 	.word	0x08008c2f
 8008898:	08008ccf 	.word	0x08008ccf

0800889c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b086      	sub	sp, #24
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	60f8      	str	r0, [r7, #12]
 80088a4:	60b9      	str	r1, [r7, #8]
 80088a6:	4613      	mov	r3, r2
 80088a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80088b0:	b2db      	uxtb	r3, r3
 80088b2:	2b20      	cmp	r3, #32
 80088b4:	d166      	bne.n	8008984 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d002      	beq.n	80088c2 <HAL_UART_Receive_DMA+0x26>
 80088bc:	88fb      	ldrh	r3, [r7, #6]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d101      	bne.n	80088c6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	e05f      	b.n	8008986 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d101      	bne.n	80088d4 <HAL_UART_Receive_DMA+0x38>
 80088d0:	2302      	movs	r3, #2
 80088d2:	e058      	b.n	8008986 <HAL_UART_Receive_DMA+0xea>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	88fa      	ldrh	r2, [r7, #6]
 80088e6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2200      	movs	r2, #0
 80088ec:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2222      	movs	r2, #34	; 0x22
 80088f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088fa:	4a25      	ldr	r2, [pc, #148]	; (8008990 <HAL_UART_Receive_DMA+0xf4>)
 80088fc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008902:	4a24      	ldr	r2, [pc, #144]	; (8008994 <HAL_UART_Receive_DMA+0xf8>)
 8008904:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800890a:	4a23      	ldr	r2, [pc, #140]	; (8008998 <HAL_UART_Receive_DMA+0xfc>)
 800890c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008912:	2200      	movs	r2, #0
 8008914:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8008916:	f107 0308 	add.w	r3, r7, #8
 800891a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	3304      	adds	r3, #4
 8008926:	4619      	mov	r1, r3
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	88fb      	ldrh	r3, [r7, #6]
 800892e:	f7fd fe61 	bl	80065f4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8008932:	2300      	movs	r3, #0
 8008934:	613b      	str	r3, [r7, #16]
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	613b      	str	r3, [r7, #16]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	685b      	ldr	r3, [r3, #4]
 8008944:	613b      	str	r3, [r7, #16]
 8008946:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68da      	ldr	r2, [r3, #12]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800895e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	695a      	ldr	r2, [r3, #20]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f042 0201 	orr.w	r2, r2, #1
 800896e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	695a      	ldr	r2, [r3, #20]
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800897e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008980:	2300      	movs	r3, #0
 8008982:	e000      	b.n	8008986 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008984:	2302      	movs	r3, #2
  }
}
 8008986:	4618      	mov	r0, r3
 8008988:	3718      	adds	r7, #24
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	08008c4b 	.word	0x08008c4b
 8008994:	08008cb3 	.word	0x08008cb3
 8008998:	08008ccf 	.word	0x08008ccf

0800899c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b088      	sub	sp, #32
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80089bc:	2300      	movs	r3, #0
 80089be:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80089c0:	2300      	movs	r3, #0
 80089c2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	f003 030f 	and.w	r3, r3, #15
 80089ca:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d10d      	bne.n	80089ee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	f003 0320 	and.w	r3, r3, #32
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d008      	beq.n	80089ee <HAL_UART_IRQHandler+0x52>
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	f003 0320 	and.w	r3, r3, #32
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d003      	beq.n	80089ee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 fa6e 	bl	8008ec8 <UART_Receive_IT>
      return;
 80089ec:	e0cc      	b.n	8008b88 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 80ab 	beq.w	8008b4c <HAL_UART_IRQHandler+0x1b0>
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	f003 0301 	and.w	r3, r3, #1
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d105      	bne.n	8008a0c <HAL_UART_IRQHandler+0x70>
 8008a00:	69bb      	ldr	r3, [r7, #24]
 8008a02:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	f000 80a0 	beq.w	8008b4c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008a0c:	69fb      	ldr	r3, [r7, #28]
 8008a0e:	f003 0301 	and.w	r3, r3, #1
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d00a      	beq.n	8008a2c <HAL_UART_IRQHandler+0x90>
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d005      	beq.n	8008a2c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a24:	f043 0201 	orr.w	r2, r3, #1
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	f003 0304 	and.w	r3, r3, #4
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d00a      	beq.n	8008a4c <HAL_UART_IRQHandler+0xb0>
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	f003 0301 	and.w	r3, r3, #1
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d005      	beq.n	8008a4c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a44:	f043 0202 	orr.w	r2, r3, #2
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	f003 0302 	and.w	r3, r3, #2
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d00a      	beq.n	8008a6c <HAL_UART_IRQHandler+0xd0>
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f003 0301 	and.w	r3, r3, #1
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d005      	beq.n	8008a6c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a64:	f043 0204 	orr.w	r2, r3, #4
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	f003 0308 	and.w	r3, r3, #8
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d00a      	beq.n	8008a8c <HAL_UART_IRQHandler+0xf0>
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	f003 0301 	and.w	r3, r3, #1
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d005      	beq.n	8008a8c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a84:	f043 0208 	orr.w	r2, r3, #8
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d078      	beq.n	8008b86 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	f003 0320 	and.w	r3, r3, #32
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d007      	beq.n	8008aae <HAL_UART_IRQHandler+0x112>
 8008a9e:	69bb      	ldr	r3, [r7, #24]
 8008aa0:	f003 0320 	and.w	r3, r3, #32
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d002      	beq.n	8008aae <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 fa0d 	bl	8008ec8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	695b      	ldr	r3, [r3, #20]
 8008ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	bf14      	ite	ne
 8008abc:	2301      	movne	r3, #1
 8008abe:	2300      	moveq	r3, #0
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ac8:	f003 0308 	and.w	r3, r3, #8
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d102      	bne.n	8008ad6 <HAL_UART_IRQHandler+0x13a>
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d031      	beq.n	8008b3a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f958 	bl	8008d8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d023      	beq.n	8008b32 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	695a      	ldr	r2, [r3, #20]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008af8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d013      	beq.n	8008b2a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b06:	4a22      	ldr	r2, [pc, #136]	; (8008b90 <HAL_UART_IRQHandler+0x1f4>)
 8008b08:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b0e:	4618      	mov	r0, r3
 8008b10:	f7fd fdd0 	bl	80066b4 <HAL_DMA_Abort_IT>
 8008b14:	4603      	mov	r3, r0
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d016      	beq.n	8008b48 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008b24:	4610      	mov	r0, r2
 8008b26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b28:	e00e      	b.n	8008b48 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 f84d 	bl	8008bca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b30:	e00a      	b.n	8008b48 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 f849 	bl	8008bca <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b38:	e006      	b.n	8008b48 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f845 	bl	8008bca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008b46:	e01e      	b.n	8008b86 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b48:	bf00      	nop
    return;
 8008b4a:	e01c      	b.n	8008b86 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d008      	beq.n	8008b68 <HAL_UART_IRQHandler+0x1cc>
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d003      	beq.n	8008b68 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 f944 	bl	8008dee <UART_Transmit_IT>
    return;
 8008b66:	e00f      	b.n	8008b88 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d00a      	beq.n	8008b88 <HAL_UART_IRQHandler+0x1ec>
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d005      	beq.n	8008b88 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 f98b 	bl	8008e98 <UART_EndTransmit_IT>
    return;
 8008b82:	bf00      	nop
 8008b84:	e000      	b.n	8008b88 <HAL_UART_IRQHandler+0x1ec>
    return;
 8008b86:	bf00      	nop
  }
}
 8008b88:	3720      	adds	r7, #32
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	08008dc7 	.word	0x08008dc7

08008b94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008b9c:	bf00      	nop
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bc80      	pop	{r7}
 8008ba4:	4770      	bx	lr

08008ba6 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008ba6:	b480      	push	{r7}
 8008ba8:	b083      	sub	sp, #12
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008bae:	bf00      	nop
 8008bb0:	370c      	adds	r7, #12
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bc80      	pop	{r7}
 8008bb6:	4770      	bx	lr

08008bb8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008bc0:	bf00      	nop
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	bc80      	pop	{r7}
 8008bc8:	4770      	bx	lr

08008bca <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008bca:	b480      	push	{r7}
 8008bcc:	b083      	sub	sp, #12
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008bd2:	bf00      	nop
 8008bd4:	370c      	adds	r7, #12
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bc80      	pop	{r7}
 8008bda:	4770      	bx	lr

08008bdc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 0320 	and.w	r3, r3, #32
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d113      	bne.n	8008c20 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	695a      	ldr	r2, [r3, #20]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c0c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68da      	ldr	r2, [r3, #12]
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c1c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c1e:	e002      	b.n	8008c26 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f7ff ffb7 	bl	8008b94 <HAL_UART_TxCpltCallback>
}
 8008c26:	bf00      	nop
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b084      	sub	sp, #16
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c3a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008c3c:	68f8      	ldr	r0, [r7, #12]
 8008c3e:	f7ff ffb2 	bl	8008ba6 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c42:	bf00      	nop
 8008c44:	3710      	adds	r7, #16
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}

08008c4a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c4a:	b580      	push	{r7, lr}
 8008c4c:	b084      	sub	sp, #16
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c56:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f003 0320 	and.w	r3, r3, #32
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d11e      	bne.n	8008ca4 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	68da      	ldr	r2, [r3, #12]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c7a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	695a      	ldr	r2, [r3, #20]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f022 0201 	bic.w	r2, r2, #1
 8008c8a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	695a      	ldr	r2, [r3, #20]
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008c9a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	2220      	movs	r2, #32
 8008ca0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f7fa fb43 	bl	8003330 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008caa:	bf00      	nop
 8008cac:	3710      	adds	r7, #16
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}

08008cb2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008cb2:	b580      	push	{r7, lr}
 8008cb4:	b084      	sub	sp, #16
 8008cb6:	af00      	add	r7, sp, #0
 8008cb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8008cc0:	68f8      	ldr	r0, [r7, #12]
 8008cc2:	f7ff ff79 	bl	8008bb8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cc6:	bf00      	nop
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b084      	sub	sp, #16
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cde:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	bf14      	ite	ne
 8008cee:	2301      	movne	r3, #1
 8008cf0:	2300      	moveq	r3, #0
 8008cf2:	b2db      	uxtb	r3, r3
 8008cf4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	2b21      	cmp	r3, #33	; 0x21
 8008d00:	d108      	bne.n	8008d14 <UART_DMAError+0x46>
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d005      	beq.n	8008d14 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008d0e:	68b8      	ldr	r0, [r7, #8]
 8008d10:	f000 f827 	bl	8008d62 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	bf14      	ite	ne
 8008d22:	2301      	movne	r3, #1
 8008d24:	2300      	moveq	r3, #0
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	2b22      	cmp	r3, #34	; 0x22
 8008d34:	d108      	bne.n	8008d48 <UART_DMAError+0x7a>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d005      	beq.n	8008d48 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008d42:	68b8      	ldr	r0, [r7, #8]
 8008d44:	f000 f822 	bl	8008d8c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d4c:	f043 0210 	orr.w	r2, r3, #16
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d54:	68b8      	ldr	r0, [r7, #8]
 8008d56:	f7ff ff38 	bl	8008bca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d5a:	bf00      	nop
 8008d5c:	3710      	adds	r7, #16
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}

08008d62 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008d62:	b480      	push	{r7}
 8008d64:	b083      	sub	sp, #12
 8008d66:	af00      	add	r7, sp, #0
 8008d68:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68da      	ldr	r2, [r3, #12]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008d78:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2220      	movs	r2, #32
 8008d7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8008d82:	bf00      	nop
 8008d84:	370c      	adds	r7, #12
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bc80      	pop	{r7}
 8008d8a:	4770      	bx	lr

08008d8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68da      	ldr	r2, [r3, #12]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008da2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	695a      	ldr	r2, [r3, #20]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	f022 0201 	bic.w	r2, r2, #1
 8008db2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2220      	movs	r2, #32
 8008db8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bc80      	pop	{r7}
 8008dc4:	4770      	bx	lr

08008dc6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b084      	sub	sp, #16
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dd2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008de0:	68f8      	ldr	r0, [r7, #12]
 8008de2:	f7ff fef2 	bl	8008bca <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008de6:	bf00      	nop
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008dee:	b480      	push	{r7}
 8008df0:	b085      	sub	sp, #20
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b21      	cmp	r3, #33	; 0x21
 8008e00:	d144      	bne.n	8008e8c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	689b      	ldr	r3, [r3, #8]
 8008e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e0a:	d11a      	bne.n	8008e42 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6a1b      	ldr	r3, [r3, #32]
 8008e10:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	881b      	ldrh	r3, [r3, #0]
 8008e16:	461a      	mov	r2, r3
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e20:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d105      	bne.n	8008e36 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6a1b      	ldr	r3, [r3, #32]
 8008e2e:	1c9a      	adds	r2, r3, #2
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	621a      	str	r2, [r3, #32]
 8008e34:	e00e      	b.n	8008e54 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a1b      	ldr	r3, [r3, #32]
 8008e3a:	1c5a      	adds	r2, r3, #1
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	621a      	str	r2, [r3, #32]
 8008e40:	e008      	b.n	8008e54 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6a1b      	ldr	r3, [r3, #32]
 8008e46:	1c59      	adds	r1, r3, #1
 8008e48:	687a      	ldr	r2, [r7, #4]
 8008e4a:	6211      	str	r1, [r2, #32]
 8008e4c:	781a      	ldrb	r2, [r3, #0]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	687a      	ldr	r2, [r7, #4]
 8008e60:	4619      	mov	r1, r3
 8008e62:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d10f      	bne.n	8008e88 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68da      	ldr	r2, [r3, #12]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e76:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	68da      	ldr	r2, [r3, #12]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e86:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	e000      	b.n	8008e8e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008e8c:	2302      	movs	r3, #2
  }
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3714      	adds	r7, #20
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bc80      	pop	{r7}
 8008e96:	4770      	bx	lr

08008e98 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e98:	b580      	push	{r7, lr}
 8008e9a:	b082      	sub	sp, #8
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	68da      	ldr	r2, [r3, #12]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008eae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2220      	movs	r2, #32
 8008eb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f7ff fe6b 	bl	8008b94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	2b22      	cmp	r3, #34	; 0x22
 8008eda:	d171      	bne.n	8008fc0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ee4:	d123      	bne.n	8008f2e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eea:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d10e      	bne.n	8008f12 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	685b      	ldr	r3, [r3, #4]
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f0a:	1c9a      	adds	r2, r3, #2
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	629a      	str	r2, [r3, #40]	; 0x28
 8008f10:	e029      	b.n	8008f66 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	b29a      	uxth	r2, r3
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f26:	1c5a      	adds	r2, r3, #1
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	629a      	str	r2, [r3, #40]	; 0x28
 8008f2c:	e01b      	b.n	8008f66 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	691b      	ldr	r3, [r3, #16]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d10a      	bne.n	8008f4c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	6858      	ldr	r0, [r3, #4]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f40:	1c59      	adds	r1, r3, #1
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	6291      	str	r1, [r2, #40]	; 0x28
 8008f46:	b2c2      	uxtb	r2, r0
 8008f48:	701a      	strb	r2, [r3, #0]
 8008f4a:	e00c      	b.n	8008f66 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	b2da      	uxtb	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f58:	1c58      	adds	r0, r3, #1
 8008f5a:	6879      	ldr	r1, [r7, #4]
 8008f5c:	6288      	str	r0, [r1, #40]	; 0x28
 8008f5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008f62:	b2d2      	uxtb	r2, r2
 8008f64:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f6a:	b29b      	uxth	r3, r3
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	b29b      	uxth	r3, r3
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	4619      	mov	r1, r3
 8008f74:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d120      	bne.n	8008fbc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	68da      	ldr	r2, [r3, #12]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f022 0220 	bic.w	r2, r2, #32
 8008f88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	68da      	ldr	r2, [r3, #12]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	695a      	ldr	r2, [r3, #20]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f022 0201 	bic.w	r2, r2, #1
 8008fa8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2220      	movs	r2, #32
 8008fae:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f7fa f9bc 	bl	8003330 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	e002      	b.n	8008fc2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	e000      	b.n	8008fc2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008fc0:	2302      	movs	r3, #2
  }
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	3710      	adds	r7, #16
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
	...

08008fcc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b084      	sub	sp, #16
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68da      	ldr	r2, [r3, #12]
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	430a      	orrs	r2, r1
 8008fe8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	689a      	ldr	r2, [r3, #8]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	691b      	ldr	r3, [r3, #16]
 8008ff2:	431a      	orrs	r2, r3
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009006:	f023 030c 	bic.w	r3, r3, #12
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	6812      	ldr	r2, [r2, #0]
 800900e:	68f9      	ldr	r1, [r7, #12]
 8009010:	430b      	orrs	r3, r1
 8009012:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	695b      	ldr	r3, [r3, #20]
 800901a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	699a      	ldr	r2, [r3, #24]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	430a      	orrs	r2, r1
 8009028:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a52      	ldr	r2, [pc, #328]	; (8009178 <UART_SetConfig+0x1ac>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d14e      	bne.n	80090d2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009034:	f7ff fb46 	bl	80086c4 <HAL_RCC_GetPCLK2Freq>
 8009038:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800903a:	68ba      	ldr	r2, [r7, #8]
 800903c:	4613      	mov	r3, r2
 800903e:	009b      	lsls	r3, r3, #2
 8009040:	4413      	add	r3, r2
 8009042:	009a      	lsls	r2, r3, #2
 8009044:	441a      	add	r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009050:	4a4a      	ldr	r2, [pc, #296]	; (800917c <UART_SetConfig+0x1b0>)
 8009052:	fba2 2303 	umull	r2, r3, r2, r3
 8009056:	095b      	lsrs	r3, r3, #5
 8009058:	0119      	lsls	r1, r3, #4
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	4613      	mov	r3, r2
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	4413      	add	r3, r2
 8009062:	009a      	lsls	r2, r3, #2
 8009064:	441a      	add	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	685b      	ldr	r3, [r3, #4]
 800906a:	009b      	lsls	r3, r3, #2
 800906c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009070:	4b42      	ldr	r3, [pc, #264]	; (800917c <UART_SetConfig+0x1b0>)
 8009072:	fba3 0302 	umull	r0, r3, r3, r2
 8009076:	095b      	lsrs	r3, r3, #5
 8009078:	2064      	movs	r0, #100	; 0x64
 800907a:	fb00 f303 	mul.w	r3, r0, r3
 800907e:	1ad3      	subs	r3, r2, r3
 8009080:	011b      	lsls	r3, r3, #4
 8009082:	3332      	adds	r3, #50	; 0x32
 8009084:	4a3d      	ldr	r2, [pc, #244]	; (800917c <UART_SetConfig+0x1b0>)
 8009086:	fba2 2303 	umull	r2, r3, r2, r3
 800908a:	095b      	lsrs	r3, r3, #5
 800908c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009090:	4419      	add	r1, r3
 8009092:	68ba      	ldr	r2, [r7, #8]
 8009094:	4613      	mov	r3, r2
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	4413      	add	r3, r2
 800909a:	009a      	lsls	r2, r3, #2
 800909c:	441a      	add	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	685b      	ldr	r3, [r3, #4]
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80090a8:	4b34      	ldr	r3, [pc, #208]	; (800917c <UART_SetConfig+0x1b0>)
 80090aa:	fba3 0302 	umull	r0, r3, r3, r2
 80090ae:	095b      	lsrs	r3, r3, #5
 80090b0:	2064      	movs	r0, #100	; 0x64
 80090b2:	fb00 f303 	mul.w	r3, r0, r3
 80090b6:	1ad3      	subs	r3, r2, r3
 80090b8:	011b      	lsls	r3, r3, #4
 80090ba:	3332      	adds	r3, #50	; 0x32
 80090bc:	4a2f      	ldr	r2, [pc, #188]	; (800917c <UART_SetConfig+0x1b0>)
 80090be:	fba2 2303 	umull	r2, r3, r2, r3
 80090c2:	095b      	lsrs	r3, r3, #5
 80090c4:	f003 020f 	and.w	r2, r3, #15
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	440a      	add	r2, r1
 80090ce:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80090d0:	e04d      	b.n	800916e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 80090d2:	f7ff fae3 	bl	800869c <HAL_RCC_GetPCLK1Freq>
 80090d6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80090d8:	68ba      	ldr	r2, [r7, #8]
 80090da:	4613      	mov	r3, r2
 80090dc:	009b      	lsls	r3, r3, #2
 80090de:	4413      	add	r3, r2
 80090e0:	009a      	lsls	r2, r3, #2
 80090e2:	441a      	add	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	685b      	ldr	r3, [r3, #4]
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ee:	4a23      	ldr	r2, [pc, #140]	; (800917c <UART_SetConfig+0x1b0>)
 80090f0:	fba2 2303 	umull	r2, r3, r2, r3
 80090f4:	095b      	lsrs	r3, r3, #5
 80090f6:	0119      	lsls	r1, r3, #4
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	4613      	mov	r3, r2
 80090fc:	009b      	lsls	r3, r3, #2
 80090fe:	4413      	add	r3, r2
 8009100:	009a      	lsls	r2, r3, #2
 8009102:	441a      	add	r2, r3
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	685b      	ldr	r3, [r3, #4]
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	fbb2 f2f3 	udiv	r2, r2, r3
 800910e:	4b1b      	ldr	r3, [pc, #108]	; (800917c <UART_SetConfig+0x1b0>)
 8009110:	fba3 0302 	umull	r0, r3, r3, r2
 8009114:	095b      	lsrs	r3, r3, #5
 8009116:	2064      	movs	r0, #100	; 0x64
 8009118:	fb00 f303 	mul.w	r3, r0, r3
 800911c:	1ad3      	subs	r3, r2, r3
 800911e:	011b      	lsls	r3, r3, #4
 8009120:	3332      	adds	r3, #50	; 0x32
 8009122:	4a16      	ldr	r2, [pc, #88]	; (800917c <UART_SetConfig+0x1b0>)
 8009124:	fba2 2303 	umull	r2, r3, r2, r3
 8009128:	095b      	lsrs	r3, r3, #5
 800912a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800912e:	4419      	add	r1, r3
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	4613      	mov	r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	4413      	add	r3, r2
 8009138:	009a      	lsls	r2, r3, #2
 800913a:	441a      	add	r2, r3
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	fbb2 f2f3 	udiv	r2, r2, r3
 8009146:	4b0d      	ldr	r3, [pc, #52]	; (800917c <UART_SetConfig+0x1b0>)
 8009148:	fba3 0302 	umull	r0, r3, r3, r2
 800914c:	095b      	lsrs	r3, r3, #5
 800914e:	2064      	movs	r0, #100	; 0x64
 8009150:	fb00 f303 	mul.w	r3, r0, r3
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	011b      	lsls	r3, r3, #4
 8009158:	3332      	adds	r3, #50	; 0x32
 800915a:	4a08      	ldr	r2, [pc, #32]	; (800917c <UART_SetConfig+0x1b0>)
 800915c:	fba2 2303 	umull	r2, r3, r2, r3
 8009160:	095b      	lsrs	r3, r3, #5
 8009162:	f003 020f 	and.w	r2, r3, #15
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	440a      	add	r2, r1
 800916c:	609a      	str	r2, [r3, #8]
}
 800916e:	bf00      	nop
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	40013800 	.word	0x40013800
 800917c:	51eb851f 	.word	0x51eb851f

08009180 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
 8009186:	4603      	mov	r3, r0
 8009188:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800918a:	2300      	movs	r3, #0
 800918c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800918e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009192:	2b84      	cmp	r3, #132	; 0x84
 8009194:	d005      	beq.n	80091a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009196:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	4413      	add	r3, r2
 800919e:	3303      	adds	r3, #3
 80091a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80091a2:	68fb      	ldr	r3, [r7, #12]
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3714      	adds	r7, #20
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bc80      	pop	{r7}
 80091ac:	4770      	bx	lr

080091ae <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80091b2:	f000 facd 	bl	8009750 <vTaskStartScheduler>
  
  return osOK;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	bd80      	pop	{r7, pc}

080091bc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80091bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80091be:	b089      	sub	sp, #36	; 0x24
 80091c0:	af04      	add	r7, sp, #16
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	695b      	ldr	r3, [r3, #20]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d020      	beq.n	8009210 <osThreadCreate+0x54>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	699b      	ldr	r3, [r3, #24]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d01c      	beq.n	8009210 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	685c      	ldr	r4, [r3, #4]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681d      	ldr	r5, [r3, #0]
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	691e      	ldr	r6, [r3, #16]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7ff ffc9 	bl	8009180 <makeFreeRtosPriority>
 80091ee:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	695b      	ldr	r3, [r3, #20]
 80091f4:	687a      	ldr	r2, [r7, #4]
 80091f6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80091f8:	9202      	str	r2, [sp, #8]
 80091fa:	9301      	str	r3, [sp, #4]
 80091fc:	9100      	str	r1, [sp, #0]
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	4632      	mov	r2, r6
 8009202:	4629      	mov	r1, r5
 8009204:	4620      	mov	r0, r4
 8009206:	f000 f8e8 	bl	80093da <xTaskCreateStatic>
 800920a:	4603      	mov	r3, r0
 800920c:	60fb      	str	r3, [r7, #12]
 800920e:	e01c      	b.n	800924a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685c      	ldr	r4, [r3, #4]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800921c:	b29e      	uxth	r6, r3
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009224:	4618      	mov	r0, r3
 8009226:	f7ff ffab 	bl	8009180 <makeFreeRtosPriority>
 800922a:	4602      	mov	r2, r0
 800922c:	f107 030c 	add.w	r3, r7, #12
 8009230:	9301      	str	r3, [sp, #4]
 8009232:	9200      	str	r2, [sp, #0]
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	4632      	mov	r2, r6
 8009238:	4629      	mov	r1, r5
 800923a:	4620      	mov	r0, r4
 800923c:	f000 f926 	bl	800948c <xTaskCreate>
 8009240:	4603      	mov	r3, r0
 8009242:	2b01      	cmp	r3, #1
 8009244:	d001      	beq.n	800924a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009246:	2300      	movs	r3, #0
 8009248:	e000      	b.n	800924c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800924a:	68fb      	ldr	r3, [r7, #12]
}
 800924c:	4618      	mov	r0, r3
 800924e:	3714      	adds	r7, #20
 8009250:	46bd      	mov	sp, r7
 8009252:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009254 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d001      	beq.n	800926a <osDelay+0x16>
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	e000      	b.n	800926c <osDelay+0x18>
 800926a:	2301      	movs	r3, #1
 800926c:	4618      	mov	r0, r3
 800926e:	f000 fa3b 	bl	80096e8 <vTaskDelay>
  
  return osOK;
 8009272:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009274:	4618      	mov	r0, r3
 8009276:	3710      	adds	r7, #16
 8009278:	46bd      	mov	sp, r7
 800927a:	bd80      	pop	{r7, pc}

0800927c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f103 0208 	add.w	r2, r3, #8
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009294:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	f103 0208 	add.w	r2, r3, #8
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f103 0208 	add.w	r2, r3, #8
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80092b0:	bf00      	nop
 80092b2:	370c      	adds	r7, #12
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bc80      	pop	{r7}
 80092b8:	4770      	bx	lr

080092ba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80092ba:	b480      	push	{r7}
 80092bc:	b083      	sub	sp, #12
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2200      	movs	r2, #0
 80092c6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80092c8:	bf00      	nop
 80092ca:	370c      	adds	r7, #12
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bc80      	pop	{r7}
 80092d0:	4770      	bx	lr

080092d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80092d2:	b480      	push	{r7}
 80092d4:	b085      	sub	sp, #20
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	6078      	str	r0, [r7, #4]
 80092da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	689a      	ldr	r2, [r3, #8]
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	683a      	ldr	r2, [r7, #0]
 80092f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	683a      	ldr	r2, [r7, #0]
 80092fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	687a      	ldr	r2, [r7, #4]
 8009302:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	1c5a      	adds	r2, r3, #1
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	601a      	str	r2, [r3, #0]
}
 800930e:	bf00      	nop
 8009310:	3714      	adds	r7, #20
 8009312:	46bd      	mov	sp, r7
 8009314:	bc80      	pop	{r7}
 8009316:	4770      	bx	lr

08009318 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009318:	b480      	push	{r7}
 800931a:	b085      	sub	sp, #20
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800932e:	d103      	bne.n	8009338 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	691b      	ldr	r3, [r3, #16]
 8009334:	60fb      	str	r3, [r7, #12]
 8009336:	e00c      	b.n	8009352 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	3308      	adds	r3, #8
 800933c:	60fb      	str	r3, [r7, #12]
 800933e:	e002      	b.n	8009346 <vListInsert+0x2e>
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	60fb      	str	r3, [r7, #12]
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	429a      	cmp	r2, r3
 8009350:	d2f6      	bcs.n	8009340 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	685a      	ldr	r2, [r3, #4]
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	683a      	ldr	r2, [r7, #0]
 8009360:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	683a      	ldr	r2, [r7, #0]
 800936c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	1c5a      	adds	r2, r3, #1
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	601a      	str	r2, [r3, #0]
}
 800937e:	bf00      	nop
 8009380:	3714      	adds	r7, #20
 8009382:	46bd      	mov	sp, r7
 8009384:	bc80      	pop	{r7}
 8009386:	4770      	bx	lr

08009388 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009388:	b480      	push	{r7}
 800938a:	b085      	sub	sp, #20
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	691b      	ldr	r3, [r3, #16]
 8009394:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	685b      	ldr	r3, [r3, #4]
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	6892      	ldr	r2, [r2, #8]
 800939e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	689b      	ldr	r3, [r3, #8]
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	6852      	ldr	r2, [r2, #4]
 80093a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d103      	bne.n	80093bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	689a      	ldr	r2, [r3, #8]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2200      	movs	r2, #0
 80093c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	1e5a      	subs	r2, r3, #1
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3714      	adds	r7, #20
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bc80      	pop	{r7}
 80093d8:	4770      	bx	lr

080093da <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b08e      	sub	sp, #56	; 0x38
 80093de:	af04      	add	r7, sp, #16
 80093e0:	60f8      	str	r0, [r7, #12]
 80093e2:	60b9      	str	r1, [r7, #8]
 80093e4:	607a      	str	r2, [r7, #4]
 80093e6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80093e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d109      	bne.n	8009402 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80093ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f2:	f383 8811 	msr	BASEPRI, r3
 80093f6:	f3bf 8f6f 	isb	sy
 80093fa:	f3bf 8f4f 	dsb	sy
 80093fe:	623b      	str	r3, [r7, #32]
 8009400:	e7fe      	b.n	8009400 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009404:	2b00      	cmp	r3, #0
 8009406:	d109      	bne.n	800941c <xTaskCreateStatic+0x42>
 8009408:	f04f 0350 	mov.w	r3, #80	; 0x50
 800940c:	f383 8811 	msr	BASEPRI, r3
 8009410:	f3bf 8f6f 	isb	sy
 8009414:	f3bf 8f4f 	dsb	sy
 8009418:	61fb      	str	r3, [r7, #28]
 800941a:	e7fe      	b.n	800941a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800941c:	2354      	movs	r3, #84	; 0x54
 800941e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	2b54      	cmp	r3, #84	; 0x54
 8009424:	d009      	beq.n	800943a <xTaskCreateStatic+0x60>
 8009426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942a:	f383 8811 	msr	BASEPRI, r3
 800942e:	f3bf 8f6f 	isb	sy
 8009432:	f3bf 8f4f 	dsb	sy
 8009436:	61bb      	str	r3, [r7, #24]
 8009438:	e7fe      	b.n	8009438 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800943a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800943c:	2b00      	cmp	r3, #0
 800943e:	d01e      	beq.n	800947e <xTaskCreateStatic+0xa4>
 8009440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009442:	2b00      	cmp	r3, #0
 8009444:	d01b      	beq.n	800947e <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009448:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800944a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800944e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009452:	2202      	movs	r2, #2
 8009454:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009458:	2300      	movs	r3, #0
 800945a:	9303      	str	r3, [sp, #12]
 800945c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800945e:	9302      	str	r3, [sp, #8]
 8009460:	f107 0314 	add.w	r3, r7, #20
 8009464:	9301      	str	r3, [sp, #4]
 8009466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	687a      	ldr	r2, [r7, #4]
 800946e:	68b9      	ldr	r1, [r7, #8]
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f000 f850 	bl	8009516 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009476:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009478:	f000 f8cc 	bl	8009614 <prvAddNewTaskToReadyList>
 800947c:	e001      	b.n	8009482 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800947e:	2300      	movs	r3, #0
 8009480:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009482:	697b      	ldr	r3, [r7, #20]
	}
 8009484:	4618      	mov	r0, r3
 8009486:	3728      	adds	r7, #40	; 0x28
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800948c:	b580      	push	{r7, lr}
 800948e:	b08c      	sub	sp, #48	; 0x30
 8009490:	af04      	add	r7, sp, #16
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	603b      	str	r3, [r7, #0]
 8009498:	4613      	mov	r3, r2
 800949a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800949c:	88fb      	ldrh	r3, [r7, #6]
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	4618      	mov	r0, r3
 80094a2:	f000 fe73 	bl	800a18c <pvPortMalloc>
 80094a6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00e      	beq.n	80094cc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80094ae:	2054      	movs	r0, #84	; 0x54
 80094b0:	f000 fe6c 	bl	800a18c <pvPortMalloc>
 80094b4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d003      	beq.n	80094c4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80094bc:	69fb      	ldr	r3, [r7, #28]
 80094be:	697a      	ldr	r2, [r7, #20]
 80094c0:	631a      	str	r2, [r3, #48]	; 0x30
 80094c2:	e005      	b.n	80094d0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80094c4:	6978      	ldr	r0, [r7, #20]
 80094c6:	f000 ff23 	bl	800a310 <vPortFree>
 80094ca:	e001      	b.n	80094d0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80094cc:	2300      	movs	r3, #0
 80094ce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d017      	beq.n	8009506 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	2200      	movs	r2, #0
 80094da:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80094de:	88fa      	ldrh	r2, [r7, #6]
 80094e0:	2300      	movs	r3, #0
 80094e2:	9303      	str	r3, [sp, #12]
 80094e4:	69fb      	ldr	r3, [r7, #28]
 80094e6:	9302      	str	r3, [sp, #8]
 80094e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094ea:	9301      	str	r3, [sp, #4]
 80094ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094ee:	9300      	str	r3, [sp, #0]
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	68b9      	ldr	r1, [r7, #8]
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f000 f80e 	bl	8009516 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80094fa:	69f8      	ldr	r0, [r7, #28]
 80094fc:	f000 f88a 	bl	8009614 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009500:	2301      	movs	r3, #1
 8009502:	61bb      	str	r3, [r7, #24]
 8009504:	e002      	b.n	800950c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800950a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800950c:	69bb      	ldr	r3, [r7, #24]
	}
 800950e:	4618      	mov	r0, r3
 8009510:	3720      	adds	r7, #32
 8009512:	46bd      	mov	sp, r7
 8009514:	bd80      	pop	{r7, pc}

08009516 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009516:	b580      	push	{r7, lr}
 8009518:	b088      	sub	sp, #32
 800951a:	af00      	add	r7, sp, #0
 800951c:	60f8      	str	r0, [r7, #12]
 800951e:	60b9      	str	r1, [r7, #8]
 8009520:	607a      	str	r2, [r7, #4]
 8009522:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8009524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800952e:	3b01      	subs	r3, #1
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	4413      	add	r3, r2
 8009534:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	f023 0307 	bic.w	r3, r3, #7
 800953c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800953e:	69bb      	ldr	r3, [r7, #24]
 8009540:	f003 0307 	and.w	r3, r3, #7
 8009544:	2b00      	cmp	r3, #0
 8009546:	d009      	beq.n	800955c <prvInitialiseNewTask+0x46>
 8009548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954c:	f383 8811 	msr	BASEPRI, r3
 8009550:	f3bf 8f6f 	isb	sy
 8009554:	f3bf 8f4f 	dsb	sy
 8009558:	617b      	str	r3, [r7, #20]
 800955a:	e7fe      	b.n	800955a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800955c:	2300      	movs	r3, #0
 800955e:	61fb      	str	r3, [r7, #28]
 8009560:	e012      	b.n	8009588 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009562:	68ba      	ldr	r2, [r7, #8]
 8009564:	69fb      	ldr	r3, [r7, #28]
 8009566:	4413      	add	r3, r2
 8009568:	7819      	ldrb	r1, [r3, #0]
 800956a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	4413      	add	r3, r2
 8009570:	3334      	adds	r3, #52	; 0x34
 8009572:	460a      	mov	r2, r1
 8009574:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8009576:	68ba      	ldr	r2, [r7, #8]
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	4413      	add	r3, r2
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d006      	beq.n	8009590 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009582:	69fb      	ldr	r3, [r7, #28]
 8009584:	3301      	adds	r3, #1
 8009586:	61fb      	str	r3, [r7, #28]
 8009588:	69fb      	ldr	r3, [r7, #28]
 800958a:	2b0f      	cmp	r3, #15
 800958c:	d9e9      	bls.n	8009562 <prvInitialiseNewTask+0x4c>
 800958e:	e000      	b.n	8009592 <prvInitialiseNewTask+0x7c>
		{
			break;
 8009590:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009594:	2200      	movs	r2, #0
 8009596:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800959a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800959c:	2b06      	cmp	r3, #6
 800959e:	d901      	bls.n	80095a4 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80095a0:	2306      	movs	r3, #6
 80095a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80095a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80095aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80095ae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80095b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b2:	2200      	movs	r2, #0
 80095b4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80095b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095b8:	3304      	adds	r3, #4
 80095ba:	4618      	mov	r0, r3
 80095bc:	f7ff fe7d 	bl	80092ba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80095c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c2:	3318      	adds	r3, #24
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7ff fe78 	bl	80092ba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80095ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d2:	f1c3 0207 	rsb	r2, r3, #7
 80095d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80095da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80095de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80095e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e2:	2200      	movs	r2, #0
 80095e4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80095e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80095ee:	683a      	ldr	r2, [r7, #0]
 80095f0:	68f9      	ldr	r1, [r7, #12]
 80095f2:	69b8      	ldr	r0, [r7, #24]
 80095f4:	f000 fc24 	bl	8009e40 <pxPortInitialiseStack>
 80095f8:	4602      	mov	r2, r0
 80095fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80095fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009600:	2b00      	cmp	r3, #0
 8009602:	d002      	beq.n	800960a <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009606:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009608:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800960a:	bf00      	nop
 800960c:	3720      	adds	r7, #32
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
	...

08009614 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800961c:	f000 fcfc 	bl	800a018 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009620:	4b2a      	ldr	r3, [pc, #168]	; (80096cc <prvAddNewTaskToReadyList+0xb8>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	3301      	adds	r3, #1
 8009626:	4a29      	ldr	r2, [pc, #164]	; (80096cc <prvAddNewTaskToReadyList+0xb8>)
 8009628:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800962a:	4b29      	ldr	r3, [pc, #164]	; (80096d0 <prvAddNewTaskToReadyList+0xbc>)
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d109      	bne.n	8009646 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009632:	4a27      	ldr	r2, [pc, #156]	; (80096d0 <prvAddNewTaskToReadyList+0xbc>)
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009638:	4b24      	ldr	r3, [pc, #144]	; (80096cc <prvAddNewTaskToReadyList+0xb8>)
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	2b01      	cmp	r3, #1
 800963e:	d110      	bne.n	8009662 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009640:	f000 fabc 	bl	8009bbc <prvInitialiseTaskLists>
 8009644:	e00d      	b.n	8009662 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009646:	4b23      	ldr	r3, [pc, #140]	; (80096d4 <prvAddNewTaskToReadyList+0xc0>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d109      	bne.n	8009662 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800964e:	4b20      	ldr	r3, [pc, #128]	; (80096d0 <prvAddNewTaskToReadyList+0xbc>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009658:	429a      	cmp	r2, r3
 800965a:	d802      	bhi.n	8009662 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800965c:	4a1c      	ldr	r2, [pc, #112]	; (80096d0 <prvAddNewTaskToReadyList+0xbc>)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009662:	4b1d      	ldr	r3, [pc, #116]	; (80096d8 <prvAddNewTaskToReadyList+0xc4>)
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	3301      	adds	r3, #1
 8009668:	4a1b      	ldr	r2, [pc, #108]	; (80096d8 <prvAddNewTaskToReadyList+0xc4>)
 800966a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009670:	2201      	movs	r2, #1
 8009672:	409a      	lsls	r2, r3
 8009674:	4b19      	ldr	r3, [pc, #100]	; (80096dc <prvAddNewTaskToReadyList+0xc8>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4313      	orrs	r3, r2
 800967a:	4a18      	ldr	r2, [pc, #96]	; (80096dc <prvAddNewTaskToReadyList+0xc8>)
 800967c:	6013      	str	r3, [r2, #0]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009682:	4613      	mov	r3, r2
 8009684:	009b      	lsls	r3, r3, #2
 8009686:	4413      	add	r3, r2
 8009688:	009b      	lsls	r3, r3, #2
 800968a:	4a15      	ldr	r2, [pc, #84]	; (80096e0 <prvAddNewTaskToReadyList+0xcc>)
 800968c:	441a      	add	r2, r3
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	3304      	adds	r3, #4
 8009692:	4619      	mov	r1, r3
 8009694:	4610      	mov	r0, r2
 8009696:	f7ff fe1c 	bl	80092d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800969a:	f000 fceb 	bl	800a074 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800969e:	4b0d      	ldr	r3, [pc, #52]	; (80096d4 <prvAddNewTaskToReadyList+0xc0>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d00e      	beq.n	80096c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80096a6:	4b0a      	ldr	r3, [pc, #40]	; (80096d0 <prvAddNewTaskToReadyList+0xbc>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d207      	bcs.n	80096c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80096b4:	4b0b      	ldr	r3, [pc, #44]	; (80096e4 <prvAddNewTaskToReadyList+0xd0>)
 80096b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80096ba:	601a      	str	r2, [r3, #0]
 80096bc:	f3bf 8f4f 	dsb	sy
 80096c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096c4:	bf00      	nop
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}
 80096cc:	200004f4 	.word	0x200004f4
 80096d0:	200003f4 	.word	0x200003f4
 80096d4:	20000500 	.word	0x20000500
 80096d8:	20000510 	.word	0x20000510
 80096dc:	200004fc 	.word	0x200004fc
 80096e0:	200003f8 	.word	0x200003f8
 80096e4:	e000ed04 	.word	0xe000ed04

080096e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80096f0:	2300      	movs	r3, #0
 80096f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d016      	beq.n	8009728 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80096fa:	4b13      	ldr	r3, [pc, #76]	; (8009748 <vTaskDelay+0x60>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d009      	beq.n	8009716 <vTaskDelay+0x2e>
 8009702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009706:	f383 8811 	msr	BASEPRI, r3
 800970a:	f3bf 8f6f 	isb	sy
 800970e:	f3bf 8f4f 	dsb	sy
 8009712:	60bb      	str	r3, [r7, #8]
 8009714:	e7fe      	b.n	8009714 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009716:	f000 f879 	bl	800980c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800971a:	2100      	movs	r1, #0
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fb29 	bl	8009d74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009722:	f000 f881 	bl	8009828 <xTaskResumeAll>
 8009726:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d107      	bne.n	800973e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800972e:	4b07      	ldr	r3, [pc, #28]	; (800974c <vTaskDelay+0x64>)
 8009730:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009734:	601a      	str	r2, [r3, #0]
 8009736:	f3bf 8f4f 	dsb	sy
 800973a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800973e:	bf00      	nop
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
 8009746:	bf00      	nop
 8009748:	2000051c 	.word	0x2000051c
 800974c:	e000ed04 	.word	0xe000ed04

08009750 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b08a      	sub	sp, #40	; 0x28
 8009754:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009756:	2300      	movs	r3, #0
 8009758:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800975a:	2300      	movs	r3, #0
 800975c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800975e:	463a      	mov	r2, r7
 8009760:	1d39      	adds	r1, r7, #4
 8009762:	f107 0308 	add.w	r3, r7, #8
 8009766:	4618      	mov	r0, r3
 8009768:	f7f9 fb18 	bl	8002d9c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800976c:	6839      	ldr	r1, [r7, #0]
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	68ba      	ldr	r2, [r7, #8]
 8009772:	9202      	str	r2, [sp, #8]
 8009774:	9301      	str	r3, [sp, #4]
 8009776:	2300      	movs	r3, #0
 8009778:	9300      	str	r3, [sp, #0]
 800977a:	2300      	movs	r3, #0
 800977c:	460a      	mov	r2, r1
 800977e:	491d      	ldr	r1, [pc, #116]	; (80097f4 <vTaskStartScheduler+0xa4>)
 8009780:	481d      	ldr	r0, [pc, #116]	; (80097f8 <vTaskStartScheduler+0xa8>)
 8009782:	f7ff fe2a 	bl	80093da <xTaskCreateStatic>
 8009786:	4602      	mov	r2, r0
 8009788:	4b1c      	ldr	r3, [pc, #112]	; (80097fc <vTaskStartScheduler+0xac>)
 800978a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800978c:	4b1b      	ldr	r3, [pc, #108]	; (80097fc <vTaskStartScheduler+0xac>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d002      	beq.n	800979a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009794:	2301      	movs	r3, #1
 8009796:	617b      	str	r3, [r7, #20]
 8009798:	e001      	b.n	800979e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800979a:	2300      	movs	r3, #0
 800979c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800979e:	697b      	ldr	r3, [r7, #20]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d115      	bne.n	80097d0 <vTaskStartScheduler+0x80>
 80097a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a8:	f383 8811 	msr	BASEPRI, r3
 80097ac:	f3bf 8f6f 	isb	sy
 80097b0:	f3bf 8f4f 	dsb	sy
 80097b4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80097b6:	4b12      	ldr	r3, [pc, #72]	; (8009800 <vTaskStartScheduler+0xb0>)
 80097b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80097bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80097be:	4b11      	ldr	r3, [pc, #68]	; (8009804 <vTaskStartScheduler+0xb4>)
 80097c0:	2201      	movs	r2, #1
 80097c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80097c4:	4b10      	ldr	r3, [pc, #64]	; (8009808 <vTaskStartScheduler+0xb8>)
 80097c6:	2200      	movs	r2, #0
 80097c8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80097ca:	f000 fbb5 	bl	8009f38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80097ce:	e00d      	b.n	80097ec <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097d6:	d109      	bne.n	80097ec <vTaskStartScheduler+0x9c>
 80097d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097dc:	f383 8811 	msr	BASEPRI, r3
 80097e0:	f3bf 8f6f 	isb	sy
 80097e4:	f3bf 8f4f 	dsb	sy
 80097e8:	60fb      	str	r3, [r7, #12]
 80097ea:	e7fe      	b.n	80097ea <vTaskStartScheduler+0x9a>
}
 80097ec:	bf00      	nop
 80097ee:	3718      	adds	r7, #24
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	0800c5a4 	.word	0x0800c5a4
 80097f8:	08009b8d 	.word	0x08009b8d
 80097fc:	20000518 	.word	0x20000518
 8009800:	20000514 	.word	0x20000514
 8009804:	20000500 	.word	0x20000500
 8009808:	200004f8 	.word	0x200004f8

0800980c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800980c:	b480      	push	{r7}
 800980e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009810:	4b04      	ldr	r3, [pc, #16]	; (8009824 <vTaskSuspendAll+0x18>)
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	3301      	adds	r3, #1
 8009816:	4a03      	ldr	r2, [pc, #12]	; (8009824 <vTaskSuspendAll+0x18>)
 8009818:	6013      	str	r3, [r2, #0]
}
 800981a:	bf00      	nop
 800981c:	46bd      	mov	sp, r7
 800981e:	bc80      	pop	{r7}
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	2000051c 	.word	0x2000051c

08009828 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b084      	sub	sp, #16
 800982c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800982e:	2300      	movs	r3, #0
 8009830:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009832:	2300      	movs	r3, #0
 8009834:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009836:	4b41      	ldr	r3, [pc, #260]	; (800993c <xTaskResumeAll+0x114>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d109      	bne.n	8009852 <xTaskResumeAll+0x2a>
 800983e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009842:	f383 8811 	msr	BASEPRI, r3
 8009846:	f3bf 8f6f 	isb	sy
 800984a:	f3bf 8f4f 	dsb	sy
 800984e:	603b      	str	r3, [r7, #0]
 8009850:	e7fe      	b.n	8009850 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009852:	f000 fbe1 	bl	800a018 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009856:	4b39      	ldr	r3, [pc, #228]	; (800993c <xTaskResumeAll+0x114>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	3b01      	subs	r3, #1
 800985c:	4a37      	ldr	r2, [pc, #220]	; (800993c <xTaskResumeAll+0x114>)
 800985e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009860:	4b36      	ldr	r3, [pc, #216]	; (800993c <xTaskResumeAll+0x114>)
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2b00      	cmp	r3, #0
 8009866:	d161      	bne.n	800992c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009868:	4b35      	ldr	r3, [pc, #212]	; (8009940 <xTaskResumeAll+0x118>)
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d05d      	beq.n	800992c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009870:	e02e      	b.n	80098d0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009872:	4b34      	ldr	r3, [pc, #208]	; (8009944 <xTaskResumeAll+0x11c>)
 8009874:	68db      	ldr	r3, [r3, #12]
 8009876:	68db      	ldr	r3, [r3, #12]
 8009878:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	3318      	adds	r3, #24
 800987e:	4618      	mov	r0, r3
 8009880:	f7ff fd82 	bl	8009388 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	3304      	adds	r3, #4
 8009888:	4618      	mov	r0, r3
 800988a:	f7ff fd7d 	bl	8009388 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009892:	2201      	movs	r2, #1
 8009894:	409a      	lsls	r2, r3
 8009896:	4b2c      	ldr	r3, [pc, #176]	; (8009948 <xTaskResumeAll+0x120>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	4313      	orrs	r3, r2
 800989c:	4a2a      	ldr	r2, [pc, #168]	; (8009948 <xTaskResumeAll+0x120>)
 800989e:	6013      	str	r3, [r2, #0]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a4:	4613      	mov	r3, r2
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	4413      	add	r3, r2
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	4a27      	ldr	r2, [pc, #156]	; (800994c <xTaskResumeAll+0x124>)
 80098ae:	441a      	add	r2, r3
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	3304      	adds	r3, #4
 80098b4:	4619      	mov	r1, r3
 80098b6:	4610      	mov	r0, r2
 80098b8:	f7ff fd0b 	bl	80092d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098c0:	4b23      	ldr	r3, [pc, #140]	; (8009950 <xTaskResumeAll+0x128>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098c6:	429a      	cmp	r2, r3
 80098c8:	d302      	bcc.n	80098d0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80098ca:	4b22      	ldr	r3, [pc, #136]	; (8009954 <xTaskResumeAll+0x12c>)
 80098cc:	2201      	movs	r2, #1
 80098ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80098d0:	4b1c      	ldr	r3, [pc, #112]	; (8009944 <xTaskResumeAll+0x11c>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d1cc      	bne.n	8009872 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d001      	beq.n	80098e2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80098de:	f000 fa07 	bl	8009cf0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80098e2:	4b1d      	ldr	r3, [pc, #116]	; (8009958 <xTaskResumeAll+0x130>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d010      	beq.n	8009910 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80098ee:	f000 f837 	bl	8009960 <xTaskIncrementTick>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d002      	beq.n	80098fe <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80098f8:	4b16      	ldr	r3, [pc, #88]	; (8009954 <xTaskResumeAll+0x12c>)
 80098fa:	2201      	movs	r2, #1
 80098fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	3b01      	subs	r3, #1
 8009902:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1f1      	bne.n	80098ee <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800990a:	4b13      	ldr	r3, [pc, #76]	; (8009958 <xTaskResumeAll+0x130>)
 800990c:	2200      	movs	r2, #0
 800990e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009910:	4b10      	ldr	r3, [pc, #64]	; (8009954 <xTaskResumeAll+0x12c>)
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d009      	beq.n	800992c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009918:	2301      	movs	r3, #1
 800991a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800991c:	4b0f      	ldr	r3, [pc, #60]	; (800995c <xTaskResumeAll+0x134>)
 800991e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009922:	601a      	str	r2, [r3, #0]
 8009924:	f3bf 8f4f 	dsb	sy
 8009928:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800992c:	f000 fba2 	bl	800a074 <vPortExitCritical>

	return xAlreadyYielded;
 8009930:	68bb      	ldr	r3, [r7, #8]
}
 8009932:	4618      	mov	r0, r3
 8009934:	3710      	adds	r7, #16
 8009936:	46bd      	mov	sp, r7
 8009938:	bd80      	pop	{r7, pc}
 800993a:	bf00      	nop
 800993c:	2000051c 	.word	0x2000051c
 8009940:	200004f4 	.word	0x200004f4
 8009944:	200004b4 	.word	0x200004b4
 8009948:	200004fc 	.word	0x200004fc
 800994c:	200003f8 	.word	0x200003f8
 8009950:	200003f4 	.word	0x200003f4
 8009954:	20000508 	.word	0x20000508
 8009958:	20000504 	.word	0x20000504
 800995c:	e000ed04 	.word	0xe000ed04

08009960 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b086      	sub	sp, #24
 8009964:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009966:	2300      	movs	r3, #0
 8009968:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800996a:	4b50      	ldr	r3, [pc, #320]	; (8009aac <xTaskIncrementTick+0x14c>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	f040 808c 	bne.w	8009a8c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009974:	4b4e      	ldr	r3, [pc, #312]	; (8009ab0 <xTaskIncrementTick+0x150>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	3301      	adds	r3, #1
 800997a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800997c:	4a4c      	ldr	r2, [pc, #304]	; (8009ab0 <xTaskIncrementTick+0x150>)
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d11f      	bne.n	80099c8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8009988:	4b4a      	ldr	r3, [pc, #296]	; (8009ab4 <xTaskIncrementTick+0x154>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d009      	beq.n	80099a6 <xTaskIncrementTick+0x46>
 8009992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009996:	f383 8811 	msr	BASEPRI, r3
 800999a:	f3bf 8f6f 	isb	sy
 800999e:	f3bf 8f4f 	dsb	sy
 80099a2:	603b      	str	r3, [r7, #0]
 80099a4:	e7fe      	b.n	80099a4 <xTaskIncrementTick+0x44>
 80099a6:	4b43      	ldr	r3, [pc, #268]	; (8009ab4 <xTaskIncrementTick+0x154>)
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	60fb      	str	r3, [r7, #12]
 80099ac:	4b42      	ldr	r3, [pc, #264]	; (8009ab8 <xTaskIncrementTick+0x158>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a40      	ldr	r2, [pc, #256]	; (8009ab4 <xTaskIncrementTick+0x154>)
 80099b2:	6013      	str	r3, [r2, #0]
 80099b4:	4a40      	ldr	r2, [pc, #256]	; (8009ab8 <xTaskIncrementTick+0x158>)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	6013      	str	r3, [r2, #0]
 80099ba:	4b40      	ldr	r3, [pc, #256]	; (8009abc <xTaskIncrementTick+0x15c>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	3301      	adds	r3, #1
 80099c0:	4a3e      	ldr	r2, [pc, #248]	; (8009abc <xTaskIncrementTick+0x15c>)
 80099c2:	6013      	str	r3, [r2, #0]
 80099c4:	f000 f994 	bl	8009cf0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80099c8:	4b3d      	ldr	r3, [pc, #244]	; (8009ac0 <xTaskIncrementTick+0x160>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	693a      	ldr	r2, [r7, #16]
 80099ce:	429a      	cmp	r2, r3
 80099d0:	d34d      	bcc.n	8009a6e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80099d2:	4b38      	ldr	r3, [pc, #224]	; (8009ab4 <xTaskIncrementTick+0x154>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d101      	bne.n	80099e0 <xTaskIncrementTick+0x80>
 80099dc:	2301      	movs	r3, #1
 80099de:	e000      	b.n	80099e2 <xTaskIncrementTick+0x82>
 80099e0:	2300      	movs	r3, #0
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d004      	beq.n	80099f0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099e6:	4b36      	ldr	r3, [pc, #216]	; (8009ac0 <xTaskIncrementTick+0x160>)
 80099e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099ec:	601a      	str	r2, [r3, #0]
					break;
 80099ee:	e03e      	b.n	8009a6e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80099f0:	4b30      	ldr	r3, [pc, #192]	; (8009ab4 <xTaskIncrementTick+0x154>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	68db      	ldr	r3, [r3, #12]
 80099f6:	68db      	ldr	r3, [r3, #12]
 80099f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80099fa:	68bb      	ldr	r3, [r7, #8]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009a00:	693a      	ldr	r2, [r7, #16]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d203      	bcs.n	8009a10 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009a08:	4a2d      	ldr	r2, [pc, #180]	; (8009ac0 <xTaskIncrementTick+0x160>)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6013      	str	r3, [r2, #0]
						break;
 8009a0e:	e02e      	b.n	8009a6e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	3304      	adds	r3, #4
 8009a14:	4618      	mov	r0, r3
 8009a16:	f7ff fcb7 	bl	8009388 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d004      	beq.n	8009a2c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	3318      	adds	r3, #24
 8009a26:	4618      	mov	r0, r3
 8009a28:	f7ff fcae 	bl	8009388 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a30:	2201      	movs	r2, #1
 8009a32:	409a      	lsls	r2, r3
 8009a34:	4b23      	ldr	r3, [pc, #140]	; (8009ac4 <xTaskIncrementTick+0x164>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	4a22      	ldr	r2, [pc, #136]	; (8009ac4 <xTaskIncrementTick+0x164>)
 8009a3c:	6013      	str	r3, [r2, #0]
 8009a3e:	68bb      	ldr	r3, [r7, #8]
 8009a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a42:	4613      	mov	r3, r2
 8009a44:	009b      	lsls	r3, r3, #2
 8009a46:	4413      	add	r3, r2
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	4a1f      	ldr	r2, [pc, #124]	; (8009ac8 <xTaskIncrementTick+0x168>)
 8009a4c:	441a      	add	r2, r3
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	3304      	adds	r3, #4
 8009a52:	4619      	mov	r1, r3
 8009a54:	4610      	mov	r0, r2
 8009a56:	f7ff fc3c 	bl	80092d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009a5a:	68bb      	ldr	r3, [r7, #8]
 8009a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a5e:	4b1b      	ldr	r3, [pc, #108]	; (8009acc <xTaskIncrementTick+0x16c>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d3b4      	bcc.n	80099d2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a6c:	e7b1      	b.n	80099d2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009a6e:	4b17      	ldr	r3, [pc, #92]	; (8009acc <xTaskIncrementTick+0x16c>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a74:	4914      	ldr	r1, [pc, #80]	; (8009ac8 <xTaskIncrementTick+0x168>)
 8009a76:	4613      	mov	r3, r2
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	4413      	add	r3, r2
 8009a7c:	009b      	lsls	r3, r3, #2
 8009a7e:	440b      	add	r3, r1
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d907      	bls.n	8009a96 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8009a86:	2301      	movs	r3, #1
 8009a88:	617b      	str	r3, [r7, #20]
 8009a8a:	e004      	b.n	8009a96 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009a8c:	4b10      	ldr	r3, [pc, #64]	; (8009ad0 <xTaskIncrementTick+0x170>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	3301      	adds	r3, #1
 8009a92:	4a0f      	ldr	r2, [pc, #60]	; (8009ad0 <xTaskIncrementTick+0x170>)
 8009a94:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8009a96:	4b0f      	ldr	r3, [pc, #60]	; (8009ad4 <xTaskIncrementTick+0x174>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d001      	beq.n	8009aa2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009aa2:	697b      	ldr	r3, [r7, #20]
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3718      	adds	r7, #24
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	2000051c 	.word	0x2000051c
 8009ab0:	200004f8 	.word	0x200004f8
 8009ab4:	200004ac 	.word	0x200004ac
 8009ab8:	200004b0 	.word	0x200004b0
 8009abc:	2000050c 	.word	0x2000050c
 8009ac0:	20000514 	.word	0x20000514
 8009ac4:	200004fc 	.word	0x200004fc
 8009ac8:	200003f8 	.word	0x200003f8
 8009acc:	200003f4 	.word	0x200003f4
 8009ad0:	20000504 	.word	0x20000504
 8009ad4:	20000508 	.word	0x20000508

08009ad8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b087      	sub	sp, #28
 8009adc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009ade:	4b26      	ldr	r3, [pc, #152]	; (8009b78 <vTaskSwitchContext+0xa0>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d003      	beq.n	8009aee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009ae6:	4b25      	ldr	r3, [pc, #148]	; (8009b7c <vTaskSwitchContext+0xa4>)
 8009ae8:	2201      	movs	r2, #1
 8009aea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009aec:	e03e      	b.n	8009b6c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8009aee:	4b23      	ldr	r3, [pc, #140]	; (8009b7c <vTaskSwitchContext+0xa4>)
 8009af0:	2200      	movs	r2, #0
 8009af2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009af4:	4b22      	ldr	r3, [pc, #136]	; (8009b80 <vTaskSwitchContext+0xa8>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	fab3 f383 	clz	r3, r3
 8009b00:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009b02:	7afb      	ldrb	r3, [r7, #11]
 8009b04:	f1c3 031f 	rsb	r3, r3, #31
 8009b08:	617b      	str	r3, [r7, #20]
 8009b0a:	491e      	ldr	r1, [pc, #120]	; (8009b84 <vTaskSwitchContext+0xac>)
 8009b0c:	697a      	ldr	r2, [r7, #20]
 8009b0e:	4613      	mov	r3, r2
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	4413      	add	r3, r2
 8009b14:	009b      	lsls	r3, r3, #2
 8009b16:	440b      	add	r3, r1
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d109      	bne.n	8009b32 <vTaskSwitchContext+0x5a>
	__asm volatile
 8009b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b22:	f383 8811 	msr	BASEPRI, r3
 8009b26:	f3bf 8f6f 	isb	sy
 8009b2a:	f3bf 8f4f 	dsb	sy
 8009b2e:	607b      	str	r3, [r7, #4]
 8009b30:	e7fe      	b.n	8009b30 <vTaskSwitchContext+0x58>
 8009b32:	697a      	ldr	r2, [r7, #20]
 8009b34:	4613      	mov	r3, r2
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	4413      	add	r3, r2
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	4a11      	ldr	r2, [pc, #68]	; (8009b84 <vTaskSwitchContext+0xac>)
 8009b3e:	4413      	add	r3, r2
 8009b40:	613b      	str	r3, [r7, #16]
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	685a      	ldr	r2, [r3, #4]
 8009b48:	693b      	ldr	r3, [r7, #16]
 8009b4a:	605a      	str	r2, [r3, #4]
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	685a      	ldr	r2, [r3, #4]
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	3308      	adds	r3, #8
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d104      	bne.n	8009b62 <vTaskSwitchContext+0x8a>
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	685b      	ldr	r3, [r3, #4]
 8009b5c:	685a      	ldr	r2, [r3, #4]
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	605a      	str	r2, [r3, #4]
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	68db      	ldr	r3, [r3, #12]
 8009b68:	4a07      	ldr	r2, [pc, #28]	; (8009b88 <vTaskSwitchContext+0xb0>)
 8009b6a:	6013      	str	r3, [r2, #0]
}
 8009b6c:	bf00      	nop
 8009b6e:	371c      	adds	r7, #28
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bc80      	pop	{r7}
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	2000051c 	.word	0x2000051c
 8009b7c:	20000508 	.word	0x20000508
 8009b80:	200004fc 	.word	0x200004fc
 8009b84:	200003f8 	.word	0x200003f8
 8009b88:	200003f4 	.word	0x200003f4

08009b8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009b94:	f000 f852 	bl	8009c3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009b98:	4b06      	ldr	r3, [pc, #24]	; (8009bb4 <prvIdleTask+0x28>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d9f9      	bls.n	8009b94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009ba0:	4b05      	ldr	r3, [pc, #20]	; (8009bb8 <prvIdleTask+0x2c>)
 8009ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ba6:	601a      	str	r2, [r3, #0]
 8009ba8:	f3bf 8f4f 	dsb	sy
 8009bac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009bb0:	e7f0      	b.n	8009b94 <prvIdleTask+0x8>
 8009bb2:	bf00      	nop
 8009bb4:	200003f8 	.word	0x200003f8
 8009bb8:	e000ed04 	.word	0xe000ed04

08009bbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	607b      	str	r3, [r7, #4]
 8009bc6:	e00c      	b.n	8009be2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009bc8:	687a      	ldr	r2, [r7, #4]
 8009bca:	4613      	mov	r3, r2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	4413      	add	r3, r2
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	4a12      	ldr	r2, [pc, #72]	; (8009c1c <prvInitialiseTaskLists+0x60>)
 8009bd4:	4413      	add	r3, r2
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f7ff fb50 	bl	800927c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	3301      	adds	r3, #1
 8009be0:	607b      	str	r3, [r7, #4]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2b06      	cmp	r3, #6
 8009be6:	d9ef      	bls.n	8009bc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009be8:	480d      	ldr	r0, [pc, #52]	; (8009c20 <prvInitialiseTaskLists+0x64>)
 8009bea:	f7ff fb47 	bl	800927c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009bee:	480d      	ldr	r0, [pc, #52]	; (8009c24 <prvInitialiseTaskLists+0x68>)
 8009bf0:	f7ff fb44 	bl	800927c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009bf4:	480c      	ldr	r0, [pc, #48]	; (8009c28 <prvInitialiseTaskLists+0x6c>)
 8009bf6:	f7ff fb41 	bl	800927c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009bfa:	480c      	ldr	r0, [pc, #48]	; (8009c2c <prvInitialiseTaskLists+0x70>)
 8009bfc:	f7ff fb3e 	bl	800927c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009c00:	480b      	ldr	r0, [pc, #44]	; (8009c30 <prvInitialiseTaskLists+0x74>)
 8009c02:	f7ff fb3b 	bl	800927c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009c06:	4b0b      	ldr	r3, [pc, #44]	; (8009c34 <prvInitialiseTaskLists+0x78>)
 8009c08:	4a05      	ldr	r2, [pc, #20]	; (8009c20 <prvInitialiseTaskLists+0x64>)
 8009c0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c0c:	4b0a      	ldr	r3, [pc, #40]	; (8009c38 <prvInitialiseTaskLists+0x7c>)
 8009c0e:	4a05      	ldr	r2, [pc, #20]	; (8009c24 <prvInitialiseTaskLists+0x68>)
 8009c10:	601a      	str	r2, [r3, #0]
}
 8009c12:	bf00      	nop
 8009c14:	3708      	adds	r7, #8
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop
 8009c1c:	200003f8 	.word	0x200003f8
 8009c20:	20000484 	.word	0x20000484
 8009c24:	20000498 	.word	0x20000498
 8009c28:	200004b4 	.word	0x200004b4
 8009c2c:	200004c8 	.word	0x200004c8
 8009c30:	200004e0 	.word	0x200004e0
 8009c34:	200004ac 	.word	0x200004ac
 8009c38:	200004b0 	.word	0x200004b0

08009c3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b082      	sub	sp, #8
 8009c40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c42:	e019      	b.n	8009c78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009c44:	f000 f9e8 	bl	800a018 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8009c48:	4b0f      	ldr	r3, [pc, #60]	; (8009c88 <prvCheckTasksWaitingTermination+0x4c>)
 8009c4a:	68db      	ldr	r3, [r3, #12]
 8009c4c:	68db      	ldr	r3, [r3, #12]
 8009c4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	3304      	adds	r3, #4
 8009c54:	4618      	mov	r0, r3
 8009c56:	f7ff fb97 	bl	8009388 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009c5a:	4b0c      	ldr	r3, [pc, #48]	; (8009c8c <prvCheckTasksWaitingTermination+0x50>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	3b01      	subs	r3, #1
 8009c60:	4a0a      	ldr	r2, [pc, #40]	; (8009c8c <prvCheckTasksWaitingTermination+0x50>)
 8009c62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009c64:	4b0a      	ldr	r3, [pc, #40]	; (8009c90 <prvCheckTasksWaitingTermination+0x54>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	3b01      	subs	r3, #1
 8009c6a:	4a09      	ldr	r2, [pc, #36]	; (8009c90 <prvCheckTasksWaitingTermination+0x54>)
 8009c6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009c6e:	f000 fa01 	bl	800a074 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f000 f80e 	bl	8009c94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c78:	4b05      	ldr	r3, [pc, #20]	; (8009c90 <prvCheckTasksWaitingTermination+0x54>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d1e1      	bne.n	8009c44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009c80:	bf00      	nop
 8009c82:	3708      	adds	r7, #8
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	200004c8 	.word	0x200004c8
 8009c8c:	200004f4 	.word	0x200004f4
 8009c90:	200004dc 	.word	0x200004dc

08009c94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d108      	bne.n	8009cb8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009caa:	4618      	mov	r0, r3
 8009cac:	f000 fb30 	bl	800a310 <vPortFree>
				vPortFree( pxTCB );
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 fb2d 	bl	800a310 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009cb6:	e017      	b.n	8009ce8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d103      	bne.n	8009cca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 fb24 	bl	800a310 <vPortFree>
	}
 8009cc8:	e00e      	b.n	8009ce8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	d009      	beq.n	8009ce8 <prvDeleteTCB+0x54>
 8009cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd8:	f383 8811 	msr	BASEPRI, r3
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	60fb      	str	r3, [r7, #12]
 8009ce6:	e7fe      	b.n	8009ce6 <prvDeleteTCB+0x52>
	}
 8009ce8:	bf00      	nop
 8009cea:	3710      	adds	r7, #16
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cf6:	4b0e      	ldr	r3, [pc, #56]	; (8009d30 <prvResetNextTaskUnblockTime+0x40>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d101      	bne.n	8009d04 <prvResetNextTaskUnblockTime+0x14>
 8009d00:	2301      	movs	r3, #1
 8009d02:	e000      	b.n	8009d06 <prvResetNextTaskUnblockTime+0x16>
 8009d04:	2300      	movs	r3, #0
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d004      	beq.n	8009d14 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009d0a:	4b0a      	ldr	r3, [pc, #40]	; (8009d34 <prvResetNextTaskUnblockTime+0x44>)
 8009d0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d10:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009d12:	e008      	b.n	8009d26 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009d14:	4b06      	ldr	r3, [pc, #24]	; (8009d30 <prvResetNextTaskUnblockTime+0x40>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	68db      	ldr	r3, [r3, #12]
 8009d1a:	68db      	ldr	r3, [r3, #12]
 8009d1c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	4a04      	ldr	r2, [pc, #16]	; (8009d34 <prvResetNextTaskUnblockTime+0x44>)
 8009d24:	6013      	str	r3, [r2, #0]
}
 8009d26:	bf00      	nop
 8009d28:	370c      	adds	r7, #12
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bc80      	pop	{r7}
 8009d2e:	4770      	bx	lr
 8009d30:	200004ac 	.word	0x200004ac
 8009d34:	20000514 	.word	0x20000514

08009d38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009d38:	b480      	push	{r7}
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009d3e:	4b0b      	ldr	r3, [pc, #44]	; (8009d6c <xTaskGetSchedulerState+0x34>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d102      	bne.n	8009d4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009d46:	2301      	movs	r3, #1
 8009d48:	607b      	str	r3, [r7, #4]
 8009d4a:	e008      	b.n	8009d5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d4c:	4b08      	ldr	r3, [pc, #32]	; (8009d70 <xTaskGetSchedulerState+0x38>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d102      	bne.n	8009d5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009d54:	2302      	movs	r3, #2
 8009d56:	607b      	str	r3, [r7, #4]
 8009d58:	e001      	b.n	8009d5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009d5e:	687b      	ldr	r3, [r7, #4]
	}
 8009d60:	4618      	mov	r0, r3
 8009d62:	370c      	adds	r7, #12
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bc80      	pop	{r7}
 8009d68:	4770      	bx	lr
 8009d6a:	bf00      	nop
 8009d6c:	20000500 	.word	0x20000500
 8009d70:	2000051c 	.word	0x2000051c

08009d74 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009d74:	b580      	push	{r7, lr}
 8009d76:	b084      	sub	sp, #16
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
 8009d7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009d7e:	4b29      	ldr	r3, [pc, #164]	; (8009e24 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d84:	4b28      	ldr	r3, [pc, #160]	; (8009e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	3304      	adds	r3, #4
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f7ff fafc 	bl	8009388 <uxListRemove>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d10b      	bne.n	8009dae <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8009d96:	4b24      	ldr	r3, [pc, #144]	; (8009e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009da2:	43da      	mvns	r2, r3
 8009da4:	4b21      	ldr	r3, [pc, #132]	; (8009e2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4013      	ands	r3, r2
 8009daa:	4a20      	ldr	r2, [pc, #128]	; (8009e2c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009dac:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009db4:	d10a      	bne.n	8009dcc <prvAddCurrentTaskToDelayedList+0x58>
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d007      	beq.n	8009dcc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009dbc:	4b1a      	ldr	r3, [pc, #104]	; (8009e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	3304      	adds	r3, #4
 8009dc2:	4619      	mov	r1, r3
 8009dc4:	481a      	ldr	r0, [pc, #104]	; (8009e30 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009dc6:	f7ff fa84 	bl	80092d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009dca:	e026      	b.n	8009e1a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009dcc:	68fa      	ldr	r2, [r7, #12]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4413      	add	r3, r2
 8009dd2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009dd4:	4b14      	ldr	r3, [pc, #80]	; (8009e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	68ba      	ldr	r2, [r7, #8]
 8009dda:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009ddc:	68ba      	ldr	r2, [r7, #8]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	d209      	bcs.n	8009df8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009de4:	4b13      	ldr	r3, [pc, #76]	; (8009e34 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	4b0f      	ldr	r3, [pc, #60]	; (8009e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	3304      	adds	r3, #4
 8009dee:	4619      	mov	r1, r3
 8009df0:	4610      	mov	r0, r2
 8009df2:	f7ff fa91 	bl	8009318 <vListInsert>
}
 8009df6:	e010      	b.n	8009e1a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009df8:	4b0f      	ldr	r3, [pc, #60]	; (8009e38 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009dfa:	681a      	ldr	r2, [r3, #0]
 8009dfc:	4b0a      	ldr	r3, [pc, #40]	; (8009e28 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	3304      	adds	r3, #4
 8009e02:	4619      	mov	r1, r3
 8009e04:	4610      	mov	r0, r2
 8009e06:	f7ff fa87 	bl	8009318 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e0a:	4b0c      	ldr	r3, [pc, #48]	; (8009e3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	68ba      	ldr	r2, [r7, #8]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d202      	bcs.n	8009e1a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009e14:	4a09      	ldr	r2, [pc, #36]	; (8009e3c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	6013      	str	r3, [r2, #0]
}
 8009e1a:	bf00      	nop
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
 8009e22:	bf00      	nop
 8009e24:	200004f8 	.word	0x200004f8
 8009e28:	200003f4 	.word	0x200003f4
 8009e2c:	200004fc 	.word	0x200004fc
 8009e30:	200004e0 	.word	0x200004e0
 8009e34:	200004b0 	.word	0x200004b0
 8009e38:	200004ac 	.word	0x200004ac
 8009e3c:	20000514 	.word	0x20000514

08009e40 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009e40:	b480      	push	{r7}
 8009e42:	b085      	sub	sp, #20
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	3b04      	subs	r3, #4
 8009e50:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	3b04      	subs	r3, #4
 8009e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	f023 0201 	bic.w	r2, r3, #1
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	3b04      	subs	r3, #4
 8009e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009e70:	4a08      	ldr	r2, [pc, #32]	; (8009e94 <pxPortInitialiseStack+0x54>)
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	3b14      	subs	r3, #20
 8009e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	3b20      	subs	r3, #32
 8009e86:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009e88:	68fb      	ldr	r3, [r7, #12]
}
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	3714      	adds	r7, #20
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	bc80      	pop	{r7}
 8009e92:	4770      	bx	lr
 8009e94:	08009e99 	.word	0x08009e99

08009e98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b085      	sub	sp, #20
 8009e9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009ea2:	4b10      	ldr	r3, [pc, #64]	; (8009ee4 <prvTaskExitError+0x4c>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009eaa:	d009      	beq.n	8009ec0 <prvTaskExitError+0x28>
 8009eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb0:	f383 8811 	msr	BASEPRI, r3
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	f3bf 8f4f 	dsb	sy
 8009ebc:	60fb      	str	r3, [r7, #12]
 8009ebe:	e7fe      	b.n	8009ebe <prvTaskExitError+0x26>
 8009ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ec4:	f383 8811 	msr	BASEPRI, r3
 8009ec8:	f3bf 8f6f 	isb	sy
 8009ecc:	f3bf 8f4f 	dsb	sy
 8009ed0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009ed2:	bf00      	nop
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d0fc      	beq.n	8009ed4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009eda:	bf00      	nop
 8009edc:	3714      	adds	r7, #20
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bc80      	pop	{r7}
 8009ee2:	4770      	bx	lr
 8009ee4:	20000048 	.word	0x20000048
	...

08009ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ef0:	4b07      	ldr	r3, [pc, #28]	; (8009f10 <pxCurrentTCBConst2>)
 8009ef2:	6819      	ldr	r1, [r3, #0]
 8009ef4:	6808      	ldr	r0, [r1, #0]
 8009ef6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009efa:	f380 8809 	msr	PSP, r0
 8009efe:	f3bf 8f6f 	isb	sy
 8009f02:	f04f 0000 	mov.w	r0, #0
 8009f06:	f380 8811 	msr	BASEPRI, r0
 8009f0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8009f0e:	4770      	bx	lr

08009f10 <pxCurrentTCBConst2>:
 8009f10:	200003f4 	.word	0x200003f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009f14:	bf00      	nop
 8009f16:	bf00      	nop

08009f18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009f18:	4806      	ldr	r0, [pc, #24]	; (8009f34 <prvPortStartFirstTask+0x1c>)
 8009f1a:	6800      	ldr	r0, [r0, #0]
 8009f1c:	6800      	ldr	r0, [r0, #0]
 8009f1e:	f380 8808 	msr	MSP, r0
 8009f22:	b662      	cpsie	i
 8009f24:	b661      	cpsie	f
 8009f26:	f3bf 8f4f 	dsb	sy
 8009f2a:	f3bf 8f6f 	isb	sy
 8009f2e:	df00      	svc	0
 8009f30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009f32:	bf00      	nop
 8009f34:	e000ed08 	.word	0xe000ed08

08009f38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009f3e:	4b31      	ldr	r3, [pc, #196]	; (800a004 <xPortStartScheduler+0xcc>)
 8009f40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	b2db      	uxtb	r3, r3
 8009f48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	22ff      	movs	r2, #255	; 0xff
 8009f4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	b2db      	uxtb	r3, r3
 8009f56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f58:	78fb      	ldrb	r3, [r7, #3]
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009f60:	b2da      	uxtb	r2, r3
 8009f62:	4b29      	ldr	r3, [pc, #164]	; (800a008 <xPortStartScheduler+0xd0>)
 8009f64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f66:	4b29      	ldr	r3, [pc, #164]	; (800a00c <xPortStartScheduler+0xd4>)
 8009f68:	2207      	movs	r2, #7
 8009f6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f6c:	e009      	b.n	8009f82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009f6e:	4b27      	ldr	r3, [pc, #156]	; (800a00c <xPortStartScheduler+0xd4>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	3b01      	subs	r3, #1
 8009f74:	4a25      	ldr	r2, [pc, #148]	; (800a00c <xPortStartScheduler+0xd4>)
 8009f76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f78:	78fb      	ldrb	r3, [r7, #3]
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	005b      	lsls	r3, r3, #1
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f82:	78fb      	ldrb	r3, [r7, #3]
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f8a:	2b80      	cmp	r3, #128	; 0x80
 8009f8c:	d0ef      	beq.n	8009f6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f8e:	4b1f      	ldr	r3, [pc, #124]	; (800a00c <xPortStartScheduler+0xd4>)
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f1c3 0307 	rsb	r3, r3, #7
 8009f96:	2b04      	cmp	r3, #4
 8009f98:	d009      	beq.n	8009fae <xPortStartScheduler+0x76>
 8009f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f9e:	f383 8811 	msr	BASEPRI, r3
 8009fa2:	f3bf 8f6f 	isb	sy
 8009fa6:	f3bf 8f4f 	dsb	sy
 8009faa:	60bb      	str	r3, [r7, #8]
 8009fac:	e7fe      	b.n	8009fac <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009fae:	4b17      	ldr	r3, [pc, #92]	; (800a00c <xPortStartScheduler+0xd4>)
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	021b      	lsls	r3, r3, #8
 8009fb4:	4a15      	ldr	r2, [pc, #84]	; (800a00c <xPortStartScheduler+0xd4>)
 8009fb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009fb8:	4b14      	ldr	r3, [pc, #80]	; (800a00c <xPortStartScheduler+0xd4>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009fc0:	4a12      	ldr	r2, [pc, #72]	; (800a00c <xPortStartScheduler+0xd4>)
 8009fc2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	b2da      	uxtb	r2, r3
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009fcc:	4b10      	ldr	r3, [pc, #64]	; (800a010 <xPortStartScheduler+0xd8>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a0f      	ldr	r2, [pc, #60]	; (800a010 <xPortStartScheduler+0xd8>)
 8009fd2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009fd6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009fd8:	4b0d      	ldr	r3, [pc, #52]	; (800a010 <xPortStartScheduler+0xd8>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a0c      	ldr	r2, [pc, #48]	; (800a010 <xPortStartScheduler+0xd8>)
 8009fde:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009fe2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009fe4:	f000 f8b0 	bl	800a148 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009fe8:	4b0a      	ldr	r3, [pc, #40]	; (800a014 <xPortStartScheduler+0xdc>)
 8009fea:	2200      	movs	r2, #0
 8009fec:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009fee:	f7ff ff93 	bl	8009f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009ff2:	f7ff fd71 	bl	8009ad8 <vTaskSwitchContext>
	prvTaskExitError();
 8009ff6:	f7ff ff4f 	bl	8009e98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009ffa:	2300      	movs	r3, #0
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	e000e400 	.word	0xe000e400
 800a008:	20000520 	.word	0x20000520
 800a00c:	20000524 	.word	0x20000524
 800a010:	e000ed20 	.word	0xe000ed20
 800a014:	20000048 	.word	0x20000048

0800a018 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a030:	4b0e      	ldr	r3, [pc, #56]	; (800a06c <vPortEnterCritical+0x54>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	3301      	adds	r3, #1
 800a036:	4a0d      	ldr	r2, [pc, #52]	; (800a06c <vPortEnterCritical+0x54>)
 800a038:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a03a:	4b0c      	ldr	r3, [pc, #48]	; (800a06c <vPortEnterCritical+0x54>)
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	2b01      	cmp	r3, #1
 800a040:	d10e      	bne.n	800a060 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a042:	4b0b      	ldr	r3, [pc, #44]	; (800a070 <vPortEnterCritical+0x58>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	b2db      	uxtb	r3, r3
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d009      	beq.n	800a060 <vPortEnterCritical+0x48>
 800a04c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a050:	f383 8811 	msr	BASEPRI, r3
 800a054:	f3bf 8f6f 	isb	sy
 800a058:	f3bf 8f4f 	dsb	sy
 800a05c:	603b      	str	r3, [r7, #0]
 800a05e:	e7fe      	b.n	800a05e <vPortEnterCritical+0x46>
	}
}
 800a060:	bf00      	nop
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	bc80      	pop	{r7}
 800a068:	4770      	bx	lr
 800a06a:	bf00      	nop
 800a06c:	20000048 	.word	0x20000048
 800a070:	e000ed04 	.word	0xe000ed04

0800a074 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a07a:	4b10      	ldr	r3, [pc, #64]	; (800a0bc <vPortExitCritical+0x48>)
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d109      	bne.n	800a096 <vPortExitCritical+0x22>
 800a082:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a086:	f383 8811 	msr	BASEPRI, r3
 800a08a:	f3bf 8f6f 	isb	sy
 800a08e:	f3bf 8f4f 	dsb	sy
 800a092:	607b      	str	r3, [r7, #4]
 800a094:	e7fe      	b.n	800a094 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a096:	4b09      	ldr	r3, [pc, #36]	; (800a0bc <vPortExitCritical+0x48>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	3b01      	subs	r3, #1
 800a09c:	4a07      	ldr	r2, [pc, #28]	; (800a0bc <vPortExitCritical+0x48>)
 800a09e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a0a0:	4b06      	ldr	r3, [pc, #24]	; (800a0bc <vPortExitCritical+0x48>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d104      	bne.n	800a0b2 <vPortExitCritical+0x3e>
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a0b2:	bf00      	nop
 800a0b4:	370c      	adds	r7, #12
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bc80      	pop	{r7}
 800a0ba:	4770      	bx	lr
 800a0bc:	20000048 	.word	0x20000048

0800a0c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a0c0:	f3ef 8009 	mrs	r0, PSP
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	4b0d      	ldr	r3, [pc, #52]	; (800a100 <pxCurrentTCBConst>)
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a0d0:	6010      	str	r0, [r2, #0]
 800a0d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a0d6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a0da:	f380 8811 	msr	BASEPRI, r0
 800a0de:	f7ff fcfb 	bl	8009ad8 <vTaskSwitchContext>
 800a0e2:	f04f 0000 	mov.w	r0, #0
 800a0e6:	f380 8811 	msr	BASEPRI, r0
 800a0ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a0ee:	6819      	ldr	r1, [r3, #0]
 800a0f0:	6808      	ldr	r0, [r1, #0]
 800a0f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a0f6:	f380 8809 	msr	PSP, r0
 800a0fa:	f3bf 8f6f 	isb	sy
 800a0fe:	4770      	bx	lr

0800a100 <pxCurrentTCBConst>:
 800a100:	200003f4 	.word	0x200003f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a104:	bf00      	nop
 800a106:	bf00      	nop

0800a108 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b082      	sub	sp, #8
 800a10c:	af00      	add	r7, sp, #0
	__asm volatile
 800a10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a112:	f383 8811 	msr	BASEPRI, r3
 800a116:	f3bf 8f6f 	isb	sy
 800a11a:	f3bf 8f4f 	dsb	sy
 800a11e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a120:	f7ff fc1e 	bl	8009960 <xTaskIncrementTick>
 800a124:	4603      	mov	r3, r0
 800a126:	2b00      	cmp	r3, #0
 800a128:	d003      	beq.n	800a132 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a12a:	4b06      	ldr	r3, [pc, #24]	; (800a144 <xPortSysTickHandler+0x3c>)
 800a12c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a130:	601a      	str	r2, [r3, #0]
 800a132:	2300      	movs	r3, #0
 800a134:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a13c:	bf00      	nop
 800a13e:	3708      	adds	r7, #8
 800a140:	46bd      	mov	sp, r7
 800a142:	bd80      	pop	{r7, pc}
 800a144:	e000ed04 	.word	0xe000ed04

0800a148 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a148:	b480      	push	{r7}
 800a14a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a14c:	4b0a      	ldr	r3, [pc, #40]	; (800a178 <vPortSetupTimerInterrupt+0x30>)
 800a14e:	2200      	movs	r2, #0
 800a150:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a152:	4b0a      	ldr	r3, [pc, #40]	; (800a17c <vPortSetupTimerInterrupt+0x34>)
 800a154:	2200      	movs	r2, #0
 800a156:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a158:	4b09      	ldr	r3, [pc, #36]	; (800a180 <vPortSetupTimerInterrupt+0x38>)
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a09      	ldr	r2, [pc, #36]	; (800a184 <vPortSetupTimerInterrupt+0x3c>)
 800a15e:	fba2 2303 	umull	r2, r3, r2, r3
 800a162:	099b      	lsrs	r3, r3, #6
 800a164:	4a08      	ldr	r2, [pc, #32]	; (800a188 <vPortSetupTimerInterrupt+0x40>)
 800a166:	3b01      	subs	r3, #1
 800a168:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a16a:	4b03      	ldr	r3, [pc, #12]	; (800a178 <vPortSetupTimerInterrupt+0x30>)
 800a16c:	2207      	movs	r2, #7
 800a16e:	601a      	str	r2, [r3, #0]
}
 800a170:	bf00      	nop
 800a172:	46bd      	mov	sp, r7
 800a174:	bc80      	pop	{r7}
 800a176:	4770      	bx	lr
 800a178:	e000e010 	.word	0xe000e010
 800a17c:	e000e018 	.word	0xe000e018
 800a180:	2000003c 	.word	0x2000003c
 800a184:	10624dd3 	.word	0x10624dd3
 800a188:	e000e014 	.word	0xe000e014

0800a18c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b08a      	sub	sp, #40	; 0x28
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a194:	2300      	movs	r3, #0
 800a196:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a198:	f7ff fb38 	bl	800980c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a19c:	4b57      	ldr	r3, [pc, #348]	; (800a2fc <pvPortMalloc+0x170>)
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d101      	bne.n	800a1a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a1a4:	f000 f90c 	bl	800a3c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a1a8:	4b55      	ldr	r3, [pc, #340]	; (800a300 <pvPortMalloc+0x174>)
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	4013      	ands	r3, r2
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f040 808c 	bne.w	800a2ce <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d01c      	beq.n	800a1f6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a1bc:	2208      	movs	r2, #8
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4413      	add	r3, r2
 800a1c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f003 0307 	and.w	r3, r3, #7
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d013      	beq.n	800a1f6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f023 0307 	bic.w	r3, r3, #7
 800a1d4:	3308      	adds	r3, #8
 800a1d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	f003 0307 	and.w	r3, r3, #7
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d009      	beq.n	800a1f6 <pvPortMalloc+0x6a>
	__asm volatile
 800a1e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e6:	f383 8811 	msr	BASEPRI, r3
 800a1ea:	f3bf 8f6f 	isb	sy
 800a1ee:	f3bf 8f4f 	dsb	sy
 800a1f2:	617b      	str	r3, [r7, #20]
 800a1f4:	e7fe      	b.n	800a1f4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d068      	beq.n	800a2ce <pvPortMalloc+0x142>
 800a1fc:	4b41      	ldr	r3, [pc, #260]	; (800a304 <pvPortMalloc+0x178>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	429a      	cmp	r2, r3
 800a204:	d863      	bhi.n	800a2ce <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a206:	4b40      	ldr	r3, [pc, #256]	; (800a308 <pvPortMalloc+0x17c>)
 800a208:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a20a:	4b3f      	ldr	r3, [pc, #252]	; (800a308 <pvPortMalloc+0x17c>)
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a210:	e004      	b.n	800a21c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a214:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a21c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	429a      	cmp	r2, r3
 800a224:	d903      	bls.n	800a22e <pvPortMalloc+0xa2>
 800a226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d1f1      	bne.n	800a212 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a22e:	4b33      	ldr	r3, [pc, #204]	; (800a2fc <pvPortMalloc+0x170>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a234:	429a      	cmp	r2, r3
 800a236:	d04a      	beq.n	800a2ce <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a238:	6a3b      	ldr	r3, [r7, #32]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2208      	movs	r2, #8
 800a23e:	4413      	add	r3, r2
 800a240:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a244:	681a      	ldr	r2, [r3, #0]
 800a246:	6a3b      	ldr	r3, [r7, #32]
 800a248:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24c:	685a      	ldr	r2, [r3, #4]
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	1ad2      	subs	r2, r2, r3
 800a252:	2308      	movs	r3, #8
 800a254:	005b      	lsls	r3, r3, #1
 800a256:	429a      	cmp	r2, r3
 800a258:	d91e      	bls.n	800a298 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a25a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4413      	add	r3, r2
 800a260:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	f003 0307 	and.w	r3, r3, #7
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d009      	beq.n	800a280 <pvPortMalloc+0xf4>
 800a26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a270:	f383 8811 	msr	BASEPRI, r3
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	f3bf 8f4f 	dsb	sy
 800a27c:	613b      	str	r3, [r7, #16]
 800a27e:	e7fe      	b.n	800a27e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a282:	685a      	ldr	r2, [r3, #4]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	1ad2      	subs	r2, r2, r3
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a292:	69b8      	ldr	r0, [r7, #24]
 800a294:	f000 f8f6 	bl	800a484 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a298:	4b1a      	ldr	r3, [pc, #104]	; (800a304 <pvPortMalloc+0x178>)
 800a29a:	681a      	ldr	r2, [r3, #0]
 800a29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	1ad3      	subs	r3, r2, r3
 800a2a2:	4a18      	ldr	r2, [pc, #96]	; (800a304 <pvPortMalloc+0x178>)
 800a2a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a2a6:	4b17      	ldr	r3, [pc, #92]	; (800a304 <pvPortMalloc+0x178>)
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	4b18      	ldr	r3, [pc, #96]	; (800a30c <pvPortMalloc+0x180>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d203      	bcs.n	800a2ba <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a2b2:	4b14      	ldr	r3, [pc, #80]	; (800a304 <pvPortMalloc+0x178>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a15      	ldr	r2, [pc, #84]	; (800a30c <pvPortMalloc+0x180>)
 800a2b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2bc:	685a      	ldr	r2, [r3, #4]
 800a2be:	4b10      	ldr	r3, [pc, #64]	; (800a300 <pvPortMalloc+0x174>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	431a      	orrs	r2, r3
 800a2c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a2ce:	f7ff faab 	bl	8009828 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a2d2:	69fb      	ldr	r3, [r7, #28]
 800a2d4:	f003 0307 	and.w	r3, r3, #7
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d009      	beq.n	800a2f0 <pvPortMalloc+0x164>
 800a2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e0:	f383 8811 	msr	BASEPRI, r3
 800a2e4:	f3bf 8f6f 	isb	sy
 800a2e8:	f3bf 8f4f 	dsb	sy
 800a2ec:	60fb      	str	r3, [r7, #12]
 800a2ee:	e7fe      	b.n	800a2ee <pvPortMalloc+0x162>
	return pvReturn;
 800a2f0:	69fb      	ldr	r3, [r7, #28]
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3728      	adds	r7, #40	; 0x28
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop
 800a2fc:	20003410 	.word	0x20003410
 800a300:	2000341c 	.word	0x2000341c
 800a304:	20003414 	.word	0x20003414
 800a308:	20003408 	.word	0x20003408
 800a30c:	20003418 	.word	0x20003418

0800a310 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b086      	sub	sp, #24
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d046      	beq.n	800a3b0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a322:	2308      	movs	r3, #8
 800a324:	425b      	negs	r3, r3
 800a326:	697a      	ldr	r2, [r7, #20]
 800a328:	4413      	add	r3, r2
 800a32a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a32c:	697b      	ldr	r3, [r7, #20]
 800a32e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	685a      	ldr	r2, [r3, #4]
 800a334:	4b20      	ldr	r3, [pc, #128]	; (800a3b8 <vPortFree+0xa8>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4013      	ands	r3, r2
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d109      	bne.n	800a352 <vPortFree+0x42>
 800a33e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a342:	f383 8811 	msr	BASEPRI, r3
 800a346:	f3bf 8f6f 	isb	sy
 800a34a:	f3bf 8f4f 	dsb	sy
 800a34e:	60fb      	str	r3, [r7, #12]
 800a350:	e7fe      	b.n	800a350 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d009      	beq.n	800a36e <vPortFree+0x5e>
 800a35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a35e:	f383 8811 	msr	BASEPRI, r3
 800a362:	f3bf 8f6f 	isb	sy
 800a366:	f3bf 8f4f 	dsb	sy
 800a36a:	60bb      	str	r3, [r7, #8]
 800a36c:	e7fe      	b.n	800a36c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a36e:	693b      	ldr	r3, [r7, #16]
 800a370:	685a      	ldr	r2, [r3, #4]
 800a372:	4b11      	ldr	r3, [pc, #68]	; (800a3b8 <vPortFree+0xa8>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4013      	ands	r3, r2
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d019      	beq.n	800a3b0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d115      	bne.n	800a3b0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	685a      	ldr	r2, [r3, #4]
 800a388:	4b0b      	ldr	r3, [pc, #44]	; (800a3b8 <vPortFree+0xa8>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	43db      	mvns	r3, r3
 800a38e:	401a      	ands	r2, r3
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a394:	f7ff fa3a 	bl	800980c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	685a      	ldr	r2, [r3, #4]
 800a39c:	4b07      	ldr	r3, [pc, #28]	; (800a3bc <vPortFree+0xac>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	4a06      	ldr	r2, [pc, #24]	; (800a3bc <vPortFree+0xac>)
 800a3a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a3a6:	6938      	ldr	r0, [r7, #16]
 800a3a8:	f000 f86c 	bl	800a484 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a3ac:	f7ff fa3c 	bl	8009828 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a3b0:	bf00      	nop
 800a3b2:	3718      	adds	r7, #24
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}
 800a3b8:	2000341c 	.word	0x2000341c
 800a3bc:	20003414 	.word	0x20003414

0800a3c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b085      	sub	sp, #20
 800a3c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a3c6:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800a3ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a3cc:	4b27      	ldr	r3, [pc, #156]	; (800a46c <prvHeapInit+0xac>)
 800a3ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	f003 0307 	and.w	r3, r3, #7
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d00c      	beq.n	800a3f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	3307      	adds	r3, #7
 800a3de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f023 0307 	bic.w	r3, r3, #7
 800a3e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a3e8:	68ba      	ldr	r2, [r7, #8]
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	1ad3      	subs	r3, r2, r3
 800a3ee:	4a1f      	ldr	r2, [pc, #124]	; (800a46c <prvHeapInit+0xac>)
 800a3f0:	4413      	add	r3, r2
 800a3f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a3f8:	4a1d      	ldr	r2, [pc, #116]	; (800a470 <prvHeapInit+0xb0>)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a3fe:	4b1c      	ldr	r3, [pc, #112]	; (800a470 <prvHeapInit+0xb0>)
 800a400:	2200      	movs	r2, #0
 800a402:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	68ba      	ldr	r2, [r7, #8]
 800a408:	4413      	add	r3, r2
 800a40a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a40c:	2208      	movs	r2, #8
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	1a9b      	subs	r3, r3, r2
 800a412:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	f023 0307 	bic.w	r3, r3, #7
 800a41a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	4a15      	ldr	r2, [pc, #84]	; (800a474 <prvHeapInit+0xb4>)
 800a420:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a422:	4b14      	ldr	r3, [pc, #80]	; (800a474 <prvHeapInit+0xb4>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	2200      	movs	r2, #0
 800a428:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a42a:	4b12      	ldr	r3, [pc, #72]	; (800a474 <prvHeapInit+0xb4>)
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	2200      	movs	r2, #0
 800a430:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	68fa      	ldr	r2, [r7, #12]
 800a43a:	1ad2      	subs	r2, r2, r3
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a440:	4b0c      	ldr	r3, [pc, #48]	; (800a474 <prvHeapInit+0xb4>)
 800a442:	681a      	ldr	r2, [r3, #0]
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	4a0a      	ldr	r2, [pc, #40]	; (800a478 <prvHeapInit+0xb8>)
 800a44e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	4a09      	ldr	r2, [pc, #36]	; (800a47c <prvHeapInit+0xbc>)
 800a456:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a458:	4b09      	ldr	r3, [pc, #36]	; (800a480 <prvHeapInit+0xc0>)
 800a45a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a45e:	601a      	str	r2, [r3, #0]
}
 800a460:	bf00      	nop
 800a462:	3714      	adds	r7, #20
 800a464:	46bd      	mov	sp, r7
 800a466:	bc80      	pop	{r7}
 800a468:	4770      	bx	lr
 800a46a:	bf00      	nop
 800a46c:	20000528 	.word	0x20000528
 800a470:	20003408 	.word	0x20003408
 800a474:	20003410 	.word	0x20003410
 800a478:	20003418 	.word	0x20003418
 800a47c:	20003414 	.word	0x20003414
 800a480:	2000341c 	.word	0x2000341c

0800a484 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a484:	b480      	push	{r7}
 800a486:	b085      	sub	sp, #20
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a48c:	4b27      	ldr	r3, [pc, #156]	; (800a52c <prvInsertBlockIntoFreeList+0xa8>)
 800a48e:	60fb      	str	r3, [r7, #12]
 800a490:	e002      	b.n	800a498 <prvInsertBlockIntoFreeList+0x14>
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	60fb      	str	r3, [r7, #12]
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d8f7      	bhi.n	800a492 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	68ba      	ldr	r2, [r7, #8]
 800a4ac:	4413      	add	r3, r2
 800a4ae:	687a      	ldr	r2, [r7, #4]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d108      	bne.n	800a4c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	685a      	ldr	r2, [r3, #4]
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	441a      	add	r2, r3
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	68ba      	ldr	r2, [r7, #8]
 800a4d0:	441a      	add	r2, r3
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d118      	bne.n	800a50c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	4b14      	ldr	r3, [pc, #80]	; (800a530 <prvInsertBlockIntoFreeList+0xac>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d00d      	beq.n	800a502 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	685a      	ldr	r2, [r3, #4]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	441a      	add	r2, r3
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	681a      	ldr	r2, [r3, #0]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	601a      	str	r2, [r3, #0]
 800a500:	e008      	b.n	800a514 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a502:	4b0b      	ldr	r3, [pc, #44]	; (800a530 <prvInsertBlockIntoFreeList+0xac>)
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	601a      	str	r2, [r3, #0]
 800a50a:	e003      	b.n	800a514 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681a      	ldr	r2, [r3, #0]
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d002      	beq.n	800a522 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a522:	bf00      	nop
 800a524:	3714      	adds	r7, #20
 800a526:	46bd      	mov	sp, r7
 800a528:	bc80      	pop	{r7}
 800a52a:	4770      	bx	lr
 800a52c:	20003408 	.word	0x20003408
 800a530:	20003410 	.word	0x20003410

0800a534 <__errno>:
 800a534:	4b01      	ldr	r3, [pc, #4]	; (800a53c <__errno+0x8>)
 800a536:	6818      	ldr	r0, [r3, #0]
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop
 800a53c:	2000004c 	.word	0x2000004c

0800a540 <__libc_init_array>:
 800a540:	b570      	push	{r4, r5, r6, lr}
 800a542:	2500      	movs	r5, #0
 800a544:	4e0c      	ldr	r6, [pc, #48]	; (800a578 <__libc_init_array+0x38>)
 800a546:	4c0d      	ldr	r4, [pc, #52]	; (800a57c <__libc_init_array+0x3c>)
 800a548:	1ba4      	subs	r4, r4, r6
 800a54a:	10a4      	asrs	r4, r4, #2
 800a54c:	42a5      	cmp	r5, r4
 800a54e:	d109      	bne.n	800a564 <__libc_init_array+0x24>
 800a550:	f001 ffea 	bl	800c528 <_init>
 800a554:	2500      	movs	r5, #0
 800a556:	4e0a      	ldr	r6, [pc, #40]	; (800a580 <__libc_init_array+0x40>)
 800a558:	4c0a      	ldr	r4, [pc, #40]	; (800a584 <__libc_init_array+0x44>)
 800a55a:	1ba4      	subs	r4, r4, r6
 800a55c:	10a4      	asrs	r4, r4, #2
 800a55e:	42a5      	cmp	r5, r4
 800a560:	d105      	bne.n	800a56e <__libc_init_array+0x2e>
 800a562:	bd70      	pop	{r4, r5, r6, pc}
 800a564:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a568:	4798      	blx	r3
 800a56a:	3501      	adds	r5, #1
 800a56c:	e7ee      	b.n	800a54c <__libc_init_array+0xc>
 800a56e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a572:	4798      	blx	r3
 800a574:	3501      	adds	r5, #1
 800a576:	e7f2      	b.n	800a55e <__libc_init_array+0x1e>
 800a578:	0800c9ec 	.word	0x0800c9ec
 800a57c:	0800c9ec 	.word	0x0800c9ec
 800a580:	0800c9ec 	.word	0x0800c9ec
 800a584:	0800c9f0 	.word	0x0800c9f0

0800a588 <memset>:
 800a588:	4603      	mov	r3, r0
 800a58a:	4402      	add	r2, r0
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d100      	bne.n	800a592 <memset+0xa>
 800a590:	4770      	bx	lr
 800a592:	f803 1b01 	strb.w	r1, [r3], #1
 800a596:	e7f9      	b.n	800a58c <memset+0x4>

0800a598 <cosf>:
 800a598:	b507      	push	{r0, r1, r2, lr}
 800a59a:	4a18      	ldr	r2, [pc, #96]	; (800a5fc <cosf+0x64>)
 800a59c:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	4601      	mov	r1, r0
 800a5a4:	dc03      	bgt.n	800a5ae <cosf+0x16>
 800a5a6:	2100      	movs	r1, #0
 800a5a8:	f001 fa24 	bl	800b9f4 <__kernel_cosf>
 800a5ac:	e004      	b.n	800a5b8 <cosf+0x20>
 800a5ae:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a5b2:	db04      	blt.n	800a5be <cosf+0x26>
 800a5b4:	f7f6 fa8c 	bl	8000ad0 <__aeabi_fsub>
 800a5b8:	b003      	add	sp, #12
 800a5ba:	f85d fb04 	ldr.w	pc, [sp], #4
 800a5be:	4669      	mov	r1, sp
 800a5c0:	f001 f86c 	bl	800b69c <__ieee754_rem_pio2f>
 800a5c4:	f000 0203 	and.w	r2, r0, #3
 800a5c8:	2a01      	cmp	r2, #1
 800a5ca:	d005      	beq.n	800a5d8 <cosf+0x40>
 800a5cc:	2a02      	cmp	r2, #2
 800a5ce:	d00a      	beq.n	800a5e6 <cosf+0x4e>
 800a5d0:	b972      	cbnz	r2, 800a5f0 <cosf+0x58>
 800a5d2:	9901      	ldr	r1, [sp, #4]
 800a5d4:	9800      	ldr	r0, [sp, #0]
 800a5d6:	e7e7      	b.n	800a5a8 <cosf+0x10>
 800a5d8:	9901      	ldr	r1, [sp, #4]
 800a5da:	9800      	ldr	r0, [sp, #0]
 800a5dc:	f001 fd28 	bl	800c030 <__kernel_sinf>
 800a5e0:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a5e4:	e7e8      	b.n	800a5b8 <cosf+0x20>
 800a5e6:	9901      	ldr	r1, [sp, #4]
 800a5e8:	9800      	ldr	r0, [sp, #0]
 800a5ea:	f001 fa03 	bl	800b9f4 <__kernel_cosf>
 800a5ee:	e7f7      	b.n	800a5e0 <cosf+0x48>
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	9901      	ldr	r1, [sp, #4]
 800a5f4:	9800      	ldr	r0, [sp, #0]
 800a5f6:	f001 fd1b 	bl	800c030 <__kernel_sinf>
 800a5fa:	e7dd      	b.n	800a5b8 <cosf+0x20>
 800a5fc:	3f490fd8 	.word	0x3f490fd8

0800a600 <sinf>:
 800a600:	b507      	push	{r0, r1, r2, lr}
 800a602:	4a19      	ldr	r2, [pc, #100]	; (800a668 <sinf+0x68>)
 800a604:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800a608:	4293      	cmp	r3, r2
 800a60a:	4601      	mov	r1, r0
 800a60c:	dc04      	bgt.n	800a618 <sinf+0x18>
 800a60e:	2200      	movs	r2, #0
 800a610:	2100      	movs	r1, #0
 800a612:	f001 fd0d 	bl	800c030 <__kernel_sinf>
 800a616:	e004      	b.n	800a622 <sinf+0x22>
 800a618:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a61c:	db04      	blt.n	800a628 <sinf+0x28>
 800a61e:	f7f6 fa57 	bl	8000ad0 <__aeabi_fsub>
 800a622:	b003      	add	sp, #12
 800a624:	f85d fb04 	ldr.w	pc, [sp], #4
 800a628:	4669      	mov	r1, sp
 800a62a:	f001 f837 	bl	800b69c <__ieee754_rem_pio2f>
 800a62e:	f000 0003 	and.w	r0, r0, #3
 800a632:	2801      	cmp	r0, #1
 800a634:	d006      	beq.n	800a644 <sinf+0x44>
 800a636:	2802      	cmp	r0, #2
 800a638:	d009      	beq.n	800a64e <sinf+0x4e>
 800a63a:	b980      	cbnz	r0, 800a65e <sinf+0x5e>
 800a63c:	2201      	movs	r2, #1
 800a63e:	9901      	ldr	r1, [sp, #4]
 800a640:	9800      	ldr	r0, [sp, #0]
 800a642:	e7e6      	b.n	800a612 <sinf+0x12>
 800a644:	9901      	ldr	r1, [sp, #4]
 800a646:	9800      	ldr	r0, [sp, #0]
 800a648:	f001 f9d4 	bl	800b9f4 <__kernel_cosf>
 800a64c:	e7e9      	b.n	800a622 <sinf+0x22>
 800a64e:	2201      	movs	r2, #1
 800a650:	9901      	ldr	r1, [sp, #4]
 800a652:	9800      	ldr	r0, [sp, #0]
 800a654:	f001 fcec 	bl	800c030 <__kernel_sinf>
 800a658:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800a65c:	e7e1      	b.n	800a622 <sinf+0x22>
 800a65e:	9901      	ldr	r1, [sp, #4]
 800a660:	9800      	ldr	r0, [sp, #0]
 800a662:	f001 f9c7 	bl	800b9f4 <__kernel_cosf>
 800a666:	e7f7      	b.n	800a658 <sinf+0x58>
 800a668:	3f490fd8 	.word	0x3f490fd8

0800a66c <sqrt>:
 800a66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a670:	b08b      	sub	sp, #44	; 0x2c
 800a672:	4604      	mov	r4, r0
 800a674:	460d      	mov	r5, r1
 800a676:	f000 fa47 	bl	800ab08 <__ieee754_sqrt>
 800a67a:	4b24      	ldr	r3, [pc, #144]	; (800a70c <sqrt+0xa0>)
 800a67c:	4680      	mov	r8, r0
 800a67e:	f993 a000 	ldrsb.w	sl, [r3]
 800a682:	4689      	mov	r9, r1
 800a684:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800a688:	d02b      	beq.n	800a6e2 <sqrt+0x76>
 800a68a:	4622      	mov	r2, r4
 800a68c:	462b      	mov	r3, r5
 800a68e:	4620      	mov	r0, r4
 800a690:	4629      	mov	r1, r5
 800a692:	f7f6 f9b3 	bl	80009fc <__aeabi_dcmpun>
 800a696:	4683      	mov	fp, r0
 800a698:	bb18      	cbnz	r0, 800a6e2 <sqrt+0x76>
 800a69a:	2600      	movs	r6, #0
 800a69c:	2700      	movs	r7, #0
 800a69e:	4632      	mov	r2, r6
 800a6a0:	463b      	mov	r3, r7
 800a6a2:	4620      	mov	r0, r4
 800a6a4:	4629      	mov	r1, r5
 800a6a6:	f7f6 f981 	bl	80009ac <__aeabi_dcmplt>
 800a6aa:	b1d0      	cbz	r0, 800a6e2 <sqrt+0x76>
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	9300      	str	r3, [sp, #0]
 800a6b0:	4b17      	ldr	r3, [pc, #92]	; (800a710 <sqrt+0xa4>)
 800a6b2:	f8cd b020 	str.w	fp, [sp, #32]
 800a6b6:	9301      	str	r3, [sp, #4]
 800a6b8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a6bc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a6c0:	f1ba 0f00 	cmp.w	sl, #0
 800a6c4:	d112      	bne.n	800a6ec <sqrt+0x80>
 800a6c6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a6ca:	4668      	mov	r0, sp
 800a6cc:	f001 fd26 	bl	800c11c <matherr>
 800a6d0:	b1b8      	cbz	r0, 800a702 <sqrt+0x96>
 800a6d2:	9b08      	ldr	r3, [sp, #32]
 800a6d4:	b11b      	cbz	r3, 800a6de <sqrt+0x72>
 800a6d6:	f7ff ff2d 	bl	800a534 <__errno>
 800a6da:	9b08      	ldr	r3, [sp, #32]
 800a6dc:	6003      	str	r3, [r0, #0]
 800a6de:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800a6e2:	4640      	mov	r0, r8
 800a6e4:	4649      	mov	r1, r9
 800a6e6:	b00b      	add	sp, #44	; 0x2c
 800a6e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6ec:	4632      	mov	r2, r6
 800a6ee:	463b      	mov	r3, r7
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	4639      	mov	r1, r7
 800a6f4:	f7f6 f812 	bl	800071c <__aeabi_ddiv>
 800a6f8:	f1ba 0f02 	cmp.w	sl, #2
 800a6fc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a700:	d1e3      	bne.n	800a6ca <sqrt+0x5e>
 800a702:	f7ff ff17 	bl	800a534 <__errno>
 800a706:	2321      	movs	r3, #33	; 0x21
 800a708:	6003      	str	r3, [r0, #0]
 800a70a:	e7e2      	b.n	800a6d2 <sqrt+0x66>
 800a70c:	200000b0 	.word	0x200000b0
 800a710:	0800c5c4 	.word	0x0800c5c4

0800a714 <asinf>:
 800a714:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a716:	b08b      	sub	sp, #44	; 0x2c
 800a718:	4604      	mov	r4, r0
 800a71a:	f000 faa1 	bl	800ac60 <__ieee754_asinf>
 800a71e:	4e21      	ldr	r6, [pc, #132]	; (800a7a4 <asinf+0x90>)
 800a720:	4605      	mov	r5, r0
 800a722:	f996 3000 	ldrsb.w	r3, [r6]
 800a726:	3301      	adds	r3, #1
 800a728:	d038      	beq.n	800a79c <asinf+0x88>
 800a72a:	4621      	mov	r1, r4
 800a72c:	4620      	mov	r0, r4
 800a72e:	f7f6 fc9f 	bl	8001070 <__aeabi_fcmpun>
 800a732:	4607      	mov	r7, r0
 800a734:	2800      	cmp	r0, #0
 800a736:	d131      	bne.n	800a79c <asinf+0x88>
 800a738:	4620      	mov	r0, r4
 800a73a:	f001 fe03 	bl	800c344 <fabsf>
 800a73e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800a742:	f7f6 fc8b 	bl	800105c <__aeabi_fcmpgt>
 800a746:	b348      	cbz	r0, 800a79c <asinf+0x88>
 800a748:	2301      	movs	r3, #1
 800a74a:	9300      	str	r3, [sp, #0]
 800a74c:	4b16      	ldr	r3, [pc, #88]	; (800a7a8 <asinf+0x94>)
 800a74e:	4620      	mov	r0, r4
 800a750:	9301      	str	r3, [sp, #4]
 800a752:	9708      	str	r7, [sp, #32]
 800a754:	f7f5 fe60 	bl	8000418 <__aeabi_f2d>
 800a758:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a75c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a760:	4812      	ldr	r0, [pc, #72]	; (800a7ac <asinf+0x98>)
 800a762:	f001 fcdd 	bl	800c120 <nan>
 800a766:	f996 3000 	ldrsb.w	r3, [r6]
 800a76a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a76e:	2b02      	cmp	r3, #2
 800a770:	d104      	bne.n	800a77c <asinf+0x68>
 800a772:	f7ff fedf 	bl	800a534 <__errno>
 800a776:	2321      	movs	r3, #33	; 0x21
 800a778:	6003      	str	r3, [r0, #0]
 800a77a:	e004      	b.n	800a786 <asinf+0x72>
 800a77c:	4668      	mov	r0, sp
 800a77e:	f001 fccd 	bl	800c11c <matherr>
 800a782:	2800      	cmp	r0, #0
 800a784:	d0f5      	beq.n	800a772 <asinf+0x5e>
 800a786:	9b08      	ldr	r3, [sp, #32]
 800a788:	b11b      	cbz	r3, 800a792 <asinf+0x7e>
 800a78a:	f7ff fed3 	bl	800a534 <__errno>
 800a78e:	9b08      	ldr	r3, [sp, #32]
 800a790:	6003      	str	r3, [r0, #0]
 800a792:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a796:	f7f6 f947 	bl	8000a28 <__aeabi_d2f>
 800a79a:	4605      	mov	r5, r0
 800a79c:	4628      	mov	r0, r5
 800a79e:	b00b      	add	sp, #44	; 0x2c
 800a7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	200000b0 	.word	0x200000b0
 800a7a8:	0800c5c9 	.word	0x0800c5c9
 800a7ac:	0800c5ce 	.word	0x0800c5ce

0800a7b0 <atan2f>:
 800a7b0:	f000 bb98 	b.w	800aee4 <__ieee754_atan2f>

0800a7b4 <powf>:
 800a7b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b8:	b08d      	sub	sp, #52	; 0x34
 800a7ba:	4605      	mov	r5, r0
 800a7bc:	460c      	mov	r4, r1
 800a7be:	f000 fc21 	bl	800b004 <__ieee754_powf>
 800a7c2:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 800aa70 <powf+0x2bc>
 800a7c6:	4606      	mov	r6, r0
 800a7c8:	f998 9000 	ldrsb.w	r9, [r8]
 800a7cc:	4647      	mov	r7, r8
 800a7ce:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800a7d2:	d060      	beq.n	800a896 <powf+0xe2>
 800a7d4:	4621      	mov	r1, r4
 800a7d6:	4620      	mov	r0, r4
 800a7d8:	f7f6 fc4a 	bl	8001070 <__aeabi_fcmpun>
 800a7dc:	4683      	mov	fp, r0
 800a7de:	2800      	cmp	r0, #0
 800a7e0:	d159      	bne.n	800a896 <powf+0xe2>
 800a7e2:	4629      	mov	r1, r5
 800a7e4:	4628      	mov	r0, r5
 800a7e6:	f7f6 fc43 	bl	8001070 <__aeabi_fcmpun>
 800a7ea:	2100      	movs	r1, #0
 800a7ec:	4682      	mov	sl, r0
 800a7ee:	b300      	cbz	r0, 800a832 <powf+0x7e>
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	f7f6 fc0b 	bl	800100c <__aeabi_fcmpeq>
 800a7f6:	2800      	cmp	r0, #0
 800a7f8:	d04d      	beq.n	800a896 <powf+0xe2>
 800a7fa:	2301      	movs	r3, #1
 800a7fc:	9302      	str	r3, [sp, #8]
 800a7fe:	4b96      	ldr	r3, [pc, #600]	; (800aa58 <powf+0x2a4>)
 800a800:	4628      	mov	r0, r5
 800a802:	9303      	str	r3, [sp, #12]
 800a804:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800a808:	f7f5 fe06 	bl	8000418 <__aeabi_f2d>
 800a80c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a810:	4620      	mov	r0, r4
 800a812:	f7f5 fe01 	bl	8000418 <__aeabi_f2d>
 800a816:	2200      	movs	r2, #0
 800a818:	4b90      	ldr	r3, [pc, #576]	; (800aa5c <powf+0x2a8>)
 800a81a:	f1b9 0f02 	cmp.w	r9, #2
 800a81e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a822:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a826:	d031      	beq.n	800a88c <powf+0xd8>
 800a828:	a802      	add	r0, sp, #8
 800a82a:	f001 fc77 	bl	800c11c <matherr>
 800a82e:	bb38      	cbnz	r0, 800a880 <powf+0xcc>
 800a830:	e05d      	b.n	800a8ee <powf+0x13a>
 800a832:	4628      	mov	r0, r5
 800a834:	f7f6 fbea 	bl	800100c <__aeabi_fcmpeq>
 800a838:	2800      	cmp	r0, #0
 800a83a:	d05d      	beq.n	800a8f8 <powf+0x144>
 800a83c:	2100      	movs	r1, #0
 800a83e:	4620      	mov	r0, r4
 800a840:	f7f6 fbe4 	bl	800100c <__aeabi_fcmpeq>
 800a844:	4607      	mov	r7, r0
 800a846:	2800      	cmp	r0, #0
 800a848:	d029      	beq.n	800a89e <powf+0xea>
 800a84a:	2301      	movs	r3, #1
 800a84c:	9302      	str	r3, [sp, #8]
 800a84e:	4b82      	ldr	r3, [pc, #520]	; (800aa58 <powf+0x2a4>)
 800a850:	4628      	mov	r0, r5
 800a852:	9303      	str	r3, [sp, #12]
 800a854:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800a858:	f7f5 fdde 	bl	8000418 <__aeabi_f2d>
 800a85c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a860:	4620      	mov	r0, r4
 800a862:	f7f5 fdd9 	bl	8000418 <__aeabi_f2d>
 800a866:	2200      	movs	r2, #0
 800a868:	2300      	movs	r3, #0
 800a86a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a86e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a872:	f1b9 0f00 	cmp.w	r9, #0
 800a876:	d0d7      	beq.n	800a828 <powf+0x74>
 800a878:	2200      	movs	r2, #0
 800a87a:	4b78      	ldr	r3, [pc, #480]	; (800aa5c <powf+0x2a8>)
 800a87c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a880:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a882:	b11b      	cbz	r3, 800a88c <powf+0xd8>
 800a884:	f7ff fe56 	bl	800a534 <__errno>
 800a888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a88a:	6003      	str	r3, [r0, #0]
 800a88c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a890:	f7f6 f8ca 	bl	8000a28 <__aeabi_d2f>
 800a894:	4606      	mov	r6, r0
 800a896:	4630      	mov	r0, r6
 800a898:	b00d      	add	sp, #52	; 0x34
 800a89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a89e:	4620      	mov	r0, r4
 800a8a0:	f001 fd53 	bl	800c34a <finitef>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	d0f6      	beq.n	800a896 <powf+0xe2>
 800a8a8:	2100      	movs	r1, #0
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	f7f6 fbb8 	bl	8001020 <__aeabi_fcmplt>
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	d0f0      	beq.n	800a896 <powf+0xe2>
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	9302      	str	r3, [sp, #8]
 800a8b8:	4b67      	ldr	r3, [pc, #412]	; (800aa58 <powf+0x2a4>)
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	9303      	str	r3, [sp, #12]
 800a8be:	970a      	str	r7, [sp, #40]	; 0x28
 800a8c0:	f7f5 fdaa 	bl	8000418 <__aeabi_f2d>
 800a8c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8c8:	4620      	mov	r0, r4
 800a8ca:	f7f5 fda5 	bl	8000418 <__aeabi_f2d>
 800a8ce:	f998 3000 	ldrsb.w	r3, [r8]
 800a8d2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a8d6:	b923      	cbnz	r3, 800a8e2 <powf+0x12e>
 800a8d8:	2200      	movs	r2, #0
 800a8da:	2300      	movs	r3, #0
 800a8dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a8e0:	e7a2      	b.n	800a828 <powf+0x74>
 800a8e2:	2000      	movs	r0, #0
 800a8e4:	495e      	ldr	r1, [pc, #376]	; (800aa60 <powf+0x2ac>)
 800a8e6:	2b02      	cmp	r3, #2
 800a8e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a8ec:	d19c      	bne.n	800a828 <powf+0x74>
 800a8ee:	f7ff fe21 	bl	800a534 <__errno>
 800a8f2:	2321      	movs	r3, #33	; 0x21
 800a8f4:	6003      	str	r3, [r0, #0]
 800a8f6:	e7c3      	b.n	800a880 <powf+0xcc>
 800a8f8:	4630      	mov	r0, r6
 800a8fa:	f001 fd26 	bl	800c34a <finitef>
 800a8fe:	4681      	mov	r9, r0
 800a900:	2800      	cmp	r0, #0
 800a902:	d17b      	bne.n	800a9fc <powf+0x248>
 800a904:	4628      	mov	r0, r5
 800a906:	f001 fd20 	bl	800c34a <finitef>
 800a90a:	2800      	cmp	r0, #0
 800a90c:	d076      	beq.n	800a9fc <powf+0x248>
 800a90e:	4620      	mov	r0, r4
 800a910:	f001 fd1b 	bl	800c34a <finitef>
 800a914:	2800      	cmp	r0, #0
 800a916:	d071      	beq.n	800a9fc <powf+0x248>
 800a918:	4628      	mov	r0, r5
 800a91a:	f7f5 fd7d 	bl	8000418 <__aeabi_f2d>
 800a91e:	4682      	mov	sl, r0
 800a920:	4620      	mov	r0, r4
 800a922:	468b      	mov	fp, r1
 800a924:	f7f5 fd78 	bl	8000418 <__aeabi_f2d>
 800a928:	4602      	mov	r2, r0
 800a92a:	460b      	mov	r3, r1
 800a92c:	4630      	mov	r0, r6
 800a92e:	4631      	mov	r1, r6
 800a930:	e9cd 2300 	strd	r2, r3, [sp]
 800a934:	f7f6 fb9c 	bl	8001070 <__aeabi_fcmpun>
 800a938:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a93c:	f998 8000 	ldrsb.w	r8, [r8]
 800a940:	4945      	ldr	r1, [pc, #276]	; (800aa58 <powf+0x2a4>)
 800a942:	b1b0      	cbz	r0, 800a972 <powf+0x1be>
 800a944:	2001      	movs	r0, #1
 800a946:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800a94a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a94e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800a952:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a956:	f1b8 0f00 	cmp.w	r8, #0
 800a95a:	d0bd      	beq.n	800a8d8 <powf+0x124>
 800a95c:	2100      	movs	r1, #0
 800a95e:	4608      	mov	r0, r1
 800a960:	f7f6 fa74 	bl	8000e4c <__aeabi_fdiv>
 800a964:	f7f5 fd58 	bl	8000418 <__aeabi_f2d>
 800a968:	f1b8 0f02 	cmp.w	r8, #2
 800a96c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a970:	e7bc      	b.n	800a8ec <powf+0x138>
 800a972:	2603      	movs	r6, #3
 800a974:	900a      	str	r0, [sp, #40]	; 0x28
 800a976:	e9cd 6102 	strd	r6, r1, [sp, #8]
 800a97a:	4620      	mov	r0, r4
 800a97c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800a980:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800a984:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a988:	f7f6 f9ac 	bl	8000ce4 <__aeabi_fmul>
 800a98c:	4604      	mov	r4, r0
 800a98e:	f1b8 0f00 	cmp.w	r8, #0
 800a992:	d11e      	bne.n	800a9d2 <powf+0x21e>
 800a994:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a998:	4b32      	ldr	r3, [pc, #200]	; (800aa64 <powf+0x2b0>)
 800a99a:	2100      	movs	r1, #0
 800a99c:	4628      	mov	r0, r5
 800a99e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a9a2:	f7f6 fb3d 	bl	8001020 <__aeabi_fcmplt>
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	d04e      	beq.n	800aa48 <powf+0x294>
 800a9aa:	4620      	mov	r0, r4
 800a9ac:	f001 fd1a 	bl	800c3e4 <rintf>
 800a9b0:	4621      	mov	r1, r4
 800a9b2:	f7f6 fb2b 	bl	800100c <__aeabi_fcmpeq>
 800a9b6:	b920      	cbnz	r0, 800a9c2 <powf+0x20e>
 800a9b8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a9bc:	4b2a      	ldr	r3, [pc, #168]	; (800aa68 <powf+0x2b4>)
 800a9be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a9c2:	f997 3000 	ldrsb.w	r3, [r7]
 800a9c6:	2b02      	cmp	r3, #2
 800a9c8:	d13e      	bne.n	800aa48 <powf+0x294>
 800a9ca:	f7ff fdb3 	bl	800a534 <__errno>
 800a9ce:	2322      	movs	r3, #34	; 0x22
 800a9d0:	e790      	b.n	800a8f4 <powf+0x140>
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	4b25      	ldr	r3, [pc, #148]	; (800aa6c <powf+0x2b8>)
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	4628      	mov	r0, r5
 800a9da:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a9de:	f7f6 fb1f 	bl	8001020 <__aeabi_fcmplt>
 800a9e2:	2800      	cmp	r0, #0
 800a9e4:	d0ed      	beq.n	800a9c2 <powf+0x20e>
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	f001 fcfc 	bl	800c3e4 <rintf>
 800a9ec:	4621      	mov	r1, r4
 800a9ee:	f7f6 fb0d 	bl	800100c <__aeabi_fcmpeq>
 800a9f2:	2800      	cmp	r0, #0
 800a9f4:	d1e5      	bne.n	800a9c2 <powf+0x20e>
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	4b19      	ldr	r3, [pc, #100]	; (800aa60 <powf+0x2ac>)
 800a9fa:	e7e0      	b.n	800a9be <powf+0x20a>
 800a9fc:	2100      	movs	r1, #0
 800a9fe:	4630      	mov	r0, r6
 800aa00:	f7f6 fb04 	bl	800100c <__aeabi_fcmpeq>
 800aa04:	2800      	cmp	r0, #0
 800aa06:	f43f af46 	beq.w	800a896 <powf+0xe2>
 800aa0a:	4628      	mov	r0, r5
 800aa0c:	f001 fc9d 	bl	800c34a <finitef>
 800aa10:	2800      	cmp	r0, #0
 800aa12:	f43f af40 	beq.w	800a896 <powf+0xe2>
 800aa16:	4620      	mov	r0, r4
 800aa18:	f001 fc97 	bl	800c34a <finitef>
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	f43f af3a 	beq.w	800a896 <powf+0xe2>
 800aa22:	2304      	movs	r3, #4
 800aa24:	9302      	str	r3, [sp, #8]
 800aa26:	4b0c      	ldr	r3, [pc, #48]	; (800aa58 <powf+0x2a4>)
 800aa28:	4628      	mov	r0, r5
 800aa2a:	9303      	str	r3, [sp, #12]
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	930a      	str	r3, [sp, #40]	; 0x28
 800aa30:	f7f5 fcf2 	bl	8000418 <__aeabi_f2d>
 800aa34:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f7f5 fced 	bl	8000418 <__aeabi_f2d>
 800aa3e:	2200      	movs	r2, #0
 800aa40:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aa44:	2300      	movs	r3, #0
 800aa46:	e7ba      	b.n	800a9be <powf+0x20a>
 800aa48:	a802      	add	r0, sp, #8
 800aa4a:	f001 fb67 	bl	800c11c <matherr>
 800aa4e:	2800      	cmp	r0, #0
 800aa50:	f47f af16 	bne.w	800a880 <powf+0xcc>
 800aa54:	e7b9      	b.n	800a9ca <powf+0x216>
 800aa56:	bf00      	nop
 800aa58:	0800c5cf 	.word	0x0800c5cf
 800aa5c:	3ff00000 	.word	0x3ff00000
 800aa60:	fff00000 	.word	0xfff00000
 800aa64:	47efffff 	.word	0x47efffff
 800aa68:	c7efffff 	.word	0xc7efffff
 800aa6c:	7ff00000 	.word	0x7ff00000
 800aa70:	200000b0 	.word	0x200000b0

0800aa74 <sqrtf>:
 800aa74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa76:	b08b      	sub	sp, #44	; 0x2c
 800aa78:	4604      	mov	r4, r0
 800aa7a:	f000 ff67 	bl	800b94c <__ieee754_sqrtf>
 800aa7e:	4b20      	ldr	r3, [pc, #128]	; (800ab00 <sqrtf+0x8c>)
 800aa80:	4606      	mov	r6, r0
 800aa82:	f993 5000 	ldrsb.w	r5, [r3]
 800aa86:	1c6b      	adds	r3, r5, #1
 800aa88:	d02a      	beq.n	800aae0 <sqrtf+0x6c>
 800aa8a:	4621      	mov	r1, r4
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	f7f6 faef 	bl	8001070 <__aeabi_fcmpun>
 800aa92:	4607      	mov	r7, r0
 800aa94:	bb20      	cbnz	r0, 800aae0 <sqrtf+0x6c>
 800aa96:	2100      	movs	r1, #0
 800aa98:	4620      	mov	r0, r4
 800aa9a:	f7f6 fac1 	bl	8001020 <__aeabi_fcmplt>
 800aa9e:	b1f8      	cbz	r0, 800aae0 <sqrtf+0x6c>
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	9300      	str	r3, [sp, #0]
 800aaa4:	4b17      	ldr	r3, [pc, #92]	; (800ab04 <sqrtf+0x90>)
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	9301      	str	r3, [sp, #4]
 800aaaa:	9708      	str	r7, [sp, #32]
 800aaac:	f7f5 fcb4 	bl	8000418 <__aeabi_f2d>
 800aab0:	2200      	movs	r2, #0
 800aab2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aab6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aaba:	2300      	movs	r3, #0
 800aabc:	b99d      	cbnz	r5, 800aae6 <sqrtf+0x72>
 800aabe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aac2:	4668      	mov	r0, sp
 800aac4:	f001 fb2a 	bl	800c11c <matherr>
 800aac8:	b1a8      	cbz	r0, 800aaf6 <sqrtf+0x82>
 800aaca:	9b08      	ldr	r3, [sp, #32]
 800aacc:	b11b      	cbz	r3, 800aad6 <sqrtf+0x62>
 800aace:	f7ff fd31 	bl	800a534 <__errno>
 800aad2:	9b08      	ldr	r3, [sp, #32]
 800aad4:	6003      	str	r3, [r0, #0]
 800aad6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aada:	f7f5 ffa5 	bl	8000a28 <__aeabi_d2f>
 800aade:	4606      	mov	r6, r0
 800aae0:	4630      	mov	r0, r6
 800aae2:	b00b      	add	sp, #44	; 0x2c
 800aae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aae6:	4610      	mov	r0, r2
 800aae8:	4619      	mov	r1, r3
 800aaea:	f7f5 fe17 	bl	800071c <__aeabi_ddiv>
 800aaee:	2d02      	cmp	r5, #2
 800aaf0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aaf4:	d1e5      	bne.n	800aac2 <sqrtf+0x4e>
 800aaf6:	f7ff fd1d 	bl	800a534 <__errno>
 800aafa:	2321      	movs	r3, #33	; 0x21
 800aafc:	6003      	str	r3, [r0, #0]
 800aafe:	e7e4      	b.n	800aaca <sqrtf+0x56>
 800ab00:	200000b0 	.word	0x200000b0
 800ab04:	0800c5d4 	.word	0x0800c5d4

0800ab08 <__ieee754_sqrt>:
 800ab08:	4b54      	ldr	r3, [pc, #336]	; (800ac5c <__ieee754_sqrt+0x154>)
 800ab0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab0e:	438b      	bics	r3, r1
 800ab10:	4606      	mov	r6, r0
 800ab12:	460d      	mov	r5, r1
 800ab14:	460a      	mov	r2, r1
 800ab16:	460c      	mov	r4, r1
 800ab18:	d10f      	bne.n	800ab3a <__ieee754_sqrt+0x32>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	f7f5 fcd3 	bl	80004c8 <__aeabi_dmul>
 800ab22:	4602      	mov	r2, r0
 800ab24:	460b      	mov	r3, r1
 800ab26:	4630      	mov	r0, r6
 800ab28:	4629      	mov	r1, r5
 800ab2a:	f7f5 fb17 	bl	800015c <__adddf3>
 800ab2e:	4606      	mov	r6, r0
 800ab30:	460d      	mov	r5, r1
 800ab32:	4630      	mov	r0, r6
 800ab34:	4629      	mov	r1, r5
 800ab36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab3a:	2900      	cmp	r1, #0
 800ab3c:	4607      	mov	r7, r0
 800ab3e:	4603      	mov	r3, r0
 800ab40:	dc0e      	bgt.n	800ab60 <__ieee754_sqrt+0x58>
 800ab42:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800ab46:	ea5c 0707 	orrs.w	r7, ip, r7
 800ab4a:	d0f2      	beq.n	800ab32 <__ieee754_sqrt+0x2a>
 800ab4c:	b141      	cbz	r1, 800ab60 <__ieee754_sqrt+0x58>
 800ab4e:	4602      	mov	r2, r0
 800ab50:	460b      	mov	r3, r1
 800ab52:	f7f5 fb01 	bl	8000158 <__aeabi_dsub>
 800ab56:	4602      	mov	r2, r0
 800ab58:	460b      	mov	r3, r1
 800ab5a:	f7f5 fddf 	bl	800071c <__aeabi_ddiv>
 800ab5e:	e7e6      	b.n	800ab2e <__ieee754_sqrt+0x26>
 800ab60:	1512      	asrs	r2, r2, #20
 800ab62:	d074      	beq.n	800ac4e <__ieee754_sqrt+0x146>
 800ab64:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800ab68:	07d5      	lsls	r5, r2, #31
 800ab6a:	f04f 0500 	mov.w	r5, #0
 800ab6e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ab72:	bf48      	it	mi
 800ab74:	0fd9      	lsrmi	r1, r3, #31
 800ab76:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800ab7a:	bf44      	itt	mi
 800ab7c:	005b      	lslmi	r3, r3, #1
 800ab7e:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800ab82:	1051      	asrs	r1, r2, #1
 800ab84:	0fda      	lsrs	r2, r3, #31
 800ab86:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800ab8a:	4628      	mov	r0, r5
 800ab8c:	2216      	movs	r2, #22
 800ab8e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800ab92:	005b      	lsls	r3, r3, #1
 800ab94:	1987      	adds	r7, r0, r6
 800ab96:	42a7      	cmp	r7, r4
 800ab98:	bfde      	ittt	le
 800ab9a:	19b8      	addle	r0, r7, r6
 800ab9c:	1be4      	suble	r4, r4, r7
 800ab9e:	19ad      	addle	r5, r5, r6
 800aba0:	0fdf      	lsrs	r7, r3, #31
 800aba2:	3a01      	subs	r2, #1
 800aba4:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800aba8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800abac:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800abb0:	d1f0      	bne.n	800ab94 <__ieee754_sqrt+0x8c>
 800abb2:	f04f 0c20 	mov.w	ip, #32
 800abb6:	4696      	mov	lr, r2
 800abb8:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800abbc:	4284      	cmp	r4, r0
 800abbe:	eb06 070e 	add.w	r7, r6, lr
 800abc2:	dc02      	bgt.n	800abca <__ieee754_sqrt+0xc2>
 800abc4:	d112      	bne.n	800abec <__ieee754_sqrt+0xe4>
 800abc6:	429f      	cmp	r7, r3
 800abc8:	d810      	bhi.n	800abec <__ieee754_sqrt+0xe4>
 800abca:	2f00      	cmp	r7, #0
 800abcc:	eb07 0e06 	add.w	lr, r7, r6
 800abd0:	da42      	bge.n	800ac58 <__ieee754_sqrt+0x150>
 800abd2:	f1be 0f00 	cmp.w	lr, #0
 800abd6:	db3f      	blt.n	800ac58 <__ieee754_sqrt+0x150>
 800abd8:	f100 0801 	add.w	r8, r0, #1
 800abdc:	1a24      	subs	r4, r4, r0
 800abde:	4640      	mov	r0, r8
 800abe0:	429f      	cmp	r7, r3
 800abe2:	bf88      	it	hi
 800abe4:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 800abe8:	1bdb      	subs	r3, r3, r7
 800abea:	4432      	add	r2, r6
 800abec:	0064      	lsls	r4, r4, #1
 800abee:	f1bc 0c01 	subs.w	ip, ip, #1
 800abf2:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800abf6:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800abfa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800abfe:	d1dd      	bne.n	800abbc <__ieee754_sqrt+0xb4>
 800ac00:	4323      	orrs	r3, r4
 800ac02:	d006      	beq.n	800ac12 <__ieee754_sqrt+0x10a>
 800ac04:	1c54      	adds	r4, r2, #1
 800ac06:	bf0b      	itete	eq
 800ac08:	4662      	moveq	r2, ip
 800ac0a:	3201      	addne	r2, #1
 800ac0c:	3501      	addeq	r5, #1
 800ac0e:	f022 0201 	bicne.w	r2, r2, #1
 800ac12:	106b      	asrs	r3, r5, #1
 800ac14:	0852      	lsrs	r2, r2, #1
 800ac16:	07e8      	lsls	r0, r5, #31
 800ac18:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800ac1c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800ac20:	bf48      	it	mi
 800ac22:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800ac26:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800ac2a:	4616      	mov	r6, r2
 800ac2c:	e781      	b.n	800ab32 <__ieee754_sqrt+0x2a>
 800ac2e:	0adc      	lsrs	r4, r3, #11
 800ac30:	3915      	subs	r1, #21
 800ac32:	055b      	lsls	r3, r3, #21
 800ac34:	2c00      	cmp	r4, #0
 800ac36:	d0fa      	beq.n	800ac2e <__ieee754_sqrt+0x126>
 800ac38:	02e6      	lsls	r6, r4, #11
 800ac3a:	d50a      	bpl.n	800ac52 <__ieee754_sqrt+0x14a>
 800ac3c:	f1c2 0020 	rsb	r0, r2, #32
 800ac40:	fa23 f000 	lsr.w	r0, r3, r0
 800ac44:	1e55      	subs	r5, r2, #1
 800ac46:	4093      	lsls	r3, r2
 800ac48:	4304      	orrs	r4, r0
 800ac4a:	1b4a      	subs	r2, r1, r5
 800ac4c:	e78a      	b.n	800ab64 <__ieee754_sqrt+0x5c>
 800ac4e:	4611      	mov	r1, r2
 800ac50:	e7f0      	b.n	800ac34 <__ieee754_sqrt+0x12c>
 800ac52:	0064      	lsls	r4, r4, #1
 800ac54:	3201      	adds	r2, #1
 800ac56:	e7ef      	b.n	800ac38 <__ieee754_sqrt+0x130>
 800ac58:	4680      	mov	r8, r0
 800ac5a:	e7bf      	b.n	800abdc <__ieee754_sqrt+0xd4>
 800ac5c:	7ff00000 	.word	0x7ff00000

0800ac60 <__ieee754_asinf>:
 800ac60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac64:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800ac68:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800ac6c:	4604      	mov	r4, r0
 800ac6e:	4607      	mov	r7, r0
 800ac70:	d10c      	bne.n	800ac8c <__ieee754_asinf+0x2c>
 800ac72:	498c      	ldr	r1, [pc, #560]	; (800aea4 <__ieee754_asinf+0x244>)
 800ac74:	f7f6 f836 	bl	8000ce4 <__aeabi_fmul>
 800ac78:	498b      	ldr	r1, [pc, #556]	; (800aea8 <__ieee754_asinf+0x248>)
 800ac7a:	4605      	mov	r5, r0
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	f7f6 f831 	bl	8000ce4 <__aeabi_fmul>
 800ac82:	4601      	mov	r1, r0
 800ac84:	4628      	mov	r0, r5
 800ac86:	f7f5 ff25 	bl	8000ad4 <__addsf3>
 800ac8a:	e006      	b.n	800ac9a <__ieee754_asinf+0x3a>
 800ac8c:	dd09      	ble.n	800aca2 <__ieee754_asinf+0x42>
 800ac8e:	4601      	mov	r1, r0
 800ac90:	f7f5 ff1e 	bl	8000ad0 <__aeabi_fsub>
 800ac94:	4601      	mov	r1, r0
 800ac96:	f7f6 f8d9 	bl	8000e4c <__aeabi_fdiv>
 800ac9a:	4604      	mov	r4, r0
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aca2:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800aca6:	da0b      	bge.n	800acc0 <__ieee754_asinf+0x60>
 800aca8:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 800acac:	da73      	bge.n	800ad96 <__ieee754_asinf+0x136>
 800acae:	497f      	ldr	r1, [pc, #508]	; (800aeac <__ieee754_asinf+0x24c>)
 800acb0:	f7f5 ff10 	bl	8000ad4 <__addsf3>
 800acb4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800acb8:	f7f6 f9d0 	bl	800105c <__aeabi_fcmpgt>
 800acbc:	2800      	cmp	r0, #0
 800acbe:	d1ed      	bne.n	800ac9c <__ieee754_asinf+0x3c>
 800acc0:	4620      	mov	r0, r4
 800acc2:	f001 fb3f 	bl	800c344 <fabsf>
 800acc6:	4601      	mov	r1, r0
 800acc8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800accc:	f7f5 ff00 	bl	8000ad0 <__aeabi_fsub>
 800acd0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800acd4:	f7f6 f806 	bl	8000ce4 <__aeabi_fmul>
 800acd8:	4604      	mov	r4, r0
 800acda:	4975      	ldr	r1, [pc, #468]	; (800aeb0 <__ieee754_asinf+0x250>)
 800acdc:	f7f6 f802 	bl	8000ce4 <__aeabi_fmul>
 800ace0:	4974      	ldr	r1, [pc, #464]	; (800aeb4 <__ieee754_asinf+0x254>)
 800ace2:	f7f5 fef7 	bl	8000ad4 <__addsf3>
 800ace6:	4621      	mov	r1, r4
 800ace8:	f7f5 fffc 	bl	8000ce4 <__aeabi_fmul>
 800acec:	4972      	ldr	r1, [pc, #456]	; (800aeb8 <__ieee754_asinf+0x258>)
 800acee:	f7f5 feef 	bl	8000ad0 <__aeabi_fsub>
 800acf2:	4621      	mov	r1, r4
 800acf4:	f7f5 fff6 	bl	8000ce4 <__aeabi_fmul>
 800acf8:	4970      	ldr	r1, [pc, #448]	; (800aebc <__ieee754_asinf+0x25c>)
 800acfa:	f7f5 feeb 	bl	8000ad4 <__addsf3>
 800acfe:	4621      	mov	r1, r4
 800ad00:	f7f5 fff0 	bl	8000ce4 <__aeabi_fmul>
 800ad04:	496e      	ldr	r1, [pc, #440]	; (800aec0 <__ieee754_asinf+0x260>)
 800ad06:	f7f5 fee3 	bl	8000ad0 <__aeabi_fsub>
 800ad0a:	4621      	mov	r1, r4
 800ad0c:	f7f5 ffea 	bl	8000ce4 <__aeabi_fmul>
 800ad10:	496c      	ldr	r1, [pc, #432]	; (800aec4 <__ieee754_asinf+0x264>)
 800ad12:	f7f5 fedf 	bl	8000ad4 <__addsf3>
 800ad16:	4621      	mov	r1, r4
 800ad18:	f7f5 ffe4 	bl	8000ce4 <__aeabi_fmul>
 800ad1c:	496a      	ldr	r1, [pc, #424]	; (800aec8 <__ieee754_asinf+0x268>)
 800ad1e:	4680      	mov	r8, r0
 800ad20:	4620      	mov	r0, r4
 800ad22:	f7f5 ffdf 	bl	8000ce4 <__aeabi_fmul>
 800ad26:	4969      	ldr	r1, [pc, #420]	; (800aecc <__ieee754_asinf+0x26c>)
 800ad28:	f7f5 fed2 	bl	8000ad0 <__aeabi_fsub>
 800ad2c:	4621      	mov	r1, r4
 800ad2e:	f7f5 ffd9 	bl	8000ce4 <__aeabi_fmul>
 800ad32:	4967      	ldr	r1, [pc, #412]	; (800aed0 <__ieee754_asinf+0x270>)
 800ad34:	f7f5 fece 	bl	8000ad4 <__addsf3>
 800ad38:	4621      	mov	r1, r4
 800ad3a:	f7f5 ffd3 	bl	8000ce4 <__aeabi_fmul>
 800ad3e:	4965      	ldr	r1, [pc, #404]	; (800aed4 <__ieee754_asinf+0x274>)
 800ad40:	f7f5 fec6 	bl	8000ad0 <__aeabi_fsub>
 800ad44:	4621      	mov	r1, r4
 800ad46:	f7f5 ffcd 	bl	8000ce4 <__aeabi_fmul>
 800ad4a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ad4e:	f7f5 fec1 	bl	8000ad4 <__addsf3>
 800ad52:	4681      	mov	r9, r0
 800ad54:	4620      	mov	r0, r4
 800ad56:	f000 fdf9 	bl	800b94c <__ieee754_sqrtf>
 800ad5a:	4b5f      	ldr	r3, [pc, #380]	; (800aed8 <__ieee754_asinf+0x278>)
 800ad5c:	4606      	mov	r6, r0
 800ad5e:	429d      	cmp	r5, r3
 800ad60:	dd63      	ble.n	800ae2a <__ieee754_asinf+0x1ca>
 800ad62:	4649      	mov	r1, r9
 800ad64:	4640      	mov	r0, r8
 800ad66:	f7f6 f871 	bl	8000e4c <__aeabi_fdiv>
 800ad6a:	4631      	mov	r1, r6
 800ad6c:	f7f5 ffba 	bl	8000ce4 <__aeabi_fmul>
 800ad70:	4631      	mov	r1, r6
 800ad72:	f7f5 feaf 	bl	8000ad4 <__addsf3>
 800ad76:	4601      	mov	r1, r0
 800ad78:	f7f5 feac 	bl	8000ad4 <__addsf3>
 800ad7c:	4957      	ldr	r1, [pc, #348]	; (800aedc <__ieee754_asinf+0x27c>)
 800ad7e:	f7f5 fea9 	bl	8000ad4 <__addsf3>
 800ad82:	4601      	mov	r1, r0
 800ad84:	4847      	ldr	r0, [pc, #284]	; (800aea4 <__ieee754_asinf+0x244>)
 800ad86:	f7f5 fea3 	bl	8000ad0 <__aeabi_fsub>
 800ad8a:	2f00      	cmp	r7, #0
 800ad8c:	4604      	mov	r4, r0
 800ad8e:	bfd8      	it	le
 800ad90:	f100 4400 	addle.w	r4, r0, #2147483648	; 0x80000000
 800ad94:	e782      	b.n	800ac9c <__ieee754_asinf+0x3c>
 800ad96:	4601      	mov	r1, r0
 800ad98:	f7f5 ffa4 	bl	8000ce4 <__aeabi_fmul>
 800ad9c:	4605      	mov	r5, r0
 800ad9e:	4944      	ldr	r1, [pc, #272]	; (800aeb0 <__ieee754_asinf+0x250>)
 800ada0:	f7f5 ffa0 	bl	8000ce4 <__aeabi_fmul>
 800ada4:	4943      	ldr	r1, [pc, #268]	; (800aeb4 <__ieee754_asinf+0x254>)
 800ada6:	f7f5 fe95 	bl	8000ad4 <__addsf3>
 800adaa:	4629      	mov	r1, r5
 800adac:	f7f5 ff9a 	bl	8000ce4 <__aeabi_fmul>
 800adb0:	4941      	ldr	r1, [pc, #260]	; (800aeb8 <__ieee754_asinf+0x258>)
 800adb2:	f7f5 fe8d 	bl	8000ad0 <__aeabi_fsub>
 800adb6:	4629      	mov	r1, r5
 800adb8:	f7f5 ff94 	bl	8000ce4 <__aeabi_fmul>
 800adbc:	493f      	ldr	r1, [pc, #252]	; (800aebc <__ieee754_asinf+0x25c>)
 800adbe:	f7f5 fe89 	bl	8000ad4 <__addsf3>
 800adc2:	4629      	mov	r1, r5
 800adc4:	f7f5 ff8e 	bl	8000ce4 <__aeabi_fmul>
 800adc8:	493d      	ldr	r1, [pc, #244]	; (800aec0 <__ieee754_asinf+0x260>)
 800adca:	f7f5 fe81 	bl	8000ad0 <__aeabi_fsub>
 800adce:	4629      	mov	r1, r5
 800add0:	f7f5 ff88 	bl	8000ce4 <__aeabi_fmul>
 800add4:	493b      	ldr	r1, [pc, #236]	; (800aec4 <__ieee754_asinf+0x264>)
 800add6:	f7f5 fe7d 	bl	8000ad4 <__addsf3>
 800adda:	4629      	mov	r1, r5
 800addc:	f7f5 ff82 	bl	8000ce4 <__aeabi_fmul>
 800ade0:	4939      	ldr	r1, [pc, #228]	; (800aec8 <__ieee754_asinf+0x268>)
 800ade2:	4606      	mov	r6, r0
 800ade4:	4628      	mov	r0, r5
 800ade6:	f7f5 ff7d 	bl	8000ce4 <__aeabi_fmul>
 800adea:	4938      	ldr	r1, [pc, #224]	; (800aecc <__ieee754_asinf+0x26c>)
 800adec:	f7f5 fe70 	bl	8000ad0 <__aeabi_fsub>
 800adf0:	4629      	mov	r1, r5
 800adf2:	f7f5 ff77 	bl	8000ce4 <__aeabi_fmul>
 800adf6:	4936      	ldr	r1, [pc, #216]	; (800aed0 <__ieee754_asinf+0x270>)
 800adf8:	f7f5 fe6c 	bl	8000ad4 <__addsf3>
 800adfc:	4629      	mov	r1, r5
 800adfe:	f7f5 ff71 	bl	8000ce4 <__aeabi_fmul>
 800ae02:	4934      	ldr	r1, [pc, #208]	; (800aed4 <__ieee754_asinf+0x274>)
 800ae04:	f7f5 fe64 	bl	8000ad0 <__aeabi_fsub>
 800ae08:	4629      	mov	r1, r5
 800ae0a:	f7f5 ff6b 	bl	8000ce4 <__aeabi_fmul>
 800ae0e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ae12:	f7f5 fe5f 	bl	8000ad4 <__addsf3>
 800ae16:	4601      	mov	r1, r0
 800ae18:	4630      	mov	r0, r6
 800ae1a:	f7f6 f817 	bl	8000e4c <__aeabi_fdiv>
 800ae1e:	4621      	mov	r1, r4
 800ae20:	f7f5 ff60 	bl	8000ce4 <__aeabi_fmul>
 800ae24:	4601      	mov	r1, r0
 800ae26:	4620      	mov	r0, r4
 800ae28:	e72d      	b.n	800ac86 <__ieee754_asinf+0x26>
 800ae2a:	4601      	mov	r1, r0
 800ae2c:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 800ae30:	f7f5 fe50 	bl	8000ad4 <__addsf3>
 800ae34:	4649      	mov	r1, r9
 800ae36:	4682      	mov	sl, r0
 800ae38:	4640      	mov	r0, r8
 800ae3a:	f7f6 f807 	bl	8000e4c <__aeabi_fdiv>
 800ae3e:	4601      	mov	r1, r0
 800ae40:	4650      	mov	r0, sl
 800ae42:	f7f5 ff4f 	bl	8000ce4 <__aeabi_fmul>
 800ae46:	f025 050f 	bic.w	r5, r5, #15
 800ae4a:	4680      	mov	r8, r0
 800ae4c:	4629      	mov	r1, r5
 800ae4e:	4628      	mov	r0, r5
 800ae50:	f7f5 ff48 	bl	8000ce4 <__aeabi_fmul>
 800ae54:	4601      	mov	r1, r0
 800ae56:	4620      	mov	r0, r4
 800ae58:	f7f5 fe3a 	bl	8000ad0 <__aeabi_fsub>
 800ae5c:	4631      	mov	r1, r6
 800ae5e:	4604      	mov	r4, r0
 800ae60:	4628      	mov	r0, r5
 800ae62:	f7f5 fe37 	bl	8000ad4 <__addsf3>
 800ae66:	4601      	mov	r1, r0
 800ae68:	4620      	mov	r0, r4
 800ae6a:	f7f5 ffef 	bl	8000e4c <__aeabi_fdiv>
 800ae6e:	4601      	mov	r1, r0
 800ae70:	f7f5 fe30 	bl	8000ad4 <__addsf3>
 800ae74:	4601      	mov	r1, r0
 800ae76:	480c      	ldr	r0, [pc, #48]	; (800aea8 <__ieee754_asinf+0x248>)
 800ae78:	f7f5 fe2a 	bl	8000ad0 <__aeabi_fsub>
 800ae7c:	4601      	mov	r1, r0
 800ae7e:	4640      	mov	r0, r8
 800ae80:	f7f5 fe26 	bl	8000ad0 <__aeabi_fsub>
 800ae84:	4629      	mov	r1, r5
 800ae86:	4604      	mov	r4, r0
 800ae88:	4628      	mov	r0, r5
 800ae8a:	f7f5 fe23 	bl	8000ad4 <__addsf3>
 800ae8e:	4601      	mov	r1, r0
 800ae90:	4813      	ldr	r0, [pc, #76]	; (800aee0 <__ieee754_asinf+0x280>)
 800ae92:	f7f5 fe1d 	bl	8000ad0 <__aeabi_fsub>
 800ae96:	4601      	mov	r1, r0
 800ae98:	4620      	mov	r0, r4
 800ae9a:	f7f5 fe19 	bl	8000ad0 <__aeabi_fsub>
 800ae9e:	4601      	mov	r1, r0
 800aea0:	480f      	ldr	r0, [pc, #60]	; (800aee0 <__ieee754_asinf+0x280>)
 800aea2:	e770      	b.n	800ad86 <__ieee754_asinf+0x126>
 800aea4:	3fc90fdb 	.word	0x3fc90fdb
 800aea8:	b33bbd2e 	.word	0xb33bbd2e
 800aeac:	7149f2ca 	.word	0x7149f2ca
 800aeb0:	3811ef08 	.word	0x3811ef08
 800aeb4:	3a4f7f04 	.word	0x3a4f7f04
 800aeb8:	3d241146 	.word	0x3d241146
 800aebc:	3e4e0aa8 	.word	0x3e4e0aa8
 800aec0:	3ea6b090 	.word	0x3ea6b090
 800aec4:	3e2aaaab 	.word	0x3e2aaaab
 800aec8:	3d9dc62e 	.word	0x3d9dc62e
 800aecc:	3f303361 	.word	0x3f303361
 800aed0:	4001572d 	.word	0x4001572d
 800aed4:	4019d139 	.word	0x4019d139
 800aed8:	3f799999 	.word	0x3f799999
 800aedc:	333bbd2e 	.word	0x333bbd2e
 800aee0:	3f490fdb 	.word	0x3f490fdb

0800aee4 <__ieee754_atan2f>:
 800aee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800aeea:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800aeee:	4603      	mov	r3, r0
 800aef0:	dc05      	bgt.n	800aefe <__ieee754_atan2f+0x1a>
 800aef2:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800aef6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800aefa:	4607      	mov	r7, r0
 800aefc:	dd04      	ble.n	800af08 <__ieee754_atan2f+0x24>
 800aefe:	4618      	mov	r0, r3
 800af00:	f7f5 fde8 	bl	8000ad4 <__addsf3>
 800af04:	4603      	mov	r3, r0
 800af06:	e024      	b.n	800af52 <__ieee754_atan2f+0x6e>
 800af08:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800af0c:	d103      	bne.n	800af16 <__ieee754_atan2f+0x32>
 800af0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800af12:	f001 b90b 	b.w	800c12c <atanf>
 800af16:	178c      	asrs	r4, r1, #30
 800af18:	f004 0402 	and.w	r4, r4, #2
 800af1c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800af20:	b92a      	cbnz	r2, 800af2e <__ieee754_atan2f+0x4a>
 800af22:	2c02      	cmp	r4, #2
 800af24:	d057      	beq.n	800afd6 <__ieee754_atan2f+0xf2>
 800af26:	2c03      	cmp	r4, #3
 800af28:	d113      	bne.n	800af52 <__ieee754_atan2f+0x6e>
 800af2a:	4b2d      	ldr	r3, [pc, #180]	; (800afe0 <__ieee754_atan2f+0xfc>)
 800af2c:	e011      	b.n	800af52 <__ieee754_atan2f+0x6e>
 800af2e:	b91e      	cbnz	r6, 800af38 <__ieee754_atan2f+0x54>
 800af30:	2f00      	cmp	r7, #0
 800af32:	da52      	bge.n	800afda <__ieee754_atan2f+0xf6>
 800af34:	4b2b      	ldr	r3, [pc, #172]	; (800afe4 <__ieee754_atan2f+0x100>)
 800af36:	e00c      	b.n	800af52 <__ieee754_atan2f+0x6e>
 800af38:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800af3c:	d11a      	bne.n	800af74 <__ieee754_atan2f+0x90>
 800af3e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800af42:	d10c      	bne.n	800af5e <__ieee754_atan2f+0x7a>
 800af44:	2c02      	cmp	r4, #2
 800af46:	d006      	beq.n	800af56 <__ieee754_atan2f+0x72>
 800af48:	2c03      	cmp	r4, #3
 800af4a:	d006      	beq.n	800af5a <__ieee754_atan2f+0x76>
 800af4c:	2c01      	cmp	r4, #1
 800af4e:	d140      	bne.n	800afd2 <__ieee754_atan2f+0xee>
 800af50:	4b25      	ldr	r3, [pc, #148]	; (800afe8 <__ieee754_atan2f+0x104>)
 800af52:	4618      	mov	r0, r3
 800af54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af56:	4b25      	ldr	r3, [pc, #148]	; (800afec <__ieee754_atan2f+0x108>)
 800af58:	e7fb      	b.n	800af52 <__ieee754_atan2f+0x6e>
 800af5a:	4b25      	ldr	r3, [pc, #148]	; (800aff0 <__ieee754_atan2f+0x10c>)
 800af5c:	e7f9      	b.n	800af52 <__ieee754_atan2f+0x6e>
 800af5e:	2c02      	cmp	r4, #2
 800af60:	d039      	beq.n	800afd6 <__ieee754_atan2f+0xf2>
 800af62:	2c03      	cmp	r4, #3
 800af64:	d0e1      	beq.n	800af2a <__ieee754_atan2f+0x46>
 800af66:	2c01      	cmp	r4, #1
 800af68:	d102      	bne.n	800af70 <__ieee754_atan2f+0x8c>
 800af6a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af6e:	e7f0      	b.n	800af52 <__ieee754_atan2f+0x6e>
 800af70:	2300      	movs	r3, #0
 800af72:	e7ee      	b.n	800af52 <__ieee754_atan2f+0x6e>
 800af74:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800af78:	d0da      	beq.n	800af30 <__ieee754_atan2f+0x4c>
 800af7a:	1b92      	subs	r2, r2, r6
 800af7c:	15d2      	asrs	r2, r2, #23
 800af7e:	2a3c      	cmp	r2, #60	; 0x3c
 800af80:	dc17      	bgt.n	800afb2 <__ieee754_atan2f+0xce>
 800af82:	2900      	cmp	r1, #0
 800af84:	da01      	bge.n	800af8a <__ieee754_atan2f+0xa6>
 800af86:	323c      	adds	r2, #60	; 0x3c
 800af88:	db15      	blt.n	800afb6 <__ieee754_atan2f+0xd2>
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7f5 ff5e 	bl	8000e4c <__aeabi_fdiv>
 800af90:	f001 f9d8 	bl	800c344 <fabsf>
 800af94:	f001 f8ca 	bl	800c12c <atanf>
 800af98:	4603      	mov	r3, r0
 800af9a:	2c01      	cmp	r4, #1
 800af9c:	d00d      	beq.n	800afba <__ieee754_atan2f+0xd6>
 800af9e:	2c02      	cmp	r4, #2
 800afa0:	d00e      	beq.n	800afc0 <__ieee754_atan2f+0xdc>
 800afa2:	2c00      	cmp	r4, #0
 800afa4:	d0d5      	beq.n	800af52 <__ieee754_atan2f+0x6e>
 800afa6:	4913      	ldr	r1, [pc, #76]	; (800aff4 <__ieee754_atan2f+0x110>)
 800afa8:	4618      	mov	r0, r3
 800afaa:	f7f5 fd93 	bl	8000ad4 <__addsf3>
 800afae:	4912      	ldr	r1, [pc, #72]	; (800aff8 <__ieee754_atan2f+0x114>)
 800afb0:	e00c      	b.n	800afcc <__ieee754_atan2f+0xe8>
 800afb2:	4b12      	ldr	r3, [pc, #72]	; (800affc <__ieee754_atan2f+0x118>)
 800afb4:	e7f1      	b.n	800af9a <__ieee754_atan2f+0xb6>
 800afb6:	2300      	movs	r3, #0
 800afb8:	e7ef      	b.n	800af9a <__ieee754_atan2f+0xb6>
 800afba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800afbe:	e7c8      	b.n	800af52 <__ieee754_atan2f+0x6e>
 800afc0:	490c      	ldr	r1, [pc, #48]	; (800aff4 <__ieee754_atan2f+0x110>)
 800afc2:	4618      	mov	r0, r3
 800afc4:	f7f5 fd86 	bl	8000ad4 <__addsf3>
 800afc8:	4601      	mov	r1, r0
 800afca:	480b      	ldr	r0, [pc, #44]	; (800aff8 <__ieee754_atan2f+0x114>)
 800afcc:	f7f5 fd80 	bl	8000ad0 <__aeabi_fsub>
 800afd0:	e798      	b.n	800af04 <__ieee754_atan2f+0x20>
 800afd2:	4b0b      	ldr	r3, [pc, #44]	; (800b000 <__ieee754_atan2f+0x11c>)
 800afd4:	e7bd      	b.n	800af52 <__ieee754_atan2f+0x6e>
 800afd6:	4b08      	ldr	r3, [pc, #32]	; (800aff8 <__ieee754_atan2f+0x114>)
 800afd8:	e7bb      	b.n	800af52 <__ieee754_atan2f+0x6e>
 800afda:	4b08      	ldr	r3, [pc, #32]	; (800affc <__ieee754_atan2f+0x118>)
 800afdc:	e7b9      	b.n	800af52 <__ieee754_atan2f+0x6e>
 800afde:	bf00      	nop
 800afe0:	c0490fdb 	.word	0xc0490fdb
 800afe4:	bfc90fdb 	.word	0xbfc90fdb
 800afe8:	bf490fdb 	.word	0xbf490fdb
 800afec:	4016cbe4 	.word	0x4016cbe4
 800aff0:	c016cbe4 	.word	0xc016cbe4
 800aff4:	33bbbd2e 	.word	0x33bbbd2e
 800aff8:	40490fdb 	.word	0x40490fdb
 800affc:	3fc90fdb 	.word	0x3fc90fdb
 800b000:	3f490fdb 	.word	0x3f490fdb

0800b004 <__ieee754_powf>:
 800b004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b008:	b087      	sub	sp, #28
 800b00a:	9101      	str	r1, [sp, #4]
 800b00c:	9c01      	ldr	r4, [sp, #4]
 800b00e:	4681      	mov	r9, r0
 800b010:	f034 4700 	bics.w	r7, r4, #2147483648	; 0x80000000
 800b014:	f000 8324 	beq.w	800b660 <__ieee754_powf+0x65c>
 800b018:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800b01c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800b020:	4680      	mov	r8, r0
 800b022:	dc06      	bgt.n	800b032 <__ieee754_powf+0x2e>
 800b024:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800b028:	dd09      	ble.n	800b03e <__ieee754_powf+0x3a>
 800b02a:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800b02e:	f000 8317 	beq.w	800b660 <__ieee754_powf+0x65c>
 800b032:	4885      	ldr	r0, [pc, #532]	; (800b248 <__ieee754_powf+0x244>)
 800b034:	b007      	add	sp, #28
 800b036:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b03a:	f001 b9cf 	b.w	800c3dc <nanf>
 800b03e:	2800      	cmp	r0, #0
 800b040:	da1d      	bge.n	800b07e <__ieee754_powf+0x7a>
 800b042:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800b046:	da2b      	bge.n	800b0a0 <__ieee754_powf+0x9c>
 800b048:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800b04c:	db30      	blt.n	800b0b0 <__ieee754_powf+0xac>
 800b04e:	15fb      	asrs	r3, r7, #23
 800b050:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800b054:	fa47 f503 	asr.w	r5, r7, r3
 800b058:	fa05 f303 	lsl.w	r3, r5, r3
 800b05c:	42bb      	cmp	r3, r7
 800b05e:	d127      	bne.n	800b0b0 <__ieee754_powf+0xac>
 800b060:	f005 0501 	and.w	r5, r5, #1
 800b064:	f1c5 0502 	rsb	r5, r5, #2
 800b068:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800b06c:	d122      	bne.n	800b0b4 <__ieee754_powf+0xb0>
 800b06e:	2c00      	cmp	r4, #0
 800b070:	4649      	mov	r1, r9
 800b072:	da11      	bge.n	800b098 <__ieee754_powf+0x94>
 800b074:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b078:	f7f5 fee8 	bl	8000e4c <__aeabi_fdiv>
 800b07c:	e021      	b.n	800b0c2 <__ieee754_powf+0xbe>
 800b07e:	2500      	movs	r5, #0
 800b080:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800b084:	d1f0      	bne.n	800b068 <__ieee754_powf+0x64>
 800b086:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800b08a:	f000 82e9 	beq.w	800b660 <__ieee754_powf+0x65c>
 800b08e:	dd09      	ble.n	800b0a4 <__ieee754_powf+0xa0>
 800b090:	2c00      	cmp	r4, #0
 800b092:	f280 82e8 	bge.w	800b666 <__ieee754_powf+0x662>
 800b096:	2100      	movs	r1, #0
 800b098:	4608      	mov	r0, r1
 800b09a:	b007      	add	sp, #28
 800b09c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a0:	2502      	movs	r5, #2
 800b0a2:	e7ed      	b.n	800b080 <__ieee754_powf+0x7c>
 800b0a4:	2c00      	cmp	r4, #0
 800b0a6:	daf6      	bge.n	800b096 <__ieee754_powf+0x92>
 800b0a8:	9b01      	ldr	r3, [sp, #4]
 800b0aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b0ae:	e7f3      	b.n	800b098 <__ieee754_powf+0x94>
 800b0b0:	2500      	movs	r5, #0
 800b0b2:	e7d9      	b.n	800b068 <__ieee754_powf+0x64>
 800b0b4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800b0b8:	d105      	bne.n	800b0c6 <__ieee754_powf+0xc2>
 800b0ba:	4649      	mov	r1, r9
 800b0bc:	4608      	mov	r0, r1
 800b0be:	f7f5 fe11 	bl	8000ce4 <__aeabi_fmul>
 800b0c2:	4601      	mov	r1, r0
 800b0c4:	e7e8      	b.n	800b098 <__ieee754_powf+0x94>
 800b0c6:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800b0ca:	4648      	mov	r0, r9
 800b0cc:	d107      	bne.n	800b0de <__ieee754_powf+0xda>
 800b0ce:	f1b8 0f00 	cmp.w	r8, #0
 800b0d2:	db04      	blt.n	800b0de <__ieee754_powf+0xda>
 800b0d4:	b007      	add	sp, #28
 800b0d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0da:	f000 bc37 	b.w	800b94c <__ieee754_sqrtf>
 800b0de:	f001 f931 	bl	800c344 <fabsf>
 800b0e2:	4601      	mov	r1, r0
 800b0e4:	b126      	cbz	r6, 800b0f0 <__ieee754_powf+0xec>
 800b0e6:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800b0ea:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800b0ee:	d118      	bne.n	800b122 <__ieee754_powf+0x11e>
 800b0f0:	2c00      	cmp	r4, #0
 800b0f2:	da04      	bge.n	800b0fe <__ieee754_powf+0xfa>
 800b0f4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b0f8:	f7f5 fea8 	bl	8000e4c <__aeabi_fdiv>
 800b0fc:	4601      	mov	r1, r0
 800b0fe:	f1b8 0f00 	cmp.w	r8, #0
 800b102:	dac9      	bge.n	800b098 <__ieee754_powf+0x94>
 800b104:	f1a6 507e 	sub.w	r0, r6, #1065353216	; 0x3f800000
 800b108:	ea50 0305 	orrs.w	r3, r0, r5
 800b10c:	d104      	bne.n	800b118 <__ieee754_powf+0x114>
 800b10e:	4608      	mov	r0, r1
 800b110:	f7f5 fcde 	bl	8000ad0 <__aeabi_fsub>
 800b114:	4601      	mov	r1, r0
 800b116:	e7af      	b.n	800b078 <__ieee754_powf+0x74>
 800b118:	2d01      	cmp	r5, #1
 800b11a:	d1bd      	bne.n	800b098 <__ieee754_powf+0x94>
 800b11c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b120:	e7ba      	b.n	800b098 <__ieee754_powf+0x94>
 800b122:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 800b126:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800b12a:	9303      	str	r3, [sp, #12]
 800b12c:	432b      	orrs	r3, r5
 800b12e:	d101      	bne.n	800b134 <__ieee754_powf+0x130>
 800b130:	4649      	mov	r1, r9
 800b132:	e7ec      	b.n	800b10e <__ieee754_powf+0x10a>
 800b134:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800b138:	f340 8098 	ble.w	800b26c <__ieee754_powf+0x268>
 800b13c:	4b43      	ldr	r3, [pc, #268]	; (800b24c <__ieee754_powf+0x248>)
 800b13e:	429e      	cmp	r6, r3
 800b140:	dc03      	bgt.n	800b14a <__ieee754_powf+0x146>
 800b142:	2c00      	cmp	r4, #0
 800b144:	daa7      	bge.n	800b096 <__ieee754_powf+0x92>
 800b146:	4942      	ldr	r1, [pc, #264]	; (800b250 <__ieee754_powf+0x24c>)
 800b148:	e7b8      	b.n	800b0bc <__ieee754_powf+0xb8>
 800b14a:	4b42      	ldr	r3, [pc, #264]	; (800b254 <__ieee754_powf+0x250>)
 800b14c:	429e      	cmp	r6, r3
 800b14e:	dd02      	ble.n	800b156 <__ieee754_powf+0x152>
 800b150:	2c00      	cmp	r4, #0
 800b152:	dcf8      	bgt.n	800b146 <__ieee754_powf+0x142>
 800b154:	e79f      	b.n	800b096 <__ieee754_powf+0x92>
 800b156:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b15a:	f7f5 fcb9 	bl	8000ad0 <__aeabi_fsub>
 800b15e:	493e      	ldr	r1, [pc, #248]	; (800b258 <__ieee754_powf+0x254>)
 800b160:	4606      	mov	r6, r0
 800b162:	f7f5 fdbf 	bl	8000ce4 <__aeabi_fmul>
 800b166:	493d      	ldr	r1, [pc, #244]	; (800b25c <__ieee754_powf+0x258>)
 800b168:	4607      	mov	r7, r0
 800b16a:	4630      	mov	r0, r6
 800b16c:	f7f5 fdba 	bl	8000ce4 <__aeabi_fmul>
 800b170:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800b174:	4680      	mov	r8, r0
 800b176:	4630      	mov	r0, r6
 800b178:	f7f5 fdb4 	bl	8000ce4 <__aeabi_fmul>
 800b17c:	4601      	mov	r1, r0
 800b17e:	4838      	ldr	r0, [pc, #224]	; (800b260 <__ieee754_powf+0x25c>)
 800b180:	f7f5 fca6 	bl	8000ad0 <__aeabi_fsub>
 800b184:	4631      	mov	r1, r6
 800b186:	f7f5 fdad 	bl	8000ce4 <__aeabi_fmul>
 800b18a:	4601      	mov	r1, r0
 800b18c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800b190:	f7f5 fc9e 	bl	8000ad0 <__aeabi_fsub>
 800b194:	4631      	mov	r1, r6
 800b196:	4681      	mov	r9, r0
 800b198:	4630      	mov	r0, r6
 800b19a:	f7f5 fda3 	bl	8000ce4 <__aeabi_fmul>
 800b19e:	4601      	mov	r1, r0
 800b1a0:	4648      	mov	r0, r9
 800b1a2:	f7f5 fd9f 	bl	8000ce4 <__aeabi_fmul>
 800b1a6:	492f      	ldr	r1, [pc, #188]	; (800b264 <__ieee754_powf+0x260>)
 800b1a8:	f7f5 fd9c 	bl	8000ce4 <__aeabi_fmul>
 800b1ac:	4601      	mov	r1, r0
 800b1ae:	4640      	mov	r0, r8
 800b1b0:	f7f5 fc8e 	bl	8000ad0 <__aeabi_fsub>
 800b1b4:	4601      	mov	r1, r0
 800b1b6:	4606      	mov	r6, r0
 800b1b8:	4638      	mov	r0, r7
 800b1ba:	f7f5 fc8b 	bl	8000ad4 <__addsf3>
 800b1be:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 800b1c2:	f02a 0a0f 	bic.w	sl, sl, #15
 800b1c6:	4639      	mov	r1, r7
 800b1c8:	4650      	mov	r0, sl
 800b1ca:	f7f5 fc81 	bl	8000ad0 <__aeabi_fsub>
 800b1ce:	4601      	mov	r1, r0
 800b1d0:	4630      	mov	r0, r6
 800b1d2:	f7f5 fc7d 	bl	8000ad0 <__aeabi_fsub>
 800b1d6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800b1da:	9b03      	ldr	r3, [sp, #12]
 800b1dc:	3d01      	subs	r5, #1
 800b1de:	f024 040f 	bic.w	r4, r4, #15
 800b1e2:	432b      	orrs	r3, r5
 800b1e4:	4606      	mov	r6, r0
 800b1e6:	4621      	mov	r1, r4
 800b1e8:	9801      	ldr	r0, [sp, #4]
 800b1ea:	bf0c      	ite	eq
 800b1ec:	4d1e      	ldreq	r5, [pc, #120]	; (800b268 <__ieee754_powf+0x264>)
 800b1ee:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 800b1f2:	f7f5 fc6d 	bl	8000ad0 <__aeabi_fsub>
 800b1f6:	4651      	mov	r1, sl
 800b1f8:	f7f5 fd74 	bl	8000ce4 <__aeabi_fmul>
 800b1fc:	9901      	ldr	r1, [sp, #4]
 800b1fe:	4607      	mov	r7, r0
 800b200:	4630      	mov	r0, r6
 800b202:	f7f5 fd6f 	bl	8000ce4 <__aeabi_fmul>
 800b206:	4601      	mov	r1, r0
 800b208:	4638      	mov	r0, r7
 800b20a:	f7f5 fc63 	bl	8000ad4 <__addsf3>
 800b20e:	4621      	mov	r1, r4
 800b210:	4606      	mov	r6, r0
 800b212:	4650      	mov	r0, sl
 800b214:	f7f5 fd66 	bl	8000ce4 <__aeabi_fmul>
 800b218:	4601      	mov	r1, r0
 800b21a:	4607      	mov	r7, r0
 800b21c:	4681      	mov	r9, r0
 800b21e:	4630      	mov	r0, r6
 800b220:	f7f5 fc58 	bl	8000ad4 <__addsf3>
 800b224:	2800      	cmp	r0, #0
 800b226:	4682      	mov	sl, r0
 800b228:	4680      	mov	r8, r0
 800b22a:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800b22e:	f340 81fb 	ble.w	800b628 <__ieee754_powf+0x624>
 800b232:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 800b236:	f340 8149 	ble.w	800b4cc <__ieee754_powf+0x4c8>
 800b23a:	4905      	ldr	r1, [pc, #20]	; (800b250 <__ieee754_powf+0x24c>)
 800b23c:	4628      	mov	r0, r5
 800b23e:	f7f5 fd51 	bl	8000ce4 <__aeabi_fmul>
 800b242:	4903      	ldr	r1, [pc, #12]	; (800b250 <__ieee754_powf+0x24c>)
 800b244:	e73b      	b.n	800b0be <__ieee754_powf+0xba>
 800b246:	bf00      	nop
 800b248:	0800c5ce 	.word	0x0800c5ce
 800b24c:	3f7ffff7 	.word	0x3f7ffff7
 800b250:	7149f2ca 	.word	0x7149f2ca
 800b254:	3f800007 	.word	0x3f800007
 800b258:	3fb8aa00 	.word	0x3fb8aa00
 800b25c:	36eca570 	.word	0x36eca570
 800b260:	3eaaaaab 	.word	0x3eaaaaab
 800b264:	3fb8aa3b 	.word	0x3fb8aa3b
 800b268:	bf800000 	.word	0xbf800000
 800b26c:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
 800b270:	f280 810a 	bge.w	800b488 <__ieee754_powf+0x484>
 800b274:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 800b278:	f7f5 fd34 	bl	8000ce4 <__aeabi_fmul>
 800b27c:	f06f 0217 	mvn.w	r2, #23
 800b280:	4606      	mov	r6, r0
 800b282:	15f3      	asrs	r3, r6, #23
 800b284:	3b7f      	subs	r3, #127	; 0x7f
 800b286:	441a      	add	r2, r3
 800b288:	4b81      	ldr	r3, [pc, #516]	; (800b490 <__ieee754_powf+0x48c>)
 800b28a:	f3c6 0016 	ubfx	r0, r6, #0, #23
 800b28e:	4298      	cmp	r0, r3
 800b290:	f040 567e 	orr.w	r6, r0, #1065353216	; 0x3f800000
 800b294:	dd06      	ble.n	800b2a4 <__ieee754_powf+0x2a0>
 800b296:	4b7f      	ldr	r3, [pc, #508]	; (800b494 <__ieee754_powf+0x490>)
 800b298:	4298      	cmp	r0, r3
 800b29a:	f340 80f7 	ble.w	800b48c <__ieee754_powf+0x488>
 800b29e:	3201      	adds	r2, #1
 800b2a0:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 800b2a4:	2700      	movs	r7, #0
 800b2a6:	4b7c      	ldr	r3, [pc, #496]	; (800b498 <__ieee754_powf+0x494>)
 800b2a8:	4630      	mov	r0, r6
 800b2aa:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800b2ae:	9205      	str	r2, [sp, #20]
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	9302      	str	r3, [sp, #8]
 800b2b4:	f7f5 fc0c 	bl	8000ad0 <__aeabi_fsub>
 800b2b8:	4631      	mov	r1, r6
 800b2ba:	4683      	mov	fp, r0
 800b2bc:	9802      	ldr	r0, [sp, #8]
 800b2be:	f7f5 fc09 	bl	8000ad4 <__addsf3>
 800b2c2:	4601      	mov	r1, r0
 800b2c4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b2c8:	f7f5 fdc0 	bl	8000e4c <__aeabi_fdiv>
 800b2cc:	4601      	mov	r1, r0
 800b2ce:	9004      	str	r0, [sp, #16]
 800b2d0:	4658      	mov	r0, fp
 800b2d2:	f7f5 fd07 	bl	8000ce4 <__aeabi_fmul>
 800b2d6:	46b2      	mov	sl, r6
 800b2d8:	1076      	asrs	r6, r6, #1
 800b2da:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 800b2de:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800b2e2:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 800b2e6:	f028 080f 	bic.w	r8, r8, #15
 800b2ea:	eb06 5647 	add.w	r6, r6, r7, lsl #21
 800b2ee:	4681      	mov	r9, r0
 800b2f0:	4631      	mov	r1, r6
 800b2f2:	4640      	mov	r0, r8
 800b2f4:	f7f5 fcf6 	bl	8000ce4 <__aeabi_fmul>
 800b2f8:	4601      	mov	r1, r0
 800b2fa:	4658      	mov	r0, fp
 800b2fc:	f7f5 fbe8 	bl	8000ad0 <__aeabi_fsub>
 800b300:	9902      	ldr	r1, [sp, #8]
 800b302:	4683      	mov	fp, r0
 800b304:	4630      	mov	r0, r6
 800b306:	f7f5 fbe3 	bl	8000ad0 <__aeabi_fsub>
 800b30a:	4601      	mov	r1, r0
 800b30c:	4650      	mov	r0, sl
 800b30e:	f7f5 fbdf 	bl	8000ad0 <__aeabi_fsub>
 800b312:	4641      	mov	r1, r8
 800b314:	f7f5 fce6 	bl	8000ce4 <__aeabi_fmul>
 800b318:	4601      	mov	r1, r0
 800b31a:	4658      	mov	r0, fp
 800b31c:	f7f5 fbd8 	bl	8000ad0 <__aeabi_fsub>
 800b320:	9b04      	ldr	r3, [sp, #16]
 800b322:	4619      	mov	r1, r3
 800b324:	f7f5 fcde 	bl	8000ce4 <__aeabi_fmul>
 800b328:	4649      	mov	r1, r9
 800b32a:	4683      	mov	fp, r0
 800b32c:	4648      	mov	r0, r9
 800b32e:	f7f5 fcd9 	bl	8000ce4 <__aeabi_fmul>
 800b332:	4606      	mov	r6, r0
 800b334:	4959      	ldr	r1, [pc, #356]	; (800b49c <__ieee754_powf+0x498>)
 800b336:	f7f5 fcd5 	bl	8000ce4 <__aeabi_fmul>
 800b33a:	4959      	ldr	r1, [pc, #356]	; (800b4a0 <__ieee754_powf+0x49c>)
 800b33c:	f7f5 fbca 	bl	8000ad4 <__addsf3>
 800b340:	4631      	mov	r1, r6
 800b342:	f7f5 fccf 	bl	8000ce4 <__aeabi_fmul>
 800b346:	4957      	ldr	r1, [pc, #348]	; (800b4a4 <__ieee754_powf+0x4a0>)
 800b348:	f7f5 fbc4 	bl	8000ad4 <__addsf3>
 800b34c:	4631      	mov	r1, r6
 800b34e:	f7f5 fcc9 	bl	8000ce4 <__aeabi_fmul>
 800b352:	4955      	ldr	r1, [pc, #340]	; (800b4a8 <__ieee754_powf+0x4a4>)
 800b354:	f7f5 fbbe 	bl	8000ad4 <__addsf3>
 800b358:	4631      	mov	r1, r6
 800b35a:	f7f5 fcc3 	bl	8000ce4 <__aeabi_fmul>
 800b35e:	4953      	ldr	r1, [pc, #332]	; (800b4ac <__ieee754_powf+0x4a8>)
 800b360:	f7f5 fbb8 	bl	8000ad4 <__addsf3>
 800b364:	4631      	mov	r1, r6
 800b366:	f7f5 fcbd 	bl	8000ce4 <__aeabi_fmul>
 800b36a:	4951      	ldr	r1, [pc, #324]	; (800b4b0 <__ieee754_powf+0x4ac>)
 800b36c:	f7f5 fbb2 	bl	8000ad4 <__addsf3>
 800b370:	4631      	mov	r1, r6
 800b372:	4682      	mov	sl, r0
 800b374:	4630      	mov	r0, r6
 800b376:	f7f5 fcb5 	bl	8000ce4 <__aeabi_fmul>
 800b37a:	4601      	mov	r1, r0
 800b37c:	4650      	mov	r0, sl
 800b37e:	f7f5 fcb1 	bl	8000ce4 <__aeabi_fmul>
 800b382:	4606      	mov	r6, r0
 800b384:	4649      	mov	r1, r9
 800b386:	4640      	mov	r0, r8
 800b388:	f7f5 fba4 	bl	8000ad4 <__addsf3>
 800b38c:	4659      	mov	r1, fp
 800b38e:	f7f5 fca9 	bl	8000ce4 <__aeabi_fmul>
 800b392:	4631      	mov	r1, r6
 800b394:	f7f5 fb9e 	bl	8000ad4 <__addsf3>
 800b398:	4641      	mov	r1, r8
 800b39a:	4682      	mov	sl, r0
 800b39c:	4640      	mov	r0, r8
 800b39e:	f7f5 fca1 	bl	8000ce4 <__aeabi_fmul>
 800b3a2:	4944      	ldr	r1, [pc, #272]	; (800b4b4 <__ieee754_powf+0x4b0>)
 800b3a4:	9002      	str	r0, [sp, #8]
 800b3a6:	f7f5 fb95 	bl	8000ad4 <__addsf3>
 800b3aa:	4651      	mov	r1, sl
 800b3ac:	f7f5 fb92 	bl	8000ad4 <__addsf3>
 800b3b0:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 800b3b4:	f026 060f 	bic.w	r6, r6, #15
 800b3b8:	4631      	mov	r1, r6
 800b3ba:	4640      	mov	r0, r8
 800b3bc:	f7f5 fc92 	bl	8000ce4 <__aeabi_fmul>
 800b3c0:	493c      	ldr	r1, [pc, #240]	; (800b4b4 <__ieee754_powf+0x4b0>)
 800b3c2:	4680      	mov	r8, r0
 800b3c4:	4630      	mov	r0, r6
 800b3c6:	f7f5 fb83 	bl	8000ad0 <__aeabi_fsub>
 800b3ca:	9b02      	ldr	r3, [sp, #8]
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	f7f5 fb7f 	bl	8000ad0 <__aeabi_fsub>
 800b3d2:	4601      	mov	r1, r0
 800b3d4:	4650      	mov	r0, sl
 800b3d6:	f7f5 fb7b 	bl	8000ad0 <__aeabi_fsub>
 800b3da:	4649      	mov	r1, r9
 800b3dc:	f7f5 fc82 	bl	8000ce4 <__aeabi_fmul>
 800b3e0:	4659      	mov	r1, fp
 800b3e2:	4681      	mov	r9, r0
 800b3e4:	4630      	mov	r0, r6
 800b3e6:	f7f5 fc7d 	bl	8000ce4 <__aeabi_fmul>
 800b3ea:	4601      	mov	r1, r0
 800b3ec:	4648      	mov	r0, r9
 800b3ee:	f7f5 fb71 	bl	8000ad4 <__addsf3>
 800b3f2:	4682      	mov	sl, r0
 800b3f4:	4601      	mov	r1, r0
 800b3f6:	4640      	mov	r0, r8
 800b3f8:	f7f5 fb6c 	bl	8000ad4 <__addsf3>
 800b3fc:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 800b400:	f029 090f 	bic.w	r9, r9, #15
 800b404:	492c      	ldr	r1, [pc, #176]	; (800b4b8 <__ieee754_powf+0x4b4>)
 800b406:	4648      	mov	r0, r9
 800b408:	f7f5 fc6c 	bl	8000ce4 <__aeabi_fmul>
 800b40c:	4641      	mov	r1, r8
 800b40e:	4606      	mov	r6, r0
 800b410:	4648      	mov	r0, r9
 800b412:	f7f5 fb5d 	bl	8000ad0 <__aeabi_fsub>
 800b416:	4601      	mov	r1, r0
 800b418:	4650      	mov	r0, sl
 800b41a:	f7f5 fb59 	bl	8000ad0 <__aeabi_fsub>
 800b41e:	4927      	ldr	r1, [pc, #156]	; (800b4bc <__ieee754_powf+0x4b8>)
 800b420:	f7f5 fc60 	bl	8000ce4 <__aeabi_fmul>
 800b424:	4926      	ldr	r1, [pc, #152]	; (800b4c0 <__ieee754_powf+0x4bc>)
 800b426:	4680      	mov	r8, r0
 800b428:	4648      	mov	r0, r9
 800b42a:	f7f5 fc5b 	bl	8000ce4 <__aeabi_fmul>
 800b42e:	4601      	mov	r1, r0
 800b430:	4640      	mov	r0, r8
 800b432:	f7f5 fb4f 	bl	8000ad4 <__addsf3>
 800b436:	4b23      	ldr	r3, [pc, #140]	; (800b4c4 <__ieee754_powf+0x4c0>)
 800b438:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 800b43c:	f7f5 fb4a 	bl	8000ad4 <__addsf3>
 800b440:	9a05      	ldr	r2, [sp, #20]
 800b442:	4680      	mov	r8, r0
 800b444:	4610      	mov	r0, r2
 800b446:	f7f5 fbf9 	bl	8000c3c <__aeabi_i2f>
 800b44a:	4681      	mov	r9, r0
 800b44c:	4b1e      	ldr	r3, [pc, #120]	; (800b4c8 <__ieee754_powf+0x4c4>)
 800b44e:	4641      	mov	r1, r8
 800b450:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 800b454:	4630      	mov	r0, r6
 800b456:	f7f5 fb3d 	bl	8000ad4 <__addsf3>
 800b45a:	4639      	mov	r1, r7
 800b45c:	f7f5 fb3a 	bl	8000ad4 <__addsf3>
 800b460:	4649      	mov	r1, r9
 800b462:	f7f5 fb37 	bl	8000ad4 <__addsf3>
 800b466:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 800b46a:	f02a 0a0f 	bic.w	sl, sl, #15
 800b46e:	4649      	mov	r1, r9
 800b470:	4650      	mov	r0, sl
 800b472:	f7f5 fb2d 	bl	8000ad0 <__aeabi_fsub>
 800b476:	4639      	mov	r1, r7
 800b478:	f7f5 fb2a 	bl	8000ad0 <__aeabi_fsub>
 800b47c:	4631      	mov	r1, r6
 800b47e:	f7f5 fb27 	bl	8000ad0 <__aeabi_fsub>
 800b482:	4601      	mov	r1, r0
 800b484:	4640      	mov	r0, r8
 800b486:	e6a4      	b.n	800b1d2 <__ieee754_powf+0x1ce>
 800b488:	2200      	movs	r2, #0
 800b48a:	e6fa      	b.n	800b282 <__ieee754_powf+0x27e>
 800b48c:	2701      	movs	r7, #1
 800b48e:	e70a      	b.n	800b2a6 <__ieee754_powf+0x2a2>
 800b490:	001cc471 	.word	0x001cc471
 800b494:	005db3d6 	.word	0x005db3d6
 800b498:	0800c5dc 	.word	0x0800c5dc
 800b49c:	3e53f142 	.word	0x3e53f142
 800b4a0:	3e6c3255 	.word	0x3e6c3255
 800b4a4:	3e8ba305 	.word	0x3e8ba305
 800b4a8:	3eaaaaab 	.word	0x3eaaaaab
 800b4ac:	3edb6db7 	.word	0x3edb6db7
 800b4b0:	3f19999a 	.word	0x3f19999a
 800b4b4:	40400000 	.word	0x40400000
 800b4b8:	3f763800 	.word	0x3f763800
 800b4bc:	3f76384f 	.word	0x3f76384f
 800b4c0:	369dc3a0 	.word	0x369dc3a0
 800b4c4:	0800c5ec 	.word	0x0800c5ec
 800b4c8:	0800c5e4 	.word	0x0800c5e4
 800b4cc:	f040 80c0 	bne.w	800b650 <__ieee754_powf+0x64c>
 800b4d0:	4966      	ldr	r1, [pc, #408]	; (800b66c <__ieee754_powf+0x668>)
 800b4d2:	4630      	mov	r0, r6
 800b4d4:	f7f5 fafe 	bl	8000ad4 <__addsf3>
 800b4d8:	4639      	mov	r1, r7
 800b4da:	4681      	mov	r9, r0
 800b4dc:	4650      	mov	r0, sl
 800b4de:	f7f5 faf7 	bl	8000ad0 <__aeabi_fsub>
 800b4e2:	4601      	mov	r1, r0
 800b4e4:	4648      	mov	r0, r9
 800b4e6:	f7f5 fdb9 	bl	800105c <__aeabi_fcmpgt>
 800b4ea:	2800      	cmp	r0, #0
 800b4ec:	f47f aea5 	bne.w	800b23a <__ieee754_powf+0x236>
 800b4f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b4f4:	15e4      	asrs	r4, r4, #23
 800b4f6:	3c7e      	subs	r4, #126	; 0x7e
 800b4f8:	4123      	asrs	r3, r4
 800b4fa:	4443      	add	r3, r8
 800b4fc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b500:	495b      	ldr	r1, [pc, #364]	; (800b670 <__ieee754_powf+0x66c>)
 800b502:	3a7f      	subs	r2, #127	; 0x7f
 800b504:	f3c3 0416 	ubfx	r4, r3, #0, #23
 800b508:	4111      	asrs	r1, r2
 800b50a:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 800b50e:	f1c2 0217 	rsb	r2, r2, #23
 800b512:	4114      	asrs	r4, r2
 800b514:	f1b8 0f00 	cmp.w	r8, #0
 800b518:	ea23 0101 	bic.w	r1, r3, r1
 800b51c:	4638      	mov	r0, r7
 800b51e:	bfb8      	it	lt
 800b520:	4264      	neglt	r4, r4
 800b522:	f7f5 fad5 	bl	8000ad0 <__aeabi_fsub>
 800b526:	4681      	mov	r9, r0
 800b528:	4631      	mov	r1, r6
 800b52a:	4648      	mov	r0, r9
 800b52c:	f7f5 fad2 	bl	8000ad4 <__addsf3>
 800b530:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 800b534:	f027 070f 	bic.w	r7, r7, #15
 800b538:	494e      	ldr	r1, [pc, #312]	; (800b674 <__ieee754_powf+0x670>)
 800b53a:	4638      	mov	r0, r7
 800b53c:	f7f5 fbd2 	bl	8000ce4 <__aeabi_fmul>
 800b540:	4649      	mov	r1, r9
 800b542:	4680      	mov	r8, r0
 800b544:	4638      	mov	r0, r7
 800b546:	f7f5 fac3 	bl	8000ad0 <__aeabi_fsub>
 800b54a:	4601      	mov	r1, r0
 800b54c:	4630      	mov	r0, r6
 800b54e:	f7f5 fabf 	bl	8000ad0 <__aeabi_fsub>
 800b552:	4949      	ldr	r1, [pc, #292]	; (800b678 <__ieee754_powf+0x674>)
 800b554:	f7f5 fbc6 	bl	8000ce4 <__aeabi_fmul>
 800b558:	4948      	ldr	r1, [pc, #288]	; (800b67c <__ieee754_powf+0x678>)
 800b55a:	4606      	mov	r6, r0
 800b55c:	4638      	mov	r0, r7
 800b55e:	f7f5 fbc1 	bl	8000ce4 <__aeabi_fmul>
 800b562:	4601      	mov	r1, r0
 800b564:	4630      	mov	r0, r6
 800b566:	f7f5 fab5 	bl	8000ad4 <__addsf3>
 800b56a:	4607      	mov	r7, r0
 800b56c:	4601      	mov	r1, r0
 800b56e:	4640      	mov	r0, r8
 800b570:	f7f5 fab0 	bl	8000ad4 <__addsf3>
 800b574:	4641      	mov	r1, r8
 800b576:	4606      	mov	r6, r0
 800b578:	f7f5 faaa 	bl	8000ad0 <__aeabi_fsub>
 800b57c:	4601      	mov	r1, r0
 800b57e:	4638      	mov	r0, r7
 800b580:	f7f5 faa6 	bl	8000ad0 <__aeabi_fsub>
 800b584:	4631      	mov	r1, r6
 800b586:	4680      	mov	r8, r0
 800b588:	4630      	mov	r0, r6
 800b58a:	f7f5 fbab 	bl	8000ce4 <__aeabi_fmul>
 800b58e:	4607      	mov	r7, r0
 800b590:	493b      	ldr	r1, [pc, #236]	; (800b680 <__ieee754_powf+0x67c>)
 800b592:	f7f5 fba7 	bl	8000ce4 <__aeabi_fmul>
 800b596:	493b      	ldr	r1, [pc, #236]	; (800b684 <__ieee754_powf+0x680>)
 800b598:	f7f5 fa9a 	bl	8000ad0 <__aeabi_fsub>
 800b59c:	4639      	mov	r1, r7
 800b59e:	f7f5 fba1 	bl	8000ce4 <__aeabi_fmul>
 800b5a2:	4939      	ldr	r1, [pc, #228]	; (800b688 <__ieee754_powf+0x684>)
 800b5a4:	f7f5 fa96 	bl	8000ad4 <__addsf3>
 800b5a8:	4639      	mov	r1, r7
 800b5aa:	f7f5 fb9b 	bl	8000ce4 <__aeabi_fmul>
 800b5ae:	4937      	ldr	r1, [pc, #220]	; (800b68c <__ieee754_powf+0x688>)
 800b5b0:	f7f5 fa8e 	bl	8000ad0 <__aeabi_fsub>
 800b5b4:	4639      	mov	r1, r7
 800b5b6:	f7f5 fb95 	bl	8000ce4 <__aeabi_fmul>
 800b5ba:	4935      	ldr	r1, [pc, #212]	; (800b690 <__ieee754_powf+0x68c>)
 800b5bc:	f7f5 fa8a 	bl	8000ad4 <__addsf3>
 800b5c0:	4639      	mov	r1, r7
 800b5c2:	f7f5 fb8f 	bl	8000ce4 <__aeabi_fmul>
 800b5c6:	4601      	mov	r1, r0
 800b5c8:	4630      	mov	r0, r6
 800b5ca:	f7f5 fa81 	bl	8000ad0 <__aeabi_fsub>
 800b5ce:	4607      	mov	r7, r0
 800b5d0:	4601      	mov	r1, r0
 800b5d2:	4630      	mov	r0, r6
 800b5d4:	f7f5 fb86 	bl	8000ce4 <__aeabi_fmul>
 800b5d8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b5dc:	4681      	mov	r9, r0
 800b5de:	4638      	mov	r0, r7
 800b5e0:	f7f5 fa76 	bl	8000ad0 <__aeabi_fsub>
 800b5e4:	4601      	mov	r1, r0
 800b5e6:	4648      	mov	r0, r9
 800b5e8:	f7f5 fc30 	bl	8000e4c <__aeabi_fdiv>
 800b5ec:	4641      	mov	r1, r8
 800b5ee:	4607      	mov	r7, r0
 800b5f0:	4630      	mov	r0, r6
 800b5f2:	f7f5 fb77 	bl	8000ce4 <__aeabi_fmul>
 800b5f6:	4641      	mov	r1, r8
 800b5f8:	f7f5 fa6c 	bl	8000ad4 <__addsf3>
 800b5fc:	4601      	mov	r1, r0
 800b5fe:	4638      	mov	r0, r7
 800b600:	f7f5 fa66 	bl	8000ad0 <__aeabi_fsub>
 800b604:	4631      	mov	r1, r6
 800b606:	f7f5 fa63 	bl	8000ad0 <__aeabi_fsub>
 800b60a:	4601      	mov	r1, r0
 800b60c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800b610:	f7f5 fa5e 	bl	8000ad0 <__aeabi_fsub>
 800b614:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 800b618:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b61c:	da1e      	bge.n	800b65c <__ieee754_powf+0x658>
 800b61e:	4621      	mov	r1, r4
 800b620:	f000 ff30 	bl	800c484 <scalbnf>
 800b624:	4629      	mov	r1, r5
 800b626:	e54a      	b.n	800b0be <__ieee754_powf+0xba>
 800b628:	4b1a      	ldr	r3, [pc, #104]	; (800b694 <__ieee754_powf+0x690>)
 800b62a:	429c      	cmp	r4, r3
 800b62c:	dd05      	ble.n	800b63a <__ieee754_powf+0x636>
 800b62e:	491a      	ldr	r1, [pc, #104]	; (800b698 <__ieee754_powf+0x694>)
 800b630:	4628      	mov	r0, r5
 800b632:	f7f5 fb57 	bl	8000ce4 <__aeabi_fmul>
 800b636:	4918      	ldr	r1, [pc, #96]	; (800b698 <__ieee754_powf+0x694>)
 800b638:	e541      	b.n	800b0be <__ieee754_powf+0xba>
 800b63a:	d109      	bne.n	800b650 <__ieee754_powf+0x64c>
 800b63c:	4639      	mov	r1, r7
 800b63e:	f7f5 fa47 	bl	8000ad0 <__aeabi_fsub>
 800b642:	4631      	mov	r1, r6
 800b644:	f7f5 fd00 	bl	8001048 <__aeabi_fcmpge>
 800b648:	2800      	cmp	r0, #0
 800b64a:	f43f af51 	beq.w	800b4f0 <__ieee754_powf+0x4ec>
 800b64e:	e7ee      	b.n	800b62e <__ieee754_powf+0x62a>
 800b650:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800b654:	f73f af4c 	bgt.w	800b4f0 <__ieee754_powf+0x4ec>
 800b658:	2400      	movs	r4, #0
 800b65a:	e765      	b.n	800b528 <__ieee754_powf+0x524>
 800b65c:	4618      	mov	r0, r3
 800b65e:	e7e1      	b.n	800b624 <__ieee754_powf+0x620>
 800b660:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b664:	e518      	b.n	800b098 <__ieee754_powf+0x94>
 800b666:	9901      	ldr	r1, [sp, #4]
 800b668:	e516      	b.n	800b098 <__ieee754_powf+0x94>
 800b66a:	bf00      	nop
 800b66c:	3338aa3c 	.word	0x3338aa3c
 800b670:	007fffff 	.word	0x007fffff
 800b674:	3f317200 	.word	0x3f317200
 800b678:	3f317218 	.word	0x3f317218
 800b67c:	35bfbe8c 	.word	0x35bfbe8c
 800b680:	3331bb4c 	.word	0x3331bb4c
 800b684:	35ddea0e 	.word	0x35ddea0e
 800b688:	388ab355 	.word	0x388ab355
 800b68c:	3b360b61 	.word	0x3b360b61
 800b690:	3e2aaaab 	.word	0x3e2aaaab
 800b694:	43160000 	.word	0x43160000
 800b698:	0da24260 	.word	0x0da24260

0800b69c <__ieee754_rem_pio2f>:
 800b69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a0:	4a9d      	ldr	r2, [pc, #628]	; (800b918 <__ieee754_rem_pio2f+0x27c>)
 800b6a2:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800b6a6:	4295      	cmp	r5, r2
 800b6a8:	b087      	sub	sp, #28
 800b6aa:	460c      	mov	r4, r1
 800b6ac:	4607      	mov	r7, r0
 800b6ae:	dc04      	bgt.n	800b6ba <__ieee754_rem_pio2f+0x1e>
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	6020      	str	r0, [r4, #0]
 800b6b4:	604b      	str	r3, [r1, #4]
 800b6b6:	2600      	movs	r6, #0
 800b6b8:	e01a      	b.n	800b6f0 <__ieee754_rem_pio2f+0x54>
 800b6ba:	4a98      	ldr	r2, [pc, #608]	; (800b91c <__ieee754_rem_pio2f+0x280>)
 800b6bc:	4295      	cmp	r5, r2
 800b6be:	dc4b      	bgt.n	800b758 <__ieee754_rem_pio2f+0xbc>
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	f025 050f 	bic.w	r5, r5, #15
 800b6c6:	4996      	ldr	r1, [pc, #600]	; (800b920 <__ieee754_rem_pio2f+0x284>)
 800b6c8:	4e96      	ldr	r6, [pc, #600]	; (800b924 <__ieee754_rem_pio2f+0x288>)
 800b6ca:	dd23      	ble.n	800b714 <__ieee754_rem_pio2f+0x78>
 800b6cc:	f7f5 fa00 	bl	8000ad0 <__aeabi_fsub>
 800b6d0:	42b5      	cmp	r5, r6
 800b6d2:	4607      	mov	r7, r0
 800b6d4:	d010      	beq.n	800b6f8 <__ieee754_rem_pio2f+0x5c>
 800b6d6:	4994      	ldr	r1, [pc, #592]	; (800b928 <__ieee754_rem_pio2f+0x28c>)
 800b6d8:	f7f5 f9fa 	bl	8000ad0 <__aeabi_fsub>
 800b6dc:	4601      	mov	r1, r0
 800b6de:	6020      	str	r0, [r4, #0]
 800b6e0:	4638      	mov	r0, r7
 800b6e2:	f7f5 f9f5 	bl	8000ad0 <__aeabi_fsub>
 800b6e6:	4990      	ldr	r1, [pc, #576]	; (800b928 <__ieee754_rem_pio2f+0x28c>)
 800b6e8:	f7f5 f9f2 	bl	8000ad0 <__aeabi_fsub>
 800b6ec:	2601      	movs	r6, #1
 800b6ee:	6060      	str	r0, [r4, #4]
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	b007      	add	sp, #28
 800b6f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6f8:	498c      	ldr	r1, [pc, #560]	; (800b92c <__ieee754_rem_pio2f+0x290>)
 800b6fa:	f7f5 f9e9 	bl	8000ad0 <__aeabi_fsub>
 800b6fe:	498c      	ldr	r1, [pc, #560]	; (800b930 <__ieee754_rem_pio2f+0x294>)
 800b700:	4605      	mov	r5, r0
 800b702:	f7f5 f9e5 	bl	8000ad0 <__aeabi_fsub>
 800b706:	4601      	mov	r1, r0
 800b708:	6020      	str	r0, [r4, #0]
 800b70a:	4628      	mov	r0, r5
 800b70c:	f7f5 f9e0 	bl	8000ad0 <__aeabi_fsub>
 800b710:	4987      	ldr	r1, [pc, #540]	; (800b930 <__ieee754_rem_pio2f+0x294>)
 800b712:	e7e9      	b.n	800b6e8 <__ieee754_rem_pio2f+0x4c>
 800b714:	f7f5 f9de 	bl	8000ad4 <__addsf3>
 800b718:	42b5      	cmp	r5, r6
 800b71a:	4607      	mov	r7, r0
 800b71c:	d00e      	beq.n	800b73c <__ieee754_rem_pio2f+0xa0>
 800b71e:	4982      	ldr	r1, [pc, #520]	; (800b928 <__ieee754_rem_pio2f+0x28c>)
 800b720:	f7f5 f9d8 	bl	8000ad4 <__addsf3>
 800b724:	4601      	mov	r1, r0
 800b726:	6020      	str	r0, [r4, #0]
 800b728:	4638      	mov	r0, r7
 800b72a:	f7f5 f9d1 	bl	8000ad0 <__aeabi_fsub>
 800b72e:	497e      	ldr	r1, [pc, #504]	; (800b928 <__ieee754_rem_pio2f+0x28c>)
 800b730:	f7f5 f9d0 	bl	8000ad4 <__addsf3>
 800b734:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800b738:	6060      	str	r0, [r4, #4]
 800b73a:	e7d9      	b.n	800b6f0 <__ieee754_rem_pio2f+0x54>
 800b73c:	497b      	ldr	r1, [pc, #492]	; (800b92c <__ieee754_rem_pio2f+0x290>)
 800b73e:	f7f5 f9c9 	bl	8000ad4 <__addsf3>
 800b742:	497b      	ldr	r1, [pc, #492]	; (800b930 <__ieee754_rem_pio2f+0x294>)
 800b744:	4605      	mov	r5, r0
 800b746:	f7f5 f9c5 	bl	8000ad4 <__addsf3>
 800b74a:	4601      	mov	r1, r0
 800b74c:	6020      	str	r0, [r4, #0]
 800b74e:	4628      	mov	r0, r5
 800b750:	f7f5 f9be 	bl	8000ad0 <__aeabi_fsub>
 800b754:	4976      	ldr	r1, [pc, #472]	; (800b930 <__ieee754_rem_pio2f+0x294>)
 800b756:	e7eb      	b.n	800b730 <__ieee754_rem_pio2f+0x94>
 800b758:	4a76      	ldr	r2, [pc, #472]	; (800b934 <__ieee754_rem_pio2f+0x298>)
 800b75a:	4295      	cmp	r5, r2
 800b75c:	f300 808c 	bgt.w	800b878 <__ieee754_rem_pio2f+0x1dc>
 800b760:	f000 fdf0 	bl	800c344 <fabsf>
 800b764:	4974      	ldr	r1, [pc, #464]	; (800b938 <__ieee754_rem_pio2f+0x29c>)
 800b766:	4680      	mov	r8, r0
 800b768:	f7f5 fabc 	bl	8000ce4 <__aeabi_fmul>
 800b76c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b770:	f7f5 f9b0 	bl	8000ad4 <__addsf3>
 800b774:	f7f5 fc92 	bl	800109c <__aeabi_f2iz>
 800b778:	4606      	mov	r6, r0
 800b77a:	f7f5 fa5f 	bl	8000c3c <__aeabi_i2f>
 800b77e:	4968      	ldr	r1, [pc, #416]	; (800b920 <__ieee754_rem_pio2f+0x284>)
 800b780:	4682      	mov	sl, r0
 800b782:	f7f5 faaf 	bl	8000ce4 <__aeabi_fmul>
 800b786:	4601      	mov	r1, r0
 800b788:	4640      	mov	r0, r8
 800b78a:	f7f5 f9a1 	bl	8000ad0 <__aeabi_fsub>
 800b78e:	4966      	ldr	r1, [pc, #408]	; (800b928 <__ieee754_rem_pio2f+0x28c>)
 800b790:	4680      	mov	r8, r0
 800b792:	4650      	mov	r0, sl
 800b794:	f7f5 faa6 	bl	8000ce4 <__aeabi_fmul>
 800b798:	2e1f      	cmp	r6, #31
 800b79a:	4681      	mov	r9, r0
 800b79c:	dc0c      	bgt.n	800b7b8 <__ieee754_rem_pio2f+0x11c>
 800b79e:	4a67      	ldr	r2, [pc, #412]	; (800b93c <__ieee754_rem_pio2f+0x2a0>)
 800b7a0:	1e71      	subs	r1, r6, #1
 800b7a2:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800b7a6:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800b7aa:	4293      	cmp	r3, r2
 800b7ac:	d004      	beq.n	800b7b8 <__ieee754_rem_pio2f+0x11c>
 800b7ae:	4649      	mov	r1, r9
 800b7b0:	4640      	mov	r0, r8
 800b7b2:	f7f5 f98d 	bl	8000ad0 <__aeabi_fsub>
 800b7b6:	e009      	b.n	800b7cc <__ieee754_rem_pio2f+0x130>
 800b7b8:	4649      	mov	r1, r9
 800b7ba:	4640      	mov	r0, r8
 800b7bc:	f7f5 f988 	bl	8000ad0 <__aeabi_fsub>
 800b7c0:	15ed      	asrs	r5, r5, #23
 800b7c2:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b7c6:	1aeb      	subs	r3, r5, r3
 800b7c8:	2b08      	cmp	r3, #8
 800b7ca:	dc01      	bgt.n	800b7d0 <__ieee754_rem_pio2f+0x134>
 800b7cc:	6020      	str	r0, [r4, #0]
 800b7ce:	e024      	b.n	800b81a <__ieee754_rem_pio2f+0x17e>
 800b7d0:	4956      	ldr	r1, [pc, #344]	; (800b92c <__ieee754_rem_pio2f+0x290>)
 800b7d2:	4650      	mov	r0, sl
 800b7d4:	f7f5 fa86 	bl	8000ce4 <__aeabi_fmul>
 800b7d8:	4681      	mov	r9, r0
 800b7da:	4601      	mov	r1, r0
 800b7dc:	4640      	mov	r0, r8
 800b7de:	f7f5 f977 	bl	8000ad0 <__aeabi_fsub>
 800b7e2:	4601      	mov	r1, r0
 800b7e4:	4683      	mov	fp, r0
 800b7e6:	4640      	mov	r0, r8
 800b7e8:	f7f5 f972 	bl	8000ad0 <__aeabi_fsub>
 800b7ec:	4649      	mov	r1, r9
 800b7ee:	f7f5 f96f 	bl	8000ad0 <__aeabi_fsub>
 800b7f2:	4680      	mov	r8, r0
 800b7f4:	494e      	ldr	r1, [pc, #312]	; (800b930 <__ieee754_rem_pio2f+0x294>)
 800b7f6:	4650      	mov	r0, sl
 800b7f8:	f7f5 fa74 	bl	8000ce4 <__aeabi_fmul>
 800b7fc:	4641      	mov	r1, r8
 800b7fe:	f7f5 f967 	bl	8000ad0 <__aeabi_fsub>
 800b802:	4601      	mov	r1, r0
 800b804:	4681      	mov	r9, r0
 800b806:	4658      	mov	r0, fp
 800b808:	f7f5 f962 	bl	8000ad0 <__aeabi_fsub>
 800b80c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b810:	1aed      	subs	r5, r5, r3
 800b812:	2d19      	cmp	r5, #25
 800b814:	dc15      	bgt.n	800b842 <__ieee754_rem_pio2f+0x1a6>
 800b816:	46d8      	mov	r8, fp
 800b818:	6020      	str	r0, [r4, #0]
 800b81a:	6825      	ldr	r5, [r4, #0]
 800b81c:	4640      	mov	r0, r8
 800b81e:	4629      	mov	r1, r5
 800b820:	f7f5 f956 	bl	8000ad0 <__aeabi_fsub>
 800b824:	4649      	mov	r1, r9
 800b826:	f7f5 f953 	bl	8000ad0 <__aeabi_fsub>
 800b82a:	2f00      	cmp	r7, #0
 800b82c:	6060      	str	r0, [r4, #4]
 800b82e:	f6bf af5f 	bge.w	800b6f0 <__ieee754_rem_pio2f+0x54>
 800b832:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800b836:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b83a:	6025      	str	r5, [r4, #0]
 800b83c:	6060      	str	r0, [r4, #4]
 800b83e:	4276      	negs	r6, r6
 800b840:	e756      	b.n	800b6f0 <__ieee754_rem_pio2f+0x54>
 800b842:	493f      	ldr	r1, [pc, #252]	; (800b940 <__ieee754_rem_pio2f+0x2a4>)
 800b844:	4650      	mov	r0, sl
 800b846:	f7f5 fa4d 	bl	8000ce4 <__aeabi_fmul>
 800b84a:	4605      	mov	r5, r0
 800b84c:	4601      	mov	r1, r0
 800b84e:	4658      	mov	r0, fp
 800b850:	f7f5 f93e 	bl	8000ad0 <__aeabi_fsub>
 800b854:	4601      	mov	r1, r0
 800b856:	4680      	mov	r8, r0
 800b858:	4658      	mov	r0, fp
 800b85a:	f7f5 f939 	bl	8000ad0 <__aeabi_fsub>
 800b85e:	4629      	mov	r1, r5
 800b860:	f7f5 f936 	bl	8000ad0 <__aeabi_fsub>
 800b864:	4605      	mov	r5, r0
 800b866:	4937      	ldr	r1, [pc, #220]	; (800b944 <__ieee754_rem_pio2f+0x2a8>)
 800b868:	4650      	mov	r0, sl
 800b86a:	f7f5 fa3b 	bl	8000ce4 <__aeabi_fmul>
 800b86e:	4629      	mov	r1, r5
 800b870:	f7f5 f92e 	bl	8000ad0 <__aeabi_fsub>
 800b874:	4681      	mov	r9, r0
 800b876:	e79a      	b.n	800b7ae <__ieee754_rem_pio2f+0x112>
 800b878:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b87c:	db05      	blt.n	800b88a <__ieee754_rem_pio2f+0x1ee>
 800b87e:	4601      	mov	r1, r0
 800b880:	f7f5 f926 	bl	8000ad0 <__aeabi_fsub>
 800b884:	6060      	str	r0, [r4, #4]
 800b886:	6020      	str	r0, [r4, #0]
 800b888:	e715      	b.n	800b6b6 <__ieee754_rem_pio2f+0x1a>
 800b88a:	15ee      	asrs	r6, r5, #23
 800b88c:	3e86      	subs	r6, #134	; 0x86
 800b88e:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 800b892:	4628      	mov	r0, r5
 800b894:	f7f5 fc02 	bl	800109c <__aeabi_f2iz>
 800b898:	f7f5 f9d0 	bl	8000c3c <__aeabi_i2f>
 800b89c:	4601      	mov	r1, r0
 800b89e:	9003      	str	r0, [sp, #12]
 800b8a0:	4628      	mov	r0, r5
 800b8a2:	f7f5 f915 	bl	8000ad0 <__aeabi_fsub>
 800b8a6:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b8aa:	f7f5 fa1b 	bl	8000ce4 <__aeabi_fmul>
 800b8ae:	4680      	mov	r8, r0
 800b8b0:	f7f5 fbf4 	bl	800109c <__aeabi_f2iz>
 800b8b4:	f7f5 f9c2 	bl	8000c3c <__aeabi_i2f>
 800b8b8:	4601      	mov	r1, r0
 800b8ba:	9004      	str	r0, [sp, #16]
 800b8bc:	4605      	mov	r5, r0
 800b8be:	4640      	mov	r0, r8
 800b8c0:	f7f5 f906 	bl	8000ad0 <__aeabi_fsub>
 800b8c4:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800b8c8:	f7f5 fa0c 	bl	8000ce4 <__aeabi_fmul>
 800b8cc:	2100      	movs	r1, #0
 800b8ce:	9005      	str	r0, [sp, #20]
 800b8d0:	f7f5 fb9c 	bl	800100c <__aeabi_fcmpeq>
 800b8d4:	b1e8      	cbz	r0, 800b912 <__ieee754_rem_pio2f+0x276>
 800b8d6:	2100      	movs	r1, #0
 800b8d8:	4628      	mov	r0, r5
 800b8da:	f7f5 fb97 	bl	800100c <__aeabi_fcmpeq>
 800b8de:	2800      	cmp	r0, #0
 800b8e0:	bf14      	ite	ne
 800b8e2:	2301      	movne	r3, #1
 800b8e4:	2302      	moveq	r3, #2
 800b8e6:	4a18      	ldr	r2, [pc, #96]	; (800b948 <__ieee754_rem_pio2f+0x2ac>)
 800b8e8:	4621      	mov	r1, r4
 800b8ea:	9201      	str	r2, [sp, #4]
 800b8ec:	2202      	movs	r2, #2
 800b8ee:	a803      	add	r0, sp, #12
 800b8f0:	9200      	str	r2, [sp, #0]
 800b8f2:	4632      	mov	r2, r6
 800b8f4:	f000 f8fe 	bl	800baf4 <__kernel_rem_pio2f>
 800b8f8:	2f00      	cmp	r7, #0
 800b8fa:	4606      	mov	r6, r0
 800b8fc:	f6bf aef8 	bge.w	800b6f0 <__ieee754_rem_pio2f+0x54>
 800b900:	6823      	ldr	r3, [r4, #0]
 800b902:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b906:	6023      	str	r3, [r4, #0]
 800b908:	6863      	ldr	r3, [r4, #4]
 800b90a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b90e:	6063      	str	r3, [r4, #4]
 800b910:	e795      	b.n	800b83e <__ieee754_rem_pio2f+0x1a2>
 800b912:	2303      	movs	r3, #3
 800b914:	e7e7      	b.n	800b8e6 <__ieee754_rem_pio2f+0x24a>
 800b916:	bf00      	nop
 800b918:	3f490fd8 	.word	0x3f490fd8
 800b91c:	4016cbe3 	.word	0x4016cbe3
 800b920:	3fc90f80 	.word	0x3fc90f80
 800b924:	3fc90fd0 	.word	0x3fc90fd0
 800b928:	37354443 	.word	0x37354443
 800b92c:	37354400 	.word	0x37354400
 800b930:	2e85a308 	.word	0x2e85a308
 800b934:	43490f80 	.word	0x43490f80
 800b938:	3f22f984 	.word	0x3f22f984
 800b93c:	0800c5f4 	.word	0x0800c5f4
 800b940:	2e85a300 	.word	0x2e85a300
 800b944:	248d3132 	.word	0x248d3132
 800b948:	0800c674 	.word	0x0800c674

0800b94c <__ieee754_sqrtf>:
 800b94c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800b950:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b954:	b570      	push	{r4, r5, r6, lr}
 800b956:	4603      	mov	r3, r0
 800b958:	4604      	mov	r4, r0
 800b95a:	d309      	bcc.n	800b970 <__ieee754_sqrtf+0x24>
 800b95c:	4601      	mov	r1, r0
 800b95e:	f7f5 f9c1 	bl	8000ce4 <__aeabi_fmul>
 800b962:	4601      	mov	r1, r0
 800b964:	4620      	mov	r0, r4
 800b966:	f7f5 f8b5 	bl	8000ad4 <__addsf3>
 800b96a:	4604      	mov	r4, r0
 800b96c:	4620      	mov	r0, r4
 800b96e:	bd70      	pop	{r4, r5, r6, pc}
 800b970:	2a00      	cmp	r2, #0
 800b972:	d0fb      	beq.n	800b96c <__ieee754_sqrtf+0x20>
 800b974:	2800      	cmp	r0, #0
 800b976:	da06      	bge.n	800b986 <__ieee754_sqrtf+0x3a>
 800b978:	4601      	mov	r1, r0
 800b97a:	f7f5 f8a9 	bl	8000ad0 <__aeabi_fsub>
 800b97e:	4601      	mov	r1, r0
 800b980:	f7f5 fa64 	bl	8000e4c <__aeabi_fdiv>
 800b984:	e7f1      	b.n	800b96a <__ieee754_sqrtf+0x1e>
 800b986:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800b98a:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800b98e:	d32e      	bcc.n	800b9ee <__ieee754_sqrtf+0xa2>
 800b990:	3c7f      	subs	r4, #127	; 0x7f
 800b992:	07e2      	lsls	r2, r4, #31
 800b994:	f04f 0200 	mov.w	r2, #0
 800b998:	ea4f 0164 	mov.w	r1, r4, asr #1
 800b99c:	4616      	mov	r6, r2
 800b99e:	f04f 0419 	mov.w	r4, #25
 800b9a2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800b9a6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b9aa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b9ae:	bf48      	it	mi
 800b9b0:	005b      	lslmi	r3, r3, #1
 800b9b2:	005b      	lsls	r3, r3, #1
 800b9b4:	1835      	adds	r5, r6, r0
 800b9b6:	429d      	cmp	r5, r3
 800b9b8:	bfde      	ittt	le
 800b9ba:	182e      	addle	r6, r5, r0
 800b9bc:	1b5b      	suble	r3, r3, r5
 800b9be:	1812      	addle	r2, r2, r0
 800b9c0:	3c01      	subs	r4, #1
 800b9c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b9c6:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800b9ca:	d1f3      	bne.n	800b9b4 <__ieee754_sqrtf+0x68>
 800b9cc:	b113      	cbz	r3, 800b9d4 <__ieee754_sqrtf+0x88>
 800b9ce:	3201      	adds	r2, #1
 800b9d0:	f022 0201 	bic.w	r2, r2, #1
 800b9d4:	1054      	asrs	r4, r2, #1
 800b9d6:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800b9da:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 800b9de:	e7c5      	b.n	800b96c <__ieee754_sqrtf+0x20>
 800b9e0:	005b      	lsls	r3, r3, #1
 800b9e2:	3201      	adds	r2, #1
 800b9e4:	0219      	lsls	r1, r3, #8
 800b9e6:	d5fb      	bpl.n	800b9e0 <__ieee754_sqrtf+0x94>
 800b9e8:	3a01      	subs	r2, #1
 800b9ea:	1aa4      	subs	r4, r4, r2
 800b9ec:	e7d0      	b.n	800b990 <__ieee754_sqrtf+0x44>
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	e7f8      	b.n	800b9e4 <__ieee754_sqrtf+0x98>
	...

0800b9f4 <__kernel_cosf>:
 800b9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9f8:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800b9fc:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800ba00:	4606      	mov	r6, r0
 800ba02:	4688      	mov	r8, r1
 800ba04:	da03      	bge.n	800ba0e <__kernel_cosf+0x1a>
 800ba06:	f7f5 fb49 	bl	800109c <__aeabi_f2iz>
 800ba0a:	2800      	cmp	r0, #0
 800ba0c:	d05c      	beq.n	800bac8 <__kernel_cosf+0xd4>
 800ba0e:	4631      	mov	r1, r6
 800ba10:	4630      	mov	r0, r6
 800ba12:	f7f5 f967 	bl	8000ce4 <__aeabi_fmul>
 800ba16:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800ba1a:	4605      	mov	r5, r0
 800ba1c:	f7f5 f962 	bl	8000ce4 <__aeabi_fmul>
 800ba20:	492b      	ldr	r1, [pc, #172]	; (800bad0 <__kernel_cosf+0xdc>)
 800ba22:	4607      	mov	r7, r0
 800ba24:	4628      	mov	r0, r5
 800ba26:	f7f5 f95d 	bl	8000ce4 <__aeabi_fmul>
 800ba2a:	492a      	ldr	r1, [pc, #168]	; (800bad4 <__kernel_cosf+0xe0>)
 800ba2c:	f7f5 f852 	bl	8000ad4 <__addsf3>
 800ba30:	4629      	mov	r1, r5
 800ba32:	f7f5 f957 	bl	8000ce4 <__aeabi_fmul>
 800ba36:	4928      	ldr	r1, [pc, #160]	; (800bad8 <__kernel_cosf+0xe4>)
 800ba38:	f7f5 f84a 	bl	8000ad0 <__aeabi_fsub>
 800ba3c:	4629      	mov	r1, r5
 800ba3e:	f7f5 f951 	bl	8000ce4 <__aeabi_fmul>
 800ba42:	4926      	ldr	r1, [pc, #152]	; (800badc <__kernel_cosf+0xe8>)
 800ba44:	f7f5 f846 	bl	8000ad4 <__addsf3>
 800ba48:	4629      	mov	r1, r5
 800ba4a:	f7f5 f94b 	bl	8000ce4 <__aeabi_fmul>
 800ba4e:	4924      	ldr	r1, [pc, #144]	; (800bae0 <__kernel_cosf+0xec>)
 800ba50:	f7f5 f83e 	bl	8000ad0 <__aeabi_fsub>
 800ba54:	4629      	mov	r1, r5
 800ba56:	f7f5 f945 	bl	8000ce4 <__aeabi_fmul>
 800ba5a:	4922      	ldr	r1, [pc, #136]	; (800bae4 <__kernel_cosf+0xf0>)
 800ba5c:	f7f5 f83a 	bl	8000ad4 <__addsf3>
 800ba60:	4629      	mov	r1, r5
 800ba62:	f7f5 f93f 	bl	8000ce4 <__aeabi_fmul>
 800ba66:	4629      	mov	r1, r5
 800ba68:	f7f5 f93c 	bl	8000ce4 <__aeabi_fmul>
 800ba6c:	4641      	mov	r1, r8
 800ba6e:	4605      	mov	r5, r0
 800ba70:	4630      	mov	r0, r6
 800ba72:	f7f5 f937 	bl	8000ce4 <__aeabi_fmul>
 800ba76:	4601      	mov	r1, r0
 800ba78:	4628      	mov	r0, r5
 800ba7a:	f7f5 f829 	bl	8000ad0 <__aeabi_fsub>
 800ba7e:	4b1a      	ldr	r3, [pc, #104]	; (800bae8 <__kernel_cosf+0xf4>)
 800ba80:	4605      	mov	r5, r0
 800ba82:	429c      	cmp	r4, r3
 800ba84:	dc0a      	bgt.n	800ba9c <__kernel_cosf+0xa8>
 800ba86:	4601      	mov	r1, r0
 800ba88:	4638      	mov	r0, r7
 800ba8a:	f7f5 f821 	bl	8000ad0 <__aeabi_fsub>
 800ba8e:	4601      	mov	r1, r0
 800ba90:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ba94:	f7f5 f81c 	bl	8000ad0 <__aeabi_fsub>
 800ba98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba9c:	4b13      	ldr	r3, [pc, #76]	; (800baec <__kernel_cosf+0xf8>)
 800ba9e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800baa2:	429c      	cmp	r4, r3
 800baa4:	bfcc      	ite	gt
 800baa6:	4c12      	ldrgt	r4, [pc, #72]	; (800baf0 <__kernel_cosf+0xfc>)
 800baa8:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800baac:	4621      	mov	r1, r4
 800baae:	f7f5 f80f 	bl	8000ad0 <__aeabi_fsub>
 800bab2:	4621      	mov	r1, r4
 800bab4:	4606      	mov	r6, r0
 800bab6:	4638      	mov	r0, r7
 800bab8:	f7f5 f80a 	bl	8000ad0 <__aeabi_fsub>
 800babc:	4629      	mov	r1, r5
 800babe:	f7f5 f807 	bl	8000ad0 <__aeabi_fsub>
 800bac2:	4601      	mov	r1, r0
 800bac4:	4630      	mov	r0, r6
 800bac6:	e7e5      	b.n	800ba94 <__kernel_cosf+0xa0>
 800bac8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800bacc:	e7e4      	b.n	800ba98 <__kernel_cosf+0xa4>
 800bace:	bf00      	nop
 800bad0:	ad47d74e 	.word	0xad47d74e
 800bad4:	310f74f6 	.word	0x310f74f6
 800bad8:	3493f27c 	.word	0x3493f27c
 800badc:	37d00d01 	.word	0x37d00d01
 800bae0:	3ab60b61 	.word	0x3ab60b61
 800bae4:	3d2aaaab 	.word	0x3d2aaaab
 800bae8:	3e999999 	.word	0x3e999999
 800baec:	3f480000 	.word	0x3f480000
 800baf0:	3e900000 	.word	0x3e900000

0800baf4 <__kernel_rem_pio2f>:
 800baf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf8:	b0d9      	sub	sp, #356	; 0x164
 800bafa:	9304      	str	r3, [sp, #16]
 800bafc:	9101      	str	r1, [sp, #4]
 800bafe:	4bc3      	ldr	r3, [pc, #780]	; (800be0c <__kernel_rem_pio2f+0x318>)
 800bb00:	9962      	ldr	r1, [sp, #392]	; 0x188
 800bb02:	1ed4      	subs	r4, r2, #3
 800bb04:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bb08:	2500      	movs	r5, #0
 800bb0a:	9302      	str	r3, [sp, #8]
 800bb0c:	9b04      	ldr	r3, [sp, #16]
 800bb0e:	f04f 0a00 	mov.w	sl, #0
 800bb12:	3b01      	subs	r3, #1
 800bb14:	9303      	str	r3, [sp, #12]
 800bb16:	2308      	movs	r3, #8
 800bb18:	fb94 f4f3 	sdiv	r4, r4, r3
 800bb1c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800bb20:	1c66      	adds	r6, r4, #1
 800bb22:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 800bb26:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800bb2a:	eb03 0802 	add.w	r8, r3, r2
 800bb2e:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800bb30:	1aa7      	subs	r7, r4, r2
 800bb32:	9005      	str	r0, [sp, #20]
 800bb34:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bb38:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 800bb3c:	4545      	cmp	r5, r8
 800bb3e:	dd7f      	ble.n	800bc40 <__kernel_rem_pio2f+0x14c>
 800bb40:	f04f 0800 	mov.w	r8, #0
 800bb44:	f04f 0a00 	mov.w	sl, #0
 800bb48:	f06f 0b03 	mvn.w	fp, #3
 800bb4c:	9b04      	ldr	r3, [sp, #16]
 800bb4e:	aa1c      	add	r2, sp, #112	; 0x70
 800bb50:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800bb54:	ab44      	add	r3, sp, #272	; 0x110
 800bb56:	9a02      	ldr	r2, [sp, #8]
 800bb58:	4590      	cmp	r8, r2
 800bb5a:	f340 8097 	ble.w	800bc8c <__kernel_rem_pio2f+0x198>
 800bb5e:	4613      	mov	r3, r2
 800bb60:	aa08      	add	r2, sp, #32
 800bb62:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb66:	9307      	str	r3, [sp, #28]
 800bb68:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800bb6a:	9f02      	ldr	r7, [sp, #8]
 800bb6c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bb70:	9306      	str	r3, [sp, #24]
 800bb72:	46ba      	mov	sl, r7
 800bb74:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 800bb78:	ab58      	add	r3, sp, #352	; 0x160
 800bb7a:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800bb7e:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800bb82:	ad07      	add	r5, sp, #28
 800bb84:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800bb88:	f1ba 0f00 	cmp.w	sl, #0
 800bb8c:	f300 8081 	bgt.w	800bc92 <__kernel_rem_pio2f+0x19e>
 800bb90:	4631      	mov	r1, r6
 800bb92:	4620      	mov	r0, r4
 800bb94:	f000 fc76 	bl	800c484 <scalbnf>
 800bb98:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800bb9c:	4604      	mov	r4, r0
 800bb9e:	f7f5 f8a1 	bl	8000ce4 <__aeabi_fmul>
 800bba2:	f000 fbdb 	bl	800c35c <floorf>
 800bba6:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800bbaa:	f7f5 f89b 	bl	8000ce4 <__aeabi_fmul>
 800bbae:	4601      	mov	r1, r0
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f7f4 ff8d 	bl	8000ad0 <__aeabi_fsub>
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	f7f5 fa70 	bl	800109c <__aeabi_f2iz>
 800bbbc:	4681      	mov	r9, r0
 800bbbe:	f7f5 f83d 	bl	8000c3c <__aeabi_i2f>
 800bbc2:	4601      	mov	r1, r0
 800bbc4:	4620      	mov	r0, r4
 800bbc6:	f7f4 ff83 	bl	8000ad0 <__aeabi_fsub>
 800bbca:	2e00      	cmp	r6, #0
 800bbcc:	4604      	mov	r4, r0
 800bbce:	dd7e      	ble.n	800bcce <__kernel_rem_pio2f+0x1da>
 800bbd0:	1e7b      	subs	r3, r7, #1
 800bbd2:	aa08      	add	r2, sp, #32
 800bbd4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800bbd8:	f1c6 0208 	rsb	r2, r6, #8
 800bbdc:	fa45 f002 	asr.w	r0, r5, r2
 800bbe0:	4481      	add	r9, r0
 800bbe2:	4090      	lsls	r0, r2
 800bbe4:	1a2d      	subs	r5, r5, r0
 800bbe6:	aa08      	add	r2, sp, #32
 800bbe8:	f1c6 0007 	rsb	r0, r6, #7
 800bbec:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 800bbf0:	4105      	asrs	r5, r0
 800bbf2:	2d00      	cmp	r5, #0
 800bbf4:	dd79      	ble.n	800bcea <__kernel_rem_pio2f+0x1f6>
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	4690      	mov	r8, r2
 800bbfa:	f109 0901 	add.w	r9, r9, #1
 800bbfe:	4297      	cmp	r7, r2
 800bc00:	f300 80ae 	bgt.w	800bd60 <__kernel_rem_pio2f+0x26c>
 800bc04:	2e00      	cmp	r6, #0
 800bc06:	dd05      	ble.n	800bc14 <__kernel_rem_pio2f+0x120>
 800bc08:	2e01      	cmp	r6, #1
 800bc0a:	f000 80c0 	beq.w	800bd8e <__kernel_rem_pio2f+0x29a>
 800bc0e:	2e02      	cmp	r6, #2
 800bc10:	f000 80c7 	beq.w	800bda2 <__kernel_rem_pio2f+0x2ae>
 800bc14:	2d02      	cmp	r5, #2
 800bc16:	d168      	bne.n	800bcea <__kernel_rem_pio2f+0x1f6>
 800bc18:	4621      	mov	r1, r4
 800bc1a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800bc1e:	f7f4 ff57 	bl	8000ad0 <__aeabi_fsub>
 800bc22:	4604      	mov	r4, r0
 800bc24:	f1b8 0f00 	cmp.w	r8, #0
 800bc28:	d05f      	beq.n	800bcea <__kernel_rem_pio2f+0x1f6>
 800bc2a:	4631      	mov	r1, r6
 800bc2c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800bc30:	f000 fc28 	bl	800c484 <scalbnf>
 800bc34:	4601      	mov	r1, r0
 800bc36:	4620      	mov	r0, r4
 800bc38:	f7f4 ff4a 	bl	8000ad0 <__aeabi_fsub>
 800bc3c:	4604      	mov	r4, r0
 800bc3e:	e054      	b.n	800bcea <__kernel_rem_pio2f+0x1f6>
 800bc40:	42ef      	cmn	r7, r5
 800bc42:	d407      	bmi.n	800bc54 <__kernel_rem_pio2f+0x160>
 800bc44:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bc48:	f7f4 fff8 	bl	8000c3c <__aeabi_i2f>
 800bc4c:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800bc50:	3501      	adds	r5, #1
 800bc52:	e773      	b.n	800bb3c <__kernel_rem_pio2f+0x48>
 800bc54:	4650      	mov	r0, sl
 800bc56:	e7f9      	b.n	800bc4c <__kernel_rem_pio2f+0x158>
 800bc58:	fb0b 5207 	mla	r2, fp, r7, r5
 800bc5c:	9306      	str	r3, [sp, #24]
 800bc5e:	9b05      	ldr	r3, [sp, #20]
 800bc60:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800bc64:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 800bc68:	f7f5 f83c 	bl	8000ce4 <__aeabi_fmul>
 800bc6c:	4601      	mov	r1, r0
 800bc6e:	4648      	mov	r0, r9
 800bc70:	f7f4 ff30 	bl	8000ad4 <__addsf3>
 800bc74:	4681      	mov	r9, r0
 800bc76:	9b06      	ldr	r3, [sp, #24]
 800bc78:	3701      	adds	r7, #1
 800bc7a:	9a03      	ldr	r2, [sp, #12]
 800bc7c:	4297      	cmp	r7, r2
 800bc7e:	ddeb      	ble.n	800bc58 <__kernel_rem_pio2f+0x164>
 800bc80:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
 800bc84:	3504      	adds	r5, #4
 800bc86:	f108 0801 	add.w	r8, r8, #1
 800bc8a:	e764      	b.n	800bb56 <__kernel_rem_pio2f+0x62>
 800bc8c:	46d1      	mov	r9, sl
 800bc8e:	2700      	movs	r7, #0
 800bc90:	e7f3      	b.n	800bc7a <__kernel_rem_pio2f+0x186>
 800bc92:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800bc96:	4620      	mov	r0, r4
 800bc98:	f7f5 f824 	bl	8000ce4 <__aeabi_fmul>
 800bc9c:	f7f5 f9fe 	bl	800109c <__aeabi_f2iz>
 800bca0:	f7f4 ffcc 	bl	8000c3c <__aeabi_i2f>
 800bca4:	4641      	mov	r1, r8
 800bca6:	4683      	mov	fp, r0
 800bca8:	f7f5 f81c 	bl	8000ce4 <__aeabi_fmul>
 800bcac:	4601      	mov	r1, r0
 800bcae:	4620      	mov	r0, r4
 800bcb0:	f7f4 ff0e 	bl	8000ad0 <__aeabi_fsub>
 800bcb4:	f7f5 f9f2 	bl	800109c <__aeabi_f2iz>
 800bcb8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bcbc:	f845 0f04 	str.w	r0, [r5, #4]!
 800bcc0:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 800bcc4:	4658      	mov	r0, fp
 800bcc6:	f7f4 ff05 	bl	8000ad4 <__addsf3>
 800bcca:	4604      	mov	r4, r0
 800bccc:	e75c      	b.n	800bb88 <__kernel_rem_pio2f+0x94>
 800bcce:	d105      	bne.n	800bcdc <__kernel_rem_pio2f+0x1e8>
 800bcd0:	1e7b      	subs	r3, r7, #1
 800bcd2:	aa08      	add	r2, sp, #32
 800bcd4:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800bcd8:	122d      	asrs	r5, r5, #8
 800bcda:	e78a      	b.n	800bbf2 <__kernel_rem_pio2f+0xfe>
 800bcdc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800bce0:	f7f5 f9b2 	bl	8001048 <__aeabi_fcmpge>
 800bce4:	2800      	cmp	r0, #0
 800bce6:	d139      	bne.n	800bd5c <__kernel_rem_pio2f+0x268>
 800bce8:	4605      	mov	r5, r0
 800bcea:	2100      	movs	r1, #0
 800bcec:	4620      	mov	r0, r4
 800bcee:	f7f5 f98d 	bl	800100c <__aeabi_fcmpeq>
 800bcf2:	2800      	cmp	r0, #0
 800bcf4:	f000 80a0 	beq.w	800be38 <__kernel_rem_pio2f+0x344>
 800bcf8:	1e7c      	subs	r4, r7, #1
 800bcfa:	4623      	mov	r3, r4
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	9902      	ldr	r1, [sp, #8]
 800bd00:	428b      	cmp	r3, r1
 800bd02:	da55      	bge.n	800bdb0 <__kernel_rem_pio2f+0x2bc>
 800bd04:	2a00      	cmp	r2, #0
 800bd06:	d07e      	beq.n	800be06 <__kernel_rem_pio2f+0x312>
 800bd08:	ab08      	add	r3, sp, #32
 800bd0a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bd0e:	3e08      	subs	r6, #8
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	f000 808f 	beq.w	800be34 <__kernel_rem_pio2f+0x340>
 800bd16:	4631      	mov	r1, r6
 800bd18:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800bd1c:	f000 fbb2 	bl	800c484 <scalbnf>
 800bd20:	46a0      	mov	r8, r4
 800bd22:	4682      	mov	sl, r0
 800bd24:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 800bd28:	af44      	add	r7, sp, #272	; 0x110
 800bd2a:	f1b8 0f00 	cmp.w	r8, #0
 800bd2e:	f280 80b5 	bge.w	800be9c <__kernel_rem_pio2f+0x3a8>
 800bd32:	f04f 0a00 	mov.w	sl, #0
 800bd36:	2300      	movs	r3, #0
 800bd38:	00a6      	lsls	r6, r4, #2
 800bd3a:	4a35      	ldr	r2, [pc, #212]	; (800be10 <__kernel_rem_pio2f+0x31c>)
 800bd3c:	4437      	add	r7, r6
 800bd3e:	eba4 010a 	sub.w	r1, r4, sl
 800bd42:	2900      	cmp	r1, #0
 800bd44:	f280 80db 	bge.w	800befe <__kernel_rem_pio2f+0x40a>
 800bd48:	9b62      	ldr	r3, [sp, #392]	; 0x188
 800bd4a:	2b03      	cmp	r3, #3
 800bd4c:	f200 80ff 	bhi.w	800bf4e <__kernel_rem_pio2f+0x45a>
 800bd50:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bd54:	01200102 	.word	0x01200102
 800bd58:	00d90120 	.word	0x00d90120
 800bd5c:	2502      	movs	r5, #2
 800bd5e:	e74a      	b.n	800bbf6 <__kernel_rem_pio2f+0x102>
 800bd60:	ab08      	add	r3, sp, #32
 800bd62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd66:	f1b8 0f00 	cmp.w	r8, #0
 800bd6a:	d109      	bne.n	800bd80 <__kernel_rem_pio2f+0x28c>
 800bd6c:	b12b      	cbz	r3, 800bd7a <__kernel_rem_pio2f+0x286>
 800bd6e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800bd72:	a908      	add	r1, sp, #32
 800bd74:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bd78:	2301      	movs	r3, #1
 800bd7a:	3201      	adds	r2, #1
 800bd7c:	4698      	mov	r8, r3
 800bd7e:	e73e      	b.n	800bbfe <__kernel_rem_pio2f+0x10a>
 800bd80:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800bd84:	a908      	add	r1, sp, #32
 800bd86:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bd8a:	4643      	mov	r3, r8
 800bd8c:	e7f5      	b.n	800bd7a <__kernel_rem_pio2f+0x286>
 800bd8e:	1e7a      	subs	r2, r7, #1
 800bd90:	ab08      	add	r3, sp, #32
 800bd92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd9a:	a908      	add	r1, sp, #32
 800bd9c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bda0:	e738      	b.n	800bc14 <__kernel_rem_pio2f+0x120>
 800bda2:	1e7a      	subs	r2, r7, #1
 800bda4:	ab08      	add	r3, sp, #32
 800bda6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bdae:	e7f4      	b.n	800bd9a <__kernel_rem_pio2f+0x2a6>
 800bdb0:	a908      	add	r1, sp, #32
 800bdb2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bdb6:	3b01      	subs	r3, #1
 800bdb8:	430a      	orrs	r2, r1
 800bdba:	e7a0      	b.n	800bcfe <__kernel_rem_pio2f+0x20a>
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800bdc2:	2900      	cmp	r1, #0
 800bdc4:	d0fa      	beq.n	800bdbc <__kernel_rem_pio2f+0x2c8>
 800bdc6:	f06f 0803 	mvn.w	r8, #3
 800bdca:	9a04      	ldr	r2, [sp, #16]
 800bdcc:	1c7d      	adds	r5, r7, #1
 800bdce:	18bc      	adds	r4, r7, r2
 800bdd0:	aa1c      	add	r2, sp, #112	; 0x70
 800bdd2:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800bdd6:	441f      	add	r7, r3
 800bdd8:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800bddc:	42af      	cmp	r7, r5
 800bdde:	f6ff aec8 	blt.w	800bb72 <__kernel_rem_pio2f+0x7e>
 800bde2:	9b06      	ldr	r3, [sp, #24]
 800bde4:	f04f 0a00 	mov.w	sl, #0
 800bde8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bdec:	f7f4 ff26 	bl	8000c3c <__aeabi_i2f>
 800bdf0:	f04f 0b00 	mov.w	fp, #0
 800bdf4:	6020      	str	r0, [r4, #0]
 800bdf6:	9b03      	ldr	r3, [sp, #12]
 800bdf8:	459a      	cmp	sl, r3
 800bdfa:	dd0b      	ble.n	800be14 <__kernel_rem_pio2f+0x320>
 800bdfc:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 800be00:	3404      	adds	r4, #4
 800be02:	3501      	adds	r5, #1
 800be04:	e7ea      	b.n	800bddc <__kernel_rem_pio2f+0x2e8>
 800be06:	9a07      	ldr	r2, [sp, #28]
 800be08:	2301      	movs	r3, #1
 800be0a:	e7d8      	b.n	800bdbe <__kernel_rem_pio2f+0x2ca>
 800be0c:	0800c9b8 	.word	0x0800c9b8
 800be10:	0800c98c 	.word	0x0800c98c
 800be14:	fb08 f30a 	mul.w	r3, r8, sl
 800be18:	9a05      	ldr	r2, [sp, #20]
 800be1a:	58e0      	ldr	r0, [r4, r3]
 800be1c:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 800be20:	f7f4 ff60 	bl	8000ce4 <__aeabi_fmul>
 800be24:	4601      	mov	r1, r0
 800be26:	4658      	mov	r0, fp
 800be28:	f7f4 fe54 	bl	8000ad4 <__addsf3>
 800be2c:	f10a 0a01 	add.w	sl, sl, #1
 800be30:	4683      	mov	fp, r0
 800be32:	e7e0      	b.n	800bdf6 <__kernel_rem_pio2f+0x302>
 800be34:	3c01      	subs	r4, #1
 800be36:	e767      	b.n	800bd08 <__kernel_rem_pio2f+0x214>
 800be38:	4271      	negs	r1, r6
 800be3a:	4620      	mov	r0, r4
 800be3c:	f000 fb22 	bl	800c484 <scalbnf>
 800be40:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800be44:	4604      	mov	r4, r0
 800be46:	f7f5 f8ff 	bl	8001048 <__aeabi_fcmpge>
 800be4a:	b1f8      	cbz	r0, 800be8c <__kernel_rem_pio2f+0x398>
 800be4c:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800be50:	4620      	mov	r0, r4
 800be52:	f7f4 ff47 	bl	8000ce4 <__aeabi_fmul>
 800be56:	f7f5 f921 	bl	800109c <__aeabi_f2iz>
 800be5a:	f7f4 feef 	bl	8000c3c <__aeabi_i2f>
 800be5e:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800be62:	4680      	mov	r8, r0
 800be64:	f7f4 ff3e 	bl	8000ce4 <__aeabi_fmul>
 800be68:	4601      	mov	r1, r0
 800be6a:	4620      	mov	r0, r4
 800be6c:	f7f4 fe30 	bl	8000ad0 <__aeabi_fsub>
 800be70:	f7f5 f914 	bl	800109c <__aeabi_f2iz>
 800be74:	ab08      	add	r3, sp, #32
 800be76:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800be7a:	4640      	mov	r0, r8
 800be7c:	f7f5 f90e 	bl	800109c <__aeabi_f2iz>
 800be80:	1c7c      	adds	r4, r7, #1
 800be82:	ab08      	add	r3, sp, #32
 800be84:	3608      	adds	r6, #8
 800be86:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800be8a:	e744      	b.n	800bd16 <__kernel_rem_pio2f+0x222>
 800be8c:	4620      	mov	r0, r4
 800be8e:	f7f5 f905 	bl	800109c <__aeabi_f2iz>
 800be92:	ab08      	add	r3, sp, #32
 800be94:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800be98:	463c      	mov	r4, r7
 800be9a:	e73c      	b.n	800bd16 <__kernel_rem_pio2f+0x222>
 800be9c:	ab08      	add	r3, sp, #32
 800be9e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bea2:	f7f4 fecb 	bl	8000c3c <__aeabi_i2f>
 800bea6:	4651      	mov	r1, sl
 800bea8:	f7f4 ff1c 	bl	8000ce4 <__aeabi_fmul>
 800beac:	4631      	mov	r1, r6
 800beae:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
 800beb2:	4650      	mov	r0, sl
 800beb4:	f7f4 ff16 	bl	8000ce4 <__aeabi_fmul>
 800beb8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bebc:	4682      	mov	sl, r0
 800bebe:	e734      	b.n	800bd2a <__kernel_rem_pio2f+0x236>
 800bec0:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 800bec4:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800bec8:	9304      	str	r3, [sp, #16]
 800beca:	9203      	str	r2, [sp, #12]
 800becc:	f7f4 ff0a 	bl	8000ce4 <__aeabi_fmul>
 800bed0:	4601      	mov	r1, r0
 800bed2:	4658      	mov	r0, fp
 800bed4:	f7f4 fdfe 	bl	8000ad4 <__addsf3>
 800bed8:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800bedc:	4683      	mov	fp, r0
 800bede:	f108 0801 	add.w	r8, r8, #1
 800bee2:	9902      	ldr	r1, [sp, #8]
 800bee4:	4588      	cmp	r8, r1
 800bee6:	dc01      	bgt.n	800beec <__kernel_rem_pio2f+0x3f8>
 800bee8:	45c2      	cmp	sl, r8
 800beea:	dae9      	bge.n	800bec0 <__kernel_rem_pio2f+0x3cc>
 800beec:	a958      	add	r1, sp, #352	; 0x160
 800beee:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bef2:	f841 bca0 	str.w	fp, [r1, #-160]
 800bef6:	f10a 0a01 	add.w	sl, sl, #1
 800befa:	3f04      	subs	r7, #4
 800befc:	e71f      	b.n	800bd3e <__kernel_rem_pio2f+0x24a>
 800befe:	469b      	mov	fp, r3
 800bf00:	f04f 0800 	mov.w	r8, #0
 800bf04:	e7ed      	b.n	800bee2 <__kernel_rem_pio2f+0x3ee>
 800bf06:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 800bf0a:	4456      	add	r6, sl
 800bf0c:	4637      	mov	r7, r6
 800bf0e:	46a0      	mov	r8, r4
 800bf10:	f1b8 0f00 	cmp.w	r8, #0
 800bf14:	dc4a      	bgt.n	800bfac <__kernel_rem_pio2f+0x4b8>
 800bf16:	4627      	mov	r7, r4
 800bf18:	2f01      	cmp	r7, #1
 800bf1a:	dc60      	bgt.n	800bfde <__kernel_rem_pio2f+0x4ea>
 800bf1c:	2000      	movs	r0, #0
 800bf1e:	2c01      	cmp	r4, #1
 800bf20:	dc74      	bgt.n	800c00c <__kernel_rem_pio2f+0x518>
 800bf22:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800bf24:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800bf26:	2d00      	cmp	r5, #0
 800bf28:	d176      	bne.n	800c018 <__kernel_rem_pio2f+0x524>
 800bf2a:	9901      	ldr	r1, [sp, #4]
 800bf2c:	600a      	str	r2, [r1, #0]
 800bf2e:	460a      	mov	r2, r1
 800bf30:	604b      	str	r3, [r1, #4]
 800bf32:	6090      	str	r0, [r2, #8]
 800bf34:	e00b      	b.n	800bf4e <__kernel_rem_pio2f+0x45a>
 800bf36:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800bf3a:	f7f4 fdcb 	bl	8000ad4 <__addsf3>
 800bf3e:	3c01      	subs	r4, #1
 800bf40:	2c00      	cmp	r4, #0
 800bf42:	daf8      	bge.n	800bf36 <__kernel_rem_pio2f+0x442>
 800bf44:	b10d      	cbz	r5, 800bf4a <__kernel_rem_pio2f+0x456>
 800bf46:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800bf4a:	9b01      	ldr	r3, [sp, #4]
 800bf4c:	6018      	str	r0, [r3, #0]
 800bf4e:	f009 0007 	and.w	r0, r9, #7
 800bf52:	b059      	add	sp, #356	; 0x164
 800bf54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf58:	2000      	movs	r0, #0
 800bf5a:	ae30      	add	r6, sp, #192	; 0xc0
 800bf5c:	e7f0      	b.n	800bf40 <__kernel_rem_pio2f+0x44c>
 800bf5e:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800bf62:	f7f4 fdb7 	bl	8000ad4 <__addsf3>
 800bf66:	3e01      	subs	r6, #1
 800bf68:	2e00      	cmp	r6, #0
 800bf6a:	daf8      	bge.n	800bf5e <__kernel_rem_pio2f+0x46a>
 800bf6c:	b1b5      	cbz	r5, 800bf9c <__kernel_rem_pio2f+0x4a8>
 800bf6e:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800bf72:	9a01      	ldr	r2, [sp, #4]
 800bf74:	af58      	add	r7, sp, #352	; 0x160
 800bf76:	4601      	mov	r1, r0
 800bf78:	6013      	str	r3, [r2, #0]
 800bf7a:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 800bf7e:	f7f4 fda7 	bl	8000ad0 <__aeabi_fsub>
 800bf82:	2601      	movs	r6, #1
 800bf84:	42b4      	cmp	r4, r6
 800bf86:	da0b      	bge.n	800bfa0 <__kernel_rem_pio2f+0x4ac>
 800bf88:	b10d      	cbz	r5, 800bf8e <__kernel_rem_pio2f+0x49a>
 800bf8a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800bf8e:	9b01      	ldr	r3, [sp, #4]
 800bf90:	6058      	str	r0, [r3, #4]
 800bf92:	e7dc      	b.n	800bf4e <__kernel_rem_pio2f+0x45a>
 800bf94:	4626      	mov	r6, r4
 800bf96:	2000      	movs	r0, #0
 800bf98:	af30      	add	r7, sp, #192	; 0xc0
 800bf9a:	e7e5      	b.n	800bf68 <__kernel_rem_pio2f+0x474>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	e7e8      	b.n	800bf72 <__kernel_rem_pio2f+0x47e>
 800bfa0:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800bfa4:	f7f4 fd96 	bl	8000ad4 <__addsf3>
 800bfa8:	3601      	adds	r6, #1
 800bfaa:	e7eb      	b.n	800bf84 <__kernel_rem_pio2f+0x490>
 800bfac:	f857 2d04 	ldr.w	r2, [r7, #-4]!
 800bfb0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	4610      	mov	r0, r2
 800bfb8:	4619      	mov	r1, r3
 800bfba:	9303      	str	r3, [sp, #12]
 800bfbc:	9202      	str	r2, [sp, #8]
 800bfbe:	f7f4 fd89 	bl	8000ad4 <__addsf3>
 800bfc2:	9a02      	ldr	r2, [sp, #8]
 800bfc4:	4601      	mov	r1, r0
 800bfc6:	4683      	mov	fp, r0
 800bfc8:	4610      	mov	r0, r2
 800bfca:	f7f4 fd81 	bl	8000ad0 <__aeabi_fsub>
 800bfce:	9b03      	ldr	r3, [sp, #12]
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	f7f4 fd7f 	bl	8000ad4 <__addsf3>
 800bfd6:	f8c7 b000 	str.w	fp, [r7]
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	e798      	b.n	800bf10 <__kernel_rem_pio2f+0x41c>
 800bfde:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 800bfe2:	3f01      	subs	r7, #1
 800bfe4:	f8d6 b004 	ldr.w	fp, [r6, #4]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	4659      	mov	r1, fp
 800bfec:	9302      	str	r3, [sp, #8]
 800bfee:	f7f4 fd71 	bl	8000ad4 <__addsf3>
 800bff2:	9b02      	ldr	r3, [sp, #8]
 800bff4:	4601      	mov	r1, r0
 800bff6:	4680      	mov	r8, r0
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7f4 fd69 	bl	8000ad0 <__aeabi_fsub>
 800bffe:	4659      	mov	r1, fp
 800c000:	f7f4 fd68 	bl	8000ad4 <__addsf3>
 800c004:	f8c6 8000 	str.w	r8, [r6]
 800c008:	6070      	str	r0, [r6, #4]
 800c00a:	e785      	b.n	800bf18 <__kernel_rem_pio2f+0x424>
 800c00c:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 800c010:	f7f4 fd60 	bl	8000ad4 <__addsf3>
 800c014:	3c01      	subs	r4, #1
 800c016:	e782      	b.n	800bf1e <__kernel_rem_pio2f+0x42a>
 800c018:	9901      	ldr	r1, [sp, #4]
 800c01a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800c01e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c022:	600a      	str	r2, [r1, #0]
 800c024:	604b      	str	r3, [r1, #4]
 800c026:	460a      	mov	r2, r1
 800c028:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800c02c:	e781      	b.n	800bf32 <__kernel_rem_pio2f+0x43e>
 800c02e:	bf00      	nop

0800c030 <__kernel_sinf>:
 800c030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c034:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800c038:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800c03c:	4604      	mov	r4, r0
 800c03e:	460f      	mov	r7, r1
 800c040:	4691      	mov	r9, r2
 800c042:	da03      	bge.n	800c04c <__kernel_sinf+0x1c>
 800c044:	f7f5 f82a 	bl	800109c <__aeabi_f2iz>
 800c048:	2800      	cmp	r0, #0
 800c04a:	d035      	beq.n	800c0b8 <__kernel_sinf+0x88>
 800c04c:	4621      	mov	r1, r4
 800c04e:	4620      	mov	r0, r4
 800c050:	f7f4 fe48 	bl	8000ce4 <__aeabi_fmul>
 800c054:	4605      	mov	r5, r0
 800c056:	4601      	mov	r1, r0
 800c058:	4620      	mov	r0, r4
 800c05a:	f7f4 fe43 	bl	8000ce4 <__aeabi_fmul>
 800c05e:	4929      	ldr	r1, [pc, #164]	; (800c104 <__kernel_sinf+0xd4>)
 800c060:	4606      	mov	r6, r0
 800c062:	4628      	mov	r0, r5
 800c064:	f7f4 fe3e 	bl	8000ce4 <__aeabi_fmul>
 800c068:	4927      	ldr	r1, [pc, #156]	; (800c108 <__kernel_sinf+0xd8>)
 800c06a:	f7f4 fd31 	bl	8000ad0 <__aeabi_fsub>
 800c06e:	4629      	mov	r1, r5
 800c070:	f7f4 fe38 	bl	8000ce4 <__aeabi_fmul>
 800c074:	4925      	ldr	r1, [pc, #148]	; (800c10c <__kernel_sinf+0xdc>)
 800c076:	f7f4 fd2d 	bl	8000ad4 <__addsf3>
 800c07a:	4629      	mov	r1, r5
 800c07c:	f7f4 fe32 	bl	8000ce4 <__aeabi_fmul>
 800c080:	4923      	ldr	r1, [pc, #140]	; (800c110 <__kernel_sinf+0xe0>)
 800c082:	f7f4 fd25 	bl	8000ad0 <__aeabi_fsub>
 800c086:	4629      	mov	r1, r5
 800c088:	f7f4 fe2c 	bl	8000ce4 <__aeabi_fmul>
 800c08c:	4921      	ldr	r1, [pc, #132]	; (800c114 <__kernel_sinf+0xe4>)
 800c08e:	f7f4 fd21 	bl	8000ad4 <__addsf3>
 800c092:	4680      	mov	r8, r0
 800c094:	f1b9 0f00 	cmp.w	r9, #0
 800c098:	d111      	bne.n	800c0be <__kernel_sinf+0x8e>
 800c09a:	4601      	mov	r1, r0
 800c09c:	4628      	mov	r0, r5
 800c09e:	f7f4 fe21 	bl	8000ce4 <__aeabi_fmul>
 800c0a2:	491d      	ldr	r1, [pc, #116]	; (800c118 <__kernel_sinf+0xe8>)
 800c0a4:	f7f4 fd14 	bl	8000ad0 <__aeabi_fsub>
 800c0a8:	4631      	mov	r1, r6
 800c0aa:	f7f4 fe1b 	bl	8000ce4 <__aeabi_fmul>
 800c0ae:	4601      	mov	r1, r0
 800c0b0:	4620      	mov	r0, r4
 800c0b2:	f7f4 fd0f 	bl	8000ad4 <__addsf3>
 800c0b6:	4604      	mov	r4, r0
 800c0b8:	4620      	mov	r0, r4
 800c0ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0be:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800c0c2:	4638      	mov	r0, r7
 800c0c4:	f7f4 fe0e 	bl	8000ce4 <__aeabi_fmul>
 800c0c8:	4641      	mov	r1, r8
 800c0ca:	4681      	mov	r9, r0
 800c0cc:	4630      	mov	r0, r6
 800c0ce:	f7f4 fe09 	bl	8000ce4 <__aeabi_fmul>
 800c0d2:	4601      	mov	r1, r0
 800c0d4:	4648      	mov	r0, r9
 800c0d6:	f7f4 fcfb 	bl	8000ad0 <__aeabi_fsub>
 800c0da:	4629      	mov	r1, r5
 800c0dc:	f7f4 fe02 	bl	8000ce4 <__aeabi_fmul>
 800c0e0:	4639      	mov	r1, r7
 800c0e2:	f7f4 fcf5 	bl	8000ad0 <__aeabi_fsub>
 800c0e6:	490c      	ldr	r1, [pc, #48]	; (800c118 <__kernel_sinf+0xe8>)
 800c0e8:	4605      	mov	r5, r0
 800c0ea:	4630      	mov	r0, r6
 800c0ec:	f7f4 fdfa 	bl	8000ce4 <__aeabi_fmul>
 800c0f0:	4601      	mov	r1, r0
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	f7f4 fcee 	bl	8000ad4 <__addsf3>
 800c0f8:	4601      	mov	r1, r0
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	f7f4 fce8 	bl	8000ad0 <__aeabi_fsub>
 800c100:	e7d9      	b.n	800c0b6 <__kernel_sinf+0x86>
 800c102:	bf00      	nop
 800c104:	2f2ec9d3 	.word	0x2f2ec9d3
 800c108:	32d72f34 	.word	0x32d72f34
 800c10c:	3638ef1b 	.word	0x3638ef1b
 800c110:	39500d01 	.word	0x39500d01
 800c114:	3c088889 	.word	0x3c088889
 800c118:	3e2aaaab 	.word	0x3e2aaaab

0800c11c <matherr>:
 800c11c:	2000      	movs	r0, #0
 800c11e:	4770      	bx	lr

0800c120 <nan>:
 800c120:	2000      	movs	r0, #0
 800c122:	4901      	ldr	r1, [pc, #4]	; (800c128 <nan+0x8>)
 800c124:	4770      	bx	lr
 800c126:	bf00      	nop
 800c128:	7ff80000 	.word	0x7ff80000

0800c12c <atanf>:
 800c12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c130:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800c134:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800c138:	4604      	mov	r4, r0
 800c13a:	4607      	mov	r7, r0
 800c13c:	db0e      	blt.n	800c15c <atanf+0x30>
 800c13e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c142:	dd04      	ble.n	800c14e <atanf+0x22>
 800c144:	4601      	mov	r1, r0
 800c146:	f7f4 fcc5 	bl	8000ad4 <__addsf3>
 800c14a:	4604      	mov	r4, r0
 800c14c:	e003      	b.n	800c156 <atanf+0x2a>
 800c14e:	2800      	cmp	r0, #0
 800c150:	f340 80cd 	ble.w	800c2ee <atanf+0x1c2>
 800c154:	4c67      	ldr	r4, [pc, #412]	; (800c2f4 <atanf+0x1c8>)
 800c156:	4620      	mov	r0, r4
 800c158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c15c:	4b66      	ldr	r3, [pc, #408]	; (800c2f8 <atanf+0x1cc>)
 800c15e:	429d      	cmp	r5, r3
 800c160:	dc0e      	bgt.n	800c180 <atanf+0x54>
 800c162:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800c166:	da08      	bge.n	800c17a <atanf+0x4e>
 800c168:	4964      	ldr	r1, [pc, #400]	; (800c2fc <atanf+0x1d0>)
 800c16a:	f7f4 fcb3 	bl	8000ad4 <__addsf3>
 800c16e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c172:	f7f4 ff73 	bl	800105c <__aeabi_fcmpgt>
 800c176:	2800      	cmp	r0, #0
 800c178:	d1ed      	bne.n	800c156 <atanf+0x2a>
 800c17a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800c17e:	e01c      	b.n	800c1ba <atanf+0x8e>
 800c180:	f000 f8e0 	bl	800c344 <fabsf>
 800c184:	4b5e      	ldr	r3, [pc, #376]	; (800c300 <atanf+0x1d4>)
 800c186:	4604      	mov	r4, r0
 800c188:	429d      	cmp	r5, r3
 800c18a:	dc7c      	bgt.n	800c286 <atanf+0x15a>
 800c18c:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800c190:	429d      	cmp	r5, r3
 800c192:	dc67      	bgt.n	800c264 <atanf+0x138>
 800c194:	4601      	mov	r1, r0
 800c196:	f7f4 fc9d 	bl	8000ad4 <__addsf3>
 800c19a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c19e:	f7f4 fc97 	bl	8000ad0 <__aeabi_fsub>
 800c1a2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c1a6:	4605      	mov	r5, r0
 800c1a8:	4620      	mov	r0, r4
 800c1aa:	f7f4 fc93 	bl	8000ad4 <__addsf3>
 800c1ae:	4601      	mov	r1, r0
 800c1b0:	4628      	mov	r0, r5
 800c1b2:	f7f4 fe4b 	bl	8000e4c <__aeabi_fdiv>
 800c1b6:	2600      	movs	r6, #0
 800c1b8:	4604      	mov	r4, r0
 800c1ba:	4621      	mov	r1, r4
 800c1bc:	4620      	mov	r0, r4
 800c1be:	f7f4 fd91 	bl	8000ce4 <__aeabi_fmul>
 800c1c2:	4601      	mov	r1, r0
 800c1c4:	4680      	mov	r8, r0
 800c1c6:	f7f4 fd8d 	bl	8000ce4 <__aeabi_fmul>
 800c1ca:	4605      	mov	r5, r0
 800c1cc:	494d      	ldr	r1, [pc, #308]	; (800c304 <atanf+0x1d8>)
 800c1ce:	f7f4 fd89 	bl	8000ce4 <__aeabi_fmul>
 800c1d2:	494d      	ldr	r1, [pc, #308]	; (800c308 <atanf+0x1dc>)
 800c1d4:	f7f4 fc7e 	bl	8000ad4 <__addsf3>
 800c1d8:	4629      	mov	r1, r5
 800c1da:	f7f4 fd83 	bl	8000ce4 <__aeabi_fmul>
 800c1de:	494b      	ldr	r1, [pc, #300]	; (800c30c <atanf+0x1e0>)
 800c1e0:	f7f4 fc78 	bl	8000ad4 <__addsf3>
 800c1e4:	4629      	mov	r1, r5
 800c1e6:	f7f4 fd7d 	bl	8000ce4 <__aeabi_fmul>
 800c1ea:	4949      	ldr	r1, [pc, #292]	; (800c310 <atanf+0x1e4>)
 800c1ec:	f7f4 fc72 	bl	8000ad4 <__addsf3>
 800c1f0:	4629      	mov	r1, r5
 800c1f2:	f7f4 fd77 	bl	8000ce4 <__aeabi_fmul>
 800c1f6:	4947      	ldr	r1, [pc, #284]	; (800c314 <atanf+0x1e8>)
 800c1f8:	f7f4 fc6c 	bl	8000ad4 <__addsf3>
 800c1fc:	4629      	mov	r1, r5
 800c1fe:	f7f4 fd71 	bl	8000ce4 <__aeabi_fmul>
 800c202:	4945      	ldr	r1, [pc, #276]	; (800c318 <atanf+0x1ec>)
 800c204:	f7f4 fc66 	bl	8000ad4 <__addsf3>
 800c208:	4641      	mov	r1, r8
 800c20a:	f7f4 fd6b 	bl	8000ce4 <__aeabi_fmul>
 800c20e:	4943      	ldr	r1, [pc, #268]	; (800c31c <atanf+0x1f0>)
 800c210:	4680      	mov	r8, r0
 800c212:	4628      	mov	r0, r5
 800c214:	f7f4 fd66 	bl	8000ce4 <__aeabi_fmul>
 800c218:	4941      	ldr	r1, [pc, #260]	; (800c320 <atanf+0x1f4>)
 800c21a:	f7f4 fc59 	bl	8000ad0 <__aeabi_fsub>
 800c21e:	4629      	mov	r1, r5
 800c220:	f7f4 fd60 	bl	8000ce4 <__aeabi_fmul>
 800c224:	493f      	ldr	r1, [pc, #252]	; (800c324 <atanf+0x1f8>)
 800c226:	f7f4 fc53 	bl	8000ad0 <__aeabi_fsub>
 800c22a:	4629      	mov	r1, r5
 800c22c:	f7f4 fd5a 	bl	8000ce4 <__aeabi_fmul>
 800c230:	493d      	ldr	r1, [pc, #244]	; (800c328 <atanf+0x1fc>)
 800c232:	f7f4 fc4d 	bl	8000ad0 <__aeabi_fsub>
 800c236:	4629      	mov	r1, r5
 800c238:	f7f4 fd54 	bl	8000ce4 <__aeabi_fmul>
 800c23c:	493b      	ldr	r1, [pc, #236]	; (800c32c <atanf+0x200>)
 800c23e:	f7f4 fc47 	bl	8000ad0 <__aeabi_fsub>
 800c242:	4629      	mov	r1, r5
 800c244:	f7f4 fd4e 	bl	8000ce4 <__aeabi_fmul>
 800c248:	4601      	mov	r1, r0
 800c24a:	4640      	mov	r0, r8
 800c24c:	f7f4 fc42 	bl	8000ad4 <__addsf3>
 800c250:	4621      	mov	r1, r4
 800c252:	f7f4 fd47 	bl	8000ce4 <__aeabi_fmul>
 800c256:	1c73      	adds	r3, r6, #1
 800c258:	4601      	mov	r1, r0
 800c25a:	d133      	bne.n	800c2c4 <atanf+0x198>
 800c25c:	4620      	mov	r0, r4
 800c25e:	f7f4 fc37 	bl	8000ad0 <__aeabi_fsub>
 800c262:	e772      	b.n	800c14a <atanf+0x1e>
 800c264:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c268:	f7f4 fc32 	bl	8000ad0 <__aeabi_fsub>
 800c26c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c270:	4605      	mov	r5, r0
 800c272:	4620      	mov	r0, r4
 800c274:	f7f4 fc2e 	bl	8000ad4 <__addsf3>
 800c278:	4601      	mov	r1, r0
 800c27a:	4628      	mov	r0, r5
 800c27c:	f7f4 fde6 	bl	8000e4c <__aeabi_fdiv>
 800c280:	2601      	movs	r6, #1
 800c282:	4604      	mov	r4, r0
 800c284:	e799      	b.n	800c1ba <atanf+0x8e>
 800c286:	4b2a      	ldr	r3, [pc, #168]	; (800c330 <atanf+0x204>)
 800c288:	429d      	cmp	r5, r3
 800c28a:	dc14      	bgt.n	800c2b6 <atanf+0x18a>
 800c28c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c290:	f7f4 fc1e 	bl	8000ad0 <__aeabi_fsub>
 800c294:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800c298:	4605      	mov	r5, r0
 800c29a:	4620      	mov	r0, r4
 800c29c:	f7f4 fd22 	bl	8000ce4 <__aeabi_fmul>
 800c2a0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800c2a4:	f7f4 fc16 	bl	8000ad4 <__addsf3>
 800c2a8:	4601      	mov	r1, r0
 800c2aa:	4628      	mov	r0, r5
 800c2ac:	f7f4 fdce 	bl	8000e4c <__aeabi_fdiv>
 800c2b0:	2602      	movs	r6, #2
 800c2b2:	4604      	mov	r4, r0
 800c2b4:	e781      	b.n	800c1ba <atanf+0x8e>
 800c2b6:	4601      	mov	r1, r0
 800c2b8:	481e      	ldr	r0, [pc, #120]	; (800c334 <atanf+0x208>)
 800c2ba:	f7f4 fdc7 	bl	8000e4c <__aeabi_fdiv>
 800c2be:	2603      	movs	r6, #3
 800c2c0:	4604      	mov	r4, r0
 800c2c2:	e77a      	b.n	800c1ba <atanf+0x8e>
 800c2c4:	4b1c      	ldr	r3, [pc, #112]	; (800c338 <atanf+0x20c>)
 800c2c6:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800c2ca:	f7f4 fc01 	bl	8000ad0 <__aeabi_fsub>
 800c2ce:	4621      	mov	r1, r4
 800c2d0:	f7f4 fbfe 	bl	8000ad0 <__aeabi_fsub>
 800c2d4:	4b19      	ldr	r3, [pc, #100]	; (800c33c <atanf+0x210>)
 800c2d6:	4601      	mov	r1, r0
 800c2d8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c2dc:	f7f4 fbf8 	bl	8000ad0 <__aeabi_fsub>
 800c2e0:	2f00      	cmp	r7, #0
 800c2e2:	4604      	mov	r4, r0
 800c2e4:	f6bf af37 	bge.w	800c156 <atanf+0x2a>
 800c2e8:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800c2ec:	e733      	b.n	800c156 <atanf+0x2a>
 800c2ee:	4c14      	ldr	r4, [pc, #80]	; (800c340 <atanf+0x214>)
 800c2f0:	e731      	b.n	800c156 <atanf+0x2a>
 800c2f2:	bf00      	nop
 800c2f4:	3fc90fdb 	.word	0x3fc90fdb
 800c2f8:	3edfffff 	.word	0x3edfffff
 800c2fc:	7149f2ca 	.word	0x7149f2ca
 800c300:	3f97ffff 	.word	0x3f97ffff
 800c304:	3c8569d7 	.word	0x3c8569d7
 800c308:	3d4bda59 	.word	0x3d4bda59
 800c30c:	3d886b35 	.word	0x3d886b35
 800c310:	3dba2e6e 	.word	0x3dba2e6e
 800c314:	3e124925 	.word	0x3e124925
 800c318:	3eaaaaab 	.word	0x3eaaaaab
 800c31c:	bd15a221 	.word	0xbd15a221
 800c320:	3d6ef16b 	.word	0x3d6ef16b
 800c324:	3d9d8795 	.word	0x3d9d8795
 800c328:	3de38e38 	.word	0x3de38e38
 800c32c:	3e4ccccd 	.word	0x3e4ccccd
 800c330:	401bffff 	.word	0x401bffff
 800c334:	bf800000 	.word	0xbf800000
 800c338:	0800c9d4 	.word	0x0800c9d4
 800c33c:	0800c9c4 	.word	0x0800c9c4
 800c340:	bfc90fdb 	.word	0xbfc90fdb

0800c344 <fabsf>:
 800c344:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c348:	4770      	bx	lr

0800c34a <finitef>:
 800c34a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c34e:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800c352:	bfac      	ite	ge
 800c354:	2000      	movge	r0, #0
 800c356:	2001      	movlt	r0, #1
 800c358:	4770      	bx	lr
	...

0800c35c <floorf>:
 800c35c:	b570      	push	{r4, r5, r6, lr}
 800c35e:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800c362:	0df5      	lsrs	r5, r6, #23
 800c364:	3d7f      	subs	r5, #127	; 0x7f
 800c366:	2d16      	cmp	r5, #22
 800c368:	4601      	mov	r1, r0
 800c36a:	4604      	mov	r4, r0
 800c36c:	dc26      	bgt.n	800c3bc <floorf+0x60>
 800c36e:	2d00      	cmp	r5, #0
 800c370:	da0e      	bge.n	800c390 <floorf+0x34>
 800c372:	4917      	ldr	r1, [pc, #92]	; (800c3d0 <floorf+0x74>)
 800c374:	f7f4 fbae 	bl	8000ad4 <__addsf3>
 800c378:	2100      	movs	r1, #0
 800c37a:	f7f4 fe6f 	bl	800105c <__aeabi_fcmpgt>
 800c37e:	b128      	cbz	r0, 800c38c <floorf+0x30>
 800c380:	2c00      	cmp	r4, #0
 800c382:	da23      	bge.n	800c3cc <floorf+0x70>
 800c384:	4b13      	ldr	r3, [pc, #76]	; (800c3d4 <floorf+0x78>)
 800c386:	2e00      	cmp	r6, #0
 800c388:	bf18      	it	ne
 800c38a:	461c      	movne	r4, r3
 800c38c:	4621      	mov	r1, r4
 800c38e:	e01b      	b.n	800c3c8 <floorf+0x6c>
 800c390:	4e11      	ldr	r6, [pc, #68]	; (800c3d8 <floorf+0x7c>)
 800c392:	412e      	asrs	r6, r5
 800c394:	4230      	tst	r0, r6
 800c396:	d017      	beq.n	800c3c8 <floorf+0x6c>
 800c398:	490d      	ldr	r1, [pc, #52]	; (800c3d0 <floorf+0x74>)
 800c39a:	f7f4 fb9b 	bl	8000ad4 <__addsf3>
 800c39e:	2100      	movs	r1, #0
 800c3a0:	f7f4 fe5c 	bl	800105c <__aeabi_fcmpgt>
 800c3a4:	2800      	cmp	r0, #0
 800c3a6:	d0f1      	beq.n	800c38c <floorf+0x30>
 800c3a8:	2c00      	cmp	r4, #0
 800c3aa:	bfbe      	ittt	lt
 800c3ac:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800c3b0:	fa43 f505 	asrlt.w	r5, r3, r5
 800c3b4:	1964      	addlt	r4, r4, r5
 800c3b6:	ea24 0406 	bic.w	r4, r4, r6
 800c3ba:	e7e7      	b.n	800c38c <floorf+0x30>
 800c3bc:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800c3c0:	d302      	bcc.n	800c3c8 <floorf+0x6c>
 800c3c2:	f7f4 fb87 	bl	8000ad4 <__addsf3>
 800c3c6:	4601      	mov	r1, r0
 800c3c8:	4608      	mov	r0, r1
 800c3ca:	bd70      	pop	{r4, r5, r6, pc}
 800c3cc:	2400      	movs	r4, #0
 800c3ce:	e7dd      	b.n	800c38c <floorf+0x30>
 800c3d0:	7149f2ca 	.word	0x7149f2ca
 800c3d4:	bf800000 	.word	0xbf800000
 800c3d8:	007fffff 	.word	0x007fffff

0800c3dc <nanf>:
 800c3dc:	4800      	ldr	r0, [pc, #0]	; (800c3e0 <nanf+0x4>)
 800c3de:	4770      	bx	lr
 800c3e0:	7fc00000 	.word	0x7fc00000

0800c3e4 <rintf>:
 800c3e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3e6:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800c3ea:	0dd5      	lsrs	r5, r2, #23
 800c3ec:	3d7f      	subs	r5, #127	; 0x7f
 800c3ee:	2d16      	cmp	r5, #22
 800c3f0:	4601      	mov	r1, r0
 800c3f2:	dc3b      	bgt.n	800c46c <rintf+0x88>
 800c3f4:	b1e2      	cbz	r2, 800c430 <rintf+0x4c>
 800c3f6:	2d00      	cmp	r5, #0
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	ea4f 74d0 	mov.w	r4, r0, lsr #31
 800c3fe:	da1a      	bge.n	800c436 <rintf+0x52>
 800c400:	4a1e      	ldr	r2, [pc, #120]	; (800c47c <rintf+0x98>)
 800c402:	f3c0 0116 	ubfx	r1, r0, #0, #23
 800c406:	4249      	negs	r1, r1
 800c408:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 800c40c:	0d03      	lsrs	r3, r0, #20
 800c40e:	0a49      	lsrs	r1, r1, #9
 800c410:	051b      	lsls	r3, r3, #20
 800c412:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800c416:	4319      	orrs	r1, r3
 800c418:	4628      	mov	r0, r5
 800c41a:	f7f4 fb5b 	bl	8000ad4 <__addsf3>
 800c41e:	9001      	str	r0, [sp, #4]
 800c420:	4629      	mov	r1, r5
 800c422:	9801      	ldr	r0, [sp, #4]
 800c424:	f7f4 fb54 	bl	8000ad0 <__aeabi_fsub>
 800c428:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 800c42c:	ea41 71c4 	orr.w	r1, r1, r4, lsl #31
 800c430:	4608      	mov	r0, r1
 800c432:	b003      	add	sp, #12
 800c434:	bd30      	pop	{r4, r5, pc}
 800c436:	4b12      	ldr	r3, [pc, #72]	; (800c480 <rintf+0x9c>)
 800c438:	412b      	asrs	r3, r5
 800c43a:	4218      	tst	r0, r3
 800c43c:	d0f8      	beq.n	800c430 <rintf+0x4c>
 800c43e:	0859      	lsrs	r1, r3, #1
 800c440:	4208      	tst	r0, r1
 800c442:	d006      	beq.n	800c452 <rintf+0x6e>
 800c444:	ea20 0201 	bic.w	r2, r0, r1
 800c448:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c44c:	fa41 f505 	asr.w	r5, r1, r5
 800c450:	432a      	orrs	r2, r5
 800c452:	4b0a      	ldr	r3, [pc, #40]	; (800c47c <rintf+0x98>)
 800c454:	4611      	mov	r1, r2
 800c456:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 800c45a:	4620      	mov	r0, r4
 800c45c:	f7f4 fb3a 	bl	8000ad4 <__addsf3>
 800c460:	9001      	str	r0, [sp, #4]
 800c462:	9801      	ldr	r0, [sp, #4]
 800c464:	4621      	mov	r1, r4
 800c466:	f7f4 fb33 	bl	8000ad0 <__aeabi_fsub>
 800c46a:	e004      	b.n	800c476 <rintf+0x92>
 800c46c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c470:	d3de      	bcc.n	800c430 <rintf+0x4c>
 800c472:	f7f4 fb2f 	bl	8000ad4 <__addsf3>
 800c476:	4601      	mov	r1, r0
 800c478:	e7da      	b.n	800c430 <rintf+0x4c>
 800c47a:	bf00      	nop
 800c47c:	0800c9e4 	.word	0x0800c9e4
 800c480:	007fffff 	.word	0x007fffff

0800c484 <scalbnf>:
 800c484:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 800c488:	b510      	push	{r4, lr}
 800c48a:	4602      	mov	r2, r0
 800c48c:	460c      	mov	r4, r1
 800c48e:	4601      	mov	r1, r0
 800c490:	d027      	beq.n	800c4e2 <scalbnf+0x5e>
 800c492:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c496:	d303      	bcc.n	800c4a0 <scalbnf+0x1c>
 800c498:	f7f4 fb1c 	bl	8000ad4 <__addsf3>
 800c49c:	4602      	mov	r2, r0
 800c49e:	e020      	b.n	800c4e2 <scalbnf+0x5e>
 800c4a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c4a4:	d215      	bcs.n	800c4d2 <scalbnf+0x4e>
 800c4a6:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800c4aa:	f7f4 fc1b 	bl	8000ce4 <__aeabi_fmul>
 800c4ae:	4b18      	ldr	r3, [pc, #96]	; (800c510 <scalbnf+0x8c>)
 800c4b0:	4602      	mov	r2, r0
 800c4b2:	429c      	cmp	r4, r3
 800c4b4:	db22      	blt.n	800c4fc <scalbnf+0x78>
 800c4b6:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c4ba:	3b19      	subs	r3, #25
 800c4bc:	4423      	add	r3, r4
 800c4be:	2bfe      	cmp	r3, #254	; 0xfe
 800c4c0:	dd09      	ble.n	800c4d6 <scalbnf+0x52>
 800c4c2:	4611      	mov	r1, r2
 800c4c4:	4813      	ldr	r0, [pc, #76]	; (800c514 <scalbnf+0x90>)
 800c4c6:	f000 f829 	bl	800c51c <copysignf>
 800c4ca:	4912      	ldr	r1, [pc, #72]	; (800c514 <scalbnf+0x90>)
 800c4cc:	f7f4 fc0a 	bl	8000ce4 <__aeabi_fmul>
 800c4d0:	e7e4      	b.n	800c49c <scalbnf+0x18>
 800c4d2:	0ddb      	lsrs	r3, r3, #23
 800c4d4:	e7f2      	b.n	800c4bc <scalbnf+0x38>
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	dd05      	ble.n	800c4e6 <scalbnf+0x62>
 800c4da:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800c4de:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 800c4e2:	4610      	mov	r0, r2
 800c4e4:	bd10      	pop	{r4, pc}
 800c4e6:	f113 0f16 	cmn.w	r3, #22
 800c4ea:	da09      	bge.n	800c500 <scalbnf+0x7c>
 800c4ec:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c4f0:	429c      	cmp	r4, r3
 800c4f2:	4611      	mov	r1, r2
 800c4f4:	dce6      	bgt.n	800c4c4 <scalbnf+0x40>
 800c4f6:	4808      	ldr	r0, [pc, #32]	; (800c518 <scalbnf+0x94>)
 800c4f8:	f000 f810 	bl	800c51c <copysignf>
 800c4fc:	4906      	ldr	r1, [pc, #24]	; (800c518 <scalbnf+0x94>)
 800c4fe:	e7e5      	b.n	800c4cc <scalbnf+0x48>
 800c500:	3319      	adds	r3, #25
 800c502:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800c506:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800c50a:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800c50e:	e7dd      	b.n	800c4cc <scalbnf+0x48>
 800c510:	ffff3cb0 	.word	0xffff3cb0
 800c514:	7149f2ca 	.word	0x7149f2ca
 800c518:	0da24260 	.word	0x0da24260

0800c51c <copysignf>:
 800c51c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800c520:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c524:	4308      	orrs	r0, r1
 800c526:	4770      	bx	lr

0800c528 <_init>:
 800c528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c52a:	bf00      	nop
 800c52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c52e:	bc08      	pop	{r3}
 800c530:	469e      	mov	lr, r3
 800c532:	4770      	bx	lr

0800c534 <_fini>:
 800c534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c536:	bf00      	nop
 800c538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c53a:	bc08      	pop	{r3}
 800c53c:	469e      	mov	lr, r3
 800c53e:	4770      	bx	lr
