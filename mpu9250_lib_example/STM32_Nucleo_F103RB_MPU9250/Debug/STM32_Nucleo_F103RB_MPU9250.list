
STM32_Nucleo_F103RB_MPU9250.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f1bc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000708  0800f2d0  0800f2d0  0001f2d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f9d8  0800f9d8  000200b4  2**0
                  CONTENTS
  4 .ARM          00000000  0800f9d8  0800f9d8  000200b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f9d8  0800f9d8  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f9d8  0800f9d8  0001f9d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f9dc  0800f9dc  0001f9dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800f9e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003564  200000b8  0800fa94  000200b8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000361c  0800fa94  0002361c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001510d  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033f7  00000000  00000000  000351ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fc8  00000000  00000000  000385e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e30  00000000  00000000  000395b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016846  00000000  00000000  0003a3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f027  00000000  00000000  00050c26  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00076b18  00000000  00000000  0005fc4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d6765  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ab0  00000000  00000000  000d67e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000b8 	.word	0x200000b8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800f2b4 	.word	0x0800f2b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000bc 	.word	0x200000bc
 800014c:	0800f2b4 	.word	0x0800f2b4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2iz>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a30:	d215      	bcs.n	8000a5e <__aeabi_d2iz+0x36>
 8000a32:	d511      	bpl.n	8000a58 <__aeabi_d2iz+0x30>
 8000a34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a3c:	d912      	bls.n	8000a64 <__aeabi_d2iz+0x3c>
 8000a3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	bf18      	it	ne
 8000a54:	4240      	negne	r0, r0
 8000a56:	4770      	bx	lr
 8000a58:	f04f 0000 	mov.w	r0, #0
 8000a5c:	4770      	bx	lr
 8000a5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a62:	d105      	bne.n	8000a70 <__aeabi_d2iz+0x48>
 8000a64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	bf08      	it	eq
 8000a6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a6e:	4770      	bx	lr
 8000a70:	f04f 0000 	mov.w	r0, #0
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_d2f>:
 8000a78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a80:	bf24      	itt	cs
 8000a82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8a:	d90d      	bls.n	8000aa8 <__aeabi_d2f+0x30>
 8000a8c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a98:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa0:	bf08      	it	eq
 8000aa2:	f020 0001 	biceq.w	r0, r0, #1
 8000aa6:	4770      	bx	lr
 8000aa8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000aac:	d121      	bne.n	8000af2 <__aeabi_d2f+0x7a>
 8000aae:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab2:	bfbc      	itt	lt
 8000ab4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ab8:	4770      	bxlt	lr
 8000aba:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000abe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac2:	f1c2 0218 	rsb	r2, r2, #24
 8000ac6:	f1c2 0c20 	rsb	ip, r2, #32
 8000aca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ace:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad2:	bf18      	it	ne
 8000ad4:	f040 0001 	orrne.w	r0, r0, #1
 8000ad8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000adc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae4:	ea40 000c 	orr.w	r0, r0, ip
 8000ae8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af0:	e7cc      	b.n	8000a8c <__aeabi_d2f+0x14>
 8000af2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000af6:	d107      	bne.n	8000b08 <__aeabi_d2f+0x90>
 8000af8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000afc:	bf1e      	ittt	ne
 8000afe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b02:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b06:	4770      	bxne	lr
 8000b08:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_frsub>:
 8000b18:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b1c:	e002      	b.n	8000b24 <__addsf3>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_fsub>:
 8000b20:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b24 <__addsf3>:
 8000b24:	0042      	lsls	r2, r0, #1
 8000b26:	bf1f      	itttt	ne
 8000b28:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b2c:	ea92 0f03 	teqne	r2, r3
 8000b30:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b34:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b38:	d06a      	beq.n	8000c10 <__addsf3+0xec>
 8000b3a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b3e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b42:	bfc1      	itttt	gt
 8000b44:	18d2      	addgt	r2, r2, r3
 8000b46:	4041      	eorgt	r1, r0
 8000b48:	4048      	eorgt	r0, r1
 8000b4a:	4041      	eorgt	r1, r0
 8000b4c:	bfb8      	it	lt
 8000b4e:	425b      	neglt	r3, r3
 8000b50:	2b19      	cmp	r3, #25
 8000b52:	bf88      	it	hi
 8000b54:	4770      	bxhi	lr
 8000b56:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b62:	bf18      	it	ne
 8000b64:	4240      	negne	r0, r0
 8000b66:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b6e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4249      	negne	r1, r1
 8000b76:	ea92 0f03 	teq	r2, r3
 8000b7a:	d03f      	beq.n	8000bfc <__addsf3+0xd8>
 8000b7c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b80:	fa41 fc03 	asr.w	ip, r1, r3
 8000b84:	eb10 000c 	adds.w	r0, r0, ip
 8000b88:	f1c3 0320 	rsb	r3, r3, #32
 8000b8c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b90:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b94:	d502      	bpl.n	8000b9c <__addsf3+0x78>
 8000b96:	4249      	negs	r1, r1
 8000b98:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b9c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba0:	d313      	bcc.n	8000bca <__addsf3+0xa6>
 8000ba2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ba6:	d306      	bcc.n	8000bb6 <__addsf3+0x92>
 8000ba8:	0840      	lsrs	r0, r0, #1
 8000baa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bae:	f102 0201 	add.w	r2, r2, #1
 8000bb2:	2afe      	cmp	r2, #254	; 0xfe
 8000bb4:	d251      	bcs.n	8000c5a <__addsf3+0x136>
 8000bb6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bbe:	bf08      	it	eq
 8000bc0:	f020 0001 	biceq.w	r0, r0, #1
 8000bc4:	ea40 0003 	orr.w	r0, r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	0049      	lsls	r1, r1, #1
 8000bcc:	eb40 0000 	adc.w	r0, r0, r0
 8000bd0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bd4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd8:	d1ed      	bne.n	8000bb6 <__addsf3+0x92>
 8000bda:	fab0 fc80 	clz	ip, r0
 8000bde:	f1ac 0c08 	sub.w	ip, ip, #8
 8000be2:	ebb2 020c 	subs.w	r2, r2, ip
 8000be6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bea:	bfaa      	itet	ge
 8000bec:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf0:	4252      	neglt	r2, r2
 8000bf2:	4318      	orrge	r0, r3
 8000bf4:	bfbc      	itt	lt
 8000bf6:	40d0      	lsrlt	r0, r2
 8000bf8:	4318      	orrlt	r0, r3
 8000bfa:	4770      	bx	lr
 8000bfc:	f092 0f00 	teq	r2, #0
 8000c00:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c04:	bf06      	itte	eq
 8000c06:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c0a:	3201      	addeq	r2, #1
 8000c0c:	3b01      	subne	r3, #1
 8000c0e:	e7b5      	b.n	8000b7c <__addsf3+0x58>
 8000c10:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c14:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c18:	bf18      	it	ne
 8000c1a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c1e:	d021      	beq.n	8000c64 <__addsf3+0x140>
 8000c20:	ea92 0f03 	teq	r2, r3
 8000c24:	d004      	beq.n	8000c30 <__addsf3+0x10c>
 8000c26:	f092 0f00 	teq	r2, #0
 8000c2a:	bf08      	it	eq
 8000c2c:	4608      	moveq	r0, r1
 8000c2e:	4770      	bx	lr
 8000c30:	ea90 0f01 	teq	r0, r1
 8000c34:	bf1c      	itt	ne
 8000c36:	2000      	movne	r0, #0
 8000c38:	4770      	bxne	lr
 8000c3a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c3e:	d104      	bne.n	8000c4a <__addsf3+0x126>
 8000c40:	0040      	lsls	r0, r0, #1
 8000c42:	bf28      	it	cs
 8000c44:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c48:	4770      	bx	lr
 8000c4a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c4e:	bf3c      	itt	cc
 8000c50:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bxcc	lr
 8000c56:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c5a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c5e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c62:	4770      	bx	lr
 8000c64:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c68:	bf16      	itet	ne
 8000c6a:	4608      	movne	r0, r1
 8000c6c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c70:	4601      	movne	r1, r0
 8000c72:	0242      	lsls	r2, r0, #9
 8000c74:	bf06      	itte	eq
 8000c76:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c7a:	ea90 0f01 	teqeq	r0, r1
 8000c7e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c82:	4770      	bx	lr

08000c84 <__aeabi_ui2f>:
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e004      	b.n	8000c94 <__aeabi_i2f+0x8>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_i2f>:
 8000c8c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c90:	bf48      	it	mi
 8000c92:	4240      	negmi	r0, r0
 8000c94:	ea5f 0c00 	movs.w	ip, r0
 8000c98:	bf08      	it	eq
 8000c9a:	4770      	bxeq	lr
 8000c9c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca0:	4601      	mov	r1, r0
 8000ca2:	f04f 0000 	mov.w	r0, #0
 8000ca6:	e01c      	b.n	8000ce2 <__aeabi_l2f+0x2a>

08000ca8 <__aeabi_ul2f>:
 8000ca8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cac:	bf08      	it	eq
 8000cae:	4770      	bxeq	lr
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	e00a      	b.n	8000ccc <__aeabi_l2f+0x14>
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_l2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__aeabi_l2f+0x14>
 8000cc6:	4240      	negs	r0, r0
 8000cc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ccc:	ea5f 0c01 	movs.w	ip, r1
 8000cd0:	bf02      	ittt	eq
 8000cd2:	4684      	moveq	ip, r0
 8000cd4:	4601      	moveq	r1, r0
 8000cd6:	2000      	moveq	r0, #0
 8000cd8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cdc:	bf08      	it	eq
 8000cde:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ce2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ce6:	fabc f28c 	clz	r2, ip
 8000cea:	3a08      	subs	r2, #8
 8000cec:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf0:	db10      	blt.n	8000d14 <__aeabi_l2f+0x5c>
 8000cf2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf6:	4463      	add	r3, ip
 8000cf8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cfc:	f1c2 0220 	rsb	r2, r2, #32
 8000d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d04:	fa20 f202 	lsr.w	r2, r0, r2
 8000d08:	eb43 0002 	adc.w	r0, r3, r2
 8000d0c:	bf08      	it	eq
 8000d0e:	f020 0001 	biceq.w	r0, r0, #1
 8000d12:	4770      	bx	lr
 8000d14:	f102 0220 	add.w	r2, r2, #32
 8000d18:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1c:	f1c2 0220 	rsb	r2, r2, #32
 8000d20:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d24:	fa21 f202 	lsr.w	r2, r1, r2
 8000d28:	eb43 0002 	adc.w	r0, r3, r2
 8000d2c:	bf08      	it	eq
 8000d2e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d32:	4770      	bx	lr

08000d34 <__aeabi_fmul>:
 8000d34:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d38:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d3c:	bf1e      	ittt	ne
 8000d3e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d42:	ea92 0f0c 	teqne	r2, ip
 8000d46:	ea93 0f0c 	teqne	r3, ip
 8000d4a:	d06f      	beq.n	8000e2c <__aeabi_fmul+0xf8>
 8000d4c:	441a      	add	r2, r3
 8000d4e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d52:	0240      	lsls	r0, r0, #9
 8000d54:	bf18      	it	ne
 8000d56:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d5a:	d01e      	beq.n	8000d9a <__aeabi_fmul+0x66>
 8000d5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d60:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d64:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d68:	fba0 3101 	umull	r3, r1, r0, r1
 8000d6c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d70:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d74:	bf3e      	ittt	cc
 8000d76:	0049      	lslcc	r1, r1, #1
 8000d78:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d7c:	005b      	lslcc	r3, r3, #1
 8000d7e:	ea40 0001 	orr.w	r0, r0, r1
 8000d82:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d86:	2afd      	cmp	r2, #253	; 0xfd
 8000d88:	d81d      	bhi.n	8000dc6 <__aeabi_fmul+0x92>
 8000d8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d92:	bf08      	it	eq
 8000d94:	f020 0001 	biceq.w	r0, r0, #1
 8000d98:	4770      	bx	lr
 8000d9a:	f090 0f00 	teq	r0, #0
 8000d9e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000da2:	bf08      	it	eq
 8000da4:	0249      	lsleq	r1, r1, #9
 8000da6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000daa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dae:	3a7f      	subs	r2, #127	; 0x7f
 8000db0:	bfc2      	ittt	gt
 8000db2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000db6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dba:	4770      	bxgt	lr
 8000dbc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	3a01      	subs	r2, #1
 8000dc6:	dc5d      	bgt.n	8000e84 <__aeabi_fmul+0x150>
 8000dc8:	f112 0f19 	cmn.w	r2, #25
 8000dcc:	bfdc      	itt	le
 8000dce:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dd2:	4770      	bxle	lr
 8000dd4:	f1c2 0200 	rsb	r2, r2, #0
 8000dd8:	0041      	lsls	r1, r0, #1
 8000dda:	fa21 f102 	lsr.w	r1, r1, r2
 8000dde:	f1c2 0220 	rsb	r2, r2, #32
 8000de2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000de6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dea:	f140 0000 	adc.w	r0, r0, #0
 8000dee:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000df2:	bf08      	it	eq
 8000df4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000df8:	4770      	bx	lr
 8000dfa:	f092 0f00 	teq	r2, #0
 8000dfe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0040      	lsleq	r0, r0, #1
 8000e06:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e0a:	3a01      	subeq	r2, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fmul+0xce>
 8000e0e:	ea40 000c 	orr.w	r0, r0, ip
 8000e12:	f093 0f00 	teq	r3, #0
 8000e16:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0049      	lsleq	r1, r1, #1
 8000e1e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e22:	3b01      	subeq	r3, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fmul+0xe6>
 8000e26:	ea41 010c 	orr.w	r1, r1, ip
 8000e2a:	e78f      	b.n	8000d4c <__aeabi_fmul+0x18>
 8000e2c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e30:	ea92 0f0c 	teq	r2, ip
 8000e34:	bf18      	it	ne
 8000e36:	ea93 0f0c 	teqne	r3, ip
 8000e3a:	d00a      	beq.n	8000e52 <__aeabi_fmul+0x11e>
 8000e3c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e40:	bf18      	it	ne
 8000e42:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e46:	d1d8      	bne.n	8000dfa <__aeabi_fmul+0xc6>
 8000e48:	ea80 0001 	eor.w	r0, r0, r1
 8000e4c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f090 0f00 	teq	r0, #0
 8000e56:	bf17      	itett	ne
 8000e58:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e5c:	4608      	moveq	r0, r1
 8000e5e:	f091 0f00 	teqne	r1, #0
 8000e62:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e66:	d014      	beq.n	8000e92 <__aeabi_fmul+0x15e>
 8000e68:	ea92 0f0c 	teq	r2, ip
 8000e6c:	d101      	bne.n	8000e72 <__aeabi_fmul+0x13e>
 8000e6e:	0242      	lsls	r2, r0, #9
 8000e70:	d10f      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e72:	ea93 0f0c 	teq	r3, ip
 8000e76:	d103      	bne.n	8000e80 <__aeabi_fmul+0x14c>
 8000e78:	024b      	lsls	r3, r1, #9
 8000e7a:	bf18      	it	ne
 8000e7c:	4608      	movne	r0, r1
 8000e7e:	d108      	bne.n	8000e92 <__aeabi_fmul+0x15e>
 8000e80:	ea80 0001 	eor.w	r0, r0, r1
 8000e84:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e90:	4770      	bx	lr
 8000e92:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e96:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e9a:	4770      	bx	lr

08000e9c <__aeabi_fdiv>:
 8000e9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ea4:	bf1e      	ittt	ne
 8000ea6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eaa:	ea92 0f0c 	teqne	r2, ip
 8000eae:	ea93 0f0c 	teqne	r3, ip
 8000eb2:	d069      	beq.n	8000f88 <__aeabi_fdiv+0xec>
 8000eb4:	eba2 0203 	sub.w	r2, r2, r3
 8000eb8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ebc:	0249      	lsls	r1, r1, #9
 8000ebe:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ec2:	d037      	beq.n	8000f34 <__aeabi_fdiv+0x98>
 8000ec4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ecc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	bf38      	it	cc
 8000ed8:	005b      	lslcc	r3, r3, #1
 8000eda:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ede:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	bf24      	itt	cs
 8000ee6:	1a5b      	subcs	r3, r3, r1
 8000ee8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eec:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef0:	bf24      	itt	cs
 8000ef2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ef6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000efa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000efe:	bf24      	itt	cs
 8000f00:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f04:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f08:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f0c:	bf24      	itt	cs
 8000f0e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f12:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f16:	011b      	lsls	r3, r3, #4
 8000f18:	bf18      	it	ne
 8000f1a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f1e:	d1e0      	bne.n	8000ee2 <__aeabi_fdiv+0x46>
 8000f20:	2afd      	cmp	r2, #253	; 0xfd
 8000f22:	f63f af50 	bhi.w	8000dc6 <__aeabi_fmul+0x92>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f2c:	bf08      	it	eq
 8000f2e:	f020 0001 	biceq.w	r0, r0, #1
 8000f32:	4770      	bx	lr
 8000f34:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f38:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f3c:	327f      	adds	r2, #127	; 0x7f
 8000f3e:	bfc2      	ittt	gt
 8000f40:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f44:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f48:	4770      	bxgt	lr
 8000f4a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	3a01      	subs	r2, #1
 8000f54:	e737      	b.n	8000dc6 <__aeabi_fmul+0x92>
 8000f56:	f092 0f00 	teq	r2, #0
 8000f5a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f5e:	bf02      	ittt	eq
 8000f60:	0040      	lsleq	r0, r0, #1
 8000f62:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f66:	3a01      	subeq	r2, #1
 8000f68:	d0f9      	beq.n	8000f5e <__aeabi_fdiv+0xc2>
 8000f6a:	ea40 000c 	orr.w	r0, r0, ip
 8000f6e:	f093 0f00 	teq	r3, #0
 8000f72:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f76:	bf02      	ittt	eq
 8000f78:	0049      	lsleq	r1, r1, #1
 8000f7a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f7e:	3b01      	subeq	r3, #1
 8000f80:	d0f9      	beq.n	8000f76 <__aeabi_fdiv+0xda>
 8000f82:	ea41 010c 	orr.w	r1, r1, ip
 8000f86:	e795      	b.n	8000eb4 <__aeabi_fdiv+0x18>
 8000f88:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f8c:	ea92 0f0c 	teq	r2, ip
 8000f90:	d108      	bne.n	8000fa4 <__aeabi_fdiv+0x108>
 8000f92:	0242      	lsls	r2, r0, #9
 8000f94:	f47f af7d 	bne.w	8000e92 <__aeabi_fmul+0x15e>
 8000f98:	ea93 0f0c 	teq	r3, ip
 8000f9c:	f47f af70 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fa0:	4608      	mov	r0, r1
 8000fa2:	e776      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fa4:	ea93 0f0c 	teq	r3, ip
 8000fa8:	d104      	bne.n	8000fb4 <__aeabi_fdiv+0x118>
 8000faa:	024b      	lsls	r3, r1, #9
 8000fac:	f43f af4c 	beq.w	8000e48 <__aeabi_fmul+0x114>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e76e      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fb4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fb8:	bf18      	it	ne
 8000fba:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	d1ca      	bne.n	8000f56 <__aeabi_fdiv+0xba>
 8000fc0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fc4:	f47f af5c 	bne.w	8000e80 <__aeabi_fmul+0x14c>
 8000fc8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fcc:	f47f af3c 	bne.w	8000e48 <__aeabi_fmul+0x114>
 8000fd0:	e75f      	b.n	8000e92 <__aeabi_fmul+0x15e>
 8000fd2:	bf00      	nop

08000fd4 <__gesf2>:
 8000fd4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fd8:	e006      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fda:	bf00      	nop

08000fdc <__lesf2>:
 8000fdc:	f04f 0c01 	mov.w	ip, #1
 8000fe0:	e002      	b.n	8000fe8 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__cmpsf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ff4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ff8:	bf18      	it	ne
 8000ffa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ffe:	d011      	beq.n	8001024 <__cmpsf2+0x40>
 8001000:	b001      	add	sp, #4
 8001002:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001006:	bf18      	it	ne
 8001008:	ea90 0f01 	teqne	r0, r1
 800100c:	bf58      	it	pl
 800100e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001012:	bf88      	it	hi
 8001014:	17c8      	asrhi	r0, r1, #31
 8001016:	bf38      	it	cc
 8001018:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800101c:	bf18      	it	ne
 800101e:	f040 0001 	orrne.w	r0, r0, #1
 8001022:	4770      	bx	lr
 8001024:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001028:	d102      	bne.n	8001030 <__cmpsf2+0x4c>
 800102a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800102e:	d105      	bne.n	800103c <__cmpsf2+0x58>
 8001030:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001034:	d1e4      	bne.n	8001000 <__cmpsf2+0x1c>
 8001036:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800103a:	d0e1      	beq.n	8001000 <__cmpsf2+0x1c>
 800103c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop

08001044 <__aeabi_cfrcmple>:
 8001044:	4684      	mov	ip, r0
 8001046:	4608      	mov	r0, r1
 8001048:	4661      	mov	r1, ip
 800104a:	e7ff      	b.n	800104c <__aeabi_cfcmpeq>

0800104c <__aeabi_cfcmpeq>:
 800104c:	b50f      	push	{r0, r1, r2, r3, lr}
 800104e:	f7ff ffc9 	bl	8000fe4 <__cmpsf2>
 8001052:	2800      	cmp	r0, #0
 8001054:	bf48      	it	mi
 8001056:	f110 0f00 	cmnmi.w	r0, #0
 800105a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800105c <__aeabi_fcmpeq>:
 800105c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001060:	f7ff fff4 	bl	800104c <__aeabi_cfcmpeq>
 8001064:	bf0c      	ite	eq
 8001066:	2001      	moveq	r0, #1
 8001068:	2000      	movne	r0, #0
 800106a:	f85d fb08 	ldr.w	pc, [sp], #8
 800106e:	bf00      	nop

08001070 <__aeabi_fcmplt>:
 8001070:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001074:	f7ff ffea 	bl	800104c <__aeabi_cfcmpeq>
 8001078:	bf34      	ite	cc
 800107a:	2001      	movcc	r0, #1
 800107c:	2000      	movcs	r0, #0
 800107e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001082:	bf00      	nop

08001084 <__aeabi_fcmple>:
 8001084:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001088:	f7ff ffe0 	bl	800104c <__aeabi_cfcmpeq>
 800108c:	bf94      	ite	ls
 800108e:	2001      	movls	r0, #1
 8001090:	2000      	movhi	r0, #0
 8001092:	f85d fb08 	ldr.w	pc, [sp], #8
 8001096:	bf00      	nop

08001098 <__aeabi_fcmpge>:
 8001098:	f84d ed08 	str.w	lr, [sp, #-8]!
 800109c:	f7ff ffd2 	bl	8001044 <__aeabi_cfrcmple>
 80010a0:	bf94      	ite	ls
 80010a2:	2001      	movls	r0, #1
 80010a4:	2000      	movhi	r0, #0
 80010a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010aa:	bf00      	nop

080010ac <__aeabi_fcmpgt>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff ffc8 	bl	8001044 <__aeabi_cfrcmple>
 80010b4:	bf34      	ite	cc
 80010b6:	2001      	movcc	r0, #1
 80010b8:	2000      	movcs	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmpun>:
 80010c0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010c4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010c8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010cc:	d102      	bne.n	80010d4 <__aeabi_fcmpun+0x14>
 80010ce:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010d2:	d108      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010d4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010d8:	d102      	bne.n	80010e0 <__aeabi_fcmpun+0x20>
 80010da:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010de:	d102      	bne.n	80010e6 <__aeabi_fcmpun+0x26>
 80010e0:	f04f 0000 	mov.w	r0, #0
 80010e4:	4770      	bx	lr
 80010e6:	f04f 0001 	mov.w	r0, #1
 80010ea:	4770      	bx	lr

080010ec <__aeabi_f2iz>:
 80010ec:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010f0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010f4:	d30f      	bcc.n	8001116 <__aeabi_f2iz+0x2a>
 80010f6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010fa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010fe:	d90d      	bls.n	800111c <__aeabi_f2iz+0x30>
 8001100:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001104:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001108:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800110c:	fa23 f002 	lsr.w	r0, r3, r2
 8001110:	bf18      	it	ne
 8001112:	4240      	negne	r0, r0
 8001114:	4770      	bx	lr
 8001116:	f04f 0000 	mov.w	r0, #0
 800111a:	4770      	bx	lr
 800111c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001120:	d101      	bne.n	8001126 <__aeabi_f2iz+0x3a>
 8001122:	0242      	lsls	r2, r0, #9
 8001124:	d105      	bne.n	8001132 <__aeabi_f2iz+0x46>
 8001126:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800112a:	bf08      	it	eq
 800112c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr

08001138 <MadgwickAHRSupdate>:
// Functions

//---------------------------------------------------------------------------------------------------
// AHRS algorithm update

void MadgwickAHRSupdate(float beta, float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz, float dt) {
 8001138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113a:	b0ad      	sub	sp, #180	; 0xb4
 800113c:	af04      	add	r7, sp, #16
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
 8001144:	603b      	str	r3, [r7, #0]

	float sampleFreq = 1 /dt;
 8001146:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800114a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800114e:	f7ff fea5 	bl	8000e9c <__aeabi_fdiv>
 8001152:	4603      	mov	r3, r0
 8001154:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	float recipNorm = 0;
 8001158:	f04f 0300 	mov.w	r3, #0
 800115c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	float s0 = 0, s1 = 0, s2 = 0, s3 = 0;
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001168:	f04f 0300 	mov.w	r3, #0
 800116c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001170:	f04f 0300 	mov.w	r3, #0
 8001174:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001176:	f04f 0300 	mov.w	r3, #0
 800117a:	67bb      	str	r3, [r7, #120]	; 0x78
	float qDot1 = 0, qDot2 = 0, qDot3 = 0, qDot4 = 0;
 800117c:	f04f 0300 	mov.w	r3, #0
 8001180:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800118c:	f04f 0300 	mov.w	r3, #0
 8001190:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001194:	f04f 0300 	mov.w	r3, #0
 8001198:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	float hx = 0, hy = 0;
 800119c:	f04f 0300 	mov.w	r3, #0
 80011a0:	677b      	str	r3, [r7, #116]	; 0x74
 80011a2:	f04f 0300 	mov.w	r3, #0
 80011a6:	673b      	str	r3, [r7, #112]	; 0x70
	float _2q0mx, _2q0my, _2q0mz, _2q1mx, _2bx, _2bz, _4bx, _4bz, _2q0, _2q1, _2q2, _2q3, _2q0q2, _2q2q3, q0q0, q0q1, q0q2, q0q3, q1q1, q1q2, q1q3, q2q2, q2q3, q3q3;

	// Use IMU algorithm if magnetometer measurement invalid (avoids NaN in magnetometer normalisation)
	if((mx == 0.0f) && (my == 0.0f) && (mz == 0.0f)) {
 80011a8:	f04f 0100 	mov.w	r1, #0
 80011ac:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80011b0:	f7ff ff54 	bl	800105c <__aeabi_fcmpeq>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d025      	beq.n	8001206 <MadgwickAHRSupdate+0xce>
 80011ba:	f04f 0100 	mov.w	r1, #0
 80011be:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80011c2:	f7ff ff4b 	bl	800105c <__aeabi_fcmpeq>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d01c      	beq.n	8001206 <MadgwickAHRSupdate+0xce>
 80011cc:	f04f 0100 	mov.w	r1, #0
 80011d0:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80011d4:	f7ff ff42 	bl	800105c <__aeabi_fcmpeq>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d013      	beq.n	8001206 <MadgwickAHRSupdate+0xce>
		MadgwickAHRSupdateIMU(beta, gx, gy, gz, ax, ay, az, dt);
 80011de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80011e2:	9303      	str	r3, [sp, #12]
 80011e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80011e8:	9302      	str	r3, [sp, #8]
 80011ea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80011f4:	9300      	str	r3, [sp, #0]
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	68b9      	ldr	r1, [r7, #8]
 80011fc:	68f8      	ldr	r0, [r7, #12]
 80011fe:	f001 f95b 	bl	80024b8 <MadgwickAHRSupdateIMU>
		return;
 8001202:	f001 b94d 	b.w	80024a0 <MadgwickAHRSupdate+0x1368>
	}

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 8001206:	4bb2      	ldr	r3, [pc, #712]	; (80014d0 <MadgwickAHRSupdate+0x398>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800120e:	68b9      	ldr	r1, [r7, #8]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fd8f 	bl	8000d34 <__aeabi_fmul>
 8001216:	4603      	mov	r3, r0
 8001218:	461c      	mov	r4, r3
 800121a:	4bae      	ldr	r3, [pc, #696]	; (80014d4 <MadgwickAHRSupdate+0x39c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fd87 	bl	8000d34 <__aeabi_fmul>
 8001226:	4603      	mov	r3, r0
 8001228:	4619      	mov	r1, r3
 800122a:	4620      	mov	r0, r4
 800122c:	f7ff fc78 	bl	8000b20 <__aeabi_fsub>
 8001230:	4603      	mov	r3, r0
 8001232:	461c      	mov	r4, r3
 8001234:	4ba8      	ldr	r3, [pc, #672]	; (80014d8 <MadgwickAHRSupdate+0x3a0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6839      	ldr	r1, [r7, #0]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fd7a 	bl	8000d34 <__aeabi_fmul>
 8001240:	4603      	mov	r3, r0
 8001242:	4619      	mov	r1, r3
 8001244:	4620      	mov	r0, r4
 8001246:	f7ff fc6b 	bl	8000b20 <__aeabi_fsub>
 800124a:	4603      	mov	r3, r0
 800124c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fd6f 	bl	8000d34 <__aeabi_fmul>
 8001256:	4603      	mov	r3, r0
 8001258:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800125c:	4b9f      	ldr	r3, [pc, #636]	; (80014dc <MadgwickAHRSupdate+0x3a4>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fd66 	bl	8000d34 <__aeabi_fmul>
 8001268:	4603      	mov	r3, r0
 800126a:	461c      	mov	r4, r3
 800126c:	4b99      	ldr	r3, [pc, #612]	; (80014d4 <MadgwickAHRSupdate+0x39c>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6839      	ldr	r1, [r7, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fd5e 	bl	8000d34 <__aeabi_fmul>
 8001278:	4603      	mov	r3, r0
 800127a:	4619      	mov	r1, r3
 800127c:	4620      	mov	r0, r4
 800127e:	f7ff fc51 	bl	8000b24 <__addsf3>
 8001282:	4603      	mov	r3, r0
 8001284:	461c      	mov	r4, r3
 8001286:	4b94      	ldr	r3, [pc, #592]	; (80014d8 <MadgwickAHRSupdate+0x3a0>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff fd51 	bl	8000d34 <__aeabi_fmul>
 8001292:	4603      	mov	r3, r0
 8001294:	4619      	mov	r1, r3
 8001296:	4620      	mov	r0, r4
 8001298:	f7ff fc42 	bl	8000b20 <__aeabi_fsub>
 800129c:	4603      	mov	r3, r0
 800129e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff fd46 	bl	8000d34 <__aeabi_fmul>
 80012a8:	4603      	mov	r3, r0
 80012aa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 80012ae:	4b8b      	ldr	r3, [pc, #556]	; (80014dc <MadgwickAHRSupdate+0x3a4>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6879      	ldr	r1, [r7, #4]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fd3d 	bl	8000d34 <__aeabi_fmul>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461c      	mov	r4, r3
 80012be:	4b84      	ldr	r3, [pc, #528]	; (80014d0 <MadgwickAHRSupdate+0x398>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6839      	ldr	r1, [r7, #0]
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fd35 	bl	8000d34 <__aeabi_fmul>
 80012ca:	4603      	mov	r3, r0
 80012cc:	4619      	mov	r1, r3
 80012ce:	4620      	mov	r0, r4
 80012d0:	f7ff fc26 	bl	8000b20 <__aeabi_fsub>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461c      	mov	r4, r3
 80012d8:	4b7f      	ldr	r3, [pc, #508]	; (80014d8 <MadgwickAHRSupdate+0x3a0>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	68b9      	ldr	r1, [r7, #8]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fd28 	bl	8000d34 <__aeabi_fmul>
 80012e4:	4603      	mov	r3, r0
 80012e6:	4619      	mov	r1, r3
 80012e8:	4620      	mov	r0, r4
 80012ea:	f7ff fc1b 	bl	8000b24 <__addsf3>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff fd1d 	bl	8000d34 <__aeabi_fmul>
 80012fa:	4603      	mov	r3, r0
 80012fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 8001300:	4b76      	ldr	r3, [pc, #472]	; (80014dc <MadgwickAHRSupdate+0x3a4>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6839      	ldr	r1, [r7, #0]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff fd14 	bl	8000d34 <__aeabi_fmul>
 800130c:	4603      	mov	r3, r0
 800130e:	461c      	mov	r4, r3
 8001310:	4b6f      	ldr	r3, [pc, #444]	; (80014d0 <MadgwickAHRSupdate+0x398>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff fd0c 	bl	8000d34 <__aeabi_fmul>
 800131c:	4603      	mov	r3, r0
 800131e:	4619      	mov	r1, r3
 8001320:	4620      	mov	r0, r4
 8001322:	f7ff fbff 	bl	8000b24 <__addsf3>
 8001326:	4603      	mov	r3, r0
 8001328:	461c      	mov	r4, r3
 800132a:	4b6a      	ldr	r3, [pc, #424]	; (80014d4 <MadgwickAHRSupdate+0x39c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68b9      	ldr	r1, [r7, #8]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fcff 	bl	8000d34 <__aeabi_fmul>
 8001336:	4603      	mov	r3, r0
 8001338:	4619      	mov	r1, r3
 800133a:	4620      	mov	r0, r4
 800133c:	f7ff fbf0 	bl	8000b20 <__aeabi_fsub>
 8001340:	4603      	mov	r3, r0
 8001342:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fcf4 	bl	8000d34 <__aeabi_fmul>
 800134c:	4603      	mov	r3, r0
 800134e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 8001352:	f04f 0100 	mov.w	r1, #0
 8001356:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800135a:	f7ff fe7f 	bl	800105c <__aeabi_fcmpeq>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d012      	beq.n	800138a <MadgwickAHRSupdate+0x252>
 8001364:	f04f 0100 	mov.w	r1, #0
 8001368:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800136c:	f7ff fe76 	bl	800105c <__aeabi_fcmpeq>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d009      	beq.n	800138a <MadgwickAHRSupdate+0x252>
 8001376:	f04f 0100 	mov.w	r1, #0
 800137a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800137e:	f7ff fe6d 	bl	800105c <__aeabi_fcmpeq>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	f040 87c4 	bne.w	8002312 <MadgwickAHRSupdate+0x11da>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 800138a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800138e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8001392:	f7ff fccf 	bl	8000d34 <__aeabi_fmul>
 8001396:	4603      	mov	r3, r0
 8001398:	461c      	mov	r4, r3
 800139a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800139e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80013a2:	f7ff fcc7 	bl	8000d34 <__aeabi_fmul>
 80013a6:	4603      	mov	r3, r0
 80013a8:	4619      	mov	r1, r3
 80013aa:	4620      	mov	r0, r4
 80013ac:	f7ff fbba 	bl	8000b24 <__addsf3>
 80013b0:	4603      	mov	r3, r0
 80013b2:	461c      	mov	r4, r3
 80013b4:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80013b8:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80013bc:	f7ff fcba 	bl	8000d34 <__aeabi_fmul>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4619      	mov	r1, r3
 80013c4:	4620      	mov	r0, r4
 80013c6:	f7ff fbad 	bl	8000b24 <__addsf3>
 80013ca:	4603      	mov	r3, r0
 80013cc:	4618      	mov	r0, r3
 80013ce:	f001 fc4f 	bl	8002c70 <invSqrt>
 80013d2:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		ax *= recipNorm;
 80013d6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80013da:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80013de:	f7ff fca9 	bl	8000d34 <__aeabi_fmul>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		ay *= recipNorm;
 80013e8:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80013ec:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80013f0:	f7ff fca0 	bl	8000d34 <__aeabi_fmul>
 80013f4:	4603      	mov	r3, r0
 80013f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		az *= recipNorm;   
 80013fa:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80013fe:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001402:	f7ff fc97 	bl	8000d34 <__aeabi_fmul>
 8001406:	4603      	mov	r3, r0
 8001408:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

		// Normalise magnetometer measurement
		recipNorm = invSqrt(mx * mx + my * my + mz * mz);
 800140c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001410:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001414:	f7ff fc8e 	bl	8000d34 <__aeabi_fmul>
 8001418:	4603      	mov	r3, r0
 800141a:	461c      	mov	r4, r3
 800141c:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001420:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001424:	f7ff fc86 	bl	8000d34 <__aeabi_fmul>
 8001428:	4603      	mov	r3, r0
 800142a:	4619      	mov	r1, r3
 800142c:	4620      	mov	r0, r4
 800142e:	f7ff fb79 	bl	8000b24 <__addsf3>
 8001432:	4603      	mov	r3, r0
 8001434:	461c      	mov	r4, r3
 8001436:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 800143a:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800143e:	f7ff fc79 	bl	8000d34 <__aeabi_fmul>
 8001442:	4603      	mov	r3, r0
 8001444:	4619      	mov	r1, r3
 8001446:	4620      	mov	r0, r4
 8001448:	f7ff fb6c 	bl	8000b24 <__addsf3>
 800144c:	4603      	mov	r3, r0
 800144e:	4618      	mov	r0, r3
 8001450:	f001 fc0e 	bl	8002c70 <invSqrt>
 8001454:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		mx *= recipNorm;
 8001458:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800145c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001460:	f7ff fc68 	bl	8000d34 <__aeabi_fmul>
 8001464:	4603      	mov	r3, r0
 8001466:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		my *= recipNorm;
 800146a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800146e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001472:	f7ff fc5f 	bl	8000d34 <__aeabi_fmul>
 8001476:	4603      	mov	r3, r0
 8001478:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
		mz *= recipNorm;
 800147c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8001480:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8001484:	f7ff fc56 	bl	8000d34 <__aeabi_fmul>
 8001488:	4603      	mov	r3, r0
 800148a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

		// Auxiliary variables to avoid repeated arithmetic
		_2q0mx = 2.0f * q0 * mx;
 800148e:	4b13      	ldr	r3, [pc, #76]	; (80014dc <MadgwickAHRSupdate+0x3a4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4619      	mov	r1, r3
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff fb45 	bl	8000b24 <__addsf3>
 800149a:	4603      	mov	r3, r0
 800149c:	4619      	mov	r1, r3
 800149e:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80014a2:	f7ff fc47 	bl	8000d34 <__aeabi_fmul>
 80014a6:	4603      	mov	r3, r0
 80014a8:	66fb      	str	r3, [r7, #108]	; 0x6c
		_2q0my = 2.0f * q0 * my;
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <MadgwickAHRSupdate+0x3a4>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4619      	mov	r1, r3
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fb37 	bl	8000b24 <__addsf3>
 80014b6:	4603      	mov	r3, r0
 80014b8:	4619      	mov	r1, r3
 80014ba:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80014be:	f7ff fc39 	bl	8000d34 <__aeabi_fmul>
 80014c2:	4603      	mov	r3, r0
 80014c4:	66bb      	str	r3, [r7, #104]	; 0x68
		_2q0mz = 2.0f * q0 * mz;
 80014c6:	4b05      	ldr	r3, [pc, #20]	; (80014dc <MadgwickAHRSupdate+0x3a4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4619      	mov	r1, r3
 80014cc:	4618      	mov	r0, r3
 80014ce:	e007      	b.n	80014e0 <MadgwickAHRSupdate+0x3a8>
 80014d0:	200000d4 	.word	0x200000d4
 80014d4:	200000d8 	.word	0x200000d8
 80014d8:	200000dc 	.word	0x200000dc
 80014dc:	20000000 	.word	0x20000000
 80014e0:	f7ff fb20 	bl	8000b24 <__addsf3>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4619      	mov	r1, r3
 80014e8:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80014ec:	f7ff fc22 	bl	8000d34 <__aeabi_fmul>
 80014f0:	4603      	mov	r3, r0
 80014f2:	667b      	str	r3, [r7, #100]	; 0x64
		_2q1mx = 2.0f * q1 * mx;
 80014f4:	4b96      	ldr	r3, [pc, #600]	; (8001750 <MadgwickAHRSupdate+0x618>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4619      	mov	r1, r3
 80014fa:	4618      	mov	r0, r3
 80014fc:	f7ff fb12 	bl	8000b24 <__addsf3>
 8001500:	4603      	mov	r3, r0
 8001502:	4619      	mov	r1, r3
 8001504:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001508:	f7ff fc14 	bl	8000d34 <__aeabi_fmul>
 800150c:	4603      	mov	r3, r0
 800150e:	663b      	str	r3, [r7, #96]	; 0x60
		_2q0 = 2.0f * q0;
 8001510:	4b90      	ldr	r3, [pc, #576]	; (8001754 <MadgwickAHRSupdate+0x61c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4619      	mov	r1, r3
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fb04 	bl	8000b24 <__addsf3>
 800151c:	4603      	mov	r3, r0
 800151e:	65fb      	str	r3, [r7, #92]	; 0x5c
		_2q1 = 2.0f * q1;
 8001520:	4b8b      	ldr	r3, [pc, #556]	; (8001750 <MadgwickAHRSupdate+0x618>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fafc 	bl	8000b24 <__addsf3>
 800152c:	4603      	mov	r3, r0
 800152e:	65bb      	str	r3, [r7, #88]	; 0x58
		_2q2 = 2.0f * q2;
 8001530:	4b89      	ldr	r3, [pc, #548]	; (8001758 <MadgwickAHRSupdate+0x620>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4619      	mov	r1, r3
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff faf4 	bl	8000b24 <__addsf3>
 800153c:	4603      	mov	r3, r0
 800153e:	657b      	str	r3, [r7, #84]	; 0x54
		_2q3 = 2.0f * q3;
 8001540:	4b86      	ldr	r3, [pc, #536]	; (800175c <MadgwickAHRSupdate+0x624>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4619      	mov	r1, r3
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff faec 	bl	8000b24 <__addsf3>
 800154c:	4603      	mov	r3, r0
 800154e:	653b      	str	r3, [r7, #80]	; 0x50
		_2q0q2 = 2.0f * q0 * q2;
 8001550:	4b80      	ldr	r3, [pc, #512]	; (8001754 <MadgwickAHRSupdate+0x61c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4619      	mov	r1, r3
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff fae4 	bl	8000b24 <__addsf3>
 800155c:	4603      	mov	r3, r0
 800155e:	461a      	mov	r2, r3
 8001560:	4b7d      	ldr	r3, [pc, #500]	; (8001758 <MadgwickAHRSupdate+0x620>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4619      	mov	r1, r3
 8001566:	4610      	mov	r0, r2
 8001568:	f7ff fbe4 	bl	8000d34 <__aeabi_fmul>
 800156c:	4603      	mov	r3, r0
 800156e:	64fb      	str	r3, [r7, #76]	; 0x4c
		_2q2q3 = 2.0f * q2 * q3;
 8001570:	4b79      	ldr	r3, [pc, #484]	; (8001758 <MadgwickAHRSupdate+0x620>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4619      	mov	r1, r3
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fad4 	bl	8000b24 <__addsf3>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	4b76      	ldr	r3, [pc, #472]	; (800175c <MadgwickAHRSupdate+0x624>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	4610      	mov	r0, r2
 8001588:	f7ff fbd4 	bl	8000d34 <__aeabi_fmul>
 800158c:	4603      	mov	r3, r0
 800158e:	64bb      	str	r3, [r7, #72]	; 0x48
		q0q0 = q0 * q0;
 8001590:	4b70      	ldr	r3, [pc, #448]	; (8001754 <MadgwickAHRSupdate+0x61c>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	4b6f      	ldr	r3, [pc, #444]	; (8001754 <MadgwickAHRSupdate+0x61c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4619      	mov	r1, r3
 800159a:	4610      	mov	r0, r2
 800159c:	f7ff fbca 	bl	8000d34 <__aeabi_fmul>
 80015a0:	4603      	mov	r3, r0
 80015a2:	647b      	str	r3, [r7, #68]	; 0x44
		q0q1 = q0 * q1;
 80015a4:	4b6b      	ldr	r3, [pc, #428]	; (8001754 <MadgwickAHRSupdate+0x61c>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b69      	ldr	r3, [pc, #420]	; (8001750 <MadgwickAHRSupdate+0x618>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	4610      	mov	r0, r2
 80015b0:	f7ff fbc0 	bl	8000d34 <__aeabi_fmul>
 80015b4:	4603      	mov	r3, r0
 80015b6:	643b      	str	r3, [r7, #64]	; 0x40
		q0q2 = q0 * q2;
 80015b8:	4b66      	ldr	r3, [pc, #408]	; (8001754 <MadgwickAHRSupdate+0x61c>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b66      	ldr	r3, [pc, #408]	; (8001758 <MadgwickAHRSupdate+0x620>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4619      	mov	r1, r3
 80015c2:	4610      	mov	r0, r2
 80015c4:	f7ff fbb6 	bl	8000d34 <__aeabi_fmul>
 80015c8:	4603      	mov	r3, r0
 80015ca:	63fb      	str	r3, [r7, #60]	; 0x3c
		q0q3 = q0 * q3;
 80015cc:	4b61      	ldr	r3, [pc, #388]	; (8001754 <MadgwickAHRSupdate+0x61c>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b62      	ldr	r3, [pc, #392]	; (800175c <MadgwickAHRSupdate+0x624>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	4610      	mov	r0, r2
 80015d8:	f7ff fbac 	bl	8000d34 <__aeabi_fmul>
 80015dc:	4603      	mov	r3, r0
 80015de:	63bb      	str	r3, [r7, #56]	; 0x38
		q1q1 = q1 * q1;
 80015e0:	4b5b      	ldr	r3, [pc, #364]	; (8001750 <MadgwickAHRSupdate+0x618>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b5a      	ldr	r3, [pc, #360]	; (8001750 <MadgwickAHRSupdate+0x618>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	4610      	mov	r0, r2
 80015ec:	f7ff fba2 	bl	8000d34 <__aeabi_fmul>
 80015f0:	4603      	mov	r3, r0
 80015f2:	637b      	str	r3, [r7, #52]	; 0x34
		q1q2 = q1 * q2;
 80015f4:	4b56      	ldr	r3, [pc, #344]	; (8001750 <MadgwickAHRSupdate+0x618>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b57      	ldr	r3, [pc, #348]	; (8001758 <MadgwickAHRSupdate+0x620>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	4610      	mov	r0, r2
 8001600:	f7ff fb98 	bl	8000d34 <__aeabi_fmul>
 8001604:	4603      	mov	r3, r0
 8001606:	633b      	str	r3, [r7, #48]	; 0x30
		q1q3 = q1 * q3;
 8001608:	4b51      	ldr	r3, [pc, #324]	; (8001750 <MadgwickAHRSupdate+0x618>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	4b53      	ldr	r3, [pc, #332]	; (800175c <MadgwickAHRSupdate+0x624>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4619      	mov	r1, r3
 8001612:	4610      	mov	r0, r2
 8001614:	f7ff fb8e 	bl	8000d34 <__aeabi_fmul>
 8001618:	4603      	mov	r3, r0
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
		q2q2 = q2 * q2;
 800161c:	4b4e      	ldr	r3, [pc, #312]	; (8001758 <MadgwickAHRSupdate+0x620>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b4d      	ldr	r3, [pc, #308]	; (8001758 <MadgwickAHRSupdate+0x620>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4619      	mov	r1, r3
 8001626:	4610      	mov	r0, r2
 8001628:	f7ff fb84 	bl	8000d34 <__aeabi_fmul>
 800162c:	4603      	mov	r3, r0
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
		q2q3 = q2 * q3;
 8001630:	4b49      	ldr	r3, [pc, #292]	; (8001758 <MadgwickAHRSupdate+0x620>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b49      	ldr	r3, [pc, #292]	; (800175c <MadgwickAHRSupdate+0x624>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4619      	mov	r1, r3
 800163a:	4610      	mov	r0, r2
 800163c:	f7ff fb7a 	bl	8000d34 <__aeabi_fmul>
 8001640:	4603      	mov	r3, r0
 8001642:	627b      	str	r3, [r7, #36]	; 0x24
		q3q3 = q3 * q3;
 8001644:	4b45      	ldr	r3, [pc, #276]	; (800175c <MadgwickAHRSupdate+0x624>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b44      	ldr	r3, [pc, #272]	; (800175c <MadgwickAHRSupdate+0x624>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4619      	mov	r1, r3
 800164e:	4610      	mov	r0, r2
 8001650:	f7ff fb70 	bl	8000d34 <__aeabi_fmul>
 8001654:	4603      	mov	r3, r0
 8001656:	623b      	str	r3, [r7, #32]

		// Reference direction of Earth's magnetic field
		hx = mx * q0q0 - _2q0my * q3 + _2q0mz * q2 + mx * q1q1 + _2q1 * my * q2 + _2q1 * mz * q3 - mx * q2q2 - mx * q3q3;
 8001658:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800165a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800165e:	f7ff fb69 	bl	8000d34 <__aeabi_fmul>
 8001662:	4603      	mov	r3, r0
 8001664:	461c      	mov	r4, r3
 8001666:	4b3d      	ldr	r3, [pc, #244]	; (800175c <MadgwickAHRSupdate+0x624>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fb61 	bl	8000d34 <__aeabi_fmul>
 8001672:	4603      	mov	r3, r0
 8001674:	4619      	mov	r1, r3
 8001676:	4620      	mov	r0, r4
 8001678:	f7ff fa52 	bl	8000b20 <__aeabi_fsub>
 800167c:	4603      	mov	r3, r0
 800167e:	461c      	mov	r4, r3
 8001680:	4b35      	ldr	r3, [pc, #212]	; (8001758 <MadgwickAHRSupdate+0x620>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff fb54 	bl	8000d34 <__aeabi_fmul>
 800168c:	4603      	mov	r3, r0
 800168e:	4619      	mov	r1, r3
 8001690:	4620      	mov	r0, r4
 8001692:	f7ff fa47 	bl	8000b24 <__addsf3>
 8001696:	4603      	mov	r3, r0
 8001698:	461c      	mov	r4, r3
 800169a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800169c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 80016a0:	f7ff fb48 	bl	8000d34 <__aeabi_fmul>
 80016a4:	4603      	mov	r3, r0
 80016a6:	4619      	mov	r1, r3
 80016a8:	4620      	mov	r0, r4
 80016aa:	f7ff fa3b 	bl	8000b24 <__addsf3>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461c      	mov	r4, r3
 80016b2:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80016b6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80016b8:	f7ff fb3c 	bl	8000d34 <__aeabi_fmul>
 80016bc:	4603      	mov	r3, r0
 80016be:	461a      	mov	r2, r3
 80016c0:	4b25      	ldr	r3, [pc, #148]	; (8001758 <MadgwickAHRSupdate+0x620>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4619      	mov	r1, r3
 80016c6:	4610      	mov	r0, r2
 80016c8:	f7ff fb34 	bl	8000d34 <__aeabi_fmul>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4619      	mov	r1, r3
 80016d0:	4620      	mov	r0, r4
 80016d2:	f7ff fa27 	bl	8000b24 <__addsf3>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461c      	mov	r4, r3
 80016da:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80016de:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80016e0:	f7ff fb28 	bl	8000d34 <__aeabi_fmul>
 80016e4:	4603      	mov	r3, r0
 80016e6:	461a      	mov	r2, r3
 80016e8:	4b1c      	ldr	r3, [pc, #112]	; (800175c <MadgwickAHRSupdate+0x624>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4619      	mov	r1, r3
 80016ee:	4610      	mov	r0, r2
 80016f0:	f7ff fb20 	bl	8000d34 <__aeabi_fmul>
 80016f4:	4603      	mov	r3, r0
 80016f6:	4619      	mov	r1, r3
 80016f8:	4620      	mov	r0, r4
 80016fa:	f7ff fa13 	bl	8000b24 <__addsf3>
 80016fe:	4603      	mov	r3, r0
 8001700:	461c      	mov	r4, r3
 8001702:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001704:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001708:	f7ff fb14 	bl	8000d34 <__aeabi_fmul>
 800170c:	4603      	mov	r3, r0
 800170e:	4619      	mov	r1, r3
 8001710:	4620      	mov	r0, r4
 8001712:	f7ff fa05 	bl	8000b20 <__aeabi_fsub>
 8001716:	4603      	mov	r3, r0
 8001718:	461c      	mov	r4, r3
 800171a:	6a39      	ldr	r1, [r7, #32]
 800171c:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8001720:	f7ff fb08 	bl	8000d34 <__aeabi_fmul>
 8001724:	4603      	mov	r3, r0
 8001726:	4619      	mov	r1, r3
 8001728:	4620      	mov	r0, r4
 800172a:	f7ff f9f9 	bl	8000b20 <__aeabi_fsub>
 800172e:	4603      	mov	r3, r0
 8001730:	677b      	str	r3, [r7, #116]	; 0x74
		hy = _2q0mx * q3 + my * q0q0 - _2q0mz * q1 + _2q1mx * q2 - my * q1q1 + my * q2q2 + _2q2 * mz * q3 - my * q3q3;
 8001732:	4b0a      	ldr	r3, [pc, #40]	; (800175c <MadgwickAHRSupdate+0x624>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fafb 	bl	8000d34 <__aeabi_fmul>
 800173e:	4603      	mov	r3, r0
 8001740:	461c      	mov	r4, r3
 8001742:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001744:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8001748:	f7ff faf4 	bl	8000d34 <__aeabi_fmul>
 800174c:	4603      	mov	r3, r0
 800174e:	e007      	b.n	8001760 <MadgwickAHRSupdate+0x628>
 8001750:	200000d4 	.word	0x200000d4
 8001754:	20000000 	.word	0x20000000
 8001758:	200000d8 	.word	0x200000d8
 800175c:	200000dc 	.word	0x200000dc
 8001760:	4619      	mov	r1, r3
 8001762:	4620      	mov	r0, r4
 8001764:	f7ff f9de 	bl	8000b24 <__addsf3>
 8001768:	4603      	mov	r3, r0
 800176a:	461c      	mov	r4, r3
 800176c:	4ba2      	ldr	r3, [pc, #648]	; (80019f8 <MadgwickAHRSupdate+0x8c0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff fade 	bl	8000d34 <__aeabi_fmul>
 8001778:	4603      	mov	r3, r0
 800177a:	4619      	mov	r1, r3
 800177c:	4620      	mov	r0, r4
 800177e:	f7ff f9cf 	bl	8000b20 <__aeabi_fsub>
 8001782:	4603      	mov	r3, r0
 8001784:	461c      	mov	r4, r3
 8001786:	4b9d      	ldr	r3, [pc, #628]	; (80019fc <MadgwickAHRSupdate+0x8c4>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fad1 	bl	8000d34 <__aeabi_fmul>
 8001792:	4603      	mov	r3, r0
 8001794:	4619      	mov	r1, r3
 8001796:	4620      	mov	r0, r4
 8001798:	f7ff f9c4 	bl	8000b24 <__addsf3>
 800179c:	4603      	mov	r3, r0
 800179e:	461c      	mov	r4, r3
 80017a0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80017a2:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80017a6:	f7ff fac5 	bl	8000d34 <__aeabi_fmul>
 80017aa:	4603      	mov	r3, r0
 80017ac:	4619      	mov	r1, r3
 80017ae:	4620      	mov	r0, r4
 80017b0:	f7ff f9b6 	bl	8000b20 <__aeabi_fsub>
 80017b4:	4603      	mov	r3, r0
 80017b6:	461c      	mov	r4, r3
 80017b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017ba:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80017be:	f7ff fab9 	bl	8000d34 <__aeabi_fmul>
 80017c2:	4603      	mov	r3, r0
 80017c4:	4619      	mov	r1, r3
 80017c6:	4620      	mov	r0, r4
 80017c8:	f7ff f9ac 	bl	8000b24 <__addsf3>
 80017cc:	4603      	mov	r3, r0
 80017ce:	461c      	mov	r4, r3
 80017d0:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80017d4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80017d6:	f7ff faad 	bl	8000d34 <__aeabi_fmul>
 80017da:	4603      	mov	r3, r0
 80017dc:	461a      	mov	r2, r3
 80017de:	4b88      	ldr	r3, [pc, #544]	; (8001a00 <MadgwickAHRSupdate+0x8c8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4619      	mov	r1, r3
 80017e4:	4610      	mov	r0, r2
 80017e6:	f7ff faa5 	bl	8000d34 <__aeabi_fmul>
 80017ea:	4603      	mov	r3, r0
 80017ec:	4619      	mov	r1, r3
 80017ee:	4620      	mov	r0, r4
 80017f0:	f7ff f998 	bl	8000b24 <__addsf3>
 80017f4:	4603      	mov	r3, r0
 80017f6:	461c      	mov	r4, r3
 80017f8:	6a39      	ldr	r1, [r7, #32]
 80017fa:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80017fe:	f7ff fa99 	bl	8000d34 <__aeabi_fmul>
 8001802:	4603      	mov	r3, r0
 8001804:	4619      	mov	r1, r3
 8001806:	4620      	mov	r0, r4
 8001808:	f7ff f98a 	bl	8000b20 <__aeabi_fsub>
 800180c:	4603      	mov	r3, r0
 800180e:	673b      	str	r3, [r7, #112]	; 0x70
		_2bx = sqrt(hx * hx + hy * hy);
 8001810:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8001812:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001814:	f7ff fa8e 	bl	8000d34 <__aeabi_fmul>
 8001818:	4603      	mov	r3, r0
 800181a:	461c      	mov	r4, r3
 800181c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800181e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001820:	f7ff fa88 	bl	8000d34 <__aeabi_fmul>
 8001824:	4603      	mov	r3, r0
 8001826:	4619      	mov	r1, r3
 8001828:	4620      	mov	r0, r4
 800182a:	f7ff f97b 	bl	8000b24 <__addsf3>
 800182e:	4603      	mov	r3, r0
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe fdf1 	bl	8000418 <__aeabi_f2d>
 8001836:	4603      	mov	r3, r0
 8001838:	460c      	mov	r4, r1
 800183a:	4618      	mov	r0, r3
 800183c:	4621      	mov	r1, r4
 800183e:	f009 fe21 	bl	800b484 <sqrt>
 8001842:	4603      	mov	r3, r0
 8001844:	460c      	mov	r4, r1
 8001846:	4618      	mov	r0, r3
 8001848:	4621      	mov	r1, r4
 800184a:	f7ff f915 	bl	8000a78 <__aeabi_d2f>
 800184e:	4603      	mov	r3, r0
 8001850:	61fb      	str	r3, [r7, #28]
		_2bz = -_2q0mx * q2 + _2q0my * q1 + mz * q0q0 + _2q1mx * q3 - mz * q1q1 + _2q2 * my * q3 - mz * q2q2 + mz * q3q3;
 8001852:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001854:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001858:	4b68      	ldr	r3, [pc, #416]	; (80019fc <MadgwickAHRSupdate+0x8c4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4619      	mov	r1, r3
 800185e:	4610      	mov	r0, r2
 8001860:	f7ff fa68 	bl	8000d34 <__aeabi_fmul>
 8001864:	4603      	mov	r3, r0
 8001866:	461c      	mov	r4, r3
 8001868:	4b63      	ldr	r3, [pc, #396]	; (80019f8 <MadgwickAHRSupdate+0x8c0>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff fa60 	bl	8000d34 <__aeabi_fmul>
 8001874:	4603      	mov	r3, r0
 8001876:	4619      	mov	r1, r3
 8001878:	4620      	mov	r0, r4
 800187a:	f7ff f953 	bl	8000b24 <__addsf3>
 800187e:	4603      	mov	r3, r0
 8001880:	461c      	mov	r4, r3
 8001882:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001884:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8001888:	f7ff fa54 	bl	8000d34 <__aeabi_fmul>
 800188c:	4603      	mov	r3, r0
 800188e:	4619      	mov	r1, r3
 8001890:	4620      	mov	r0, r4
 8001892:	f7ff f947 	bl	8000b24 <__addsf3>
 8001896:	4603      	mov	r3, r0
 8001898:	461c      	mov	r4, r3
 800189a:	4b59      	ldr	r3, [pc, #356]	; (8001a00 <MadgwickAHRSupdate+0x8c8>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fa47 	bl	8000d34 <__aeabi_fmul>
 80018a6:	4603      	mov	r3, r0
 80018a8:	4619      	mov	r1, r3
 80018aa:	4620      	mov	r0, r4
 80018ac:	f7ff f93a 	bl	8000b24 <__addsf3>
 80018b0:	4603      	mov	r3, r0
 80018b2:	461c      	mov	r4, r3
 80018b4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80018b6:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80018ba:	f7ff fa3b 	bl	8000d34 <__aeabi_fmul>
 80018be:	4603      	mov	r3, r0
 80018c0:	4619      	mov	r1, r3
 80018c2:	4620      	mov	r0, r4
 80018c4:	f7ff f92c 	bl	8000b20 <__aeabi_fsub>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461c      	mov	r4, r3
 80018cc:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 80018d0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80018d2:	f7ff fa2f 	bl	8000d34 <__aeabi_fmul>
 80018d6:	4603      	mov	r3, r0
 80018d8:	461a      	mov	r2, r3
 80018da:	4b49      	ldr	r3, [pc, #292]	; (8001a00 <MadgwickAHRSupdate+0x8c8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4619      	mov	r1, r3
 80018e0:	4610      	mov	r0, r2
 80018e2:	f7ff fa27 	bl	8000d34 <__aeabi_fmul>
 80018e6:	4603      	mov	r3, r0
 80018e8:	4619      	mov	r1, r3
 80018ea:	4620      	mov	r0, r4
 80018ec:	f7ff f91a 	bl	8000b24 <__addsf3>
 80018f0:	4603      	mov	r3, r0
 80018f2:	461c      	mov	r4, r3
 80018f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018f6:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 80018fa:	f7ff fa1b 	bl	8000d34 <__aeabi_fmul>
 80018fe:	4603      	mov	r3, r0
 8001900:	4619      	mov	r1, r3
 8001902:	4620      	mov	r0, r4
 8001904:	f7ff f90c 	bl	8000b20 <__aeabi_fsub>
 8001908:	4603      	mov	r3, r0
 800190a:	461c      	mov	r4, r3
 800190c:	6a39      	ldr	r1, [r7, #32]
 800190e:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8001912:	f7ff fa0f 	bl	8000d34 <__aeabi_fmul>
 8001916:	4603      	mov	r3, r0
 8001918:	4619      	mov	r1, r3
 800191a:	4620      	mov	r0, r4
 800191c:	f7ff f902 	bl	8000b24 <__addsf3>
 8001920:	4603      	mov	r3, r0
 8001922:	61bb      	str	r3, [r7, #24]
		_4bx = 2.0f * _2bx;
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	4619      	mov	r1, r3
 8001928:	4618      	mov	r0, r3
 800192a:	f7ff f8fb 	bl	8000b24 <__addsf3>
 800192e:	4603      	mov	r3, r0
 8001930:	617b      	str	r3, [r7, #20]
		_4bz = 2.0f * _2bz;
 8001932:	69bb      	ldr	r3, [r7, #24]
 8001934:	4619      	mov	r1, r3
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff f8f4 	bl	8000b24 <__addsf3>
 800193c:	4603      	mov	r3, r0
 800193e:	613b      	str	r3, [r7, #16]

		// Gradient decent algorithm corrective step
		s0 = -_2q2 * (2.0f * q1q3 - _2q0q2 - ax) + _2q1 * (2.0f * q0q1 + _2q2q3 - ay) - _2bz * q2 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q3 + _2bz * q1) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q2 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001942:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001948:	4619      	mov	r1, r3
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff f8ea 	bl	8000b24 <__addsf3>
 8001950:	4603      	mov	r3, r0
 8001952:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff f8e3 	bl	8000b20 <__aeabi_fsub>
 800195a:	4603      	mov	r3, r0
 800195c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff f8dd 	bl	8000b20 <__aeabi_fsub>
 8001966:	4603      	mov	r3, r0
 8001968:	4619      	mov	r1, r3
 800196a:	4620      	mov	r0, r4
 800196c:	f7ff f9e2 	bl	8000d34 <__aeabi_fmul>
 8001970:	4603      	mov	r3, r0
 8001972:	461c      	mov	r4, r3
 8001974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001976:	4619      	mov	r1, r3
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff f8d3 	bl	8000b24 <__addsf3>
 800197e:	4603      	mov	r3, r0
 8001980:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff f8ce 	bl	8000b24 <__addsf3>
 8001988:	4603      	mov	r3, r0
 800198a:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff f8c6 	bl	8000b20 <__aeabi_fsub>
 8001994:	4603      	mov	r3, r0
 8001996:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff f9cb 	bl	8000d34 <__aeabi_fmul>
 800199e:	4603      	mov	r3, r0
 80019a0:	4619      	mov	r1, r3
 80019a2:	4620      	mov	r0, r4
 80019a4:	f7ff f8be 	bl	8000b24 <__addsf3>
 80019a8:	4603      	mov	r3, r0
 80019aa:	461c      	mov	r4, r3
 80019ac:	4b13      	ldr	r3, [pc, #76]	; (80019fc <MadgwickAHRSupdate+0x8c4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	69b9      	ldr	r1, [r7, #24]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff f9be 	bl	8000d34 <__aeabi_fmul>
 80019b8:	4603      	mov	r3, r0
 80019ba:	461d      	mov	r5, r3
 80019bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80019be:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80019c2:	f7ff f8ad 	bl	8000b20 <__aeabi_fsub>
 80019c6:	4603      	mov	r3, r0
 80019c8:	6a39      	ldr	r1, [r7, #32]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff f8a8 	bl	8000b20 <__aeabi_fsub>
 80019d0:	4603      	mov	r3, r0
 80019d2:	69f9      	ldr	r1, [r7, #28]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff f9ad 	bl	8000d34 <__aeabi_fmul>
 80019da:	4603      	mov	r3, r0
 80019dc:	461e      	mov	r6, r3
 80019de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80019e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80019e2:	f7ff f89d 	bl	8000b20 <__aeabi_fsub>
 80019e6:	4603      	mov	r3, r0
 80019e8:	69b9      	ldr	r1, [r7, #24]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff f9a2 	bl	8000d34 <__aeabi_fmul>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4619      	mov	r1, r3
 80019f4:	e006      	b.n	8001a04 <MadgwickAHRSupdate+0x8cc>
 80019f6:	bf00      	nop
 80019f8:	200000d4 	.word	0x200000d4
 80019fc:	200000d8 	.word	0x200000d8
 8001a00:	200000dc 	.word	0x200000dc
 8001a04:	4630      	mov	r0, r6
 8001a06:	f7ff f88d 	bl	8000b24 <__addsf3>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff f885 	bl	8000b20 <__aeabi_fsub>
 8001a16:	4603      	mov	r3, r0
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4628      	mov	r0, r5
 8001a1c:	f7ff f98a 	bl	8000d34 <__aeabi_fmul>
 8001a20:	4603      	mov	r3, r0
 8001a22:	4619      	mov	r1, r3
 8001a24:	4620      	mov	r0, r4
 8001a26:	f7ff f87b 	bl	8000b20 <__aeabi_fsub>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461c      	mov	r4, r3
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001a34:	4b9f      	ldr	r3, [pc, #636]	; (8001cb4 <MadgwickAHRSupdate+0xb7c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	f7ff f97a 	bl	8000d34 <__aeabi_fmul>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461d      	mov	r5, r3
 8001a44:	4b9c      	ldr	r3, [pc, #624]	; (8001cb8 <MadgwickAHRSupdate+0xb80>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	69b9      	ldr	r1, [r7, #24]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f7ff f972 	bl	8000d34 <__aeabi_fmul>
 8001a50:	4603      	mov	r3, r0
 8001a52:	4619      	mov	r1, r3
 8001a54:	4628      	mov	r0, r5
 8001a56:	f7ff f865 	bl	8000b24 <__addsf3>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	461d      	mov	r5, r3
 8001a5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001a62:	f7ff f85d 	bl	8000b20 <__aeabi_fsub>
 8001a66:	4603      	mov	r3, r0
 8001a68:	69f9      	ldr	r1, [r7, #28]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff f962 	bl	8000d34 <__aeabi_fmul>
 8001a70:	4603      	mov	r3, r0
 8001a72:	461e      	mov	r6, r3
 8001a74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a76:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001a78:	f7ff f854 	bl	8000b24 <__addsf3>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	69b9      	ldr	r1, [r7, #24]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7ff f957 	bl	8000d34 <__aeabi_fmul>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4630      	mov	r0, r6
 8001a8c:	f7ff f84a 	bl	8000b24 <__addsf3>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff f842 	bl	8000b20 <__aeabi_fsub>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4628      	mov	r0, r5
 8001aa2:	f7ff f947 	bl	8000d34 <__aeabi_fmul>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4620      	mov	r0, r4
 8001aac:	f7ff f83a 	bl	8000b24 <__addsf3>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	461c      	mov	r4, r3
 8001ab4:	4b81      	ldr	r3, [pc, #516]	; (8001cbc <MadgwickAHRSupdate+0xb84>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	69f9      	ldr	r1, [r7, #28]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff f93a 	bl	8000d34 <__aeabi_fmul>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	461d      	mov	r5, r3
 8001ac4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ac6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001ac8:	f7ff f82c 	bl	8000b24 <__addsf3>
 8001acc:	4603      	mov	r3, r0
 8001ace:	69f9      	ldr	r1, [r7, #28]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff f92f 	bl	8000d34 <__aeabi_fmul>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	461e      	mov	r6, r3
 8001ada:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001adc:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001ae0:	f7ff f81e 	bl	8000b20 <__aeabi_fsub>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff f819 	bl	8000b20 <__aeabi_fsub>
 8001aee:	4603      	mov	r3, r0
 8001af0:	69b9      	ldr	r1, [r7, #24]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff f91e 	bl	8000d34 <__aeabi_fmul>
 8001af8:	4603      	mov	r3, r0
 8001afa:	4619      	mov	r1, r3
 8001afc:	4630      	mov	r0, r6
 8001afe:	f7ff f811 	bl	8000b24 <__addsf3>
 8001b02:	4603      	mov	r3, r0
 8001b04:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff f809 	bl	8000b20 <__aeabi_fsub>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	4619      	mov	r1, r3
 8001b12:	4628      	mov	r0, r5
 8001b14:	f7ff f90e 	bl	8000d34 <__aeabi_fmul>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4620      	mov	r0, r4
 8001b1e:	f7ff f801 	bl	8000b24 <__addsf3>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		s1 = _2q3 * (2.0f * q1q3 - _2q0q2 - ax) + _2q0 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q1 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + _2bz * q3 * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q2 + _2bz * q0) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q3 - _4bz * q1) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fff9 	bl	8000b24 <__addsf3>
 8001b32:	4603      	mov	r3, r0
 8001b34:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fff2 	bl	8000b20 <__aeabi_fsub>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7fe ffec 	bl	8000b20 <__aeabi_fsub>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff f8f1 	bl	8000d34 <__aeabi_fmul>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461c      	mov	r4, r3
 8001b56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b58:	4619      	mov	r1, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe ffe2 	bl	8000b24 <__addsf3>
 8001b60:	4603      	mov	r3, r0
 8001b62:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe ffdd 	bl	8000b24 <__addsf3>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe ffd5 	bl	8000b20 <__aeabi_fsub>
 8001b76:	4603      	mov	r3, r0
 8001b78:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff f8da 	bl	8000d34 <__aeabi_fmul>
 8001b80:	4603      	mov	r3, r0
 8001b82:	4619      	mov	r1, r3
 8001b84:	4620      	mov	r0, r4
 8001b86:	f7fe ffcd 	bl	8000b24 <__addsf3>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	461c      	mov	r4, r3
 8001b8e:	4b4a      	ldr	r3, [pc, #296]	; (8001cb8 <MadgwickAHRSupdate+0xb80>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff f8cc 	bl	8000d34 <__aeabi_fmul>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	461d      	mov	r5, r3
 8001ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe ffbd 	bl	8000b24 <__addsf3>
 8001baa:	4603      	mov	r3, r0
 8001bac:	4619      	mov	r1, r3
 8001bae:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001bb2:	f7fe ffb5 	bl	8000b20 <__aeabi_fsub>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	461e      	mov	r6, r3
 8001bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe ffb0 	bl	8000b24 <__addsf3>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4630      	mov	r0, r6
 8001bca:	f7fe ffa9 	bl	8000b20 <__aeabi_fsub>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe ffa3 	bl	8000b20 <__aeabi_fsub>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4628      	mov	r0, r5
 8001be0:	f7ff f8a8 	bl	8000d34 <__aeabi_fmul>
 8001be4:	4603      	mov	r3, r0
 8001be6:	4619      	mov	r1, r3
 8001be8:	4620      	mov	r0, r4
 8001bea:	f7fe ff99 	bl	8000b20 <__aeabi_fsub>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	461c      	mov	r4, r3
 8001bf2:	4b30      	ldr	r3, [pc, #192]	; (8001cb4 <MadgwickAHRSupdate+0xb7c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	69b9      	ldr	r1, [r7, #24]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff f89b 	bl	8000d34 <__aeabi_fmul>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	461d      	mov	r5, r3
 8001c02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c04:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001c08:	f7fe ff8a 	bl	8000b20 <__aeabi_fsub>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	6a39      	ldr	r1, [r7, #32]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe ff85 	bl	8000b20 <__aeabi_fsub>
 8001c16:	4603      	mov	r3, r0
 8001c18:	69f9      	ldr	r1, [r7, #28]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff f88a 	bl	8000d34 <__aeabi_fmul>
 8001c20:	4603      	mov	r3, r0
 8001c22:	461e      	mov	r6, r3
 8001c24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001c26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c28:	f7fe ff7a 	bl	8000b20 <__aeabi_fsub>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	69b9      	ldr	r1, [r7, #24]
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff f87f 	bl	8000d34 <__aeabi_fmul>
 8001c36:	4603      	mov	r3, r0
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4630      	mov	r0, r6
 8001c3c:	f7fe ff72 	bl	8000b24 <__addsf3>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe ff6a 	bl	8000b20 <__aeabi_fsub>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4628      	mov	r0, r5
 8001c52:	f7ff f86f 	bl	8000d34 <__aeabi_fmul>
 8001c56:	4603      	mov	r3, r0
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4620      	mov	r0, r4
 8001c5c:	f7fe ff62 	bl	8000b24 <__addsf3>
 8001c60:	4603      	mov	r3, r0
 8001c62:	461c      	mov	r4, r3
 8001c64:	4b15      	ldr	r3, [pc, #84]	; (8001cbc <MadgwickAHRSupdate+0xb84>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	69f9      	ldr	r1, [r7, #28]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff f862 	bl	8000d34 <__aeabi_fmul>
 8001c70:	4603      	mov	r3, r0
 8001c72:	461d      	mov	r5, r3
 8001c74:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <MadgwickAHRSupdate+0xb88>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	69b9      	ldr	r1, [r7, #24]
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff f85a 	bl	8000d34 <__aeabi_fmul>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4619      	mov	r1, r3
 8001c84:	4628      	mov	r0, r5
 8001c86:	f7fe ff4d 	bl	8000b24 <__addsf3>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	461d      	mov	r5, r3
 8001c8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001c90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001c92:	f7fe ff45 	bl	8000b20 <__aeabi_fsub>
 8001c96:	4603      	mov	r3, r0
 8001c98:	69f9      	ldr	r1, [r7, #28]
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff f84a 	bl	8000d34 <__aeabi_fmul>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	461e      	mov	r6, r3
 8001ca4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ca6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001ca8:	f7fe ff3c 	bl	8000b24 <__addsf3>
 8001cac:	4603      	mov	r3, r0
 8001cae:	69b9      	ldr	r1, [r7, #24]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	e007      	b.n	8001cc4 <MadgwickAHRSupdate+0xb8c>
 8001cb4:	200000dc 	.word	0x200000dc
 8001cb8:	200000d4 	.word	0x200000d4
 8001cbc:	200000d8 	.word	0x200000d8
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	f7ff f836 	bl	8000d34 <__aeabi_fmul>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	4619      	mov	r1, r3
 8001ccc:	4630      	mov	r0, r6
 8001cce:	f7fe ff29 	bl	8000b24 <__addsf3>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe ff21 	bl	8000b20 <__aeabi_fsub>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4628      	mov	r0, r5
 8001ce4:	f7ff f826 	bl	8000d34 <__aeabi_fmul>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4619      	mov	r1, r3
 8001cec:	4620      	mov	r0, r4
 8001cee:	f7fe ff19 	bl	8000b24 <__addsf3>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	461c      	mov	r4, r3
 8001cf6:	4ba0      	ldr	r3, [pc, #640]	; (8001f78 <MadgwickAHRSupdate+0xe40>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	69f9      	ldr	r1, [r7, #28]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff f819 	bl	8000d34 <__aeabi_fmul>
 8001d02:	4603      	mov	r3, r0
 8001d04:	461d      	mov	r5, r3
 8001d06:	4b9d      	ldr	r3, [pc, #628]	; (8001f7c <MadgwickAHRSupdate+0xe44>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6939      	ldr	r1, [r7, #16]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f7ff f811 	bl	8000d34 <__aeabi_fmul>
 8001d12:	4603      	mov	r3, r0
 8001d14:	4619      	mov	r1, r3
 8001d16:	4628      	mov	r0, r5
 8001d18:	f7fe ff02 	bl	8000b20 <__aeabi_fsub>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	461d      	mov	r5, r3
 8001d20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001d22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001d24:	f7fe fefe 	bl	8000b24 <__addsf3>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	69f9      	ldr	r1, [r7, #28]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff f801 	bl	8000d34 <__aeabi_fmul>
 8001d32:	4603      	mov	r3, r0
 8001d34:	461e      	mov	r6, r3
 8001d36:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001d38:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001d3c:	f7fe fef0 	bl	8000b20 <__aeabi_fsub>
 8001d40:	4603      	mov	r3, r0
 8001d42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe feeb 	bl	8000b20 <__aeabi_fsub>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	69b9      	ldr	r1, [r7, #24]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7fe fff0 	bl	8000d34 <__aeabi_fmul>
 8001d54:	4603      	mov	r3, r0
 8001d56:	4619      	mov	r1, r3
 8001d58:	4630      	mov	r0, r6
 8001d5a:	f7fe fee3 	bl	8000b24 <__addsf3>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8001d64:	4618      	mov	r0, r3
 8001d66:	f7fe fedb 	bl	8000b20 <__aeabi_fsub>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4628      	mov	r0, r5
 8001d70:	f7fe ffe0 	bl	8000d34 <__aeabi_fmul>
 8001d74:	4603      	mov	r3, r0
 8001d76:	4619      	mov	r1, r3
 8001d78:	4620      	mov	r0, r4
 8001d7a:	f7fe fed3 	bl	8000b24 <__addsf3>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		s2 = -_2q0 * (2.0f * q1q3 - _2q0q2 - ax) + _2q3 * (2.0f * q0q1 + _2q2q3 - ay) - 4.0f * q2 * (1 - 2.0f * q1q1 - 2.0f * q2q2 - az) + (-_4bx * q2 - _2bz * q0) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (_2bx * q1 + _2bz * q3) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + (_2bx * q0 - _4bz * q2) * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8001d84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d86:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8001d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fec8 	bl	8000b24 <__addsf3>
 8001d94:	4603      	mov	r3, r0
 8001d96:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fec1 	bl	8000b20 <__aeabi_fsub>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7fe febb 	bl	8000b20 <__aeabi_fsub>
 8001daa:	4603      	mov	r3, r0
 8001dac:	4619      	mov	r1, r3
 8001dae:	4620      	mov	r0, r4
 8001db0:	f7fe ffc0 	bl	8000d34 <__aeabi_fmul>
 8001db4:	4603      	mov	r3, r0
 8001db6:	461c      	mov	r4, r3
 8001db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe feb1 	bl	8000b24 <__addsf3>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe feac 	bl	8000b24 <__addsf3>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7fe fea4 	bl	8000b20 <__aeabi_fsub>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7fe ffa9 	bl	8000d34 <__aeabi_fmul>
 8001de2:	4603      	mov	r3, r0
 8001de4:	4619      	mov	r1, r3
 8001de6:	4620      	mov	r0, r4
 8001de8:	f7fe fe9c 	bl	8000b24 <__addsf3>
 8001dec:	4603      	mov	r3, r0
 8001dee:	461c      	mov	r4, r3
 8001df0:	4b63      	ldr	r3, [pc, #396]	; (8001f80 <MadgwickAHRSupdate+0xe48>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe ff9b 	bl	8000d34 <__aeabi_fmul>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	461d      	mov	r5, r3
 8001e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e04:	4619      	mov	r1, r3
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fe8c 	bl	8000b24 <__addsf3>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8001e14:	f7fe fe84 	bl	8000b20 <__aeabi_fsub>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	461e      	mov	r6, r3
 8001e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fe7f 	bl	8000b24 <__addsf3>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4619      	mov	r1, r3
 8001e2a:	4630      	mov	r0, r6
 8001e2c:	f7fe fe78 	bl	8000b20 <__aeabi_fsub>
 8001e30:	4603      	mov	r3, r0
 8001e32:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe fe72 	bl	8000b20 <__aeabi_fsub>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4628      	mov	r0, r5
 8001e42:	f7fe ff77 	bl	8000d34 <__aeabi_fmul>
 8001e46:	4603      	mov	r3, r0
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f7fe fe68 	bl	8000b20 <__aeabi_fsub>
 8001e50:	4603      	mov	r3, r0
 8001e52:	461c      	mov	r4, r3
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001e5a:	4b49      	ldr	r3, [pc, #292]	; (8001f80 <MadgwickAHRSupdate+0xe48>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4610      	mov	r0, r2
 8001e62:	f7fe ff67 	bl	8000d34 <__aeabi_fmul>
 8001e66:	4603      	mov	r3, r0
 8001e68:	461d      	mov	r5, r3
 8001e6a:	4b46      	ldr	r3, [pc, #280]	; (8001f84 <MadgwickAHRSupdate+0xe4c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	69b9      	ldr	r1, [r7, #24]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe ff5f 	bl	8000d34 <__aeabi_fmul>
 8001e76:	4603      	mov	r3, r0
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4628      	mov	r0, r5
 8001e7c:	f7fe fe50 	bl	8000b20 <__aeabi_fsub>
 8001e80:	4603      	mov	r3, r0
 8001e82:	461d      	mov	r5, r3
 8001e84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e86:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001e8a:	f7fe fe49 	bl	8000b20 <__aeabi_fsub>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	6a39      	ldr	r1, [r7, #32]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7fe fe44 	bl	8000b20 <__aeabi_fsub>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	69f9      	ldr	r1, [r7, #28]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe ff49 	bl	8000d34 <__aeabi_fmul>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	461e      	mov	r6, r3
 8001ea6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001ea8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001eaa:	f7fe fe39 	bl	8000b20 <__aeabi_fsub>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	69b9      	ldr	r1, [r7, #24]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe ff3e 	bl	8000d34 <__aeabi_fmul>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	4619      	mov	r1, r3
 8001ebc:	4630      	mov	r0, r6
 8001ebe:	f7fe fe31 	bl	8000b24 <__addsf3>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe fe29 	bl	8000b20 <__aeabi_fsub>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4628      	mov	r0, r5
 8001ed4:	f7fe ff2e 	bl	8000d34 <__aeabi_fmul>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	4619      	mov	r1, r3
 8001edc:	4620      	mov	r0, r4
 8001ede:	f7fe fe21 	bl	8000b24 <__addsf3>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	461c      	mov	r4, r3
 8001ee6:	4b25      	ldr	r3, [pc, #148]	; (8001f7c <MadgwickAHRSupdate+0xe44>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	69f9      	ldr	r1, [r7, #28]
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe ff21 	bl	8000d34 <__aeabi_fmul>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	461d      	mov	r5, r3
 8001ef6:	4b20      	ldr	r3, [pc, #128]	; (8001f78 <MadgwickAHRSupdate+0xe40>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	69b9      	ldr	r1, [r7, #24]
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe ff19 	bl	8000d34 <__aeabi_fmul>
 8001f02:	4603      	mov	r3, r0
 8001f04:	4619      	mov	r1, r3
 8001f06:	4628      	mov	r0, r5
 8001f08:	f7fe fe0c 	bl	8000b24 <__addsf3>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	461d      	mov	r5, r3
 8001f10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001f12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001f14:	f7fe fe04 	bl	8000b20 <__aeabi_fsub>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	69f9      	ldr	r1, [r7, #28]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe ff09 	bl	8000d34 <__aeabi_fmul>
 8001f22:	4603      	mov	r3, r0
 8001f24:	461e      	mov	r6, r3
 8001f26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f28:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001f2a:	f7fe fdfb 	bl	8000b24 <__addsf3>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	69b9      	ldr	r1, [r7, #24]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fefe 	bl	8000d34 <__aeabi_fmul>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	4630      	mov	r0, r6
 8001f3e:	f7fe fdf1 	bl	8000b24 <__addsf3>
 8001f42:	4603      	mov	r3, r0
 8001f44:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe fde9 	bl	8000b20 <__aeabi_fsub>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	4619      	mov	r1, r3
 8001f52:	4628      	mov	r0, r5
 8001f54:	f7fe feee 	bl	8000d34 <__aeabi_fmul>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	f7fe fde1 	bl	8000b24 <__addsf3>
 8001f62:	4603      	mov	r3, r0
 8001f64:	461c      	mov	r4, r3
 8001f66:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <MadgwickAHRSupdate+0xe4c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	69f9      	ldr	r1, [r7, #28]
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe fee1 	bl	8000d34 <__aeabi_fmul>
 8001f72:	4603      	mov	r3, r0
 8001f74:	461d      	mov	r5, r3
 8001f76:	e007      	b.n	8001f88 <MadgwickAHRSupdate+0xe50>
 8001f78:	200000dc 	.word	0x200000dc
 8001f7c:	200000d4 	.word	0x200000d4
 8001f80:	200000d8 	.word	0x200000d8
 8001f84:	20000000 	.word	0x20000000
 8001f88:	4ba2      	ldr	r3, [pc, #648]	; (8002214 <MadgwickAHRSupdate+0x10dc>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6939      	ldr	r1, [r7, #16]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7fe fed0 	bl	8000d34 <__aeabi_fmul>
 8001f94:	4603      	mov	r3, r0
 8001f96:	4619      	mov	r1, r3
 8001f98:	4628      	mov	r0, r5
 8001f9a:	f7fe fdc1 	bl	8000b20 <__aeabi_fsub>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	461d      	mov	r5, r3
 8001fa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001fa4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001fa6:	f7fe fdbd 	bl	8000b24 <__addsf3>
 8001faa:	4603      	mov	r3, r0
 8001fac:	69f9      	ldr	r1, [r7, #28]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7fe fec0 	bl	8000d34 <__aeabi_fmul>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	461e      	mov	r6, r3
 8001fb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001fba:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 8001fbe:	f7fe fdaf 	bl	8000b20 <__aeabi_fsub>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe fdaa 	bl	8000b20 <__aeabi_fsub>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	69b9      	ldr	r1, [r7, #24]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe feaf 	bl	8000d34 <__aeabi_fmul>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4630      	mov	r0, r6
 8001fdc:	f7fe fda2 	bl	8000b24 <__addsf3>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fd9a 	bl	8000b20 <__aeabi_fsub>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4619      	mov	r1, r3
 8001ff0:	4628      	mov	r0, r5
 8001ff2:	f7fe fe9f 	bl	8000d34 <__aeabi_fmul>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4620      	mov	r0, r4
 8001ffc:	f7fe fd92 	bl	8000b24 <__addsf3>
 8002000:	4603      	mov	r3, r0
 8002002:	67fb      	str	r3, [r7, #124]	; 0x7c
		s3 = _2q1 * (2.0f * q1q3 - _2q0q2 - ax) + _2q2 * (2.0f * q0q1 + _2q2q3 - ay) + (-_4bx * q3 + _2bz * q1) * (_2bx * (0.5f - q2q2 - q3q3) + _2bz * (q1q3 - q0q2) - mx) + (-_2bx * q0 + _2bz * q2) * (_2bx * (q1q2 - q0q3) + _2bz * (q0q1 + q2q3) - my) + _2bx * q1 * (_2bx * (q0q2 + q1q3) + _2bz * (0.5f - q1q1 - q2q2) - mz);
 8002004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002006:	4619      	mov	r1, r3
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe fd8b 	bl	8000b24 <__addsf3>
 800200e:	4603      	mov	r3, r0
 8002010:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002012:	4618      	mov	r0, r3
 8002014:	f7fe fd84 	bl	8000b20 <__aeabi_fsub>
 8002018:	4603      	mov	r3, r0
 800201a:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800201e:	4618      	mov	r0, r3
 8002020:	f7fe fd7e 	bl	8000b20 <__aeabi_fsub>
 8002024:	4603      	mov	r3, r0
 8002026:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe fe83 	bl	8000d34 <__aeabi_fmul>
 800202e:	4603      	mov	r3, r0
 8002030:	461c      	mov	r4, r3
 8002032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002034:	4619      	mov	r1, r3
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe fd74 	bl	8000b24 <__addsf3>
 800203c:	4603      	mov	r3, r0
 800203e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002040:	4618      	mov	r0, r3
 8002042:	f7fe fd6f 	bl	8000b24 <__addsf3>
 8002046:	4603      	mov	r3, r0
 8002048:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800204c:	4618      	mov	r0, r3
 800204e:	f7fe fd67 	bl	8000b20 <__aeabi_fsub>
 8002052:	4603      	mov	r3, r0
 8002054:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fe6c 	bl	8000d34 <__aeabi_fmul>
 800205c:	4603      	mov	r3, r0
 800205e:	4619      	mov	r1, r3
 8002060:	4620      	mov	r0, r4
 8002062:	f7fe fd5f 	bl	8000b24 <__addsf3>
 8002066:	4603      	mov	r3, r0
 8002068:	461c      	mov	r4, r3
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8002070:	4b69      	ldr	r3, [pc, #420]	; (8002218 <MadgwickAHRSupdate+0x10e0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4619      	mov	r1, r3
 8002076:	4610      	mov	r0, r2
 8002078:	f7fe fe5c 	bl	8000d34 <__aeabi_fmul>
 800207c:	4603      	mov	r3, r0
 800207e:	461d      	mov	r5, r3
 8002080:	4b66      	ldr	r3, [pc, #408]	; (800221c <MadgwickAHRSupdate+0x10e4>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	69b9      	ldr	r1, [r7, #24]
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fe54 	bl	8000d34 <__aeabi_fmul>
 800208c:	4603      	mov	r3, r0
 800208e:	4619      	mov	r1, r3
 8002090:	4628      	mov	r0, r5
 8002092:	f7fe fd47 	bl	8000b24 <__addsf3>
 8002096:	4603      	mov	r3, r0
 8002098:	461d      	mov	r5, r3
 800209a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800209c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80020a0:	f7fe fd3e 	bl	8000b20 <__aeabi_fsub>
 80020a4:	4603      	mov	r3, r0
 80020a6:	6a39      	ldr	r1, [r7, #32]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fd39 	bl	8000b20 <__aeabi_fsub>
 80020ae:	4603      	mov	r3, r0
 80020b0:	69f9      	ldr	r1, [r7, #28]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe fe3e 	bl	8000d34 <__aeabi_fmul>
 80020b8:	4603      	mov	r3, r0
 80020ba:	461e      	mov	r6, r3
 80020bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80020be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80020c0:	f7fe fd2e 	bl	8000b20 <__aeabi_fsub>
 80020c4:	4603      	mov	r3, r0
 80020c6:	69b9      	ldr	r1, [r7, #24]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe fe33 	bl	8000d34 <__aeabi_fmul>
 80020ce:	4603      	mov	r3, r0
 80020d0:	4619      	mov	r1, r3
 80020d2:	4630      	mov	r0, r6
 80020d4:	f7fe fd26 	bl	8000b24 <__addsf3>
 80020d8:	4603      	mov	r3, r0
 80020da:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe fd1e 	bl	8000b20 <__aeabi_fsub>
 80020e4:	4603      	mov	r3, r0
 80020e6:	4619      	mov	r1, r3
 80020e8:	4628      	mov	r0, r5
 80020ea:	f7fe fe23 	bl	8000d34 <__aeabi_fmul>
 80020ee:	4603      	mov	r3, r0
 80020f0:	4619      	mov	r1, r3
 80020f2:	4620      	mov	r0, r4
 80020f4:	f7fe fd16 	bl	8000b24 <__addsf3>
 80020f8:	4603      	mov	r3, r0
 80020fa:	461c      	mov	r4, r3
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8002102:	4b47      	ldr	r3, [pc, #284]	; (8002220 <MadgwickAHRSupdate+0x10e8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4619      	mov	r1, r3
 8002108:	4610      	mov	r0, r2
 800210a:	f7fe fe13 	bl	8000d34 <__aeabi_fmul>
 800210e:	4603      	mov	r3, r0
 8002110:	461d      	mov	r5, r3
 8002112:	4b40      	ldr	r3, [pc, #256]	; (8002214 <MadgwickAHRSupdate+0x10dc>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	69b9      	ldr	r1, [r7, #24]
 8002118:	4618      	mov	r0, r3
 800211a:	f7fe fe0b 	bl	8000d34 <__aeabi_fmul>
 800211e:	4603      	mov	r3, r0
 8002120:	4619      	mov	r1, r3
 8002122:	4628      	mov	r0, r5
 8002124:	f7fe fcfe 	bl	8000b24 <__addsf3>
 8002128:	4603      	mov	r3, r0
 800212a:	461d      	mov	r5, r3
 800212c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800212e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002130:	f7fe fcf6 	bl	8000b20 <__aeabi_fsub>
 8002134:	4603      	mov	r3, r0
 8002136:	69f9      	ldr	r1, [r7, #28]
 8002138:	4618      	mov	r0, r3
 800213a:	f7fe fdfb 	bl	8000d34 <__aeabi_fmul>
 800213e:	4603      	mov	r3, r0
 8002140:	461e      	mov	r6, r3
 8002142:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002144:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002146:	f7fe fced 	bl	8000b24 <__addsf3>
 800214a:	4603      	mov	r3, r0
 800214c:	69b9      	ldr	r1, [r7, #24]
 800214e:	4618      	mov	r0, r3
 8002150:	f7fe fdf0 	bl	8000d34 <__aeabi_fmul>
 8002154:	4603      	mov	r3, r0
 8002156:	4619      	mov	r1, r3
 8002158:	4630      	mov	r0, r6
 800215a:	f7fe fce3 	bl	8000b24 <__addsf3>
 800215e:	4603      	mov	r3, r0
 8002160:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8002164:	4618      	mov	r0, r3
 8002166:	f7fe fcdb 	bl	8000b20 <__aeabi_fsub>
 800216a:	4603      	mov	r3, r0
 800216c:	4619      	mov	r1, r3
 800216e:	4628      	mov	r0, r5
 8002170:	f7fe fde0 	bl	8000d34 <__aeabi_fmul>
 8002174:	4603      	mov	r3, r0
 8002176:	4619      	mov	r1, r3
 8002178:	4620      	mov	r0, r4
 800217a:	f7fe fcd3 	bl	8000b24 <__addsf3>
 800217e:	4603      	mov	r3, r0
 8002180:	461c      	mov	r4, r3
 8002182:	4b26      	ldr	r3, [pc, #152]	; (800221c <MadgwickAHRSupdate+0x10e4>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	69f9      	ldr	r1, [r7, #28]
 8002188:	4618      	mov	r0, r3
 800218a:	f7fe fdd3 	bl	8000d34 <__aeabi_fmul>
 800218e:	4603      	mov	r3, r0
 8002190:	461d      	mov	r5, r3
 8002192:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002194:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002196:	f7fe fcc5 	bl	8000b24 <__addsf3>
 800219a:	4603      	mov	r3, r0
 800219c:	69f9      	ldr	r1, [r7, #28]
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe fdc8 	bl	8000d34 <__aeabi_fmul>
 80021a4:	4603      	mov	r3, r0
 80021a6:	461e      	mov	r6, r3
 80021a8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80021aa:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80021ae:	f7fe fcb7 	bl	8000b20 <__aeabi_fsub>
 80021b2:	4603      	mov	r3, r0
 80021b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe fcb2 	bl	8000b20 <__aeabi_fsub>
 80021bc:	4603      	mov	r3, r0
 80021be:	69b9      	ldr	r1, [r7, #24]
 80021c0:	4618      	mov	r0, r3
 80021c2:	f7fe fdb7 	bl	8000d34 <__aeabi_fmul>
 80021c6:	4603      	mov	r3, r0
 80021c8:	4619      	mov	r1, r3
 80021ca:	4630      	mov	r0, r6
 80021cc:	f7fe fcaa 	bl	8000b24 <__addsf3>
 80021d0:	4603      	mov	r3, r0
 80021d2:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fe fca2 	bl	8000b20 <__aeabi_fsub>
 80021dc:	4603      	mov	r3, r0
 80021de:	4619      	mov	r1, r3
 80021e0:	4628      	mov	r0, r5
 80021e2:	f7fe fda7 	bl	8000d34 <__aeabi_fmul>
 80021e6:	4603      	mov	r3, r0
 80021e8:	4619      	mov	r1, r3
 80021ea:	4620      	mov	r0, r4
 80021ec:	f7fe fc9a 	bl	8000b24 <__addsf3>
 80021f0:	4603      	mov	r3, r0
 80021f2:	67bb      	str	r3, [r7, #120]	; 0x78
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80021f4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80021f8:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80021fc:	f7fe fd9a 	bl	8000d34 <__aeabi_fmul>
 8002200:	4603      	mov	r3, r0
 8002202:	461c      	mov	r4, r3
 8002204:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002208:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800220c:	f7fe fd92 	bl	8000d34 <__aeabi_fmul>
 8002210:	e008      	b.n	8002224 <MadgwickAHRSupdate+0x10ec>
 8002212:	bf00      	nop
 8002214:	200000d8 	.word	0x200000d8
 8002218:	200000dc 	.word	0x200000dc
 800221c:	200000d4 	.word	0x200000d4
 8002220:	20000000 	.word	0x20000000
 8002224:	4603      	mov	r3, r0
 8002226:	4619      	mov	r1, r3
 8002228:	4620      	mov	r0, r4
 800222a:	f7fe fc7b 	bl	8000b24 <__addsf3>
 800222e:	4603      	mov	r3, r0
 8002230:	461c      	mov	r4, r3
 8002232:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002234:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002236:	f7fe fd7d 	bl	8000d34 <__aeabi_fmul>
 800223a:	4603      	mov	r3, r0
 800223c:	4619      	mov	r1, r3
 800223e:	4620      	mov	r0, r4
 8002240:	f7fe fc70 	bl	8000b24 <__addsf3>
 8002244:	4603      	mov	r3, r0
 8002246:	461c      	mov	r4, r3
 8002248:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800224a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800224c:	f7fe fd72 	bl	8000d34 <__aeabi_fmul>
 8002250:	4603      	mov	r3, r0
 8002252:	4619      	mov	r1, r3
 8002254:	4620      	mov	r0, r4
 8002256:	f7fe fc65 	bl	8000b24 <__addsf3>
 800225a:	4603      	mov	r3, r0
 800225c:	4618      	mov	r0, r3
 800225e:	f000 fd07 	bl	8002c70 <invSqrt>
 8002262:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		s0 *= recipNorm;
 8002266:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800226a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800226e:	f7fe fd61 	bl	8000d34 <__aeabi_fmul>
 8002272:	4603      	mov	r3, r0
 8002274:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		s1 *= recipNorm;
 8002278:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800227c:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002280:	f7fe fd58 	bl	8000d34 <__aeabi_fmul>
 8002284:	4603      	mov	r3, r0
 8002286:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		s2 *= recipNorm;
 800228a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800228e:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8002290:	f7fe fd50 	bl	8000d34 <__aeabi_fmul>
 8002294:	4603      	mov	r3, r0
 8002296:	67fb      	str	r3, [r7, #124]	; 0x7c
		s3 *= recipNorm;
 8002298:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800229c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800229e:	f7fe fd49 	bl	8000d34 <__aeabi_fmul>
 80022a2:	4603      	mov	r3, r0
 80022a4:	67bb      	str	r3, [r7, #120]	; 0x78

		// Apply feedback step
		qDot1 -= beta * s0;
 80022a6:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f7fe fd42 	bl	8000d34 <__aeabi_fmul>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4619      	mov	r1, r3
 80022b4:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80022b8:	f7fe fc32 	bl	8000b20 <__aeabi_fsub>
 80022bc:	4603      	mov	r3, r0
 80022be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		qDot2 -= beta * s1;
 80022c2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f7fe fd34 	bl	8000d34 <__aeabi_fmul>
 80022cc:	4603      	mov	r3, r0
 80022ce:	4619      	mov	r1, r3
 80022d0:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80022d4:	f7fe fc24 	bl	8000b20 <__aeabi_fsub>
 80022d8:	4603      	mov	r3, r0
 80022da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		qDot3 -= beta * s2;
 80022de:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80022e0:	68f8      	ldr	r0, [r7, #12]
 80022e2:	f7fe fd27 	bl	8000d34 <__aeabi_fmul>
 80022e6:	4603      	mov	r3, r0
 80022e8:	4619      	mov	r1, r3
 80022ea:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80022ee:	f7fe fc17 	bl	8000b20 <__aeabi_fsub>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		qDot4 -= beta * s3;
 80022f8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f7fe fd1a 	bl	8000d34 <__aeabi_fmul>
 8002300:	4603      	mov	r3, r0
 8002302:	4619      	mov	r1, r3
 8002304:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8002308:	f7fe fc0a 	bl	8000b20 <__aeabi_fsub>
 800230c:	4603      	mov	r3, r0
 800230e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8002312:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002316:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800231a:	f7fe fdbf 	bl	8000e9c <__aeabi_fdiv>
 800231e:	4603      	mov	r3, r0
 8002320:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe fd05 	bl	8000d34 <__aeabi_fmul>
 800232a:	4603      	mov	r3, r0
 800232c:	461a      	mov	r2, r3
 800232e:	4b5e      	ldr	r3, [pc, #376]	; (80024a8 <MadgwickAHRSupdate+0x1370>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4619      	mov	r1, r3
 8002334:	4610      	mov	r0, r2
 8002336:	f7fe fbf5 	bl	8000b24 <__addsf3>
 800233a:	4603      	mov	r3, r0
 800233c:	461a      	mov	r2, r3
 800233e:	4b5a      	ldr	r3, [pc, #360]	; (80024a8 <MadgwickAHRSupdate+0x1370>)
 8002340:	601a      	str	r2, [r3, #0]
	q1 += qDot2 * (1.0f / sampleFreq);
 8002342:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002346:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800234a:	f7fe fda7 	bl	8000e9c <__aeabi_fdiv>
 800234e:	4603      	mov	r3, r0
 8002350:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8002354:	4618      	mov	r0, r3
 8002356:	f7fe fced 	bl	8000d34 <__aeabi_fmul>
 800235a:	4603      	mov	r3, r0
 800235c:	461a      	mov	r2, r3
 800235e:	4b53      	ldr	r3, [pc, #332]	; (80024ac <MadgwickAHRSupdate+0x1374>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4619      	mov	r1, r3
 8002364:	4610      	mov	r0, r2
 8002366:	f7fe fbdd 	bl	8000b24 <__addsf3>
 800236a:	4603      	mov	r3, r0
 800236c:	461a      	mov	r2, r3
 800236e:	4b4f      	ldr	r3, [pc, #316]	; (80024ac <MadgwickAHRSupdate+0x1374>)
 8002370:	601a      	str	r2, [r3, #0]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002372:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8002376:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800237a:	f7fe fd8f 	bl	8000e9c <__aeabi_fdiv>
 800237e:	4603      	mov	r3, r0
 8002380:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8002384:	4618      	mov	r0, r3
 8002386:	f7fe fcd5 	bl	8000d34 <__aeabi_fmul>
 800238a:	4603      	mov	r3, r0
 800238c:	461a      	mov	r2, r3
 800238e:	4b48      	ldr	r3, [pc, #288]	; (80024b0 <MadgwickAHRSupdate+0x1378>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4619      	mov	r1, r3
 8002394:	4610      	mov	r0, r2
 8002396:	f7fe fbc5 	bl	8000b24 <__addsf3>
 800239a:	4603      	mov	r3, r0
 800239c:	461a      	mov	r2, r3
 800239e:	4b44      	ldr	r3, [pc, #272]	; (80024b0 <MadgwickAHRSupdate+0x1378>)
 80023a0:	601a      	str	r2, [r3, #0]
	q3 += qDot4 * (1.0f / sampleFreq);
 80023a2:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80023a6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80023aa:	f7fe fd77 	bl	8000e9c <__aeabi_fdiv>
 80023ae:	4603      	mov	r3, r0
 80023b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe fcbd 	bl	8000d34 <__aeabi_fmul>
 80023ba:	4603      	mov	r3, r0
 80023bc:	461a      	mov	r2, r3
 80023be:	4b3d      	ldr	r3, [pc, #244]	; (80024b4 <MadgwickAHRSupdate+0x137c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4619      	mov	r1, r3
 80023c4:	4610      	mov	r0, r2
 80023c6:	f7fe fbad 	bl	8000b24 <__addsf3>
 80023ca:	4603      	mov	r3, r0
 80023cc:	461a      	mov	r2, r3
 80023ce:	4b39      	ldr	r3, [pc, #228]	; (80024b4 <MadgwickAHRSupdate+0x137c>)
 80023d0:	601a      	str	r2, [r3, #0]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 80023d2:	4b35      	ldr	r3, [pc, #212]	; (80024a8 <MadgwickAHRSupdate+0x1370>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4b34      	ldr	r3, [pc, #208]	; (80024a8 <MadgwickAHRSupdate+0x1370>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4619      	mov	r1, r3
 80023dc:	4610      	mov	r0, r2
 80023de:	f7fe fca9 	bl	8000d34 <__aeabi_fmul>
 80023e2:	4603      	mov	r3, r0
 80023e4:	461c      	mov	r4, r3
 80023e6:	4b31      	ldr	r3, [pc, #196]	; (80024ac <MadgwickAHRSupdate+0x1374>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	4b30      	ldr	r3, [pc, #192]	; (80024ac <MadgwickAHRSupdate+0x1374>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4619      	mov	r1, r3
 80023f0:	4610      	mov	r0, r2
 80023f2:	f7fe fc9f 	bl	8000d34 <__aeabi_fmul>
 80023f6:	4603      	mov	r3, r0
 80023f8:	4619      	mov	r1, r3
 80023fa:	4620      	mov	r0, r4
 80023fc:	f7fe fb92 	bl	8000b24 <__addsf3>
 8002400:	4603      	mov	r3, r0
 8002402:	461c      	mov	r4, r3
 8002404:	4b2a      	ldr	r3, [pc, #168]	; (80024b0 <MadgwickAHRSupdate+0x1378>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b29      	ldr	r3, [pc, #164]	; (80024b0 <MadgwickAHRSupdate+0x1378>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4619      	mov	r1, r3
 800240e:	4610      	mov	r0, r2
 8002410:	f7fe fc90 	bl	8000d34 <__aeabi_fmul>
 8002414:	4603      	mov	r3, r0
 8002416:	4619      	mov	r1, r3
 8002418:	4620      	mov	r0, r4
 800241a:	f7fe fb83 	bl	8000b24 <__addsf3>
 800241e:	4603      	mov	r3, r0
 8002420:	461c      	mov	r4, r3
 8002422:	4b24      	ldr	r3, [pc, #144]	; (80024b4 <MadgwickAHRSupdate+0x137c>)
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	4b23      	ldr	r3, [pc, #140]	; (80024b4 <MadgwickAHRSupdate+0x137c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4619      	mov	r1, r3
 800242c:	4610      	mov	r0, r2
 800242e:	f7fe fc81 	bl	8000d34 <__aeabi_fmul>
 8002432:	4603      	mov	r3, r0
 8002434:	4619      	mov	r1, r3
 8002436:	4620      	mov	r0, r4
 8002438:	f7fe fb74 	bl	8000b24 <__addsf3>
 800243c:	4603      	mov	r3, r0
 800243e:	4618      	mov	r0, r3
 8002440:	f000 fc16 	bl	8002c70 <invSqrt>
 8002444:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
	q0 *= recipNorm;
 8002448:	4b17      	ldr	r3, [pc, #92]	; (80024a8 <MadgwickAHRSupdate+0x1370>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe fc6f 	bl	8000d34 <__aeabi_fmul>
 8002456:	4603      	mov	r3, r0
 8002458:	461a      	mov	r2, r3
 800245a:	4b13      	ldr	r3, [pc, #76]	; (80024a8 <MadgwickAHRSupdate+0x1370>)
 800245c:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 800245e:	4b13      	ldr	r3, [pc, #76]	; (80024ac <MadgwickAHRSupdate+0x1374>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe fc64 	bl	8000d34 <__aeabi_fmul>
 800246c:	4603      	mov	r3, r0
 800246e:	461a      	mov	r2, r3
 8002470:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <MadgwickAHRSupdate+0x1374>)
 8002472:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <MadgwickAHRSupdate+0x1378>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe fc59 	bl	8000d34 <__aeabi_fmul>
 8002482:	4603      	mov	r3, r0
 8002484:	461a      	mov	r2, r3
 8002486:	4b0a      	ldr	r3, [pc, #40]	; (80024b0 <MadgwickAHRSupdate+0x1378>)
 8002488:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 800248a:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <MadgwickAHRSupdate+0x137c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe fc4e 	bl	8000d34 <__aeabi_fmul>
 8002498:	4603      	mov	r3, r0
 800249a:	461a      	mov	r2, r3
 800249c:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <MadgwickAHRSupdate+0x137c>)
 800249e:	601a      	str	r2, [r3, #0]
}
 80024a0:	37a4      	adds	r7, #164	; 0xa4
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000000 	.word	0x20000000
 80024ac:	200000d4 	.word	0x200000d4
 80024b0:	200000d8 	.word	0x200000d8
 80024b4:	200000dc 	.word	0x200000dc

080024b8 <MadgwickAHRSupdateIMU>:

//---------------------------------------------------------------------------------------------------
// IMU algorithm update

void MadgwickAHRSupdateIMU(float beta, float gx, float gy, float gz, float ax, float ay, float az, float dt) {
 80024b8:	b590      	push	{r4, r7, lr}
 80024ba:	b09d      	sub	sp, #116	; 0x74
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
 80024c4:	603b      	str	r3, [r7, #0]

	float sampleFreq = 1 /dt;
 80024c6:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80024ca:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80024ce:	f7fe fce5 	bl	8000e9c <__aeabi_fdiv>
 80024d2:	4603      	mov	r3, r0
 80024d4:	65fb      	str	r3, [r7, #92]	; 0x5c
	float s0, s1, s2, s3;
	float qDot1, qDot2, qDot3, qDot4;
	float _2q0, _2q1, _2q2, _2q3, _4q0, _4q1, _4q2 ,_8q1, _8q2, q0q0, q1q1, q2q2, q3q3;

	// Rate of change of quaternion from gyroscope
	qDot1 = 0.5f * (-q1 * gx - q2 * gy - q3 * gz);
 80024d6:	4ba5      	ldr	r3, [pc, #660]	; (800276c <MadgwickAHRSupdateIMU+0x2b4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80024de:	68b9      	ldr	r1, [r7, #8]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe fc27 	bl	8000d34 <__aeabi_fmul>
 80024e6:	4603      	mov	r3, r0
 80024e8:	461c      	mov	r4, r3
 80024ea:	4ba1      	ldr	r3, [pc, #644]	; (8002770 <MadgwickAHRSupdateIMU+0x2b8>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	6879      	ldr	r1, [r7, #4]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fe fc1f 	bl	8000d34 <__aeabi_fmul>
 80024f6:	4603      	mov	r3, r0
 80024f8:	4619      	mov	r1, r3
 80024fa:	4620      	mov	r0, r4
 80024fc:	f7fe fb10 	bl	8000b20 <__aeabi_fsub>
 8002500:	4603      	mov	r3, r0
 8002502:	461c      	mov	r4, r3
 8002504:	4b9b      	ldr	r3, [pc, #620]	; (8002774 <MadgwickAHRSupdateIMU+0x2bc>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6839      	ldr	r1, [r7, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe fc12 	bl	8000d34 <__aeabi_fmul>
 8002510:	4603      	mov	r3, r0
 8002512:	4619      	mov	r1, r3
 8002514:	4620      	mov	r0, r4
 8002516:	f7fe fb03 	bl	8000b20 <__aeabi_fsub>
 800251a:	4603      	mov	r3, r0
 800251c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002520:	4618      	mov	r0, r3
 8002522:	f7fe fc07 	bl	8000d34 <__aeabi_fmul>
 8002526:	4603      	mov	r3, r0
 8002528:	66fb      	str	r3, [r7, #108]	; 0x6c
	qDot2 = 0.5f * (q0 * gx + q2 * gz - q3 * gy);
 800252a:	4b93      	ldr	r3, [pc, #588]	; (8002778 <MadgwickAHRSupdateIMU+0x2c0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68b9      	ldr	r1, [r7, #8]
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe fbff 	bl	8000d34 <__aeabi_fmul>
 8002536:	4603      	mov	r3, r0
 8002538:	461c      	mov	r4, r3
 800253a:	4b8d      	ldr	r3, [pc, #564]	; (8002770 <MadgwickAHRSupdateIMU+0x2b8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6839      	ldr	r1, [r7, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe fbf7 	bl	8000d34 <__aeabi_fmul>
 8002546:	4603      	mov	r3, r0
 8002548:	4619      	mov	r1, r3
 800254a:	4620      	mov	r0, r4
 800254c:	f7fe faea 	bl	8000b24 <__addsf3>
 8002550:	4603      	mov	r3, r0
 8002552:	461c      	mov	r4, r3
 8002554:	4b87      	ldr	r3, [pc, #540]	; (8002774 <MadgwickAHRSupdateIMU+0x2bc>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6879      	ldr	r1, [r7, #4]
 800255a:	4618      	mov	r0, r3
 800255c:	f7fe fbea 	bl	8000d34 <__aeabi_fmul>
 8002560:	4603      	mov	r3, r0
 8002562:	4619      	mov	r1, r3
 8002564:	4620      	mov	r0, r4
 8002566:	f7fe fadb 	bl	8000b20 <__aeabi_fsub>
 800256a:	4603      	mov	r3, r0
 800256c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002570:	4618      	mov	r0, r3
 8002572:	f7fe fbdf 	bl	8000d34 <__aeabi_fmul>
 8002576:	4603      	mov	r3, r0
 8002578:	66bb      	str	r3, [r7, #104]	; 0x68
	qDot3 = 0.5f * (q0 * gy - q1 * gz + q3 * gx);
 800257a:	4b7f      	ldr	r3, [pc, #508]	; (8002778 <MadgwickAHRSupdateIMU+0x2c0>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6879      	ldr	r1, [r7, #4]
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe fbd7 	bl	8000d34 <__aeabi_fmul>
 8002586:	4603      	mov	r3, r0
 8002588:	461c      	mov	r4, r3
 800258a:	4b78      	ldr	r3, [pc, #480]	; (800276c <MadgwickAHRSupdateIMU+0x2b4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	6839      	ldr	r1, [r7, #0]
 8002590:	4618      	mov	r0, r3
 8002592:	f7fe fbcf 	bl	8000d34 <__aeabi_fmul>
 8002596:	4603      	mov	r3, r0
 8002598:	4619      	mov	r1, r3
 800259a:	4620      	mov	r0, r4
 800259c:	f7fe fac0 	bl	8000b20 <__aeabi_fsub>
 80025a0:	4603      	mov	r3, r0
 80025a2:	461c      	mov	r4, r3
 80025a4:	4b73      	ldr	r3, [pc, #460]	; (8002774 <MadgwickAHRSupdateIMU+0x2bc>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	68b9      	ldr	r1, [r7, #8]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fe fbc2 	bl	8000d34 <__aeabi_fmul>
 80025b0:	4603      	mov	r3, r0
 80025b2:	4619      	mov	r1, r3
 80025b4:	4620      	mov	r0, r4
 80025b6:	f7fe fab5 	bl	8000b24 <__addsf3>
 80025ba:	4603      	mov	r3, r0
 80025bc:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fe fbb7 	bl	8000d34 <__aeabi_fmul>
 80025c6:	4603      	mov	r3, r0
 80025c8:	667b      	str	r3, [r7, #100]	; 0x64
	qDot4 = 0.5f * (q0 * gz + q1 * gy - q2 * gx);
 80025ca:	4b6b      	ldr	r3, [pc, #428]	; (8002778 <MadgwickAHRSupdateIMU+0x2c0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6839      	ldr	r1, [r7, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7fe fbaf 	bl	8000d34 <__aeabi_fmul>
 80025d6:	4603      	mov	r3, r0
 80025d8:	461c      	mov	r4, r3
 80025da:	4b64      	ldr	r3, [pc, #400]	; (800276c <MadgwickAHRSupdateIMU+0x2b4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	4618      	mov	r0, r3
 80025e2:	f7fe fba7 	bl	8000d34 <__aeabi_fmul>
 80025e6:	4603      	mov	r3, r0
 80025e8:	4619      	mov	r1, r3
 80025ea:	4620      	mov	r0, r4
 80025ec:	f7fe fa9a 	bl	8000b24 <__addsf3>
 80025f0:	4603      	mov	r3, r0
 80025f2:	461c      	mov	r4, r3
 80025f4:	4b5e      	ldr	r3, [pc, #376]	; (8002770 <MadgwickAHRSupdateIMU+0x2b8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68b9      	ldr	r1, [r7, #8]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fe fb9a 	bl	8000d34 <__aeabi_fmul>
 8002600:	4603      	mov	r3, r0
 8002602:	4619      	mov	r1, r3
 8002604:	4620      	mov	r0, r4
 8002606:	f7fe fa8b 	bl	8000b20 <__aeabi_fsub>
 800260a:	4603      	mov	r3, r0
 800260c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002610:	4618      	mov	r0, r3
 8002612:	f7fe fb8f 	bl	8000d34 <__aeabi_fmul>
 8002616:	4603      	mov	r3, r0
 8002618:	663b      	str	r3, [r7, #96]	; 0x60

	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)
	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
 800261a:	f04f 0100 	mov.w	r1, #0
 800261e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8002622:	f7fe fd1b 	bl	800105c <__aeabi_fcmpeq>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d012      	beq.n	8002652 <MadgwickAHRSupdateIMU+0x19a>
 800262c:	f04f 0100 	mov.w	r1, #0
 8002630:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8002634:	f7fe fd12 	bl	800105c <__aeabi_fcmpeq>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d009      	beq.n	8002652 <MadgwickAHRSupdateIMU+0x19a>
 800263e:	f04f 0100 	mov.w	r1, #0
 8002642:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002646:	f7fe fd09 	bl	800105c <__aeabi_fcmpeq>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	f040 8249 	bne.w	8002ae4 <MadgwickAHRSupdateIMU+0x62c>

		// Normalise accelerometer measurement
		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
 8002652:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8002656:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800265a:	f7fe fb6b 	bl	8000d34 <__aeabi_fmul>
 800265e:	4603      	mov	r3, r0
 8002660:	461c      	mov	r4, r3
 8002662:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8002666:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800266a:	f7fe fb63 	bl	8000d34 <__aeabi_fmul>
 800266e:	4603      	mov	r3, r0
 8002670:	4619      	mov	r1, r3
 8002672:	4620      	mov	r0, r4
 8002674:	f7fe fa56 	bl	8000b24 <__addsf3>
 8002678:	4603      	mov	r3, r0
 800267a:	461c      	mov	r4, r3
 800267c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8002680:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8002684:	f7fe fb56 	bl	8000d34 <__aeabi_fmul>
 8002688:	4603      	mov	r3, r0
 800268a:	4619      	mov	r1, r3
 800268c:	4620      	mov	r0, r4
 800268e:	f7fe fa49 	bl	8000b24 <__addsf3>
 8002692:	4603      	mov	r3, r0
 8002694:	4618      	mov	r0, r3
 8002696:	f000 faeb 	bl	8002c70 <invSqrt>
 800269a:	65b8      	str	r0, [r7, #88]	; 0x58
		ax *= recipNorm;
 800269c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800269e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80026a2:	f7fe fb47 	bl	8000d34 <__aeabi_fmul>
 80026a6:	4603      	mov	r3, r0
 80026a8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		ay *= recipNorm;
 80026ac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80026ae:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80026b2:	f7fe fb3f 	bl	8000d34 <__aeabi_fmul>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		az *= recipNorm;   
 80026bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80026be:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80026c2:	f7fe fb37 	bl	8000d34 <__aeabi_fmul>
 80026c6:	4603      	mov	r3, r0
 80026c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

		// Auxiliary variables to avoid repeated arithmetic
		_2q0 = 2.0f * q0;
 80026cc:	4b2a      	ldr	r3, [pc, #168]	; (8002778 <MadgwickAHRSupdateIMU+0x2c0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4619      	mov	r1, r3
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe fa26 	bl	8000b24 <__addsf3>
 80026d8:	4603      	mov	r3, r0
 80026da:	657b      	str	r3, [r7, #84]	; 0x54
		_2q1 = 2.0f * q1;
 80026dc:	4b23      	ldr	r3, [pc, #140]	; (800276c <MadgwickAHRSupdateIMU+0x2b4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4619      	mov	r1, r3
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fe fa1e 	bl	8000b24 <__addsf3>
 80026e8:	4603      	mov	r3, r0
 80026ea:	653b      	str	r3, [r7, #80]	; 0x50
		_2q2 = 2.0f * q2;
 80026ec:	4b20      	ldr	r3, [pc, #128]	; (8002770 <MadgwickAHRSupdateIMU+0x2b8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4619      	mov	r1, r3
 80026f2:	4618      	mov	r0, r3
 80026f4:	f7fe fa16 	bl	8000b24 <__addsf3>
 80026f8:	4603      	mov	r3, r0
 80026fa:	64fb      	str	r3, [r7, #76]	; 0x4c
		_2q3 = 2.0f * q3;
 80026fc:	4b1d      	ldr	r3, [pc, #116]	; (8002774 <MadgwickAHRSupdateIMU+0x2bc>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4619      	mov	r1, r3
 8002702:	4618      	mov	r0, r3
 8002704:	f7fe fa0e 	bl	8000b24 <__addsf3>
 8002708:	4603      	mov	r3, r0
 800270a:	64bb      	str	r3, [r7, #72]	; 0x48
		_4q0 = 4.0f * q0;
 800270c:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <MadgwickAHRSupdateIMU+0x2c0>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002714:	4618      	mov	r0, r3
 8002716:	f7fe fb0d 	bl	8000d34 <__aeabi_fmul>
 800271a:	4603      	mov	r3, r0
 800271c:	647b      	str	r3, [r7, #68]	; 0x44
		_4q1 = 4.0f * q1;
 800271e:	4b13      	ldr	r3, [pc, #76]	; (800276c <MadgwickAHRSupdateIMU+0x2b4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe fb04 	bl	8000d34 <__aeabi_fmul>
 800272c:	4603      	mov	r3, r0
 800272e:	643b      	str	r3, [r7, #64]	; 0x40
		_4q2 = 4.0f * q2;
 8002730:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <MadgwickAHRSupdateIMU+0x2b8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002738:	4618      	mov	r0, r3
 800273a:	f7fe fafb 	bl	8000d34 <__aeabi_fmul>
 800273e:	4603      	mov	r3, r0
 8002740:	63fb      	str	r3, [r7, #60]	; 0x3c
		_8q1 = 8.0f * q1;
 8002742:	4b0a      	ldr	r3, [pc, #40]	; (800276c <MadgwickAHRSupdateIMU+0x2b4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800274a:	4618      	mov	r0, r3
 800274c:	f7fe faf2 	bl	8000d34 <__aeabi_fmul>
 8002750:	4603      	mov	r3, r0
 8002752:	63bb      	str	r3, [r7, #56]	; 0x38
		_8q2 = 8.0f * q2;
 8002754:	4b06      	ldr	r3, [pc, #24]	; (8002770 <MadgwickAHRSupdateIMU+0x2b8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800275c:	4618      	mov	r0, r3
 800275e:	f7fe fae9 	bl	8000d34 <__aeabi_fmul>
 8002762:	4603      	mov	r3, r0
 8002764:	637b      	str	r3, [r7, #52]	; 0x34
		q0q0 = q0 * q0;
 8002766:	4b04      	ldr	r3, [pc, #16]	; (8002778 <MadgwickAHRSupdateIMU+0x2c0>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	e007      	b.n	800277c <MadgwickAHRSupdateIMU+0x2c4>
 800276c:	200000d4 	.word	0x200000d4
 8002770:	200000d8 	.word	0x200000d8
 8002774:	200000dc 	.word	0x200000dc
 8002778:	20000000 	.word	0x20000000
 800277c:	4b9f      	ldr	r3, [pc, #636]	; (80029fc <MadgwickAHRSupdateIMU+0x544>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4619      	mov	r1, r3
 8002782:	4610      	mov	r0, r2
 8002784:	f7fe fad6 	bl	8000d34 <__aeabi_fmul>
 8002788:	4603      	mov	r3, r0
 800278a:	633b      	str	r3, [r7, #48]	; 0x30
		q1q1 = q1 * q1;
 800278c:	4b9c      	ldr	r3, [pc, #624]	; (8002a00 <MadgwickAHRSupdateIMU+0x548>)
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	4b9b      	ldr	r3, [pc, #620]	; (8002a00 <MadgwickAHRSupdateIMU+0x548>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4619      	mov	r1, r3
 8002796:	4610      	mov	r0, r2
 8002798:	f7fe facc 	bl	8000d34 <__aeabi_fmul>
 800279c:	4603      	mov	r3, r0
 800279e:	62fb      	str	r3, [r7, #44]	; 0x2c
		q2q2 = q2 * q2;
 80027a0:	4b98      	ldr	r3, [pc, #608]	; (8002a04 <MadgwickAHRSupdateIMU+0x54c>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b97      	ldr	r3, [pc, #604]	; (8002a04 <MadgwickAHRSupdateIMU+0x54c>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4619      	mov	r1, r3
 80027aa:	4610      	mov	r0, r2
 80027ac:	f7fe fac2 	bl	8000d34 <__aeabi_fmul>
 80027b0:	4603      	mov	r3, r0
 80027b2:	62bb      	str	r3, [r7, #40]	; 0x28
		q3q3 = q3 * q3;
 80027b4:	4b94      	ldr	r3, [pc, #592]	; (8002a08 <MadgwickAHRSupdateIMU+0x550>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4b93      	ldr	r3, [pc, #588]	; (8002a08 <MadgwickAHRSupdateIMU+0x550>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4619      	mov	r1, r3
 80027be:	4610      	mov	r0, r2
 80027c0:	f7fe fab8 	bl	8000d34 <__aeabi_fmul>
 80027c4:	4603      	mov	r3, r0
 80027c6:	627b      	str	r3, [r7, #36]	; 0x24

		// Gradient decent algorithm corrective step
		s0 = _4q0 * q2q2 + _2q2 * ax + _4q0 * q1q1 - _2q1 * ay;
 80027c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027ca:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80027cc:	f7fe fab2 	bl	8000d34 <__aeabi_fmul>
 80027d0:	4603      	mov	r3, r0
 80027d2:	461c      	mov	r4, r3
 80027d4:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80027d8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80027da:	f7fe faab 	bl	8000d34 <__aeabi_fmul>
 80027de:	4603      	mov	r3, r0
 80027e0:	4619      	mov	r1, r3
 80027e2:	4620      	mov	r0, r4
 80027e4:	f7fe f99e 	bl	8000b24 <__addsf3>
 80027e8:	4603      	mov	r3, r0
 80027ea:	461c      	mov	r4, r3
 80027ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027ee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80027f0:	f7fe faa0 	bl	8000d34 <__aeabi_fmul>
 80027f4:	4603      	mov	r3, r0
 80027f6:	4619      	mov	r1, r3
 80027f8:	4620      	mov	r0, r4
 80027fa:	f7fe f993 	bl	8000b24 <__addsf3>
 80027fe:	4603      	mov	r3, r0
 8002800:	461c      	mov	r4, r3
 8002802:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8002806:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002808:	f7fe fa94 	bl	8000d34 <__aeabi_fmul>
 800280c:	4603      	mov	r3, r0
 800280e:	4619      	mov	r1, r3
 8002810:	4620      	mov	r0, r4
 8002812:	f7fe f985 	bl	8000b20 <__aeabi_fsub>
 8002816:	4603      	mov	r3, r0
 8002818:	623b      	str	r3, [r7, #32]
		s1 = _4q1 * q3q3 - _2q3 * ax + 4.0f * q0q0 * q1 - _2q0 * ay - _4q1 + _8q1 * q1q1 + _8q1 * q2q2 + _4q1 * az;
 800281a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800281c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800281e:	f7fe fa89 	bl	8000d34 <__aeabi_fmul>
 8002822:	4603      	mov	r3, r0
 8002824:	461c      	mov	r4, r3
 8002826:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800282a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800282c:	f7fe fa82 	bl	8000d34 <__aeabi_fmul>
 8002830:	4603      	mov	r3, r0
 8002832:	4619      	mov	r1, r3
 8002834:	4620      	mov	r0, r4
 8002836:	f7fe f973 	bl	8000b20 <__aeabi_fsub>
 800283a:	4603      	mov	r3, r0
 800283c:	461c      	mov	r4, r3
 800283e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002842:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002844:	f7fe fa76 	bl	8000d34 <__aeabi_fmul>
 8002848:	4603      	mov	r3, r0
 800284a:	461a      	mov	r2, r3
 800284c:	4b6c      	ldr	r3, [pc, #432]	; (8002a00 <MadgwickAHRSupdateIMU+0x548>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4619      	mov	r1, r3
 8002852:	4610      	mov	r0, r2
 8002854:	f7fe fa6e 	bl	8000d34 <__aeabi_fmul>
 8002858:	4603      	mov	r3, r0
 800285a:	4619      	mov	r1, r3
 800285c:	4620      	mov	r0, r4
 800285e:	f7fe f961 	bl	8000b24 <__addsf3>
 8002862:	4603      	mov	r3, r0
 8002864:	461c      	mov	r4, r3
 8002866:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800286a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800286c:	f7fe fa62 	bl	8000d34 <__aeabi_fmul>
 8002870:	4603      	mov	r3, r0
 8002872:	4619      	mov	r1, r3
 8002874:	4620      	mov	r0, r4
 8002876:	f7fe f953 	bl	8000b20 <__aeabi_fsub>
 800287a:	4603      	mov	r3, r0
 800287c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe f94e 	bl	8000b20 <__aeabi_fsub>
 8002884:	4603      	mov	r3, r0
 8002886:	461c      	mov	r4, r3
 8002888:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800288a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800288c:	f7fe fa52 	bl	8000d34 <__aeabi_fmul>
 8002890:	4603      	mov	r3, r0
 8002892:	4619      	mov	r1, r3
 8002894:	4620      	mov	r0, r4
 8002896:	f7fe f945 	bl	8000b24 <__addsf3>
 800289a:	4603      	mov	r3, r0
 800289c:	461c      	mov	r4, r3
 800289e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80028a2:	f7fe fa47 	bl	8000d34 <__aeabi_fmul>
 80028a6:	4603      	mov	r3, r0
 80028a8:	4619      	mov	r1, r3
 80028aa:	4620      	mov	r0, r4
 80028ac:	f7fe f93a 	bl	8000b24 <__addsf3>
 80028b0:	4603      	mov	r3, r0
 80028b2:	461c      	mov	r4, r3
 80028b4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80028b8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80028ba:	f7fe fa3b 	bl	8000d34 <__aeabi_fmul>
 80028be:	4603      	mov	r3, r0
 80028c0:	4619      	mov	r1, r3
 80028c2:	4620      	mov	r0, r4
 80028c4:	f7fe f92e 	bl	8000b24 <__addsf3>
 80028c8:	4603      	mov	r3, r0
 80028ca:	61fb      	str	r3, [r7, #28]
		s2 = 4.0f * q0q0 * q2 + _2q0 * ax + _4q2 * q3q3 - _2q3 * ay - _4q2 + _8q2 * q1q1 + _8q2 * q2q2 + _4q2 * az;
 80028cc:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80028d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028d2:	f7fe fa2f 	bl	8000d34 <__aeabi_fmul>
 80028d6:	4603      	mov	r3, r0
 80028d8:	461a      	mov	r2, r3
 80028da:	4b4a      	ldr	r3, [pc, #296]	; (8002a04 <MadgwickAHRSupdateIMU+0x54c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4619      	mov	r1, r3
 80028e0:	4610      	mov	r0, r2
 80028e2:	f7fe fa27 	bl	8000d34 <__aeabi_fmul>
 80028e6:	4603      	mov	r3, r0
 80028e8:	461c      	mov	r4, r3
 80028ea:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80028ee:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80028f0:	f7fe fa20 	bl	8000d34 <__aeabi_fmul>
 80028f4:	4603      	mov	r3, r0
 80028f6:	4619      	mov	r1, r3
 80028f8:	4620      	mov	r0, r4
 80028fa:	f7fe f913 	bl	8000b24 <__addsf3>
 80028fe:	4603      	mov	r3, r0
 8002900:	461c      	mov	r4, r3
 8002902:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002904:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002906:	f7fe fa15 	bl	8000d34 <__aeabi_fmul>
 800290a:	4603      	mov	r3, r0
 800290c:	4619      	mov	r1, r3
 800290e:	4620      	mov	r0, r4
 8002910:	f7fe f908 	bl	8000b24 <__addsf3>
 8002914:	4603      	mov	r3, r0
 8002916:	461c      	mov	r4, r3
 8002918:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800291c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800291e:	f7fe fa09 	bl	8000d34 <__aeabi_fmul>
 8002922:	4603      	mov	r3, r0
 8002924:	4619      	mov	r1, r3
 8002926:	4620      	mov	r0, r4
 8002928:	f7fe f8fa 	bl	8000b20 <__aeabi_fsub>
 800292c:	4603      	mov	r3, r0
 800292e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002930:	4618      	mov	r0, r3
 8002932:	f7fe f8f5 	bl	8000b20 <__aeabi_fsub>
 8002936:	4603      	mov	r3, r0
 8002938:	461c      	mov	r4, r3
 800293a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800293c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800293e:	f7fe f9f9 	bl	8000d34 <__aeabi_fmul>
 8002942:	4603      	mov	r3, r0
 8002944:	4619      	mov	r1, r3
 8002946:	4620      	mov	r0, r4
 8002948:	f7fe f8ec 	bl	8000b24 <__addsf3>
 800294c:	4603      	mov	r3, r0
 800294e:	461c      	mov	r4, r3
 8002950:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002952:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002954:	f7fe f9ee 	bl	8000d34 <__aeabi_fmul>
 8002958:	4603      	mov	r3, r0
 800295a:	4619      	mov	r1, r3
 800295c:	4620      	mov	r0, r4
 800295e:	f7fe f8e1 	bl	8000b24 <__addsf3>
 8002962:	4603      	mov	r3, r0
 8002964:	461c      	mov	r4, r3
 8002966:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800296a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800296c:	f7fe f9e2 	bl	8000d34 <__aeabi_fmul>
 8002970:	4603      	mov	r3, r0
 8002972:	4619      	mov	r1, r3
 8002974:	4620      	mov	r0, r4
 8002976:	f7fe f8d5 	bl	8000b24 <__addsf3>
 800297a:	4603      	mov	r3, r0
 800297c:	61bb      	str	r3, [r7, #24]
		s3 = 4.0f * q1q1 * q3 - _2q1 * ax + 4.0f * q2q2 * q3 - _2q2 * ay;
 800297e:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002982:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002984:	f7fe f9d6 	bl	8000d34 <__aeabi_fmul>
 8002988:	4603      	mov	r3, r0
 800298a:	461a      	mov	r2, r3
 800298c:	4b1e      	ldr	r3, [pc, #120]	; (8002a08 <MadgwickAHRSupdateIMU+0x550>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4619      	mov	r1, r3
 8002992:	4610      	mov	r0, r2
 8002994:	f7fe f9ce 	bl	8000d34 <__aeabi_fmul>
 8002998:	4603      	mov	r3, r0
 800299a:	461c      	mov	r4, r3
 800299c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80029a0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80029a2:	f7fe f9c7 	bl	8000d34 <__aeabi_fmul>
 80029a6:	4603      	mov	r3, r0
 80029a8:	4619      	mov	r1, r3
 80029aa:	4620      	mov	r0, r4
 80029ac:	f7fe f8b8 	bl	8000b20 <__aeabi_fsub>
 80029b0:	4603      	mov	r3, r0
 80029b2:	461c      	mov	r4, r3
 80029b4:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80029b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80029ba:	f7fe f9bb 	bl	8000d34 <__aeabi_fmul>
 80029be:	4603      	mov	r3, r0
 80029c0:	461a      	mov	r2, r3
 80029c2:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <MadgwickAHRSupdateIMU+0x550>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4619      	mov	r1, r3
 80029c8:	4610      	mov	r0, r2
 80029ca:	f7fe f9b3 	bl	8000d34 <__aeabi_fmul>
 80029ce:	4603      	mov	r3, r0
 80029d0:	4619      	mov	r1, r3
 80029d2:	4620      	mov	r0, r4
 80029d4:	f7fe f8a6 	bl	8000b24 <__addsf3>
 80029d8:	4603      	mov	r3, r0
 80029da:	461c      	mov	r4, r3
 80029dc:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80029e0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80029e2:	f7fe f9a7 	bl	8000d34 <__aeabi_fmul>
 80029e6:	4603      	mov	r3, r0
 80029e8:	4619      	mov	r1, r3
 80029ea:	4620      	mov	r0, r4
 80029ec:	f7fe f898 	bl	8000b20 <__aeabi_fsub>
 80029f0:	4603      	mov	r3, r0
 80029f2:	617b      	str	r3, [r7, #20]
		recipNorm = invSqrt(s0 * s0 + s1 * s1 + s2 * s2 + s3 * s3); // normalise step magnitude
 80029f4:	6a39      	ldr	r1, [r7, #32]
 80029f6:	6a38      	ldr	r0, [r7, #32]
 80029f8:	e008      	b.n	8002a0c <MadgwickAHRSupdateIMU+0x554>
 80029fa:	bf00      	nop
 80029fc:	20000000 	.word	0x20000000
 8002a00:	200000d4 	.word	0x200000d4
 8002a04:	200000d8 	.word	0x200000d8
 8002a08:	200000dc 	.word	0x200000dc
 8002a0c:	f7fe f992 	bl	8000d34 <__aeabi_fmul>
 8002a10:	4603      	mov	r3, r0
 8002a12:	461c      	mov	r4, r3
 8002a14:	69f9      	ldr	r1, [r7, #28]
 8002a16:	69f8      	ldr	r0, [r7, #28]
 8002a18:	f7fe f98c 	bl	8000d34 <__aeabi_fmul>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	4619      	mov	r1, r3
 8002a20:	4620      	mov	r0, r4
 8002a22:	f7fe f87f 	bl	8000b24 <__addsf3>
 8002a26:	4603      	mov	r3, r0
 8002a28:	461c      	mov	r4, r3
 8002a2a:	69b9      	ldr	r1, [r7, #24]
 8002a2c:	69b8      	ldr	r0, [r7, #24]
 8002a2e:	f7fe f981 	bl	8000d34 <__aeabi_fmul>
 8002a32:	4603      	mov	r3, r0
 8002a34:	4619      	mov	r1, r3
 8002a36:	4620      	mov	r0, r4
 8002a38:	f7fe f874 	bl	8000b24 <__addsf3>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	461c      	mov	r4, r3
 8002a40:	6979      	ldr	r1, [r7, #20]
 8002a42:	6978      	ldr	r0, [r7, #20]
 8002a44:	f7fe f976 	bl	8000d34 <__aeabi_fmul>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	4620      	mov	r0, r4
 8002a4e:	f7fe f869 	bl	8000b24 <__addsf3>
 8002a52:	4603      	mov	r3, r0
 8002a54:	4618      	mov	r0, r3
 8002a56:	f000 f90b 	bl	8002c70 <invSqrt>
 8002a5a:	65b8      	str	r0, [r7, #88]	; 0x58
		s0 *= recipNorm;
 8002a5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002a5e:	6a38      	ldr	r0, [r7, #32]
 8002a60:	f7fe f968 	bl	8000d34 <__aeabi_fmul>
 8002a64:	4603      	mov	r3, r0
 8002a66:	623b      	str	r3, [r7, #32]
		s1 *= recipNorm;
 8002a68:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002a6a:	69f8      	ldr	r0, [r7, #28]
 8002a6c:	f7fe f962 	bl	8000d34 <__aeabi_fmul>
 8002a70:	4603      	mov	r3, r0
 8002a72:	61fb      	str	r3, [r7, #28]
		s2 *= recipNorm;
 8002a74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002a76:	69b8      	ldr	r0, [r7, #24]
 8002a78:	f7fe f95c 	bl	8000d34 <__aeabi_fmul>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	61bb      	str	r3, [r7, #24]
		s3 *= recipNorm;
 8002a80:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002a82:	6978      	ldr	r0, [r7, #20]
 8002a84:	f7fe f956 	bl	8000d34 <__aeabi_fmul>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	617b      	str	r3, [r7, #20]

		// Apply feedback step
		qDot1 -= beta * s0;
 8002a8c:	6a39      	ldr	r1, [r7, #32]
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f7fe f950 	bl	8000d34 <__aeabi_fmul>
 8002a94:	4603      	mov	r3, r0
 8002a96:	4619      	mov	r1, r3
 8002a98:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002a9a:	f7fe f841 	bl	8000b20 <__aeabi_fsub>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	66fb      	str	r3, [r7, #108]	; 0x6c
		qDot2 -= beta * s1;
 8002aa2:	69f9      	ldr	r1, [r7, #28]
 8002aa4:	68f8      	ldr	r0, [r7, #12]
 8002aa6:	f7fe f945 	bl	8000d34 <__aeabi_fmul>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	4619      	mov	r1, r3
 8002aae:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002ab0:	f7fe f836 	bl	8000b20 <__aeabi_fsub>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	66bb      	str	r3, [r7, #104]	; 0x68
		qDot3 -= beta * s2;
 8002ab8:	69b9      	ldr	r1, [r7, #24]
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f7fe f93a 	bl	8000d34 <__aeabi_fmul>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002ac6:	f7fe f82b 	bl	8000b20 <__aeabi_fsub>
 8002aca:	4603      	mov	r3, r0
 8002acc:	667b      	str	r3, [r7, #100]	; 0x64
		qDot4 -= beta * s3;
 8002ace:	6979      	ldr	r1, [r7, #20]
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f7fe f92f 	bl	8000d34 <__aeabi_fmul>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	4619      	mov	r1, r3
 8002ada:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002adc:	f7fe f820 	bl	8000b20 <__aeabi_fsub>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	663b      	str	r3, [r7, #96]	; 0x60
	}

	// Integrate rate of change of quaternion to yield quaternion
	q0 += qDot1 * (1.0f / sampleFreq);
 8002ae4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002ae6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002aea:	f7fe f9d7 	bl	8000e9c <__aeabi_fdiv>
 8002aee:	4603      	mov	r3, r0
 8002af0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fe f91e 	bl	8000d34 <__aeabi_fmul>
 8002af8:	4603      	mov	r3, r0
 8002afa:	461a      	mov	r2, r3
 8002afc:	4b58      	ldr	r3, [pc, #352]	; (8002c60 <MadgwickAHRSupdateIMU+0x7a8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4619      	mov	r1, r3
 8002b02:	4610      	mov	r0, r2
 8002b04:	f7fe f80e 	bl	8000b24 <__addsf3>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4b54      	ldr	r3, [pc, #336]	; (8002c60 <MadgwickAHRSupdateIMU+0x7a8>)
 8002b0e:	601a      	str	r2, [r3, #0]
	q1 += qDot2 * (1.0f / sampleFreq);
 8002b10:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002b12:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002b16:	f7fe f9c1 	bl	8000e9c <__aeabi_fdiv>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7fe f908 	bl	8000d34 <__aeabi_fmul>
 8002b24:	4603      	mov	r3, r0
 8002b26:	461a      	mov	r2, r3
 8002b28:	4b4e      	ldr	r3, [pc, #312]	; (8002c64 <MadgwickAHRSupdateIMU+0x7ac>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4610      	mov	r0, r2
 8002b30:	f7fd fff8 	bl	8000b24 <__addsf3>
 8002b34:	4603      	mov	r3, r0
 8002b36:	461a      	mov	r2, r3
 8002b38:	4b4a      	ldr	r3, [pc, #296]	; (8002c64 <MadgwickAHRSupdateIMU+0x7ac>)
 8002b3a:	601a      	str	r2, [r3, #0]
	q2 += qDot3 * (1.0f / sampleFreq);
 8002b3c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002b3e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002b42:	f7fe f9ab 	bl	8000e9c <__aeabi_fdiv>
 8002b46:	4603      	mov	r3, r0
 8002b48:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7fe f8f2 	bl	8000d34 <__aeabi_fmul>
 8002b50:	4603      	mov	r3, r0
 8002b52:	461a      	mov	r2, r3
 8002b54:	4b44      	ldr	r3, [pc, #272]	; (8002c68 <MadgwickAHRSupdateIMU+0x7b0>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4619      	mov	r1, r3
 8002b5a:	4610      	mov	r0, r2
 8002b5c:	f7fd ffe2 	bl	8000b24 <__addsf3>
 8002b60:	4603      	mov	r3, r0
 8002b62:	461a      	mov	r2, r3
 8002b64:	4b40      	ldr	r3, [pc, #256]	; (8002c68 <MadgwickAHRSupdateIMU+0x7b0>)
 8002b66:	601a      	str	r2, [r3, #0]
	q3 += qDot4 * (1.0f / sampleFreq);
 8002b68:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002b6a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8002b6e:	f7fe f995 	bl	8000e9c <__aeabi_fdiv>
 8002b72:	4603      	mov	r3, r0
 8002b74:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002b76:	4618      	mov	r0, r3
 8002b78:	f7fe f8dc 	bl	8000d34 <__aeabi_fmul>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	461a      	mov	r2, r3
 8002b80:	4b3a      	ldr	r3, [pc, #232]	; (8002c6c <MadgwickAHRSupdateIMU+0x7b4>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4619      	mov	r1, r3
 8002b86:	4610      	mov	r0, r2
 8002b88:	f7fd ffcc 	bl	8000b24 <__addsf3>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	461a      	mov	r2, r3
 8002b90:	4b36      	ldr	r3, [pc, #216]	; (8002c6c <MadgwickAHRSupdateIMU+0x7b4>)
 8002b92:	601a      	str	r2, [r3, #0]

	// Normalise quaternion
	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8002b94:	4b32      	ldr	r3, [pc, #200]	; (8002c60 <MadgwickAHRSupdateIMU+0x7a8>)
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	4b31      	ldr	r3, [pc, #196]	; (8002c60 <MadgwickAHRSupdateIMU+0x7a8>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	f7fe f8c8 	bl	8000d34 <__aeabi_fmul>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	461c      	mov	r4, r3
 8002ba8:	4b2e      	ldr	r3, [pc, #184]	; (8002c64 <MadgwickAHRSupdateIMU+0x7ac>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4b2d      	ldr	r3, [pc, #180]	; (8002c64 <MadgwickAHRSupdateIMU+0x7ac>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	f7fe f8be 	bl	8000d34 <__aeabi_fmul>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	f7fd ffb1 	bl	8000b24 <__addsf3>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	461c      	mov	r4, r3
 8002bc6:	4b28      	ldr	r3, [pc, #160]	; (8002c68 <MadgwickAHRSupdateIMU+0x7b0>)
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <MadgwickAHRSupdateIMU+0x7b0>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4619      	mov	r1, r3
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	f7fe f8af 	bl	8000d34 <__aeabi_fmul>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4620      	mov	r0, r4
 8002bdc:	f7fd ffa2 	bl	8000b24 <__addsf3>
 8002be0:	4603      	mov	r3, r0
 8002be2:	461c      	mov	r4, r3
 8002be4:	4b21      	ldr	r3, [pc, #132]	; (8002c6c <MadgwickAHRSupdateIMU+0x7b4>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4b20      	ldr	r3, [pc, #128]	; (8002c6c <MadgwickAHRSupdateIMU+0x7b4>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4619      	mov	r1, r3
 8002bee:	4610      	mov	r0, r2
 8002bf0:	f7fe f8a0 	bl	8000d34 <__aeabi_fmul>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	f7fd ff93 	bl	8000b24 <__addsf3>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	4618      	mov	r0, r3
 8002c02:	f000 f835 	bl	8002c70 <invSqrt>
 8002c06:	65b8      	str	r0, [r7, #88]	; 0x58
	q0 *= recipNorm;
 8002c08:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <MadgwickAHRSupdateIMU+0x7a8>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe f890 	bl	8000d34 <__aeabi_fmul>
 8002c14:	4603      	mov	r3, r0
 8002c16:	461a      	mov	r2, r3
 8002c18:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <MadgwickAHRSupdateIMU+0x7a8>)
 8002c1a:	601a      	str	r2, [r3, #0]
	q1 *= recipNorm;
 8002c1c:	4b11      	ldr	r3, [pc, #68]	; (8002c64 <MadgwickAHRSupdateIMU+0x7ac>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe f886 	bl	8000d34 <__aeabi_fmul>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <MadgwickAHRSupdateIMU+0x7ac>)
 8002c2e:	601a      	str	r2, [r3, #0]
	q2 *= recipNorm;
 8002c30:	4b0d      	ldr	r3, [pc, #52]	; (8002c68 <MadgwickAHRSupdateIMU+0x7b0>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe f87c 	bl	8000d34 <__aeabi_fmul>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	461a      	mov	r2, r3
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <MadgwickAHRSupdateIMU+0x7b0>)
 8002c42:	601a      	str	r2, [r3, #0]
	q3 *= recipNorm;
 8002c44:	4b09      	ldr	r3, [pc, #36]	; (8002c6c <MadgwickAHRSupdateIMU+0x7b4>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe f872 	bl	8000d34 <__aeabi_fmul>
 8002c50:	4603      	mov	r3, r0
 8002c52:	461a      	mov	r2, r3
 8002c54:	4b05      	ldr	r3, [pc, #20]	; (8002c6c <MadgwickAHRSupdateIMU+0x7b4>)
 8002c56:	601a      	str	r2, [r3, #0]
}
 8002c58:	bf00      	nop
 8002c5a:	3774      	adds	r7, #116	; 0x74
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd90      	pop	{r4, r7, pc}
 8002c60:	20000000 	.word	0x20000000
 8002c64:	200000d4 	.word	0x200000d4
 8002c68:	200000d8 	.word	0x200000d8
 8002c6c:	200000dc 	.word	0x200000dc

08002c70 <invSqrt>:

//---------------------------------------------------------------------------------------------------
// Fast inverse square-root
// See: http://en.wikipedia.org/wiki/Fast_inverse_square_root

float invSqrt(float x) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
	float halfx = 0.5f * x;
 8002c78:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f7fe f859 	bl	8000d34 <__aeabi_fmul>
 8002c82:	4603      	mov	r3, r0
 8002c84:	617b      	str	r3, [r7, #20]
	float y = x;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	613b      	str	r3, [r7, #16]
	long i = *(long*)&y;
 8002c8a:	f107 0310 	add.w	r3, r7, #16
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	60fb      	str	r3, [r7, #12]
	i = 0x5f3759df - (i>>1);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	105a      	asrs	r2, r3, #1
 8002c96:	4b13      	ldr	r3, [pc, #76]	; (8002ce4 <invSqrt+0x74>)
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]
	y = *(float*)&i;
 8002c9c:	f107 030c 	add.w	r3, r7, #12
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	613b      	str	r3, [r7, #16]
	y = y * (1.5f - (halfx * y * y));
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	6979      	ldr	r1, [r7, #20]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7fe f843 	bl	8000d34 <__aeabi_fmul>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4610      	mov	r0, r2
 8002cb8:	f7fe f83c 	bl	8000d34 <__aeabi_fmul>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	f04f 507f 	mov.w	r0, #1069547520	; 0x3fc00000
 8002cc4:	f7fd ff2c 	bl	8000b20 <__aeabi_fsub>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	461a      	mov	r2, r3
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	f7fe f82f 	bl	8000d34 <__aeabi_fmul>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	613b      	str	r3, [r7, #16]
	return y;
 8002cda:	693b      	ldr	r3, [r7, #16]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	5f3759df 	.word	0x5f3759df

08002ce8 <CRC8_SingleByte>:
 *      Author: mnowak5
 */

#include "crc.h"

byte CRC8_SingleByte(byte CRC_prev, byte Data) {
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	460a      	mov	r2, r1
 8002cf2:	71fb      	strb	r3, [r7, #7]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	71bb      	strb	r3, [r7, #6]

	CRC_prev ^= Data;
 8002cf8:	79fa      	ldrb	r2, [r7, #7]
 8002cfa:	79bb      	ldrb	r3, [r7, #6]
 8002cfc:	4053      	eors	r3, r2
 8002cfe:	71fb      	strb	r3, [r7, #7]

	for(byte Idx = 0; Idx < 8; ++Idx) {
 8002d00:	2300      	movs	r3, #0
 8002d02:	73fb      	strb	r3, [r7, #15]
 8002d04:	e011      	b.n	8002d2a <CRC8_SingleByte+0x42>

		if( (CRC_prev & 0x80) != 0 ) {
 8002d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	da07      	bge.n	8002d1e <CRC8_SingleByte+0x36>

			CRC_prev = (byte)( (CRC_prev << 1) ^ POLYNOMIAL_9 );
 8002d0e:	79fb      	ldrb	r3, [r7, #7]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	b25b      	sxtb	r3, r3
 8002d14:	f083 0331 	eor.w	r3, r3, #49	; 0x31
 8002d18:	b25b      	sxtb	r3, r3
 8002d1a:	71fb      	strb	r3, [r7, #7]
 8002d1c:	e002      	b.n	8002d24 <CRC8_SingleByte+0x3c>
		} else {

			CRC_prev = (byte)(CRC_prev << 1);
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	71fb      	strb	r3, [r7, #7]
	for(byte Idx = 0; Idx < 8; ++Idx) {
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
 8002d26:	3301      	adds	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
 8002d2a:	7bfb      	ldrb	r3, [r7, #15]
 8002d2c:	2b07      	cmp	r3, #7
 8002d2e:	d9ea      	bls.n	8002d06 <CRC8_SingleByte+0x1e>
		}
	}

	return CRC_prev;
 8002d30:	79fb      	ldrb	r3, [r7, #7]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <CRC8_DataArray>:

byte CRC8_DataArray(byte *pData, byte Len) {
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	70fb      	strb	r3, [r7, #3]

	byte CRC_final = 0xFF;
 8002d48:	23ff      	movs	r3, #255	; 0xff
 8002d4a:	73fb      	strb	r3, [r7, #15]

	for(byte Idx = 0; Idx < Len; ++Idx) {
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	73bb      	strb	r3, [r7, #14]
 8002d50:	e00d      	b.n	8002d6e <CRC8_DataArray+0x32>

		CRC_final = CRC8_SingleByte(CRC_final, pData[Idx]);
 8002d52:	7bbb      	ldrb	r3, [r7, #14]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	4413      	add	r3, r2
 8002d58:	781a      	ldrb	r2, [r3, #0]
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	4611      	mov	r1, r2
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff ffc2 	bl	8002ce8 <CRC8_SingleByte>
 8002d64:	4603      	mov	r3, r0
 8002d66:	73fb      	strb	r3, [r7, #15]
	for(byte Idx = 0; Idx < Len; ++Idx) {
 8002d68:	7bbb      	ldrb	r3, [r7, #14]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	73bb      	strb	r3, [r7, #14]
 8002d6e:	7bba      	ldrb	r2, [r7, #14]
 8002d70:	78fb      	ldrb	r3, [r7, #3]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d3ed      	bcc.n	8002d52 <CRC8_DataArray+0x16>
	}

	return CRC_final;
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3710      	adds	r7, #16
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d86:	4b18      	ldr	r3, [pc, #96]	; (8002de8 <MX_DMA_Init+0x68>)
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	4a17      	ldr	r2, [pc, #92]	; (8002de8 <MX_DMA_Init+0x68>)
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	6153      	str	r3, [r2, #20]
 8002d92:	4b15      	ldr	r3, [pc, #84]	; (8002de8 <MX_DMA_Init+0x68>)
 8002d94:	695b      	ldr	r3, [r3, #20]
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	607b      	str	r3, [r7, #4]
 8002d9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2105      	movs	r1, #5
 8002da2:	200e      	movs	r0, #14
 8002da4:	f004 f925 	bl	8006ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002da8:	200e      	movs	r0, #14
 8002daa:	f004 f93e 	bl	800702a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 5, 0);
 8002dae:	2200      	movs	r2, #0
 8002db0:	2105      	movs	r1, #5
 8002db2:	200f      	movs	r0, #15
 8002db4:	f004 f91d 	bl	8006ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002db8:	200f      	movs	r0, #15
 8002dba:	f004 f936 	bl	800702a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	2105      	movs	r1, #5
 8002dc2:	2010      	movs	r0, #16
 8002dc4:	f004 f915 	bl	8006ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002dc8:	2010      	movs	r0, #16
 8002dca:	f004 f92e 	bl	800702a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8002dce:	2200      	movs	r2, #0
 8002dd0:	2105      	movs	r1, #5
 8002dd2:	2011      	movs	r0, #17
 8002dd4:	f004 f90d 	bl	8006ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002dd8:	2011      	movs	r0, #17
 8002dda:	f004 f926 	bl	800702a <HAL_NVIC_EnableIRQ>

}
 8002dde:	bf00      	nop
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000

08002dec <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4a06      	ldr	r2, [pc, #24]	; (8002e14 <vApplicationGetIdleTaskMemory+0x28>)
 8002dfc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	4a05      	ldr	r2, [pc, #20]	; (8002e18 <vApplicationGetIdleTaskMemory+0x2c>)
 8002e02:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2280      	movs	r2, #128	; 0x80
 8002e08:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8002e0a:	bf00      	nop
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr
 8002e14:	20000174 	.word	0x20000174
 8002e18:	200001c8 	.word	0x200001c8

08002e1c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002e1c:	b5b0      	push	{r4, r5, r7, lr}
 8002e1e:	b08e      	sub	sp, #56	; 0x38
 8002e20:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of USART_Task */
  osThreadDef(USART_Task, Start_USART_Task, osPriorityNormal, 0, 512);
 8002e22:	4b14      	ldr	r3, [pc, #80]	; (8002e74 <MX_FREERTOS_Init+0x58>)
 8002e24:	f107 041c 	add.w	r4, r7, #28
 8002e28:	461d      	mov	r5, r3
 8002e2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  USART_TaskHandle = osThreadCreate(osThread(USART_Task), NULL);
 8002e36:	f107 031c 	add.w	r3, r7, #28
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f006 ff35 	bl	8009cac <osThreadCreate>
 8002e42:	4602      	mov	r2, r0
 8002e44:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <MX_FREERTOS_Init+0x5c>)
 8002e46:	601a      	str	r2, [r3, #0]

  /* definition and creation of IMU_Task */
  osThreadDef(IMU_Task, Start_IMU_Task, osPriorityRealtime, 0, 512);
 8002e48:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <MX_FREERTOS_Init+0x60>)
 8002e4a:	463c      	mov	r4, r7
 8002e4c:	461d      	mov	r5, r3
 8002e4e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e50:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e52:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002e56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  IMU_TaskHandle = osThreadCreate(osThread(IMU_Task), NULL);
 8002e5a:	463b      	mov	r3, r7
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f006 ff24 	bl	8009cac <osThreadCreate>
 8002e64:	4602      	mov	r2, r0
 8002e66:	4b06      	ldr	r3, [pc, #24]	; (8002e80 <MX_FREERTOS_Init+0x64>)
 8002e68:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002e6a:	bf00      	nop
 8002e6c:	3738      	adds	r7, #56	; 0x38
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bdb0      	pop	{r4, r5, r7, pc}
 8002e72:	bf00      	nop
 8002e74:	0800f2dc 	.word	0x0800f2dc
 8002e78:	20003438 	.word	0x20003438
 8002e7c:	0800f304 	.word	0x0800f304
 8002e80:	20003434 	.word	0x20003434

08002e84 <Start_USART_Task>:
* @brief Function implementing the USART_Task thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_USART_Task */
void Start_USART_Task(void const *argument) {
 8002e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e86:	b08b      	sub	sp, #44	; 0x2c
 8002e88:	af08      	add	r7, sp, #32
 8002e8a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Start_USART_Task */

	/* Start receiving */
	HAL_UART_Receive_DMA(HC05_handle, Data_from_PC, DATA_FRAME_FROM_PC_SIZE);
 8002e8c:	4b19      	ldr	r3, [pc, #100]	; (8002ef4 <Start_USART_Task+0x70>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	220a      	movs	r2, #10
 8002e92:	4919      	ldr	r1, [pc, #100]	; (8002ef8 <Start_USART_Task+0x74>)
 8002e94:	4618      	mov	r0, r3
 8002e96:	f006 fa79 	bl	800938c <HAL_UART_Receive_DMA>

	/* Infinite loop */
	for (;;) {

		HC05_Fill_Data_frame_to_PC(&DT_PC, Data_to_PC,
 8002e9a:	4b18      	ldr	r3, [pc, #96]	; (8002efc <Start_USART_Task+0x78>)
 8002e9c:	f8d3 c000 	ldr.w	ip, [r3]
 8002ea0:	4b17      	ldr	r3, [pc, #92]	; (8002f00 <Start_USART_Task+0x7c>)
 8002ea2:	f8d3 e000 	ldr.w	lr, [r3]
 8002ea6:	4b17      	ldr	r3, [pc, #92]	; (8002f04 <Start_USART_Task+0x80>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a17      	ldr	r2, [pc, #92]	; (8002f08 <Start_USART_Task+0x84>)
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	4917      	ldr	r1, [pc, #92]	; (8002f0c <Start_USART_Task+0x88>)
 8002eb0:	6809      	ldr	r1, [r1, #0]
 8002eb2:	4817      	ldr	r0, [pc, #92]	; (8002f10 <Start_USART_Task+0x8c>)
 8002eb4:	6800      	ldr	r0, [r0, #0]
 8002eb6:	4c17      	ldr	r4, [pc, #92]	; (8002f14 <Start_USART_Task+0x90>)
 8002eb8:	6824      	ldr	r4, [r4, #0]
 8002eba:	4d17      	ldr	r5, [pc, #92]	; (8002f18 <Start_USART_Task+0x94>)
 8002ebc:	682d      	ldr	r5, [r5, #0]
 8002ebe:	4e17      	ldr	r6, [pc, #92]	; (8002f1c <Start_USART_Task+0x98>)
 8002ec0:	6836      	ldr	r6, [r6, #0]
 8002ec2:	9606      	str	r6, [sp, #24]
 8002ec4:	9505      	str	r5, [sp, #20]
 8002ec6:	9404      	str	r4, [sp, #16]
 8002ec8:	9003      	str	r0, [sp, #12]
 8002eca:	9102      	str	r1, [sp, #8]
 8002ecc:	9201      	str	r2, [sp, #4]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	4673      	mov	r3, lr
 8002ed2:	4662      	mov	r2, ip
 8002ed4:	4912      	ldr	r1, [pc, #72]	; (8002f20 <Start_USART_Task+0x9c>)
 8002ed6:	4813      	ldr	r0, [pc, #76]	; (8002f24 <Start_USART_Task+0xa0>)
 8002ed8:	f000 fb30 	bl	800353c <HC05_Fill_Data_frame_to_PC>
				Complementary_Roll_global, Complementary_Pitch_global, Complementary_Yaw_global,
				Kalman_Roll_global, Kalman_Pitch_global,Kalman_Yaw_global,
				Madgwick_Roll_global, Madgwick_Pitch_global,Madgwick_Yaw_global);

		HAL_UART_Transmit_DMA(HC05_handle, Data_to_PC, DATA_FRAME_TO_PC_SIZE);
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <Start_USART_Task+0x70>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2215      	movs	r2, #21
 8002ee2:	490f      	ldr	r1, [pc, #60]	; (8002f20 <Start_USART_Task+0x9c>)
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f006 f9e5 	bl	80092b4 <HAL_UART_Transmit_DMA>

		osDelay(10);
 8002eea:	200a      	movs	r0, #10
 8002eec:	f006 ff2a 	bl	8009d44 <osDelay>
		HC05_Fill_Data_frame_to_PC(&DT_PC, Data_to_PC,
 8002ef0:	e7d3      	b.n	8002e9a <Start_USART_Task+0x16>
 8002ef2:	bf00      	nop
 8002ef4:	20000020 	.word	0x20000020
 8002ef8:	2000343c 	.word	0x2000343c
 8002efc:	20000144 	.word	0x20000144
 8002f00:	20000148 	.word	0x20000148
 8002f04:	2000014c 	.word	0x2000014c
 8002f08:	20000150 	.word	0x20000150
 8002f0c:	20000154 	.word	0x20000154
 8002f10:	20000158 	.word	0x20000158
 8002f14:	2000015c 	.word	0x2000015c
 8002f18:	20000160 	.word	0x20000160
 8002f1c:	20000164 	.word	0x20000164
 8002f20:	20003448 	.word	0x20003448
 8002f24:	20003460 	.word	0x20003460

08002f28 <Start_IMU_Task>:
* @brief Function implementing the IMU_Task thread.
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_IMU_Task */
void Start_IMU_Task(void const *argument) {
 8002f28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f2c:	f5ad 7d3f 	sub.w	sp, sp, #764	; 0x2fc
 8002f30:	af02      	add	r7, sp, #8
 8002f32:	1d3b      	adds	r3, r7, #4
 8002f34:	6018      	str	r0, [r3, #0]
	/* USER CODE BEGIN Start_IMU_Task */

	/* IMU task variables */
	uint8_t mpu9250_correct_init_global = 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	f887 32ef 	strb.w	r3, [r7, #751]	; 0x2ef

	struct MPU9250 mpu1;

	uint32_t I_Time_Stop = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
	uint32_t I_Time_Start = 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0

	/* IMU task initialization */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002f48:	2120      	movs	r1, #32
 8002f4a:	484a      	ldr	r0, [pc, #296]	; (8003074 <Start_IMU_Task+0x14c>)
 8002f4c:	f004 fc5e 	bl	800780c <HAL_GPIO_TogglePin>
	osDelay(100);
 8002f50:	2064      	movs	r0, #100	; 0x64
 8002f52:	f006 fef7 	bl	8009d44 <osDelay>

	if (MPU9250_Init(&hi2c1, &mpu1, MPU9250_Device_1, MPU9250_Acce_2G,
 8002f56:	f107 0108 	add.w	r1, r7, #8
 8002f5a:	2303      	movs	r3, #3
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	2200      	movs	r2, #0
 8002f62:	4845      	ldr	r0, [pc, #276]	; (8003078 <Start_IMU_Task+0x150>)
 8002f64:	f001 fade 	bl	8004524 <MPU9250_Init>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f040 809a 	bne.w	80030a4 <Start_IMU_Task+0x17c>
			MPU9250_Gyro_2000s) == MPU9250_Init_OK) {

		//MPU9250_Set_Offsets(&hi2c1, &mpu1, 0,0,0, 0,0,0, 27.5,0.97,0.95, 1.07,1,1);

		MPU9250_Calibration_Acce(&hi2c1, &mpu1);
 8002f70:	f107 0308 	add.w	r3, r7, #8
 8002f74:	4619      	mov	r1, r3
 8002f76:	4840      	ldr	r0, [pc, #256]	; (8003078 <Start_IMU_Task+0x150>)
 8002f78:	f001 fda2 	bl	8004ac0 <MPU9250_Calibration_Acce>
		MPU9250_Calibration_Gyro(&hi2c1, &mpu1);
 8002f7c:	f107 0308 	add.w	r3, r7, #8
 8002f80:	4619      	mov	r1, r3
 8002f82:	483d      	ldr	r0, [pc, #244]	; (8003078 <Start_IMU_Task+0x150>)
 8002f84:	f001 fe0e 	bl	8004ba4 <MPU9250_Calibration_Gyro>
		//MPU9250_Calibration_Mag(&hi2c1, &mpu1);

		a_x_offset_global = mpu1.Accelerometer_X_offset, a_y_offset_global = mpu1.Accelerometer_Y_offset, a_z_offset_global = mpu1.Accelerometer_Z_offset;
 8002f88:	f107 0308 	add.w	r3, r7, #8
 8002f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8e:	4a3b      	ldr	r2, [pc, #236]	; (800307c <Start_IMU_Task+0x154>)
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	f107 0308 	add.w	r3, r7, #8
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	4a39      	ldr	r2, [pc, #228]	; (8003080 <Start_IMU_Task+0x158>)
 8002f9a:	6013      	str	r3, [r2, #0]
 8002f9c:	f107 0308 	add.w	r3, r7, #8
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa2:	4a38      	ldr	r2, [pc, #224]	; (8003084 <Start_IMU_Task+0x15c>)
 8002fa4:	6013      	str	r3, [r2, #0]
		g_x_offset_global = mpu1.Gyroscope_X_offset, g_y_offset_global = mpu1.Gyroscope_Y_offset, g_z_offset_global = mpu1.Gyroscope_Z_offset;
 8002fa6:	f107 0308 	add.w	r3, r7, #8
 8002faa:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 8002fae:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	f7fd fd5f 	bl	8000a78 <__aeabi_d2f>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	4b32      	ldr	r3, [pc, #200]	; (8003088 <Start_IMU_Task+0x160>)
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	f107 0308 	add.w	r3, r7, #8
 8002fc4:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 8002fc8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	4621      	mov	r1, r4
 8002fd0:	f7fd fd52 	bl	8000a78 <__aeabi_d2f>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	4b2d      	ldr	r3, [pc, #180]	; (800308c <Start_IMU_Task+0x164>)
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	f107 0308 	add.w	r3, r7, #8
 8002fde:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8002fe2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	4621      	mov	r1, r4
 8002fea:	f7fd fd45 	bl	8000a78 <__aeabi_d2f>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	4b27      	ldr	r3, [pc, #156]	; (8003090 <Start_IMU_Task+0x168>)
 8002ff2:	601a      	str	r2, [r3, #0]
		m_x_offset_global = mpu1.Magnetometer_X_offset, m_y_offset_global = mpu1.Magnetometer_Y_offset, m_z_offset_global = mpu1.Magnetometer_Z_offset;
 8002ff4:	f107 0308 	add.w	r3, r7, #8
 8002ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ffa:	4a26      	ldr	r2, [pc, #152]	; (8003094 <Start_IMU_Task+0x16c>)
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	f107 0308 	add.w	r3, r7, #8
 8003002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003004:	4a24      	ldr	r2, [pc, #144]	; (8003098 <Start_IMU_Task+0x170>)
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	f107 0308 	add.w	r3, r7, #8
 800300c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300e:	4a23      	ldr	r2, [pc, #140]	; (800309c <Start_IMU_Task+0x174>)
 8003010:	6013      	str	r3, [r2, #0]
		m_x_scale_global = mpu1.Magnetometer_X_scale, m_y_offset_global = mpu1.Magnetometer_Y_scale, m_z_offset_global = mpu1.Magnetometer_Z_scale;
 8003012:	f107 0308 	add.w	r3, r7, #8
 8003016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003018:	4a21      	ldr	r2, [pc, #132]	; (80030a0 <Start_IMU_Task+0x178>)
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	f107 0308 	add.w	r3, r7, #8
 8003020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003022:	4a1d      	ldr	r2, [pc, #116]	; (8003098 <Start_IMU_Task+0x170>)
 8003024:	6013      	str	r3, [r2, #0]
 8003026:	f107 0308 	add.w	r3, r7, #8
 800302a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800302c:	4a1b      	ldr	r2, [pc, #108]	; (800309c <Start_IMU_Task+0x174>)
 800302e:	6013      	str	r3, [r2, #0]

		for (int i = 0; i < 3; ++i) {
 8003030:	2300      	movs	r3, #0
 8003032:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8003036:	e014      	b.n	8003062 <Start_IMU_Task+0x13a>

			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8003038:	2201      	movs	r2, #1
 800303a:	2120      	movs	r1, #32
 800303c:	480d      	ldr	r0, [pc, #52]	; (8003074 <Start_IMU_Task+0x14c>)
 800303e:	f004 fbcd 	bl	80077dc <HAL_GPIO_WritePin>
			osDelay(200);
 8003042:	20c8      	movs	r0, #200	; 0xc8
 8003044:	f006 fe7e 	bl	8009d44 <osDelay>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003048:	2200      	movs	r2, #0
 800304a:	2120      	movs	r1, #32
 800304c:	4809      	ldr	r0, [pc, #36]	; (8003074 <Start_IMU_Task+0x14c>)
 800304e:	f004 fbc5 	bl	80077dc <HAL_GPIO_WritePin>
			osDelay(200);
 8003052:	20c8      	movs	r0, #200	; 0xc8
 8003054:	f006 fe76 	bl	8009d44 <osDelay>
		for (int i = 0; i < 3; ++i) {
 8003058:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 800305c:	3301      	adds	r3, #1
 800305e:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8003062:	f8d7 32e4 	ldr.w	r3, [r7, #740]	; 0x2e4
 8003066:	2b02      	cmp	r3, #2
 8003068:	dde6      	ble.n	8003038 <Start_IMU_Task+0x110>
		}

		mpu9250_correct_init_global = 1;
 800306a:	2301      	movs	r3, #1
 800306c:	f887 32ef 	strb.w	r3, [r7, #751]	; 0x2ef
 8003070:	e01b      	b.n	80030aa <Start_IMU_Task+0x182>
 8003072:	bf00      	nop
 8003074:	40010800 	.word	0x40010800
 8003078:	200034b8 	.word	0x200034b8
 800307c:	2000011c 	.word	0x2000011c
 8003080:	20000120 	.word	0x20000120
 8003084:	20000124 	.word	0x20000124
 8003088:	20000128 	.word	0x20000128
 800308c:	2000012c 	.word	0x2000012c
 8003090:	20000130 	.word	0x20000130
 8003094:	20000134 	.word	0x20000134
 8003098:	20000138 	.word	0x20000138
 800309c:	2000013c 	.word	0x2000013c
 80030a0:	20000140 	.word	0x20000140
	} else {

		mpu9250_correct_init_global = 0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	f887 32ef 	strb.w	r3, [r7, #751]	; 0x2ef
	}

	osDelay(100);
 80030aa:	2064      	movs	r0, #100	; 0x64
 80030ac:	f006 fe4a 	bl	8009d44 <osDelay>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80030b0:	2120      	movs	r1, #32
 80030b2:	488f      	ldr	r0, [pc, #572]	; (80032f0 <Start_IMU_Task+0x3c8>)
 80030b4:	f004 fbaa 	bl	800780c <HAL_GPIO_TogglePin>

		osDelay(10);
	}
	*/

	MPU9250_Calculate_RPY(&hi2c1, &mpu1, dt);
 80030b8:	4b8e      	ldr	r3, [pc, #568]	; (80032f4 <Start_IMU_Task+0x3cc>)
 80030ba:	cb18      	ldmia	r3, {r3, r4}
 80030bc:	f107 0108 	add.w	r1, r7, #8
 80030c0:	461a      	mov	r2, r3
 80030c2:	4623      	mov	r3, r4
 80030c4:	488c      	ldr	r0, [pc, #560]	; (80032f8 <Start_IMU_Task+0x3d0>)
 80030c6:	f001 fdf3 	bl	8004cb0 <MPU9250_Calculate_RPY>
	mpu1.Gyroscope_Roll  = mpu1.Accelerometer_Roll;
 80030ca:	f107 0308 	add.w	r3, r7, #8
 80030ce:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80030d0:	f107 0308 	add.w	r3, r7, #8
 80030d4:	671a      	str	r2, [r3, #112]	; 0x70
	mpu1.Gyroscope_Pitch = mpu1.Accelerometer_Pitch;
 80030d6:	f107 0308 	add.w	r3, r7, #8
 80030da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80030dc:	f107 0308 	add.w	r3, r7, #8
 80030e0:	675a      	str	r2, [r3, #116]	; 0x74
	mpu1.Gyroscope_Yaw   = mpu1.Magnetometer_Yaw;
 80030e2:	f107 0308 	add.w	r3, r7, #8
 80030e6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80030ea:	f107 0308 	add.w	r3, r7, #8
 80030ee:	679a      	str	r2, [r3, #120]	; 0x78
	mpu1.Magnetometer_Yaw_offset = mpu1.Magnetometer_Yaw_offset / 1000;
	*/

	/* Infinite loop */
	for (;;) {
		if (mpu9250_correct_init_global == 1) {
 80030f0:	f897 32ef 	ldrb.w	r3, [r7, #751]	; 0x2ef
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	f040 80f7 	bne.w	80032e8 <Start_IMU_Task+0x3c0>

			/* Case 1: Time measurement */
			I_Time_Start = I_Time_Stop;
 80030fa:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80030fe:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
			I_Time_Stop = HAL_GetTick();
 8003102:	f003 fe73 	bl	8006dec <HAL_GetTick>
 8003106:	f8c7 02e8 	str.w	r0, [r7, #744]	; 0x2e8

			dt = (double) (I_Time_Stop - I_Time_Start) / 1000;
 800310a:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 800310e:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	4618      	mov	r0, r3
 8003116:	f7fd f95d 	bl	80003d4 <__aeabi_ui2d>
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	4b77      	ldr	r3, [pc, #476]	; (80032fc <Start_IMU_Task+0x3d4>)
 8003120:	f7fd fafc 	bl	800071c <__aeabi_ddiv>
 8003124:	4603      	mov	r3, r0
 8003126:	460c      	mov	r4, r1
 8003128:	4a72      	ldr	r2, [pc, #456]	; (80032f4 <Start_IMU_Task+0x3cc>)
 800312a:	e9c2 3400 	strd	r3, r4, [r2]

			/* Case 2: RPY calculation */
			MPU9250_Calculate_RPY(&hi2c1, &mpu1, dt);
 800312e:	4b71      	ldr	r3, [pc, #452]	; (80032f4 <Start_IMU_Task+0x3cc>)
 8003130:	cb18      	ldmia	r3, {r3, r4}
 8003132:	f107 0108 	add.w	r1, r7, #8
 8003136:	461a      	mov	r2, r3
 8003138:	4623      	mov	r3, r4
 800313a:	486f      	ldr	r0, [pc, #444]	; (80032f8 <Start_IMU_Task+0x3d0>)
 800313c:	f001 fdb8 	bl	8004cb0 <MPU9250_Calculate_RPY>

			a_x_g_global = mpu1.Accelerometer_X_g, a_y_g_global = mpu1.Accelerometer_Y_g, a_z_g_global = mpu1.Accelerometer_Z_g;
 8003140:	f107 0308 	add.w	r3, r7, #8
 8003144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003146:	4a6e      	ldr	r2, [pc, #440]	; (8003300 <Start_IMU_Task+0x3d8>)
 8003148:	6013      	str	r3, [r2, #0]
 800314a:	f107 0308 	add.w	r3, r7, #8
 800314e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003150:	4a6c      	ldr	r2, [pc, #432]	; (8003304 <Start_IMU_Task+0x3dc>)
 8003152:	6013      	str	r3, [r2, #0]
 8003154:	f107 0308 	add.w	r3, r7, #8
 8003158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315a:	4a6b      	ldr	r2, [pc, #428]	; (8003308 <Start_IMU_Task+0x3e0>)
 800315c:	6013      	str	r3, [r2, #0]
			g_x_dgs_global = mpu1.Gyroscope_X_dgs, g_y_dgs_global = mpu1.Gyroscope_Y_dgs, g_z_dgs_global = mpu1.Gyroscope_Z_dgs;
 800315e:	f107 0308 	add.w	r3, r7, #8
 8003162:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8003166:	e9d4 3400 	ldrd	r3, r4, [r4]
 800316a:	4618      	mov	r0, r3
 800316c:	4621      	mov	r1, r4
 800316e:	f7fd fc83 	bl	8000a78 <__aeabi_d2f>
 8003172:	4602      	mov	r2, r0
 8003174:	4b65      	ldr	r3, [pc, #404]	; (800330c <Start_IMU_Task+0x3e4>)
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	f107 0308 	add.w	r3, r7, #8
 800317c:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8003180:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003184:	4618      	mov	r0, r3
 8003186:	4621      	mov	r1, r4
 8003188:	f7fd fc76 	bl	8000a78 <__aeabi_d2f>
 800318c:	4602      	mov	r2, r0
 800318e:	4b60      	ldr	r3, [pc, #384]	; (8003310 <Start_IMU_Task+0x3e8>)
 8003190:	601a      	str	r2, [r3, #0]
 8003192:	f107 0308 	add.w	r3, r7, #8
 8003196:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 800319a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800319e:	4618      	mov	r0, r3
 80031a0:	4621      	mov	r1, r4
 80031a2:	f7fd fc69 	bl	8000a78 <__aeabi_d2f>
 80031a6:	4602      	mov	r2, r0
 80031a8:	4b5a      	ldr	r3, [pc, #360]	; (8003314 <Start_IMU_Task+0x3ec>)
 80031aa:	601a      	str	r2, [r3, #0]
			m_x_uT_global = mpu1.Magnetometer_X_uT, m_y_uT_global = mpu1.Magnetometer_Y_uT, m_z_uT_global = mpu1.Magnetometer_Z_uT;
 80031ac:	f107 0308 	add.w	r3, r7, #8
 80031b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b2:	4a59      	ldr	r2, [pc, #356]	; (8003318 <Start_IMU_Task+0x3f0>)
 80031b4:	6013      	str	r3, [r2, #0]
 80031b6:	f107 0308 	add.w	r3, r7, #8
 80031ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031bc:	4a57      	ldr	r2, [pc, #348]	; (800331c <Start_IMU_Task+0x3f4>)
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	f107 0308 	add.w	r3, r7, #8
 80031c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031c6:	4a56      	ldr	r2, [pc, #344]	; (8003320 <Start_IMU_Task+0x3f8>)
 80031c8:	6013      	str	r3, [r2, #0]

			a_roll_global = mpu1.Accelerometer_Roll, a_pitch_global = mpu1.Accelerometer_Pitch;
 80031ca:	f107 0308 	add.w	r3, r7, #8
 80031ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031d0:	4a54      	ldr	r2, [pc, #336]	; (8003324 <Start_IMU_Task+0x3fc>)
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	f107 0308 	add.w	r3, r7, #8
 80031d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031da:	4a53      	ldr	r2, [pc, #332]	; (8003328 <Start_IMU_Task+0x400>)
 80031dc:	6013      	str	r3, [r2, #0]
			g_roll_global = mpu1.Gyroscope_Roll, g_pitch_global = mpu1.Gyroscope_Pitch, g_yaw_global = mpu1.Gyroscope_Yaw;
 80031de:	f107 0308 	add.w	r3, r7, #8
 80031e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e4:	4a51      	ldr	r2, [pc, #324]	; (800332c <Start_IMU_Task+0x404>)
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	f107 0308 	add.w	r3, r7, #8
 80031ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ee:	4a50      	ldr	r2, [pc, #320]	; (8003330 <Start_IMU_Task+0x408>)
 80031f0:	6013      	str	r3, [r2, #0]
 80031f2:	f107 0308 	add.w	r3, r7, #8
 80031f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031f8:	4a4e      	ldr	r2, [pc, #312]	; (8003334 <Start_IMU_Task+0x40c>)
 80031fa:	6013      	str	r3, [r2, #0]
			m_yaw_global = mpu1.Magnetometer_Yaw;
 80031fc:	f107 0308 	add.w	r3, r7, #8
 8003200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003204:	4a4c      	ldr	r2, [pc, #304]	; (8003338 <Start_IMU_Task+0x410>)
 8003206:	6013      	str	r3, [r2, #0]

			/* Case 3: Filters using */
			Complementary_filter(&mpu1, Filter_weight_RP_global, Filter_weight_Y_global, dt);
 8003208:	4b4c      	ldr	r3, [pc, #304]	; (800333c <Start_IMU_Task+0x414>)
 800320a:	681d      	ldr	r5, [r3, #0]
 800320c:	4b4c      	ldr	r3, [pc, #304]	; (8003340 <Start_IMU_Task+0x418>)
 800320e:	681e      	ldr	r6, [r3, #0]
 8003210:	4b38      	ldr	r3, [pc, #224]	; (80032f4 <Start_IMU_Task+0x3cc>)
 8003212:	cb18      	ldmia	r3, {r3, r4}
 8003214:	4618      	mov	r0, r3
 8003216:	4621      	mov	r1, r4
 8003218:	f7fd fc2e 	bl	8000a78 <__aeabi_d2f>
 800321c:	4603      	mov	r3, r0
 800321e:	f107 0008 	add.w	r0, r7, #8
 8003222:	4632      	mov	r2, r6
 8003224:	4629      	mov	r1, r5
 8003226:	f002 fbf1 	bl	8005a0c <Complementary_filter>
			Kalman_filter(&mpu1,
 800322a:	4b46      	ldr	r3, [pc, #280]	; (8003344 <Start_IMU_Task+0x41c>)
 800322c:	681e      	ldr	r6, [r3, #0]
 800322e:	4b46      	ldr	r3, [pc, #280]	; (8003348 <Start_IMU_Task+0x420>)
 8003230:	f8d3 8000 	ldr.w	r8, [r3]
 8003234:	4b45      	ldr	r3, [pc, #276]	; (800334c <Start_IMU_Task+0x424>)
 8003236:	f8d3 9000 	ldr.w	r9, [r3]
 800323a:	4b45      	ldr	r3, [pc, #276]	; (8003350 <Start_IMU_Task+0x428>)
 800323c:	681d      	ldr	r5, [r3, #0]
 800323e:	4b2d      	ldr	r3, [pc, #180]	; (80032f4 <Start_IMU_Task+0x3cc>)
 8003240:	cb18      	ldmia	r3, {r3, r4}
 8003242:	4618      	mov	r0, r3
 8003244:	4621      	mov	r1, r4
 8003246:	f7fd fc17 	bl	8000a78 <__aeabi_d2f>
 800324a:	4603      	mov	r3, r0
 800324c:	f107 0008 	add.w	r0, r7, #8
 8003250:	9301      	str	r3, [sp, #4]
 8003252:	9500      	str	r5, [sp, #0]
 8003254:	464b      	mov	r3, r9
 8003256:	4642      	mov	r2, r8
 8003258:	4631      	mov	r1, r6
 800325a:	f002 fccc 	bl	8005bf6 <Kalman_filter>
						  Kalman_filter_process_variance_RP, Kalman_filter_measure_variance_RP,
						  Kalman_filter_process_variance_Y, Kalman_filter_measure_variance_Y,
						  dt);
			Madgwick_filter(&mpu1, Madgwick_filter_beta, dt);
 800325e:	4b3d      	ldr	r3, [pc, #244]	; (8003354 <Start_IMU_Task+0x42c>)
 8003260:	681d      	ldr	r5, [r3, #0]
 8003262:	4b24      	ldr	r3, [pc, #144]	; (80032f4 <Start_IMU_Task+0x3cc>)
 8003264:	cb18      	ldmia	r3, {r3, r4}
 8003266:	4618      	mov	r0, r3
 8003268:	4621      	mov	r1, r4
 800326a:	f7fd fc05 	bl	8000a78 <__aeabi_d2f>
 800326e:	4602      	mov	r2, r0
 8003270:	f107 0308 	add.w	r3, r7, #8
 8003274:	4629      	mov	r1, r5
 8003276:	4618      	mov	r0, r3
 8003278:	f002 fd72 	bl	8005d60 <Madgwick_filter>

			//Complementary_Roll_global  = mpu1.Complementary_filter_Roll;
			//Complementary_Pitch_global = mpu1.Complementary_filter_Pitch;
			//Complementary_Yaw_global   = mpu1.Complementary_filter_Yaw;

			Complementary_Roll_global  = mpu1.Gyroscope_euler.roll;
 800327c:	f107 0308 	add.w	r3, r7, #8
 8003280:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003284:	4a34      	ldr	r2, [pc, #208]	; (8003358 <Start_IMU_Task+0x430>)
 8003286:	6013      	str	r3, [r2, #0]
			Complementary_Pitch_global = mpu1.Gyroscope_euler.pitch;
 8003288:	f107 0308 	add.w	r3, r7, #8
 800328c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8003290:	4a32      	ldr	r2, [pc, #200]	; (800335c <Start_IMU_Task+0x434>)
 8003292:	6013      	str	r3, [r2, #0]
			Complementary_Yaw_global   = mpu1.Gyroscope_euler.yaw;
 8003294:	f107 0308 	add.w	r3, r7, #8
 8003298:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800329c:	4a30      	ldr	r2, [pc, #192]	; (8003360 <Start_IMU_Task+0x438>)
 800329e:	6013      	str	r3, [r2, #0]

			//Complementary_Roll_global  = mpu1.Gyroscope_Roll;
			//Complementary_Pitch_global = mpu1.Gyroscope_Pitch;
			//Complementary_Yaw_global   = mpu1.Gyroscope_Yaw;

			Kalman_Roll_global  = mpu1.Kalman_filter_Roll;
 80032a0:	f107 0308 	add.w	r3, r7, #8
 80032a4:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80032a8:	4a2e      	ldr	r2, [pc, #184]	; (8003364 <Start_IMU_Task+0x43c>)
 80032aa:	6013      	str	r3, [r2, #0]
			Kalman_Pitch_global = mpu1.Kalman_filter_Pitch;
 80032ac:	f107 0308 	add.w	r3, r7, #8
 80032b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80032b4:	4a2c      	ldr	r2, [pc, #176]	; (8003368 <Start_IMU_Task+0x440>)
 80032b6:	6013      	str	r3, [r2, #0]
			Kalman_Yaw_global   = mpu1.Kalman_filter_Yaw /*- mpu1.Magnetometer_Yaw_offset*/;
 80032b8:	f107 0308 	add.w	r3, r7, #8
 80032bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80032c0:	4a2a      	ldr	r2, [pc, #168]	; (800336c <Start_IMU_Task+0x444>)
 80032c2:	6013      	str	r3, [r2, #0]

			Madgwick_Roll_global  = mpu1.Madgwick_filter_Roll;
 80032c4:	f107 0308 	add.w	r3, r7, #8
 80032c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80032cc:	4a28      	ldr	r2, [pc, #160]	; (8003370 <Start_IMU_Task+0x448>)
 80032ce:	6013      	str	r3, [r2, #0]
			Madgwick_Pitch_global = mpu1.Madgwick_filter_Pitch;
 80032d0:	f107 0308 	add.w	r3, r7, #8
 80032d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80032d8:	4a26      	ldr	r2, [pc, #152]	; (8003374 <Start_IMU_Task+0x44c>)
 80032da:	6013      	str	r3, [r2, #0]
			Madgwick_Yaw_global   = mpu1.Madgwick_filter_Yaw /*- mpu1.Magnetometer_Yaw_offset*/;
 80032dc:	f107 0308 	add.w	r3, r7, #8
 80032e0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80032e4:	4a24      	ldr	r2, [pc, #144]	; (8003378 <Start_IMU_Task+0x450>)
 80032e6:	6013      	str	r3, [r2, #0]
		}

		osDelay(10);
 80032e8:	200a      	movs	r0, #10
 80032ea:	f006 fd2b 	bl	8009d44 <osDelay>
		if (mpu9250_correct_init_global == 1) {
 80032ee:	e6ff      	b.n	80030f0 <Start_IMU_Task+0x1c8>
 80032f0:	40010800 	.word	0x40010800
 80032f4:	20000168 	.word	0x20000168
 80032f8:	200034b8 	.word	0x200034b8
 80032fc:	408f4000 	.word	0x408f4000
 8003300:	200000e0 	.word	0x200000e0
 8003304:	200000e4 	.word	0x200000e4
 8003308:	200000e8 	.word	0x200000e8
 800330c:	200000ec 	.word	0x200000ec
 8003310:	200000f0 	.word	0x200000f0
 8003314:	200000f4 	.word	0x200000f4
 8003318:	200000f8 	.word	0x200000f8
 800331c:	200000fc 	.word	0x200000fc
 8003320:	20000100 	.word	0x20000100
 8003324:	20000104 	.word	0x20000104
 8003328:	20000108 	.word	0x20000108
 800332c:	2000010c 	.word	0x2000010c
 8003330:	20000110 	.word	0x20000110
 8003334:	20000114 	.word	0x20000114
 8003338:	20000118 	.word	0x20000118
 800333c:	20000004 	.word	0x20000004
 8003340:	20000008 	.word	0x20000008
 8003344:	2000000c 	.word	0x2000000c
 8003348:	20000010 	.word	0x20000010
 800334c:	20000014 	.word	0x20000014
 8003350:	20000018 	.word	0x20000018
 8003354:	2000001c 	.word	0x2000001c
 8003358:	20000144 	.word	0x20000144
 800335c:	20000148 	.word	0x20000148
 8003360:	2000014c 	.word	0x2000014c
 8003364:	20000150 	.word	0x20000150
 8003368:	20000154 	.word	0x20000154
 800336c:	20000158 	.word	0x20000158
 8003370:	2000015c 	.word	0x2000015c
 8003374:	20000160 	.word	0x20000160
 8003378:	20000164 	.word	0x20000164

0800337c <HAL_UART_RxCpltCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
     
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART1) {
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a0f      	ldr	r2, [pc, #60]	; (80033c8 <HAL_UART_RxCpltCallback+0x4c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d117      	bne.n	80033be <HAL_UART_RxCpltCallback+0x42>

		HAL_UART_Receive_DMA(HC05_handle, Data_from_PC, DATA_FRAME_FROM_PC_SIZE);
 800338e:	4b0f      	ldr	r3, [pc, #60]	; (80033cc <HAL_UART_RxCpltCallback+0x50>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	220a      	movs	r2, #10
 8003394:	490e      	ldr	r1, [pc, #56]	; (80033d0 <HAL_UART_RxCpltCallback+0x54>)
 8003396:	4618      	mov	r0, r3
 8003398:	f005 fff8 	bl	800938c <HAL_UART_Receive_DMA>

		if( HC05_Parse_Data_frame(&DF_PC, Data_from_PC) == 0 ) {
 800339c:	490c      	ldr	r1, [pc, #48]	; (80033d0 <HAL_UART_RxCpltCallback+0x54>)
 800339e:	480d      	ldr	r0, [pc, #52]	; (80033d4 <HAL_UART_RxCpltCallback+0x58>)
 80033a0:	f000 fa44 	bl	800382c <HC05_Parse_Data_frame>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d109      	bne.n	80033be <HAL_UART_RxCpltCallback+0x42>

			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80033aa:	2120      	movs	r1, #32
 80033ac:	480a      	ldr	r0, [pc, #40]	; (80033d8 <HAL_UART_RxCpltCallback+0x5c>)
 80033ae:	f004 fa2d 	bl	800780c <HAL_GPIO_TogglePin>
			//Kalman_filter_measure_variance = DF_PC.Kalman_filter_measure_variance;

			//Madgwick_filter_beta           = (float) DF_PC.Madgwick_filter_beta / 1000;

			/* Additional data from PC */
			Which_filter_global = DF_PC.Which_filter;
 80033b2:	4b08      	ldr	r3, [pc, #32]	; (80033d4 <HAL_UART_RxCpltCallback+0x58>)
 80033b4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	4b08      	ldr	r3, [pc, #32]	; (80033dc <HAL_UART_RxCpltCallback+0x60>)
 80033bc:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80033be:	bf00      	nop
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40013800 	.word	0x40013800
 80033cc:	20000020 	.word	0x20000020
 80033d0:	2000343c 	.word	0x2000343c
 80033d4:	20003424 	.word	0x20003424
 80033d8:	40010800 	.word	0x40010800
 80033dc:	20000170 	.word	0x20000170

080033e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e6:	f107 0310 	add.w	r3, r7, #16
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	605a      	str	r2, [r3, #4]
 80033f0:	609a      	str	r2, [r3, #8]
 80033f2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033f4:	4b2d      	ldr	r3, [pc, #180]	; (80034ac <MX_GPIO_Init+0xcc>)
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	4a2c      	ldr	r2, [pc, #176]	; (80034ac <MX_GPIO_Init+0xcc>)
 80033fa:	f043 0310 	orr.w	r3, r3, #16
 80033fe:	6193      	str	r3, [r2, #24]
 8003400:	4b2a      	ldr	r3, [pc, #168]	; (80034ac <MX_GPIO_Init+0xcc>)
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	f003 0310 	and.w	r3, r3, #16
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800340c:	4b27      	ldr	r3, [pc, #156]	; (80034ac <MX_GPIO_Init+0xcc>)
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	4a26      	ldr	r2, [pc, #152]	; (80034ac <MX_GPIO_Init+0xcc>)
 8003412:	f043 0320 	orr.w	r3, r3, #32
 8003416:	6193      	str	r3, [r2, #24]
 8003418:	4b24      	ldr	r3, [pc, #144]	; (80034ac <MX_GPIO_Init+0xcc>)
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	f003 0320 	and.w	r3, r3, #32
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003424:	4b21      	ldr	r3, [pc, #132]	; (80034ac <MX_GPIO_Init+0xcc>)
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	4a20      	ldr	r2, [pc, #128]	; (80034ac <MX_GPIO_Init+0xcc>)
 800342a:	f043 0304 	orr.w	r3, r3, #4
 800342e:	6193      	str	r3, [r2, #24]
 8003430:	4b1e      	ldr	r3, [pc, #120]	; (80034ac <MX_GPIO_Init+0xcc>)
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	607b      	str	r3, [r7, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800343c:	4b1b      	ldr	r3, [pc, #108]	; (80034ac <MX_GPIO_Init+0xcc>)
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	4a1a      	ldr	r2, [pc, #104]	; (80034ac <MX_GPIO_Init+0xcc>)
 8003442:	f043 0308 	orr.w	r3, r3, #8
 8003446:	6193      	str	r3, [r2, #24]
 8003448:	4b18      	ldr	r3, [pc, #96]	; (80034ac <MX_GPIO_Init+0xcc>)
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	f003 0308 	and.w	r3, r3, #8
 8003450:	603b      	str	r3, [r7, #0]
 8003452:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003454:	2200      	movs	r2, #0
 8003456:	2120      	movs	r1, #32
 8003458:	4815      	ldr	r0, [pc, #84]	; (80034b0 <MX_GPIO_Init+0xd0>)
 800345a:	f004 f9bf 	bl	80077dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800345e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003464:	4b13      	ldr	r3, [pc, #76]	; (80034b4 <MX_GPIO_Init+0xd4>)
 8003466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003468:	2300      	movs	r3, #0
 800346a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800346c:	f107 0310 	add.w	r3, r7, #16
 8003470:	4619      	mov	r1, r3
 8003472:	4811      	ldr	r0, [pc, #68]	; (80034b8 <MX_GPIO_Init+0xd8>)
 8003474:	f004 f858 	bl	8007528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8003478:	2320      	movs	r3, #32
 800347a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800347c:	2301      	movs	r3, #1
 800347e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003480:	2300      	movs	r3, #0
 8003482:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003484:	2302      	movs	r3, #2
 8003486:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8003488:	f107 0310 	add.w	r3, r7, #16
 800348c:	4619      	mov	r1, r3
 800348e:	4808      	ldr	r0, [pc, #32]	; (80034b0 <MX_GPIO_Init+0xd0>)
 8003490:	f004 f84a 	bl	8007528 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003494:	2200      	movs	r2, #0
 8003496:	2105      	movs	r1, #5
 8003498:	2028      	movs	r0, #40	; 0x28
 800349a:	f003 fdaa 	bl	8006ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800349e:	2028      	movs	r0, #40	; 0x28
 80034a0:	f003 fdc3 	bl	800702a <HAL_NVIC_EnableIRQ>

}
 80034a4:	bf00      	nop
 80034a6:	3720      	adds	r7, #32
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	40021000 	.word	0x40021000
 80034b0:	40010800 	.word	0x40010800
 80034b4:	10110000 	.word	0x10110000
 80034b8:	40011000 	.word	0x40011000

080034bc <HC05_Divide_int16>:

#include "hc05.h"

/* --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

uint8_t HC05_Divide_int16(int16_t _data, uint8_t _which_byte) {
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	4603      	mov	r3, r0
 80034c4:	460a      	mov	r2, r1
 80034c6:	80fb      	strh	r3, [r7, #6]
 80034c8:	4613      	mov	r3, r2
 80034ca:	717b      	strb	r3, [r7, #5]

	if(_which_byte == 'L') {
 80034cc:	797b      	ldrb	r3, [r7, #5]
 80034ce:	2b4c      	cmp	r3, #76	; 0x4c
 80034d0:	d102      	bne.n	80034d8 <HC05_Divide_int16+0x1c>

		return (_data & 0xFF); // return lower byte
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	e009      	b.n	80034ec <HC05_Divide_int16+0x30>
	}
	else if(_which_byte == 'H'){
 80034d8:	797b      	ldrb	r3, [r7, #5]
 80034da:	2b48      	cmp	r3, #72	; 0x48
 80034dc:	d105      	bne.n	80034ea <HC05_Divide_int16+0x2e>

		return (_data >> 8);   // return higher byte
 80034de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034e2:	121b      	asrs	r3, r3, #8
 80034e4:	b21b      	sxth	r3, r3
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	e000      	b.n	80034ec <HC05_Divide_int16+0x30>
	}

	return 0;
 80034ea:	2300      	movs	r3, #0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr

080034f6 <HC05_Merge_bytes>:

/* --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

int16_t HC05_Merge_bytes(uint8_t _lower_byte, uint8_t _higher_byte) {
 80034f6:	b480      	push	{r7}
 80034f8:	b085      	sub	sp, #20
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	4603      	mov	r3, r0
 80034fe:	460a      	mov	r2, r1
 8003500:	71fb      	strb	r3, [r7, #7]
 8003502:	4613      	mov	r3, r2
 8003504:	71bb      	strb	r3, [r7, #6]

	int16_t uint16t_byte = ( (_higher_byte << 8) + _lower_byte );
 8003506:	79bb      	ldrb	r3, [r7, #6]
 8003508:	b29b      	uxth	r3, r3
 800350a:	021b      	lsls	r3, r3, #8
 800350c:	b29a      	uxth	r2, r3
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	b29b      	uxth	r3, r3
 8003512:	4413      	add	r3, r2
 8003514:	b29b      	uxth	r3, r3
 8003516:	81fb      	strh	r3, [r7, #14]

	if(uint16t_byte >= 32767) {
 8003518:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800351c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003520:	4293      	cmp	r3, r2
 8003522:	d104      	bne.n	800352e <HC05_Merge_bytes+0x38>

		int16_t int_byte = uint16t_byte - ( 2 * 32768);
 8003524:	89fb      	ldrh	r3, [r7, #14]
 8003526:	81bb      	strh	r3, [r7, #12]
		return int_byte;
 8003528:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800352c:	e001      	b.n	8003532 <HC05_Merge_bytes+0x3c>
	}
	else  return uint16t_byte;
 800352e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

	return 0;
}
 8003532:	4618      	mov	r0, r3
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	bc80      	pop	{r7}
 800353a:	4770      	bx	lr

0800353c <HC05_Fill_Data_frame_to_PC>:
/* --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

void HC05_Fill_Data_frame_to_PC(struct Data_frame_to_PC *_data, uint8_t *_frame,
							    float Complementary_Roll, float Complementary_Pitch, float Complementary_Yaw,
								float Kalman_Roll, float Kalman_Pitch, float Kalman_Yaw,
								float Madgwick_Roll, float Madgwick_Pitch, float Madgwick_Yaw) {
 800353c:	b590      	push	{r4, r7, lr}
 800353e:	b085      	sub	sp, #20
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	603b      	str	r3, [r7, #0]

	/* Complementary filter data */
	_frame[0] = HC05_Divide_int16(Complementary_Roll * 100, 'L');
 800354a:	49b6      	ldr	r1, [pc, #728]	; (8003824 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7fd fbf1 	bl	8000d34 <__aeabi_fmul>
 8003552:	4603      	mov	r3, r0
 8003554:	4618      	mov	r0, r3
 8003556:	f7fd fdc9 	bl	80010ec <__aeabi_f2iz>
 800355a:	4603      	mov	r3, r0
 800355c:	b21b      	sxth	r3, r3
 800355e:	214c      	movs	r1, #76	; 0x4c
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff ffab 	bl	80034bc <HC05_Divide_int16>
 8003566:	4603      	mov	r3, r0
 8003568:	461a      	mov	r2, r3
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	701a      	strb	r2, [r3, #0]
	_frame[1] = HC05_Divide_int16(Complementary_Roll * 100, 'H');
 800356e:	49ad      	ldr	r1, [pc, #692]	; (8003824 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7fd fbdf 	bl	8000d34 <__aeabi_fmul>
 8003576:	4603      	mov	r3, r0
 8003578:	4618      	mov	r0, r3
 800357a:	f7fd fdb7 	bl	80010ec <__aeabi_f2iz>
 800357e:	4603      	mov	r3, r0
 8003580:	b21a      	sxth	r2, r3
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	1c5c      	adds	r4, r3, #1
 8003586:	2148      	movs	r1, #72	; 0x48
 8003588:	4610      	mov	r0, r2
 800358a:	f7ff ff97 	bl	80034bc <HC05_Divide_int16>
 800358e:	4603      	mov	r3, r0
 8003590:	7023      	strb	r3, [r4, #0]

	_frame[2] = HC05_Divide_int16(Complementary_Pitch * 100, 'L');
 8003592:	49a4      	ldr	r1, [pc, #656]	; (8003824 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 8003594:	6838      	ldr	r0, [r7, #0]
 8003596:	f7fd fbcd 	bl	8000d34 <__aeabi_fmul>
 800359a:	4603      	mov	r3, r0
 800359c:	4618      	mov	r0, r3
 800359e:	f7fd fda5 	bl	80010ec <__aeabi_f2iz>
 80035a2:	4603      	mov	r3, r0
 80035a4:	b21a      	sxth	r2, r3
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	1c9c      	adds	r4, r3, #2
 80035aa:	214c      	movs	r1, #76	; 0x4c
 80035ac:	4610      	mov	r0, r2
 80035ae:	f7ff ff85 	bl	80034bc <HC05_Divide_int16>
 80035b2:	4603      	mov	r3, r0
 80035b4:	7023      	strb	r3, [r4, #0]
	_frame[3] = HC05_Divide_int16(Complementary_Pitch * 100, 'H');
 80035b6:	499b      	ldr	r1, [pc, #620]	; (8003824 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 80035b8:	6838      	ldr	r0, [r7, #0]
 80035ba:	f7fd fbbb 	bl	8000d34 <__aeabi_fmul>
 80035be:	4603      	mov	r3, r0
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7fd fd93 	bl	80010ec <__aeabi_f2iz>
 80035c6:	4603      	mov	r3, r0
 80035c8:	b21a      	sxth	r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	1cdc      	adds	r4, r3, #3
 80035ce:	2148      	movs	r1, #72	; 0x48
 80035d0:	4610      	mov	r0, r2
 80035d2:	f7ff ff73 	bl	80034bc <HC05_Divide_int16>
 80035d6:	4603      	mov	r3, r0
 80035d8:	7023      	strb	r3, [r4, #0]

	_frame[4] = HC05_Divide_int16(Complementary_Yaw * 100, 'L');
 80035da:	4992      	ldr	r1, [pc, #584]	; (8003824 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 80035dc:	6a38      	ldr	r0, [r7, #32]
 80035de:	f7fd fba9 	bl	8000d34 <__aeabi_fmul>
 80035e2:	4603      	mov	r3, r0
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fd fd81 	bl	80010ec <__aeabi_f2iz>
 80035ea:	4603      	mov	r3, r0
 80035ec:	b21a      	sxth	r2, r3
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	1d1c      	adds	r4, r3, #4
 80035f2:	214c      	movs	r1, #76	; 0x4c
 80035f4:	4610      	mov	r0, r2
 80035f6:	f7ff ff61 	bl	80034bc <HC05_Divide_int16>
 80035fa:	4603      	mov	r3, r0
 80035fc:	7023      	strb	r3, [r4, #0]
	_frame[5] = HC05_Divide_int16(Complementary_Yaw * 100, 'H');
 80035fe:	4989      	ldr	r1, [pc, #548]	; (8003824 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 8003600:	6a38      	ldr	r0, [r7, #32]
 8003602:	f7fd fb97 	bl	8000d34 <__aeabi_fmul>
 8003606:	4603      	mov	r3, r0
 8003608:	4618      	mov	r0, r3
 800360a:	f7fd fd6f 	bl	80010ec <__aeabi_f2iz>
 800360e:	4603      	mov	r3, r0
 8003610:	b21a      	sxth	r2, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	1d5c      	adds	r4, r3, #5
 8003616:	2148      	movs	r1, #72	; 0x48
 8003618:	4610      	mov	r0, r2
 800361a:	f7ff ff4f 	bl	80034bc <HC05_Divide_int16>
 800361e:	4603      	mov	r3, r0
 8003620:	7023      	strb	r3, [r4, #0]

	/* Complementary filter data */
	_frame[6] = HC05_Divide_int16(Kalman_Roll * 100, 'L');
 8003622:	4980      	ldr	r1, [pc, #512]	; (8003824 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 8003624:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003626:	f7fd fb85 	bl	8000d34 <__aeabi_fmul>
 800362a:	4603      	mov	r3, r0
 800362c:	4618      	mov	r0, r3
 800362e:	f7fd fd5d 	bl	80010ec <__aeabi_f2iz>
 8003632:	4603      	mov	r3, r0
 8003634:	b21a      	sxth	r2, r3
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	1d9c      	adds	r4, r3, #6
 800363a:	214c      	movs	r1, #76	; 0x4c
 800363c:	4610      	mov	r0, r2
 800363e:	f7ff ff3d 	bl	80034bc <HC05_Divide_int16>
 8003642:	4603      	mov	r3, r0
 8003644:	7023      	strb	r3, [r4, #0]
	_frame[7] = HC05_Divide_int16(Kalman_Roll * 100, 'H');
 8003646:	4977      	ldr	r1, [pc, #476]	; (8003824 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 8003648:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800364a:	f7fd fb73 	bl	8000d34 <__aeabi_fmul>
 800364e:	4603      	mov	r3, r0
 8003650:	4618      	mov	r0, r3
 8003652:	f7fd fd4b 	bl	80010ec <__aeabi_f2iz>
 8003656:	4603      	mov	r3, r0
 8003658:	b21a      	sxth	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	1ddc      	adds	r4, r3, #7
 800365e:	2148      	movs	r1, #72	; 0x48
 8003660:	4610      	mov	r0, r2
 8003662:	f7ff ff2b 	bl	80034bc <HC05_Divide_int16>
 8003666:	4603      	mov	r3, r0
 8003668:	7023      	strb	r3, [r4, #0]

	_frame[8] = HC05_Divide_int16(Kalman_Pitch * 100, 'L');
 800366a:	496e      	ldr	r1, [pc, #440]	; (8003824 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 800366c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800366e:	f7fd fb61 	bl	8000d34 <__aeabi_fmul>
 8003672:	4603      	mov	r3, r0
 8003674:	4618      	mov	r0, r3
 8003676:	f7fd fd39 	bl	80010ec <__aeabi_f2iz>
 800367a:	4603      	mov	r3, r0
 800367c:	b21a      	sxth	r2, r3
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f103 0408 	add.w	r4, r3, #8
 8003684:	214c      	movs	r1, #76	; 0x4c
 8003686:	4610      	mov	r0, r2
 8003688:	f7ff ff18 	bl	80034bc <HC05_Divide_int16>
 800368c:	4603      	mov	r3, r0
 800368e:	7023      	strb	r3, [r4, #0]
	_frame[9] = HC05_Divide_int16(Kalman_Pitch * 100, 'H');
 8003690:	4964      	ldr	r1, [pc, #400]	; (8003824 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 8003692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003694:	f7fd fb4e 	bl	8000d34 <__aeabi_fmul>
 8003698:	4603      	mov	r3, r0
 800369a:	4618      	mov	r0, r3
 800369c:	f7fd fd26 	bl	80010ec <__aeabi_f2iz>
 80036a0:	4603      	mov	r3, r0
 80036a2:	b21a      	sxth	r2, r3
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	f103 0409 	add.w	r4, r3, #9
 80036aa:	2148      	movs	r1, #72	; 0x48
 80036ac:	4610      	mov	r0, r2
 80036ae:	f7ff ff05 	bl	80034bc <HC05_Divide_int16>
 80036b2:	4603      	mov	r3, r0
 80036b4:	7023      	strb	r3, [r4, #0]

	_frame[10] = HC05_Divide_int16(Kalman_Yaw * 100, 'L');
 80036b6:	495b      	ldr	r1, [pc, #364]	; (8003824 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 80036b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036ba:	f7fd fb3b 	bl	8000d34 <__aeabi_fmul>
 80036be:	4603      	mov	r3, r0
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fd fd13 	bl	80010ec <__aeabi_f2iz>
 80036c6:	4603      	mov	r3, r0
 80036c8:	b21a      	sxth	r2, r3
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f103 040a 	add.w	r4, r3, #10
 80036d0:	214c      	movs	r1, #76	; 0x4c
 80036d2:	4610      	mov	r0, r2
 80036d4:	f7ff fef2 	bl	80034bc <HC05_Divide_int16>
 80036d8:	4603      	mov	r3, r0
 80036da:	7023      	strb	r3, [r4, #0]
	_frame[11] = HC05_Divide_int16(Kalman_Yaw * 100, 'H');
 80036dc:	4951      	ldr	r1, [pc, #324]	; (8003824 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 80036de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80036e0:	f7fd fb28 	bl	8000d34 <__aeabi_fmul>
 80036e4:	4603      	mov	r3, r0
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fd fd00 	bl	80010ec <__aeabi_f2iz>
 80036ec:	4603      	mov	r3, r0
 80036ee:	b21a      	sxth	r2, r3
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f103 040b 	add.w	r4, r3, #11
 80036f6:	2148      	movs	r1, #72	; 0x48
 80036f8:	4610      	mov	r0, r2
 80036fa:	f7ff fedf 	bl	80034bc <HC05_Divide_int16>
 80036fe:	4603      	mov	r3, r0
 8003700:	7023      	strb	r3, [r4, #0]

	/* Complementary filter data */
	_frame[12] = HC05_Divide_int16(Madgwick_Roll * 100, 'L');
 8003702:	4948      	ldr	r1, [pc, #288]	; (8003824 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 8003704:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003706:	f7fd fb15 	bl	8000d34 <__aeabi_fmul>
 800370a:	4603      	mov	r3, r0
 800370c:	4618      	mov	r0, r3
 800370e:	f7fd fced 	bl	80010ec <__aeabi_f2iz>
 8003712:	4603      	mov	r3, r0
 8003714:	b21a      	sxth	r2, r3
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	f103 040c 	add.w	r4, r3, #12
 800371c:	214c      	movs	r1, #76	; 0x4c
 800371e:	4610      	mov	r0, r2
 8003720:	f7ff fecc 	bl	80034bc <HC05_Divide_int16>
 8003724:	4603      	mov	r3, r0
 8003726:	7023      	strb	r3, [r4, #0]
	_frame[13] = HC05_Divide_int16(Madgwick_Roll * 100, 'H');
 8003728:	493e      	ldr	r1, [pc, #248]	; (8003824 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 800372a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800372c:	f7fd fb02 	bl	8000d34 <__aeabi_fmul>
 8003730:	4603      	mov	r3, r0
 8003732:	4618      	mov	r0, r3
 8003734:	f7fd fcda 	bl	80010ec <__aeabi_f2iz>
 8003738:	4603      	mov	r3, r0
 800373a:	b21a      	sxth	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	f103 040d 	add.w	r4, r3, #13
 8003742:	2148      	movs	r1, #72	; 0x48
 8003744:	4610      	mov	r0, r2
 8003746:	f7ff feb9 	bl	80034bc <HC05_Divide_int16>
 800374a:	4603      	mov	r3, r0
 800374c:	7023      	strb	r3, [r4, #0]

	_frame[14] = HC05_Divide_int16(Madgwick_Pitch * 100, 'L');
 800374e:	4935      	ldr	r1, [pc, #212]	; (8003824 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 8003750:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003752:	f7fd faef 	bl	8000d34 <__aeabi_fmul>
 8003756:	4603      	mov	r3, r0
 8003758:	4618      	mov	r0, r3
 800375a:	f7fd fcc7 	bl	80010ec <__aeabi_f2iz>
 800375e:	4603      	mov	r3, r0
 8003760:	b21a      	sxth	r2, r3
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f103 040e 	add.w	r4, r3, #14
 8003768:	214c      	movs	r1, #76	; 0x4c
 800376a:	4610      	mov	r0, r2
 800376c:	f7ff fea6 	bl	80034bc <HC05_Divide_int16>
 8003770:	4603      	mov	r3, r0
 8003772:	7023      	strb	r3, [r4, #0]
	_frame[15] = HC05_Divide_int16(Madgwick_Pitch * 100, 'H');
 8003774:	492b      	ldr	r1, [pc, #172]	; (8003824 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 8003776:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003778:	f7fd fadc 	bl	8000d34 <__aeabi_fmul>
 800377c:	4603      	mov	r3, r0
 800377e:	4618      	mov	r0, r3
 8003780:	f7fd fcb4 	bl	80010ec <__aeabi_f2iz>
 8003784:	4603      	mov	r3, r0
 8003786:	b21a      	sxth	r2, r3
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f103 040f 	add.w	r4, r3, #15
 800378e:	2148      	movs	r1, #72	; 0x48
 8003790:	4610      	mov	r0, r2
 8003792:	f7ff fe93 	bl	80034bc <HC05_Divide_int16>
 8003796:	4603      	mov	r3, r0
 8003798:	7023      	strb	r3, [r4, #0]

	_frame[16] = HC05_Divide_int16(Madgwick_Yaw * 100, 'L');
 800379a:	4922      	ldr	r1, [pc, #136]	; (8003824 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 800379c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800379e:	f7fd fac9 	bl	8000d34 <__aeabi_fmul>
 80037a2:	4603      	mov	r3, r0
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fd fca1 	bl	80010ec <__aeabi_f2iz>
 80037aa:	4603      	mov	r3, r0
 80037ac:	b21a      	sxth	r2, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	f103 0410 	add.w	r4, r3, #16
 80037b4:	214c      	movs	r1, #76	; 0x4c
 80037b6:	4610      	mov	r0, r2
 80037b8:	f7ff fe80 	bl	80034bc <HC05_Divide_int16>
 80037bc:	4603      	mov	r3, r0
 80037be:	7023      	strb	r3, [r4, #0]
	_frame[17] = HC05_Divide_int16(Madgwick_Yaw * 100, 'H');
 80037c0:	4918      	ldr	r1, [pc, #96]	; (8003824 <HC05_Fill_Data_frame_to_PC+0x2e8>)
 80037c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80037c4:	f7fd fab6 	bl	8000d34 <__aeabi_fmul>
 80037c8:	4603      	mov	r3, r0
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fd fc8e 	bl	80010ec <__aeabi_f2iz>
 80037d0:	4603      	mov	r3, r0
 80037d2:	b21a      	sxth	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	f103 0411 	add.w	r4, r3, #17
 80037da:	2148      	movs	r1, #72	; 0x48
 80037dc:	4610      	mov	r0, r2
 80037de:	f7ff fe6d 	bl	80034bc <HC05_Divide_int16>
 80037e2:	4603      	mov	r3, r0
 80037e4:	7023      	strb	r3, [r4, #0]

	_frame[18] = HC05_Divide_int16(32768, 'L');
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	f103 0412 	add.w	r4, r3, #18
 80037ec:	214c      	movs	r1, #76	; 0x4c
 80037ee:	480e      	ldr	r0, [pc, #56]	; (8003828 <HC05_Fill_Data_frame_to_PC+0x2ec>)
 80037f0:	f7ff fe64 	bl	80034bc <HC05_Divide_int16>
 80037f4:	4603      	mov	r3, r0
 80037f6:	7023      	strb	r3, [r4, #0]
	_frame[19] = HC05_Divide_int16(32768, 'H');
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	f103 0413 	add.w	r4, r3, #19
 80037fe:	2148      	movs	r1, #72	; 0x48
 8003800:	4809      	ldr	r0, [pc, #36]	; (8003828 <HC05_Fill_Data_frame_to_PC+0x2ec>)
 8003802:	f7ff fe5b 	bl	80034bc <HC05_Divide_int16>
 8003806:	4603      	mov	r3, r0
 8003808:	7023      	strb	r3, [r4, #0]

	/* CRC */
	_frame[20] = CRC8_DataArray(_frame, DATA_FRAME_TO_PC_SIZE - 1);
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f103 0414 	add.w	r4, r3, #20
 8003810:	2114      	movs	r1, #20
 8003812:	68b8      	ldr	r0, [r7, #8]
 8003814:	f7ff fa92 	bl	8002d3c <CRC8_DataArray>
 8003818:	4603      	mov	r3, r0
 800381a:	7023      	strb	r3, [r4, #0]
}
 800381c:	bf00      	nop
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	bd90      	pop	{r4, r7, pc}
 8003824:	42c80000 	.word	0x42c80000
 8003828:	ffff8000 	.word	0xffff8000

0800382c <HC05_Parse_Data_frame>:

/* --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

int HC05_Parse_Data_frame(struct Data_frame_from_PC *_data, uint8_t *_frame) {
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]

	uint8_t Actual_CRC = 0;
 8003836:	2300      	movs	r3, #0
 8003838:	73fb      	strb	r3, [r7, #15]
	uint8_t Received_CRC = 0;
 800383a:	2300      	movs	r3, #0
 800383c:	73bb      	strb	r3, [r7, #14]

	/* Filters data */
	_data->Complementary_filter_weight = HC05_Merge_bytes(_frame[0], _frame[1]);
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	781a      	ldrb	r2, [r3, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	3301      	adds	r3, #1
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	4619      	mov	r1, r3
 800384a:	4610      	mov	r0, r2
 800384c:	f7ff fe53 	bl	80034f6 <HC05_Merge_bytes>
 8003850:	4603      	mov	r3, r0
 8003852:	461a      	mov	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	801a      	strh	r2, [r3, #0]
	_data->Kalman_filter_process_variance = HC05_Merge_bytes(_frame[2], _frame[3]);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	3302      	adds	r3, #2
 800385c:	781a      	ldrb	r2, [r3, #0]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	3303      	adds	r3, #3
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	4619      	mov	r1, r3
 8003866:	4610      	mov	r0, r2
 8003868:	f7ff fe45 	bl	80034f6 <HC05_Merge_bytes>
 800386c:	4603      	mov	r3, r0
 800386e:	461a      	mov	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	805a      	strh	r2, [r3, #2]
	_data->Kalman_filter_measure_variance = HC05_Merge_bytes(_frame[4], _frame[5]);
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	3304      	adds	r3, #4
 8003878:	781a      	ldrb	r2, [r3, #0]
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	3305      	adds	r3, #5
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	4619      	mov	r1, r3
 8003882:	4610      	mov	r0, r2
 8003884:	f7ff fe37 	bl	80034f6 <HC05_Merge_bytes>
 8003888:	4603      	mov	r3, r0
 800388a:	461a      	mov	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	809a      	strh	r2, [r3, #4]
	_data->Madgwick_filter_beta = HC05_Merge_bytes(_frame[6], _frame[7]);
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	3306      	adds	r3, #6
 8003894:	781a      	ldrb	r2, [r3, #0]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	3307      	adds	r3, #7
 800389a:	781b      	ldrb	r3, [r3, #0]
 800389c:	4619      	mov	r1, r3
 800389e:	4610      	mov	r0, r2
 80038a0:	f7ff fe29 	bl	80034f6 <HC05_Merge_bytes>
 80038a4:	4603      	mov	r3, r0
 80038a6:	461a      	mov	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	80da      	strh	r2, [r3, #6]

	/* Additional data */
	_data->Which_filter = _frame[8];
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	3308      	adds	r3, #8
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	b25a      	sxtb	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	731a      	strb	r2, [r3, #12]

	/* CRC test */
	Received_CRC = _frame[9];
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	7a5b      	ldrb	r3, [r3, #9]
 80038bc:	73bb      	strb	r3, [r7, #14]
	Actual_CRC = CRC8_DataArray(_frame, DATA_FRAME_FROM_PC_SIZE - 1);
 80038be:	2109      	movs	r1, #9
 80038c0:	6838      	ldr	r0, [r7, #0]
 80038c2:	f7ff fa3b 	bl	8002d3c <CRC8_DataArray>
 80038c6:	4603      	mov	r3, r0
 80038c8:	73fb      	strb	r3, [r7, #15]

	if( Actual_CRC != Received_CRC ) {
 80038ca:	7bfa      	ldrb	r2, [r7, #15]
 80038cc:	7bbb      	ldrb	r3, [r7, #14]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d002      	beq.n	80038d8 <HC05_Parse_Data_frame+0xac>

		return -1;
 80038d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038d6:	e000      	b.n	80038da <HC05_Parse_Data_frame+0xae>
	}

	return 0;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80038e8:	4b12      	ldr	r3, [pc, #72]	; (8003934 <MX_I2C1_Init+0x50>)
 80038ea:	4a13      	ldr	r2, [pc, #76]	; (8003938 <MX_I2C1_Init+0x54>)
 80038ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80038ee:	4b11      	ldr	r3, [pc, #68]	; (8003934 <MX_I2C1_Init+0x50>)
 80038f0:	4a12      	ldr	r2, [pc, #72]	; (800393c <MX_I2C1_Init+0x58>)
 80038f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80038f4:	4b0f      	ldr	r3, [pc, #60]	; (8003934 <MX_I2C1_Init+0x50>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80038fa:	4b0e      	ldr	r3, [pc, #56]	; (8003934 <MX_I2C1_Init+0x50>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003900:	4b0c      	ldr	r3, [pc, #48]	; (8003934 <MX_I2C1_Init+0x50>)
 8003902:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003906:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003908:	4b0a      	ldr	r3, [pc, #40]	; (8003934 <MX_I2C1_Init+0x50>)
 800390a:	2200      	movs	r2, #0
 800390c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800390e:	4b09      	ldr	r3, [pc, #36]	; (8003934 <MX_I2C1_Init+0x50>)
 8003910:	2200      	movs	r2, #0
 8003912:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003914:	4b07      	ldr	r3, [pc, #28]	; (8003934 <MX_I2C1_Init+0x50>)
 8003916:	2200      	movs	r2, #0
 8003918:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800391a:	4b06      	ldr	r3, [pc, #24]	; (8003934 <MX_I2C1_Init+0x50>)
 800391c:	2200      	movs	r2, #0
 800391e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003920:	4804      	ldr	r0, [pc, #16]	; (8003934 <MX_I2C1_Init+0x50>)
 8003922:	f003 ffad 	bl	8007880 <HAL_I2C_Init>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800392c:	f000 fbd2 	bl	80040d4 <Error_Handler>
  }

}
 8003930:	bf00      	nop
 8003932:	bd80      	pop	{r7, pc}
 8003934:	200034b8 	.word	0x200034b8
 8003938:	40005400 	.word	0x40005400
 800393c:	000186a0 	.word	0x000186a0

08003940 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003948:	f107 0310 	add.w	r3, r7, #16
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	605a      	str	r2, [r3, #4]
 8003952:	609a      	str	r2, [r3, #8]
 8003954:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a3b      	ldr	r2, [pc, #236]	; (8003a48 <HAL_I2C_MspInit+0x108>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d16f      	bne.n	8003a40 <HAL_I2C_MspInit+0x100>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003960:	4b3a      	ldr	r3, [pc, #232]	; (8003a4c <HAL_I2C_MspInit+0x10c>)
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	4a39      	ldr	r2, [pc, #228]	; (8003a4c <HAL_I2C_MspInit+0x10c>)
 8003966:	f043 0308 	orr.w	r3, r3, #8
 800396a:	6193      	str	r3, [r2, #24]
 800396c:	4b37      	ldr	r3, [pc, #220]	; (8003a4c <HAL_I2C_MspInit+0x10c>)
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	f003 0308 	and.w	r3, r3, #8
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = I2C1_MPU9250_SCL_Pin|I2C1_MPU9250_SDA_Pin;
 8003978:	23c0      	movs	r3, #192	; 0xc0
 800397a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800397c:	2312      	movs	r3, #18
 800397e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003980:	2303      	movs	r3, #3
 8003982:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003984:	f107 0310 	add.w	r3, r7, #16
 8003988:	4619      	mov	r1, r3
 800398a:	4831      	ldr	r0, [pc, #196]	; (8003a50 <HAL_I2C_MspInit+0x110>)
 800398c:	f003 fdcc 	bl	8007528 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003990:	4b2e      	ldr	r3, [pc, #184]	; (8003a4c <HAL_I2C_MspInit+0x10c>)
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	4a2d      	ldr	r2, [pc, #180]	; (8003a4c <HAL_I2C_MspInit+0x10c>)
 8003996:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800399a:	61d3      	str	r3, [r2, #28]
 800399c:	4b2b      	ldr	r3, [pc, #172]	; (8003a4c <HAL_I2C_MspInit+0x10c>)
 800399e:	69db      	ldr	r3, [r3, #28]
 80039a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	68bb      	ldr	r3, [r7, #8]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80039a8:	4b2a      	ldr	r3, [pc, #168]	; (8003a54 <HAL_I2C_MspInit+0x114>)
 80039aa:	4a2b      	ldr	r2, [pc, #172]	; (8003a58 <HAL_I2C_MspInit+0x118>)
 80039ac:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80039ae:	4b29      	ldr	r3, [pc, #164]	; (8003a54 <HAL_I2C_MspInit+0x114>)
 80039b0:	2200      	movs	r2, #0
 80039b2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80039b4:	4b27      	ldr	r3, [pc, #156]	; (8003a54 <HAL_I2C_MspInit+0x114>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80039ba:	4b26      	ldr	r3, [pc, #152]	; (8003a54 <HAL_I2C_MspInit+0x114>)
 80039bc:	2280      	movs	r2, #128	; 0x80
 80039be:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039c0:	4b24      	ldr	r3, [pc, #144]	; (8003a54 <HAL_I2C_MspInit+0x114>)
 80039c2:	2200      	movs	r2, #0
 80039c4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039c6:	4b23      	ldr	r3, [pc, #140]	; (8003a54 <HAL_I2C_MspInit+0x114>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80039cc:	4b21      	ldr	r3, [pc, #132]	; (8003a54 <HAL_I2C_MspInit+0x114>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039d2:	4b20      	ldr	r3, [pc, #128]	; (8003a54 <HAL_I2C_MspInit+0x114>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80039d8:	481e      	ldr	r0, [pc, #120]	; (8003a54 <HAL_I2C_MspInit+0x114>)
 80039da:	f003 fb41 	bl	8007060 <HAL_DMA_Init>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 80039e4:	f000 fb76 	bl	80040d4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a1a      	ldr	r2, [pc, #104]	; (8003a54 <HAL_I2C_MspInit+0x114>)
 80039ec:	639a      	str	r2, [r3, #56]	; 0x38
 80039ee:	4a19      	ldr	r2, [pc, #100]	; (8003a54 <HAL_I2C_MspInit+0x114>)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80039f4:	4b19      	ldr	r3, [pc, #100]	; (8003a5c <HAL_I2C_MspInit+0x11c>)
 80039f6:	4a1a      	ldr	r2, [pc, #104]	; (8003a60 <HAL_I2C_MspInit+0x120>)
 80039f8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80039fa:	4b18      	ldr	r3, [pc, #96]	; (8003a5c <HAL_I2C_MspInit+0x11c>)
 80039fc:	2210      	movs	r2, #16
 80039fe:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a00:	4b16      	ldr	r3, [pc, #88]	; (8003a5c <HAL_I2C_MspInit+0x11c>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003a06:	4b15      	ldr	r3, [pc, #84]	; (8003a5c <HAL_I2C_MspInit+0x11c>)
 8003a08:	2280      	movs	r2, #128	; 0x80
 8003a0a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a0c:	4b13      	ldr	r3, [pc, #76]	; (8003a5c <HAL_I2C_MspInit+0x11c>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a12:	4b12      	ldr	r3, [pc, #72]	; (8003a5c <HAL_I2C_MspInit+0x11c>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003a18:	4b10      	ldr	r3, [pc, #64]	; (8003a5c <HAL_I2C_MspInit+0x11c>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003a1e:	4b0f      	ldr	r3, [pc, #60]	; (8003a5c <HAL_I2C_MspInit+0x11c>)
 8003a20:	2200      	movs	r2, #0
 8003a22:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003a24:	480d      	ldr	r0, [pc, #52]	; (8003a5c <HAL_I2C_MspInit+0x11c>)
 8003a26:	f003 fb1b 	bl	8007060 <HAL_DMA_Init>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 8003a30:	f000 fb50 	bl	80040d4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a09      	ldr	r2, [pc, #36]	; (8003a5c <HAL_I2C_MspInit+0x11c>)
 8003a38:	635a      	str	r2, [r3, #52]	; 0x34
 8003a3a:	4a08      	ldr	r2, [pc, #32]	; (8003a5c <HAL_I2C_MspInit+0x11c>)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003a40:	bf00      	nop
 8003a42:	3720      	adds	r7, #32
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	40005400 	.word	0x40005400
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	40010c00 	.word	0x40010c00
 8003a54:	2000350c 	.word	0x2000350c
 8003a58:	40020080 	.word	0x40020080
 8003a5c:	20003474 	.word	0x20003474
 8003a60:	4002006c 	.word	0x4002006c

08003a64 <Kalman_filter_init>:

#include "kalman.h"

/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

void Kalman_filter_init(struct Kalman *k, double q, double r) {
 8003a64:	b490      	push	{r4, r7}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	e9c7 2300 	strd	r2, r3, [r7]

	// stan
	k->stan_theta = 0;
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	f04f 0300 	mov.w	r3, #0
 8003a76:	f04f 0400 	mov.w	r4, #0
 8003a7a:	e9c2 3400 	strd	r3, r4, [r2]
	k->stan_omega = 0;
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	f04f 0300 	mov.w	r3, #0
 8003a84:	f04f 0400 	mov.w	r4, #0
 8003a88:	e9c2 3402 	strd	r3, r4, [r2, #8]
	k->stan_pomiar_theta = 0;
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	f04f 0300 	mov.w	r3, #0
 8003a92:	f04f 0400 	mov.w	r4, #0
 8003a96:	e9c2 3404 	strd	r3, r4, [r2, #16]
	k->stan_pomiar_omega = 0;
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	f04f 0300 	mov.w	r3, #0
 8003aa0:	f04f 0400 	mov.w	r4, #0
 8003aa4:	e9c2 3406 	strd	r3, r4, [r2, #24]

	// kalman
	k->kalman_Q = q;
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003aae:	e9c2 3408 	strd	r3, r4, [r2, #32]
	k->kalman_R = r;
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003ab8:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	k->kalman_theta = 0;
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	f04f 0300 	mov.w	r3, #0
 8003ac2:	f04f 0400 	mov.w	r4, #0
 8003ac6:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	k->kalman_omega = 0;
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	f04f 0300 	mov.w	r3, #0
 8003ad0:	f04f 0400 	mov.w	r4, #0
 8003ad4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	k->kalman_g_bias = 0;
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	f04f 0300 	mov.w	r3, #0
 8003ade:	f04f 0400 	mov.w	r4, #0
 8003ae2:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

	k->kalman_P11 = k->kalman_R;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8003aec:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	k->kalman_P13 = 0;
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	f04f 0300 	mov.w	r3, #0
 8003afc:	f04f 0400 	mov.w	r4, #0
 8003b00:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	k->kalman_P21 = 0;
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	f04f 0400 	mov.w	r4, #0
 8003b0e:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	k->kalman_P31 = 0;
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	f04f 0300 	mov.w	r3, #0
 8003b18:	f04f 0400 	mov.w	r4, #0
 8003b1c:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	k->kalman_P33 = 0;
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	f04f 0300 	mov.w	r3, #0
 8003b26:	f04f 0400 	mov.w	r4, #0
 8003b2a:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	k->kalman_K1 = 0;
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	f04f 0300 	mov.w	r3, #0
 8003b34:	f04f 0400 	mov.w	r4, #0
 8003b38:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	k->kalman_K2 = 0;
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	f04f 0300 	mov.w	r3, #0
 8003b42:	f04f 0400 	mov.w	r4, #0
 8003b46:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	k->kalman_K3 = 0;
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	f04f 0300 	mov.w	r3, #0
 8003b50:	f04f 0400 	mov.w	r4, #0
 8003b54:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 8003b58:	bf00      	nop
 8003b5a:	3710      	adds	r7, #16
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bc90      	pop	{r4, r7}
 8003b60:	4770      	bx	lr
	...

08003b64 <Kalman_filter_calculate>:

/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

float Kalman_filter_calculate(struct Kalman *k, float Acce, float Gyro, float dt) {
 8003b64:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b68:	b084      	sub	sp, #16
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	607a      	str	r2, [r7, #4]
 8003b72:	603b      	str	r3, [r7, #0]

	// pomiar
	k->stan_pomiar_theta = Acce;
 8003b74:	68b8      	ldr	r0, [r7, #8]
 8003b76:	f7fc fc4f 	bl	8000418 <__aeabi_f2d>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	460c      	mov	r4, r1
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	e9c2 3404 	strd	r3, r4, [r2, #16]
	k->stan_pomiar_omega = Gyro;
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7fc fc47 	bl	8000418 <__aeabi_f2d>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	460c      	mov	r4, r1
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	e9c2 3406 	strd	r3, r4, [r2, #24]

	// predykcja
	k->kalman_theta = k->kalman_theta + ( k->stan_pomiar_omega - k->kalman_g_bias ) * dt;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003ba6:	f7fc fad7 	bl	8000158 <__aeabi_dsub>
 8003baa:	4602      	mov	r2, r0
 8003bac:	460b      	mov	r3, r1
 8003bae:	4690      	mov	r8, r2
 8003bb0:	4699      	mov	r9, r3
 8003bb2:	6838      	ldr	r0, [r7, #0]
 8003bb4:	f7fc fc30 	bl	8000418 <__aeabi_f2d>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4640      	mov	r0, r8
 8003bbe:	4649      	mov	r1, r9
 8003bc0:	f7fc fc82 	bl	80004c8 <__aeabi_dmul>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	4620      	mov	r0, r4
 8003bca:	4629      	mov	r1, r5
 8003bcc:	f7fc fac6 	bl	800015c <__adddf3>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	460c      	mov	r4, r1
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	k->kalman_omega = k->stan_pomiar_omega - k->kalman_g_bias;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8003be6:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003bea:	461a      	mov	r2, r3
 8003bec:	4623      	mov	r3, r4
 8003bee:	f7fc fab3 	bl	8000158 <__aeabi_dsub>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	460c      	mov	r4, r1
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	k->kalman_P11 = k->kalman_P11 - k->kalman_P31 * dt + k->kalman_P33 * dt * dt - k->kalman_P13 * dt + k->kalman_Q;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	e9d3 8918 	ldrd	r8, r9, [r3, #96]	; 0x60
 8003c08:	6838      	ldr	r0, [r7, #0]
 8003c0a:	f7fc fc05 	bl	8000418 <__aeabi_f2d>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4640      	mov	r0, r8
 8003c14:	4649      	mov	r1, r9
 8003c16:	f7fc fc57 	bl	80004c8 <__aeabi_dmul>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4620      	mov	r0, r4
 8003c20:	4629      	mov	r1, r5
 8003c22:	f7fc fa99 	bl	8000158 <__aeabi_dsub>
 8003c26:	4603      	mov	r3, r0
 8003c28:	460c      	mov	r4, r1
 8003c2a:	4698      	mov	r8, r3
 8003c2c:	46a1      	mov	r9, r4
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	e9d3 451a 	ldrd	r4, r5, [r3, #104]	; 0x68
 8003c34:	6838      	ldr	r0, [r7, #0]
 8003c36:	f7fc fbef 	bl	8000418 <__aeabi_f2d>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4620      	mov	r0, r4
 8003c40:	4629      	mov	r1, r5
 8003c42:	f7fc fc41 	bl	80004c8 <__aeabi_dmul>
 8003c46:	4603      	mov	r3, r0
 8003c48:	460c      	mov	r4, r1
 8003c4a:	4625      	mov	r5, r4
 8003c4c:	461c      	mov	r4, r3
 8003c4e:	6838      	ldr	r0, [r7, #0]
 8003c50:	f7fc fbe2 	bl	8000418 <__aeabi_f2d>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4620      	mov	r0, r4
 8003c5a:	4629      	mov	r1, r5
 8003c5c:	f7fc fc34 	bl	80004c8 <__aeabi_dmul>
 8003c60:	4603      	mov	r3, r0
 8003c62:	460c      	mov	r4, r1
 8003c64:	461a      	mov	r2, r3
 8003c66:	4623      	mov	r3, r4
 8003c68:	4640      	mov	r0, r8
 8003c6a:	4649      	mov	r1, r9
 8003c6c:	f7fc fa76 	bl	800015c <__adddf3>
 8003c70:	4603      	mov	r3, r0
 8003c72:	460c      	mov	r4, r1
 8003c74:	4698      	mov	r8, r3
 8003c76:	46a1      	mov	r9, r4
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8003c7e:	6838      	ldr	r0, [r7, #0]
 8003c80:	f7fc fbca 	bl	8000418 <__aeabi_f2d>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4620      	mov	r0, r4
 8003c8a:	4629      	mov	r1, r5
 8003c8c:	f7fc fc1c 	bl	80004c8 <__aeabi_dmul>
 8003c90:	4603      	mov	r3, r0
 8003c92:	460c      	mov	r4, r1
 8003c94:	461a      	mov	r2, r3
 8003c96:	4623      	mov	r3, r4
 8003c98:	4640      	mov	r0, r8
 8003c9a:	4649      	mov	r1, r9
 8003c9c:	f7fc fa5c 	bl	8000158 <__aeabi_dsub>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	460c      	mov	r4, r1
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f103 0420 	add.w	r4, r3, #32
 8003cae:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	4623      	mov	r3, r4
 8003cb6:	f7fc fa51 	bl	800015c <__adddf3>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	460c      	mov	r4, r1
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	k->kalman_P13 = k->kalman_P13 - k->kalman_P33 * dt;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 8003cd0:	6838      	ldr	r0, [r7, #0]
 8003cd2:	f7fc fba1 	bl	8000418 <__aeabi_f2d>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4640      	mov	r0, r8
 8003cdc:	4649      	mov	r1, r9
 8003cde:	f7fc fbf3 	bl	80004c8 <__aeabi_dmul>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	4629      	mov	r1, r5
 8003cea:	f7fc fa35 	bl	8000158 <__aeabi_dsub>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	460c      	mov	r4, r1
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	k->kalman_P21 = k->kalman_P33 * dt - k->kalman_P31;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	e9d3 451a 	ldrd	r4, r5, [r3, #104]	; 0x68
 8003cfe:	6838      	ldr	r0, [r7, #0]
 8003d00:	f7fc fb8a 	bl	8000418 <__aeabi_f2d>
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	4620      	mov	r0, r4
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	f7fc fbdc 	bl	80004c8 <__aeabi_dmul>
 8003d10:	4603      	mov	r3, r0
 8003d12:	460c      	mov	r4, r1
 8003d14:	4618      	mov	r0, r3
 8003d16:	4621      	mov	r1, r4
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8003d1e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003d22:	461a      	mov	r2, r3
 8003d24:	4623      	mov	r3, r4
 8003d26:	f7fc fa17 	bl	8000158 <__aeabi_dsub>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	460c      	mov	r4, r1
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	k->kalman_P31 = k->kalman_P31 - k->kalman_P33 * dt;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	; 0x60
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 8003d40:	6838      	ldr	r0, [r7, #0]
 8003d42:	f7fc fb69 	bl	8000418 <__aeabi_f2d>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4640      	mov	r0, r8
 8003d4c:	4649      	mov	r1, r9
 8003d4e:	f7fc fbbb 	bl	80004c8 <__aeabi_dmul>
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4620      	mov	r0, r4
 8003d58:	4629      	mov	r1, r5
 8003d5a:	f7fc f9fd 	bl	8000158 <__aeabi_dsub>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	460c      	mov	r4, r1
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	k->kalman_P33 = k->kalman_P33 + k->kalman_Q;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f103 0420 	add.w	r4, r3, #32
 8003d74:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4623      	mov	r3, r4
 8003d7c:	f7fc f9ee 	bl	800015c <__adddf3>
 8003d80:	4603      	mov	r3, r0
 8003d82:	460c      	mov	r4, r1
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	// korekcja
	k->kalman_K1 = k->kalman_P11 * ( 1 / ( k->kalman_P11 + k->kalman_R ) );
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	e9d3 4512 	ldrd	r4, r5, [r3, #72]	; 0x48
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003d9c:	f7fc f9de 	bl	800015c <__adddf3>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	f04f 0000 	mov.w	r0, #0
 8003da8:	499f      	ldr	r1, [pc, #636]	; (8004028 <Kalman_filter_calculate+0x4c4>)
 8003daa:	f7fc fcb7 	bl	800071c <__aeabi_ddiv>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	4620      	mov	r0, r4
 8003db4:	4629      	mov	r1, r5
 8003db6:	f7fc fb87 	bl	80004c8 <__aeabi_dmul>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	460c      	mov	r4, r1
 8003dbe:	68fa      	ldr	r2, [r7, #12]
 8003dc0:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70
	k->kalman_K2 = k->kalman_P21 * ( 1 / ( k->kalman_P11 + k->kalman_R ) );
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003dd6:	f7fc f9c1 	bl	800015c <__adddf3>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	f04f 0000 	mov.w	r0, #0
 8003de2:	4991      	ldr	r1, [pc, #580]	; (8004028 <Kalman_filter_calculate+0x4c4>)
 8003de4:	f7fc fc9a 	bl	800071c <__aeabi_ddiv>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4620      	mov	r0, r4
 8003dee:	4629      	mov	r1, r5
 8003df0:	f7fc fb6a 	bl	80004c8 <__aeabi_dmul>
 8003df4:	4603      	mov	r3, r0
 8003df6:	460c      	mov	r4, r1
 8003df8:	68fa      	ldr	r2, [r7, #12]
 8003dfa:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	k->kalman_K3 = k->kalman_P31 * ( 1 / ( k->kalman_P11 + k->kalman_R ) );
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	; 0x60
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003e10:	f7fc f9a4 	bl	800015c <__adddf3>
 8003e14:	4602      	mov	r2, r0
 8003e16:	460b      	mov	r3, r1
 8003e18:	f04f 0000 	mov.w	r0, #0
 8003e1c:	4982      	ldr	r1, [pc, #520]	; (8004028 <Kalman_filter_calculate+0x4c4>)
 8003e1e:	f7fc fc7d 	bl	800071c <__aeabi_ddiv>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4620      	mov	r0, r4
 8003e28:	4629      	mov	r1, r5
 8003e2a:	f7fc fb4d 	bl	80004c8 <__aeabi_dmul>
 8003e2e:	4603      	mov	r3, r0
 8003e30:	460c      	mov	r4, r1
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80

	k->kalman_theta  = k->kalman_theta  + k->kalman_K1 * ( k->stan_pomiar_theta - k->kalman_theta);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	e9d3 891c 	ldrd	r8, r9, [r3, #112]	; 0x70
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003e50:	f7fc f982 	bl	8000158 <__aeabi_dsub>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4640      	mov	r0, r8
 8003e5a:	4649      	mov	r1, r9
 8003e5c:	f7fc fb34 	bl	80004c8 <__aeabi_dmul>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4620      	mov	r0, r4
 8003e66:	4629      	mov	r1, r5
 8003e68:	f7fc f978 	bl	800015c <__adddf3>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	460c      	mov	r4, r1
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	k->kalman_omega  = k->kalman_omega  + k->kalman_K2 * ( k->stan_pomiar_theta - k->kalman_theta);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	e9d3 891e 	ldrd	r8, r9, [r3, #120]	; 0x78
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003e8e:	f7fc f963 	bl	8000158 <__aeabi_dsub>
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	4640      	mov	r0, r8
 8003e98:	4649      	mov	r1, r9
 8003e9a:	f7fc fb15 	bl	80004c8 <__aeabi_dmul>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	4629      	mov	r1, r5
 8003ea6:	f7fc f959 	bl	800015c <__adddf3>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	460c      	mov	r4, r1
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	k->kalman_g_bias = k->kalman_g_bias + k->kalman_K3 * ( k->stan_pomiar_theta - k->kalman_theta);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	e9d3 8920 	ldrd	r8, r9, [r3, #128]	; 0x80
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8003ecc:	f7fc f944 	bl	8000158 <__aeabi_dsub>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4640      	mov	r0, r8
 8003ed6:	4649      	mov	r1, r9
 8003ed8:	f7fc faf6 	bl	80004c8 <__aeabi_dmul>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	4629      	mov	r1, r5
 8003ee4:	f7fc f93a 	bl	800015c <__adddf3>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	460c      	mov	r4, r1
 8003eec:	68fa      	ldr	r2, [r7, #12]
 8003eee:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

	// a posteriori
	k->kalman_P11 = ( 1 - k->kalman_K1 ) * k->kalman_P11;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8003ef8:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003efc:	461a      	mov	r2, r3
 8003efe:	4623      	mov	r3, r4
 8003f00:	f04f 0000 	mov.w	r0, #0
 8003f04:	4948      	ldr	r1, [pc, #288]	; (8004028 <Kalman_filter_calculate+0x4c4>)
 8003f06:	f7fc f927 	bl	8000158 <__aeabi_dsub>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	460c      	mov	r4, r1
 8003f0e:	4618      	mov	r0, r3
 8003f10:	4621      	mov	r1, r4
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f103 0448 	add.w	r4, r3, #72	; 0x48
 8003f18:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	4623      	mov	r3, r4
 8003f20:	f7fc fad2 	bl	80004c8 <__aeabi_dmul>
 8003f24:	4603      	mov	r3, r0
 8003f26:	460c      	mov	r4, r1
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48
	k->kalman_P13 = ( 1 - k->kalman_K1 ) * k->kalman_P13;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8003f34:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	4623      	mov	r3, r4
 8003f3c:	f04f 0000 	mov.w	r0, #0
 8003f40:	4939      	ldr	r1, [pc, #228]	; (8004028 <Kalman_filter_calculate+0x4c4>)
 8003f42:	f7fc f909 	bl	8000158 <__aeabi_dsub>
 8003f46:	4603      	mov	r3, r0
 8003f48:	460c      	mov	r4, r1
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	4621      	mov	r1, r4
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8003f54:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	4623      	mov	r3, r4
 8003f5c:	f7fc fab4 	bl	80004c8 <__aeabi_dmul>
 8003f60:	4603      	mov	r3, r0
 8003f62:	460c      	mov	r4, r1
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	k->kalman_P21 = k->kalman_P21 - k->kalman_P11 * k->kalman_K2;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	e9d3 4516 	ldrd	r4, r5, [r3, #88]	; 0x58
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003f7c:	f7fc faa4 	bl	80004c8 <__aeabi_dmul>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4620      	mov	r0, r4
 8003f86:	4629      	mov	r1, r5
 8003f88:	f7fc f8e6 	bl	8000158 <__aeabi_dsub>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	460c      	mov	r4, r1
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	k->kalman_P31 = k->kalman_P31 - k->kalman_P11 * k->kalman_K3;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	e9d3 4518 	ldrd	r4, r5, [r3, #96]	; 0x60
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003fa8:	f7fc fa8e 	bl	80004c8 <__aeabi_dmul>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	4629      	mov	r1, r5
 8003fb4:	f7fc f8d0 	bl	8000158 <__aeabi_dsub>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	460c      	mov	r4, r1
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	k->kalman_P33 = k->kalman_P33 - k->kalman_P13 * k->kalman_K3;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	e9d3 451a 	ldrd	r4, r5, [r3, #104]	; 0x68
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003fd4:	f7fc fa78 	bl	80004c8 <__aeabi_dmul>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	460b      	mov	r3, r1
 8003fdc:	4620      	mov	r0, r4
 8003fde:	4629      	mov	r1, r5
 8003fe0:	f7fc f8ba 	bl	8000158 <__aeabi_dsub>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	460c      	mov	r4, r1
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68

	// aktualizacja wektora stanu
	k->stan_theta = k->kalman_theta;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8003ff4:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	e9c2 3400 	strd	r3, r4, [r2]
	k->stan_omega = k->kalman_omega;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8004004:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004008:	68fa      	ldr	r2, [r7, #12]
 800400a:	e9c2 3402 	strd	r3, r4, [r2, #8]

	return k->stan_theta;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	cb18      	ldmia	r3, {r3, r4}
 8004012:	4618      	mov	r0, r3
 8004014:	4621      	mov	r1, r4
 8004016:	f7fc fd2f 	bl	8000a78 <__aeabi_d2f>
 800401a:	4603      	mov	r3, r0
}
 800401c:	4618      	mov	r0, r3
 800401e:	3710      	adds	r7, #16
 8004020:	46bd      	mov	sp, r7
 8004022:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004026:	bf00      	nop
 8004028:	3ff00000 	.word	0x3ff00000

0800402c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004030:	f002 fe84 	bl	8006d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004034:	f000 f80d 	bl	8004052 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004038:	f7ff f9d2 	bl	80033e0 <MX_GPIO_Init>
  MX_DMA_Init();
 800403c:	f7fe fea0 	bl	8002d80 <MX_DMA_Init>
  MX_I2C1_Init();
 8004040:	f7ff fc50 	bl	80038e4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8004044:	f002 fd80 	bl	8006b48 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8004048:	f7fe fee8 	bl	8002e1c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800404c:	f005 fe27 	bl	8009c9e <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004050:	e7fe      	b.n	8004050 <main+0x24>

08004052 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b090      	sub	sp, #64	; 0x40
 8004056:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004058:	f107 0318 	add.w	r3, r7, #24
 800405c:	2228      	movs	r2, #40	; 0x28
 800405e:	2100      	movs	r1, #0
 8004060:	4618      	mov	r0, r3
 8004062:	f007 f809 	bl	800b078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004066:	1d3b      	adds	r3, r7, #4
 8004068:	2200      	movs	r2, #0
 800406a:	601a      	str	r2, [r3, #0]
 800406c:	605a      	str	r2, [r3, #4]
 800406e:	609a      	str	r2, [r3, #8]
 8004070:	60da      	str	r2, [r3, #12]
 8004072:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004074:	2302      	movs	r3, #2
 8004076:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004078:	2301      	movs	r3, #1
 800407a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800407c:	2310      	movs	r3, #16
 800407e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004080:	2302      	movs	r3, #2
 8004082:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8004084:	2300      	movs	r3, #0
 8004086:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8004088:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800408c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800408e:	f107 0318 	add.w	r3, r7, #24
 8004092:	4618      	mov	r0, r3
 8004094:	f004 fca4 	bl	80089e0 <HAL_RCC_OscConfig>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800409e:	f000 f819 	bl	80040d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80040a2:	230f      	movs	r3, #15
 80040a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80040a6:	2302      	movs	r3, #2
 80040a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80040ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80040b4:	2300      	movs	r3, #0
 80040b6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80040b8:	1d3b      	adds	r3, r7, #4
 80040ba:	2102      	movs	r1, #2
 80040bc:	4618      	mov	r0, r3
 80040be:	f004 ff0f 	bl	8008ee0 <HAL_RCC_ClockConfig>
 80040c2:	4603      	mov	r3, r0
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d001      	beq.n	80040cc <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80040c8:	f000 f804 	bl	80040d4 <Error_Handler>
  }
}
 80040cc:	bf00      	nop
 80040ce:	3740      	adds	r7, #64	; 0x40
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}

080040d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80040d4:	b480      	push	{r7}
 80040d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80040d8:	bf00      	nop
 80040da:	46bd      	mov	sp, r7
 80040dc:	bc80      	pop	{r7}
 80040de:	4770      	bx	lr

080040e0 <MPU9250_Accelerometer_Configuration>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

MPU9250_Error_code MPU9250_Accelerometer_Configuration(I2C_HandleTypeDef *I2Cx,
													   struct MPU9250 *DataStructure,
													   MPU9250_Acce_range Range) {
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08a      	sub	sp, #40	; 0x28
 80040e4:	af04      	add	r7, sp, #16
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	4613      	mov	r3, r2
 80040ec:	71fb      	strb	r3, [r7, #7]

	uint8_t Byte_temp = 0x00;
 80040ee:	2300      	movs	r3, #0
 80040f0:	75fb      	strb	r3, [r7, #23]

	/* Case 1: Set accelerometer sensitivity range */
	Byte_temp = Range << 3;
 80040f2:	79fb      	ldrb	r3, [r7, #7]
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	75fb      	strb	r3, [r7, #23]

	if( HAL_I2C_Mem_Write(I2Cx, DataStructure->Device_addres, MPU9250_ACCEL_CONFIG, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	785b      	ldrb	r3, [r3, #1]
 80040fe:	b299      	uxth	r1, r3
 8004100:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004104:	9302      	str	r3, [sp, #8]
 8004106:	2301      	movs	r3, #1
 8004108:	9301      	str	r3, [sp, #4]
 800410a:	f107 0317 	add.w	r3, r7, #23
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	2301      	movs	r3, #1
 8004112:	221c      	movs	r2, #28
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f003 fcdb 	bl	8007ad0 <HAL_I2C_Mem_Write>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <MPU9250_Accelerometer_Configuration+0x44>

		return MPU9250_Accelerometer_Config_FAIL;
 8004120:	2303      	movs	r3, #3
 8004122:	e02b      	b.n	800417c <MPU9250_Accelerometer_Configuration+0x9c>
		return MPU9250_Accelerometer_Config_FAIL;
	}
	*/

	/* Case 3: Save configuration to data structure */
	if(      Range == MPU9250_Acce_2G )     DataStructure->Accelerometer_sensitivity_factor = MPU9250_ACCE_SENSITIVITY_FACTOR_2G;
 8004124:	79fb      	ldrb	r3, [r7, #7]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d104      	bne.n	8004134 <MPU9250_Accelerometer_Configuration+0x54>
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004130:	811a      	strh	r2, [r3, #8]
 8004132:	e016      	b.n	8004162 <MPU9250_Accelerometer_Configuration+0x82>
	else if( Range == MPU9250_Acce_4G )		DataStructure->Accelerometer_sensitivity_factor = MPU9250_ACCE_SENSITIVITY_FACTOR_4G;
 8004134:	79fb      	ldrb	r3, [r7, #7]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d104      	bne.n	8004144 <MPU9250_Accelerometer_Configuration+0x64>
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004140:	811a      	strh	r2, [r3, #8]
 8004142:	e00e      	b.n	8004162 <MPU9250_Accelerometer_Configuration+0x82>
	else if( Range == MPU9250_Acce_8G )		DataStructure->Accelerometer_sensitivity_factor = MPU9250_ACCE_SENSITIVITY_FACTOR_8G;
 8004144:	79fb      	ldrb	r3, [r7, #7]
 8004146:	2b02      	cmp	r3, #2
 8004148:	d104      	bne.n	8004154 <MPU9250_Accelerometer_Configuration+0x74>
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004150:	811a      	strh	r2, [r3, #8]
 8004152:	e006      	b.n	8004162 <MPU9250_Accelerometer_Configuration+0x82>
	else if( Range == MPU9250_Acce_16G )	DataStructure->Accelerometer_sensitivity_factor = MPU9250_ACCE_SENSITIVITY_FACTOR_16G;
 8004154:	79fb      	ldrb	r3, [r7, #7]
 8004156:	2b03      	cmp	r3, #3
 8004158:	d103      	bne.n	8004162 <MPU9250_Accelerometer_Configuration+0x82>
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004160:	811a      	strh	r2, [r3, #8]

	DataStructure->Accelerometer_X_offset = 0;
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	f04f 0200 	mov.w	r2, #0
 8004168:	629a      	str	r2, [r3, #40]	; 0x28
	DataStructure->Accelerometer_Y_offset = 0;
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	f04f 0200 	mov.w	r2, #0
 8004170:	62da      	str	r2, [r3, #44]	; 0x2c
	DataStructure->Accelerometer_Z_offset = 0;
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	631a      	str	r2, [r3, #48]	; 0x30

	return MPU9250_Accelerometer_Config_OK;
 800417a:	2302      	movs	r3, #2
}
 800417c:	4618      	mov	r0, r3
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}

08004184 <MPU9250_Gyroscope_Configuration>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

MPU9250_Error_code MPU9250_Gyroscope_Configuration(I2C_HandleTypeDef *I2Cx,
												   struct MPU9250 *DataStructure,
												   MPU9250_Gyro_range Range) {
 8004184:	b590      	push	{r4, r7, lr}
 8004186:	b08b      	sub	sp, #44	; 0x2c
 8004188:	af04      	add	r7, sp, #16
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	4613      	mov	r3, r2
 8004190:	71fb      	strb	r3, [r7, #7]

	uint8_t Byte_temp = 0x00;
 8004192:	2300      	movs	r3, #0
 8004194:	75fb      	strb	r3, [r7, #23]


	/* Case 1: Set gyroscope sensitivity range */
	Byte_temp = Range << 3;
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	b2db      	uxtb	r3, r3
 800419c:	75fb      	strb	r3, [r7, #23]

	if( HAL_I2C_Mem_Write(I2Cx, DataStructure->Device_addres, MPU9250_GYRO_CONFIG, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	785b      	ldrb	r3, [r3, #1]
 80041a2:	b299      	uxth	r1, r3
 80041a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041a8:	9302      	str	r3, [sp, #8]
 80041aa:	2301      	movs	r3, #1
 80041ac:	9301      	str	r3, [sp, #4]
 80041ae:	f107 0317 	add.w	r3, r7, #23
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	2301      	movs	r3, #1
 80041b6:	221b      	movs	r2, #27
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f003 fc89 	bl	8007ad0 <HAL_I2C_Mem_Write>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <MPU9250_Gyroscope_Configuration+0x44>

		return MPU9250_Gyroscope_Config_FAIL;
 80041c4:	2305      	movs	r3, #5
 80041c6:	e04b      	b.n	8004260 <MPU9250_Gyroscope_Configuration+0xdc>
	}

	/* Case 2: Set gyroscope low pass filter cut-off frequency */
	Byte_temp = 0x0E;
 80041c8:	230e      	movs	r3, #14
 80041ca:	75fb      	strb	r3, [r7, #23]

	if( HAL_I2C_Mem_Write(I2Cx, DataStructure->Device_addres, MPU9250_CONFIG, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	785b      	ldrb	r3, [r3, #1]
 80041d0:	b299      	uxth	r1, r3
 80041d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041d6:	9302      	str	r3, [sp, #8]
 80041d8:	2301      	movs	r3, #1
 80041da:	9301      	str	r3, [sp, #4]
 80041dc:	f107 0317 	add.w	r3, r7, #23
 80041e0:	9300      	str	r3, [sp, #0]
 80041e2:	2301      	movs	r3, #1
 80041e4:	221a      	movs	r2, #26
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f003 fc72 	bl	8007ad0 <HAL_I2C_Mem_Write>
 80041ec:	4603      	mov	r3, r0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <MPU9250_Gyroscope_Configuration+0x72>

		return MPU9250_Gyroscope_Config_FAIL;
 80041f2:	2305      	movs	r3, #5
 80041f4:	e034      	b.n	8004260 <MPU9250_Gyroscope_Configuration+0xdc>
	}

	/* Case 3: Save configuration to data structure */
	if(      Range == MPU9250_Gyro_250s )   DataStructure->Gyroscope_sensitivity_factor = MPU9250_GYRO_SENSITIVITY_FACTOR_250s;
 80041f6:	79fb      	ldrb	r3, [r7, #7]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d104      	bne.n	8004206 <MPU9250_Gyroscope_Configuration+0x82>
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2283      	movs	r2, #131	; 0x83
 8004200:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 8004204:	e016      	b.n	8004234 <MPU9250_Gyroscope_Configuration+0xb0>
	else if( Range == MPU9250_Gyro_500s )	DataStructure->Gyroscope_sensitivity_factor = MPU9250_GYRO_SENSITIVITY_FACTOR_500s;
 8004206:	79fb      	ldrb	r3, [r7, #7]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d104      	bne.n	8004216 <MPU9250_Gyroscope_Configuration+0x92>
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	2241      	movs	r2, #65	; 0x41
 8004210:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 8004214:	e00e      	b.n	8004234 <MPU9250_Gyroscope_Configuration+0xb0>
	else if( Range == MPU9250_Gyro_1000s )	DataStructure->Gyroscope_sensitivity_factor = MPU9250_GYRO_SENSITIVITY_FACTOR_1000s;
 8004216:	79fb      	ldrb	r3, [r7, #7]
 8004218:	2b02      	cmp	r3, #2
 800421a:	d104      	bne.n	8004226 <MPU9250_Gyroscope_Configuration+0xa2>
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2220      	movs	r2, #32
 8004220:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
 8004224:	e006      	b.n	8004234 <MPU9250_Gyroscope_Configuration+0xb0>
	else if( Range == MPU9250_Gyro_2000s )	DataStructure->Gyroscope_sensitivity_factor = MPU9250_GYRO_SENSITIVITY_FACTOR_2000s;
 8004226:	79fb      	ldrb	r3, [r7, #7]
 8004228:	2b03      	cmp	r3, #3
 800422a:	d103      	bne.n	8004234 <MPU9250_Gyroscope_Configuration+0xb0>
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2210      	movs	r2, #16
 8004230:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88

	DataStructure->Gyroscope_X_offset = 0;
 8004234:	68ba      	ldr	r2, [r7, #8]
 8004236:	f04f 0300 	mov.w	r3, #0
 800423a:	f04f 0400 	mov.w	r4, #0
 800423e:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
	DataStructure->Gyroscope_Y_offset = 0;
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	f04f 0400 	mov.w	r4, #0
 800424c:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
	DataStructure->Gyroscope_Z_offset = 0;
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	f04f 0300 	mov.w	r3, #0
 8004256:	f04f 0400 	mov.w	r4, #0
 800425a:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8

	return MPU9250_Gyroscope_Config_OK;
 800425e:	2304      	movs	r3, #4

}
 8004260:	4618      	mov	r0, r3
 8004262:	371c      	adds	r7, #28
 8004264:	46bd      	mov	sp, r7
 8004266:	bd90      	pop	{r4, r7, pc}

08004268 <MPU9250_Magnetometer_Configuration>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

MPU9250_Error_code MPU9250_Magnetometer_Configuration(I2C_HandleTypeDef *I2Cx,
												      struct MPU9250 *DataStructure) {
 8004268:	b590      	push	{r4, r7, lr}
 800426a:	b089      	sub	sp, #36	; 0x24
 800426c:	af04      	add	r7, sp, #16
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]


	uint8_t Byte_temp = 0x00;
 8004272:	2300      	movs	r3, #0
 8004274:	73fb      	strb	r3, [r7, #15]
	uint8_t Bytes_temp[3] = {0};
 8004276:	f107 030c 	add.w	r3, r7, #12
 800427a:	2100      	movs	r1, #0
 800427c:	460a      	mov	r2, r1
 800427e:	801a      	strh	r2, [r3, #0]
 8004280:	460a      	mov	r2, r1
 8004282:	709a      	strb	r2, [r3, #2]

	DataStructure->Magnetometer_addres = 0x0C << 1;
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	2218      	movs	r2, #24
 8004288:	709a      	strb	r2, [r3, #2]
	DataStructure->Magnetometer_sesitivity_factor = 0.1499; /* 4912/32768 */
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	4aa1      	ldr	r2, [pc, #644]	; (8004514 <MPU9250_Magnetometer_Configuration+0x2ac>)
 800428e:	60da      	str	r2, [r3, #12]

	// Case 2: Disable the I2C master interface
	Byte_temp = 0x00;
 8004290:	2300      	movs	r3, #0
 8004292:	73fb      	strb	r3, [r7, #15]

	if( HAL_I2C_Mem_Write(I2Cx, DataStructure->Device_addres, MPU9250_USER_CTRL, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	785b      	ldrb	r3, [r3, #1]
 8004298:	b299      	uxth	r1, r3
 800429a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800429e:	9302      	str	r3, [sp, #8]
 80042a0:	2301      	movs	r3, #1
 80042a2:	9301      	str	r3, [sp, #4]
 80042a4:	f107 030f 	add.w	r3, r7, #15
 80042a8:	9300      	str	r3, [sp, #0]
 80042aa:	2301      	movs	r3, #1
 80042ac:	226a      	movs	r2, #106	; 0x6a
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f003 fc0e 	bl	8007ad0 <HAL_I2C_Mem_Write>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <MPU9250_Magnetometer_Configuration+0x56>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 80042ba:	2307      	movs	r3, #7
 80042bc:	e126      	b.n	800450c <MPU9250_Magnetometer_Configuration+0x2a4>
	}

	// Case 3: Enable the bypass multiplexer
	Byte_temp = 0x02;
 80042be:	2302      	movs	r3, #2
 80042c0:	73fb      	strb	r3, [r7, #15]

	if( HAL_I2C_Mem_Write(I2Cx, DataStructure->Device_addres, MPU9250_INT_PIN_CFG, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	785b      	ldrb	r3, [r3, #1]
 80042c6:	b299      	uxth	r1, r3
 80042c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042cc:	9302      	str	r3, [sp, #8]
 80042ce:	2301      	movs	r3, #1
 80042d0:	9301      	str	r3, [sp, #4]
 80042d2:	f107 030f 	add.w	r3, r7, #15
 80042d6:	9300      	str	r3, [sp, #0]
 80042d8:	2301      	movs	r3, #1
 80042da:	2237      	movs	r2, #55	; 0x37
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f003 fbf7 	bl	8007ad0 <HAL_I2C_Mem_Write>
 80042e2:	4603      	mov	r3, r0
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d001      	beq.n	80042ec <MPU9250_Magnetometer_Configuration+0x84>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 80042e8:	2307      	movs	r3, #7
 80042ea:	e10f      	b.n	800450c <MPU9250_Magnetometer_Configuration+0x2a4>
	}

	// Case 1: Is device connected ?
	if( HAL_I2C_IsDeviceReady(I2Cx, DataStructure->Magnetometer_addres, 1, 1000) != HAL_OK ) {
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	789b      	ldrb	r3, [r3, #2]
 80042f0:	b299      	uxth	r1, r3
 80042f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042f6:	2201      	movs	r2, #1
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f003 ff19 	bl	8008130 <HAL_I2C_IsDeviceReady>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b00      	cmp	r3, #0
 8004302:	d001      	beq.n	8004308 <MPU9250_Magnetometer_Configuration+0xa0>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 8004304:	2307      	movs	r3, #7
 8004306:	e101      	b.n	800450c <MPU9250_Magnetometer_Configuration+0x2a4>
	}

	// Case 2: Who am i test
	if( HAL_I2C_Mem_Read(I2Cx, DataStructure->Magnetometer_addres, AK9863_WIA, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	789b      	ldrb	r3, [r3, #2]
 800430c:	b299      	uxth	r1, r3
 800430e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004312:	9302      	str	r3, [sp, #8]
 8004314:	2301      	movs	r3, #1
 8004316:	9301      	str	r3, [sp, #4]
 8004318:	f107 030f 	add.w	r3, r7, #15
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	2301      	movs	r3, #1
 8004320:	2200      	movs	r2, #0
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f003 fcce 	bl	8007cc4 <HAL_I2C_Mem_Read>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <MPU9250_Magnetometer_Configuration+0xca>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Init_FAIL;
 800432e:	2301      	movs	r3, #1
 8004330:	e0ec      	b.n	800450c <MPU9250_Magnetometer_Configuration+0x2a4>
	}

	if( Byte_temp != 0x48 ) {
 8004332:	7bfb      	ldrb	r3, [r7, #15]
 8004334:	2b48      	cmp	r3, #72	; 0x48
 8004336:	d001      	beq.n	800433c <MPU9250_Magnetometer_Configuration+0xd4>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Init_FAIL;
 8004338:	2301      	movs	r3, #1
 800433a:	e0e7      	b.n	800450c <MPU9250_Magnetometer_Configuration+0x2a4>
	}

	// Case 4: Setup to fuse ROM access mode and 16-bit output
	Byte_temp = 0x1F;
 800433c:	231f      	movs	r3, #31
 800433e:	73fb      	strb	r3, [r7, #15]

	if( HAL_I2C_Mem_Write(I2Cx, DataStructure->Magnetometer_addres, AK9863_CNTL1, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	789b      	ldrb	r3, [r3, #2]
 8004344:	b299      	uxth	r1, r3
 8004346:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800434a:	9302      	str	r3, [sp, #8]
 800434c:	2301      	movs	r3, #1
 800434e:	9301      	str	r3, [sp, #4]
 8004350:	f107 030f 	add.w	r3, r7, #15
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	2301      	movs	r3, #1
 8004358:	220a      	movs	r2, #10
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f003 fbb8 	bl	8007ad0 <HAL_I2C_Mem_Write>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d001      	beq.n	800436a <MPU9250_Magnetometer_Configuration+0x102>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 8004366:	2307      	movs	r3, #7
 8004368:	e0d0      	b.n	800450c <MPU9250_Magnetometer_Configuration+0x2a4>
	}

	HAL_Delay(100);
 800436a:	2064      	movs	r0, #100	; 0x64
 800436c:	f002 fd48 	bl	8006e00 <HAL_Delay>

	// Case 5: Read from the fuse ROM sensitivity adjustment values
	if( HAL_I2C_Mem_Read(I2Cx, DataStructure->Magnetometer_addres, AK9863_ASAX | 0x80, 1, Bytes_temp, 3, 1000) != HAL_OK ) {
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	789b      	ldrb	r3, [r3, #2]
 8004374:	b299      	uxth	r1, r3
 8004376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800437a:	9302      	str	r3, [sp, #8]
 800437c:	2303      	movs	r3, #3
 800437e:	9301      	str	r3, [sp, #4]
 8004380:	f107 030c 	add.w	r3, r7, #12
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	2301      	movs	r3, #1
 8004388:	2290      	movs	r2, #144	; 0x90
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f003 fc9a 	bl	8007cc4 <HAL_I2C_Mem_Read>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <MPU9250_Magnetometer_Configuration+0x132>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 8004396:	2307      	movs	r3, #7
 8004398:	e0b8      	b.n	800450c <MPU9250_Magnetometer_Configuration+0x2a4>
	}

	DataStructure->Magnetometer_ASAX = ( ( (Bytes_temp[0] - 128) * 0.5 ) / 128 ) + 1;
 800439a:	7b3b      	ldrb	r3, [r7, #12]
 800439c:	3b80      	subs	r3, #128	; 0x80
 800439e:	4618      	mov	r0, r3
 80043a0:	f7fc f828 	bl	80003f4 <__aeabi_i2d>
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	4b5b      	ldr	r3, [pc, #364]	; (8004518 <MPU9250_Magnetometer_Configuration+0x2b0>)
 80043aa:	f7fc f88d 	bl	80004c8 <__aeabi_dmul>
 80043ae:	4603      	mov	r3, r0
 80043b0:	460c      	mov	r4, r1
 80043b2:	4618      	mov	r0, r3
 80043b4:	4621      	mov	r1, r4
 80043b6:	f04f 0200 	mov.w	r2, #0
 80043ba:	4b58      	ldr	r3, [pc, #352]	; (800451c <MPU9250_Magnetometer_Configuration+0x2b4>)
 80043bc:	f7fc f9ae 	bl	800071c <__aeabi_ddiv>
 80043c0:	4603      	mov	r3, r0
 80043c2:	460c      	mov	r4, r1
 80043c4:	4618      	mov	r0, r3
 80043c6:	4621      	mov	r1, r4
 80043c8:	f04f 0200 	mov.w	r2, #0
 80043cc:	4b54      	ldr	r3, [pc, #336]	; (8004520 <MPU9250_Magnetometer_Configuration+0x2b8>)
 80043ce:	f7fb fec5 	bl	800015c <__adddf3>
 80043d2:	4603      	mov	r3, r0
 80043d4:	460c      	mov	r4, r1
 80043d6:	4618      	mov	r0, r3
 80043d8:	4621      	mov	r1, r4
 80043da:	f7fc fb4d 	bl	8000a78 <__aeabi_d2f>
 80043de:	4602      	mov	r2, r0
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	611a      	str	r2, [r3, #16]
	DataStructure->Magnetometer_ASAY = ( ( (Bytes_temp[1] - 128) * 0.5 ) / 128 ) + 1;
 80043e4:	7b7b      	ldrb	r3, [r7, #13]
 80043e6:	3b80      	subs	r3, #128	; 0x80
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7fc f803 	bl	80003f4 <__aeabi_i2d>
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	4b49      	ldr	r3, [pc, #292]	; (8004518 <MPU9250_Magnetometer_Configuration+0x2b0>)
 80043f4:	f7fc f868 	bl	80004c8 <__aeabi_dmul>
 80043f8:	4603      	mov	r3, r0
 80043fa:	460c      	mov	r4, r1
 80043fc:	4618      	mov	r0, r3
 80043fe:	4621      	mov	r1, r4
 8004400:	f04f 0200 	mov.w	r2, #0
 8004404:	4b45      	ldr	r3, [pc, #276]	; (800451c <MPU9250_Magnetometer_Configuration+0x2b4>)
 8004406:	f7fc f989 	bl	800071c <__aeabi_ddiv>
 800440a:	4603      	mov	r3, r0
 800440c:	460c      	mov	r4, r1
 800440e:	4618      	mov	r0, r3
 8004410:	4621      	mov	r1, r4
 8004412:	f04f 0200 	mov.w	r2, #0
 8004416:	4b42      	ldr	r3, [pc, #264]	; (8004520 <MPU9250_Magnetometer_Configuration+0x2b8>)
 8004418:	f7fb fea0 	bl	800015c <__adddf3>
 800441c:	4603      	mov	r3, r0
 800441e:	460c      	mov	r4, r1
 8004420:	4618      	mov	r0, r3
 8004422:	4621      	mov	r1, r4
 8004424:	f7fc fb28 	bl	8000a78 <__aeabi_d2f>
 8004428:	4602      	mov	r2, r0
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	615a      	str	r2, [r3, #20]
	DataStructure->Magnetometer_ASAZ = ( ( (Bytes_temp[2] - 128) * 0.5 ) / 128 ) + 1;
 800442e:	7bbb      	ldrb	r3, [r7, #14]
 8004430:	3b80      	subs	r3, #128	; 0x80
 8004432:	4618      	mov	r0, r3
 8004434:	f7fb ffde 	bl	80003f4 <__aeabi_i2d>
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	4b36      	ldr	r3, [pc, #216]	; (8004518 <MPU9250_Magnetometer_Configuration+0x2b0>)
 800443e:	f7fc f843 	bl	80004c8 <__aeabi_dmul>
 8004442:	4603      	mov	r3, r0
 8004444:	460c      	mov	r4, r1
 8004446:	4618      	mov	r0, r3
 8004448:	4621      	mov	r1, r4
 800444a:	f04f 0200 	mov.w	r2, #0
 800444e:	4b33      	ldr	r3, [pc, #204]	; (800451c <MPU9250_Magnetometer_Configuration+0x2b4>)
 8004450:	f7fc f964 	bl	800071c <__aeabi_ddiv>
 8004454:	4603      	mov	r3, r0
 8004456:	460c      	mov	r4, r1
 8004458:	4618      	mov	r0, r3
 800445a:	4621      	mov	r1, r4
 800445c:	f04f 0200 	mov.w	r2, #0
 8004460:	4b2f      	ldr	r3, [pc, #188]	; (8004520 <MPU9250_Magnetometer_Configuration+0x2b8>)
 8004462:	f7fb fe7b 	bl	800015c <__adddf3>
 8004466:	4603      	mov	r3, r0
 8004468:	460c      	mov	r4, r1
 800446a:	4618      	mov	r0, r3
 800446c:	4621      	mov	r1, r4
 800446e:	f7fc fb03 	bl	8000a78 <__aeabi_d2f>
 8004472:	4602      	mov	r2, r0
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	619a      	str	r2, [r3, #24]

	// Case 6: Reset to power down mode
	Byte_temp = 0x00;
 8004478:	2300      	movs	r3, #0
 800447a:	73fb      	strb	r3, [r7, #15]

	if( HAL_I2C_Mem_Write(I2Cx, DataStructure->Magnetometer_addres, AK9863_CNTL1, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	789b      	ldrb	r3, [r3, #2]
 8004480:	b299      	uxth	r1, r3
 8004482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004486:	9302      	str	r3, [sp, #8]
 8004488:	2301      	movs	r3, #1
 800448a:	9301      	str	r3, [sp, #4]
 800448c:	f107 030f 	add.w	r3, r7, #15
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	2301      	movs	r3, #1
 8004494:	220a      	movs	r2, #10
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f003 fb1a 	bl	8007ad0 <HAL_I2C_Mem_Write>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d001      	beq.n	80044a6 <MPU9250_Magnetometer_Configuration+0x23e>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 80044a2:	2307      	movs	r3, #7
 80044a4:	e032      	b.n	800450c <MPU9250_Magnetometer_Configuration+0x2a4>
	}

	// Case 7: Enable continuous mode 2 and 16-bit output
	Byte_temp = 0x16; // 0x16
 80044a6:	2316      	movs	r3, #22
 80044a8:	73fb      	strb	r3, [r7, #15]

	if( HAL_I2C_Mem_Write(I2Cx, DataStructure->Magnetometer_addres, AK9863_CNTL1, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	789b      	ldrb	r3, [r3, #2]
 80044ae:	b299      	uxth	r1, r3
 80044b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044b4:	9302      	str	r3, [sp, #8]
 80044b6:	2301      	movs	r3, #1
 80044b8:	9301      	str	r3, [sp, #4]
 80044ba:	f107 030f 	add.w	r3, r7, #15
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	2301      	movs	r3, #1
 80044c2:	220a      	movs	r2, #10
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f003 fb03 	bl	8007ad0 <HAL_I2C_Mem_Write>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <MPU9250_Magnetometer_Configuration+0x26c>

		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		return MPU9250_Magnetometer_Config_FAIL;
 80044d0:	2307      	movs	r3, #7
 80044d2:	e01b      	b.n	800450c <MPU9250_Magnetometer_Configuration+0x2a4>
	}

	HAL_Delay(100);
 80044d4:	2064      	movs	r0, #100	; 0x64
 80044d6:	f002 fc93 	bl	8006e00 <HAL_Delay>

	/* Default variables value */
	DataStructure->Magnetometer_X_scale = 1;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80044e0:	641a      	str	r2, [r3, #64]	; 0x40
	DataStructure->Magnetometer_Y_scale = 1;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80044e8:	645a      	str	r2, [r3, #68]	; 0x44
	DataStructure->Magnetometer_Z_scale = 1;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80044f0:	649a      	str	r2, [r3, #72]	; 0x48

	DataStructure->Magnetometer_X_offset = 0;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	635a      	str	r2, [r3, #52]	; 0x34
	DataStructure->Magnetometer_Y_offset = 0;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	f04f 0200 	mov.w	r2, #0
 8004500:	639a      	str	r2, [r3, #56]	; 0x38
	DataStructure->Magnetometer_Z_offset = 0;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	63da      	str	r2, [r3, #60]	; 0x3c

	return MPU9250_Magnetometer_Config_OK;
 800450a:	2306      	movs	r3, #6
}
 800450c:	4618      	mov	r0, r3
 800450e:	3714      	adds	r7, #20
 8004510:	46bd      	mov	sp, r7
 8004512:	bd90      	pop	{r4, r7, pc}
 8004514:	3e197f63 	.word	0x3e197f63
 8004518:	3fe00000 	.word	0x3fe00000
 800451c:	40600000 	.word	0x40600000
 8004520:	3ff00000 	.word	0x3ff00000

08004524 <MPU9250_Init>:

MPU9250_Error_code MPU9250_Init(I2C_HandleTypeDef *I2Cx,
								struct MPU9250 *DataStructure,
								MPU9250_Device_number Number,
								MPU9250_Acce_range Acce_range,
								MPU9250_Gyro_range Gyro_range) {
 8004524:	b580      	push	{r7, lr}
 8004526:	b08a      	sub	sp, #40	; 0x28
 8004528:	af04      	add	r7, sp, #16
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	4611      	mov	r1, r2
 8004530:	461a      	mov	r2, r3
 8004532:	460b      	mov	r3, r1
 8004534:	71fb      	strb	r3, [r7, #7]
 8004536:	4613      	mov	r3, r2
 8004538:	71bb      	strb	r3, [r7, #6]

	uint8_t Byte_temp = 0x00;
 800453a:	2300      	movs	r3, #0
 800453c:	75fb      	strb	r3, [r7, #23]

	DataStructure->Device_number = Number;
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	79fa      	ldrb	r2, [r7, #7]
 8004542:	701a      	strb	r2, [r3, #0]
	DataStructure->Device_addres = (0x68 | DataStructure->Device_number) << 1;
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	b2db      	uxtb	r3, r3
 800454c:	f063 032f 	orn	r3, r3, #47	; 0x2f
 8004550:	b2da      	uxtb	r2, r3
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	705a      	strb	r2, [r3, #1]

	/* Case 1: Is device connected ? */
	if( HAL_I2C_IsDeviceReady(I2Cx, DataStructure->Device_addres, 1, 1000) != HAL_OK ) {
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	785b      	ldrb	r3, [r3, #1]
 800455a:	b299      	uxth	r1, r3
 800455c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004560:	2201      	movs	r2, #1
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f003 fde4 	bl	8008130 <HAL_I2C_IsDeviceReady>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <MPU9250_Init+0x4e>

		return MPU9250_Init_FAIL;
 800456e:	2301      	movs	r3, #1
 8004570:	e05c      	b.n	800462c <MPU9250_Init+0x108>
	}

	/* Case 2: Who am i test */
	if( HAL_I2C_Mem_Read(I2Cx, DataStructure->Device_addres, MPU9250_WHO_AM_I, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	785b      	ldrb	r3, [r3, #1]
 8004576:	b299      	uxth	r1, r3
 8004578:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800457c:	9302      	str	r3, [sp, #8]
 800457e:	2301      	movs	r3, #1
 8004580:	9301      	str	r3, [sp, #4]
 8004582:	f107 0317 	add.w	r3, r7, #23
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	2301      	movs	r3, #1
 800458a:	2275      	movs	r2, #117	; 0x75
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f003 fb99 	bl	8007cc4 <HAL_I2C_Mem_Read>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d001      	beq.n	800459c <MPU9250_Init+0x78>

		return MPU9250_Init_FAIL;
 8004598:	2301      	movs	r3, #1
 800459a:	e047      	b.n	800462c <MPU9250_Init+0x108>
	}

	if( Byte_temp != 0x71 ) {
 800459c:	7dfb      	ldrb	r3, [r7, #23]
 800459e:	2b71      	cmp	r3, #113	; 0x71
 80045a0:	d001      	beq.n	80045a6 <MPU9250_Init+0x82>

		return MPU9250_Init_FAIL;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e042      	b.n	800462c <MPU9250_Init+0x108>
	}

	/* Case 3: Wake up */
	Byte_temp = 0x01;
 80045a6:	2301      	movs	r3, #1
 80045a8:	75fb      	strb	r3, [r7, #23]

	if( HAL_I2C_Mem_Write(I2Cx, DataStructure->Device_addres, MPU9250_PWR_MGMT_1, 1, &Byte_temp, 1, 1000) != HAL_OK ) {
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	785b      	ldrb	r3, [r3, #1]
 80045ae:	b299      	uxth	r1, r3
 80045b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80045b4:	9302      	str	r3, [sp, #8]
 80045b6:	2301      	movs	r3, #1
 80045b8:	9301      	str	r3, [sp, #4]
 80045ba:	f107 0317 	add.w	r3, r7, #23
 80045be:	9300      	str	r3, [sp, #0]
 80045c0:	2301      	movs	r3, #1
 80045c2:	226b      	movs	r2, #107	; 0x6b
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f003 fa83 	bl	8007ad0 <HAL_I2C_Mem_Write>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <MPU9250_Init+0xb0>

		return MPU9250_Init_FAIL;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e02b      	b.n	800462c <MPU9250_Init+0x108>
	}

	/* Case 4: Accelerometer configuration */
	if( MPU9250_Accelerometer_Configuration(I2Cx, DataStructure, Acce_range) != MPU9250_Accelerometer_Config_OK ) {
 80045d4:	79bb      	ldrb	r3, [r7, #6]
 80045d6:	461a      	mov	r2, r3
 80045d8:	68b9      	ldr	r1, [r7, #8]
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f7ff fd80 	bl	80040e0 <MPU9250_Accelerometer_Configuration>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d001      	beq.n	80045ea <MPU9250_Init+0xc6>

		return MPU9250_Accelerometer_Config_FAIL;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e020      	b.n	800462c <MPU9250_Init+0x108>
	}

	/* Case 5: Gyroscope configuration */
	if( MPU9250_Gyroscope_Configuration(I2Cx, DataStructure, Gyro_range) != MPU9250_Gyroscope_Config_OK ) {
 80045ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80045ee:	461a      	mov	r2, r3
 80045f0:	68b9      	ldr	r1, [r7, #8]
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f7ff fdc6 	bl	8004184 <MPU9250_Gyroscope_Configuration>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d001      	beq.n	8004602 <MPU9250_Init+0xde>

		return MPU9250_Gyroscope_Config_FAIL;
 80045fe:	2305      	movs	r3, #5
 8004600:	e014      	b.n	800462c <MPU9250_Init+0x108>
	}

	/* Case 6: Magnetometer configuration */
	if( MPU9250_Magnetometer_Configuration(I2Cx, DataStructure) != MPU9250_Magnetometer_Config_OK ) {
 8004602:	68b9      	ldr	r1, [r7, #8]
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f7ff fe2f 	bl	8004268 <MPU9250_Magnetometer_Configuration>
 800460a:	4603      	mov	r3, r0
 800460c:	2b06      	cmp	r3, #6
 800460e:	d001      	beq.n	8004614 <MPU9250_Init+0xf0>

		return MPU9250_Magnetometer_Config_FAIL;
 8004610:	2307      	movs	r3, #7
 8004612:	e00b      	b.n	800462c <MPU9250_Init+0x108>
	}

	/* Case 7: Default values of variables */

	quaternion_init( &(DataStructure->Gyroscope_quaternion) );
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	33c0      	adds	r3, #192	; 0xc0
 8004618:	4618      	mov	r0, r3
 800461a:	f001 fce1 	bl	8005fe0 <quaternion_init>
	euler_init( &(DataStructure->Gyroscope_euler) );
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004624:	4618      	mov	r0, r3
 8004626:	f001 fd01 	bl	800602c <euler_init>

	return MPU9250_Init_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <MPU9250_Read_Accelerometer>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

MPU9250_Error_code MPU9250_Read_Accelerometer(I2C_HandleTypeDef *I2Cx,
											  struct MPU9250 *DataStructure) {
 8004634:	b590      	push	{r4, r7, lr}
 8004636:	b089      	sub	sp, #36	; 0x24
 8004638:	af04      	add	r7, sp, #16
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]

	uint8_t Bytes_temp[6] = {0x00};
 800463e:	f107 0308 	add.w	r3, r7, #8
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	809a      	strh	r2, [r3, #4]

	if( HAL_I2C_Mem_Read(I2Cx, DataStructure->Device_addres, MPU9250_ACCEL_XOUT_H, 1, Bytes_temp , 6, 1000) != HAL_OK ) {
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	785b      	ldrb	r3, [r3, #1]
 800464c:	b299      	uxth	r1, r3
 800464e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004652:	9302      	str	r3, [sp, #8]
 8004654:	2306      	movs	r3, #6
 8004656:	9301      	str	r3, [sp, #4]
 8004658:	f107 0308 	add.w	r3, r7, #8
 800465c:	9300      	str	r3, [sp, #0]
 800465e:	2301      	movs	r3, #1
 8004660:	223b      	movs	r2, #59	; 0x3b
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f003 fb2e 	bl	8007cc4 <HAL_I2C_Mem_Read>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <MPU9250_Read_Accelerometer+0x3e>

		return MPU9250_Read_Accelerometer_FAIL;
 800466e:	230f      	movs	r3, #15
 8004670:	e084      	b.n	800477c <MPU9250_Read_Accelerometer+0x148>
	}

	DataStructure->Accelerometer_X = ( Bytes_temp[0] << 8 | Bytes_temp[1] ) - DataStructure->Accelerometer_X_offset;
 8004672:	7a3b      	ldrb	r3, [r7, #8]
 8004674:	021b      	lsls	r3, r3, #8
 8004676:	7a7a      	ldrb	r2, [r7, #9]
 8004678:	4313      	orrs	r3, r2
 800467a:	4618      	mov	r0, r3
 800467c:	f7fc fb06 	bl	8000c8c <__aeabi_i2f>
 8004680:	4602      	mov	r2, r0
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	4619      	mov	r1, r3
 8004688:	4610      	mov	r0, r2
 800468a:	f7fc fa49 	bl	8000b20 <__aeabi_fsub>
 800468e:	4603      	mov	r3, r0
 8004690:	4618      	mov	r0, r3
 8004692:	f7fc fd2b 	bl	80010ec <__aeabi_f2iz>
 8004696:	4603      	mov	r3, r0
 8004698:	b21a      	sxth	r2, r3
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	839a      	strh	r2, [r3, #28]
	DataStructure->Accelerometer_Y = ( Bytes_temp[2] << 8 | Bytes_temp[3] ) - DataStructure->Accelerometer_Y_offset;
 800469e:	7abb      	ldrb	r3, [r7, #10]
 80046a0:	021b      	lsls	r3, r3, #8
 80046a2:	7afa      	ldrb	r2, [r7, #11]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fc faf0 	bl	8000c8c <__aeabi_i2f>
 80046ac:	4602      	mov	r2, r0
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b2:	4619      	mov	r1, r3
 80046b4:	4610      	mov	r0, r2
 80046b6:	f7fc fa33 	bl	8000b20 <__aeabi_fsub>
 80046ba:	4603      	mov	r3, r0
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fc fd15 	bl	80010ec <__aeabi_f2iz>
 80046c2:	4603      	mov	r3, r0
 80046c4:	b21a      	sxth	r2, r3
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	83da      	strh	r2, [r3, #30]
	DataStructure->Accelerometer_Z = ( Bytes_temp[4] << 8 | Bytes_temp[5] ) - DataStructure->Accelerometer_Z_offset;
 80046ca:	7b3b      	ldrb	r3, [r7, #12]
 80046cc:	021b      	lsls	r3, r3, #8
 80046ce:	7b7a      	ldrb	r2, [r7, #13]
 80046d0:	4313      	orrs	r3, r2
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fc fada 	bl	8000c8c <__aeabi_i2f>
 80046d8:	4602      	mov	r2, r0
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	4619      	mov	r1, r3
 80046e0:	4610      	mov	r0, r2
 80046e2:	f7fc fa1d 	bl	8000b20 <__aeabi_fsub>
 80046e6:	4603      	mov	r3, r0
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fc fcff 	bl	80010ec <__aeabi_f2iz>
 80046ee:	4603      	mov	r3, r0
 80046f0:	b21a      	sxth	r2, r3
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	841a      	strh	r2, [r3, #32]

	/* Case x: Calculate g-force values for XYZ axis */
	DataStructure->Accelerometer_X_g = (float)(DataStructure->Accelerometer_X) / DataStructure->Accelerometer_sensitivity_factor;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fc fac5 	bl	8000c8c <__aeabi_i2f>
 8004702:	4604      	mov	r4, r0
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800470a:	4618      	mov	r0, r3
 800470c:	f7fc fabe 	bl	8000c8c <__aeabi_i2f>
 8004710:	4603      	mov	r3, r0
 8004712:	4619      	mov	r1, r3
 8004714:	4620      	mov	r0, r4
 8004716:	f7fc fbc1 	bl	8000e9c <__aeabi_fdiv>
 800471a:	4603      	mov	r3, r0
 800471c:	461a      	mov	r2, r3
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	651a      	str	r2, [r3, #80]	; 0x50
	DataStructure->Accelerometer_Y_g = (float)(DataStructure->Accelerometer_Y) / DataStructure->Accelerometer_sensitivity_factor;
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8004728:	4618      	mov	r0, r3
 800472a:	f7fc faaf 	bl	8000c8c <__aeabi_i2f>
 800472e:	4604      	mov	r4, r0
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004736:	4618      	mov	r0, r3
 8004738:	f7fc faa8 	bl	8000c8c <__aeabi_i2f>
 800473c:	4603      	mov	r3, r0
 800473e:	4619      	mov	r1, r3
 8004740:	4620      	mov	r0, r4
 8004742:	f7fc fbab 	bl	8000e9c <__aeabi_fdiv>
 8004746:	4603      	mov	r3, r0
 8004748:	461a      	mov	r2, r3
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	655a      	str	r2, [r3, #84]	; 0x54
	DataStructure->Accelerometer_Z_g = (float)(DataStructure->Accelerometer_Z) / DataStructure->Accelerometer_sensitivity_factor;
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004754:	4618      	mov	r0, r3
 8004756:	f7fc fa99 	bl	8000c8c <__aeabi_i2f>
 800475a:	4604      	mov	r4, r0
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004762:	4618      	mov	r0, r3
 8004764:	f7fc fa92 	bl	8000c8c <__aeabi_i2f>
 8004768:	4603      	mov	r3, r0
 800476a:	4619      	mov	r1, r3
 800476c:	4620      	mov	r0, r4
 800476e:	f7fc fb95 	bl	8000e9c <__aeabi_fdiv>
 8004772:	4603      	mov	r3, r0
 8004774:	461a      	mov	r2, r3
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	659a      	str	r2, [r3, #88]	; 0x58

	return MPU9250_Read_Accelerometer_OK;
 800477a:	230e      	movs	r3, #14
}
 800477c:	4618      	mov	r0, r3
 800477e:	3714      	adds	r7, #20
 8004780:	46bd      	mov	sp, r7
 8004782:	bd90      	pop	{r4, r7, pc}

08004784 <MPU9250_Read_Gyroscope>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

MPU9250_Error_code MPU9250_Read_Gyroscope(I2C_HandleTypeDef *I2Cx,
										  struct MPU9250 *DataStructure) {
 8004784:	b5b0      	push	{r4, r5, r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af04      	add	r7, sp, #16
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]

	uint8_t Bytes_temp[6] = { 0x00 };
 800478e:	f107 0308 	add.w	r3, r7, #8
 8004792:	2200      	movs	r2, #0
 8004794:	601a      	str	r2, [r3, #0]
 8004796:	809a      	strh	r2, [r3, #4]

	if (HAL_I2C_Mem_Read(I2Cx, DataStructure->Device_addres, MPU9250_GYRO_XOUT_H, 1, Bytes_temp, 6, 1000) != HAL_OK) {
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	785b      	ldrb	r3, [r3, #1]
 800479c:	b299      	uxth	r1, r3
 800479e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80047a2:	9302      	str	r3, [sp, #8]
 80047a4:	2306      	movs	r3, #6
 80047a6:	9301      	str	r3, [sp, #4]
 80047a8:	f107 0308 	add.w	r3, r7, #8
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	2301      	movs	r3, #1
 80047b0:	2243      	movs	r2, #67	; 0x43
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f003 fa86 	bl	8007cc4 <HAL_I2C_Mem_Read>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <MPU9250_Read_Gyroscope+0x3e>

		return MPU9250_Read_Gyroscope_FAIL;
 80047be:	2311      	movs	r3, #17
 80047c0:	e09c      	b.n	80048fc <MPU9250_Read_Gyroscope+0x178>
	}

	DataStructure->Gyroscope_X = ( Bytes_temp[0] << 8 | Bytes_temp[1] ) - DataStructure->Gyroscope_X_offset;
 80047c2:	7a3b      	ldrb	r3, [r7, #8]
 80047c4:	021b      	lsls	r3, r3, #8
 80047c6:	7a7a      	ldrb	r2, [r7, #9]
 80047c8:	4313      	orrs	r3, r2
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fb fe12 	bl	80003f4 <__aeabi_i2d>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	f103 04a8 	add.w	r4, r3, #168	; 0xa8
 80047d6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80047da:	461a      	mov	r2, r3
 80047dc:	4623      	mov	r3, r4
 80047de:	f7fb fcbb 	bl	8000158 <__aeabi_dsub>
 80047e2:	4603      	mov	r3, r0
 80047e4:	460c      	mov	r4, r1
 80047e6:	4618      	mov	r0, r3
 80047e8:	4621      	mov	r1, r4
 80047ea:	f7fc f91d 	bl	8000a28 <__aeabi_d2iz>
 80047ee:	4603      	mov	r3, r0
 80047f0:	b21a      	sxth	r2, r3
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	DataStructure->Gyroscope_Y = ( Bytes_temp[2] << 8 | Bytes_temp[3] ) - DataStructure->Gyroscope_Y_offset;
 80047f8:	7abb      	ldrb	r3, [r7, #10]
 80047fa:	021b      	lsls	r3, r3, #8
 80047fc:	7afa      	ldrb	r2, [r7, #11]
 80047fe:	4313      	orrs	r3, r2
 8004800:	4618      	mov	r0, r3
 8004802:	f7fb fdf7 	bl	80003f4 <__aeabi_i2d>
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 800480c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004810:	461a      	mov	r2, r3
 8004812:	4623      	mov	r3, r4
 8004814:	f7fb fca0 	bl	8000158 <__aeabi_dsub>
 8004818:	4603      	mov	r3, r0
 800481a:	460c      	mov	r4, r1
 800481c:	4618      	mov	r0, r3
 800481e:	4621      	mov	r1, r4
 8004820:	f7fc f902 	bl	8000a28 <__aeabi_d2iz>
 8004824:	4603      	mov	r3, r0
 8004826:	b21a      	sxth	r2, r3
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	DataStructure->Gyroscope_Z = ( Bytes_temp[4] << 8 | Bytes_temp[5] ) - DataStructure->Gyroscope_Z_offset;
 800482e:	7b3b      	ldrb	r3, [r7, #12]
 8004830:	021b      	lsls	r3, r3, #8
 8004832:	7b7a      	ldrb	r2, [r7, #13]
 8004834:	4313      	orrs	r3, r2
 8004836:	4618      	mov	r0, r3
 8004838:	f7fb fddc 	bl	80003f4 <__aeabi_i2d>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	f103 04b8 	add.w	r4, r3, #184	; 0xb8
 8004842:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004846:	461a      	mov	r2, r3
 8004848:	4623      	mov	r3, r4
 800484a:	f7fb fc85 	bl	8000158 <__aeabi_dsub>
 800484e:	4603      	mov	r3, r0
 8004850:	460c      	mov	r4, r1
 8004852:	4618      	mov	r0, r3
 8004854:	4621      	mov	r1, r4
 8004856:	f7fc f8e7 	bl	8000a28 <__aeabi_d2iz>
 800485a:	4603      	mov	r3, r0
 800485c:	b21a      	sxth	r2, r3
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e

	/* Case x: Calculate dgs/s values for XYZ axis */
	DataStructure->Gyroscope_X_dgs =  (double)(DataStructure->Gyroscope_X) / DataStructure->Gyroscope_sensitivity_factor;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	f9b3 308a 	ldrsh.w	r3, [r3, #138]	; 0x8a
 800486a:	4618      	mov	r0, r3
 800486c:	f7fb fdc2 	bl	80003f4 <__aeabi_i2d>
 8004870:	4604      	mov	r4, r0
 8004872:	460d      	mov	r5, r1
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	f9b3 3088 	ldrsh.w	r3, [r3, #136]	; 0x88
 800487a:	4618      	mov	r0, r3
 800487c:	f7fb fdba 	bl	80003f4 <__aeabi_i2d>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4620      	mov	r0, r4
 8004886:	4629      	mov	r1, r5
 8004888:	f7fb ff48 	bl	800071c <__aeabi_ddiv>
 800488c:	4603      	mov	r3, r0
 800488e:	460c      	mov	r4, r1
 8004890:	683a      	ldr	r2, [r7, #0]
 8004892:	e9c2 3424 	strd	r3, r4, [r2, #144]	; 0x90
	DataStructure->Gyroscope_Y_dgs =  (double)(DataStructure->Gyroscope_Y) / DataStructure->Gyroscope_sensitivity_factor;
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 800489c:	4618      	mov	r0, r3
 800489e:	f7fb fda9 	bl	80003f4 <__aeabi_i2d>
 80048a2:	4604      	mov	r4, r0
 80048a4:	460d      	mov	r5, r1
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	f9b3 3088 	ldrsh.w	r3, [r3, #136]	; 0x88
 80048ac:	4618      	mov	r0, r3
 80048ae:	f7fb fda1 	bl	80003f4 <__aeabi_i2d>
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	4620      	mov	r0, r4
 80048b8:	4629      	mov	r1, r5
 80048ba:	f7fb ff2f 	bl	800071c <__aeabi_ddiv>
 80048be:	4603      	mov	r3, r0
 80048c0:	460c      	mov	r4, r1
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	e9c2 3426 	strd	r3, r4, [r2, #152]	; 0x98
	DataStructure->Gyroscope_Z_dgs =  (double)(DataStructure->Gyroscope_Z) / DataStructure->Gyroscope_sensitivity_factor;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fb fd90 	bl	80003f4 <__aeabi_i2d>
 80048d4:	4604      	mov	r4, r0
 80048d6:	460d      	mov	r5, r1
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	f9b3 3088 	ldrsh.w	r3, [r3, #136]	; 0x88
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fb fd88 	bl	80003f4 <__aeabi_i2d>
 80048e4:	4602      	mov	r2, r0
 80048e6:	460b      	mov	r3, r1
 80048e8:	4620      	mov	r0, r4
 80048ea:	4629      	mov	r1, r5
 80048ec:	f7fb ff16 	bl	800071c <__aeabi_ddiv>
 80048f0:	4603      	mov	r3, r0
 80048f2:	460c      	mov	r4, r1
 80048f4:	683a      	ldr	r2, [r7, #0]
 80048f6:	e9c2 3428 	strd	r3, r4, [r2, #160]	; 0xa0

	return MPU9250_Read_Gyroscope_OK;
 80048fa:	2310      	movs	r3, #16
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bdb0      	pop	{r4, r5, r7, pc}

08004904 <MPU9250_Read_Magnetometer>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

MPU9250_Error_code MPU9250_Read_Magnetometer(I2C_HandleTypeDef *I2Cx,
										     struct MPU9250 *DataStructure) {
 8004904:	b580      	push	{r7, lr}
 8004906:	b08c      	sub	sp, #48	; 0x30
 8004908:	af04      	add	r7, sp, #16
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]

	uint8_t Bytes_temp[8] = { 0x00 };
 800490e:	f107 030c 	add.w	r3, r7, #12
 8004912:	2200      	movs	r2, #0
 8004914:	601a      	str	r2, [r3, #0]
 8004916:	605a      	str	r2, [r3, #4]

	/* Case x: Read measured values from registers */
	if( HAL_I2C_Mem_Read(I2Cx, DataStructure->Magnetometer_addres, AK9863_ST1, 1, Bytes_temp, 8, 1000) != HAL_OK ) {
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	789b      	ldrb	r3, [r3, #2]
 800491c:	b299      	uxth	r1, r3
 800491e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004922:	9302      	str	r3, [sp, #8]
 8004924:	2308      	movs	r3, #8
 8004926:	9301      	str	r3, [sp, #4]
 8004928:	f107 030c 	add.w	r3, r7, #12
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	2301      	movs	r3, #1
 8004930:	2202      	movs	r2, #2
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f003 f9c6 	bl	8007cc4 <HAL_I2C_Mem_Read>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <MPU9250_Read_Magnetometer+0x3e>

		return MPU9250_Read_Magnetometer_FAIL;
 800493e:	2313      	movs	r3, #19
 8004940:	e0b9      	b.n	8004ab6 <MPU9250_Read_Magnetometer+0x1b2>
	if( Bytes_temp[0] & 0x00 ) {

		return MPU9250_Read_Magnetometer_FAIL;
	}

	DataStructure->Magnetometer_X = ( ( Bytes_temp[2] << 8 | Bytes_temp[1] ) - DataStructure->Magnetometer_X_offset );
 8004942:	7bbb      	ldrb	r3, [r7, #14]
 8004944:	021b      	lsls	r3, r3, #8
 8004946:	7b7a      	ldrb	r2, [r7, #13]
 8004948:	4313      	orrs	r3, r2
 800494a:	4618      	mov	r0, r3
 800494c:	f7fc f99e 	bl	8000c8c <__aeabi_i2f>
 8004950:	4602      	mov	r2, r0
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004956:	4619      	mov	r1, r3
 8004958:	4610      	mov	r0, r2
 800495a:	f7fc f8e1 	bl	8000b20 <__aeabi_fsub>
 800495e:	4603      	mov	r3, r0
 8004960:	4618      	mov	r0, r3
 8004962:	f7fc fbc3 	bl	80010ec <__aeabi_f2iz>
 8004966:	4603      	mov	r3, r0
 8004968:	b21a      	sxth	r2, r3
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	845a      	strh	r2, [r3, #34]	; 0x22
	DataStructure->Magnetometer_Y = ( ( Bytes_temp[4] << 8 | Bytes_temp[3] ) - DataStructure->Magnetometer_Y_offset );
 800496e:	7c3b      	ldrb	r3, [r7, #16]
 8004970:	021b      	lsls	r3, r3, #8
 8004972:	7bfa      	ldrb	r2, [r7, #15]
 8004974:	4313      	orrs	r3, r2
 8004976:	4618      	mov	r0, r3
 8004978:	f7fc f988 	bl	8000c8c <__aeabi_i2f>
 800497c:	4602      	mov	r2, r0
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004982:	4619      	mov	r1, r3
 8004984:	4610      	mov	r0, r2
 8004986:	f7fc f8cb 	bl	8000b20 <__aeabi_fsub>
 800498a:	4603      	mov	r3, r0
 800498c:	4618      	mov	r0, r3
 800498e:	f7fc fbad 	bl	80010ec <__aeabi_f2iz>
 8004992:	4603      	mov	r3, r0
 8004994:	b21a      	sxth	r2, r3
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	849a      	strh	r2, [r3, #36]	; 0x24
	DataStructure->Magnetometer_Z = ( ( Bytes_temp[6] << 8 | Bytes_temp[5] ) - DataStructure->Magnetometer_Z_offset );
 800499a:	7cbb      	ldrb	r3, [r7, #18]
 800499c:	021b      	lsls	r3, r3, #8
 800499e:	7c7a      	ldrb	r2, [r7, #17]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fc f972 	bl	8000c8c <__aeabi_i2f>
 80049a8:	4602      	mov	r2, r0
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ae:	4619      	mov	r1, r3
 80049b0:	4610      	mov	r0, r2
 80049b2:	f7fc f8b5 	bl	8000b20 <__aeabi_fsub>
 80049b6:	4603      	mov	r3, r0
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7fc fb97 	bl	80010ec <__aeabi_f2iz>
 80049be:	4603      	mov	r3, r0
 80049c0:	b21a      	sxth	r2, r3
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	84da      	strh	r2, [r3, #38]	; 0x26

	/* Case x: Calculate uT (micro Tesla) value for XYZ axis */
	DataStructure->Magnetometer_X_uT = DataStructure->Magnetometer_X * DataStructure->Magnetometer_ASAX * DataStructure->Magnetometer_sesitivity_factor * DataStructure->Magnetometer_X_scale;
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7fc f95d 	bl	8000c8c <__aeabi_i2f>
 80049d2:	4602      	mov	r2, r0
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	4619      	mov	r1, r3
 80049da:	4610      	mov	r0, r2
 80049dc:	f7fc f9aa 	bl	8000d34 <__aeabi_fmul>
 80049e0:	4603      	mov	r3, r0
 80049e2:	461a      	mov	r2, r3
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	4619      	mov	r1, r3
 80049ea:	4610      	mov	r0, r2
 80049ec:	f7fc f9a2 	bl	8000d34 <__aeabi_fmul>
 80049f0:	4603      	mov	r3, r0
 80049f2:	461a      	mov	r2, r3
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f8:	4619      	mov	r1, r3
 80049fa:	4610      	mov	r0, r2
 80049fc:	f7fc f99a 	bl	8000d34 <__aeabi_fmul>
 8004a00:	4603      	mov	r3, r0
 8004a02:	461a      	mov	r2, r3
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	65da      	str	r2, [r3, #92]	; 0x5c
	DataStructure->Magnetometer_Y_uT = DataStructure->Magnetometer_Y * DataStructure->Magnetometer_ASAY * DataStructure->Magnetometer_sesitivity_factor * DataStructure->Magnetometer_Y_scale;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f7fc f93c 	bl	8000c8c <__aeabi_i2f>
 8004a14:	4602      	mov	r2, r0
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	4610      	mov	r0, r2
 8004a1e:	f7fc f989 	bl	8000d34 <__aeabi_fmul>
 8004a22:	4603      	mov	r3, r0
 8004a24:	461a      	mov	r2, r3
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	4610      	mov	r0, r2
 8004a2e:	f7fc f981 	bl	8000d34 <__aeabi_fmul>
 8004a32:	4603      	mov	r3, r0
 8004a34:	461a      	mov	r2, r3
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	4610      	mov	r0, r2
 8004a3e:	f7fc f979 	bl	8000d34 <__aeabi_fmul>
 8004a42:	4603      	mov	r3, r0
 8004a44:	461a      	mov	r2, r3
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	661a      	str	r2, [r3, #96]	; 0x60
	DataStructure->Magnetometer_Z_uT = DataStructure->Magnetometer_Z * DataStructure->Magnetometer_ASAZ * DataStructure->Magnetometer_sesitivity_factor * DataStructure->Magnetometer_Z_scale;
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	; 0x26
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fc f91b 	bl	8000c8c <__aeabi_i2f>
 8004a56:	4602      	mov	r2, r0
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	699b      	ldr	r3, [r3, #24]
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	4610      	mov	r0, r2
 8004a60:	f7fc f968 	bl	8000d34 <__aeabi_fmul>
 8004a64:	4603      	mov	r3, r0
 8004a66:	461a      	mov	r2, r3
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4610      	mov	r0, r2
 8004a70:	f7fc f960 	bl	8000d34 <__aeabi_fmul>
 8004a74:	4603      	mov	r3, r0
 8004a76:	461a      	mov	r2, r3
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a7c:	4619      	mov	r1, r3
 8004a7e:	4610      	mov	r0, r2
 8004a80:	f7fc f958 	bl	8000d34 <__aeabi_fmul>
 8004a84:	4603      	mov	r3, r0
 8004a86:	461a      	mov	r2, r3
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	665a      	str	r2, [r3, #100]	; 0x64

	float a = DataStructure->Magnetometer_X_uT;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a90:	61fb      	str	r3, [r7, #28]
	float b = DataStructure->Magnetometer_Y_uT;
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a96:	61bb      	str	r3, [r7, #24]
	float c = DataStructure->Magnetometer_Z_uT;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a9c:	617b      	str	r3, [r7, #20]

	DataStructure->Magnetometer_X_uT = b;
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	65da      	str	r2, [r3, #92]	; 0x5c
	DataStructure->Magnetometer_Y_uT = a;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	69fa      	ldr	r2, [r7, #28]
 8004aa8:	661a      	str	r2, [r3, #96]	; 0x60
	DataStructure->Magnetometer_Z_uT = -c;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	665a      	str	r2, [r3, #100]	; 0x64

	return MPU9250_Read_Magnetometer_OK;
 8004ab4:	2312      	movs	r3, #18
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3720      	adds	r7, #32
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
	...

08004ac0 <MPU9250_Calibration_Acce>:

/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

void MPU9250_Calibration_Acce(I2C_HandleTypeDef *I2Cx,
	      	  	  	  	  	  	  	        struct MPU9250 *DataStructure) {
 8004ac0:	b590      	push	{r4, r7, lr}
 8004ac2:	b087      	sub	sp, #28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]

	float Acce_X_offset = 0, Acce_Y_offset = 0, Acce_Z_offset = 0;
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	617b      	str	r3, [r7, #20]
 8004ad0:	f04f 0300 	mov.w	r3, #0
 8004ad4:	613b      	str	r3, [r7, #16]
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 1000; ++i) {
 8004adc:	2300      	movs	r3, #0
 8004ade:	60bb      	str	r3, [r7, #8]
 8004ae0:	e02d      	b.n	8004b3e <MPU9250_Calibration_Acce+0x7e>

		MPU9250_Read_Accelerometer(I2Cx, DataStructure);
 8004ae2:	6839      	ldr	r1, [r7, #0]
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7ff fda5 	bl	8004634 <MPU9250_Read_Accelerometer>

		Acce_X_offset = Acce_X_offset + DataStructure->Accelerometer_X;
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7fc f8cb 	bl	8000c8c <__aeabi_i2f>
 8004af6:	4603      	mov	r3, r0
 8004af8:	4619      	mov	r1, r3
 8004afa:	6978      	ldr	r0, [r7, #20]
 8004afc:	f7fc f812 	bl	8000b24 <__addsf3>
 8004b00:	4603      	mov	r3, r0
 8004b02:	617b      	str	r3, [r7, #20]
		Acce_Y_offset = Acce_Y_offset + DataStructure->Accelerometer_Y;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fc f8be 	bl	8000c8c <__aeabi_i2f>
 8004b10:	4603      	mov	r3, r0
 8004b12:	4619      	mov	r1, r3
 8004b14:	6938      	ldr	r0, [r7, #16]
 8004b16:	f7fc f805 	bl	8000b24 <__addsf3>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	613b      	str	r3, [r7, #16]
		Acce_Z_offset = Acce_Z_offset + DataStructure->Accelerometer_Z;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7fc f8b1 	bl	8000c8c <__aeabi_i2f>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	f7fb fff8 	bl	8000b24 <__addsf3>
 8004b34:	4603      	mov	r3, r0
 8004b36:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 1000; ++i) {
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	60bb      	str	r3, [r7, #8]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b44:	dbcd      	blt.n	8004ae2 <MPU9250_Calibration_Acce+0x22>
	}

	DataStructure->Accelerometer_X_offset = Acce_X_offset / 1000;
 8004b46:	4916      	ldr	r1, [pc, #88]	; (8004ba0 <MPU9250_Calibration_Acce+0xe0>)
 8004b48:	6978      	ldr	r0, [r7, #20]
 8004b4a:	f7fc f9a7 	bl	8000e9c <__aeabi_fdiv>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	461a      	mov	r2, r3
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	629a      	str	r2, [r3, #40]	; 0x28
	DataStructure->Accelerometer_Y_offset = Acce_Y_offset / 1000;
 8004b56:	4912      	ldr	r1, [pc, #72]	; (8004ba0 <MPU9250_Calibration_Acce+0xe0>)
 8004b58:	6938      	ldr	r0, [r7, #16]
 8004b5a:	f7fc f99f 	bl	8000e9c <__aeabi_fdiv>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	461a      	mov	r2, r3
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	62da      	str	r2, [r3, #44]	; 0x2c
	DataStructure->Accelerometer_Z_offset = Acce_Z_offset / 1000;
 8004b66:	490e      	ldr	r1, [pc, #56]	; (8004ba0 <MPU9250_Calibration_Acce+0xe0>)
 8004b68:	68f8      	ldr	r0, [r7, #12]
 8004b6a:	f7fc f997 	bl	8000e9c <__aeabi_fdiv>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	461a      	mov	r2, r3
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	631a      	str	r2, [r3, #48]	; 0x30


	DataStructure->Accelerometer_Z_offset = DataStructure->Accelerometer_Z_offset - DataStructure->Accelerometer_sensitivity_factor;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fc f883 	bl	8000c8c <__aeabi_i2f>
 8004b86:	4603      	mov	r3, r0
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	f7fb ffc8 	bl	8000b20 <__aeabi_fsub>
 8004b90:	4603      	mov	r3, r0
 8004b92:	461a      	mov	r2, r3
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004b98:	bf00      	nop
 8004b9a:	371c      	adds	r7, #28
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd90      	pop	{r4, r7, pc}
 8004ba0:	447a0000 	.word	0x447a0000

08004ba4 <MPU9250_Calibration_Gyro>:

/* ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- */

void MPU9250_Calibration_Gyro(I2C_HandleTypeDef *I2Cx,
	      	  	  	  	  	  	  	        struct MPU9250 *DataStructure) {
 8004ba4:	b590      	push	{r4, r7, lr}
 8004ba6:	b08b      	sub	sp, #44	; 0x2c
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]

	double Gyro_X_offset = 0, Gyro_Y_offset = 0, Gyro_Z_offset = 0;
 8004bae:	f04f 0300 	mov.w	r3, #0
 8004bb2:	f04f 0400 	mov.w	r4, #0
 8004bb6:	e9c7 3408 	strd	r3, r4, [r7, #32]
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	f04f 0400 	mov.w	r4, #0
 8004bc2:	e9c7 3406 	strd	r3, r4, [r7, #24]
 8004bc6:	f04f 0300 	mov.w	r3, #0
 8004bca:	f04f 0400 	mov.w	r4, #0
 8004bce:	e9c7 3404 	strd	r3, r4, [r7, #16]

	for (int i = 0; i < 1000; ++i) {
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60fb      	str	r3, [r7, #12]
 8004bd6:	e03c      	b.n	8004c52 <MPU9250_Calibration_Gyro+0xae>

		MPU9250_Read_Gyroscope(I2Cx, DataStructure);
 8004bd8:	6839      	ldr	r1, [r7, #0]
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7ff fdd2 	bl	8004784 <MPU9250_Read_Gyroscope>

		Gyro_X_offset += DataStructure->Gyroscope_X;
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	f9b3 308a 	ldrsh.w	r3, [r3, #138]	; 0x8a
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fb fc04 	bl	80003f4 <__aeabi_i2d>
 8004bec:	4603      	mov	r3, r0
 8004bee:	460c      	mov	r4, r1
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	4623      	mov	r3, r4
 8004bf4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004bf8:	f7fb fab0 	bl	800015c <__adddf3>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	460c      	mov	r4, r1
 8004c00:	e9c7 3408 	strd	r3, r4, [r7, #32]
		Gyro_Y_offset += DataStructure->Gyroscope_Y;
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	f9b3 308c 	ldrsh.w	r3, [r3, #140]	; 0x8c
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fb fbf2 	bl	80003f4 <__aeabi_i2d>
 8004c10:	4603      	mov	r3, r0
 8004c12:	460c      	mov	r4, r1
 8004c14:	461a      	mov	r2, r3
 8004c16:	4623      	mov	r3, r4
 8004c18:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c1c:	f7fb fa9e 	bl	800015c <__adddf3>
 8004c20:	4603      	mov	r3, r0
 8004c22:	460c      	mov	r4, r1
 8004c24:	e9c7 3406 	strd	r3, r4, [r7, #24]
		Gyro_Z_offset += DataStructure->Gyroscope_Z;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	f9b3 308e 	ldrsh.w	r3, [r3, #142]	; 0x8e
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7fb fbe0 	bl	80003f4 <__aeabi_i2d>
 8004c34:	4603      	mov	r3, r0
 8004c36:	460c      	mov	r4, r1
 8004c38:	461a      	mov	r2, r3
 8004c3a:	4623      	mov	r3, r4
 8004c3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c40:	f7fb fa8c 	bl	800015c <__adddf3>
 8004c44:	4603      	mov	r3, r0
 8004c46:	460c      	mov	r4, r1
 8004c48:	e9c7 3404 	strd	r3, r4, [r7, #16]
	for (int i = 0; i < 1000; ++i) {
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	3301      	adds	r3, #1
 8004c50:	60fb      	str	r3, [r7, #12]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004c58:	dbbe      	blt.n	8004bd8 <MPU9250_Calibration_Gyro+0x34>
	}

	DataStructure->Gyroscope_X_offset = Gyro_X_offset / 1000;
 8004c5a:	f04f 0200 	mov.w	r2, #0
 8004c5e:	4b13      	ldr	r3, [pc, #76]	; (8004cac <MPU9250_Calibration_Gyro+0x108>)
 8004c60:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004c64:	f7fb fd5a 	bl	800071c <__aeabi_ddiv>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	460c      	mov	r4, r1
 8004c6c:	683a      	ldr	r2, [r7, #0]
 8004c6e:	e9c2 342a 	strd	r3, r4, [r2, #168]	; 0xa8
	DataStructure->Gyroscope_Y_offset = Gyro_Y_offset / 1000;
 8004c72:	f04f 0200 	mov.w	r2, #0
 8004c76:	4b0d      	ldr	r3, [pc, #52]	; (8004cac <MPU9250_Calibration_Gyro+0x108>)
 8004c78:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004c7c:	f7fb fd4e 	bl	800071c <__aeabi_ddiv>
 8004c80:	4603      	mov	r3, r0
 8004c82:	460c      	mov	r4, r1
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	e9c2 342c 	strd	r3, r4, [r2, #176]	; 0xb0
	DataStructure->Gyroscope_Z_offset = Gyro_Z_offset / 1000;
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	4b07      	ldr	r3, [pc, #28]	; (8004cac <MPU9250_Calibration_Gyro+0x108>)
 8004c90:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004c94:	f7fb fd42 	bl	800071c <__aeabi_ddiv>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	460c      	mov	r4, r1
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	e9c2 342e 	strd	r3, r4, [r2, #184]	; 0xb8

}
 8004ca2:	bf00      	nop
 8004ca4:	372c      	adds	r7, #44	; 0x2c
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd90      	pop	{r4, r7, pc}
 8004caa:	bf00      	nop
 8004cac:	408f4000 	.word	0x408f4000

08004cb0 <MPU9250_Calculate_RPY>:
	  r21p = 0, r22p = 1, r23p = 0,
	  r31p = 0, r32p = 0, r33p = 1;

void MPU9250_Calculate_RPY(I2C_HandleTypeDef *I2Cx,
	      	  	  	  	  	  	  		 struct MPU9250 *DataStructure,
										 double dt) {
 8004cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cb2:	b0b7      	sub	sp, #220	; 0xdc
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	62f8      	str	r0, [r7, #44]	; 0x2c
 8004cb8:	62b9      	str	r1, [r7, #40]	; 0x28
 8004cba:	e9c7 2308 	strd	r2, r3, [r7, #32]

	/* Case 1: */
	MPU9250_Read_Accelerometer(I2Cx, DataStructure);
 8004cbe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cc2:	f7ff fcb7 	bl	8004634 <MPU9250_Read_Accelerometer>
	MPU9250_Read_Gyroscope(I2Cx, DataStructure);
 8004cc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cca:	f7ff fd5b 	bl	8004784 <MPU9250_Read_Gyroscope>
	MPU9250_Read_Magnetometer(I2Cx, DataStructure);
 8004cce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cd2:	f7ff fe17 	bl	8004904 <MPU9250_Read_Magnetometer>

	/* Case 2: Calculate accelerometer Roll and Pitch */
	DataStructure->Accelerometer_Roll  = atan2f(DataStructure->Accelerometer_Y_g, DataStructure->Accelerometer_Z_g) * (180 / M_PI);
 8004cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	f006 fc71 	bl	800b5c8 <atan2f>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7fb fb95 	bl	8000418 <__aeabi_f2d>
 8004cee:	a3ce      	add	r3, pc, #824	; (adr r3, 8005028 <MPU9250_Calculate_RPY+0x378>)
 8004cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf4:	f7fb fbe8 	bl	80004c8 <__aeabi_dmul>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	460c      	mov	r4, r1
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	4621      	mov	r1, r4
 8004d00:	f7fb feba 	bl	8000a78 <__aeabi_d2f>
 8004d04:	4602      	mov	r2, r0
 8004d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d08:	669a      	str	r2, [r3, #104]	; 0x68
	DataStructure->Accelerometer_Pitch = atan2f(-DataStructure->Accelerometer_X_g, sqrtf(powf(DataStructure->Accelerometer_Y_g,2) + powf(DataStructure->Accelerometer_Z_g,2))) * (180 / M_PI);
 8004d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0e:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8004d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d16:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f006 fc56 	bl	800b5cc <powf>
 8004d20:	4605      	mov	r5, r0
 8004d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d26:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f006 fc4e 	bl	800b5cc <powf>
 8004d30:	4603      	mov	r3, r0
 8004d32:	4619      	mov	r1, r3
 8004d34:	4628      	mov	r0, r5
 8004d36:	f7fb fef5 	bl	8000b24 <__addsf3>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f006 fda5 	bl	800b88c <sqrtf>
 8004d42:	4603      	mov	r3, r0
 8004d44:	4619      	mov	r1, r3
 8004d46:	4620      	mov	r0, r4
 8004d48:	f006 fc3e 	bl	800b5c8 <atan2f>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fb fb62 	bl	8000418 <__aeabi_f2d>
 8004d54:	a3b4      	add	r3, pc, #720	; (adr r3, 8005028 <MPU9250_Calculate_RPY+0x378>)
 8004d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d5a:	f7fb fbb5 	bl	80004c8 <__aeabi_dmul>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	460c      	mov	r4, r1
 8004d62:	4618      	mov	r0, r3
 8004d64:	4621      	mov	r1, r4
 8004d66:	f7fb fe87 	bl	8000a78 <__aeabi_d2f>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6e:	66da      	str	r2, [r3, #108]	; 0x6c

	/* Case 3: Calculate gyroscope Roll, Pitch and Yaw */
	r11 = r11p + (r12p * DataStructure->Gyroscope_Z_dgs * (M_PI / 180) * dt) - (r13p * DataStructure->Gyroscope_Y_dgs * (M_PI / 180) * dt);
 8004d70:	4bb1      	ldr	r3, [pc, #708]	; (8005038 <MPU9250_Calculate_RPY+0x388>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fb fb4f 	bl	8000418 <__aeabi_f2d>
 8004d7a:	4605      	mov	r5, r0
 8004d7c:	460e      	mov	r6, r1
 8004d7e:	4baf      	ldr	r3, [pc, #700]	; (800503c <MPU9250_Calculate_RPY+0x38c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fb fb48 	bl	8000418 <__aeabi_f2d>
 8004d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8a:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8004d8e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004d92:	461a      	mov	r2, r3
 8004d94:	4623      	mov	r3, r4
 8004d96:	f7fb fb97 	bl	80004c8 <__aeabi_dmul>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	460c      	mov	r4, r1
 8004d9e:	4618      	mov	r0, r3
 8004da0:	4621      	mov	r1, r4
 8004da2:	a3a3      	add	r3, pc, #652	; (adr r3, 8005030 <MPU9250_Calculate_RPY+0x380>)
 8004da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da8:	f7fb fb8e 	bl	80004c8 <__aeabi_dmul>
 8004dac:	4603      	mov	r3, r0
 8004dae:	460c      	mov	r4, r1
 8004db0:	4618      	mov	r0, r3
 8004db2:	4621      	mov	r1, r4
 8004db4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004db8:	f7fb fb86 	bl	80004c8 <__aeabi_dmul>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	460c      	mov	r4, r1
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	4623      	mov	r3, r4
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	4631      	mov	r1, r6
 8004dc8:	f7fb f9c8 	bl	800015c <__adddf3>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	460c      	mov	r4, r1
 8004dd0:	461d      	mov	r5, r3
 8004dd2:	4626      	mov	r6, r4
 8004dd4:	4b9a      	ldr	r3, [pc, #616]	; (8005040 <MPU9250_Calculate_RPY+0x390>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fb fb1d 	bl	8000418 <__aeabi_f2d>
 8004dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004de0:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8004de4:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004de8:	461a      	mov	r2, r3
 8004dea:	4623      	mov	r3, r4
 8004dec:	f7fb fb6c 	bl	80004c8 <__aeabi_dmul>
 8004df0:	4603      	mov	r3, r0
 8004df2:	460c      	mov	r4, r1
 8004df4:	4618      	mov	r0, r3
 8004df6:	4621      	mov	r1, r4
 8004df8:	a38d      	add	r3, pc, #564	; (adr r3, 8005030 <MPU9250_Calculate_RPY+0x380>)
 8004dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfe:	f7fb fb63 	bl	80004c8 <__aeabi_dmul>
 8004e02:	4603      	mov	r3, r0
 8004e04:	460c      	mov	r4, r1
 8004e06:	4618      	mov	r0, r3
 8004e08:	4621      	mov	r1, r4
 8004e0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e0e:	f7fb fb5b 	bl	80004c8 <__aeabi_dmul>
 8004e12:	4603      	mov	r3, r0
 8004e14:	460c      	mov	r4, r1
 8004e16:	461a      	mov	r2, r3
 8004e18:	4623      	mov	r3, r4
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	4631      	mov	r1, r6
 8004e1e:	f7fb f99b 	bl	8000158 <__aeabi_dsub>
 8004e22:	4603      	mov	r3, r0
 8004e24:	460c      	mov	r4, r1
 8004e26:	4618      	mov	r0, r3
 8004e28:	4621      	mov	r1, r4
 8004e2a:	f7fb fe25 	bl	8000a78 <__aeabi_d2f>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	4b84      	ldr	r3, [pc, #528]	; (8005044 <MPU9250_Calculate_RPY+0x394>)
 8004e32:	601a      	str	r2, [r3, #0]
	r12 = (-r11p * DataStructure->Gyroscope_Z_dgs * (M_PI / 180) * dt) + r12p + (r13p * DataStructure->Gyroscope_X_dgs * (M_PI / 180) * dt);
 8004e34:	4b80      	ldr	r3, [pc, #512]	; (8005038 <MPU9250_Calculate_RPY+0x388>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7fb faeb 	bl	8000418 <__aeabi_f2d>
 8004e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e44:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8004e48:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	4623      	mov	r3, r4
 8004e50:	f7fb fb3a 	bl	80004c8 <__aeabi_dmul>
 8004e54:	4603      	mov	r3, r0
 8004e56:	460c      	mov	r4, r1
 8004e58:	4618      	mov	r0, r3
 8004e5a:	4621      	mov	r1, r4
 8004e5c:	a374      	add	r3, pc, #464	; (adr r3, 8005030 <MPU9250_Calculate_RPY+0x380>)
 8004e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e62:	f7fb fb31 	bl	80004c8 <__aeabi_dmul>
 8004e66:	4603      	mov	r3, r0
 8004e68:	460c      	mov	r4, r1
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e72:	f7fb fb29 	bl	80004c8 <__aeabi_dmul>
 8004e76:	4603      	mov	r3, r0
 8004e78:	460c      	mov	r4, r1
 8004e7a:	4625      	mov	r5, r4
 8004e7c:	461c      	mov	r4, r3
 8004e7e:	4b6f      	ldr	r3, [pc, #444]	; (800503c <MPU9250_Calculate_RPY+0x38c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fb fac8 	bl	8000418 <__aeabi_f2d>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	4620      	mov	r0, r4
 8004e8e:	4629      	mov	r1, r5
 8004e90:	f7fb f964 	bl	800015c <__adddf3>
 8004e94:	4603      	mov	r3, r0
 8004e96:	460c      	mov	r4, r1
 8004e98:	461d      	mov	r5, r3
 8004e9a:	4626      	mov	r6, r4
 8004e9c:	4b68      	ldr	r3, [pc, #416]	; (8005040 <MPU9250_Calculate_RPY+0x390>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f7fb fab9 	bl	8000418 <__aeabi_f2d>
 8004ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea8:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8004eac:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	4623      	mov	r3, r4
 8004eb4:	f7fb fb08 	bl	80004c8 <__aeabi_dmul>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	460c      	mov	r4, r1
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	4621      	mov	r1, r4
 8004ec0:	a35b      	add	r3, pc, #364	; (adr r3, 8005030 <MPU9250_Calculate_RPY+0x380>)
 8004ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec6:	f7fb faff 	bl	80004c8 <__aeabi_dmul>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	460c      	mov	r4, r1
 8004ece:	4618      	mov	r0, r3
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ed6:	f7fb faf7 	bl	80004c8 <__aeabi_dmul>
 8004eda:	4603      	mov	r3, r0
 8004edc:	460c      	mov	r4, r1
 8004ede:	461a      	mov	r2, r3
 8004ee0:	4623      	mov	r3, r4
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	4631      	mov	r1, r6
 8004ee6:	f7fb f939 	bl	800015c <__adddf3>
 8004eea:	4603      	mov	r3, r0
 8004eec:	460c      	mov	r4, r1
 8004eee:	4618      	mov	r0, r3
 8004ef0:	4621      	mov	r1, r4
 8004ef2:	f7fb fdc1 	bl	8000a78 <__aeabi_d2f>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	4b53      	ldr	r3, [pc, #332]	; (8005048 <MPU9250_Calculate_RPY+0x398>)
 8004efa:	601a      	str	r2, [r3, #0]
	r13 = (r11p * DataStructure->Gyroscope_Y_dgs * (M_PI / 180) * dt) - (r12p * DataStructure->Gyroscope_X_dgs * (M_PI / 180) * dt) + r13p;
 8004efc:	4b4e      	ldr	r3, [pc, #312]	; (8005038 <MPU9250_Calculate_RPY+0x388>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7fb fa89 	bl	8000418 <__aeabi_f2d>
 8004f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f08:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8004f0c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004f10:	461a      	mov	r2, r3
 8004f12:	4623      	mov	r3, r4
 8004f14:	f7fb fad8 	bl	80004c8 <__aeabi_dmul>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	460c      	mov	r4, r1
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	4621      	mov	r1, r4
 8004f20:	a343      	add	r3, pc, #268	; (adr r3, 8005030 <MPU9250_Calculate_RPY+0x380>)
 8004f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f26:	f7fb facf 	bl	80004c8 <__aeabi_dmul>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	460c      	mov	r4, r1
 8004f2e:	4618      	mov	r0, r3
 8004f30:	4621      	mov	r1, r4
 8004f32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f36:	f7fb fac7 	bl	80004c8 <__aeabi_dmul>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	460c      	mov	r4, r1
 8004f3e:	461d      	mov	r5, r3
 8004f40:	4626      	mov	r6, r4
 8004f42:	4b3e      	ldr	r3, [pc, #248]	; (800503c <MPU9250_Calculate_RPY+0x38c>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fb fa66 	bl	8000418 <__aeabi_f2d>
 8004f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4e:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8004f52:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004f56:	461a      	mov	r2, r3
 8004f58:	4623      	mov	r3, r4
 8004f5a:	f7fb fab5 	bl	80004c8 <__aeabi_dmul>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	460c      	mov	r4, r1
 8004f62:	4618      	mov	r0, r3
 8004f64:	4621      	mov	r1, r4
 8004f66:	a332      	add	r3, pc, #200	; (adr r3, 8005030 <MPU9250_Calculate_RPY+0x380>)
 8004f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6c:	f7fb faac 	bl	80004c8 <__aeabi_dmul>
 8004f70:	4603      	mov	r3, r0
 8004f72:	460c      	mov	r4, r1
 8004f74:	4618      	mov	r0, r3
 8004f76:	4621      	mov	r1, r4
 8004f78:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f7c:	f7fb faa4 	bl	80004c8 <__aeabi_dmul>
 8004f80:	4603      	mov	r3, r0
 8004f82:	460c      	mov	r4, r1
 8004f84:	461a      	mov	r2, r3
 8004f86:	4623      	mov	r3, r4
 8004f88:	4628      	mov	r0, r5
 8004f8a:	4631      	mov	r1, r6
 8004f8c:	f7fb f8e4 	bl	8000158 <__aeabi_dsub>
 8004f90:	4603      	mov	r3, r0
 8004f92:	460c      	mov	r4, r1
 8004f94:	4625      	mov	r5, r4
 8004f96:	461c      	mov	r4, r3
 8004f98:	4b29      	ldr	r3, [pc, #164]	; (8005040 <MPU9250_Calculate_RPY+0x390>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7fb fa3b 	bl	8000418 <__aeabi_f2d>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	4620      	mov	r0, r4
 8004fa8:	4629      	mov	r1, r5
 8004faa:	f7fb f8d7 	bl	800015c <__adddf3>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	460c      	mov	r4, r1
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	4621      	mov	r1, r4
 8004fb6:	f7fb fd5f 	bl	8000a78 <__aeabi_d2f>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	4b23      	ldr	r3, [pc, #140]	; (800504c <MPU9250_Calculate_RPY+0x39c>)
 8004fbe:	601a      	str	r2, [r3, #0]

	r21 = r21p + (r22p * DataStructure->Gyroscope_Z_dgs * (M_PI / 180) * dt) - (r23p * DataStructure->Gyroscope_Y_dgs * (M_PI / 180) * dt);
 8004fc0:	4b23      	ldr	r3, [pc, #140]	; (8005050 <MPU9250_Calculate_RPY+0x3a0>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7fb fa27 	bl	8000418 <__aeabi_f2d>
 8004fca:	4605      	mov	r5, r0
 8004fcc:	460e      	mov	r6, r1
 8004fce:	4b21      	ldr	r3, [pc, #132]	; (8005054 <MPU9250_Calculate_RPY+0x3a4>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fb fa20 	bl	8000418 <__aeabi_f2d>
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8004fde:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	4623      	mov	r3, r4
 8004fe6:	f7fb fa6f 	bl	80004c8 <__aeabi_dmul>
 8004fea:	4603      	mov	r3, r0
 8004fec:	460c      	mov	r4, r1
 8004fee:	4618      	mov	r0, r3
 8004ff0:	4621      	mov	r1, r4
 8004ff2:	a30f      	add	r3, pc, #60	; (adr r3, 8005030 <MPU9250_Calculate_RPY+0x380>)
 8004ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff8:	f7fb fa66 	bl	80004c8 <__aeabi_dmul>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	460c      	mov	r4, r1
 8005000:	4618      	mov	r0, r3
 8005002:	4621      	mov	r1, r4
 8005004:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005008:	f7fb fa5e 	bl	80004c8 <__aeabi_dmul>
 800500c:	4603      	mov	r3, r0
 800500e:	460c      	mov	r4, r1
 8005010:	461a      	mov	r2, r3
 8005012:	4623      	mov	r3, r4
 8005014:	4628      	mov	r0, r5
 8005016:	4631      	mov	r1, r6
 8005018:	f7fb f8a0 	bl	800015c <__adddf3>
 800501c:	4603      	mov	r3, r0
 800501e:	460c      	mov	r4, r1
 8005020:	e01a      	b.n	8005058 <MPU9250_Calculate_RPY+0x3a8>
 8005022:	bf00      	nop
 8005024:	f3af 8000 	nop.w
 8005028:	1a63c1f8 	.word	0x1a63c1f8
 800502c:	404ca5dc 	.word	0x404ca5dc
 8005030:	a2529d39 	.word	0xa2529d39
 8005034:	3f91df46 	.word	0x3f91df46
 8005038:	20000030 	.word	0x20000030
 800503c:	200003e0 	.word	0x200003e0
 8005040:	200003e4 	.word	0x200003e4
 8005044:	20000024 	.word	0x20000024
 8005048:	200003c8 	.word	0x200003c8
 800504c:	200003cc 	.word	0x200003cc
 8005050:	200003e8 	.word	0x200003e8
 8005054:	20000034 	.word	0x20000034
 8005058:	461d      	mov	r5, r3
 800505a:	4626      	mov	r6, r4
 800505c:	4bd2      	ldr	r3, [pc, #840]	; (80053a8 <MPU9250_Calculate_RPY+0x6f8>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4618      	mov	r0, r3
 8005062:	f7fb f9d9 	bl	8000418 <__aeabi_f2d>
 8005066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005068:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800506c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005070:	461a      	mov	r2, r3
 8005072:	4623      	mov	r3, r4
 8005074:	f7fb fa28 	bl	80004c8 <__aeabi_dmul>
 8005078:	4603      	mov	r3, r0
 800507a:	460c      	mov	r4, r1
 800507c:	4618      	mov	r0, r3
 800507e:	4621      	mov	r1, r4
 8005080:	a3c7      	add	r3, pc, #796	; (adr r3, 80053a0 <MPU9250_Calculate_RPY+0x6f0>)
 8005082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005086:	f7fb fa1f 	bl	80004c8 <__aeabi_dmul>
 800508a:	4603      	mov	r3, r0
 800508c:	460c      	mov	r4, r1
 800508e:	4618      	mov	r0, r3
 8005090:	4621      	mov	r1, r4
 8005092:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005096:	f7fb fa17 	bl	80004c8 <__aeabi_dmul>
 800509a:	4603      	mov	r3, r0
 800509c:	460c      	mov	r4, r1
 800509e:	461a      	mov	r2, r3
 80050a0:	4623      	mov	r3, r4
 80050a2:	4628      	mov	r0, r5
 80050a4:	4631      	mov	r1, r6
 80050a6:	f7fb f857 	bl	8000158 <__aeabi_dsub>
 80050aa:	4603      	mov	r3, r0
 80050ac:	460c      	mov	r4, r1
 80050ae:	4618      	mov	r0, r3
 80050b0:	4621      	mov	r1, r4
 80050b2:	f7fb fce1 	bl	8000a78 <__aeabi_d2f>
 80050b6:	4602      	mov	r2, r0
 80050b8:	4bbc      	ldr	r3, [pc, #752]	; (80053ac <MPU9250_Calculate_RPY+0x6fc>)
 80050ba:	601a      	str	r2, [r3, #0]
	r22 = (-r21p * DataStructure->Gyroscope_Z_dgs * (M_PI / 180) * dt) + r22p + (r23p * DataStructure->Gyroscope_X_dgs * (M_PI / 180) * dt);
 80050bc:	4bbc      	ldr	r3, [pc, #752]	; (80053b0 <MPU9250_Calculate_RPY+0x700>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7fb f9a7 	bl	8000418 <__aeabi_f2d>
 80050ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050cc:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 80050d0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80050d4:	461a      	mov	r2, r3
 80050d6:	4623      	mov	r3, r4
 80050d8:	f7fb f9f6 	bl	80004c8 <__aeabi_dmul>
 80050dc:	4603      	mov	r3, r0
 80050de:	460c      	mov	r4, r1
 80050e0:	4618      	mov	r0, r3
 80050e2:	4621      	mov	r1, r4
 80050e4:	a3ae      	add	r3, pc, #696	; (adr r3, 80053a0 <MPU9250_Calculate_RPY+0x6f0>)
 80050e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ea:	f7fb f9ed 	bl	80004c8 <__aeabi_dmul>
 80050ee:	4603      	mov	r3, r0
 80050f0:	460c      	mov	r4, r1
 80050f2:	4618      	mov	r0, r3
 80050f4:	4621      	mov	r1, r4
 80050f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050fa:	f7fb f9e5 	bl	80004c8 <__aeabi_dmul>
 80050fe:	4603      	mov	r3, r0
 8005100:	460c      	mov	r4, r1
 8005102:	4625      	mov	r5, r4
 8005104:	461c      	mov	r4, r3
 8005106:	4bab      	ldr	r3, [pc, #684]	; (80053b4 <MPU9250_Calculate_RPY+0x704>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f7fb f984 	bl	8000418 <__aeabi_f2d>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	4620      	mov	r0, r4
 8005116:	4629      	mov	r1, r5
 8005118:	f7fb f820 	bl	800015c <__adddf3>
 800511c:	4603      	mov	r3, r0
 800511e:	460c      	mov	r4, r1
 8005120:	461d      	mov	r5, r3
 8005122:	4626      	mov	r6, r4
 8005124:	4ba0      	ldr	r3, [pc, #640]	; (80053a8 <MPU9250_Calculate_RPY+0x6f8>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4618      	mov	r0, r3
 800512a:	f7fb f975 	bl	8000418 <__aeabi_f2d>
 800512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005130:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8005134:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005138:	461a      	mov	r2, r3
 800513a:	4623      	mov	r3, r4
 800513c:	f7fb f9c4 	bl	80004c8 <__aeabi_dmul>
 8005140:	4603      	mov	r3, r0
 8005142:	460c      	mov	r4, r1
 8005144:	4618      	mov	r0, r3
 8005146:	4621      	mov	r1, r4
 8005148:	a395      	add	r3, pc, #596	; (adr r3, 80053a0 <MPU9250_Calculate_RPY+0x6f0>)
 800514a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514e:	f7fb f9bb 	bl	80004c8 <__aeabi_dmul>
 8005152:	4603      	mov	r3, r0
 8005154:	460c      	mov	r4, r1
 8005156:	4618      	mov	r0, r3
 8005158:	4621      	mov	r1, r4
 800515a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800515e:	f7fb f9b3 	bl	80004c8 <__aeabi_dmul>
 8005162:	4603      	mov	r3, r0
 8005164:	460c      	mov	r4, r1
 8005166:	461a      	mov	r2, r3
 8005168:	4623      	mov	r3, r4
 800516a:	4628      	mov	r0, r5
 800516c:	4631      	mov	r1, r6
 800516e:	f7fa fff5 	bl	800015c <__adddf3>
 8005172:	4603      	mov	r3, r0
 8005174:	460c      	mov	r4, r1
 8005176:	4618      	mov	r0, r3
 8005178:	4621      	mov	r1, r4
 800517a:	f7fb fc7d 	bl	8000a78 <__aeabi_d2f>
 800517e:	4602      	mov	r2, r0
 8005180:	4b8d      	ldr	r3, [pc, #564]	; (80053b8 <MPU9250_Calculate_RPY+0x708>)
 8005182:	601a      	str	r2, [r3, #0]
	r23 = (r21p * DataStructure->Gyroscope_Y_dgs * (M_PI / 180) * dt) - (r22p * DataStructure->Gyroscope_X_dgs * (M_PI / 180) * dt) + r23p;
 8005184:	4b8a      	ldr	r3, [pc, #552]	; (80053b0 <MPU9250_Calculate_RPY+0x700>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4618      	mov	r0, r3
 800518a:	f7fb f945 	bl	8000418 <__aeabi_f2d>
 800518e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005190:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8005194:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005198:	461a      	mov	r2, r3
 800519a:	4623      	mov	r3, r4
 800519c:	f7fb f994 	bl	80004c8 <__aeabi_dmul>
 80051a0:	4603      	mov	r3, r0
 80051a2:	460c      	mov	r4, r1
 80051a4:	4618      	mov	r0, r3
 80051a6:	4621      	mov	r1, r4
 80051a8:	a37d      	add	r3, pc, #500	; (adr r3, 80053a0 <MPU9250_Calculate_RPY+0x6f0>)
 80051aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ae:	f7fb f98b 	bl	80004c8 <__aeabi_dmul>
 80051b2:	4603      	mov	r3, r0
 80051b4:	460c      	mov	r4, r1
 80051b6:	4618      	mov	r0, r3
 80051b8:	4621      	mov	r1, r4
 80051ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051be:	f7fb f983 	bl	80004c8 <__aeabi_dmul>
 80051c2:	4603      	mov	r3, r0
 80051c4:	460c      	mov	r4, r1
 80051c6:	461d      	mov	r5, r3
 80051c8:	4626      	mov	r6, r4
 80051ca:	4b7a      	ldr	r3, [pc, #488]	; (80053b4 <MPU9250_Calculate_RPY+0x704>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fb f922 	bl	8000418 <__aeabi_f2d>
 80051d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d6:	f103 0490 	add.w	r4, r3, #144	; 0x90
 80051da:	e9d4 3400 	ldrd	r3, r4, [r4]
 80051de:	461a      	mov	r2, r3
 80051e0:	4623      	mov	r3, r4
 80051e2:	f7fb f971 	bl	80004c8 <__aeabi_dmul>
 80051e6:	4603      	mov	r3, r0
 80051e8:	460c      	mov	r4, r1
 80051ea:	4618      	mov	r0, r3
 80051ec:	4621      	mov	r1, r4
 80051ee:	a36c      	add	r3, pc, #432	; (adr r3, 80053a0 <MPU9250_Calculate_RPY+0x6f0>)
 80051f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f4:	f7fb f968 	bl	80004c8 <__aeabi_dmul>
 80051f8:	4603      	mov	r3, r0
 80051fa:	460c      	mov	r4, r1
 80051fc:	4618      	mov	r0, r3
 80051fe:	4621      	mov	r1, r4
 8005200:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005204:	f7fb f960 	bl	80004c8 <__aeabi_dmul>
 8005208:	4603      	mov	r3, r0
 800520a:	460c      	mov	r4, r1
 800520c:	461a      	mov	r2, r3
 800520e:	4623      	mov	r3, r4
 8005210:	4628      	mov	r0, r5
 8005212:	4631      	mov	r1, r6
 8005214:	f7fa ffa0 	bl	8000158 <__aeabi_dsub>
 8005218:	4603      	mov	r3, r0
 800521a:	460c      	mov	r4, r1
 800521c:	4625      	mov	r5, r4
 800521e:	461c      	mov	r4, r3
 8005220:	4b61      	ldr	r3, [pc, #388]	; (80053a8 <MPU9250_Calculate_RPY+0x6f8>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4618      	mov	r0, r3
 8005226:	f7fb f8f7 	bl	8000418 <__aeabi_f2d>
 800522a:	4602      	mov	r2, r0
 800522c:	460b      	mov	r3, r1
 800522e:	4620      	mov	r0, r4
 8005230:	4629      	mov	r1, r5
 8005232:	f7fa ff93 	bl	800015c <__adddf3>
 8005236:	4603      	mov	r3, r0
 8005238:	460c      	mov	r4, r1
 800523a:	4618      	mov	r0, r3
 800523c:	4621      	mov	r1, r4
 800523e:	f7fb fc1b 	bl	8000a78 <__aeabi_d2f>
 8005242:	4602      	mov	r2, r0
 8005244:	4b5d      	ldr	r3, [pc, #372]	; (80053bc <MPU9250_Calculate_RPY+0x70c>)
 8005246:	601a      	str	r2, [r3, #0]

	r31 = r31p + (r32p * DataStructure->Gyroscope_Z_dgs * (M_PI / 180) * dt) - (r33p * DataStructure->Gyroscope_Y_dgs * (M_PI / 180) * dt);
 8005248:	4b5d      	ldr	r3, [pc, #372]	; (80053c0 <MPU9250_Calculate_RPY+0x710>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4618      	mov	r0, r3
 800524e:	f7fb f8e3 	bl	8000418 <__aeabi_f2d>
 8005252:	4605      	mov	r5, r0
 8005254:	460e      	mov	r6, r1
 8005256:	4b5b      	ldr	r3, [pc, #364]	; (80053c4 <MPU9250_Calculate_RPY+0x714>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4618      	mov	r0, r3
 800525c:	f7fb f8dc 	bl	8000418 <__aeabi_f2d>
 8005260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005262:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8005266:	e9d4 3400 	ldrd	r3, r4, [r4]
 800526a:	461a      	mov	r2, r3
 800526c:	4623      	mov	r3, r4
 800526e:	f7fb f92b 	bl	80004c8 <__aeabi_dmul>
 8005272:	4603      	mov	r3, r0
 8005274:	460c      	mov	r4, r1
 8005276:	4618      	mov	r0, r3
 8005278:	4621      	mov	r1, r4
 800527a:	a349      	add	r3, pc, #292	; (adr r3, 80053a0 <MPU9250_Calculate_RPY+0x6f0>)
 800527c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005280:	f7fb f922 	bl	80004c8 <__aeabi_dmul>
 8005284:	4603      	mov	r3, r0
 8005286:	460c      	mov	r4, r1
 8005288:	4618      	mov	r0, r3
 800528a:	4621      	mov	r1, r4
 800528c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005290:	f7fb f91a 	bl	80004c8 <__aeabi_dmul>
 8005294:	4603      	mov	r3, r0
 8005296:	460c      	mov	r4, r1
 8005298:	461a      	mov	r2, r3
 800529a:	4623      	mov	r3, r4
 800529c:	4628      	mov	r0, r5
 800529e:	4631      	mov	r1, r6
 80052a0:	f7fa ff5c 	bl	800015c <__adddf3>
 80052a4:	4603      	mov	r3, r0
 80052a6:	460c      	mov	r4, r1
 80052a8:	461d      	mov	r5, r3
 80052aa:	4626      	mov	r6, r4
 80052ac:	4b46      	ldr	r3, [pc, #280]	; (80053c8 <MPU9250_Calculate_RPY+0x718>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4618      	mov	r0, r3
 80052b2:	f7fb f8b1 	bl	8000418 <__aeabi_f2d>
 80052b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b8:	f103 0498 	add.w	r4, r3, #152	; 0x98
 80052bc:	e9d4 3400 	ldrd	r3, r4, [r4]
 80052c0:	461a      	mov	r2, r3
 80052c2:	4623      	mov	r3, r4
 80052c4:	f7fb f900 	bl	80004c8 <__aeabi_dmul>
 80052c8:	4603      	mov	r3, r0
 80052ca:	460c      	mov	r4, r1
 80052cc:	4618      	mov	r0, r3
 80052ce:	4621      	mov	r1, r4
 80052d0:	a333      	add	r3, pc, #204	; (adr r3, 80053a0 <MPU9250_Calculate_RPY+0x6f0>)
 80052d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d6:	f7fb f8f7 	bl	80004c8 <__aeabi_dmul>
 80052da:	4603      	mov	r3, r0
 80052dc:	460c      	mov	r4, r1
 80052de:	4618      	mov	r0, r3
 80052e0:	4621      	mov	r1, r4
 80052e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052e6:	f7fb f8ef 	bl	80004c8 <__aeabi_dmul>
 80052ea:	4603      	mov	r3, r0
 80052ec:	460c      	mov	r4, r1
 80052ee:	461a      	mov	r2, r3
 80052f0:	4623      	mov	r3, r4
 80052f2:	4628      	mov	r0, r5
 80052f4:	4631      	mov	r1, r6
 80052f6:	f7fa ff2f 	bl	8000158 <__aeabi_dsub>
 80052fa:	4603      	mov	r3, r0
 80052fc:	460c      	mov	r4, r1
 80052fe:	4618      	mov	r0, r3
 8005300:	4621      	mov	r1, r4
 8005302:	f7fb fbb9 	bl	8000a78 <__aeabi_d2f>
 8005306:	4602      	mov	r2, r0
 8005308:	4b30      	ldr	r3, [pc, #192]	; (80053cc <MPU9250_Calculate_RPY+0x71c>)
 800530a:	601a      	str	r2, [r3, #0]
	r32 = (-r31p * DataStructure->Gyroscope_Z_dgs * (M_PI / 180) * dt) + r32p + (r33p * DataStructure->Gyroscope_X_dgs * (M_PI / 180) * dt);
 800530c:	4b2c      	ldr	r3, [pc, #176]	; (80053c0 <MPU9250_Calculate_RPY+0x710>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005314:	4618      	mov	r0, r3
 8005316:	f7fb f87f 	bl	8000418 <__aeabi_f2d>
 800531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531c:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8005320:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005324:	461a      	mov	r2, r3
 8005326:	4623      	mov	r3, r4
 8005328:	f7fb f8ce 	bl	80004c8 <__aeabi_dmul>
 800532c:	4603      	mov	r3, r0
 800532e:	460c      	mov	r4, r1
 8005330:	4618      	mov	r0, r3
 8005332:	4621      	mov	r1, r4
 8005334:	a31a      	add	r3, pc, #104	; (adr r3, 80053a0 <MPU9250_Calculate_RPY+0x6f0>)
 8005336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533a:	f7fb f8c5 	bl	80004c8 <__aeabi_dmul>
 800533e:	4603      	mov	r3, r0
 8005340:	460c      	mov	r4, r1
 8005342:	4618      	mov	r0, r3
 8005344:	4621      	mov	r1, r4
 8005346:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800534a:	f7fb f8bd 	bl	80004c8 <__aeabi_dmul>
 800534e:	4603      	mov	r3, r0
 8005350:	460c      	mov	r4, r1
 8005352:	4625      	mov	r5, r4
 8005354:	461c      	mov	r4, r3
 8005356:	4b1b      	ldr	r3, [pc, #108]	; (80053c4 <MPU9250_Calculate_RPY+0x714>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4618      	mov	r0, r3
 800535c:	f7fb f85c 	bl	8000418 <__aeabi_f2d>
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	4620      	mov	r0, r4
 8005366:	4629      	mov	r1, r5
 8005368:	f7fa fef8 	bl	800015c <__adddf3>
 800536c:	4603      	mov	r3, r0
 800536e:	460c      	mov	r4, r1
 8005370:	461d      	mov	r5, r3
 8005372:	4626      	mov	r6, r4
 8005374:	4b14      	ldr	r3, [pc, #80]	; (80053c8 <MPU9250_Calculate_RPY+0x718>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	4618      	mov	r0, r3
 800537a:	f7fb f84d 	bl	8000418 <__aeabi_f2d>
 800537e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005380:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8005384:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005388:	461a      	mov	r2, r3
 800538a:	4623      	mov	r3, r4
 800538c:	f7fb f89c 	bl	80004c8 <__aeabi_dmul>
 8005390:	4603      	mov	r3, r0
 8005392:	460c      	mov	r4, r1
 8005394:	4618      	mov	r0, r3
 8005396:	4621      	mov	r1, r4
 8005398:	e01a      	b.n	80053d0 <MPU9250_Calculate_RPY+0x720>
 800539a:	bf00      	nop
 800539c:	f3af 8000 	nop.w
 80053a0:	a2529d39 	.word	0xa2529d39
 80053a4:	3f91df46 	.word	0x3f91df46
 80053a8:	200003ec 	.word	0x200003ec
 80053ac:	200003d0 	.word	0x200003d0
 80053b0:	200003e8 	.word	0x200003e8
 80053b4:	20000034 	.word	0x20000034
 80053b8:	20000028 	.word	0x20000028
 80053bc:	200003d4 	.word	0x200003d4
 80053c0:	200003f0 	.word	0x200003f0
 80053c4:	200003f4 	.word	0x200003f4
 80053c8:	20000038 	.word	0x20000038
 80053cc:	200003d8 	.word	0x200003d8
 80053d0:	a3b3      	add	r3, pc, #716	; (adr r3, 80056a0 <MPU9250_Calculate_RPY+0x9f0>)
 80053d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d6:	f7fb f877 	bl	80004c8 <__aeabi_dmul>
 80053da:	4603      	mov	r3, r0
 80053dc:	460c      	mov	r4, r1
 80053de:	4618      	mov	r0, r3
 80053e0:	4621      	mov	r1, r4
 80053e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80053e6:	f7fb f86f 	bl	80004c8 <__aeabi_dmul>
 80053ea:	4603      	mov	r3, r0
 80053ec:	460c      	mov	r4, r1
 80053ee:	461a      	mov	r2, r3
 80053f0:	4623      	mov	r3, r4
 80053f2:	4628      	mov	r0, r5
 80053f4:	4631      	mov	r1, r6
 80053f6:	f7fa feb1 	bl	800015c <__adddf3>
 80053fa:	4603      	mov	r3, r0
 80053fc:	460c      	mov	r4, r1
 80053fe:	4618      	mov	r0, r3
 8005400:	4621      	mov	r1, r4
 8005402:	f7fb fb39 	bl	8000a78 <__aeabi_d2f>
 8005406:	4602      	mov	r2, r0
 8005408:	4ba9      	ldr	r3, [pc, #676]	; (80056b0 <MPU9250_Calculate_RPY+0xa00>)
 800540a:	601a      	str	r2, [r3, #0]
	r33 = (r31p * DataStructure->Gyroscope_Y_dgs * (M_PI / 180) * dt) - (r32p * DataStructure->Gyroscope_X_dgs * (M_PI / 180) * dt) + r33p;
 800540c:	4ba9      	ldr	r3, [pc, #676]	; (80056b4 <MPU9250_Calculate_RPY+0xa04>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4618      	mov	r0, r3
 8005412:	f7fb f801 	bl	8000418 <__aeabi_f2d>
 8005416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005418:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800541c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005420:	461a      	mov	r2, r3
 8005422:	4623      	mov	r3, r4
 8005424:	f7fb f850 	bl	80004c8 <__aeabi_dmul>
 8005428:	4603      	mov	r3, r0
 800542a:	460c      	mov	r4, r1
 800542c:	4618      	mov	r0, r3
 800542e:	4621      	mov	r1, r4
 8005430:	a39b      	add	r3, pc, #620	; (adr r3, 80056a0 <MPU9250_Calculate_RPY+0x9f0>)
 8005432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005436:	f7fb f847 	bl	80004c8 <__aeabi_dmul>
 800543a:	4603      	mov	r3, r0
 800543c:	460c      	mov	r4, r1
 800543e:	4618      	mov	r0, r3
 8005440:	4621      	mov	r1, r4
 8005442:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005446:	f7fb f83f 	bl	80004c8 <__aeabi_dmul>
 800544a:	4603      	mov	r3, r0
 800544c:	460c      	mov	r4, r1
 800544e:	461d      	mov	r5, r3
 8005450:	4626      	mov	r6, r4
 8005452:	4b99      	ldr	r3, [pc, #612]	; (80056b8 <MPU9250_Calculate_RPY+0xa08>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4618      	mov	r0, r3
 8005458:	f7fa ffde 	bl	8000418 <__aeabi_f2d>
 800545c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800545e:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8005462:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005466:	461a      	mov	r2, r3
 8005468:	4623      	mov	r3, r4
 800546a:	f7fb f82d 	bl	80004c8 <__aeabi_dmul>
 800546e:	4603      	mov	r3, r0
 8005470:	460c      	mov	r4, r1
 8005472:	4618      	mov	r0, r3
 8005474:	4621      	mov	r1, r4
 8005476:	a38a      	add	r3, pc, #552	; (adr r3, 80056a0 <MPU9250_Calculate_RPY+0x9f0>)
 8005478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547c:	f7fb f824 	bl	80004c8 <__aeabi_dmul>
 8005480:	4603      	mov	r3, r0
 8005482:	460c      	mov	r4, r1
 8005484:	4618      	mov	r0, r3
 8005486:	4621      	mov	r1, r4
 8005488:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800548c:	f7fb f81c 	bl	80004c8 <__aeabi_dmul>
 8005490:	4603      	mov	r3, r0
 8005492:	460c      	mov	r4, r1
 8005494:	461a      	mov	r2, r3
 8005496:	4623      	mov	r3, r4
 8005498:	4628      	mov	r0, r5
 800549a:	4631      	mov	r1, r6
 800549c:	f7fa fe5c 	bl	8000158 <__aeabi_dsub>
 80054a0:	4603      	mov	r3, r0
 80054a2:	460c      	mov	r4, r1
 80054a4:	4625      	mov	r5, r4
 80054a6:	461c      	mov	r4, r3
 80054a8:	4b84      	ldr	r3, [pc, #528]	; (80056bc <MPU9250_Calculate_RPY+0xa0c>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f7fa ffb3 	bl	8000418 <__aeabi_f2d>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	4620      	mov	r0, r4
 80054b8:	4629      	mov	r1, r5
 80054ba:	f7fa fe4f 	bl	800015c <__adddf3>
 80054be:	4603      	mov	r3, r0
 80054c0:	460c      	mov	r4, r1
 80054c2:	4618      	mov	r0, r3
 80054c4:	4621      	mov	r1, r4
 80054c6:	f7fb fad7 	bl	8000a78 <__aeabi_d2f>
 80054ca:	4602      	mov	r2, r0
 80054cc:	4b7c      	ldr	r3, [pc, #496]	; (80056c0 <MPU9250_Calculate_RPY+0xa10>)
 80054ce:	601a      	str	r2, [r3, #0]

	r11p = r11, r12p = r12, r13p = r13,
 80054d0:	4b7c      	ldr	r3, [pc, #496]	; (80056c4 <MPU9250_Calculate_RPY+0xa14>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a7c      	ldr	r2, [pc, #496]	; (80056c8 <MPU9250_Calculate_RPY+0xa18>)
 80054d6:	6013      	str	r3, [r2, #0]
 80054d8:	4b7c      	ldr	r3, [pc, #496]	; (80056cc <MPU9250_Calculate_RPY+0xa1c>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a7c      	ldr	r2, [pc, #496]	; (80056d0 <MPU9250_Calculate_RPY+0xa20>)
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	4b7c      	ldr	r3, [pc, #496]	; (80056d4 <MPU9250_Calculate_RPY+0xa24>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a7c      	ldr	r2, [pc, #496]	; (80056d8 <MPU9250_Calculate_RPY+0xa28>)
 80054e6:	6013      	str	r3, [r2, #0]
	r21p = r21, r22p = r22, r23p = r23,
 80054e8:	4b7c      	ldr	r3, [pc, #496]	; (80056dc <MPU9250_Calculate_RPY+0xa2c>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a7c      	ldr	r2, [pc, #496]	; (80056e0 <MPU9250_Calculate_RPY+0xa30>)
 80054ee:	6013      	str	r3, [r2, #0]
 80054f0:	4b7c      	ldr	r3, [pc, #496]	; (80056e4 <MPU9250_Calculate_RPY+0xa34>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a7c      	ldr	r2, [pc, #496]	; (80056e8 <MPU9250_Calculate_RPY+0xa38>)
 80054f6:	6013      	str	r3, [r2, #0]
 80054f8:	4b7c      	ldr	r3, [pc, #496]	; (80056ec <MPU9250_Calculate_RPY+0xa3c>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a7c      	ldr	r2, [pc, #496]	; (80056f0 <MPU9250_Calculate_RPY+0xa40>)
 80054fe:	6013      	str	r3, [r2, #0]
	r31p = r31, r32p = r32, r33p = r33;
 8005500:	4b7c      	ldr	r3, [pc, #496]	; (80056f4 <MPU9250_Calculate_RPY+0xa44>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a6b      	ldr	r2, [pc, #428]	; (80056b4 <MPU9250_Calculate_RPY+0xa04>)
 8005506:	6013      	str	r3, [r2, #0]
 8005508:	4b69      	ldr	r3, [pc, #420]	; (80056b0 <MPU9250_Calculate_RPY+0xa00>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a6a      	ldr	r2, [pc, #424]	; (80056b8 <MPU9250_Calculate_RPY+0xa08>)
 800550e:	6013      	str	r3, [r2, #0]
 8005510:	4b6b      	ldr	r3, [pc, #428]	; (80056c0 <MPU9250_Calculate_RPY+0xa10>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a69      	ldr	r2, [pc, #420]	; (80056bc <MPU9250_Calculate_RPY+0xa0c>)
 8005516:	6013      	str	r3, [r2, #0]

	float Beta = atan2f(-r31, sqrtf( powf(r11,2) + powf(r21,2) ) );
 8005518:	4b76      	ldr	r3, [pc, #472]	; (80056f4 <MPU9250_Calculate_RPY+0xa44>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8005520:	4b68      	ldr	r3, [pc, #416]	; (80056c4 <MPU9250_Calculate_RPY+0xa14>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005528:	4618      	mov	r0, r3
 800552a:	f006 f84f 	bl	800b5cc <powf>
 800552e:	4605      	mov	r5, r0
 8005530:	4b6a      	ldr	r3, [pc, #424]	; (80056dc <MPU9250_Calculate_RPY+0xa2c>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005538:	4618      	mov	r0, r3
 800553a:	f006 f847 	bl	800b5cc <powf>
 800553e:	4603      	mov	r3, r0
 8005540:	4619      	mov	r1, r3
 8005542:	4628      	mov	r0, r5
 8005544:	f7fb faee 	bl	8000b24 <__addsf3>
 8005548:	4603      	mov	r3, r0
 800554a:	4618      	mov	r0, r3
 800554c:	f006 f99e 	bl	800b88c <sqrtf>
 8005550:	4603      	mov	r3, r0
 8005552:	4619      	mov	r1, r3
 8005554:	4620      	mov	r0, r4
 8005556:	f006 f837 	bl	800b5c8 <atan2f>
 800555a:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4

	DataStructure->Gyroscope_Pitch = Beta * (180 / M_PI);
 800555e:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8005562:	f7fa ff59 	bl	8000418 <__aeabi_f2d>
 8005566:	a350      	add	r3, pc, #320	; (adr r3, 80056a8 <MPU9250_Calculate_RPY+0x9f8>)
 8005568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556c:	f7fa ffac 	bl	80004c8 <__aeabi_dmul>
 8005570:	4603      	mov	r3, r0
 8005572:	460c      	mov	r4, r1
 8005574:	4618      	mov	r0, r3
 8005576:	4621      	mov	r1, r4
 8005578:	f7fb fa7e 	bl	8000a78 <__aeabi_d2f>
 800557c:	4602      	mov	r2, r0
 800557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005580:	675a      	str	r2, [r3, #116]	; 0x74
	DataStructure->Gyroscope_Roll  = atan2f(r32 / cosf(Beta), r33 / cosf(Beta) ) * (180 / M_PI);
 8005582:	4b4b      	ldr	r3, [pc, #300]	; (80056b0 <MPU9250_Calculate_RPY+0xa00>)
 8005584:	681c      	ldr	r4, [r3, #0]
 8005586:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800558a:	f005 fdb3 	bl	800b0f4 <cosf>
 800558e:	4603      	mov	r3, r0
 8005590:	4619      	mov	r1, r3
 8005592:	4620      	mov	r0, r4
 8005594:	f7fb fc82 	bl	8000e9c <__aeabi_fdiv>
 8005598:	4603      	mov	r3, r0
 800559a:	461d      	mov	r5, r3
 800559c:	4b48      	ldr	r3, [pc, #288]	; (80056c0 <MPU9250_Calculate_RPY+0xa10>)
 800559e:	681c      	ldr	r4, [r3, #0]
 80055a0:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80055a4:	f005 fda6 	bl	800b0f4 <cosf>
 80055a8:	4603      	mov	r3, r0
 80055aa:	4619      	mov	r1, r3
 80055ac:	4620      	mov	r0, r4
 80055ae:	f7fb fc75 	bl	8000e9c <__aeabi_fdiv>
 80055b2:	4603      	mov	r3, r0
 80055b4:	4619      	mov	r1, r3
 80055b6:	4628      	mov	r0, r5
 80055b8:	f006 f806 	bl	800b5c8 <atan2f>
 80055bc:	4603      	mov	r3, r0
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fa ff2a 	bl	8000418 <__aeabi_f2d>
 80055c4:	a338      	add	r3, pc, #224	; (adr r3, 80056a8 <MPU9250_Calculate_RPY+0x9f8>)
 80055c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ca:	f7fa ff7d 	bl	80004c8 <__aeabi_dmul>
 80055ce:	4603      	mov	r3, r0
 80055d0:	460c      	mov	r4, r1
 80055d2:	4618      	mov	r0, r3
 80055d4:	4621      	mov	r1, r4
 80055d6:	f7fb fa4f 	bl	8000a78 <__aeabi_d2f>
 80055da:	4602      	mov	r2, r0
 80055dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055de:	671a      	str	r2, [r3, #112]	; 0x70
	DataStructure->Gyroscope_Yaw   = atan2f(r21 / cosf(Beta), r11 / cosf(Beta) ) * (180 / M_PI);
 80055e0:	4b3e      	ldr	r3, [pc, #248]	; (80056dc <MPU9250_Calculate_RPY+0xa2c>)
 80055e2:	681c      	ldr	r4, [r3, #0]
 80055e4:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80055e8:	f005 fd84 	bl	800b0f4 <cosf>
 80055ec:	4603      	mov	r3, r0
 80055ee:	4619      	mov	r1, r3
 80055f0:	4620      	mov	r0, r4
 80055f2:	f7fb fc53 	bl	8000e9c <__aeabi_fdiv>
 80055f6:	4603      	mov	r3, r0
 80055f8:	461d      	mov	r5, r3
 80055fa:	4b32      	ldr	r3, [pc, #200]	; (80056c4 <MPU9250_Calculate_RPY+0xa14>)
 80055fc:	681c      	ldr	r4, [r3, #0]
 80055fe:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 8005602:	f005 fd77 	bl	800b0f4 <cosf>
 8005606:	4603      	mov	r3, r0
 8005608:	4619      	mov	r1, r3
 800560a:	4620      	mov	r0, r4
 800560c:	f7fb fc46 	bl	8000e9c <__aeabi_fdiv>
 8005610:	4603      	mov	r3, r0
 8005612:	4619      	mov	r1, r3
 8005614:	4628      	mov	r0, r5
 8005616:	f005 ffd7 	bl	800b5c8 <atan2f>
 800561a:	4603      	mov	r3, r0
 800561c:	4618      	mov	r0, r3
 800561e:	f7fa fefb 	bl	8000418 <__aeabi_f2d>
 8005622:	a321      	add	r3, pc, #132	; (adr r3, 80056a8 <MPU9250_Calculate_RPY+0x9f8>)
 8005624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005628:	f7fa ff4e 	bl	80004c8 <__aeabi_dmul>
 800562c:	4603      	mov	r3, r0
 800562e:	460c      	mov	r4, r1
 8005630:	4618      	mov	r0, r3
 8005632:	4621      	mov	r1, r4
 8005634:	f7fb fa20 	bl	8000a78 <__aeabi_d2f>
 8005638:	4602      	mov	r2, r0
 800563a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563c:	679a      	str	r2, [r3, #120]	; 0x78

	/* Case 4: Calculate magnetometer Yaw */
	int16_t m_x = DataStructure->Magnetometer_X_uT;
 800563e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005642:	4618      	mov	r0, r3
 8005644:	f7fb fd52 	bl	80010ec <__aeabi_f2iz>
 8005648:	4603      	mov	r3, r0
 800564a:	f8a7 30d2 	strh.w	r3, [r7, #210]	; 0xd2
	int16_t m_y = DataStructure->Magnetometer_Y_uT;
 800564e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005650:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005652:	4618      	mov	r0, r3
 8005654:	f7fb fd4a 	bl	80010ec <__aeabi_f2iz>
 8005658:	4603      	mov	r3, r0
 800565a:	f8a7 30d0 	strh.w	r3, [r7, #208]	; 0xd0
	int16_t m_z = DataStructure->Magnetometer_Z_uT;
 800565e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005662:	4618      	mov	r0, r3
 8005664:	f7fb fd42 	bl	80010ec <__aeabi_f2iz>
 8005668:	4603      	mov	r3, r0
 800566a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce

	float Roll  = DataStructure->Accelerometer_Roll  * (M_PI / 180);
 800566e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005670:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005672:	4618      	mov	r0, r3
 8005674:	f7fa fed0 	bl	8000418 <__aeabi_f2d>
 8005678:	a309      	add	r3, pc, #36	; (adr r3, 80056a0 <MPU9250_Calculate_RPY+0x9f0>)
 800567a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567e:	f7fa ff23 	bl	80004c8 <__aeabi_dmul>
 8005682:	4603      	mov	r3, r0
 8005684:	460c      	mov	r4, r1
 8005686:	4618      	mov	r0, r3
 8005688:	4621      	mov	r1, r4
 800568a:	f7fb f9f5 	bl	8000a78 <__aeabi_d2f>
 800568e:	4603      	mov	r3, r0
 8005690:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	float Pitch = DataStructure->Accelerometer_Pitch * (M_PI / 180);
 8005694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005698:	4618      	mov	r0, r3
 800569a:	f7fa febd 	bl	8000418 <__aeabi_f2d>
 800569e:	e02b      	b.n	80056f8 <MPU9250_Calculate_RPY+0xa48>
 80056a0:	a2529d39 	.word	0xa2529d39
 80056a4:	3f91df46 	.word	0x3f91df46
 80056a8:	1a63c1f8 	.word	0x1a63c1f8
 80056ac:	404ca5dc 	.word	0x404ca5dc
 80056b0:	200003dc 	.word	0x200003dc
 80056b4:	200003f0 	.word	0x200003f0
 80056b8:	200003f4 	.word	0x200003f4
 80056bc:	20000038 	.word	0x20000038
 80056c0:	2000002c 	.word	0x2000002c
 80056c4:	20000024 	.word	0x20000024
 80056c8:	20000030 	.word	0x20000030
 80056cc:	200003c8 	.word	0x200003c8
 80056d0:	200003e0 	.word	0x200003e0
 80056d4:	200003cc 	.word	0x200003cc
 80056d8:	200003e4 	.word	0x200003e4
 80056dc:	200003d0 	.word	0x200003d0
 80056e0:	200003e8 	.word	0x200003e8
 80056e4:	20000028 	.word	0x20000028
 80056e8:	20000034 	.word	0x20000034
 80056ec:	200003d4 	.word	0x200003d4
 80056f0:	200003ec 	.word	0x200003ec
 80056f4:	200003d8 	.word	0x200003d8
 80056f8:	a3b3      	add	r3, pc, #716	; (adr r3, 80059c8 <MPU9250_Calculate_RPY+0xd18>)
 80056fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056fe:	f7fa fee3 	bl	80004c8 <__aeabi_dmul>
 8005702:	4603      	mov	r3, r0
 8005704:	460c      	mov	r4, r1
 8005706:	4618      	mov	r0, r3
 8005708:	4621      	mov	r1, r4
 800570a:	f7fb f9b5 	bl	8000a78 <__aeabi_d2f>
 800570e:	4603      	mov	r3, r0
 8005710:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

	float X_h = m_x * cosf(Pitch) + m_y * sinf(Roll) * sinf(Pitch) + m_z * cosf(Roll) * sinf(Pitch);
 8005714:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	; 0xd2
 8005718:	4618      	mov	r0, r3
 800571a:	f7fb fab7 	bl	8000c8c <__aeabi_i2f>
 800571e:	4604      	mov	r4, r0
 8005720:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 8005724:	f005 fce6 	bl	800b0f4 <cosf>
 8005728:	4603      	mov	r3, r0
 800572a:	4619      	mov	r1, r3
 800572c:	4620      	mov	r0, r4
 800572e:	f7fb fb01 	bl	8000d34 <__aeabi_fmul>
 8005732:	4603      	mov	r3, r0
 8005734:	461c      	mov	r4, r3
 8005736:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 800573a:	4618      	mov	r0, r3
 800573c:	f7fb faa6 	bl	8000c8c <__aeabi_i2f>
 8005740:	4605      	mov	r5, r0
 8005742:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005746:	f005 fd09 	bl	800b15c <sinf>
 800574a:	4603      	mov	r3, r0
 800574c:	4619      	mov	r1, r3
 800574e:	4628      	mov	r0, r5
 8005750:	f7fb faf0 	bl	8000d34 <__aeabi_fmul>
 8005754:	4603      	mov	r3, r0
 8005756:	461d      	mov	r5, r3
 8005758:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800575c:	f005 fcfe 	bl	800b15c <sinf>
 8005760:	4603      	mov	r3, r0
 8005762:	4619      	mov	r1, r3
 8005764:	4628      	mov	r0, r5
 8005766:	f7fb fae5 	bl	8000d34 <__aeabi_fmul>
 800576a:	4603      	mov	r3, r0
 800576c:	4619      	mov	r1, r3
 800576e:	4620      	mov	r0, r4
 8005770:	f7fb f9d8 	bl	8000b24 <__addsf3>
 8005774:	4603      	mov	r3, r0
 8005776:	461c      	mov	r4, r3
 8005778:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 800577c:	4618      	mov	r0, r3
 800577e:	f7fb fa85 	bl	8000c8c <__aeabi_i2f>
 8005782:	4605      	mov	r5, r0
 8005784:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8005788:	f005 fcb4 	bl	800b0f4 <cosf>
 800578c:	4603      	mov	r3, r0
 800578e:	4619      	mov	r1, r3
 8005790:	4628      	mov	r0, r5
 8005792:	f7fb facf 	bl	8000d34 <__aeabi_fmul>
 8005796:	4603      	mov	r3, r0
 8005798:	461d      	mov	r5, r3
 800579a:	f8d7 00c4 	ldr.w	r0, [r7, #196]	; 0xc4
 800579e:	f005 fcdd 	bl	800b15c <sinf>
 80057a2:	4603      	mov	r3, r0
 80057a4:	4619      	mov	r1, r3
 80057a6:	4628      	mov	r0, r5
 80057a8:	f7fb fac4 	bl	8000d34 <__aeabi_fmul>
 80057ac:	4603      	mov	r3, r0
 80057ae:	4619      	mov	r1, r3
 80057b0:	4620      	mov	r0, r4
 80057b2:	f7fb f9b7 	bl	8000b24 <__addsf3>
 80057b6:	4603      	mov	r3, r0
 80057b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	float Y_h = m_y * cosf(Roll)  - m_z * sinf(Roll);
 80057bc:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	; 0xd0
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fb fa63 	bl	8000c8c <__aeabi_i2f>
 80057c6:	4604      	mov	r4, r0
 80057c8:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80057cc:	f005 fc92 	bl	800b0f4 <cosf>
 80057d0:	4603      	mov	r3, r0
 80057d2:	4619      	mov	r1, r3
 80057d4:	4620      	mov	r0, r4
 80057d6:	f7fb faad 	bl	8000d34 <__aeabi_fmul>
 80057da:	4603      	mov	r3, r0
 80057dc:	461c      	mov	r4, r3
 80057de:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	; 0xce
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7fb fa52 	bl	8000c8c <__aeabi_i2f>
 80057e8:	4605      	mov	r5, r0
 80057ea:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 80057ee:	f005 fcb5 	bl	800b15c <sinf>
 80057f2:	4603      	mov	r3, r0
 80057f4:	4619      	mov	r1, r3
 80057f6:	4628      	mov	r0, r5
 80057f8:	f7fb fa9c 	bl	8000d34 <__aeabi_fmul>
 80057fc:	4603      	mov	r3, r0
 80057fe:	4619      	mov	r1, r3
 8005800:	4620      	mov	r0, r4
 8005802:	f7fb f98d 	bl	8000b20 <__aeabi_fsub>
 8005806:	4603      	mov	r3, r0
 8005808:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

	DataStructure->Magnetometer_Yaw = atan2f(-Y_h, X_h) * (180 / M_PI);
 800580c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005810:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8005814:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8005818:	4618      	mov	r0, r3
 800581a:	f005 fed5 	bl	800b5c8 <atan2f>
 800581e:	4603      	mov	r3, r0
 8005820:	4618      	mov	r0, r3
 8005822:	f7fa fdf9 	bl	8000418 <__aeabi_f2d>
 8005826:	a36a      	add	r3, pc, #424	; (adr r3, 80059d0 <MPU9250_Calculate_RPY+0xd20>)
 8005828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800582c:	f7fa fe4c 	bl	80004c8 <__aeabi_dmul>
 8005830:	4603      	mov	r3, r0
 8005832:	460c      	mov	r4, r1
 8005834:	4618      	mov	r0, r3
 8005836:	4621      	mov	r1, r4
 8005838:	f7fb f91e 	bl	8000a78 <__aeabi_d2f>
 800583c:	4602      	mov	r2, r0
 800583e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	/* Case x: Gyroscope calculate Quaternion */
	struct quaternion temp_quaternion;
	temp_quaternion.w = 0.5 * DataStructure->Gyroscope_quaternion.w;
 8005844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005846:	e9d3 0130 	ldrd	r0, r1, [r3, #192]	; 0xc0
 800584a:	f04f 0200 	mov.w	r2, #0
 800584e:	4b62      	ldr	r3, [pc, #392]	; (80059d8 <MPU9250_Calculate_RPY+0xd28>)
 8005850:	f7fa fe3a 	bl	80004c8 <__aeabi_dmul>
 8005854:	4603      	mov	r3, r0
 8005856:	460c      	mov	r4, r1
 8005858:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
	temp_quaternion.x = 0.5 * DataStructure->Gyroscope_quaternion.x;
 800585c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585e:	e9d3 0132 	ldrd	r0, r1, [r3, #200]	; 0xc8
 8005862:	f04f 0200 	mov.w	r2, #0
 8005866:	4b5c      	ldr	r3, [pc, #368]	; (80059d8 <MPU9250_Calculate_RPY+0xd28>)
 8005868:	f7fa fe2e 	bl	80004c8 <__aeabi_dmul>
 800586c:	4603      	mov	r3, r0
 800586e:	460c      	mov	r4, r1
 8005870:	e9c7 3428 	strd	r3, r4, [r7, #160]	; 0xa0
	temp_quaternion.y = 0.5 * DataStructure->Gyroscope_quaternion.y;
 8005874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005876:	e9d3 0134 	ldrd	r0, r1, [r3, #208]	; 0xd0
 800587a:	f04f 0200 	mov.w	r2, #0
 800587e:	4b56      	ldr	r3, [pc, #344]	; (80059d8 <MPU9250_Calculate_RPY+0xd28>)
 8005880:	f7fa fe22 	bl	80004c8 <__aeabi_dmul>
 8005884:	4603      	mov	r3, r0
 8005886:	460c      	mov	r4, r1
 8005888:	e9c7 342a 	strd	r3, r4, [r7, #168]	; 0xa8
	temp_quaternion.z = 0.5 * DataStructure->Gyroscope_quaternion.z;
 800588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588e:	e9d3 0136 	ldrd	r0, r1, [r3, #216]	; 0xd8
 8005892:	f04f 0200 	mov.w	r2, #0
 8005896:	4b50      	ldr	r3, [pc, #320]	; (80059d8 <MPU9250_Calculate_RPY+0xd28>)
 8005898:	f7fa fe16 	bl	80004c8 <__aeabi_dmul>
 800589c:	4603      	mov	r3, r0
 800589e:	460c      	mov	r4, r1
 80058a0:	e9c7 342c 	strd	r3, r4, [r7, #176]	; 0xb0

	struct quaternion gyroscope_vector;
	gyroscope_vector.w = 0;
 80058a4:	f04f 0300 	mov.w	r3, #0
 80058a8:	f04f 0400 	mov.w	r4, #0
 80058ac:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
	gyroscope_vector.x = DataStructure->Gyroscope_X_dgs * (M_PI / 180);
 80058b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b2:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 80058b6:	a344      	add	r3, pc, #272	; (adr r3, 80059c8 <MPU9250_Calculate_RPY+0xd18>)
 80058b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058bc:	f7fa fe04 	bl	80004c8 <__aeabi_dmul>
 80058c0:	4603      	mov	r3, r0
 80058c2:	460c      	mov	r4, r1
 80058c4:	e9c7 3420 	strd	r3, r4, [r7, #128]	; 0x80
	gyroscope_vector.y = DataStructure->Gyroscope_Y_dgs * (M_PI / 180);
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 80058ce:	a33e      	add	r3, pc, #248	; (adr r3, 80059c8 <MPU9250_Calculate_RPY+0xd18>)
 80058d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d4:	f7fa fdf8 	bl	80004c8 <__aeabi_dmul>
 80058d8:	4603      	mov	r3, r0
 80058da:	460c      	mov	r4, r1
 80058dc:	e9c7 3422 	strd	r3, r4, [r7, #136]	; 0x88
	gyroscope_vector.z = DataStructure->Gyroscope_Z_dgs * (M_PI / 180);
 80058e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e2:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 80058e6:	a338      	add	r3, pc, #224	; (adr r3, 80059c8 <MPU9250_Calculate_RPY+0xd18>)
 80058e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ec:	f7fa fdec 	bl	80004c8 <__aeabi_dmul>
 80058f0:	4603      	mov	r3, r0
 80058f2:	460c      	mov	r4, r1
 80058f4:	e9c7 3424 	strd	r3, r4, [r7, #144]	; 0x90

	DataStructure->Gyroscope_quaternion_dot = quaternion_tensor_product(&temp_quaternion, &gyroscope_vector);
 80058f8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80058fa:	463b      	mov	r3, r7
 80058fc:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8005900:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8005904:	4618      	mov	r0, r3
 8005906:	f000 fba6 	bl	8006056 <quaternion_tensor_product>
 800590a:	34e0      	adds	r4, #224	; 0xe0
 800590c:	463d      	mov	r5, r7
 800590e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005910:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005912:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005916:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	DataStructure->Gyroscope_quaternion.w = DataStructure->Gyroscope_quaternion.w + (DataStructure->Gyroscope_quaternion_dot.w * dt);
 800591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591c:	e9d3 4530 	ldrd	r4, r5, [r3, #192]	; 0xc0
 8005920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005922:	e9d3 0138 	ldrd	r0, r1, [r3, #224]	; 0xe0
 8005926:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800592a:	f7fa fdcd 	bl	80004c8 <__aeabi_dmul>
 800592e:	4602      	mov	r2, r0
 8005930:	460b      	mov	r3, r1
 8005932:	4620      	mov	r0, r4
 8005934:	4629      	mov	r1, r5
 8005936:	f7fa fc11 	bl	800015c <__adddf3>
 800593a:	4603      	mov	r3, r0
 800593c:	460c      	mov	r4, r1
 800593e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005940:	e9c2 3430 	strd	r3, r4, [r2, #192]	; 0xc0
	DataStructure->Gyroscope_quaternion.x = DataStructure->Gyroscope_quaternion.x + (DataStructure->Gyroscope_quaternion_dot.x * dt);
 8005944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005946:	e9d3 4532 	ldrd	r4, r5, [r3, #200]	; 0xc8
 800594a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800594c:	e9d3 013a 	ldrd	r0, r1, [r3, #232]	; 0xe8
 8005950:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005954:	f7fa fdb8 	bl	80004c8 <__aeabi_dmul>
 8005958:	4602      	mov	r2, r0
 800595a:	460b      	mov	r3, r1
 800595c:	4620      	mov	r0, r4
 800595e:	4629      	mov	r1, r5
 8005960:	f7fa fbfc 	bl	800015c <__adddf3>
 8005964:	4603      	mov	r3, r0
 8005966:	460c      	mov	r4, r1
 8005968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800596a:	e9c2 3432 	strd	r3, r4, [r2, #200]	; 0xc8
	DataStructure->Gyroscope_quaternion.y = DataStructure->Gyroscope_quaternion.y + (DataStructure->Gyroscope_quaternion_dot.y * dt);
 800596e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005970:	e9d3 4534 	ldrd	r4, r5, [r3, #208]	; 0xd0
 8005974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005976:	e9d3 013c 	ldrd	r0, r1, [r3, #240]	; 0xf0
 800597a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800597e:	f7fa fda3 	bl	80004c8 <__aeabi_dmul>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	4620      	mov	r0, r4
 8005988:	4629      	mov	r1, r5
 800598a:	f7fa fbe7 	bl	800015c <__adddf3>
 800598e:	4603      	mov	r3, r0
 8005990:	460c      	mov	r4, r1
 8005992:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005994:	e9c2 3434 	strd	r3, r4, [r2, #208]	; 0xd0
	DataStructure->Gyroscope_quaternion.z = DataStructure->Gyroscope_quaternion.z + (DataStructure->Gyroscope_quaternion_dot.z * dt);
 8005998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800599a:	e9d3 4536 	ldrd	r4, r5, [r3, #216]	; 0xd8
 800599e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a0:	e9d3 013e 	ldrd	r0, r1, [r3, #248]	; 0xf8
 80059a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059a8:	f7fa fd8e 	bl	80004c8 <__aeabi_dmul>
 80059ac:	4602      	mov	r2, r0
 80059ae:	460b      	mov	r3, r1
 80059b0:	4620      	mov	r0, r4
 80059b2:	4629      	mov	r1, r5
 80059b4:	f7fa fbd2 	bl	800015c <__adddf3>
 80059b8:	4603      	mov	r3, r0
 80059ba:	460c      	mov	r4, r1
 80059bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059be:	e9c2 3436 	strd	r3, r4, [r2, #216]	; 0xd8

	quaternion_normalise(&DataStructure->Gyroscope_quaternion);
 80059c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c4:	33c0      	adds	r3, #192	; 0xc0
 80059c6:	e009      	b.n	80059dc <MPU9250_Calculate_RPY+0xd2c>
 80059c8:	a2529d39 	.word	0xa2529d39
 80059cc:	3f91df46 	.word	0x3f91df46
 80059d0:	1a63c1f8 	.word	0x1a63c1f8
 80059d4:	404ca5dc 	.word	0x404ca5dc
 80059d8:	3fe00000 	.word	0x3fe00000
 80059dc:	4618      	mov	r0, r3
 80059de:	f000 fca2 	bl	8006326 <quaternion_normalise>

	struct rot_matrix gyroscope_matrix;
	quaternion_to_matrix(&DataStructure->Gyroscope_quaternion, &gyroscope_matrix);
 80059e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e4:	33c0      	adds	r3, #192	; 0xc0
 80059e6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80059ea:	4611      	mov	r1, r2
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 fd1b 	bl	8006428 <quaternion_to_matrix>

	matrix_to_euler(&gyroscope_matrix, &DataStructure->Gyroscope_euler);
 80059f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f4:	f503 7280 	add.w	r2, r3, #256	; 0x100
 80059f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80059fc:	4611      	mov	r1, r2
 80059fe:	4618      	mov	r0, r3
 8005a00:	f000 fefe 	bl	8006800 <matrix_to_euler>
}
 8005a04:	bf00      	nop
 8005a06:	37dc      	adds	r7, #220	; 0xdc
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005a0c <Complementary_filter>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */
void Complementary_filter(struct MPU9250 *DataStructure,
						  float weight_Roll_Pitch,
						  float weight_Yaw,
						  float dt) {
 8005a0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a10:	b084      	sub	sp, #16
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	60f8      	str	r0, [r7, #12]
 8005a16:	60b9      	str	r1, [r7, #8]
 8005a18:	607a      	str	r2, [r7, #4]
 8005a1a:	603b      	str	r3, [r7, #0]

	DataStructure->Complementary_filter_Roll   = ( (1-weight_Roll_Pitch) * (DataStructure->Complementary_filter_Roll  + DataStructure->Gyroscope_X_dgs * dt )
 8005a1c:	68b9      	ldr	r1, [r7, #8]
 8005a1e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005a22:	f7fb f87d 	bl	8000b20 <__aeabi_fsub>
 8005a26:	4603      	mov	r3, r0
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7fa fcf5 	bl	8000418 <__aeabi_f2d>
 8005a2e:	4680      	mov	r8, r0
 8005a30:	4689      	mov	r9, r1
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8005a38:	4618      	mov	r0, r3
 8005a3a:	f7fa fced 	bl	8000418 <__aeabi_f2d>
 8005a3e:	4682      	mov	sl, r0
 8005a40:	468b      	mov	fp, r1
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	e9d3 4524 	ldrd	r4, r5, [r3, #144]	; 0x90
 8005a48:	6838      	ldr	r0, [r7, #0]
 8005a4a:	f7fa fce5 	bl	8000418 <__aeabi_f2d>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	460b      	mov	r3, r1
 8005a52:	4620      	mov	r0, r4
 8005a54:	4629      	mov	r1, r5
 8005a56:	f7fa fd37 	bl	80004c8 <__aeabi_dmul>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	460c      	mov	r4, r1
 8005a5e:	461a      	mov	r2, r3
 8005a60:	4623      	mov	r3, r4
 8005a62:	4650      	mov	r0, sl
 8005a64:	4659      	mov	r1, fp
 8005a66:	f7fa fb79 	bl	800015c <__adddf3>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	460c      	mov	r4, r1
 8005a6e:	461a      	mov	r2, r3
 8005a70:	4623      	mov	r3, r4
 8005a72:	4640      	mov	r0, r8
 8005a74:	4649      	mov	r1, r9
 8005a76:	f7fa fd27 	bl	80004c8 <__aeabi_dmul>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	460c      	mov	r4, r1
 8005a7e:	4625      	mov	r5, r4
 8005a80:	461c      	mov	r4, r3
			                                   + (weight_Roll_Pitch * DataStructure->Accelerometer_Roll)  );
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a86:	68b9      	ldr	r1, [r7, #8]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7fb f953 	bl	8000d34 <__aeabi_fmul>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7fa fcc1 	bl	8000418 <__aeabi_f2d>
 8005a96:	4602      	mov	r2, r0
 8005a98:	460b      	mov	r3, r1
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	4629      	mov	r1, r5
 8005a9e:	f7fa fb5d 	bl	800015c <__adddf3>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	460c      	mov	r4, r1
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	4621      	mov	r1, r4
 8005aaa:	f7fa ffe5 	bl	8000a78 <__aeabi_d2f>
 8005aae:	4602      	mov	r2, r0
	DataStructure->Complementary_filter_Roll   = ( (1-weight_Roll_Pitch) * (DataStructure->Complementary_filter_Roll  + DataStructure->Gyroscope_X_dgs * dt )
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

	DataStructure->Complementary_filter_Pitch  = ( (1-weight_Roll_Pitch) * (DataStructure->Complementary_filter_Pitch + DataStructure->Gyroscope_Y_dgs * dt )
 8005ab6:	68b9      	ldr	r1, [r7, #8]
 8005ab8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005abc:	f7fb f830 	bl	8000b20 <__aeabi_fsub>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fa fca8 	bl	8000418 <__aeabi_f2d>
 8005ac8:	4680      	mov	r8, r0
 8005aca:	4689      	mov	r9, r1
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fa fca0 	bl	8000418 <__aeabi_f2d>
 8005ad8:	4682      	mov	sl, r0
 8005ada:	468b      	mov	fp, r1
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	e9d3 4526 	ldrd	r4, r5, [r3, #152]	; 0x98
 8005ae2:	6838      	ldr	r0, [r7, #0]
 8005ae4:	f7fa fc98 	bl	8000418 <__aeabi_f2d>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	460b      	mov	r3, r1
 8005aec:	4620      	mov	r0, r4
 8005aee:	4629      	mov	r1, r5
 8005af0:	f7fa fcea 	bl	80004c8 <__aeabi_dmul>
 8005af4:	4603      	mov	r3, r0
 8005af6:	460c      	mov	r4, r1
 8005af8:	461a      	mov	r2, r3
 8005afa:	4623      	mov	r3, r4
 8005afc:	4650      	mov	r0, sl
 8005afe:	4659      	mov	r1, fp
 8005b00:	f7fa fb2c 	bl	800015c <__adddf3>
 8005b04:	4603      	mov	r3, r0
 8005b06:	460c      	mov	r4, r1
 8005b08:	461a      	mov	r2, r3
 8005b0a:	4623      	mov	r3, r4
 8005b0c:	4640      	mov	r0, r8
 8005b0e:	4649      	mov	r1, r9
 8005b10:	f7fa fcda 	bl	80004c8 <__aeabi_dmul>
 8005b14:	4603      	mov	r3, r0
 8005b16:	460c      	mov	r4, r1
 8005b18:	4625      	mov	r5, r4
 8005b1a:	461c      	mov	r4, r3
											   + (weight_Roll_Pitch * DataStructure->Accelerometer_Pitch) );
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b20:	68b9      	ldr	r1, [r7, #8]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7fb f906 	bl	8000d34 <__aeabi_fmul>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	f7fa fc74 	bl	8000418 <__aeabi_f2d>
 8005b30:	4602      	mov	r2, r0
 8005b32:	460b      	mov	r3, r1
 8005b34:	4620      	mov	r0, r4
 8005b36:	4629      	mov	r1, r5
 8005b38:	f7fa fb10 	bl	800015c <__adddf3>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	460c      	mov	r4, r1
 8005b40:	4618      	mov	r0, r3
 8005b42:	4621      	mov	r1, r4
 8005b44:	f7fa ff98 	bl	8000a78 <__aeabi_d2f>
 8005b48:	4602      	mov	r2, r0
	DataStructure->Complementary_filter_Pitch  = ( (1-weight_Roll_Pitch) * (DataStructure->Complementary_filter_Pitch + DataStructure->Gyroscope_Y_dgs * dt )
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	DataStructure->Complementary_filter_Yaw    = ( (1-weight_Yaw) * (DataStructure->Complementary_filter_Yaw   + DataStructure->Gyroscope_Z_dgs * dt )
 8005b50:	6879      	ldr	r1, [r7, #4]
 8005b52:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005b56:	f7fa ffe3 	bl	8000b20 <__aeabi_fsub>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7fa fc5b 	bl	8000418 <__aeabi_f2d>
 8005b62:	4680      	mov	r8, r0
 8005b64:	4689      	mov	r9, r1
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fa fc53 	bl	8000418 <__aeabi_f2d>
 8005b72:	4682      	mov	sl, r0
 8005b74:	468b      	mov	fp, r1
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	e9d3 4528 	ldrd	r4, r5, [r3, #160]	; 0xa0
 8005b7c:	6838      	ldr	r0, [r7, #0]
 8005b7e:	f7fa fc4b 	bl	8000418 <__aeabi_f2d>
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	4620      	mov	r0, r4
 8005b88:	4629      	mov	r1, r5
 8005b8a:	f7fa fc9d 	bl	80004c8 <__aeabi_dmul>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	460c      	mov	r4, r1
 8005b92:	461a      	mov	r2, r3
 8005b94:	4623      	mov	r3, r4
 8005b96:	4650      	mov	r0, sl
 8005b98:	4659      	mov	r1, fp
 8005b9a:	f7fa fadf 	bl	800015c <__adddf3>
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	460c      	mov	r4, r1
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	4623      	mov	r3, r4
 8005ba6:	4640      	mov	r0, r8
 8005ba8:	4649      	mov	r1, r9
 8005baa:	f7fa fc8d 	bl	80004c8 <__aeabi_dmul>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	460c      	mov	r4, r1
 8005bb2:	4625      	mov	r5, r4
 8005bb4:	461c      	mov	r4, r3
											   + (weight_Yaw * DataStructure->Magnetometer_Yaw)    );
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bbc:	6879      	ldr	r1, [r7, #4]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fb f8b8 	bl	8000d34 <__aeabi_fmul>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7fa fc26 	bl	8000418 <__aeabi_f2d>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	460b      	mov	r3, r1
 8005bd0:	4620      	mov	r0, r4
 8005bd2:	4629      	mov	r1, r5
 8005bd4:	f7fa fac2 	bl	800015c <__adddf3>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	460c      	mov	r4, r1
 8005bdc:	4618      	mov	r0, r3
 8005bde:	4621      	mov	r1, r4
 8005be0:	f7fa ff4a 	bl	8000a78 <__aeabi_d2f>
 8005be4:	4602      	mov	r2, r0
	DataStructure->Complementary_filter_Yaw    = ( (1-weight_Yaw) * (DataStructure->Complementary_filter_Yaw   + DataStructure->Gyroscope_Z_dgs * dt )
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
 8005bec:	bf00      	nop
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005bf6 <Kalman_filter>:
/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

void Kalman_filter(struct MPU9250 *DataStructure,
				   float Q_Roll_Pitch, float R_Roll_Pitch,
				   float Q_Yaw, float R_Yaw,
				   float dt) {
 8005bf6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af02      	add	r7, sp, #8
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
 8005c04:	603b      	str	r3, [r7, #0]

	/* Case 1: Update Q and R value */
	if( DataStructure->Kalman_P.kalman_Q != Q_Roll_Pitch || DataStructure->Kalman_P.kalman_R != R_Roll_Pitch ) {
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8005c0c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005c10:	68b8      	ldr	r0, [r7, #8]
 8005c12:	f7fa fc01 	bl	8000418 <__aeabi_f2d>
 8005c16:	4602      	mov	r2, r0
 8005c18:	460b      	mov	r3, r1
 8005c1a:	4620      	mov	r0, r4
 8005c1c:	4629      	mov	r1, r5
 8005c1e:	f7fa febb 	bl	8000998 <__aeabi_dcmpeq>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d010      	beq.n	8005c4a <Kalman_filter+0x54>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f503 73e4 	add.w	r3, r3, #456	; 0x1c8
 8005c2e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7fa fbf0 	bl	8000418 <__aeabi_f2d>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	4629      	mov	r1, r5
 8005c40:	f7fa feaa 	bl	8000998 <__aeabi_dcmpeq>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d13c      	bne.n	8005cc4 <Kalman_filter+0xce>

		Kalman_filter_init(&DataStructure->Kalman_R, Q_Roll_Pitch, R_Roll_Pitch);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f503 758c 	add.w	r5, r3, #280	; 0x118
 8005c50:	68b8      	ldr	r0, [r7, #8]
 8005c52:	f7fa fbe1 	bl	8000418 <__aeabi_f2d>
 8005c56:	4680      	mov	r8, r0
 8005c58:	4689      	mov	r9, r1
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f7fa fbdc 	bl	8000418 <__aeabi_f2d>
 8005c60:	4603      	mov	r3, r0
 8005c62:	460c      	mov	r4, r1
 8005c64:	e9cd 3400 	strd	r3, r4, [sp]
 8005c68:	4642      	mov	r2, r8
 8005c6a:	464b      	mov	r3, r9
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	f7fd fef9 	bl	8003a64 <Kalman_filter_init>
		Kalman_filter_init(&DataStructure->Kalman_P, Q_Roll_Pitch, R_Roll_Pitch);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f503 75d0 	add.w	r5, r3, #416	; 0x1a0
 8005c78:	68b8      	ldr	r0, [r7, #8]
 8005c7a:	f7fa fbcd 	bl	8000418 <__aeabi_f2d>
 8005c7e:	4680      	mov	r8, r0
 8005c80:	4689      	mov	r9, r1
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7fa fbc8 	bl	8000418 <__aeabi_f2d>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	460c      	mov	r4, r1
 8005c8c:	e9cd 3400 	strd	r3, r4, [sp]
 8005c90:	4642      	mov	r2, r8
 8005c92:	464b      	mov	r3, r9
 8005c94:	4628      	mov	r0, r5
 8005c96:	f7fd fee5 	bl	8003a64 <Kalman_filter_init>
		Kalman_filter_init(&DataStructure->Kalman_Y, Q_Yaw, R_Yaw);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f503 750a 	add.w	r5, r3, #552	; 0x228
 8005ca0:	6838      	ldr	r0, [r7, #0]
 8005ca2:	f7fa fbb9 	bl	8000418 <__aeabi_f2d>
 8005ca6:	4680      	mov	r8, r0
 8005ca8:	4689      	mov	r9, r1
 8005caa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cac:	f7fa fbb4 	bl	8000418 <__aeabi_f2d>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	460c      	mov	r4, r1
 8005cb4:	e9cd 3400 	strd	r3, r4, [sp]
 8005cb8:	4642      	mov	r2, r8
 8005cba:	464b      	mov	r3, r9
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	f7fd fed1 	bl	8003a64 <Kalman_filter_init>

		return;
 8005cc2:	e048      	b.n	8005d56 <Kalman_filter+0x160>
	}

	/* Case 2: */
	DataStructure->Kalman_filter_Roll  = Kalman_filter_calculate(&DataStructure->Kalman_R, DataStructure->Accelerometer_Roll,  DataStructure->Gyroscope_X_dgs, dt);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f503 758c 	add.w	r5, r3, #280	; 0x118
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8005cd4:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	4621      	mov	r1, r4
 8005cdc:	f7fa fecc 	bl	8000a78 <__aeabi_d2f>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce4:	4631      	mov	r1, r6
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	f7fd ff3c 	bl	8003b64 <Kalman_filter_calculate>
 8005cec:	4602      	mov	r2, r0
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
	DataStructure->Kalman_filter_Pitch = Kalman_filter_calculate(&DataStructure->Kalman_P, DataStructure->Accelerometer_Pitch, DataStructure->Gyroscope_Y_dgs, dt);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	f503 75d0 	add.w	r5, r3, #416	; 0x1a0
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f103 0498 	add.w	r4, r3, #152	; 0x98
 8005d04:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	4621      	mov	r1, r4
 8005d0c:	f7fa feb4 	bl	8000a78 <__aeabi_d2f>
 8005d10:	4602      	mov	r2, r0
 8005d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d14:	4631      	mov	r1, r6
 8005d16:	4628      	mov	r0, r5
 8005d18:	f7fd ff24 	bl	8003b64 <Kalman_filter_calculate>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
	DataStructure->Kalman_filter_Yaw   = Kalman_filter_calculate(&DataStructure->Kalman_Y, DataStructure->Magnetometer_Yaw,    DataStructure->Gyroscope_Z_dgs, dt);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f503 750a 	add.w	r5, r3, #552	; 0x228
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f8d3 6084 	ldr.w	r6, [r3, #132]	; 0x84
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8005d36:	e9d4 3400 	ldrd	r3, r4, [r4]
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	4621      	mov	r1, r4
 8005d3e:	f7fa fe9b 	bl	8000a78 <__aeabi_d2f>
 8005d42:	4602      	mov	r2, r0
 8005d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d46:	4631      	mov	r1, r6
 8005d48:	4628      	mov	r0, r5
 8005d4a:	f7fd ff0b 	bl	8003b64 <Kalman_filter_calculate>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
}
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08005d60 <Madgwick_filter>:

/* ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ */

void Madgwick_filter(struct MPU9250 *DataStructure,
					 float beta,
					 float dt) {
 8005d60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d64:	b08d      	sub	sp, #52	; 0x34
 8005d66:	af08      	add	r7, sp, #32
 8005d68:	60f8      	str	r0, [r7, #12]
 8005d6a:	60b9      	str	r1, [r7, #8]
 8005d6c:	607a      	str	r2, [r7, #4]

	MadgwickAHRSupdate(beta,
					   DataStructure->Gyroscope_X_dgs * (M_PI / 180), DataStructure->Gyroscope_Y_dgs * (M_PI / 180), DataStructure->Gyroscope_Z_dgs * (M_PI / 180),
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	e9d3 0124 	ldrd	r0, r1, [r3, #144]	; 0x90
 8005d74:	a392      	add	r3, pc, #584	; (adr r3, 8005fc0 <Madgwick_filter+0x260>)
 8005d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7a:	f7fa fba5 	bl	80004c8 <__aeabi_dmul>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	460c      	mov	r4, r1
	MadgwickAHRSupdate(beta,
 8005d82:	4618      	mov	r0, r3
 8005d84:	4621      	mov	r1, r4
 8005d86:	f7fa fe77 	bl	8000a78 <__aeabi_d2f>
 8005d8a:	4680      	mov	r8, r0
					   DataStructure->Gyroscope_X_dgs * (M_PI / 180), DataStructure->Gyroscope_Y_dgs * (M_PI / 180), DataStructure->Gyroscope_Z_dgs * (M_PI / 180),
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	e9d3 0126 	ldrd	r0, r1, [r3, #152]	; 0x98
 8005d92:	a38b      	add	r3, pc, #556	; (adr r3, 8005fc0 <Madgwick_filter+0x260>)
 8005d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d98:	f7fa fb96 	bl	80004c8 <__aeabi_dmul>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	460c      	mov	r4, r1
	MadgwickAHRSupdate(beta,
 8005da0:	4618      	mov	r0, r3
 8005da2:	4621      	mov	r1, r4
 8005da4:	f7fa fe68 	bl	8000a78 <__aeabi_d2f>
 8005da8:	4681      	mov	r9, r0
					   DataStructure->Gyroscope_X_dgs * (M_PI / 180), DataStructure->Gyroscope_Y_dgs * (M_PI / 180), DataStructure->Gyroscope_Z_dgs * (M_PI / 180),
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 8005db0:	a383      	add	r3, pc, #524	; (adr r3, 8005fc0 <Madgwick_filter+0x260>)
 8005db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db6:	f7fa fb87 	bl	80004c8 <__aeabi_dmul>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	460c      	mov	r4, r1
	MadgwickAHRSupdate(beta,
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	4621      	mov	r1, r4
 8005dc2:	f7fa fe59 	bl	8000a78 <__aeabi_d2f>
 8005dc6:	4684      	mov	ip, r0
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dcc:	68fa      	ldr	r2, [r7, #12]
 8005dce:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005dd0:	68f9      	ldr	r1, [r7, #12]
 8005dd2:	6d89      	ldr	r1, [r1, #88]	; 0x58
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8005dd8:	68fc      	ldr	r4, [r7, #12]
 8005dda:	6e24      	ldr	r4, [r4, #96]	; 0x60
 8005ddc:	68fd      	ldr	r5, [r7, #12]
 8005dde:	6e6d      	ldr	r5, [r5, #100]	; 0x64
 8005de0:	687e      	ldr	r6, [r7, #4]
 8005de2:	9606      	str	r6, [sp, #24]
 8005de4:	9505      	str	r5, [sp, #20]
 8005de6:	9404      	str	r4, [sp, #16]
 8005de8:	9003      	str	r0, [sp, #12]
 8005dea:	9102      	str	r1, [sp, #8]
 8005dec:	9201      	str	r2, [sp, #4]
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	4663      	mov	r3, ip
 8005df2:	464a      	mov	r2, r9
 8005df4:	4641      	mov	r1, r8
 8005df6:	68b8      	ldr	r0, [r7, #8]
 8005df8:	f7fb f99e 	bl	8001138 <MadgwickAHRSupdate>
					   DataStructure->Accelerometer_X_g, DataStructure->Accelerometer_Y_g, DataStructure->Accelerometer_Z_g,
					   DataStructure->Magnetometer_X_uT, DataStructure->Magnetometer_Y_uT, DataStructure->Magnetometer_Z_uT,
					   dt);

	DataStructure->Madgwick_filter_Roll  = atan2f( 2 * (q0*q1 + q2*q3), 1 - 2 * (powf(q1,2) + powf(q2,2)) ) * (180 / M_PI);
 8005dfc:	4b74      	ldr	r3, [pc, #464]	; (8005fd0 <Madgwick_filter+0x270>)
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	4b74      	ldr	r3, [pc, #464]	; (8005fd4 <Madgwick_filter+0x274>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4619      	mov	r1, r3
 8005e06:	4610      	mov	r0, r2
 8005e08:	f7fa ff94 	bl	8000d34 <__aeabi_fmul>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	461c      	mov	r4, r3
 8005e10:	4b71      	ldr	r3, [pc, #452]	; (8005fd8 <Madgwick_filter+0x278>)
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	4b71      	ldr	r3, [pc, #452]	; (8005fdc <Madgwick_filter+0x27c>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	f7fa ff8a 	bl	8000d34 <__aeabi_fmul>
 8005e20:	4603      	mov	r3, r0
 8005e22:	4619      	mov	r1, r3
 8005e24:	4620      	mov	r0, r4
 8005e26:	f7fa fe7d 	bl	8000b24 <__addsf3>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	4619      	mov	r1, r3
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7fa fe78 	bl	8000b24 <__addsf3>
 8005e34:	4603      	mov	r3, r0
 8005e36:	461c      	mov	r4, r3
 8005e38:	4b66      	ldr	r3, [pc, #408]	; (8005fd4 <Madgwick_filter+0x274>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005e40:	4618      	mov	r0, r3
 8005e42:	f005 fbc3 	bl	800b5cc <powf>
 8005e46:	4605      	mov	r5, r0
 8005e48:	4b63      	ldr	r3, [pc, #396]	; (8005fd8 <Madgwick_filter+0x278>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005e50:	4618      	mov	r0, r3
 8005e52:	f005 fbbb 	bl	800b5cc <powf>
 8005e56:	4603      	mov	r3, r0
 8005e58:	4619      	mov	r1, r3
 8005e5a:	4628      	mov	r0, r5
 8005e5c:	f7fa fe62 	bl	8000b24 <__addsf3>
 8005e60:	4603      	mov	r3, r0
 8005e62:	4619      	mov	r1, r3
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7fa fe5d 	bl	8000b24 <__addsf3>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005e72:	f7fa fe55 	bl	8000b20 <__aeabi_fsub>
 8005e76:	4603      	mov	r3, r0
 8005e78:	4619      	mov	r1, r3
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f005 fba4 	bl	800b5c8 <atan2f>
 8005e80:	4603      	mov	r3, r0
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fa fac8 	bl	8000418 <__aeabi_f2d>
 8005e88:	a34f      	add	r3, pc, #316	; (adr r3, 8005fc8 <Madgwick_filter+0x268>)
 8005e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8e:	f7fa fb1b 	bl	80004c8 <__aeabi_dmul>
 8005e92:	4603      	mov	r3, r0
 8005e94:	460c      	mov	r4, r1
 8005e96:	4618      	mov	r0, r3
 8005e98:	4621      	mov	r1, r4
 8005e9a:	f7fa fded 	bl	8000a78 <__aeabi_d2f>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
	DataStructure->Madgwick_filter_Pitch = asinf( 2 * (q0*q2 - q3*q1) )                                     * (180 / M_PI);
 8005ea6:	4b4a      	ldr	r3, [pc, #296]	; (8005fd0 <Madgwick_filter+0x270>)
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	4b4b      	ldr	r3, [pc, #300]	; (8005fd8 <Madgwick_filter+0x278>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4619      	mov	r1, r3
 8005eb0:	4610      	mov	r0, r2
 8005eb2:	f7fa ff3f 	bl	8000d34 <__aeabi_fmul>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	461c      	mov	r4, r3
 8005eba:	4b48      	ldr	r3, [pc, #288]	; (8005fdc <Madgwick_filter+0x27c>)
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	4b45      	ldr	r3, [pc, #276]	; (8005fd4 <Madgwick_filter+0x274>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	f7fa ff35 	bl	8000d34 <__aeabi_fmul>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	4619      	mov	r1, r3
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f7fa fe26 	bl	8000b20 <__aeabi_fsub>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7fa fe23 	bl	8000b24 <__addsf3>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f005 fb23 	bl	800b52c <asinf>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fa fa95 	bl	8000418 <__aeabi_f2d>
 8005eee:	a336      	add	r3, pc, #216	; (adr r3, 8005fc8 <Madgwick_filter+0x268>)
 8005ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef4:	f7fa fae8 	bl	80004c8 <__aeabi_dmul>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	460c      	mov	r4, r1
 8005efc:	4618      	mov	r0, r3
 8005efe:	4621      	mov	r1, r4
 8005f00:	f7fa fdba 	bl	8000a78 <__aeabi_d2f>
 8005f04:	4602      	mov	r2, r0
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
	DataStructure->Madgwick_filter_Yaw   = atan2f( 2 * (q0*q3 + q1*q2), 1 - 2 * (powf(q2,2) + powf(q3,2)) ) * (180 / M_PI);
 8005f0c:	4b30      	ldr	r3, [pc, #192]	; (8005fd0 <Madgwick_filter+0x270>)
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	4b32      	ldr	r3, [pc, #200]	; (8005fdc <Madgwick_filter+0x27c>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4619      	mov	r1, r3
 8005f16:	4610      	mov	r0, r2
 8005f18:	f7fa ff0c 	bl	8000d34 <__aeabi_fmul>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	461c      	mov	r4, r3
 8005f20:	4b2c      	ldr	r3, [pc, #176]	; (8005fd4 <Madgwick_filter+0x274>)
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	4b2c      	ldr	r3, [pc, #176]	; (8005fd8 <Madgwick_filter+0x278>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4619      	mov	r1, r3
 8005f2a:	4610      	mov	r0, r2
 8005f2c:	f7fa ff02 	bl	8000d34 <__aeabi_fmul>
 8005f30:	4603      	mov	r3, r0
 8005f32:	4619      	mov	r1, r3
 8005f34:	4620      	mov	r0, r4
 8005f36:	f7fa fdf5 	bl	8000b24 <__addsf3>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fa fdf0 	bl	8000b24 <__addsf3>
 8005f44:	4603      	mov	r3, r0
 8005f46:	461c      	mov	r4, r3
 8005f48:	4b23      	ldr	r3, [pc, #140]	; (8005fd8 <Madgwick_filter+0x278>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005f50:	4618      	mov	r0, r3
 8005f52:	f005 fb3b 	bl	800b5cc <powf>
 8005f56:	4605      	mov	r5, r0
 8005f58:	4b20      	ldr	r3, [pc, #128]	; (8005fdc <Madgwick_filter+0x27c>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005f60:	4618      	mov	r0, r3
 8005f62:	f005 fb33 	bl	800b5cc <powf>
 8005f66:	4603      	mov	r3, r0
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	f7fa fdda 	bl	8000b24 <__addsf3>
 8005f70:	4603      	mov	r3, r0
 8005f72:	4619      	mov	r1, r3
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7fa fdd5 	bl	8000b24 <__addsf3>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	4619      	mov	r1, r3
 8005f7e:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8005f82:	f7fa fdcd 	bl	8000b20 <__aeabi_fsub>
 8005f86:	4603      	mov	r3, r0
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4620      	mov	r0, r4
 8005f8c:	f005 fb1c 	bl	800b5c8 <atan2f>
 8005f90:	4603      	mov	r3, r0
 8005f92:	4618      	mov	r0, r3
 8005f94:	f7fa fa40 	bl	8000418 <__aeabi_f2d>
 8005f98:	a30b      	add	r3, pc, #44	; (adr r3, 8005fc8 <Madgwick_filter+0x268>)
 8005f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9e:	f7fa fa93 	bl	80004c8 <__aeabi_dmul>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	460c      	mov	r4, r1
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	4621      	mov	r1, r4
 8005faa:	f7fa fd65 	bl	8000a78 <__aeabi_d2f>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
}
 8005fb6:	bf00      	nop
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005fc0:	a2529d39 	.word	0xa2529d39
 8005fc4:	3f91df46 	.word	0x3f91df46
 8005fc8:	1a63c1f8 	.word	0x1a63c1f8
 8005fcc:	404ca5dc 	.word	0x404ca5dc
 8005fd0:	20000000 	.word	0x20000000
 8005fd4:	200000d4 	.word	0x200000d4
 8005fd8:	200000d8 	.word	0x200000d8
 8005fdc:	200000dc 	.word	0x200000dc

08005fe0 <quaternion_init>:
 *      Author: macbookmichal
 */

#include "quaternion.h"

void quaternion_init(struct quaternion *q) {
 8005fe0:	b490      	push	{r4, r7}
 8005fe2:	b082      	sub	sp, #8
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]

	q->w = 1;
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	f04f 0300 	mov.w	r3, #0
 8005fee:	4c0e      	ldr	r4, [pc, #56]	; (8006028 <quaternion_init+0x48>)
 8005ff0:	e9c2 3400 	strd	r3, r4, [r2]
	q->x = 0;
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	f04f 0300 	mov.w	r3, #0
 8005ffa:	f04f 0400 	mov.w	r4, #0
 8005ffe:	e9c2 3402 	strd	r3, r4, [r2, #8]
	q->y = 0;
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	f04f 0300 	mov.w	r3, #0
 8006008:	f04f 0400 	mov.w	r4, #0
 800600c:	e9c2 3404 	strd	r3, r4, [r2, #16]
	q->z = 0;
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	f04f 0300 	mov.w	r3, #0
 8006016:	f04f 0400 	mov.w	r4, #0
 800601a:	e9c2 3406 	strd	r3, r4, [r2, #24]
}
 800601e:	bf00      	nop
 8006020:	3708      	adds	r7, #8
 8006022:	46bd      	mov	sp, r7
 8006024:	bc90      	pop	{r4, r7}
 8006026:	4770      	bx	lr
 8006028:	3ff00000 	.word	0x3ff00000

0800602c <euler_init>:

void euler_init(struct euler *e) {
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]

	e->roll = 0;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f04f 0200 	mov.w	r2, #0
 800603a:	601a      	str	r2, [r3, #0]
	e->pitch = 0;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f04f 0200 	mov.w	r2, #0
 8006042:	605a      	str	r2, [r3, #4]
	e->yaw = 0;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f04f 0200 	mov.w	r2, #0
 800604a:	609a      	str	r2, [r3, #8]
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	bc80      	pop	{r7}
 8006054:	4770      	bx	lr

08006056 <quaternion_tensor_product>:

struct quaternion quaternion_tensor_product(struct quaternion *q1, struct quaternion *q2) {
 8006056:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006058:	b08d      	sub	sp, #52	; 0x34
 800605a:	af00      	add	r7, sp, #0
 800605c:	60f8      	str	r0, [r7, #12]
 800605e:	60b9      	str	r1, [r7, #8]
 8006060:	607a      	str	r2, [r7, #4]

	struct quaternion tensor_product;

	tensor_product.w = (q1->w * q2->w) - (q1->x * q2->x) - (q1->y * q2->y) - (q1->z * q2->z);
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	cb18      	ldmia	r3, {r3, r4}
 800606c:	461a      	mov	r2, r3
 800606e:	4623      	mov	r3, r4
 8006070:	f7fa fa2a 	bl	80004c8 <__aeabi_dmul>
 8006074:	4603      	mov	r3, r0
 8006076:	460c      	mov	r4, r1
 8006078:	461d      	mov	r5, r3
 800607a:	4626      	mov	r6, r4
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f103 0408 	add.w	r4, r3, #8
 8006088:	e9d4 3400 	ldrd	r3, r4, [r4]
 800608c:	461a      	mov	r2, r3
 800608e:	4623      	mov	r3, r4
 8006090:	f7fa fa1a 	bl	80004c8 <__aeabi_dmul>
 8006094:	4603      	mov	r3, r0
 8006096:	460c      	mov	r4, r1
 8006098:	461a      	mov	r2, r3
 800609a:	4623      	mov	r3, r4
 800609c:	4628      	mov	r0, r5
 800609e:	4631      	mov	r1, r6
 80060a0:	f7fa f85a 	bl	8000158 <__aeabi_dsub>
 80060a4:	4603      	mov	r3, r0
 80060a6:	460c      	mov	r4, r1
 80060a8:	461d      	mov	r5, r3
 80060aa:	4626      	mov	r6, r4
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f103 0410 	add.w	r4, r3, #16
 80060b8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80060bc:	461a      	mov	r2, r3
 80060be:	4623      	mov	r3, r4
 80060c0:	f7fa fa02 	bl	80004c8 <__aeabi_dmul>
 80060c4:	4603      	mov	r3, r0
 80060c6:	460c      	mov	r4, r1
 80060c8:	461a      	mov	r2, r3
 80060ca:	4623      	mov	r3, r4
 80060cc:	4628      	mov	r0, r5
 80060ce:	4631      	mov	r1, r6
 80060d0:	f7fa f842 	bl	8000158 <__aeabi_dsub>
 80060d4:	4603      	mov	r3, r0
 80060d6:	460c      	mov	r4, r1
 80060d8:	461d      	mov	r5, r3
 80060da:	4626      	mov	r6, r4
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f103 0418 	add.w	r4, r3, #24
 80060e8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80060ec:	461a      	mov	r2, r3
 80060ee:	4623      	mov	r3, r4
 80060f0:	f7fa f9ea 	bl	80004c8 <__aeabi_dmul>
 80060f4:	4603      	mov	r3, r0
 80060f6:	460c      	mov	r4, r1
 80060f8:	461a      	mov	r2, r3
 80060fa:	4623      	mov	r3, r4
 80060fc:	4628      	mov	r0, r5
 80060fe:	4631      	mov	r1, r6
 8006100:	f7fa f82a 	bl	8000158 <__aeabi_dsub>
 8006104:	4603      	mov	r3, r0
 8006106:	460c      	mov	r4, r1
 8006108:	e9c7 3404 	strd	r3, r4, [r7, #16]
	tensor_product.x = (q1->w * q2->x) + (q1->x * q2->w) + (q1->y * q2->z) - (q1->z * q2->y);
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f103 0408 	add.w	r4, r3, #8
 8006118:	e9d4 3400 	ldrd	r3, r4, [r4]
 800611c:	461a      	mov	r2, r3
 800611e:	4623      	mov	r3, r4
 8006120:	f7fa f9d2 	bl	80004c8 <__aeabi_dmul>
 8006124:	4603      	mov	r3, r0
 8006126:	460c      	mov	r4, r1
 8006128:	461d      	mov	r5, r3
 800612a:	4626      	mov	r6, r4
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	cb18      	ldmia	r3, {r3, r4}
 8006136:	461a      	mov	r2, r3
 8006138:	4623      	mov	r3, r4
 800613a:	f7fa f9c5 	bl	80004c8 <__aeabi_dmul>
 800613e:	4603      	mov	r3, r0
 8006140:	460c      	mov	r4, r1
 8006142:	461a      	mov	r2, r3
 8006144:	4623      	mov	r3, r4
 8006146:	4628      	mov	r0, r5
 8006148:	4631      	mov	r1, r6
 800614a:	f7fa f807 	bl	800015c <__adddf3>
 800614e:	4603      	mov	r3, r0
 8006150:	460c      	mov	r4, r1
 8006152:	461d      	mov	r5, r3
 8006154:	4626      	mov	r6, r4
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f103 0418 	add.w	r4, r3, #24
 8006162:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006166:	461a      	mov	r2, r3
 8006168:	4623      	mov	r3, r4
 800616a:	f7fa f9ad 	bl	80004c8 <__aeabi_dmul>
 800616e:	4603      	mov	r3, r0
 8006170:	460c      	mov	r4, r1
 8006172:	461a      	mov	r2, r3
 8006174:	4623      	mov	r3, r4
 8006176:	4628      	mov	r0, r5
 8006178:	4631      	mov	r1, r6
 800617a:	f7f9 ffef 	bl	800015c <__adddf3>
 800617e:	4603      	mov	r3, r0
 8006180:	460c      	mov	r4, r1
 8006182:	461d      	mov	r5, r3
 8006184:	4626      	mov	r6, r4
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f103 0410 	add.w	r4, r3, #16
 8006192:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006196:	461a      	mov	r2, r3
 8006198:	4623      	mov	r3, r4
 800619a:	f7fa f995 	bl	80004c8 <__aeabi_dmul>
 800619e:	4603      	mov	r3, r0
 80061a0:	460c      	mov	r4, r1
 80061a2:	461a      	mov	r2, r3
 80061a4:	4623      	mov	r3, r4
 80061a6:	4628      	mov	r0, r5
 80061a8:	4631      	mov	r1, r6
 80061aa:	f7f9 ffd5 	bl	8000158 <__aeabi_dsub>
 80061ae:	4603      	mov	r3, r0
 80061b0:	460c      	mov	r4, r1
 80061b2:	e9c7 3406 	strd	r3, r4, [r7, #24]
	tensor_product.y = (q1->w * q2->y) - (q1->x * q2->z) + (q1->y * q2->w) + (q1->z * q2->x);
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f103 0410 	add.w	r4, r3, #16
 80061c2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80061c6:	461a      	mov	r2, r3
 80061c8:	4623      	mov	r3, r4
 80061ca:	f7fa f97d 	bl	80004c8 <__aeabi_dmul>
 80061ce:	4603      	mov	r3, r0
 80061d0:	460c      	mov	r4, r1
 80061d2:	461d      	mov	r5, r3
 80061d4:	4626      	mov	r6, r4
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f103 0418 	add.w	r4, r3, #24
 80061e2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80061e6:	461a      	mov	r2, r3
 80061e8:	4623      	mov	r3, r4
 80061ea:	f7fa f96d 	bl	80004c8 <__aeabi_dmul>
 80061ee:	4603      	mov	r3, r0
 80061f0:	460c      	mov	r4, r1
 80061f2:	461a      	mov	r2, r3
 80061f4:	4623      	mov	r3, r4
 80061f6:	4628      	mov	r0, r5
 80061f8:	4631      	mov	r1, r6
 80061fa:	f7f9 ffad 	bl	8000158 <__aeabi_dsub>
 80061fe:	4603      	mov	r3, r0
 8006200:	460c      	mov	r4, r1
 8006202:	461d      	mov	r5, r3
 8006204:	4626      	mov	r6, r4
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	cb18      	ldmia	r3, {r3, r4}
 8006210:	461a      	mov	r2, r3
 8006212:	4623      	mov	r3, r4
 8006214:	f7fa f958 	bl	80004c8 <__aeabi_dmul>
 8006218:	4603      	mov	r3, r0
 800621a:	460c      	mov	r4, r1
 800621c:	461a      	mov	r2, r3
 800621e:	4623      	mov	r3, r4
 8006220:	4628      	mov	r0, r5
 8006222:	4631      	mov	r1, r6
 8006224:	f7f9 ff9a 	bl	800015c <__adddf3>
 8006228:	4603      	mov	r3, r0
 800622a:	460c      	mov	r4, r1
 800622c:	461d      	mov	r5, r3
 800622e:	4626      	mov	r6, r4
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f103 0408 	add.w	r4, r3, #8
 800623c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006240:	461a      	mov	r2, r3
 8006242:	4623      	mov	r3, r4
 8006244:	f7fa f940 	bl	80004c8 <__aeabi_dmul>
 8006248:	4603      	mov	r3, r0
 800624a:	460c      	mov	r4, r1
 800624c:	461a      	mov	r2, r3
 800624e:	4623      	mov	r3, r4
 8006250:	4628      	mov	r0, r5
 8006252:	4631      	mov	r1, r6
 8006254:	f7f9 ff82 	bl	800015c <__adddf3>
 8006258:	4603      	mov	r3, r0
 800625a:	460c      	mov	r4, r1
 800625c:	e9c7 3408 	strd	r3, r4, [r7, #32]
	tensor_product.z = (q1->w * q2->z) + (q1->x * q2->y) - (q1->y * q2->x) + (q1->z * q2->w);
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f103 0418 	add.w	r4, r3, #24
 800626c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006270:	461a      	mov	r2, r3
 8006272:	4623      	mov	r3, r4
 8006274:	f7fa f928 	bl	80004c8 <__aeabi_dmul>
 8006278:	4603      	mov	r3, r0
 800627a:	460c      	mov	r4, r1
 800627c:	461d      	mov	r5, r3
 800627e:	4626      	mov	r6, r4
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f103 0410 	add.w	r4, r3, #16
 800628c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006290:	461a      	mov	r2, r3
 8006292:	4623      	mov	r3, r4
 8006294:	f7fa f918 	bl	80004c8 <__aeabi_dmul>
 8006298:	4603      	mov	r3, r0
 800629a:	460c      	mov	r4, r1
 800629c:	461a      	mov	r2, r3
 800629e:	4623      	mov	r3, r4
 80062a0:	4628      	mov	r0, r5
 80062a2:	4631      	mov	r1, r6
 80062a4:	f7f9 ff5a 	bl	800015c <__adddf3>
 80062a8:	4603      	mov	r3, r0
 80062aa:	460c      	mov	r4, r1
 80062ac:	461d      	mov	r5, r3
 80062ae:	4626      	mov	r6, r4
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f103 0408 	add.w	r4, r3, #8
 80062bc:	e9d4 3400 	ldrd	r3, r4, [r4]
 80062c0:	461a      	mov	r2, r3
 80062c2:	4623      	mov	r3, r4
 80062c4:	f7fa f900 	bl	80004c8 <__aeabi_dmul>
 80062c8:	4603      	mov	r3, r0
 80062ca:	460c      	mov	r4, r1
 80062cc:	461a      	mov	r2, r3
 80062ce:	4623      	mov	r3, r4
 80062d0:	4628      	mov	r0, r5
 80062d2:	4631      	mov	r1, r6
 80062d4:	f7f9 ff40 	bl	8000158 <__aeabi_dsub>
 80062d8:	4603      	mov	r3, r0
 80062da:	460c      	mov	r4, r1
 80062dc:	461d      	mov	r5, r3
 80062de:	4626      	mov	r6, r4
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	cb18      	ldmia	r3, {r3, r4}
 80062ea:	461a      	mov	r2, r3
 80062ec:	4623      	mov	r3, r4
 80062ee:	f7fa f8eb 	bl	80004c8 <__aeabi_dmul>
 80062f2:	4603      	mov	r3, r0
 80062f4:	460c      	mov	r4, r1
 80062f6:	461a      	mov	r2, r3
 80062f8:	4623      	mov	r3, r4
 80062fa:	4628      	mov	r0, r5
 80062fc:	4631      	mov	r1, r6
 80062fe:	f7f9 ff2d 	bl	800015c <__adddf3>
 8006302:	4603      	mov	r3, r0
 8006304:	460c      	mov	r4, r1
 8006306:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

	return tensor_product;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	461d      	mov	r5, r3
 800630e:	f107 0410 	add.w	r4, r7, #16
 8006312:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006314:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006316:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800631a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	3734      	adds	r7, #52	; 0x34
 8006322:	46bd      	mov	sp, r7
 8006324:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006326 <quaternion_normalise>:

void quaternion_normalise(struct quaternion *q) {
 8006326:	b5b0      	push	{r4, r5, r7, lr}
 8006328:	b084      	sub	sp, #16
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]

	double norm = sqrt( pow(q->w,2) + pow(q->x,2) + pow(q->y,2) + pow(q->z,2) );
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006334:	f04f 0200 	mov.w	r2, #0
 8006338:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800633c:	f004 ff46 	bl	800b1cc <pow>
 8006340:	4604      	mov	r4, r0
 8006342:	460d      	mov	r5, r1
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800634a:	f04f 0200 	mov.w	r2, #0
 800634e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006352:	f004 ff3b 	bl	800b1cc <pow>
 8006356:	4602      	mov	r2, r0
 8006358:	460b      	mov	r3, r1
 800635a:	4620      	mov	r0, r4
 800635c:	4629      	mov	r1, r5
 800635e:	f7f9 fefd 	bl	800015c <__adddf3>
 8006362:	4603      	mov	r3, r0
 8006364:	460c      	mov	r4, r1
 8006366:	4625      	mov	r5, r4
 8006368:	461c      	mov	r4, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006370:	f04f 0200 	mov.w	r2, #0
 8006374:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006378:	f004 ff28 	bl	800b1cc <pow>
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	4620      	mov	r0, r4
 8006382:	4629      	mov	r1, r5
 8006384:	f7f9 feea 	bl	800015c <__adddf3>
 8006388:	4603      	mov	r3, r0
 800638a:	460c      	mov	r4, r1
 800638c:	4625      	mov	r5, r4
 800638e:	461c      	mov	r4, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8006396:	f04f 0200 	mov.w	r2, #0
 800639a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800639e:	f004 ff15 	bl	800b1cc <pow>
 80063a2:	4602      	mov	r2, r0
 80063a4:	460b      	mov	r3, r1
 80063a6:	4620      	mov	r0, r4
 80063a8:	4629      	mov	r1, r5
 80063aa:	f7f9 fed7 	bl	800015c <__adddf3>
 80063ae:	4603      	mov	r3, r0
 80063b0:	460c      	mov	r4, r1
 80063b2:	4618      	mov	r0, r3
 80063b4:	4621      	mov	r1, r4
 80063b6:	f005 f865 	bl	800b484 <sqrt>
 80063ba:	e9c7 0102 	strd	r0, r1, [r7, #8]

	q->w = q->w / norm;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80063c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063c8:	f7fa f9a8 	bl	800071c <__aeabi_ddiv>
 80063cc:	4603      	mov	r3, r0
 80063ce:	460c      	mov	r4, r1
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	e9c2 3400 	strd	r3, r4, [r2]
	q->x = q->x / norm;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80063dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063e0:	f7fa f99c 	bl	800071c <__aeabi_ddiv>
 80063e4:	4603      	mov	r3, r0
 80063e6:	460c      	mov	r4, r1
 80063e8:	687a      	ldr	r2, [r7, #4]
 80063ea:	e9c2 3402 	strd	r3, r4, [r2, #8]
	q->y = q->y / norm;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80063f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80063f8:	f7fa f990 	bl	800071c <__aeabi_ddiv>
 80063fc:	4603      	mov	r3, r0
 80063fe:	460c      	mov	r4, r1
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	e9c2 3404 	strd	r3, r4, [r2, #16]
	q->z = q->z / norm;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800640c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006410:	f7fa f984 	bl	800071c <__aeabi_ddiv>
 8006414:	4603      	mov	r3, r0
 8006416:	460c      	mov	r4, r1
 8006418:	687a      	ldr	r2, [r7, #4]
 800641a:	e9c2 3406 	strd	r3, r4, [r2, #24]
}
 800641e:	bf00      	nop
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006428 <quaternion_to_matrix>:

void quaternion_to_matrix(struct quaternion *q, struct rot_matrix *m) {
 8006428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]

	m->m11 = 1 - ( 2 * pow(q->y,2) ) - ( 2 * pow(q->z,2) );
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006438:	f04f 0200 	mov.w	r2, #0
 800643c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006440:	f004 fec4 	bl	800b1cc <pow>
 8006444:	4602      	mov	r2, r0
 8006446:	460b      	mov	r3, r1
 8006448:	f7f9 fe88 	bl	800015c <__adddf3>
 800644c:	4603      	mov	r3, r0
 800644e:	460c      	mov	r4, r1
 8006450:	461a      	mov	r2, r3
 8006452:	4623      	mov	r3, r4
 8006454:	f04f 0000 	mov.w	r0, #0
 8006458:	49cb      	ldr	r1, [pc, #812]	; (8006788 <quaternion_to_matrix+0x360>)
 800645a:	f7f9 fe7d 	bl	8000158 <__aeabi_dsub>
 800645e:	4603      	mov	r3, r0
 8006460:	460c      	mov	r4, r1
 8006462:	4625      	mov	r5, r4
 8006464:	461c      	mov	r4, r3
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800646c:	f04f 0200 	mov.w	r2, #0
 8006470:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006474:	f004 feaa 	bl	800b1cc <pow>
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
 800647c:	f7f9 fe6e 	bl	800015c <__adddf3>
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	4620      	mov	r0, r4
 8006486:	4629      	mov	r1, r5
 8006488:	f7f9 fe66 	bl	8000158 <__aeabi_dsub>
 800648c:	4603      	mov	r3, r0
 800648e:	460c      	mov	r4, r1
 8006490:	683a      	ldr	r2, [r7, #0]
 8006492:	e9c2 3400 	strd	r3, r4, [r2]
	m->m12 = ( 2 * q->x * q->y ) - ( 2 * q->z * q->w );
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800649c:	4602      	mov	r2, r0
 800649e:	460b      	mov	r3, r1
 80064a0:	f7f9 fe5c 	bl	800015c <__adddf3>
 80064a4:	4603      	mov	r3, r0
 80064a6:	460c      	mov	r4, r1
 80064a8:	4618      	mov	r0, r3
 80064aa:	4621      	mov	r1, r4
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f103 0410 	add.w	r4, r3, #16
 80064b2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80064b6:	461a      	mov	r2, r3
 80064b8:	4623      	mov	r3, r4
 80064ba:	f7fa f805 	bl	80004c8 <__aeabi_dmul>
 80064be:	4603      	mov	r3, r0
 80064c0:	460c      	mov	r4, r1
 80064c2:	461d      	mov	r5, r3
 80064c4:	4626      	mov	r6, r4
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80064cc:	4602      	mov	r2, r0
 80064ce:	460b      	mov	r3, r1
 80064d0:	f7f9 fe44 	bl	800015c <__adddf3>
 80064d4:	4603      	mov	r3, r0
 80064d6:	460c      	mov	r4, r1
 80064d8:	4618      	mov	r0, r3
 80064da:	4621      	mov	r1, r4
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	cb18      	ldmia	r3, {r3, r4}
 80064e0:	461a      	mov	r2, r3
 80064e2:	4623      	mov	r3, r4
 80064e4:	f7f9 fff0 	bl	80004c8 <__aeabi_dmul>
 80064e8:	4603      	mov	r3, r0
 80064ea:	460c      	mov	r4, r1
 80064ec:	461a      	mov	r2, r3
 80064ee:	4623      	mov	r3, r4
 80064f0:	4628      	mov	r0, r5
 80064f2:	4631      	mov	r1, r6
 80064f4:	f7f9 fe30 	bl	8000158 <__aeabi_dsub>
 80064f8:	4603      	mov	r3, r0
 80064fa:	460c      	mov	r4, r1
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	e9c2 3402 	strd	r3, r4, [r2, #8]
	m->m13 = ( 2 * q->x * q->z ) + ( 2 * q->y * q->w );
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006508:	4602      	mov	r2, r0
 800650a:	460b      	mov	r3, r1
 800650c:	f7f9 fe26 	bl	800015c <__adddf3>
 8006510:	4603      	mov	r3, r0
 8006512:	460c      	mov	r4, r1
 8006514:	4618      	mov	r0, r3
 8006516:	4621      	mov	r1, r4
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f103 0418 	add.w	r4, r3, #24
 800651e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006522:	461a      	mov	r2, r3
 8006524:	4623      	mov	r3, r4
 8006526:	f7f9 ffcf 	bl	80004c8 <__aeabi_dmul>
 800652a:	4603      	mov	r3, r0
 800652c:	460c      	mov	r4, r1
 800652e:	461d      	mov	r5, r3
 8006530:	4626      	mov	r6, r4
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006538:	4602      	mov	r2, r0
 800653a:	460b      	mov	r3, r1
 800653c:	f7f9 fe0e 	bl	800015c <__adddf3>
 8006540:	4603      	mov	r3, r0
 8006542:	460c      	mov	r4, r1
 8006544:	4618      	mov	r0, r3
 8006546:	4621      	mov	r1, r4
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	cb18      	ldmia	r3, {r3, r4}
 800654c:	461a      	mov	r2, r3
 800654e:	4623      	mov	r3, r4
 8006550:	f7f9 ffba 	bl	80004c8 <__aeabi_dmul>
 8006554:	4603      	mov	r3, r0
 8006556:	460c      	mov	r4, r1
 8006558:	461a      	mov	r2, r3
 800655a:	4623      	mov	r3, r4
 800655c:	4628      	mov	r0, r5
 800655e:	4631      	mov	r1, r6
 8006560:	f7f9 fdfc 	bl	800015c <__adddf3>
 8006564:	4603      	mov	r3, r0
 8006566:	460c      	mov	r4, r1
 8006568:	683a      	ldr	r2, [r7, #0]
 800656a:	e9c2 3404 	strd	r3, r4, [r2, #16]

	m->m21 = ( 2 * q->x * q->y ) + ( 2 * q->z * q->w );
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006574:	4602      	mov	r2, r0
 8006576:	460b      	mov	r3, r1
 8006578:	f7f9 fdf0 	bl	800015c <__adddf3>
 800657c:	4603      	mov	r3, r0
 800657e:	460c      	mov	r4, r1
 8006580:	4618      	mov	r0, r3
 8006582:	4621      	mov	r1, r4
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f103 0410 	add.w	r4, r3, #16
 800658a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800658e:	461a      	mov	r2, r3
 8006590:	4623      	mov	r3, r4
 8006592:	f7f9 ff99 	bl	80004c8 <__aeabi_dmul>
 8006596:	4603      	mov	r3, r0
 8006598:	460c      	mov	r4, r1
 800659a:	461d      	mov	r5, r3
 800659c:	4626      	mov	r6, r4
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80065a4:	4602      	mov	r2, r0
 80065a6:	460b      	mov	r3, r1
 80065a8:	f7f9 fdd8 	bl	800015c <__adddf3>
 80065ac:	4603      	mov	r3, r0
 80065ae:	460c      	mov	r4, r1
 80065b0:	4618      	mov	r0, r3
 80065b2:	4621      	mov	r1, r4
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	cb18      	ldmia	r3, {r3, r4}
 80065b8:	461a      	mov	r2, r3
 80065ba:	4623      	mov	r3, r4
 80065bc:	f7f9 ff84 	bl	80004c8 <__aeabi_dmul>
 80065c0:	4603      	mov	r3, r0
 80065c2:	460c      	mov	r4, r1
 80065c4:	461a      	mov	r2, r3
 80065c6:	4623      	mov	r3, r4
 80065c8:	4628      	mov	r0, r5
 80065ca:	4631      	mov	r1, r6
 80065cc:	f7f9 fdc6 	bl	800015c <__adddf3>
 80065d0:	4603      	mov	r3, r0
 80065d2:	460c      	mov	r4, r1
 80065d4:	683a      	ldr	r2, [r7, #0]
 80065d6:	e9c2 3406 	strd	r3, r4, [r2, #24]
	m->m22 = 1 - ( 2 * pow(q->x,2) ) - ( 2 * pow(q->z,2) );
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80065e0:	f04f 0200 	mov.w	r2, #0
 80065e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80065e8:	f004 fdf0 	bl	800b1cc <pow>
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	f7f9 fdb4 	bl	800015c <__adddf3>
 80065f4:	4603      	mov	r3, r0
 80065f6:	460c      	mov	r4, r1
 80065f8:	461a      	mov	r2, r3
 80065fa:	4623      	mov	r3, r4
 80065fc:	f04f 0000 	mov.w	r0, #0
 8006600:	4961      	ldr	r1, [pc, #388]	; (8006788 <quaternion_to_matrix+0x360>)
 8006602:	f7f9 fda9 	bl	8000158 <__aeabi_dsub>
 8006606:	4603      	mov	r3, r0
 8006608:	460c      	mov	r4, r1
 800660a:	4625      	mov	r5, r4
 800660c:	461c      	mov	r4, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8006614:	f04f 0200 	mov.w	r2, #0
 8006618:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800661c:	f004 fdd6 	bl	800b1cc <pow>
 8006620:	4602      	mov	r2, r0
 8006622:	460b      	mov	r3, r1
 8006624:	f7f9 fd9a 	bl	800015c <__adddf3>
 8006628:	4602      	mov	r2, r0
 800662a:	460b      	mov	r3, r1
 800662c:	4620      	mov	r0, r4
 800662e:	4629      	mov	r1, r5
 8006630:	f7f9 fd92 	bl	8000158 <__aeabi_dsub>
 8006634:	4603      	mov	r3, r0
 8006636:	460c      	mov	r4, r1
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	e9c2 3408 	strd	r3, r4, [r2, #32]
	m->m23 = ( 2 * q->y * q->z ) - ( 2 * q->x * q->w );
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006644:	4602      	mov	r2, r0
 8006646:	460b      	mov	r3, r1
 8006648:	f7f9 fd88 	bl	800015c <__adddf3>
 800664c:	4603      	mov	r3, r0
 800664e:	460c      	mov	r4, r1
 8006650:	4618      	mov	r0, r3
 8006652:	4621      	mov	r1, r4
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	f103 0418 	add.w	r4, r3, #24
 800665a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800665e:	461a      	mov	r2, r3
 8006660:	4623      	mov	r3, r4
 8006662:	f7f9 ff31 	bl	80004c8 <__aeabi_dmul>
 8006666:	4603      	mov	r3, r0
 8006668:	460c      	mov	r4, r1
 800666a:	461d      	mov	r5, r3
 800666c:	4626      	mov	r6, r4
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	f7f9 fd70 	bl	800015c <__adddf3>
 800667c:	4603      	mov	r3, r0
 800667e:	460c      	mov	r4, r1
 8006680:	4618      	mov	r0, r3
 8006682:	4621      	mov	r1, r4
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	cb18      	ldmia	r3, {r3, r4}
 8006688:	461a      	mov	r2, r3
 800668a:	4623      	mov	r3, r4
 800668c:	f7f9 ff1c 	bl	80004c8 <__aeabi_dmul>
 8006690:	4603      	mov	r3, r0
 8006692:	460c      	mov	r4, r1
 8006694:	461a      	mov	r2, r3
 8006696:	4623      	mov	r3, r4
 8006698:	4628      	mov	r0, r5
 800669a:	4631      	mov	r1, r6
 800669c:	f7f9 fd5c 	bl	8000158 <__aeabi_dsub>
 80066a0:	4603      	mov	r3, r0
 80066a2:	460c      	mov	r4, r1
 80066a4:	683a      	ldr	r2, [r7, #0]
 80066a6:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28

	m->m31 = ( 2 * q->x * q->z ) - ( 2 * q->y * q->w );
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	f7f9 fd52 	bl	800015c <__adddf3>
 80066b8:	4603      	mov	r3, r0
 80066ba:	460c      	mov	r4, r1
 80066bc:	4618      	mov	r0, r3
 80066be:	4621      	mov	r1, r4
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f103 0418 	add.w	r4, r3, #24
 80066c6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80066ca:	461a      	mov	r2, r3
 80066cc:	4623      	mov	r3, r4
 80066ce:	f7f9 fefb 	bl	80004c8 <__aeabi_dmul>
 80066d2:	4603      	mov	r3, r0
 80066d4:	460c      	mov	r4, r1
 80066d6:	461d      	mov	r5, r3
 80066d8:	4626      	mov	r6, r4
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80066e0:	4602      	mov	r2, r0
 80066e2:	460b      	mov	r3, r1
 80066e4:	f7f9 fd3a 	bl	800015c <__adddf3>
 80066e8:	4603      	mov	r3, r0
 80066ea:	460c      	mov	r4, r1
 80066ec:	4618      	mov	r0, r3
 80066ee:	4621      	mov	r1, r4
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	cb18      	ldmia	r3, {r3, r4}
 80066f4:	461a      	mov	r2, r3
 80066f6:	4623      	mov	r3, r4
 80066f8:	f7f9 fee6 	bl	80004c8 <__aeabi_dmul>
 80066fc:	4603      	mov	r3, r0
 80066fe:	460c      	mov	r4, r1
 8006700:	461a      	mov	r2, r3
 8006702:	4623      	mov	r3, r4
 8006704:	4628      	mov	r0, r5
 8006706:	4631      	mov	r1, r6
 8006708:	f7f9 fd26 	bl	8000158 <__aeabi_dsub>
 800670c:	4603      	mov	r3, r0
 800670e:	460c      	mov	r4, r1
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	m->m32 = ( 2 * q->y * q->z ) + ( 2 * q->x * q->w );
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800671c:	4602      	mov	r2, r0
 800671e:	460b      	mov	r3, r1
 8006720:	f7f9 fd1c 	bl	800015c <__adddf3>
 8006724:	4603      	mov	r3, r0
 8006726:	460c      	mov	r4, r1
 8006728:	4618      	mov	r0, r3
 800672a:	4621      	mov	r1, r4
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f103 0418 	add.w	r4, r3, #24
 8006732:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006736:	461a      	mov	r2, r3
 8006738:	4623      	mov	r3, r4
 800673a:	f7f9 fec5 	bl	80004c8 <__aeabi_dmul>
 800673e:	4603      	mov	r3, r0
 8006740:	460c      	mov	r4, r1
 8006742:	461d      	mov	r5, r3
 8006744:	4626      	mov	r6, r4
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	f7f9 fd04 	bl	800015c <__adddf3>
 8006754:	4603      	mov	r3, r0
 8006756:	460c      	mov	r4, r1
 8006758:	4618      	mov	r0, r3
 800675a:	4621      	mov	r1, r4
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	cb18      	ldmia	r3, {r3, r4}
 8006760:	461a      	mov	r2, r3
 8006762:	4623      	mov	r3, r4
 8006764:	f7f9 feb0 	bl	80004c8 <__aeabi_dmul>
 8006768:	4603      	mov	r3, r0
 800676a:	460c      	mov	r4, r1
 800676c:	461a      	mov	r2, r3
 800676e:	4623      	mov	r3, r4
 8006770:	4628      	mov	r0, r5
 8006772:	4631      	mov	r1, r6
 8006774:	f7f9 fcf2 	bl	800015c <__adddf3>
 8006778:	4603      	mov	r3, r0
 800677a:	460c      	mov	r4, r1
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	m->m33 = 1 - ( 2 * pow(q->x,2) ) - ( 2 * pow(q->y,2) );
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	e002      	b.n	800678c <quaternion_to_matrix+0x364>
 8006786:	bf00      	nop
 8006788:	3ff00000 	.word	0x3ff00000
 800678c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8006790:	f04f 0200 	mov.w	r2, #0
 8006794:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006798:	f004 fd18 	bl	800b1cc <pow>
 800679c:	4602      	mov	r2, r0
 800679e:	460b      	mov	r3, r1
 80067a0:	f7f9 fcdc 	bl	800015c <__adddf3>
 80067a4:	4603      	mov	r3, r0
 80067a6:	460c      	mov	r4, r1
 80067a8:	461a      	mov	r2, r3
 80067aa:	4623      	mov	r3, r4
 80067ac:	f04f 0000 	mov.w	r0, #0
 80067b0:	4911      	ldr	r1, [pc, #68]	; (80067f8 <quaternion_to_matrix+0x3d0>)
 80067b2:	f7f9 fcd1 	bl	8000158 <__aeabi_dsub>
 80067b6:	4603      	mov	r3, r0
 80067b8:	460c      	mov	r4, r1
 80067ba:	4625      	mov	r5, r4
 80067bc:	461c      	mov	r4, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80067c4:	f04f 0200 	mov.w	r2, #0
 80067c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80067cc:	f004 fcfe 	bl	800b1cc <pow>
 80067d0:	4602      	mov	r2, r0
 80067d2:	460b      	mov	r3, r1
 80067d4:	f7f9 fcc2 	bl	800015c <__adddf3>
 80067d8:	4602      	mov	r2, r0
 80067da:	460b      	mov	r3, r1
 80067dc:	4620      	mov	r0, r4
 80067de:	4629      	mov	r1, r5
 80067e0:	f7f9 fcba 	bl	8000158 <__aeabi_dsub>
 80067e4:	4603      	mov	r3, r0
 80067e6:	460c      	mov	r4, r1
 80067e8:	683a      	ldr	r2, [r7, #0]
 80067ea:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
}
 80067ee:	bf00      	nop
 80067f0:	370c      	adds	r7, #12
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067f6:	bf00      	nop
 80067f8:	3ff00000 	.word	0x3ff00000
 80067fc:	00000000 	.word	0x00000000

08006800 <matrix_to_euler>:

void matrix_to_euler(struct rot_matrix *m, struct euler *e) {
 8006800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006804:	b085      	sub	sp, #20
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	6039      	str	r1, [r7, #0]

	double Beta = atan2f(-m->m31, sqrt( pow(m->m11,2) + pow(m->m21,2) ) );
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8006812:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006816:	4618      	mov	r0, r3
 8006818:	4621      	mov	r1, r4
 800681a:	f7fa f92d 	bl	8000a78 <__aeabi_d2f>
 800681e:	4603      	mov	r3, r0
 8006820:	f083 4400 	eor.w	r4, r3, #2147483648	; 0x80000000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	e9d3 0100 	ldrd	r0, r1, [r3]
 800682a:	f04f 0200 	mov.w	r2, #0
 800682e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006832:	f004 fccb 	bl	800b1cc <pow>
 8006836:	4605      	mov	r5, r0
 8006838:	460e      	mov	r6, r1
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8006840:	f04f 0200 	mov.w	r2, #0
 8006844:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006848:	f004 fcc0 	bl	800b1cc <pow>
 800684c:	4602      	mov	r2, r0
 800684e:	460b      	mov	r3, r1
 8006850:	4628      	mov	r0, r5
 8006852:	4631      	mov	r1, r6
 8006854:	f7f9 fc82 	bl	800015c <__adddf3>
 8006858:	4602      	mov	r2, r0
 800685a:	460b      	mov	r3, r1
 800685c:	4610      	mov	r0, r2
 800685e:	4619      	mov	r1, r3
 8006860:	f004 fe10 	bl	800b484 <sqrt>
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	4610      	mov	r0, r2
 800686a:	4619      	mov	r1, r3
 800686c:	f7fa f904 	bl	8000a78 <__aeabi_d2f>
 8006870:	4603      	mov	r3, r0
 8006872:	4619      	mov	r1, r3
 8006874:	4620      	mov	r0, r4
 8006876:	f004 fea7 	bl	800b5c8 <atan2f>
 800687a:	4603      	mov	r3, r0
 800687c:	4618      	mov	r0, r3
 800687e:	f7f9 fdcb 	bl	8000418 <__aeabi_f2d>
 8006882:	4603      	mov	r3, r0
 8006884:	460c      	mov	r4, r1
 8006886:	e9c7 3402 	strd	r3, r4, [r7, #8]

	e->pitch = Beta * (180 / M_PI);
 800688a:	a347      	add	r3, pc, #284	; (adr r3, 80069a8 <matrix_to_euler+0x1a8>)
 800688c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006890:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006894:	f7f9 fe18 	bl	80004c8 <__aeabi_dmul>
 8006898:	4603      	mov	r3, r0
 800689a:	460c      	mov	r4, r1
 800689c:	4618      	mov	r0, r3
 800689e:	4621      	mov	r1, r4
 80068a0:	f7fa f8ea 	bl	8000a78 <__aeabi_d2f>
 80068a4:	4602      	mov	r2, r0
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	605a      	str	r2, [r3, #4]
	e->roll  = atan2(m->m32 / cosf(Beta), m->m33 / cos(Beta) ) * (180 / M_PI);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 80068b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80068b4:	f7fa f8e0 	bl	8000a78 <__aeabi_d2f>
 80068b8:	4603      	mov	r3, r0
 80068ba:	4618      	mov	r0, r3
 80068bc:	f004 fc1a 	bl	800b0f4 <cosf>
 80068c0:	4603      	mov	r3, r0
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7f9 fda8 	bl	8000418 <__aeabi_f2d>
 80068c8:	4602      	mov	r2, r0
 80068ca:	460b      	mov	r3, r1
 80068cc:	4620      	mov	r0, r4
 80068ce:	4629      	mov	r1, r5
 80068d0:	f7f9 ff24 	bl	800071c <__aeabi_ddiv>
 80068d4:	4603      	mov	r3, r0
 80068d6:	460c      	mov	r4, r1
 80068d8:	4698      	mov	r8, r3
 80068da:	46a1      	mov	r9, r4
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80068e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80068e6:	f004 fbcf 	bl	800b088 <cos>
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
 80068ee:	4620      	mov	r0, r4
 80068f0:	4629      	mov	r1, r5
 80068f2:	f7f9 ff13 	bl	800071c <__aeabi_ddiv>
 80068f6:	4603      	mov	r3, r0
 80068f8:	460c      	mov	r4, r1
 80068fa:	461a      	mov	r2, r3
 80068fc:	4623      	mov	r3, r4
 80068fe:	4640      	mov	r0, r8
 8006900:	4649      	mov	r1, r9
 8006902:	f004 fc61 	bl	800b1c8 <atan2>
 8006906:	a328      	add	r3, pc, #160	; (adr r3, 80069a8 <matrix_to_euler+0x1a8>)
 8006908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690c:	f7f9 fddc 	bl	80004c8 <__aeabi_dmul>
 8006910:	4603      	mov	r3, r0
 8006912:	460c      	mov	r4, r1
 8006914:	4618      	mov	r0, r3
 8006916:	4621      	mov	r1, r4
 8006918:	f7fa f8ae 	bl	8000a78 <__aeabi_d2f>
 800691c:	4602      	mov	r2, r0
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	601a      	str	r2, [r3, #0]
	e->yaw   = atan2(m->m21 / cosf(Beta), m->m11 / cos(Beta) ) * (180 / M_PI);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8006928:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800692c:	f7fa f8a4 	bl	8000a78 <__aeabi_d2f>
 8006930:	4603      	mov	r3, r0
 8006932:	4618      	mov	r0, r3
 8006934:	f004 fbde 	bl	800b0f4 <cosf>
 8006938:	4603      	mov	r3, r0
 800693a:	4618      	mov	r0, r3
 800693c:	f7f9 fd6c 	bl	8000418 <__aeabi_f2d>
 8006940:	4602      	mov	r2, r0
 8006942:	460b      	mov	r3, r1
 8006944:	4620      	mov	r0, r4
 8006946:	4629      	mov	r1, r5
 8006948:	f7f9 fee8 	bl	800071c <__aeabi_ddiv>
 800694c:	4603      	mov	r3, r0
 800694e:	460c      	mov	r4, r1
 8006950:	4698      	mov	r8, r3
 8006952:	46a1      	mov	r9, r4
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	e9d3 4500 	ldrd	r4, r5, [r3]
 800695a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800695e:	f004 fb93 	bl	800b088 <cos>
 8006962:	4602      	mov	r2, r0
 8006964:	460b      	mov	r3, r1
 8006966:	4620      	mov	r0, r4
 8006968:	4629      	mov	r1, r5
 800696a:	f7f9 fed7 	bl	800071c <__aeabi_ddiv>
 800696e:	4603      	mov	r3, r0
 8006970:	460c      	mov	r4, r1
 8006972:	461a      	mov	r2, r3
 8006974:	4623      	mov	r3, r4
 8006976:	4640      	mov	r0, r8
 8006978:	4649      	mov	r1, r9
 800697a:	f004 fc25 	bl	800b1c8 <atan2>
 800697e:	a30a      	add	r3, pc, #40	; (adr r3, 80069a8 <matrix_to_euler+0x1a8>)
 8006980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006984:	f7f9 fda0 	bl	80004c8 <__aeabi_dmul>
 8006988:	4603      	mov	r3, r0
 800698a:	460c      	mov	r4, r1
 800698c:	4618      	mov	r0, r3
 800698e:	4621      	mov	r1, r4
 8006990:	f7fa f872 	bl	8000a78 <__aeabi_d2f>
 8006994:	4602      	mov	r2, r0
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	609a      	str	r2, [r3, #8]
}
 800699a:	bf00      	nop
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069a4:	f3af 8000 	nop.w
 80069a8:	1a63c1f8 	.word	0x1a63c1f8
 80069ac:	404ca5dc 	.word	0x404ca5dc

080069b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80069b6:	4b18      	ldr	r3, [pc, #96]	; (8006a18 <HAL_MspInit+0x68>)
 80069b8:	699b      	ldr	r3, [r3, #24]
 80069ba:	4a17      	ldr	r2, [pc, #92]	; (8006a18 <HAL_MspInit+0x68>)
 80069bc:	f043 0301 	orr.w	r3, r3, #1
 80069c0:	6193      	str	r3, [r2, #24]
 80069c2:	4b15      	ldr	r3, [pc, #84]	; (8006a18 <HAL_MspInit+0x68>)
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	60bb      	str	r3, [r7, #8]
 80069cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80069ce:	4b12      	ldr	r3, [pc, #72]	; (8006a18 <HAL_MspInit+0x68>)
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	4a11      	ldr	r2, [pc, #68]	; (8006a18 <HAL_MspInit+0x68>)
 80069d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069d8:	61d3      	str	r3, [r2, #28]
 80069da:	4b0f      	ldr	r3, [pc, #60]	; (8006a18 <HAL_MspInit+0x68>)
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069e2:	607b      	str	r3, [r7, #4]
 80069e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80069e6:	2200      	movs	r2, #0
 80069e8:	210f      	movs	r1, #15
 80069ea:	f06f 0001 	mvn.w	r0, #1
 80069ee:	f000 fb00 	bl	8006ff2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80069f2:	4b0a      	ldr	r3, [pc, #40]	; (8006a1c <HAL_MspInit+0x6c>)
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	60fb      	str	r3, [r7, #12]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	4a04      	ldr	r2, [pc, #16]	; (8006a1c <HAL_MspInit+0x6c>)
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006a0e:	bf00      	nop
 8006a10:	3710      	adds	r7, #16
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	40021000 	.word	0x40021000
 8006a1c:	40010000 	.word	0x40010000

08006a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006a20:	b480      	push	{r7}
 8006a22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006a24:	bf00      	nop
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bc80      	pop	{r7}
 8006a2a:	4770      	bx	lr

08006a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006a30:	e7fe      	b.n	8006a30 <HardFault_Handler+0x4>

08006a32 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006a32:	b480      	push	{r7}
 8006a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006a36:	e7fe      	b.n	8006a36 <MemManage_Handler+0x4>

08006a38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006a3c:	e7fe      	b.n	8006a3c <BusFault_Handler+0x4>

08006a3e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006a3e:	b480      	push	{r7}
 8006a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006a42:	e7fe      	b.n	8006a42 <UsageFault_Handler+0x4>

08006a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006a44:	b480      	push	{r7}
 8006a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006a48:	bf00      	nop
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bc80      	pop	{r7}
 8006a4e:	4770      	bx	lr

08006a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006a54:	f000 f9b8 	bl	8006dc8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006a58:	f003 fee6 	bl	800a828 <xTaskGetSchedulerState>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d001      	beq.n	8006a66 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8006a62:	f004 f8c9 	bl	800abf8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006a66:	bf00      	nop
 8006a68:	bd80      	pop	{r7, pc}
	...

08006a6c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8006a70:	4802      	ldr	r0, [pc, #8]	; (8006a7c <DMA1_Channel4_IRQHandler+0x10>)
 8006a72:	f000 fc25 	bl	80072c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8006a76:	bf00      	nop
 8006a78:	bd80      	pop	{r7, pc}
 8006a7a:	bf00      	nop
 8006a7c:	20003550 	.word	0x20003550

08006a80 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006a84:	4802      	ldr	r0, [pc, #8]	; (8006a90 <DMA1_Channel5_IRQHandler+0x10>)
 8006a86:	f000 fc1b 	bl	80072c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8006a8a:	bf00      	nop
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20003594 	.word	0x20003594

08006a94 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8006a98:	4802      	ldr	r0, [pc, #8]	; (8006aa4 <DMA1_Channel6_IRQHandler+0x10>)
 8006a9a:	f000 fc11 	bl	80072c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8006a9e:	bf00      	nop
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	20003474 	.word	0x20003474

08006aa8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8006aac:	4802      	ldr	r0, [pc, #8]	; (8006ab8 <DMA1_Channel7_IRQHandler+0x10>)
 8006aae:	f000 fc07 	bl	80072c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8006ab2:	bf00      	nop
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	2000350c 	.word	0x2000350c

08006abc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8006ac0:	4802      	ldr	r0, [pc, #8]	; (8006acc <USART1_IRQHandler+0x10>)
 8006ac2:	f002 fce3 	bl	800948c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006ac6:	bf00      	nop
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	200035d8 	.word	0x200035d8

08006ad0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8006ad4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006ad8:	f000 feb0 	bl	800783c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006adc:	bf00      	nop
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8006ae4:	4b15      	ldr	r3, [pc, #84]	; (8006b3c <SystemInit+0x5c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a14      	ldr	r2, [pc, #80]	; (8006b3c <SystemInit+0x5c>)
 8006aea:	f043 0301 	orr.w	r3, r3, #1
 8006aee:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8006af0:	4b12      	ldr	r3, [pc, #72]	; (8006b3c <SystemInit+0x5c>)
 8006af2:	685a      	ldr	r2, [r3, #4]
 8006af4:	4911      	ldr	r1, [pc, #68]	; (8006b3c <SystemInit+0x5c>)
 8006af6:	4b12      	ldr	r3, [pc, #72]	; (8006b40 <SystemInit+0x60>)
 8006af8:	4013      	ands	r3, r2
 8006afa:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8006afc:	4b0f      	ldr	r3, [pc, #60]	; (8006b3c <SystemInit+0x5c>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a0e      	ldr	r2, [pc, #56]	; (8006b3c <SystemInit+0x5c>)
 8006b02:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8006b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b0a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8006b0c:	4b0b      	ldr	r3, [pc, #44]	; (8006b3c <SystemInit+0x5c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a0a      	ldr	r2, [pc, #40]	; (8006b3c <SystemInit+0x5c>)
 8006b12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b16:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8006b18:	4b08      	ldr	r3, [pc, #32]	; (8006b3c <SystemInit+0x5c>)
 8006b1a:	685b      	ldr	r3, [r3, #4]
 8006b1c:	4a07      	ldr	r2, [pc, #28]	; (8006b3c <SystemInit+0x5c>)
 8006b1e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006b22:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8006b24:	4b05      	ldr	r3, [pc, #20]	; (8006b3c <SystemInit+0x5c>)
 8006b26:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8006b2a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8006b2c:	4b05      	ldr	r3, [pc, #20]	; (8006b44 <SystemInit+0x64>)
 8006b2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006b32:	609a      	str	r2, [r3, #8]
#endif 
}
 8006b34:	bf00      	nop
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bc80      	pop	{r7}
 8006b3a:	4770      	bx	lr
 8006b3c:	40021000 	.word	0x40021000
 8006b40:	f8ff0000 	.word	0xf8ff0000
 8006b44:	e000ed00 	.word	0xe000ed00

08006b48 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8006b4c:	4b11      	ldr	r3, [pc, #68]	; (8006b94 <MX_USART1_UART_Init+0x4c>)
 8006b4e:	4a12      	ldr	r2, [pc, #72]	; (8006b98 <MX_USART1_UART_Init+0x50>)
 8006b50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006b52:	4b10      	ldr	r3, [pc, #64]	; (8006b94 <MX_USART1_UART_Init+0x4c>)
 8006b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006b58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006b5a:	4b0e      	ldr	r3, [pc, #56]	; (8006b94 <MX_USART1_UART_Init+0x4c>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006b60:	4b0c      	ldr	r3, [pc, #48]	; (8006b94 <MX_USART1_UART_Init+0x4c>)
 8006b62:	2200      	movs	r2, #0
 8006b64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006b66:	4b0b      	ldr	r3, [pc, #44]	; (8006b94 <MX_USART1_UART_Init+0x4c>)
 8006b68:	2200      	movs	r2, #0
 8006b6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006b6c:	4b09      	ldr	r3, [pc, #36]	; (8006b94 <MX_USART1_UART_Init+0x4c>)
 8006b6e:	220c      	movs	r2, #12
 8006b70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b72:	4b08      	ldr	r3, [pc, #32]	; (8006b94 <MX_USART1_UART_Init+0x4c>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006b78:	4b06      	ldr	r3, [pc, #24]	; (8006b94 <MX_USART1_UART_Init+0x4c>)
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006b7e:	4805      	ldr	r0, [pc, #20]	; (8006b94 <MX_USART1_UART_Init+0x4c>)
 8006b80:	f002 fb4a 	bl	8009218 <HAL_UART_Init>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d001      	beq.n	8006b8e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8006b8a:	f7fd faa3 	bl	80040d4 <Error_Handler>
  }

}
 8006b8e:	bf00      	nop
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	200035d8 	.word	0x200035d8
 8006b98:	40013800 	.word	0x40013800

08006b9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b088      	sub	sp, #32
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ba4:	f107 0310 	add.w	r3, r7, #16
 8006ba8:	2200      	movs	r2, #0
 8006baa:	601a      	str	r2, [r3, #0]
 8006bac:	605a      	str	r2, [r3, #4]
 8006bae:	609a      	str	r2, [r3, #8]
 8006bb0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a47      	ldr	r2, [pc, #284]	; (8006cd4 <HAL_UART_MspInit+0x138>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	f040 8086 	bne.w	8006cca <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006bbe:	4b46      	ldr	r3, [pc, #280]	; (8006cd8 <HAL_UART_MspInit+0x13c>)
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	4a45      	ldr	r2, [pc, #276]	; (8006cd8 <HAL_UART_MspInit+0x13c>)
 8006bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bc8:	6193      	str	r3, [r2, #24]
 8006bca:	4b43      	ldr	r3, [pc, #268]	; (8006cd8 <HAL_UART_MspInit+0x13c>)
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bd6:	4b40      	ldr	r3, [pc, #256]	; (8006cd8 <HAL_UART_MspInit+0x13c>)
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	4a3f      	ldr	r2, [pc, #252]	; (8006cd8 <HAL_UART_MspInit+0x13c>)
 8006bdc:	f043 0304 	orr.w	r3, r3, #4
 8006be0:	6193      	str	r3, [r2, #24]
 8006be2:	4b3d      	ldr	r3, [pc, #244]	; (8006cd8 <HAL_UART_MspInit+0x13c>)
 8006be4:	699b      	ldr	r3, [r3, #24]
 8006be6:	f003 0304 	and.w	r3, r3, #4
 8006bea:	60bb      	str	r3, [r7, #8]
 8006bec:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = USART1_HC05_TX_Pin;
 8006bee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bf2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bf4:	2302      	movs	r3, #2
 8006bf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USART1_HC05_TX_GPIO_Port, &GPIO_InitStruct);
 8006bfc:	f107 0310 	add.w	r3, r7, #16
 8006c00:	4619      	mov	r1, r3
 8006c02:	4836      	ldr	r0, [pc, #216]	; (8006cdc <HAL_UART_MspInit+0x140>)
 8006c04:	f000 fc90 	bl	8007528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_HC05_RX_Pin;
 8006c08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c0c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c12:	2300      	movs	r3, #0
 8006c14:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(USART1_HC05_RX_GPIO_Port, &GPIO_InitStruct);
 8006c16:	f107 0310 	add.w	r3, r7, #16
 8006c1a:	4619      	mov	r1, r3
 8006c1c:	482f      	ldr	r0, [pc, #188]	; (8006cdc <HAL_UART_MspInit+0x140>)
 8006c1e:	f000 fc83 	bl	8007528 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8006c22:	4b2f      	ldr	r3, [pc, #188]	; (8006ce0 <HAL_UART_MspInit+0x144>)
 8006c24:	4a2f      	ldr	r2, [pc, #188]	; (8006ce4 <HAL_UART_MspInit+0x148>)
 8006c26:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006c28:	4b2d      	ldr	r3, [pc, #180]	; (8006ce0 <HAL_UART_MspInit+0x144>)
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c2e:	4b2c      	ldr	r3, [pc, #176]	; (8006ce0 <HAL_UART_MspInit+0x144>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006c34:	4b2a      	ldr	r3, [pc, #168]	; (8006ce0 <HAL_UART_MspInit+0x144>)
 8006c36:	2280      	movs	r2, #128	; 0x80
 8006c38:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006c3a:	4b29      	ldr	r3, [pc, #164]	; (8006ce0 <HAL_UART_MspInit+0x144>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006c40:	4b27      	ldr	r3, [pc, #156]	; (8006ce0 <HAL_UART_MspInit+0x144>)
 8006c42:	2200      	movs	r2, #0
 8006c44:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8006c46:	4b26      	ldr	r3, [pc, #152]	; (8006ce0 <HAL_UART_MspInit+0x144>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006c4c:	4b24      	ldr	r3, [pc, #144]	; (8006ce0 <HAL_UART_MspInit+0x144>)
 8006c4e:	2200      	movs	r2, #0
 8006c50:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8006c52:	4823      	ldr	r0, [pc, #140]	; (8006ce0 <HAL_UART_MspInit+0x144>)
 8006c54:	f000 fa04 	bl	8007060 <HAL_DMA_Init>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8006c5e:	f7fd fa39 	bl	80040d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a1e      	ldr	r2, [pc, #120]	; (8006ce0 <HAL_UART_MspInit+0x144>)
 8006c66:	635a      	str	r2, [r3, #52]	; 0x34
 8006c68:	4a1d      	ldr	r2, [pc, #116]	; (8006ce0 <HAL_UART_MspInit+0x144>)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8006c6e:	4b1e      	ldr	r3, [pc, #120]	; (8006ce8 <HAL_UART_MspInit+0x14c>)
 8006c70:	4a1e      	ldr	r2, [pc, #120]	; (8006cec <HAL_UART_MspInit+0x150>)
 8006c72:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006c74:	4b1c      	ldr	r3, [pc, #112]	; (8006ce8 <HAL_UART_MspInit+0x14c>)
 8006c76:	2210      	movs	r2, #16
 8006c78:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006c7a:	4b1b      	ldr	r3, [pc, #108]	; (8006ce8 <HAL_UART_MspInit+0x14c>)
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006c80:	4b19      	ldr	r3, [pc, #100]	; (8006ce8 <HAL_UART_MspInit+0x14c>)
 8006c82:	2280      	movs	r2, #128	; 0x80
 8006c84:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006c86:	4b18      	ldr	r3, [pc, #96]	; (8006ce8 <HAL_UART_MspInit+0x14c>)
 8006c88:	2200      	movs	r2, #0
 8006c8a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006c8c:	4b16      	ldr	r3, [pc, #88]	; (8006ce8 <HAL_UART_MspInit+0x14c>)
 8006c8e:	2200      	movs	r2, #0
 8006c90:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006c92:	4b15      	ldr	r3, [pc, #84]	; (8006ce8 <HAL_UART_MspInit+0x14c>)
 8006c94:	2200      	movs	r2, #0
 8006c96:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006c98:	4b13      	ldr	r3, [pc, #76]	; (8006ce8 <HAL_UART_MspInit+0x14c>)
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006c9e:	4812      	ldr	r0, [pc, #72]	; (8006ce8 <HAL_UART_MspInit+0x14c>)
 8006ca0:	f000 f9de 	bl	8007060 <HAL_DMA_Init>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d001      	beq.n	8006cae <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8006caa:	f7fd fa13 	bl	80040d4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a0d      	ldr	r2, [pc, #52]	; (8006ce8 <HAL_UART_MspInit+0x14c>)
 8006cb2:	631a      	str	r2, [r3, #48]	; 0x30
 8006cb4:	4a0c      	ldr	r2, [pc, #48]	; (8006ce8 <HAL_UART_MspInit+0x14c>)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8006cba:	2200      	movs	r2, #0
 8006cbc:	2105      	movs	r1, #5
 8006cbe:	2025      	movs	r0, #37	; 0x25
 8006cc0:	f000 f997 	bl	8006ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006cc4:	2025      	movs	r0, #37	; 0x25
 8006cc6:	f000 f9b0 	bl	800702a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8006cca:	bf00      	nop
 8006ccc:	3720      	adds	r7, #32
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	40013800 	.word	0x40013800
 8006cd8:	40021000 	.word	0x40021000
 8006cdc:	40010800 	.word	0x40010800
 8006ce0:	20003594 	.word	0x20003594
 8006ce4:	40020058 	.word	0x40020058
 8006ce8:	20003550 	.word	0x20003550
 8006cec:	40020044 	.word	0x40020044

08006cf0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006cf0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006cf2:	e003      	b.n	8006cfc <LoopCopyDataInit>

08006cf4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006cf4:	4b0b      	ldr	r3, [pc, #44]	; (8006d24 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006cf6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006cf8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8006cfa:	3104      	adds	r1, #4

08006cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8006cfc:	480a      	ldr	r0, [pc, #40]	; (8006d28 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8006cfe:	4b0b      	ldr	r3, [pc, #44]	; (8006d2c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006d00:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006d02:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006d04:	d3f6      	bcc.n	8006cf4 <CopyDataInit>
  ldr r2, =_sbss
 8006d06:	4a0a      	ldr	r2, [pc, #40]	; (8006d30 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006d08:	e002      	b.n	8006d10 <LoopFillZerobss>

08006d0a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006d0a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8006d0c:	f842 3b04 	str.w	r3, [r2], #4

08006d10 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006d10:	4b08      	ldr	r3, [pc, #32]	; (8006d34 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006d12:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006d14:	d3f9      	bcc.n	8006d0a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006d16:	f7ff fee3 	bl	8006ae0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006d1a:	f004 f989 	bl	800b030 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006d1e:	f7fd f985 	bl	800402c <main>
  bx lr
 8006d22:	4770      	bx	lr
  ldr r3, =_sidata
 8006d24:	0800f9e0 	.word	0x0800f9e0
  ldr r0, =_sdata
 8006d28:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006d2c:	200000b4 	.word	0x200000b4
  ldr r2, =_sbss
 8006d30:	200000b8 	.word	0x200000b8
  ldr r3, = _ebss
 8006d34:	2000361c 	.word	0x2000361c

08006d38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006d38:	e7fe      	b.n	8006d38 <ADC1_2_IRQHandler>
	...

08006d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006d40:	4b08      	ldr	r3, [pc, #32]	; (8006d64 <HAL_Init+0x28>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a07      	ldr	r2, [pc, #28]	; (8006d64 <HAL_Init+0x28>)
 8006d46:	f043 0310 	orr.w	r3, r3, #16
 8006d4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d4c:	2003      	movs	r0, #3
 8006d4e:	f000 f945 	bl	8006fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006d52:	200f      	movs	r0, #15
 8006d54:	f000 f808 	bl	8006d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006d58:	f7ff fe2a 	bl	80069b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	40022000 	.word	0x40022000

08006d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006d70:	4b12      	ldr	r3, [pc, #72]	; (8006dbc <HAL_InitTick+0x54>)
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	4b12      	ldr	r3, [pc, #72]	; (8006dc0 <HAL_InitTick+0x58>)
 8006d76:	781b      	ldrb	r3, [r3, #0]
 8006d78:	4619      	mov	r1, r3
 8006d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 f95d 	bl	8007046 <HAL_SYSTICK_Config>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e00e      	b.n	8006db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b0f      	cmp	r3, #15
 8006d9a:	d80a      	bhi.n	8006db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	6879      	ldr	r1, [r7, #4]
 8006da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006da4:	f000 f925 	bl	8006ff2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006da8:	4a06      	ldr	r2, [pc, #24]	; (8006dc4 <HAL_InitTick+0x5c>)
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
 8006db0:	e000      	b.n	8006db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	2000003c 	.word	0x2000003c
 8006dc0:	20000044 	.word	0x20000044
 8006dc4:	20000040 	.word	0x20000040

08006dc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006dcc:	4b05      	ldr	r3, [pc, #20]	; (8006de4 <HAL_IncTick+0x1c>)
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	4b05      	ldr	r3, [pc, #20]	; (8006de8 <HAL_IncTick+0x20>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	4a03      	ldr	r2, [pc, #12]	; (8006de8 <HAL_IncTick+0x20>)
 8006dda:	6013      	str	r3, [r2, #0]
}
 8006ddc:	bf00      	nop
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bc80      	pop	{r7}
 8006de2:	4770      	bx	lr
 8006de4:	20000044 	.word	0x20000044
 8006de8:	20003618 	.word	0x20003618

08006dec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006dec:	b480      	push	{r7}
 8006dee:	af00      	add	r7, sp, #0
  return uwTick;
 8006df0:	4b02      	ldr	r3, [pc, #8]	; (8006dfc <HAL_GetTick+0x10>)
 8006df2:	681b      	ldr	r3, [r3, #0]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bc80      	pop	{r7}
 8006dfa:	4770      	bx	lr
 8006dfc:	20003618 	.word	0x20003618

08006e00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006e08:	f7ff fff0 	bl	8006dec <HAL_GetTick>
 8006e0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e18:	d005      	beq.n	8006e26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006e1a:	4b09      	ldr	r3, [pc, #36]	; (8006e40 <HAL_Delay+0x40>)
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	4413      	add	r3, r2
 8006e24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006e26:	bf00      	nop
 8006e28:	f7ff ffe0 	bl	8006dec <HAL_GetTick>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	68fa      	ldr	r2, [r7, #12]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	d8f7      	bhi.n	8006e28 <HAL_Delay+0x28>
  {
  }
}
 8006e38:	bf00      	nop
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	20000044 	.word	0x20000044

08006e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b085      	sub	sp, #20
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f003 0307 	and.w	r3, r3, #7
 8006e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e54:	4b0c      	ldr	r3, [pc, #48]	; (8006e88 <__NVIC_SetPriorityGrouping+0x44>)
 8006e56:	68db      	ldr	r3, [r3, #12]
 8006e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e60:	4013      	ands	r3, r2
 8006e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e76:	4a04      	ldr	r2, [pc, #16]	; (8006e88 <__NVIC_SetPriorityGrouping+0x44>)
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	60d3      	str	r3, [r2, #12]
}
 8006e7c:	bf00      	nop
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bc80      	pop	{r7}
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	e000ed00 	.word	0xe000ed00

08006e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e90:	4b04      	ldr	r3, [pc, #16]	; (8006ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	0a1b      	lsrs	r3, r3, #8
 8006e96:	f003 0307 	and.w	r3, r3, #7
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bc80      	pop	{r7}
 8006ea0:	4770      	bx	lr
 8006ea2:	bf00      	nop
 8006ea4:	e000ed00 	.word	0xe000ed00

08006ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b083      	sub	sp, #12
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	4603      	mov	r3, r0
 8006eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	db0b      	blt.n	8006ed2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006eba:	79fb      	ldrb	r3, [r7, #7]
 8006ebc:	f003 021f 	and.w	r2, r3, #31
 8006ec0:	4906      	ldr	r1, [pc, #24]	; (8006edc <__NVIC_EnableIRQ+0x34>)
 8006ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ec6:	095b      	lsrs	r3, r3, #5
 8006ec8:	2001      	movs	r0, #1
 8006eca:	fa00 f202 	lsl.w	r2, r0, r2
 8006ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006ed2:	bf00      	nop
 8006ed4:	370c      	adds	r7, #12
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bc80      	pop	{r7}
 8006eda:	4770      	bx	lr
 8006edc:	e000e100 	.word	0xe000e100

08006ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	6039      	str	r1, [r7, #0]
 8006eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	db0a      	blt.n	8006f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	490c      	ldr	r1, [pc, #48]	; (8006f2c <__NVIC_SetPriority+0x4c>)
 8006efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006efe:	0112      	lsls	r2, r2, #4
 8006f00:	b2d2      	uxtb	r2, r2
 8006f02:	440b      	add	r3, r1
 8006f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006f08:	e00a      	b.n	8006f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	4908      	ldr	r1, [pc, #32]	; (8006f30 <__NVIC_SetPriority+0x50>)
 8006f10:	79fb      	ldrb	r3, [r7, #7]
 8006f12:	f003 030f 	and.w	r3, r3, #15
 8006f16:	3b04      	subs	r3, #4
 8006f18:	0112      	lsls	r2, r2, #4
 8006f1a:	b2d2      	uxtb	r2, r2
 8006f1c:	440b      	add	r3, r1
 8006f1e:	761a      	strb	r2, [r3, #24]
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bc80      	pop	{r7}
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	e000e100 	.word	0xe000e100
 8006f30:	e000ed00 	.word	0xe000ed00

08006f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b089      	sub	sp, #36	; 0x24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f003 0307 	and.w	r3, r3, #7
 8006f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	f1c3 0307 	rsb	r3, r3, #7
 8006f4e:	2b04      	cmp	r3, #4
 8006f50:	bf28      	it	cs
 8006f52:	2304      	movcs	r3, #4
 8006f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	3304      	adds	r3, #4
 8006f5a:	2b06      	cmp	r3, #6
 8006f5c:	d902      	bls.n	8006f64 <NVIC_EncodePriority+0x30>
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	3b03      	subs	r3, #3
 8006f62:	e000      	b.n	8006f66 <NVIC_EncodePriority+0x32>
 8006f64:	2300      	movs	r3, #0
 8006f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f72:	43da      	mvns	r2, r3
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	401a      	ands	r2, r3
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	fa01 f303 	lsl.w	r3, r1, r3
 8006f86:	43d9      	mvns	r1, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f8c:	4313      	orrs	r3, r2
         );
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3724      	adds	r7, #36	; 0x24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bc80      	pop	{r7}
 8006f96:	4770      	bx	lr

08006f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b082      	sub	sp, #8
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fa8:	d301      	bcc.n	8006fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006faa:	2301      	movs	r3, #1
 8006fac:	e00f      	b.n	8006fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006fae:	4a0a      	ldr	r2, [pc, #40]	; (8006fd8 <SysTick_Config+0x40>)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	3b01      	subs	r3, #1
 8006fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006fb6:	210f      	movs	r1, #15
 8006fb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fbc:	f7ff ff90 	bl	8006ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006fc0:	4b05      	ldr	r3, [pc, #20]	; (8006fd8 <SysTick_Config+0x40>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006fc6:	4b04      	ldr	r3, [pc, #16]	; (8006fd8 <SysTick_Config+0x40>)
 8006fc8:	2207      	movs	r2, #7
 8006fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	e000e010 	.word	0xe000e010

08006fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7ff ff2d 	bl	8006e44 <__NVIC_SetPriorityGrouping>
}
 8006fea:	bf00      	nop
 8006fec:	3708      	adds	r7, #8
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}

08006ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006ff2:	b580      	push	{r7, lr}
 8006ff4:	b086      	sub	sp, #24
 8006ff6:	af00      	add	r7, sp, #0
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	60b9      	str	r1, [r7, #8]
 8006ffc:	607a      	str	r2, [r7, #4]
 8006ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007000:	2300      	movs	r3, #0
 8007002:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007004:	f7ff ff42 	bl	8006e8c <__NVIC_GetPriorityGrouping>
 8007008:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	68b9      	ldr	r1, [r7, #8]
 800700e:	6978      	ldr	r0, [r7, #20]
 8007010:	f7ff ff90 	bl	8006f34 <NVIC_EncodePriority>
 8007014:	4602      	mov	r2, r0
 8007016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800701a:	4611      	mov	r1, r2
 800701c:	4618      	mov	r0, r3
 800701e:	f7ff ff5f 	bl	8006ee0 <__NVIC_SetPriority>
}
 8007022:	bf00      	nop
 8007024:	3718      	adds	r7, #24
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800702a:	b580      	push	{r7, lr}
 800702c:	b082      	sub	sp, #8
 800702e:	af00      	add	r7, sp, #0
 8007030:	4603      	mov	r3, r0
 8007032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007038:	4618      	mov	r0, r3
 800703a:	f7ff ff35 	bl	8006ea8 <__NVIC_EnableIRQ>
}
 800703e:	bf00      	nop
 8007040:	3708      	adds	r7, #8
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007046:	b580      	push	{r7, lr}
 8007048:	b082      	sub	sp, #8
 800704a:	af00      	add	r7, sp, #0
 800704c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f7ff ffa2 	bl	8006f98 <SysTick_Config>
 8007054:	4603      	mov	r3, r0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
	...

08007060 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007060:	b480      	push	{r7}
 8007062:	b085      	sub	sp, #20
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007068:	2300      	movs	r3, #0
 800706a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d101      	bne.n	8007076 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	e043      	b.n	80070fe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	461a      	mov	r2, r3
 800707c:	4b22      	ldr	r3, [pc, #136]	; (8007108 <HAL_DMA_Init+0xa8>)
 800707e:	4413      	add	r3, r2
 8007080:	4a22      	ldr	r2, [pc, #136]	; (800710c <HAL_DMA_Init+0xac>)
 8007082:	fba2 2303 	umull	r2, r3, r2, r3
 8007086:	091b      	lsrs	r3, r3, #4
 8007088:	009a      	lsls	r2, r3, #2
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a1f      	ldr	r2, [pc, #124]	; (8007110 <HAL_DMA_Init+0xb0>)
 8007092:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80070aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80070ae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80070b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	68db      	ldr	r3, [r3, #12]
 80070be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80070c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80070d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	69db      	ldr	r3, [r3, #28]
 80070d6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	4313      	orrs	r3, r2
 80070dc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	68fa      	ldr	r2, [r7, #12]
 80070e4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80070fc:	2300      	movs	r3, #0
}
 80070fe:	4618      	mov	r0, r3
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	bc80      	pop	{r7}
 8007106:	4770      	bx	lr
 8007108:	bffdfff8 	.word	0xbffdfff8
 800710c:	cccccccd 	.word	0xcccccccd
 8007110:	40020000 	.word	0x40020000

08007114 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	607a      	str	r2, [r7, #4]
 8007120:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f893 3020 	ldrb.w	r3, [r3, #32]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d101      	bne.n	8007134 <HAL_DMA_Start_IT+0x20>
 8007130:	2302      	movs	r3, #2
 8007132:	e04a      	b.n	80071ca <HAL_DMA_Start_IT+0xb6>
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007142:	2b01      	cmp	r3, #1
 8007144:	d13a      	bne.n	80071bc <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2202      	movs	r2, #2
 800714a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 0201 	bic.w	r2, r2, #1
 8007162:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	687a      	ldr	r2, [r7, #4]
 8007168:	68b9      	ldr	r1, [r7, #8]
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f000 f9ae 	bl	80074cc <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007174:	2b00      	cmp	r3, #0
 8007176:	d008      	beq.n	800718a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	681a      	ldr	r2, [r3, #0]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f042 020e 	orr.w	r2, r2, #14
 8007186:	601a      	str	r2, [r3, #0]
 8007188:	e00f      	b.n	80071aa <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f022 0204 	bic.w	r2, r2, #4
 8007198:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f042 020a 	orr.w	r2, r2, #10
 80071a8:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f042 0201 	orr.w	r2, r2, #1
 80071b8:	601a      	str	r2, [r3, #0]
 80071ba:	e005      	b.n	80071c8 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80071c4:	2302      	movs	r3, #2
 80071c6:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80071c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3718      	adds	r7, #24
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
	...

080071d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071dc:	2300      	movs	r3, #0
 80071de:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80071e6:	2b02      	cmp	r3, #2
 80071e8:	d005      	beq.n	80071f6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2204      	movs	r2, #4
 80071ee:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	73fb      	strb	r3, [r7, #15]
 80071f4:	e051      	b.n	800729a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f022 020e 	bic.w	r2, r2, #14
 8007204:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 0201 	bic.w	r2, r2, #1
 8007214:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a22      	ldr	r2, [pc, #136]	; (80072a4 <HAL_DMA_Abort_IT+0xd0>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d029      	beq.n	8007274 <HAL_DMA_Abort_IT+0xa0>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a20      	ldr	r2, [pc, #128]	; (80072a8 <HAL_DMA_Abort_IT+0xd4>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d022      	beq.n	8007270 <HAL_DMA_Abort_IT+0x9c>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a1f      	ldr	r2, [pc, #124]	; (80072ac <HAL_DMA_Abort_IT+0xd8>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d01a      	beq.n	800726a <HAL_DMA_Abort_IT+0x96>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	4a1d      	ldr	r2, [pc, #116]	; (80072b0 <HAL_DMA_Abort_IT+0xdc>)
 800723a:	4293      	cmp	r3, r2
 800723c:	d012      	beq.n	8007264 <HAL_DMA_Abort_IT+0x90>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4a1c      	ldr	r2, [pc, #112]	; (80072b4 <HAL_DMA_Abort_IT+0xe0>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d00a      	beq.n	800725e <HAL_DMA_Abort_IT+0x8a>
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	4a1a      	ldr	r2, [pc, #104]	; (80072b8 <HAL_DMA_Abort_IT+0xe4>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d102      	bne.n	8007258 <HAL_DMA_Abort_IT+0x84>
 8007252:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007256:	e00e      	b.n	8007276 <HAL_DMA_Abort_IT+0xa2>
 8007258:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800725c:	e00b      	b.n	8007276 <HAL_DMA_Abort_IT+0xa2>
 800725e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007262:	e008      	b.n	8007276 <HAL_DMA_Abort_IT+0xa2>
 8007264:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007268:	e005      	b.n	8007276 <HAL_DMA_Abort_IT+0xa2>
 800726a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800726e:	e002      	b.n	8007276 <HAL_DMA_Abort_IT+0xa2>
 8007270:	2310      	movs	r3, #16
 8007272:	e000      	b.n	8007276 <HAL_DMA_Abort_IT+0xa2>
 8007274:	2301      	movs	r3, #1
 8007276:	4a11      	ldr	r2, [pc, #68]	; (80072bc <HAL_DMA_Abort_IT+0xe8>)
 8007278:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2201      	movs	r2, #1
 800727e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800728e:	2b00      	cmp	r3, #0
 8007290:	d003      	beq.n	800729a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	4798      	blx	r3
    } 
  }
  return status;
 800729a:	7bfb      	ldrb	r3, [r7, #15]
}
 800729c:	4618      	mov	r0, r3
 800729e:	3710      	adds	r7, #16
 80072a0:	46bd      	mov	sp, r7
 80072a2:	bd80      	pop	{r7, pc}
 80072a4:	40020008 	.word	0x40020008
 80072a8:	4002001c 	.word	0x4002001c
 80072ac:	40020030 	.word	0x40020030
 80072b0:	40020044 	.word	0x40020044
 80072b4:	40020058 	.word	0x40020058
 80072b8:	4002006c 	.word	0x4002006c
 80072bc:	40020000 	.word	0x40020000

080072c0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072dc:	2204      	movs	r2, #4
 80072de:	409a      	lsls	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4013      	ands	r3, r2
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d04f      	beq.n	8007388 <HAL_DMA_IRQHandler+0xc8>
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	f003 0304 	and.w	r3, r3, #4
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d04a      	beq.n	8007388 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0320 	and.w	r3, r3, #32
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d107      	bne.n	8007310 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f022 0204 	bic.w	r2, r2, #4
 800730e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a66      	ldr	r2, [pc, #408]	; (80074b0 <HAL_DMA_IRQHandler+0x1f0>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d029      	beq.n	800736e <HAL_DMA_IRQHandler+0xae>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a65      	ldr	r2, [pc, #404]	; (80074b4 <HAL_DMA_IRQHandler+0x1f4>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d022      	beq.n	800736a <HAL_DMA_IRQHandler+0xaa>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a63      	ldr	r2, [pc, #396]	; (80074b8 <HAL_DMA_IRQHandler+0x1f8>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d01a      	beq.n	8007364 <HAL_DMA_IRQHandler+0xa4>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a62      	ldr	r2, [pc, #392]	; (80074bc <HAL_DMA_IRQHandler+0x1fc>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d012      	beq.n	800735e <HAL_DMA_IRQHandler+0x9e>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a60      	ldr	r2, [pc, #384]	; (80074c0 <HAL_DMA_IRQHandler+0x200>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d00a      	beq.n	8007358 <HAL_DMA_IRQHandler+0x98>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a5f      	ldr	r2, [pc, #380]	; (80074c4 <HAL_DMA_IRQHandler+0x204>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d102      	bne.n	8007352 <HAL_DMA_IRQHandler+0x92>
 800734c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007350:	e00e      	b.n	8007370 <HAL_DMA_IRQHandler+0xb0>
 8007352:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007356:	e00b      	b.n	8007370 <HAL_DMA_IRQHandler+0xb0>
 8007358:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800735c:	e008      	b.n	8007370 <HAL_DMA_IRQHandler+0xb0>
 800735e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007362:	e005      	b.n	8007370 <HAL_DMA_IRQHandler+0xb0>
 8007364:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007368:	e002      	b.n	8007370 <HAL_DMA_IRQHandler+0xb0>
 800736a:	2340      	movs	r3, #64	; 0x40
 800736c:	e000      	b.n	8007370 <HAL_DMA_IRQHandler+0xb0>
 800736e:	2304      	movs	r3, #4
 8007370:	4a55      	ldr	r2, [pc, #340]	; (80074c8 <HAL_DMA_IRQHandler+0x208>)
 8007372:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007378:	2b00      	cmp	r3, #0
 800737a:	f000 8094 	beq.w	80074a6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8007386:	e08e      	b.n	80074a6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738c:	2202      	movs	r2, #2
 800738e:	409a      	lsls	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	4013      	ands	r3, r2
 8007394:	2b00      	cmp	r3, #0
 8007396:	d056      	beq.n	8007446 <HAL_DMA_IRQHandler+0x186>
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f003 0302 	and.w	r3, r3, #2
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d051      	beq.n	8007446 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f003 0320 	and.w	r3, r3, #32
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d10b      	bne.n	80073c8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	681a      	ldr	r2, [r3, #0]
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f022 020a 	bic.w	r2, r2, #10
 80073be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a38      	ldr	r2, [pc, #224]	; (80074b0 <HAL_DMA_IRQHandler+0x1f0>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d029      	beq.n	8007426 <HAL_DMA_IRQHandler+0x166>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a37      	ldr	r2, [pc, #220]	; (80074b4 <HAL_DMA_IRQHandler+0x1f4>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d022      	beq.n	8007422 <HAL_DMA_IRQHandler+0x162>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a35      	ldr	r2, [pc, #212]	; (80074b8 <HAL_DMA_IRQHandler+0x1f8>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d01a      	beq.n	800741c <HAL_DMA_IRQHandler+0x15c>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a34      	ldr	r2, [pc, #208]	; (80074bc <HAL_DMA_IRQHandler+0x1fc>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d012      	beq.n	8007416 <HAL_DMA_IRQHandler+0x156>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a32      	ldr	r2, [pc, #200]	; (80074c0 <HAL_DMA_IRQHandler+0x200>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d00a      	beq.n	8007410 <HAL_DMA_IRQHandler+0x150>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a31      	ldr	r2, [pc, #196]	; (80074c4 <HAL_DMA_IRQHandler+0x204>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d102      	bne.n	800740a <HAL_DMA_IRQHandler+0x14a>
 8007404:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007408:	e00e      	b.n	8007428 <HAL_DMA_IRQHandler+0x168>
 800740a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800740e:	e00b      	b.n	8007428 <HAL_DMA_IRQHandler+0x168>
 8007410:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007414:	e008      	b.n	8007428 <HAL_DMA_IRQHandler+0x168>
 8007416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800741a:	e005      	b.n	8007428 <HAL_DMA_IRQHandler+0x168>
 800741c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007420:	e002      	b.n	8007428 <HAL_DMA_IRQHandler+0x168>
 8007422:	2320      	movs	r3, #32
 8007424:	e000      	b.n	8007428 <HAL_DMA_IRQHandler+0x168>
 8007426:	2302      	movs	r3, #2
 8007428:	4a27      	ldr	r2, [pc, #156]	; (80074c8 <HAL_DMA_IRQHandler+0x208>)
 800742a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007438:	2b00      	cmp	r3, #0
 800743a:	d034      	beq.n	80074a6 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007444:	e02f      	b.n	80074a6 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744a:	2208      	movs	r2, #8
 800744c:	409a      	lsls	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	4013      	ands	r3, r2
 8007452:	2b00      	cmp	r3, #0
 8007454:	d028      	beq.n	80074a8 <HAL_DMA_IRQHandler+0x1e8>
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	f003 0308 	and.w	r3, r3, #8
 800745c:	2b00      	cmp	r3, #0
 800745e:	d023      	beq.n	80074a8 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 020e 	bic.w	r2, r2, #14
 800746e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007478:	2101      	movs	r1, #1
 800747a:	fa01 f202 	lsl.w	r2, r1, r2
 800747e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2201      	movs	r2, #1
 8007484:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749a:	2b00      	cmp	r3, #0
 800749c:	d004      	beq.n	80074a8 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	4798      	blx	r3
    }
  }
  return;
 80074a6:	bf00      	nop
 80074a8:	bf00      	nop
}
 80074aa:	3710      	adds	r7, #16
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	40020008 	.word	0x40020008
 80074b4:	4002001c 	.word	0x4002001c
 80074b8:	40020030 	.word	0x40020030
 80074bc:	40020044 	.word	0x40020044
 80074c0:	40020058 	.word	0x40020058
 80074c4:	4002006c 	.word	0x4002006c
 80074c8:	40020000 	.word	0x40020000

080074cc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b085      	sub	sp, #20
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	607a      	str	r2, [r7, #4]
 80074d8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074e2:	2101      	movs	r1, #1
 80074e4:	fa01 f202 	lsl.w	r2, r1, r2
 80074e8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	2b10      	cmp	r3, #16
 80074f8:	d108      	bne.n	800750c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800750a:	e007      	b.n	800751c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68ba      	ldr	r2, [r7, #8]
 8007512:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	60da      	str	r2, [r3, #12]
}
 800751c:	bf00      	nop
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	bc80      	pop	{r7}
 8007524:	4770      	bx	lr
	...

08007528 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007528:	b480      	push	{r7}
 800752a:	b08b      	sub	sp, #44	; 0x2c
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
 8007530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007532:	2300      	movs	r3, #0
 8007534:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8007536:	2300      	movs	r3, #0
 8007538:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800753a:	e127      	b.n	800778c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800753c:	2201      	movs	r2, #1
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	fa02 f303 	lsl.w	r3, r2, r3
 8007544:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	69fa      	ldr	r2, [r7, #28]
 800754c:	4013      	ands	r3, r2
 800754e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8007550:	69ba      	ldr	r2, [r7, #24]
 8007552:	69fb      	ldr	r3, [r7, #28]
 8007554:	429a      	cmp	r2, r3
 8007556:	f040 8116 	bne.w	8007786 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	2b12      	cmp	r3, #18
 8007560:	d034      	beq.n	80075cc <HAL_GPIO_Init+0xa4>
 8007562:	2b12      	cmp	r3, #18
 8007564:	d80d      	bhi.n	8007582 <HAL_GPIO_Init+0x5a>
 8007566:	2b02      	cmp	r3, #2
 8007568:	d02b      	beq.n	80075c2 <HAL_GPIO_Init+0x9a>
 800756a:	2b02      	cmp	r3, #2
 800756c:	d804      	bhi.n	8007578 <HAL_GPIO_Init+0x50>
 800756e:	2b00      	cmp	r3, #0
 8007570:	d031      	beq.n	80075d6 <HAL_GPIO_Init+0xae>
 8007572:	2b01      	cmp	r3, #1
 8007574:	d01c      	beq.n	80075b0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8007576:	e048      	b.n	800760a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8007578:	2b03      	cmp	r3, #3
 800757a:	d043      	beq.n	8007604 <HAL_GPIO_Init+0xdc>
 800757c:	2b11      	cmp	r3, #17
 800757e:	d01b      	beq.n	80075b8 <HAL_GPIO_Init+0x90>
          break;
 8007580:	e043      	b.n	800760a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8007582:	4a89      	ldr	r2, [pc, #548]	; (80077a8 <HAL_GPIO_Init+0x280>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d026      	beq.n	80075d6 <HAL_GPIO_Init+0xae>
 8007588:	4a87      	ldr	r2, [pc, #540]	; (80077a8 <HAL_GPIO_Init+0x280>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d806      	bhi.n	800759c <HAL_GPIO_Init+0x74>
 800758e:	4a87      	ldr	r2, [pc, #540]	; (80077ac <HAL_GPIO_Init+0x284>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d020      	beq.n	80075d6 <HAL_GPIO_Init+0xae>
 8007594:	4a86      	ldr	r2, [pc, #536]	; (80077b0 <HAL_GPIO_Init+0x288>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d01d      	beq.n	80075d6 <HAL_GPIO_Init+0xae>
          break;
 800759a:	e036      	b.n	800760a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800759c:	4a85      	ldr	r2, [pc, #532]	; (80077b4 <HAL_GPIO_Init+0x28c>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d019      	beq.n	80075d6 <HAL_GPIO_Init+0xae>
 80075a2:	4a85      	ldr	r2, [pc, #532]	; (80077b8 <HAL_GPIO_Init+0x290>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d016      	beq.n	80075d6 <HAL_GPIO_Init+0xae>
 80075a8:	4a84      	ldr	r2, [pc, #528]	; (80077bc <HAL_GPIO_Init+0x294>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d013      	beq.n	80075d6 <HAL_GPIO_Init+0xae>
          break;
 80075ae:	e02c      	b.n	800760a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	623b      	str	r3, [r7, #32]
          break;
 80075b6:	e028      	b.n	800760a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	68db      	ldr	r3, [r3, #12]
 80075bc:	3304      	adds	r3, #4
 80075be:	623b      	str	r3, [r7, #32]
          break;
 80075c0:	e023      	b.n	800760a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	3308      	adds	r3, #8
 80075c8:	623b      	str	r3, [r7, #32]
          break;
 80075ca:	e01e      	b.n	800760a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	330c      	adds	r3, #12
 80075d2:	623b      	str	r3, [r7, #32]
          break;
 80075d4:	e019      	b.n	800760a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d102      	bne.n	80075e4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80075de:	2304      	movs	r3, #4
 80075e0:	623b      	str	r3, [r7, #32]
          break;
 80075e2:	e012      	b.n	800760a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	2b01      	cmp	r3, #1
 80075ea:	d105      	bne.n	80075f8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80075ec:	2308      	movs	r3, #8
 80075ee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	69fa      	ldr	r2, [r7, #28]
 80075f4:	611a      	str	r2, [r3, #16]
          break;
 80075f6:	e008      	b.n	800760a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80075f8:	2308      	movs	r3, #8
 80075fa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	69fa      	ldr	r2, [r7, #28]
 8007600:	615a      	str	r2, [r3, #20]
          break;
 8007602:	e002      	b.n	800760a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8007604:	2300      	movs	r3, #0
 8007606:	623b      	str	r3, [r7, #32]
          break;
 8007608:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800760a:	69bb      	ldr	r3, [r7, #24]
 800760c:	2bff      	cmp	r3, #255	; 0xff
 800760e:	d801      	bhi.n	8007614 <HAL_GPIO_Init+0xec>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	e001      	b.n	8007618 <HAL_GPIO_Init+0xf0>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3304      	adds	r3, #4
 8007618:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	2bff      	cmp	r3, #255	; 0xff
 800761e:	d802      	bhi.n	8007626 <HAL_GPIO_Init+0xfe>
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	009b      	lsls	r3, r3, #2
 8007624:	e002      	b.n	800762c <HAL_GPIO_Init+0x104>
 8007626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007628:	3b08      	subs	r3, #8
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	210f      	movs	r1, #15
 8007634:	693b      	ldr	r3, [r7, #16]
 8007636:	fa01 f303 	lsl.w	r3, r1, r3
 800763a:	43db      	mvns	r3, r3
 800763c:	401a      	ands	r2, r3
 800763e:	6a39      	ldr	r1, [r7, #32]
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	fa01 f303 	lsl.w	r3, r1, r3
 8007646:	431a      	orrs	r2, r3
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007654:	2b00      	cmp	r3, #0
 8007656:	f000 8096 	beq.w	8007786 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800765a:	4b59      	ldr	r3, [pc, #356]	; (80077c0 <HAL_GPIO_Init+0x298>)
 800765c:	699b      	ldr	r3, [r3, #24]
 800765e:	4a58      	ldr	r2, [pc, #352]	; (80077c0 <HAL_GPIO_Init+0x298>)
 8007660:	f043 0301 	orr.w	r3, r3, #1
 8007664:	6193      	str	r3, [r2, #24]
 8007666:	4b56      	ldr	r3, [pc, #344]	; (80077c0 <HAL_GPIO_Init+0x298>)
 8007668:	699b      	ldr	r3, [r3, #24]
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	60bb      	str	r3, [r7, #8]
 8007670:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8007672:	4a54      	ldr	r2, [pc, #336]	; (80077c4 <HAL_GPIO_Init+0x29c>)
 8007674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007676:	089b      	lsrs	r3, r3, #2
 8007678:	3302      	adds	r3, #2
 800767a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800767e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8007680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007682:	f003 0303 	and.w	r3, r3, #3
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	220f      	movs	r2, #15
 800768a:	fa02 f303 	lsl.w	r3, r2, r3
 800768e:	43db      	mvns	r3, r3
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	4013      	ands	r3, r2
 8007694:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a4b      	ldr	r2, [pc, #300]	; (80077c8 <HAL_GPIO_Init+0x2a0>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d013      	beq.n	80076c6 <HAL_GPIO_Init+0x19e>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	4a4a      	ldr	r2, [pc, #296]	; (80077cc <HAL_GPIO_Init+0x2a4>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d00d      	beq.n	80076c2 <HAL_GPIO_Init+0x19a>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	4a49      	ldr	r2, [pc, #292]	; (80077d0 <HAL_GPIO_Init+0x2a8>)
 80076aa:	4293      	cmp	r3, r2
 80076ac:	d007      	beq.n	80076be <HAL_GPIO_Init+0x196>
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	4a48      	ldr	r2, [pc, #288]	; (80077d4 <HAL_GPIO_Init+0x2ac>)
 80076b2:	4293      	cmp	r3, r2
 80076b4:	d101      	bne.n	80076ba <HAL_GPIO_Init+0x192>
 80076b6:	2303      	movs	r3, #3
 80076b8:	e006      	b.n	80076c8 <HAL_GPIO_Init+0x1a0>
 80076ba:	2304      	movs	r3, #4
 80076bc:	e004      	b.n	80076c8 <HAL_GPIO_Init+0x1a0>
 80076be:	2302      	movs	r3, #2
 80076c0:	e002      	b.n	80076c8 <HAL_GPIO_Init+0x1a0>
 80076c2:	2301      	movs	r3, #1
 80076c4:	e000      	b.n	80076c8 <HAL_GPIO_Init+0x1a0>
 80076c6:	2300      	movs	r3, #0
 80076c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ca:	f002 0203 	and.w	r2, r2, #3
 80076ce:	0092      	lsls	r2, r2, #2
 80076d0:	4093      	lsls	r3, r2
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	4313      	orrs	r3, r2
 80076d6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80076d8:	493a      	ldr	r1, [pc, #232]	; (80077c4 <HAL_GPIO_Init+0x29c>)
 80076da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076dc:	089b      	lsrs	r3, r3, #2
 80076de:	3302      	adds	r3, #2
 80076e0:	68fa      	ldr	r2, [r7, #12]
 80076e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	685b      	ldr	r3, [r3, #4]
 80076ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d006      	beq.n	8007700 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80076f2:	4b39      	ldr	r3, [pc, #228]	; (80077d8 <HAL_GPIO_Init+0x2b0>)
 80076f4:	681a      	ldr	r2, [r3, #0]
 80076f6:	4938      	ldr	r1, [pc, #224]	; (80077d8 <HAL_GPIO_Init+0x2b0>)
 80076f8:	69bb      	ldr	r3, [r7, #24]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	600b      	str	r3, [r1, #0]
 80076fe:	e006      	b.n	800770e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8007700:	4b35      	ldr	r3, [pc, #212]	; (80077d8 <HAL_GPIO_Init+0x2b0>)
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	43db      	mvns	r3, r3
 8007708:	4933      	ldr	r1, [pc, #204]	; (80077d8 <HAL_GPIO_Init+0x2b0>)
 800770a:	4013      	ands	r3, r2
 800770c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007716:	2b00      	cmp	r3, #0
 8007718:	d006      	beq.n	8007728 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800771a:	4b2f      	ldr	r3, [pc, #188]	; (80077d8 <HAL_GPIO_Init+0x2b0>)
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	492e      	ldr	r1, [pc, #184]	; (80077d8 <HAL_GPIO_Init+0x2b0>)
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	4313      	orrs	r3, r2
 8007724:	604b      	str	r3, [r1, #4]
 8007726:	e006      	b.n	8007736 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8007728:	4b2b      	ldr	r3, [pc, #172]	; (80077d8 <HAL_GPIO_Init+0x2b0>)
 800772a:	685a      	ldr	r2, [r3, #4]
 800772c:	69bb      	ldr	r3, [r7, #24]
 800772e:	43db      	mvns	r3, r3
 8007730:	4929      	ldr	r1, [pc, #164]	; (80077d8 <HAL_GPIO_Init+0x2b0>)
 8007732:	4013      	ands	r3, r2
 8007734:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	685b      	ldr	r3, [r3, #4]
 800773a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d006      	beq.n	8007750 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8007742:	4b25      	ldr	r3, [pc, #148]	; (80077d8 <HAL_GPIO_Init+0x2b0>)
 8007744:	689a      	ldr	r2, [r3, #8]
 8007746:	4924      	ldr	r1, [pc, #144]	; (80077d8 <HAL_GPIO_Init+0x2b0>)
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	4313      	orrs	r3, r2
 800774c:	608b      	str	r3, [r1, #8]
 800774e:	e006      	b.n	800775e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8007750:	4b21      	ldr	r3, [pc, #132]	; (80077d8 <HAL_GPIO_Init+0x2b0>)
 8007752:	689a      	ldr	r2, [r3, #8]
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	43db      	mvns	r3, r3
 8007758:	491f      	ldr	r1, [pc, #124]	; (80077d8 <HAL_GPIO_Init+0x2b0>)
 800775a:	4013      	ands	r3, r2
 800775c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d006      	beq.n	8007778 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800776a:	4b1b      	ldr	r3, [pc, #108]	; (80077d8 <HAL_GPIO_Init+0x2b0>)
 800776c:	68da      	ldr	r2, [r3, #12]
 800776e:	491a      	ldr	r1, [pc, #104]	; (80077d8 <HAL_GPIO_Init+0x2b0>)
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	4313      	orrs	r3, r2
 8007774:	60cb      	str	r3, [r1, #12]
 8007776:	e006      	b.n	8007786 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8007778:	4b17      	ldr	r3, [pc, #92]	; (80077d8 <HAL_GPIO_Init+0x2b0>)
 800777a:	68da      	ldr	r2, [r3, #12]
 800777c:	69bb      	ldr	r3, [r7, #24]
 800777e:	43db      	mvns	r3, r3
 8007780:	4915      	ldr	r1, [pc, #84]	; (80077d8 <HAL_GPIO_Init+0x2b0>)
 8007782:	4013      	ands	r3, r2
 8007784:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8007786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007788:	3301      	adds	r3, #1
 800778a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007792:	fa22 f303 	lsr.w	r3, r2, r3
 8007796:	2b00      	cmp	r3, #0
 8007798:	f47f aed0 	bne.w	800753c <HAL_GPIO_Init+0x14>
  }
}
 800779c:	bf00      	nop
 800779e:	372c      	adds	r7, #44	; 0x2c
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bc80      	pop	{r7}
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	10210000 	.word	0x10210000
 80077ac:	10110000 	.word	0x10110000
 80077b0:	10120000 	.word	0x10120000
 80077b4:	10310000 	.word	0x10310000
 80077b8:	10320000 	.word	0x10320000
 80077bc:	10220000 	.word	0x10220000
 80077c0:	40021000 	.word	0x40021000
 80077c4:	40010000 	.word	0x40010000
 80077c8:	40010800 	.word	0x40010800
 80077cc:	40010c00 	.word	0x40010c00
 80077d0:	40011000 	.word	0x40011000
 80077d4:	40011400 	.word	0x40011400
 80077d8:	40010400 	.word	0x40010400

080077dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	460b      	mov	r3, r1
 80077e6:	807b      	strh	r3, [r7, #2]
 80077e8:	4613      	mov	r3, r2
 80077ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80077ec:	787b      	ldrb	r3, [r7, #1]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80077f2:	887a      	ldrh	r2, [r7, #2]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80077f8:	e003      	b.n	8007802 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80077fa:	887b      	ldrh	r3, [r7, #2]
 80077fc:	041a      	lsls	r2, r3, #16
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	611a      	str	r2, [r3, #16]
}
 8007802:	bf00      	nop
 8007804:	370c      	adds	r7, #12
 8007806:	46bd      	mov	sp, r7
 8007808:	bc80      	pop	{r7}
 800780a:	4770      	bx	lr

0800780c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	460b      	mov	r3, r1
 8007816:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	68da      	ldr	r2, [r3, #12]
 800781c:	887b      	ldrh	r3, [r7, #2]
 800781e:	4013      	ands	r3, r2
 8007820:	2b00      	cmp	r3, #0
 8007822:	d003      	beq.n	800782c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007824:	887a      	ldrh	r2, [r7, #2]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800782a:	e002      	b.n	8007832 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800782c:	887a      	ldrh	r2, [r7, #2]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	611a      	str	r2, [r3, #16]
}
 8007832:	bf00      	nop
 8007834:	370c      	adds	r7, #12
 8007836:	46bd      	mov	sp, r7
 8007838:	bc80      	pop	{r7}
 800783a:	4770      	bx	lr

0800783c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	4603      	mov	r3, r0
 8007844:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8007846:	4b08      	ldr	r3, [pc, #32]	; (8007868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007848:	695a      	ldr	r2, [r3, #20]
 800784a:	88fb      	ldrh	r3, [r7, #6]
 800784c:	4013      	ands	r3, r2
 800784e:	2b00      	cmp	r3, #0
 8007850:	d006      	beq.n	8007860 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007852:	4a05      	ldr	r2, [pc, #20]	; (8007868 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007854:	88fb      	ldrh	r3, [r7, #6]
 8007856:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007858:	88fb      	ldrh	r3, [r7, #6]
 800785a:	4618      	mov	r0, r3
 800785c:	f000 f806 	bl	800786c <HAL_GPIO_EXTI_Callback>
  }
}
 8007860:	bf00      	nop
 8007862:	3708      	adds	r7, #8
 8007864:	46bd      	mov	sp, r7
 8007866:	bd80      	pop	{r7, pc}
 8007868:	40010400 	.word	0x40010400

0800786c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	4603      	mov	r3, r0
 8007874:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007876:	bf00      	nop
 8007878:	370c      	adds	r7, #12
 800787a:	46bd      	mov	sp, r7
 800787c:	bc80      	pop	{r7}
 800787e:	4770      	bx	lr

08007880 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d101      	bne.n	8007892 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800788e:	2301      	movs	r3, #1
 8007890:	e10f      	b.n	8007ab2 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d106      	bne.n	80078ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2200      	movs	r2, #0
 80078a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f7fc f84a 	bl	8003940 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2224      	movs	r2, #36	; 0x24
 80078b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f022 0201 	bic.w	r2, r2, #1
 80078c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80078c4:	f001 fc62 	bl	800918c <HAL_RCC_GetPCLK1Freq>
 80078c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	4a7b      	ldr	r2, [pc, #492]	; (8007abc <HAL_I2C_Init+0x23c>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d807      	bhi.n	80078e4 <HAL_I2C_Init+0x64>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	4a7a      	ldr	r2, [pc, #488]	; (8007ac0 <HAL_I2C_Init+0x240>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	bf94      	ite	ls
 80078dc:	2301      	movls	r3, #1
 80078de:	2300      	movhi	r3, #0
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	e006      	b.n	80078f2 <HAL_I2C_Init+0x72>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	4a77      	ldr	r2, [pc, #476]	; (8007ac4 <HAL_I2C_Init+0x244>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	bf94      	ite	ls
 80078ec:	2301      	movls	r3, #1
 80078ee:	2300      	movhi	r3, #0
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e0db      	b.n	8007ab2 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	4a72      	ldr	r2, [pc, #456]	; (8007ac8 <HAL_I2C_Init+0x248>)
 80078fe:	fba2 2303 	umull	r2, r3, r2, r3
 8007902:	0c9b      	lsrs	r3, r3, #18
 8007904:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	430a      	orrs	r2, r1
 8007918:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	6a1b      	ldr	r3, [r3, #32]
 8007920:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	4a64      	ldr	r2, [pc, #400]	; (8007abc <HAL_I2C_Init+0x23c>)
 800792a:	4293      	cmp	r3, r2
 800792c:	d802      	bhi.n	8007934 <HAL_I2C_Init+0xb4>
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	3301      	adds	r3, #1
 8007932:	e009      	b.n	8007948 <HAL_I2C_Init+0xc8>
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800793a:	fb02 f303 	mul.w	r3, r2, r3
 800793e:	4a63      	ldr	r2, [pc, #396]	; (8007acc <HAL_I2C_Init+0x24c>)
 8007940:	fba2 2303 	umull	r2, r3, r2, r3
 8007944:	099b      	lsrs	r3, r3, #6
 8007946:	3301      	adds	r3, #1
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	6812      	ldr	r2, [r2, #0]
 800794c:	430b      	orrs	r3, r1
 800794e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	69db      	ldr	r3, [r3, #28]
 8007956:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800795a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	4956      	ldr	r1, [pc, #344]	; (8007abc <HAL_I2C_Init+0x23c>)
 8007964:	428b      	cmp	r3, r1
 8007966:	d80d      	bhi.n	8007984 <HAL_I2C_Init+0x104>
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	1e59      	subs	r1, r3, #1
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	005b      	lsls	r3, r3, #1
 8007972:	fbb1 f3f3 	udiv	r3, r1, r3
 8007976:	3301      	adds	r3, #1
 8007978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800797c:	2b04      	cmp	r3, #4
 800797e:	bf38      	it	cc
 8007980:	2304      	movcc	r3, #4
 8007982:	e04f      	b.n	8007a24 <HAL_I2C_Init+0x1a4>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d111      	bne.n	80079b0 <HAL_I2C_Init+0x130>
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	1e58      	subs	r0, r3, #1
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6859      	ldr	r1, [r3, #4]
 8007994:	460b      	mov	r3, r1
 8007996:	005b      	lsls	r3, r3, #1
 8007998:	440b      	add	r3, r1
 800799a:	fbb0 f3f3 	udiv	r3, r0, r3
 800799e:	3301      	adds	r3, #1
 80079a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	bf0c      	ite	eq
 80079a8:	2301      	moveq	r3, #1
 80079aa:	2300      	movne	r3, #0
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	e012      	b.n	80079d6 <HAL_I2C_Init+0x156>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	1e58      	subs	r0, r3, #1
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6859      	ldr	r1, [r3, #4]
 80079b8:	460b      	mov	r3, r1
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	440b      	add	r3, r1
 80079be:	0099      	lsls	r1, r3, #2
 80079c0:	440b      	add	r3, r1
 80079c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80079c6:	3301      	adds	r3, #1
 80079c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	bf0c      	ite	eq
 80079d0:	2301      	moveq	r3, #1
 80079d2:	2300      	movne	r3, #0
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <HAL_I2C_Init+0x15e>
 80079da:	2301      	movs	r3, #1
 80079dc:	e022      	b.n	8007a24 <HAL_I2C_Init+0x1a4>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d10e      	bne.n	8007a04 <HAL_I2C_Init+0x184>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	1e58      	subs	r0, r3, #1
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6859      	ldr	r1, [r3, #4]
 80079ee:	460b      	mov	r3, r1
 80079f0:	005b      	lsls	r3, r3, #1
 80079f2:	440b      	add	r3, r1
 80079f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80079f8:	3301      	adds	r3, #1
 80079fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a02:	e00f      	b.n	8007a24 <HAL_I2C_Init+0x1a4>
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	1e58      	subs	r0, r3, #1
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6859      	ldr	r1, [r3, #4]
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	009b      	lsls	r3, r3, #2
 8007a10:	440b      	add	r3, r1
 8007a12:	0099      	lsls	r1, r3, #2
 8007a14:	440b      	add	r3, r1
 8007a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8007a1a:	3301      	adds	r3, #1
 8007a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a24:	6879      	ldr	r1, [r7, #4]
 8007a26:	6809      	ldr	r1, [r1, #0]
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	69da      	ldr	r2, [r3, #28]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	431a      	orrs	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	430a      	orrs	r2, r1
 8007a46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8007a52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	6911      	ldr	r1, [r2, #16]
 8007a5a:	687a      	ldr	r2, [r7, #4]
 8007a5c:	68d2      	ldr	r2, [r2, #12]
 8007a5e:	4311      	orrs	r1, r2
 8007a60:	687a      	ldr	r2, [r7, #4]
 8007a62:	6812      	ldr	r2, [r2, #0]
 8007a64:	430b      	orrs	r3, r1
 8007a66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	695a      	ldr	r2, [r3, #20]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	431a      	orrs	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	430a      	orrs	r2, r1
 8007a82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f042 0201 	orr.w	r2, r2, #1
 8007a92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2220      	movs	r2, #32
 8007a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	000186a0 	.word	0x000186a0
 8007ac0:	001e847f 	.word	0x001e847f
 8007ac4:	003d08ff 	.word	0x003d08ff
 8007ac8:	431bde83 	.word	0x431bde83
 8007acc:	10624dd3 	.word	0x10624dd3

08007ad0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b088      	sub	sp, #32
 8007ad4:	af02      	add	r7, sp, #8
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	4608      	mov	r0, r1
 8007ada:	4611      	mov	r1, r2
 8007adc:	461a      	mov	r2, r3
 8007ade:	4603      	mov	r3, r0
 8007ae0:	817b      	strh	r3, [r7, #10]
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	813b      	strh	r3, [r7, #8]
 8007ae6:	4613      	mov	r3, r2
 8007ae8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007aea:	f7ff f97f 	bl	8006dec <HAL_GetTick>
 8007aee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	2b20      	cmp	r3, #32
 8007afa:	f040 80d9 	bne.w	8007cb0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	2319      	movs	r3, #25
 8007b04:	2201      	movs	r2, #1
 8007b06:	496d      	ldr	r1, [pc, #436]	; (8007cbc <HAL_I2C_Mem_Write+0x1ec>)
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f000 fd8d 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d001      	beq.n	8007b18 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8007b14:	2302      	movs	r3, #2
 8007b16:	e0cc      	b.n	8007cb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d101      	bne.n	8007b26 <HAL_I2C_Mem_Write+0x56>
 8007b22:	2302      	movs	r3, #2
 8007b24:	e0c5      	b.n	8007cb2 <HAL_I2C_Mem_Write+0x1e2>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d007      	beq.n	8007b4c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	681a      	ldr	r2, [r3, #0]
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f042 0201 	orr.w	r2, r2, #1
 8007b4a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	681a      	ldr	r2, [r3, #0]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b5a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2221      	movs	r2, #33	; 0x21
 8007b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2240      	movs	r2, #64	; 0x40
 8007b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6a3a      	ldr	r2, [r7, #32]
 8007b76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b82:	b29a      	uxth	r2, r3
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	4a4d      	ldr	r2, [pc, #308]	; (8007cc0 <HAL_I2C_Mem_Write+0x1f0>)
 8007b8c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007b8e:	88f8      	ldrh	r0, [r7, #6]
 8007b90:	893a      	ldrh	r2, [r7, #8]
 8007b92:	8979      	ldrh	r1, [r7, #10]
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	9301      	str	r3, [sp, #4]
 8007b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b9a:	9300      	str	r3, [sp, #0]
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	f000 fbe8 	bl	8008374 <I2C_RequestMemoryWrite>
 8007ba4:	4603      	mov	r3, r0
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d052      	beq.n	8007c50 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8007baa:	2301      	movs	r3, #1
 8007bac:	e081      	b.n	8007cb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bae:	697a      	ldr	r2, [r7, #20]
 8007bb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f000 fe0e 	bl	80087d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d00d      	beq.n	8007bda <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc2:	2b04      	cmp	r3, #4
 8007bc4:	d107      	bne.n	8007bd6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bd4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e06b      	b.n	8007cb2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bde:	781a      	ldrb	r2, [r3, #0]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bea:	1c5a      	adds	r2, r3, #1
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	b29a      	uxth	r2, r3
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	3b01      	subs	r3, #1
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	695b      	ldr	r3, [r3, #20]
 8007c10:	f003 0304 	and.w	r3, r3, #4
 8007c14:	2b04      	cmp	r3, #4
 8007c16:	d11b      	bne.n	8007c50 <HAL_I2C_Mem_Write+0x180>
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d017      	beq.n	8007c50 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c24:	781a      	ldrb	r2, [r3, #0]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c30:	1c5a      	adds	r2, r3, #1
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c3a:	3b01      	subs	r3, #1
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d1aa      	bne.n	8007bae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c58:	697a      	ldr	r2, [r7, #20]
 8007c5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c5c:	68f8      	ldr	r0, [r7, #12]
 8007c5e:	f000 fdfa 	bl	8008856 <I2C_WaitOnBTFFlagUntilTimeout>
 8007c62:	4603      	mov	r3, r0
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00d      	beq.n	8007c84 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6c:	2b04      	cmp	r3, #4
 8007c6e:	d107      	bne.n	8007c80 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c7e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e016      	b.n	8007cb2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2220      	movs	r2, #32
 8007c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	e000      	b.n	8007cb2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8007cb0:	2302      	movs	r3, #2
  }
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3718      	adds	r7, #24
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	00100002 	.word	0x00100002
 8007cc0:	ffff0000 	.word	0xffff0000

08007cc4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b08c      	sub	sp, #48	; 0x30
 8007cc8:	af02      	add	r7, sp, #8
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	4608      	mov	r0, r1
 8007cce:	4611      	mov	r1, r2
 8007cd0:	461a      	mov	r2, r3
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	817b      	strh	r3, [r7, #10]
 8007cd6:	460b      	mov	r3, r1
 8007cd8:	813b      	strh	r3, [r7, #8]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007cde:	f7ff f885 	bl	8006dec <HAL_GetTick>
 8007ce2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	2b20      	cmp	r3, #32
 8007cee:	f040 8218 	bne.w	8008122 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf4:	9300      	str	r3, [sp, #0]
 8007cf6:	2319      	movs	r3, #25
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	4981      	ldr	r1, [pc, #516]	; (8007f00 <HAL_I2C_Mem_Read+0x23c>)
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	f000 fc93 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d001      	beq.n	8007d0c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007d08:	2302      	movs	r3, #2
 8007d0a:	e20b      	b.n	8008124 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d101      	bne.n	8007d1a <HAL_I2C_Mem_Read+0x56>
 8007d16:	2302      	movs	r3, #2
 8007d18:	e204      	b.n	8008124 <HAL_I2C_Mem_Read+0x460>
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d007      	beq.n	8007d40 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681a      	ldr	r2, [r3, #0]
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f042 0201 	orr.w	r2, r2, #1
 8007d3e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	681a      	ldr	r2, [r3, #0]
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d4e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2222      	movs	r2, #34	; 0x22
 8007d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2240      	movs	r2, #64	; 0x40
 8007d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d6a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007d70:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d76:	b29a      	uxth	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	4a61      	ldr	r2, [pc, #388]	; (8007f04 <HAL_I2C_Mem_Read+0x240>)
 8007d80:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007d82:	88f8      	ldrh	r0, [r7, #6]
 8007d84:	893a      	ldrh	r2, [r7, #8]
 8007d86:	8979      	ldrh	r1, [r7, #10]
 8007d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8a:	9301      	str	r3, [sp, #4]
 8007d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d8e:	9300      	str	r3, [sp, #0]
 8007d90:	4603      	mov	r3, r0
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f000 fb78 	bl	8008488 <I2C_RequestMemoryRead>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e1c0      	b.n	8008124 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d113      	bne.n	8007dd2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007daa:	2300      	movs	r3, #0
 8007dac:	623b      	str	r3, [r7, #32]
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	695b      	ldr	r3, [r3, #20]
 8007db4:	623b      	str	r3, [r7, #32]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	623b      	str	r3, [r7, #32]
 8007dbe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007dce:	601a      	str	r2, [r3, #0]
 8007dd0:	e194      	b.n	80080fc <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d11d      	bne.n	8007e16 <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007de8:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007dea:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dec:	2300      	movs	r3, #0
 8007dee:	61fb      	str	r3, [r7, #28]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	61fb      	str	r3, [r7, #28]
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	61fb      	str	r3, [r7, #28]
 8007e00:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e10:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007e12:	b662      	cpsie	i
 8007e14:	e172      	b.n	80080fc <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e1a:	2b02      	cmp	r3, #2
 8007e1c:	d11d      	bne.n	8007e5a <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e2c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e2e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e30:	2300      	movs	r3, #0
 8007e32:	61bb      	str	r3, [r7, #24]
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	695b      	ldr	r3, [r3, #20]
 8007e3a:	61bb      	str	r3, [r7, #24]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	61bb      	str	r3, [r7, #24]
 8007e44:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e54:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8007e56:	b662      	cpsie	i
 8007e58:	e150      	b.n	80080fc <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007e68:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	617b      	str	r3, [r7, #20]
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	695b      	ldr	r3, [r3, #20]
 8007e74:	617b      	str	r3, [r7, #20]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	699b      	ldr	r3, [r3, #24]
 8007e7c:	617b      	str	r3, [r7, #20]
 8007e7e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007e80:	e13c      	b.n	80080fc <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e86:	2b03      	cmp	r3, #3
 8007e88:	f200 80f5 	bhi.w	8008076 <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d123      	bne.n	8007edc <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f000 fd1d 	bl	80088d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e9e:	4603      	mov	r3, r0
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d001      	beq.n	8007ea8 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8007ea4:	2301      	movs	r3, #1
 8007ea6:	e13d      	b.n	8008124 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	691a      	ldr	r2, [r3, #16]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb2:	b2d2      	uxtb	r2, r2
 8007eb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eba:	1c5a      	adds	r2, r3, #1
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007eda:	e10f      	b.n	80080fc <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d150      	bne.n	8007f86 <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee6:	9300      	str	r3, [sp, #0]
 8007ee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eea:	2200      	movs	r2, #0
 8007eec:	4906      	ldr	r1, [pc, #24]	; (8007f08 <HAL_I2C_Mem_Read+0x244>)
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f000 fb9a 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 8007ef4:	4603      	mov	r3, r0
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d008      	beq.n	8007f0c <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e112      	b.n	8008124 <HAL_I2C_Mem_Read+0x460>
 8007efe:	bf00      	nop
 8007f00:	00100002 	.word	0x00100002
 8007f04:	ffff0000 	.word	0xffff0000
 8007f08:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8007f0c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681a      	ldr	r2, [r3, #0]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f1c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	691a      	ldr	r2, [r3, #16]
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f28:	b2d2      	uxtb	r2, r2
 8007f2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f30:	1c5a      	adds	r2, r3, #1
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	b29a      	uxth	r2, r3
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	b29a      	uxth	r2, r3
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8007f50:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	691a      	ldr	r2, [r3, #16]
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5c:	b2d2      	uxtb	r2, r2
 8007f5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f64:	1c5a      	adds	r2, r3, #1
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	b29a      	uxth	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f7a:	b29b      	uxth	r3, r3
 8007f7c:	3b01      	subs	r3, #1
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007f84:	e0ba      	b.n	80080fc <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f88:	9300      	str	r3, [sp, #0]
 8007f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	4967      	ldr	r1, [pc, #412]	; (800812c <HAL_I2C_Mem_Read+0x468>)
 8007f90:	68f8      	ldr	r0, [r7, #12]
 8007f92:	f000 fb49 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d001      	beq.n	8007fa0 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e0c1      	b.n	8008124 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8007fb0:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	691a      	ldr	r2, [r3, #16]
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbc:	b2d2      	uxtb	r2, r2
 8007fbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc4:	1c5a      	adds	r2, r3, #1
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	b29a      	uxth	r2, r3
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fda:	b29b      	uxth	r3, r3
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	b29a      	uxth	r2, r3
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fea:	2200      	movs	r2, #0
 8007fec:	494f      	ldr	r1, [pc, #316]	; (800812c <HAL_I2C_Mem_Read+0x468>)
 8007fee:	68f8      	ldr	r0, [r7, #12]
 8007ff0:	f000 fb1a 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d001      	beq.n	8007ffe <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e092      	b.n	8008124 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800800c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	691a      	ldr	r2, [r3, #16]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008018:	b2d2      	uxtb	r2, r2
 800801a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008020:	1c5a      	adds	r2, r3, #1
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800802a:	3b01      	subs	r3, #1
 800802c:	b29a      	uxth	r2, r3
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008036:	b29b      	uxth	r3, r3
 8008038:	3b01      	subs	r3, #1
 800803a:	b29a      	uxth	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8008040:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	691a      	ldr	r2, [r3, #16]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804c:	b2d2      	uxtb	r2, r2
 800804e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008054:	1c5a      	adds	r2, r3, #1
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800805e:	3b01      	subs	r3, #1
 8008060:	b29a      	uxth	r2, r3
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800806a:	b29b      	uxth	r3, r3
 800806c:	3b01      	subs	r3, #1
 800806e:	b29a      	uxth	r2, r3
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	855a      	strh	r2, [r3, #42]	; 0x2a
 8008074:	e042      	b.n	80080fc <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008076:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008078:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800807a:	68f8      	ldr	r0, [r7, #12]
 800807c:	f000 fc2c 	bl	80088d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8008086:	2301      	movs	r3, #1
 8008088:	e04c      	b.n	8008124 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	691a      	ldr	r2, [r3, #16]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008094:	b2d2      	uxtb	r2, r2
 8008096:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809c:	1c5a      	adds	r2, r3, #1
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080a6:	3b01      	subs	r3, #1
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	3b01      	subs	r3, #1
 80080b6:	b29a      	uxth	r2, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	695b      	ldr	r3, [r3, #20]
 80080c2:	f003 0304 	and.w	r3, r3, #4
 80080c6:	2b04      	cmp	r3, #4
 80080c8:	d118      	bne.n	80080fc <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	691a      	ldr	r2, [r3, #16]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d4:	b2d2      	uxtb	r2, r2
 80080d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080dc:	1c5a      	adds	r2, r3, #1
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080e6:	3b01      	subs	r3, #1
 80080e8:	b29a      	uxth	r2, r3
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	3b01      	subs	r3, #1
 80080f6:	b29a      	uxth	r2, r3
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008100:	2b00      	cmp	r3, #0
 8008102:	f47f aebe 	bne.w	8007e82 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2220      	movs	r2, #32
 800810a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800811e:	2300      	movs	r3, #0
 8008120:	e000      	b.n	8008124 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8008122:	2302      	movs	r3, #2
  }
}
 8008124:	4618      	mov	r0, r3
 8008126:	3728      	adds	r7, #40	; 0x28
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	00010004 	.word	0x00010004

08008130 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b08a      	sub	sp, #40	; 0x28
 8008134:	af02      	add	r7, sp, #8
 8008136:	60f8      	str	r0, [r7, #12]
 8008138:	607a      	str	r2, [r7, #4]
 800813a:	603b      	str	r3, [r7, #0]
 800813c:	460b      	mov	r3, r1
 800813e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8008140:	f7fe fe54 	bl	8006dec <HAL_GetTick>
 8008144:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8008146:	2301      	movs	r3, #1
 8008148:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008150:	b2db      	uxtb	r3, r3
 8008152:	2b20      	cmp	r3, #32
 8008154:	f040 8105 	bne.w	8008362 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	2319      	movs	r3, #25
 800815e:	2201      	movs	r2, #1
 8008160:	4982      	ldr	r1, [pc, #520]	; (800836c <HAL_I2C_IsDeviceReady+0x23c>)
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f000 fa60 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800816e:	2302      	movs	r3, #2
 8008170:	e0f8      	b.n	8008364 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008178:	2b01      	cmp	r3, #1
 800817a:	d101      	bne.n	8008180 <HAL_I2C_IsDeviceReady+0x50>
 800817c:	2302      	movs	r3, #2
 800817e:	e0f1      	b.n	8008364 <HAL_I2C_IsDeviceReady+0x234>
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 0301 	and.w	r3, r3, #1
 8008192:	2b01      	cmp	r3, #1
 8008194:	d007      	beq.n	80081a6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f042 0201 	orr.w	r2, r2, #1
 80081a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681a      	ldr	r2, [r3, #0]
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80081b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2224      	movs	r2, #36	; 0x24
 80081ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	4a6a      	ldr	r2, [pc, #424]	; (8008370 <HAL_I2C_IsDeviceReady+0x240>)
 80081c8:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80081d8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80081da:	69fb      	ldr	r3, [r7, #28]
 80081dc:	9300      	str	r3, [sp, #0]
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80081e6:	68f8      	ldr	r0, [r7, #12]
 80081e8:	f000 fa1e 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d001      	beq.n	80081f6 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e0b6      	b.n	8008364 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80081f6:	897b      	ldrh	r3, [r7, #10]
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	461a      	mov	r2, r3
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008204:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8008206:	f7fe fdf1 	bl	8006dec <HAL_GetTick>
 800820a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	695b      	ldr	r3, [r3, #20]
 8008212:	f003 0302 	and.w	r3, r3, #2
 8008216:	2b02      	cmp	r3, #2
 8008218:	bf0c      	ite	eq
 800821a:	2301      	moveq	r3, #1
 800821c:	2300      	movne	r3, #0
 800821e:	b2db      	uxtb	r3, r3
 8008220:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	695b      	ldr	r3, [r3, #20]
 8008228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800822c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008230:	bf0c      	ite	eq
 8008232:	2301      	moveq	r3, #1
 8008234:	2300      	movne	r3, #0
 8008236:	b2db      	uxtb	r3, r3
 8008238:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800823a:	e025      	b.n	8008288 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800823c:	f7fe fdd6 	bl	8006dec <HAL_GetTick>
 8008240:	4602      	mov	r2, r0
 8008242:	69fb      	ldr	r3, [r7, #28]
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	683a      	ldr	r2, [r7, #0]
 8008248:	429a      	cmp	r2, r3
 800824a:	d302      	bcc.n	8008252 <HAL_I2C_IsDeviceReady+0x122>
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d103      	bne.n	800825a <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	22a0      	movs	r2, #160	; 0xa0
 8008256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	695b      	ldr	r3, [r3, #20]
 8008260:	f003 0302 	and.w	r3, r3, #2
 8008264:	2b02      	cmp	r3, #2
 8008266:	bf0c      	ite	eq
 8008268:	2301      	moveq	r3, #1
 800826a:	2300      	movne	r3, #0
 800826c:	b2db      	uxtb	r3, r3
 800826e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	695b      	ldr	r3, [r3, #20]
 8008276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800827a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800827e:	bf0c      	ite	eq
 8008280:	2301      	moveq	r3, #1
 8008282:	2300      	movne	r3, #0
 8008284:	b2db      	uxtb	r3, r3
 8008286:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800828e:	b2db      	uxtb	r3, r3
 8008290:	2ba0      	cmp	r3, #160	; 0xa0
 8008292:	d005      	beq.n	80082a0 <HAL_I2C_IsDeviceReady+0x170>
 8008294:	7dfb      	ldrb	r3, [r7, #23]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d102      	bne.n	80082a0 <HAL_I2C_IsDeviceReady+0x170>
 800829a:	7dbb      	ldrb	r3, [r7, #22]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d0cd      	beq.n	800823c <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	2220      	movs	r2, #32
 80082a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	695b      	ldr	r3, [r3, #20]
 80082ae:	f003 0302 	and.w	r3, r3, #2
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d129      	bne.n	800830a <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082c4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80082c6:	2300      	movs	r3, #0
 80082c8:	613b      	str	r3, [r7, #16]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	695b      	ldr	r3, [r3, #20]
 80082d0:	613b      	str	r3, [r7, #16]
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	699b      	ldr	r3, [r3, #24]
 80082d8:	613b      	str	r3, [r7, #16]
 80082da:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80082dc:	69fb      	ldr	r3, [r7, #28]
 80082de:	9300      	str	r3, [sp, #0]
 80082e0:	2319      	movs	r3, #25
 80082e2:	2201      	movs	r2, #1
 80082e4:	4921      	ldr	r1, [pc, #132]	; (800836c <HAL_I2C_IsDeviceReady+0x23c>)
 80082e6:	68f8      	ldr	r0, [r7, #12]
 80082e8:	f000 f99e 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d001      	beq.n	80082f6 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e036      	b.n	8008364 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	2220      	movs	r2, #32
 80082fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2200      	movs	r2, #0
 8008302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8008306:	2300      	movs	r3, #0
 8008308:	e02c      	b.n	8008364 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008318:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008322:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008324:	69fb      	ldr	r3, [r7, #28]
 8008326:	9300      	str	r3, [sp, #0]
 8008328:	2319      	movs	r3, #25
 800832a:	2201      	movs	r2, #1
 800832c:	490f      	ldr	r1, [pc, #60]	; (800836c <HAL_I2C_IsDeviceReady+0x23c>)
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f000 f97a 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d001      	beq.n	800833e <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 800833a:	2301      	movs	r3, #1
 800833c:	e012      	b.n	8008364 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800833e:	69bb      	ldr	r3, [r7, #24]
 8008340:	3301      	adds	r3, #1
 8008342:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8008344:	69ba      	ldr	r2, [r7, #24]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	429a      	cmp	r2, r3
 800834a:	f4ff af3e 	bcc.w	80081ca <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2220      	movs	r2, #32
 8008352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	2200      	movs	r2, #0
 800835a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e000      	b.n	8008364 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8008362:	2302      	movs	r3, #2
  }
}
 8008364:	4618      	mov	r0, r3
 8008366:	3720      	adds	r7, #32
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}
 800836c:	00100002 	.word	0x00100002
 8008370:	ffff0000 	.word	0xffff0000

08008374 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b088      	sub	sp, #32
 8008378:	af02      	add	r7, sp, #8
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	4608      	mov	r0, r1
 800837e:	4611      	mov	r1, r2
 8008380:	461a      	mov	r2, r3
 8008382:	4603      	mov	r3, r0
 8008384:	817b      	strh	r3, [r7, #10]
 8008386:	460b      	mov	r3, r1
 8008388:	813b      	strh	r3, [r7, #8]
 800838a:	4613      	mov	r3, r2
 800838c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	681a      	ldr	r2, [r3, #0]
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800839c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800839e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a0:	9300      	str	r3, [sp, #0]
 80083a2:	6a3b      	ldr	r3, [r7, #32]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80083aa:	68f8      	ldr	r0, [r7, #12]
 80083ac:	f000 f93c 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d001      	beq.n	80083ba <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 80083b6:	2301      	movs	r3, #1
 80083b8:	e05f      	b.n	800847a <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80083ba:	897b      	ldrh	r3, [r7, #10]
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	461a      	mov	r2, r3
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80083c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80083ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083cc:	6a3a      	ldr	r2, [r7, #32]
 80083ce:	492d      	ldr	r1, [pc, #180]	; (8008484 <I2C_RequestMemoryWrite+0x110>)
 80083d0:	68f8      	ldr	r0, [r7, #12]
 80083d2:	f000 f980 	bl	80086d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d001      	beq.n	80083e0 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	e04c      	b.n	800847a <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80083e0:	2300      	movs	r3, #0
 80083e2:	617b      	str	r3, [r7, #20]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	695b      	ldr	r3, [r3, #20]
 80083ea:	617b      	str	r3, [r7, #20]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	617b      	str	r3, [r7, #20]
 80083f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80083f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083f8:	6a39      	ldr	r1, [r7, #32]
 80083fa:	68f8      	ldr	r0, [r7, #12]
 80083fc:	f000 f9ea 	bl	80087d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00d      	beq.n	8008422 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800840a:	2b04      	cmp	r3, #4
 800840c:	d107      	bne.n	800841e <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800841c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800841e:	2301      	movs	r3, #1
 8008420:	e02b      	b.n	800847a <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008422:	88fb      	ldrh	r3, [r7, #6]
 8008424:	2b01      	cmp	r3, #1
 8008426:	d105      	bne.n	8008434 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008428:	893b      	ldrh	r3, [r7, #8]
 800842a:	b2da      	uxtb	r2, r3
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	611a      	str	r2, [r3, #16]
 8008432:	e021      	b.n	8008478 <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008434:	893b      	ldrh	r3, [r7, #8]
 8008436:	0a1b      	lsrs	r3, r3, #8
 8008438:	b29b      	uxth	r3, r3
 800843a:	b2da      	uxtb	r2, r3
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008444:	6a39      	ldr	r1, [r7, #32]
 8008446:	68f8      	ldr	r0, [r7, #12]
 8008448:	f000 f9c4 	bl	80087d4 <I2C_WaitOnTXEFlagUntilTimeout>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00d      	beq.n	800846e <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008456:	2b04      	cmp	r3, #4
 8008458:	d107      	bne.n	800846a <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681a      	ldr	r2, [r3, #0]
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008468:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e005      	b.n	800847a <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800846e:	893b      	ldrh	r3, [r7, #8]
 8008470:	b2da      	uxtb	r2, r3
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	3718      	adds	r7, #24
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	00010002 	.word	0x00010002

08008488 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b088      	sub	sp, #32
 800848c:	af02      	add	r7, sp, #8
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	4608      	mov	r0, r1
 8008492:	4611      	mov	r1, r2
 8008494:	461a      	mov	r2, r3
 8008496:	4603      	mov	r3, r0
 8008498:	817b      	strh	r3, [r7, #10]
 800849a:	460b      	mov	r3, r1
 800849c:	813b      	strh	r3, [r7, #8]
 800849e:	4613      	mov	r3, r2
 80084a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80084b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	681a      	ldr	r2, [r3, #0]
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	9300      	str	r3, [sp, #0]
 80084c6:	6a3b      	ldr	r3, [r7, #32]
 80084c8:	2200      	movs	r2, #0
 80084ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f000 f8aa 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 80084d4:	4603      	mov	r3, r0
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d001      	beq.n	80084de <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 80084da:	2301      	movs	r3, #1
 80084dc:	e09e      	b.n	800861c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80084de:	897b      	ldrh	r3, [r7, #10]
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	461a      	mov	r2, r3
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80084ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80084ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f0:	6a3a      	ldr	r2, [r7, #32]
 80084f2:	494c      	ldr	r1, [pc, #304]	; (8008624 <I2C_RequestMemoryRead+0x19c>)
 80084f4:	68f8      	ldr	r0, [r7, #12]
 80084f6:	f000 f8ee 	bl	80086d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d001      	beq.n	8008504 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	e08b      	b.n	800861c <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008504:	2300      	movs	r3, #0
 8008506:	617b      	str	r3, [r7, #20]
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	695b      	ldr	r3, [r3, #20]
 800850e:	617b      	str	r3, [r7, #20]
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	699b      	ldr	r3, [r3, #24]
 8008516:	617b      	str	r3, [r7, #20]
 8008518:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800851a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800851c:	6a39      	ldr	r1, [r7, #32]
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	f000 f958 	bl	80087d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008524:	4603      	mov	r3, r0
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00d      	beq.n	8008546 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852e:	2b04      	cmp	r3, #4
 8008530:	d107      	bne.n	8008542 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008540:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e06a      	b.n	800861c <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008546:	88fb      	ldrh	r3, [r7, #6]
 8008548:	2b01      	cmp	r3, #1
 800854a:	d105      	bne.n	8008558 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800854c:	893b      	ldrh	r3, [r7, #8]
 800854e:	b2da      	uxtb	r2, r3
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	611a      	str	r2, [r3, #16]
 8008556:	e021      	b.n	800859c <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8008558:	893b      	ldrh	r3, [r7, #8]
 800855a:	0a1b      	lsrs	r3, r3, #8
 800855c:	b29b      	uxth	r3, r3
 800855e:	b2da      	uxtb	r2, r3
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008568:	6a39      	ldr	r1, [r7, #32]
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f000 f932 	bl	80087d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00d      	beq.n	8008592 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857a:	2b04      	cmp	r3, #4
 800857c:	d107      	bne.n	800858e <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800858c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	e044      	b.n	800861c <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008592:	893b      	ldrh	r3, [r7, #8]
 8008594:	b2da      	uxtb	r2, r3
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800859c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800859e:	6a39      	ldr	r1, [r7, #32]
 80085a0:	68f8      	ldr	r0, [r7, #12]
 80085a2:	f000 f917 	bl	80087d4 <I2C_WaitOnTXEFlagUntilTimeout>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00d      	beq.n	80085c8 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b0:	2b04      	cmp	r3, #4
 80085b2:	d107      	bne.n	80085c4 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80085c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	e029      	b.n	800861c <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80085d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085da:	9300      	str	r3, [sp, #0]
 80085dc:	6a3b      	ldr	r3, [r7, #32]
 80085de:	2200      	movs	r2, #0
 80085e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80085e4:	68f8      	ldr	r0, [r7, #12]
 80085e6:	f000 f81f 	bl	8008628 <I2C_WaitOnFlagUntilTimeout>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	e013      	b.n	800861c <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80085f4:	897b      	ldrh	r3, [r7, #10]
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	f043 0301 	orr.w	r3, r3, #1
 80085fc:	b2da      	uxtb	r2, r3
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008606:	6a3a      	ldr	r2, [r7, #32]
 8008608:	4906      	ldr	r1, [pc, #24]	; (8008624 <I2C_RequestMemoryRead+0x19c>)
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f000 f863 	bl	80086d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d001      	beq.n	800861a <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8008616:	2301      	movs	r3, #1
 8008618:	e000      	b.n	800861c <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 800861a:	2300      	movs	r3, #0
}
 800861c:	4618      	mov	r0, r3
 800861e:	3718      	adds	r7, #24
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}
 8008624:	00010002 	.word	0x00010002

08008628 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b084      	sub	sp, #16
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	603b      	str	r3, [r7, #0]
 8008634:	4613      	mov	r3, r2
 8008636:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008638:	e025      	b.n	8008686 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008640:	d021      	beq.n	8008686 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008642:	f7fe fbd3 	bl	8006dec <HAL_GetTick>
 8008646:	4602      	mov	r2, r0
 8008648:	69bb      	ldr	r3, [r7, #24]
 800864a:	1ad3      	subs	r3, r2, r3
 800864c:	683a      	ldr	r2, [r7, #0]
 800864e:	429a      	cmp	r2, r3
 8008650:	d302      	bcc.n	8008658 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d116      	bne.n	8008686 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2200      	movs	r2, #0
 800865c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2220      	movs	r2, #32
 8008662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2200      	movs	r2, #0
 800866a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008672:	f043 0220 	orr.w	r2, r3, #32
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e023      	b.n	80086ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	0c1b      	lsrs	r3, r3, #16
 800868a:	b2db      	uxtb	r3, r3
 800868c:	2b01      	cmp	r3, #1
 800868e:	d10d      	bne.n	80086ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	695b      	ldr	r3, [r3, #20]
 8008696:	43da      	mvns	r2, r3
 8008698:	68bb      	ldr	r3, [r7, #8]
 800869a:	4013      	ands	r3, r2
 800869c:	b29b      	uxth	r3, r3
 800869e:	2b00      	cmp	r3, #0
 80086a0:	bf0c      	ite	eq
 80086a2:	2301      	moveq	r3, #1
 80086a4:	2300      	movne	r3, #0
 80086a6:	b2db      	uxtb	r3, r3
 80086a8:	461a      	mov	r2, r3
 80086aa:	e00c      	b.n	80086c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	699b      	ldr	r3, [r3, #24]
 80086b2:	43da      	mvns	r2, r3
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	4013      	ands	r3, r2
 80086b8:	b29b      	uxth	r3, r3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	bf0c      	ite	eq
 80086be:	2301      	moveq	r3, #1
 80086c0:	2300      	movne	r3, #0
 80086c2:	b2db      	uxtb	r3, r3
 80086c4:	461a      	mov	r2, r3
 80086c6:	79fb      	ldrb	r3, [r7, #7]
 80086c8:	429a      	cmp	r2, r3
 80086ca:	d0b6      	beq.n	800863a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}

080086d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80086d6:	b580      	push	{r7, lr}
 80086d8:	b084      	sub	sp, #16
 80086da:	af00      	add	r7, sp, #0
 80086dc:	60f8      	str	r0, [r7, #12]
 80086de:	60b9      	str	r1, [r7, #8]
 80086e0:	607a      	str	r2, [r7, #4]
 80086e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80086e4:	e051      	b.n	800878a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	695b      	ldr	r3, [r3, #20]
 80086ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086f4:	d123      	bne.n	800873e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008704:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800870e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2220      	movs	r2, #32
 800871a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872a:	f043 0204 	orr.w	r2, r3, #4
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	2200      	movs	r2, #0
 8008736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	e046      	b.n	80087cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008744:	d021      	beq.n	800878a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008746:	f7fe fb51 	bl	8006dec <HAL_GetTick>
 800874a:	4602      	mov	r2, r0
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	1ad3      	subs	r3, r2, r3
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	429a      	cmp	r2, r3
 8008754:	d302      	bcc.n	800875c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d116      	bne.n	800878a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2220      	movs	r2, #32
 8008766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008776:	f043 0220 	orr.w	r2, r3, #32
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2200      	movs	r2, #0
 8008782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	e020      	b.n	80087cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	0c1b      	lsrs	r3, r3, #16
 800878e:	b2db      	uxtb	r3, r3
 8008790:	2b01      	cmp	r3, #1
 8008792:	d10c      	bne.n	80087ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	43da      	mvns	r2, r3
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	4013      	ands	r3, r2
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	bf14      	ite	ne
 80087a6:	2301      	movne	r3, #1
 80087a8:	2300      	moveq	r3, #0
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	e00b      	b.n	80087c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	699b      	ldr	r3, [r3, #24]
 80087b4:	43da      	mvns	r2, r3
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	4013      	ands	r3, r2
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	2b00      	cmp	r3, #0
 80087be:	bf14      	ite	ne
 80087c0:	2301      	movne	r3, #1
 80087c2:	2300      	moveq	r3, #0
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d18d      	bne.n	80086e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80087ca:	2300      	movs	r3, #0
}
 80087cc:	4618      	mov	r0, r3
 80087ce:	3710      	adds	r7, #16
 80087d0:	46bd      	mov	sp, r7
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b084      	sub	sp, #16
 80087d8:	af00      	add	r7, sp, #0
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80087e0:	e02d      	b.n	800883e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80087e2:	68f8      	ldr	r0, [r7, #12]
 80087e4:	f000 f8ce 	bl	8008984 <I2C_IsAcknowledgeFailed>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d001      	beq.n	80087f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e02d      	b.n	800884e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80087f8:	d021      	beq.n	800883e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087fa:	f7fe faf7 	bl	8006dec <HAL_GetTick>
 80087fe:	4602      	mov	r2, r0
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	68ba      	ldr	r2, [r7, #8]
 8008806:	429a      	cmp	r2, r3
 8008808:	d302      	bcc.n	8008810 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d116      	bne.n	800883e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2220      	movs	r2, #32
 800881a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2200      	movs	r2, #0
 8008822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800882a:	f043 0220 	orr.w	r2, r3, #32
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	e007      	b.n	800884e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	695b      	ldr	r3, [r3, #20]
 8008844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008848:	2b80      	cmp	r3, #128	; 0x80
 800884a:	d1ca      	bne.n	80087e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	60f8      	str	r0, [r7, #12]
 800885e:	60b9      	str	r1, [r7, #8]
 8008860:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008862:	e02d      	b.n	80088c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008864:	68f8      	ldr	r0, [r7, #12]
 8008866:	f000 f88d 	bl	8008984 <I2C_IsAcknowledgeFailed>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d001      	beq.n	8008874 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	e02d      	b.n	80088d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800887a:	d021      	beq.n	80088c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800887c:	f7fe fab6 	bl	8006dec <HAL_GetTick>
 8008880:	4602      	mov	r2, r0
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	68ba      	ldr	r2, [r7, #8]
 8008888:	429a      	cmp	r2, r3
 800888a:	d302      	bcc.n	8008892 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d116      	bne.n	80088c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2220      	movs	r2, #32
 800889c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ac:	f043 0220 	orr.w	r2, r3, #32
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	e007      	b.n	80088d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	695b      	ldr	r3, [r3, #20]
 80088c6:	f003 0304 	and.w	r3, r3, #4
 80088ca:	2b04      	cmp	r3, #4
 80088cc:	d1ca      	bne.n	8008864 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80088ce:	2300      	movs	r3, #0
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3710      	adds	r7, #16
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	60f8      	str	r0, [r7, #12]
 80088e0:	60b9      	str	r1, [r7, #8]
 80088e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80088e4:	e042      	b.n	800896c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	695b      	ldr	r3, [r3, #20]
 80088ec:	f003 0310 	and.w	r3, r3, #16
 80088f0:	2b10      	cmp	r3, #16
 80088f2:	d119      	bne.n	8008928 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f06f 0210 	mvn.w	r2, #16
 80088fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2220      	movs	r2, #32
 8008908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	2200      	movs	r2, #0
 8008910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	e029      	b.n	800897c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008928:	f7fe fa60 	bl	8006dec <HAL_GetTick>
 800892c:	4602      	mov	r2, r0
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	1ad3      	subs	r3, r2, r3
 8008932:	68ba      	ldr	r2, [r7, #8]
 8008934:	429a      	cmp	r2, r3
 8008936:	d302      	bcc.n	800893e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d116      	bne.n	800896c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2200      	movs	r2, #0
 8008942:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2220      	movs	r2, #32
 8008948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008958:	f043 0220 	orr.w	r2, r3, #32
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008968:	2301      	movs	r3, #1
 800896a:	e007      	b.n	800897c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	695b      	ldr	r3, [r3, #20]
 8008972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008976:	2b40      	cmp	r3, #64	; 0x40
 8008978:	d1b5      	bne.n	80088e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800897a:	2300      	movs	r3, #0
}
 800897c:	4618      	mov	r0, r3
 800897e:	3710      	adds	r7, #16
 8008980:	46bd      	mov	sp, r7
 8008982:	bd80      	pop	{r7, pc}

08008984 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	695b      	ldr	r3, [r3, #20]
 8008992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800899a:	d11b      	bne.n	80089d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80089a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2220      	movs	r2, #32
 80089b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c0:	f043 0204 	orr.w	r2, r3, #4
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2200      	movs	r2, #0
 80089cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80089d0:	2301      	movs	r3, #1
 80089d2:	e000      	b.n	80089d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	370c      	adds	r7, #12
 80089da:	46bd      	mov	sp, r7
 80089dc:	bc80      	pop	{r7}
 80089de:	4770      	bx	lr

080089e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d101      	bne.n	80089f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e26c      	b.n	8008ecc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f003 0301 	and.w	r3, r3, #1
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f000 8087 	beq.w	8008b0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008a00:	4b92      	ldr	r3, [pc, #584]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	f003 030c 	and.w	r3, r3, #12
 8008a08:	2b04      	cmp	r3, #4
 8008a0a:	d00c      	beq.n	8008a26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008a0c:	4b8f      	ldr	r3, [pc, #572]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	f003 030c 	and.w	r3, r3, #12
 8008a14:	2b08      	cmp	r3, #8
 8008a16:	d112      	bne.n	8008a3e <HAL_RCC_OscConfig+0x5e>
 8008a18:	4b8c      	ldr	r3, [pc, #560]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a24:	d10b      	bne.n	8008a3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a26:	4b89      	ldr	r3, [pc, #548]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d06c      	beq.n	8008b0c <HAL_RCC_OscConfig+0x12c>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d168      	bne.n	8008b0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e246      	b.n	8008ecc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a46:	d106      	bne.n	8008a56 <HAL_RCC_OscConfig+0x76>
 8008a48:	4b80      	ldr	r3, [pc, #512]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a7f      	ldr	r2, [pc, #508]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a52:	6013      	str	r3, [r2, #0]
 8008a54:	e02e      	b.n	8008ab4 <HAL_RCC_OscConfig+0xd4>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d10c      	bne.n	8008a78 <HAL_RCC_OscConfig+0x98>
 8008a5e:	4b7b      	ldr	r3, [pc, #492]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a7a      	ldr	r2, [pc, #488]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a68:	6013      	str	r3, [r2, #0]
 8008a6a:	4b78      	ldr	r3, [pc, #480]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a77      	ldr	r2, [pc, #476]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a74:	6013      	str	r3, [r2, #0]
 8008a76:	e01d      	b.n	8008ab4 <HAL_RCC_OscConfig+0xd4>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a80:	d10c      	bne.n	8008a9c <HAL_RCC_OscConfig+0xbc>
 8008a82:	4b72      	ldr	r3, [pc, #456]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a71      	ldr	r2, [pc, #452]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a8c:	6013      	str	r3, [r2, #0]
 8008a8e:	4b6f      	ldr	r3, [pc, #444]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a6e      	ldr	r2, [pc, #440]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a98:	6013      	str	r3, [r2, #0]
 8008a9a:	e00b      	b.n	8008ab4 <HAL_RCC_OscConfig+0xd4>
 8008a9c:	4b6b      	ldr	r3, [pc, #428]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a6a      	ldr	r2, [pc, #424]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008aa6:	6013      	str	r3, [r2, #0]
 8008aa8:	4b68      	ldr	r3, [pc, #416]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	4a67      	ldr	r2, [pc, #412]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ab2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d013      	beq.n	8008ae4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008abc:	f7fe f996 	bl	8006dec <HAL_GetTick>
 8008ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ac2:	e008      	b.n	8008ad6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ac4:	f7fe f992 	bl	8006dec <HAL_GetTick>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	1ad3      	subs	r3, r2, r3
 8008ace:	2b64      	cmp	r3, #100	; 0x64
 8008ad0:	d901      	bls.n	8008ad6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	e1fa      	b.n	8008ecc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ad6:	4b5d      	ldr	r3, [pc, #372]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d0f0      	beq.n	8008ac4 <HAL_RCC_OscConfig+0xe4>
 8008ae2:	e014      	b.n	8008b0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ae4:	f7fe f982 	bl	8006dec <HAL_GetTick>
 8008ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008aea:	e008      	b.n	8008afe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008aec:	f7fe f97e 	bl	8006dec <HAL_GetTick>
 8008af0:	4602      	mov	r2, r0
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	1ad3      	subs	r3, r2, r3
 8008af6:	2b64      	cmp	r3, #100	; 0x64
 8008af8:	d901      	bls.n	8008afe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8008afa:	2303      	movs	r3, #3
 8008afc:	e1e6      	b.n	8008ecc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008afe:	4b53      	ldr	r3, [pc, #332]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d1f0      	bne.n	8008aec <HAL_RCC_OscConfig+0x10c>
 8008b0a:	e000      	b.n	8008b0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	f003 0302 	and.w	r3, r3, #2
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d063      	beq.n	8008be2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008b1a:	4b4c      	ldr	r3, [pc, #304]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008b1c:	685b      	ldr	r3, [r3, #4]
 8008b1e:	f003 030c 	and.w	r3, r3, #12
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00b      	beq.n	8008b3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8008b26:	4b49      	ldr	r3, [pc, #292]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	f003 030c 	and.w	r3, r3, #12
 8008b2e:	2b08      	cmp	r3, #8
 8008b30:	d11c      	bne.n	8008b6c <HAL_RCC_OscConfig+0x18c>
 8008b32:	4b46      	ldr	r3, [pc, #280]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d116      	bne.n	8008b6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b3e:	4b43      	ldr	r3, [pc, #268]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 0302 	and.w	r3, r3, #2
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d005      	beq.n	8008b56 <HAL_RCC_OscConfig+0x176>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d001      	beq.n	8008b56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8008b52:	2301      	movs	r3, #1
 8008b54:	e1ba      	b.n	8008ecc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b56:	4b3d      	ldr	r3, [pc, #244]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	695b      	ldr	r3, [r3, #20]
 8008b62:	00db      	lsls	r3, r3, #3
 8008b64:	4939      	ldr	r1, [pc, #228]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008b66:	4313      	orrs	r3, r2
 8008b68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008b6a:	e03a      	b.n	8008be2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d020      	beq.n	8008bb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b74:	4b36      	ldr	r3, [pc, #216]	; (8008c50 <HAL_RCC_OscConfig+0x270>)
 8008b76:	2201      	movs	r2, #1
 8008b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b7a:	f7fe f937 	bl	8006dec <HAL_GetTick>
 8008b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b80:	e008      	b.n	8008b94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b82:	f7fe f933 	bl	8006dec <HAL_GetTick>
 8008b86:	4602      	mov	r2, r0
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	1ad3      	subs	r3, r2, r3
 8008b8c:	2b02      	cmp	r3, #2
 8008b8e:	d901      	bls.n	8008b94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8008b90:	2303      	movs	r3, #3
 8008b92:	e19b      	b.n	8008ecc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b94:	4b2d      	ldr	r3, [pc, #180]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 0302 	and.w	r3, r3, #2
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d0f0      	beq.n	8008b82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ba0:	4b2a      	ldr	r3, [pc, #168]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	00db      	lsls	r3, r3, #3
 8008bae:	4927      	ldr	r1, [pc, #156]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	600b      	str	r3, [r1, #0]
 8008bb4:	e015      	b.n	8008be2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008bb6:	4b26      	ldr	r3, [pc, #152]	; (8008c50 <HAL_RCC_OscConfig+0x270>)
 8008bb8:	2200      	movs	r2, #0
 8008bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bbc:	f7fe f916 	bl	8006dec <HAL_GetTick>
 8008bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bc2:	e008      	b.n	8008bd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008bc4:	f7fe f912 	bl	8006dec <HAL_GetTick>
 8008bc8:	4602      	mov	r2, r0
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	1ad3      	subs	r3, r2, r3
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d901      	bls.n	8008bd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8008bd2:	2303      	movs	r3, #3
 8008bd4:	e17a      	b.n	8008ecc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008bd6:	4b1d      	ldr	r3, [pc, #116]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f003 0302 	and.w	r3, r3, #2
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1f0      	bne.n	8008bc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f003 0308 	and.w	r3, r3, #8
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d03a      	beq.n	8008c64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d019      	beq.n	8008c2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008bf6:	4b17      	ldr	r3, [pc, #92]	; (8008c54 <HAL_RCC_OscConfig+0x274>)
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008bfc:	f7fe f8f6 	bl	8006dec <HAL_GetTick>
 8008c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c02:	e008      	b.n	8008c16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c04:	f7fe f8f2 	bl	8006dec <HAL_GetTick>
 8008c08:	4602      	mov	r2, r0
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	1ad3      	subs	r3, r2, r3
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d901      	bls.n	8008c16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8008c12:	2303      	movs	r3, #3
 8008c14:	e15a      	b.n	8008ecc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008c16:	4b0d      	ldr	r3, [pc, #52]	; (8008c4c <HAL_RCC_OscConfig+0x26c>)
 8008c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1a:	f003 0302 	and.w	r3, r3, #2
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d0f0      	beq.n	8008c04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8008c22:	2001      	movs	r0, #1
 8008c24:	f000 fada 	bl	80091dc <RCC_Delay>
 8008c28:	e01c      	b.n	8008c64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c2a:	4b0a      	ldr	r3, [pc, #40]	; (8008c54 <HAL_RCC_OscConfig+0x274>)
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008c30:	f7fe f8dc 	bl	8006dec <HAL_GetTick>
 8008c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c36:	e00f      	b.n	8008c58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c38:	f7fe f8d8 	bl	8006dec <HAL_GetTick>
 8008c3c:	4602      	mov	r2, r0
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	1ad3      	subs	r3, r2, r3
 8008c42:	2b02      	cmp	r3, #2
 8008c44:	d908      	bls.n	8008c58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8008c46:	2303      	movs	r3, #3
 8008c48:	e140      	b.n	8008ecc <HAL_RCC_OscConfig+0x4ec>
 8008c4a:	bf00      	nop
 8008c4c:	40021000 	.word	0x40021000
 8008c50:	42420000 	.word	0x42420000
 8008c54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008c58:	4b9e      	ldr	r3, [pc, #632]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c5c:	f003 0302 	and.w	r3, r3, #2
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d1e9      	bne.n	8008c38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	f003 0304 	and.w	r3, r3, #4
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f000 80a6 	beq.w	8008dbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c72:	2300      	movs	r3, #0
 8008c74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008c76:	4b97      	ldr	r3, [pc, #604]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008c78:	69db      	ldr	r3, [r3, #28]
 8008c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d10d      	bne.n	8008c9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c82:	4b94      	ldr	r3, [pc, #592]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008c84:	69db      	ldr	r3, [r3, #28]
 8008c86:	4a93      	ldr	r2, [pc, #588]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c8c:	61d3      	str	r3, [r2, #28]
 8008c8e:	4b91      	ldr	r3, [pc, #580]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008c90:	69db      	ldr	r3, [r3, #28]
 8008c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c96:	60bb      	str	r3, [r7, #8]
 8008c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c9e:	4b8e      	ldr	r3, [pc, #568]	; (8008ed8 <HAL_RCC_OscConfig+0x4f8>)
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d118      	bne.n	8008cdc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008caa:	4b8b      	ldr	r3, [pc, #556]	; (8008ed8 <HAL_RCC_OscConfig+0x4f8>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a8a      	ldr	r2, [pc, #552]	; (8008ed8 <HAL_RCC_OscConfig+0x4f8>)
 8008cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008cb6:	f7fe f899 	bl	8006dec <HAL_GetTick>
 8008cba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cbc:	e008      	b.n	8008cd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cbe:	f7fe f895 	bl	8006dec <HAL_GetTick>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	2b64      	cmp	r3, #100	; 0x64
 8008cca:	d901      	bls.n	8008cd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8008ccc:	2303      	movs	r3, #3
 8008cce:	e0fd      	b.n	8008ecc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008cd0:	4b81      	ldr	r3, [pc, #516]	; (8008ed8 <HAL_RCC_OscConfig+0x4f8>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d0f0      	beq.n	8008cbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d106      	bne.n	8008cf2 <HAL_RCC_OscConfig+0x312>
 8008ce4:	4b7b      	ldr	r3, [pc, #492]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008ce6:	6a1b      	ldr	r3, [r3, #32]
 8008ce8:	4a7a      	ldr	r2, [pc, #488]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008cea:	f043 0301 	orr.w	r3, r3, #1
 8008cee:	6213      	str	r3, [r2, #32]
 8008cf0:	e02d      	b.n	8008d4e <HAL_RCC_OscConfig+0x36e>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d10c      	bne.n	8008d14 <HAL_RCC_OscConfig+0x334>
 8008cfa:	4b76      	ldr	r3, [pc, #472]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008cfc:	6a1b      	ldr	r3, [r3, #32]
 8008cfe:	4a75      	ldr	r2, [pc, #468]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008d00:	f023 0301 	bic.w	r3, r3, #1
 8008d04:	6213      	str	r3, [r2, #32]
 8008d06:	4b73      	ldr	r3, [pc, #460]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008d08:	6a1b      	ldr	r3, [r3, #32]
 8008d0a:	4a72      	ldr	r2, [pc, #456]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008d0c:	f023 0304 	bic.w	r3, r3, #4
 8008d10:	6213      	str	r3, [r2, #32]
 8008d12:	e01c      	b.n	8008d4e <HAL_RCC_OscConfig+0x36e>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	68db      	ldr	r3, [r3, #12]
 8008d18:	2b05      	cmp	r3, #5
 8008d1a:	d10c      	bne.n	8008d36 <HAL_RCC_OscConfig+0x356>
 8008d1c:	4b6d      	ldr	r3, [pc, #436]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008d1e:	6a1b      	ldr	r3, [r3, #32]
 8008d20:	4a6c      	ldr	r2, [pc, #432]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008d22:	f043 0304 	orr.w	r3, r3, #4
 8008d26:	6213      	str	r3, [r2, #32]
 8008d28:	4b6a      	ldr	r3, [pc, #424]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008d2a:	6a1b      	ldr	r3, [r3, #32]
 8008d2c:	4a69      	ldr	r2, [pc, #420]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008d2e:	f043 0301 	orr.w	r3, r3, #1
 8008d32:	6213      	str	r3, [r2, #32]
 8008d34:	e00b      	b.n	8008d4e <HAL_RCC_OscConfig+0x36e>
 8008d36:	4b67      	ldr	r3, [pc, #412]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	4a66      	ldr	r2, [pc, #408]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008d3c:	f023 0301 	bic.w	r3, r3, #1
 8008d40:	6213      	str	r3, [r2, #32]
 8008d42:	4b64      	ldr	r3, [pc, #400]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008d44:	6a1b      	ldr	r3, [r3, #32]
 8008d46:	4a63      	ldr	r2, [pc, #396]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008d48:	f023 0304 	bic.w	r3, r3, #4
 8008d4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	68db      	ldr	r3, [r3, #12]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d015      	beq.n	8008d82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d56:	f7fe f849 	bl	8006dec <HAL_GetTick>
 8008d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d5c:	e00a      	b.n	8008d74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d5e:	f7fe f845 	bl	8006dec <HAL_GetTick>
 8008d62:	4602      	mov	r2, r0
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	1ad3      	subs	r3, r2, r3
 8008d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d901      	bls.n	8008d74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8008d70:	2303      	movs	r3, #3
 8008d72:	e0ab      	b.n	8008ecc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d74:	4b57      	ldr	r3, [pc, #348]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008d76:	6a1b      	ldr	r3, [r3, #32]
 8008d78:	f003 0302 	and.w	r3, r3, #2
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d0ee      	beq.n	8008d5e <HAL_RCC_OscConfig+0x37e>
 8008d80:	e014      	b.n	8008dac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d82:	f7fe f833 	bl	8006dec <HAL_GetTick>
 8008d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d88:	e00a      	b.n	8008da0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d8a:	f7fe f82f 	bl	8006dec <HAL_GetTick>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	1ad3      	subs	r3, r2, r3
 8008d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d901      	bls.n	8008da0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8008d9c:	2303      	movs	r3, #3
 8008d9e:	e095      	b.n	8008ecc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008da0:	4b4c      	ldr	r3, [pc, #304]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008da2:	6a1b      	ldr	r3, [r3, #32]
 8008da4:	f003 0302 	and.w	r3, r3, #2
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1ee      	bne.n	8008d8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8008dac:	7dfb      	ldrb	r3, [r7, #23]
 8008dae:	2b01      	cmp	r3, #1
 8008db0:	d105      	bne.n	8008dbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008db2:	4b48      	ldr	r3, [pc, #288]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008db4:	69db      	ldr	r3, [r3, #28]
 8008db6:	4a47      	ldr	r2, [pc, #284]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	69db      	ldr	r3, [r3, #28]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	f000 8081 	beq.w	8008eca <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008dc8:	4b42      	ldr	r3, [pc, #264]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	f003 030c 	and.w	r3, r3, #12
 8008dd0:	2b08      	cmp	r3, #8
 8008dd2:	d061      	beq.n	8008e98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	69db      	ldr	r3, [r3, #28]
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	d146      	bne.n	8008e6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ddc:	4b3f      	ldr	r3, [pc, #252]	; (8008edc <HAL_RCC_OscConfig+0x4fc>)
 8008dde:	2200      	movs	r2, #0
 8008de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008de2:	f7fe f803 	bl	8006dec <HAL_GetTick>
 8008de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008de8:	e008      	b.n	8008dfc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dea:	f7fd ffff 	bl	8006dec <HAL_GetTick>
 8008dee:	4602      	mov	r2, r0
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	1ad3      	subs	r3, r2, r3
 8008df4:	2b02      	cmp	r3, #2
 8008df6:	d901      	bls.n	8008dfc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	e067      	b.n	8008ecc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008dfc:	4b35      	ldr	r3, [pc, #212]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d1f0      	bne.n	8008dea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6a1b      	ldr	r3, [r3, #32]
 8008e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e10:	d108      	bne.n	8008e24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8008e12:	4b30      	ldr	r3, [pc, #192]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	492d      	ldr	r1, [pc, #180]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008e20:	4313      	orrs	r3, r2
 8008e22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008e24:	4b2b      	ldr	r3, [pc, #172]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6a19      	ldr	r1, [r3, #32]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e34:	430b      	orrs	r3, r1
 8008e36:	4927      	ldr	r1, [pc, #156]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008e3c:	4b27      	ldr	r3, [pc, #156]	; (8008edc <HAL_RCC_OscConfig+0x4fc>)
 8008e3e:	2201      	movs	r2, #1
 8008e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e42:	f7fd ffd3 	bl	8006dec <HAL_GetTick>
 8008e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008e48:	e008      	b.n	8008e5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e4a:	f7fd ffcf 	bl	8006dec <HAL_GetTick>
 8008e4e:	4602      	mov	r2, r0
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	1ad3      	subs	r3, r2, r3
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d901      	bls.n	8008e5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8008e58:	2303      	movs	r3, #3
 8008e5a:	e037      	b.n	8008ecc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008e5c:	4b1d      	ldr	r3, [pc, #116]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d0f0      	beq.n	8008e4a <HAL_RCC_OscConfig+0x46a>
 8008e68:	e02f      	b.n	8008eca <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e6a:	4b1c      	ldr	r3, [pc, #112]	; (8008edc <HAL_RCC_OscConfig+0x4fc>)
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008e70:	f7fd ffbc 	bl	8006dec <HAL_GetTick>
 8008e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008e76:	e008      	b.n	8008e8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e78:	f7fd ffb8 	bl	8006dec <HAL_GetTick>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	1ad3      	subs	r3, r2, r3
 8008e82:	2b02      	cmp	r3, #2
 8008e84:	d901      	bls.n	8008e8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8008e86:	2303      	movs	r3, #3
 8008e88:	e020      	b.n	8008ecc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008e8a:	4b12      	ldr	r3, [pc, #72]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1f0      	bne.n	8008e78 <HAL_RCC_OscConfig+0x498>
 8008e96:	e018      	b.n	8008eca <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	69db      	ldr	r3, [r3, #28]
 8008e9c:	2b01      	cmp	r3, #1
 8008e9e:	d101      	bne.n	8008ea4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e013      	b.n	8008ecc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008ea4:	4b0b      	ldr	r3, [pc, #44]	; (8008ed4 <HAL_RCC_OscConfig+0x4f4>)
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6a1b      	ldr	r3, [r3, #32]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d106      	bne.n	8008ec6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ec2:	429a      	cmp	r2, r3
 8008ec4:	d001      	beq.n	8008eca <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e000      	b.n	8008ecc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8008eca:	2300      	movs	r3, #0
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3718      	adds	r7, #24
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}
 8008ed4:	40021000 	.word	0x40021000
 8008ed8:	40007000 	.word	0x40007000
 8008edc:	42420060 	.word	0x42420060

08008ee0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d101      	bne.n	8008ef4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008ef0:	2301      	movs	r3, #1
 8008ef2:	e0d0      	b.n	8009096 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008ef4:	4b6a      	ldr	r3, [pc, #424]	; (80090a0 <HAL_RCC_ClockConfig+0x1c0>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 0307 	and.w	r3, r3, #7
 8008efc:	683a      	ldr	r2, [r7, #0]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d910      	bls.n	8008f24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f02:	4b67      	ldr	r3, [pc, #412]	; (80090a0 <HAL_RCC_ClockConfig+0x1c0>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f023 0207 	bic.w	r2, r3, #7
 8008f0a:	4965      	ldr	r1, [pc, #404]	; (80090a0 <HAL_RCC_ClockConfig+0x1c0>)
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f12:	4b63      	ldr	r3, [pc, #396]	; (80090a0 <HAL_RCC_ClockConfig+0x1c0>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f003 0307 	and.w	r3, r3, #7
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	d001      	beq.n	8008f24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8008f20:	2301      	movs	r3, #1
 8008f22:	e0b8      	b.n	8009096 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f003 0302 	and.w	r3, r3, #2
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d020      	beq.n	8008f72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	f003 0304 	and.w	r3, r3, #4
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d005      	beq.n	8008f48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008f3c:	4b59      	ldr	r3, [pc, #356]	; (80090a4 <HAL_RCC_ClockConfig+0x1c4>)
 8008f3e:	685b      	ldr	r3, [r3, #4]
 8008f40:	4a58      	ldr	r2, [pc, #352]	; (80090a4 <HAL_RCC_ClockConfig+0x1c4>)
 8008f42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008f46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f003 0308 	and.w	r3, r3, #8
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d005      	beq.n	8008f60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008f54:	4b53      	ldr	r3, [pc, #332]	; (80090a4 <HAL_RCC_ClockConfig+0x1c4>)
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	4a52      	ldr	r2, [pc, #328]	; (80090a4 <HAL_RCC_ClockConfig+0x1c4>)
 8008f5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8008f5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008f60:	4b50      	ldr	r3, [pc, #320]	; (80090a4 <HAL_RCC_ClockConfig+0x1c4>)
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	494d      	ldr	r1, [pc, #308]	; (80090a4 <HAL_RCC_ClockConfig+0x1c4>)
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 0301 	and.w	r3, r3, #1
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d040      	beq.n	8009000 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	2b01      	cmp	r3, #1
 8008f84:	d107      	bne.n	8008f96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f86:	4b47      	ldr	r3, [pc, #284]	; (80090a4 <HAL_RCC_ClockConfig+0x1c4>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d115      	bne.n	8008fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e07f      	b.n	8009096 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d107      	bne.n	8008fae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f9e:	4b41      	ldr	r3, [pc, #260]	; (80090a4 <HAL_RCC_ClockConfig+0x1c4>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d109      	bne.n	8008fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	e073      	b.n	8009096 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008fae:	4b3d      	ldr	r3, [pc, #244]	; (80090a4 <HAL_RCC_ClockConfig+0x1c4>)
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f003 0302 	and.w	r3, r3, #2
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d101      	bne.n	8008fbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	e06b      	b.n	8009096 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008fbe:	4b39      	ldr	r3, [pc, #228]	; (80090a4 <HAL_RCC_ClockConfig+0x1c4>)
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	f023 0203 	bic.w	r2, r3, #3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	4936      	ldr	r1, [pc, #216]	; (80090a4 <HAL_RCC_ClockConfig+0x1c4>)
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008fd0:	f7fd ff0c 	bl	8006dec <HAL_GetTick>
 8008fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fd6:	e00a      	b.n	8008fee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008fd8:	f7fd ff08 	bl	8006dec <HAL_GetTick>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	1ad3      	subs	r3, r2, r3
 8008fe2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d901      	bls.n	8008fee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008fea:	2303      	movs	r3, #3
 8008fec:	e053      	b.n	8009096 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008fee:	4b2d      	ldr	r3, [pc, #180]	; (80090a4 <HAL_RCC_ClockConfig+0x1c4>)
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	f003 020c 	and.w	r2, r3, #12
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	009b      	lsls	r3, r3, #2
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d1eb      	bne.n	8008fd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009000:	4b27      	ldr	r3, [pc, #156]	; (80090a0 <HAL_RCC_ClockConfig+0x1c0>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f003 0307 	and.w	r3, r3, #7
 8009008:	683a      	ldr	r2, [r7, #0]
 800900a:	429a      	cmp	r2, r3
 800900c:	d210      	bcs.n	8009030 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800900e:	4b24      	ldr	r3, [pc, #144]	; (80090a0 <HAL_RCC_ClockConfig+0x1c0>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f023 0207 	bic.w	r2, r3, #7
 8009016:	4922      	ldr	r1, [pc, #136]	; (80090a0 <HAL_RCC_ClockConfig+0x1c0>)
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	4313      	orrs	r3, r2
 800901c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800901e:	4b20      	ldr	r3, [pc, #128]	; (80090a0 <HAL_RCC_ClockConfig+0x1c0>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 0307 	and.w	r3, r3, #7
 8009026:	683a      	ldr	r2, [r7, #0]
 8009028:	429a      	cmp	r2, r3
 800902a:	d001      	beq.n	8009030 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	e032      	b.n	8009096 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 0304 	and.w	r3, r3, #4
 8009038:	2b00      	cmp	r3, #0
 800903a:	d008      	beq.n	800904e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800903c:	4b19      	ldr	r3, [pc, #100]	; (80090a4 <HAL_RCC_ClockConfig+0x1c4>)
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	4916      	ldr	r1, [pc, #88]	; (80090a4 <HAL_RCC_ClockConfig+0x1c4>)
 800904a:	4313      	orrs	r3, r2
 800904c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f003 0308 	and.w	r3, r3, #8
 8009056:	2b00      	cmp	r3, #0
 8009058:	d009      	beq.n	800906e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800905a:	4b12      	ldr	r3, [pc, #72]	; (80090a4 <HAL_RCC_ClockConfig+0x1c4>)
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	00db      	lsls	r3, r3, #3
 8009068:	490e      	ldr	r1, [pc, #56]	; (80090a4 <HAL_RCC_ClockConfig+0x1c4>)
 800906a:	4313      	orrs	r3, r2
 800906c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800906e:	f000 f821 	bl	80090b4 <HAL_RCC_GetSysClockFreq>
 8009072:	4601      	mov	r1, r0
 8009074:	4b0b      	ldr	r3, [pc, #44]	; (80090a4 <HAL_RCC_ClockConfig+0x1c4>)
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	091b      	lsrs	r3, r3, #4
 800907a:	f003 030f 	and.w	r3, r3, #15
 800907e:	4a0a      	ldr	r2, [pc, #40]	; (80090a8 <HAL_RCC_ClockConfig+0x1c8>)
 8009080:	5cd3      	ldrb	r3, [r2, r3]
 8009082:	fa21 f303 	lsr.w	r3, r1, r3
 8009086:	4a09      	ldr	r2, [pc, #36]	; (80090ac <HAL_RCC_ClockConfig+0x1cc>)
 8009088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800908a:	4b09      	ldr	r3, [pc, #36]	; (80090b0 <HAL_RCC_ClockConfig+0x1d0>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4618      	mov	r0, r3
 8009090:	f7fd fe6a 	bl	8006d68 <HAL_InitTick>

  return HAL_OK;
 8009094:	2300      	movs	r3, #0
}
 8009096:	4618      	mov	r0, r3
 8009098:	3710      	adds	r7, #16
 800909a:	46bd      	mov	sp, r7
 800909c:	bd80      	pop	{r7, pc}
 800909e:	bf00      	nop
 80090a0:	40022000 	.word	0x40022000
 80090a4:	40021000 	.word	0x40021000
 80090a8:	0800f33c 	.word	0x0800f33c
 80090ac:	2000003c 	.word	0x2000003c
 80090b0:	20000040 	.word	0x20000040

080090b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80090b4:	b490      	push	{r4, r7}
 80090b6:	b08a      	sub	sp, #40	; 0x28
 80090b8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80090ba:	4b2a      	ldr	r3, [pc, #168]	; (8009164 <HAL_RCC_GetSysClockFreq+0xb0>)
 80090bc:	1d3c      	adds	r4, r7, #4
 80090be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80090c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80090c4:	4b28      	ldr	r3, [pc, #160]	; (8009168 <HAL_RCC_GetSysClockFreq+0xb4>)
 80090c6:	881b      	ldrh	r3, [r3, #0]
 80090c8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80090ca:	2300      	movs	r3, #0
 80090cc:	61fb      	str	r3, [r7, #28]
 80090ce:	2300      	movs	r3, #0
 80090d0:	61bb      	str	r3, [r7, #24]
 80090d2:	2300      	movs	r3, #0
 80090d4:	627b      	str	r3, [r7, #36]	; 0x24
 80090d6:	2300      	movs	r3, #0
 80090d8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80090da:	2300      	movs	r3, #0
 80090dc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80090de:	4b23      	ldr	r3, [pc, #140]	; (800916c <HAL_RCC_GetSysClockFreq+0xb8>)
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80090e4:	69fb      	ldr	r3, [r7, #28]
 80090e6:	f003 030c 	and.w	r3, r3, #12
 80090ea:	2b04      	cmp	r3, #4
 80090ec:	d002      	beq.n	80090f4 <HAL_RCC_GetSysClockFreq+0x40>
 80090ee:	2b08      	cmp	r3, #8
 80090f0:	d003      	beq.n	80090fa <HAL_RCC_GetSysClockFreq+0x46>
 80090f2:	e02d      	b.n	8009150 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80090f4:	4b1e      	ldr	r3, [pc, #120]	; (8009170 <HAL_RCC_GetSysClockFreq+0xbc>)
 80090f6:	623b      	str	r3, [r7, #32]
      break;
 80090f8:	e02d      	b.n	8009156 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	0c9b      	lsrs	r3, r3, #18
 80090fe:	f003 030f 	and.w	r3, r3, #15
 8009102:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009106:	4413      	add	r3, r2
 8009108:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800910c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009114:	2b00      	cmp	r3, #0
 8009116:	d013      	beq.n	8009140 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8009118:	4b14      	ldr	r3, [pc, #80]	; (800916c <HAL_RCC_GetSysClockFreq+0xb8>)
 800911a:	685b      	ldr	r3, [r3, #4]
 800911c:	0c5b      	lsrs	r3, r3, #17
 800911e:	f003 0301 	and.w	r3, r3, #1
 8009122:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009126:	4413      	add	r3, r2
 8009128:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800912c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	4a0f      	ldr	r2, [pc, #60]	; (8009170 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009132:	fb02 f203 	mul.w	r2, r2, r3
 8009136:	69bb      	ldr	r3, [r7, #24]
 8009138:	fbb2 f3f3 	udiv	r3, r2, r3
 800913c:	627b      	str	r3, [r7, #36]	; 0x24
 800913e:	e004      	b.n	800914a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8009140:	697b      	ldr	r3, [r7, #20]
 8009142:	4a0c      	ldr	r2, [pc, #48]	; (8009174 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009144:	fb02 f303 	mul.w	r3, r2, r3
 8009148:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800914a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914c:	623b      	str	r3, [r7, #32]
      break;
 800914e:	e002      	b.n	8009156 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8009150:	4b07      	ldr	r3, [pc, #28]	; (8009170 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009152:	623b      	str	r3, [r7, #32]
      break;
 8009154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009156:	6a3b      	ldr	r3, [r7, #32]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3728      	adds	r7, #40	; 0x28
 800915c:	46bd      	mov	sp, r7
 800915e:	bc90      	pop	{r4, r7}
 8009160:	4770      	bx	lr
 8009162:	bf00      	nop
 8009164:	0800f320 	.word	0x0800f320
 8009168:	0800f330 	.word	0x0800f330
 800916c:	40021000 	.word	0x40021000
 8009170:	007a1200 	.word	0x007a1200
 8009174:	003d0900 	.word	0x003d0900

08009178 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009178:	b480      	push	{r7}
 800917a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800917c:	4b02      	ldr	r3, [pc, #8]	; (8009188 <HAL_RCC_GetHCLKFreq+0x10>)
 800917e:	681b      	ldr	r3, [r3, #0]
}
 8009180:	4618      	mov	r0, r3
 8009182:	46bd      	mov	sp, r7
 8009184:	bc80      	pop	{r7}
 8009186:	4770      	bx	lr
 8009188:	2000003c 	.word	0x2000003c

0800918c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009190:	f7ff fff2 	bl	8009178 <HAL_RCC_GetHCLKFreq>
 8009194:	4601      	mov	r1, r0
 8009196:	4b05      	ldr	r3, [pc, #20]	; (80091ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	0a1b      	lsrs	r3, r3, #8
 800919c:	f003 0307 	and.w	r3, r3, #7
 80091a0:	4a03      	ldr	r2, [pc, #12]	; (80091b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80091a2:	5cd3      	ldrb	r3, [r2, r3]
 80091a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	bd80      	pop	{r7, pc}
 80091ac:	40021000 	.word	0x40021000
 80091b0:	0800f34c 	.word	0x0800f34c

080091b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80091b8:	f7ff ffde 	bl	8009178 <HAL_RCC_GetHCLKFreq>
 80091bc:	4601      	mov	r1, r0
 80091be:	4b05      	ldr	r3, [pc, #20]	; (80091d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	0adb      	lsrs	r3, r3, #11
 80091c4:	f003 0307 	and.w	r3, r3, #7
 80091c8:	4a03      	ldr	r2, [pc, #12]	; (80091d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80091ca:	5cd3      	ldrb	r3, [r2, r3]
 80091cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	40021000 	.word	0x40021000
 80091d8:	0800f34c 	.word	0x0800f34c

080091dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80091e4:	4b0a      	ldr	r3, [pc, #40]	; (8009210 <RCC_Delay+0x34>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a0a      	ldr	r2, [pc, #40]	; (8009214 <RCC_Delay+0x38>)
 80091ea:	fba2 2303 	umull	r2, r3, r2, r3
 80091ee:	0a5b      	lsrs	r3, r3, #9
 80091f0:	687a      	ldr	r2, [r7, #4]
 80091f2:	fb02 f303 	mul.w	r3, r2, r3
 80091f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80091f8:	bf00      	nop
  }
  while (Delay --);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	1e5a      	subs	r2, r3, #1
 80091fe:	60fa      	str	r2, [r7, #12]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d1f9      	bne.n	80091f8 <RCC_Delay+0x1c>
}
 8009204:	bf00      	nop
 8009206:	3714      	adds	r7, #20
 8009208:	46bd      	mov	sp, r7
 800920a:	bc80      	pop	{r7}
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop
 8009210:	2000003c 	.word	0x2000003c
 8009214:	10624dd3 	.word	0x10624dd3

08009218 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d101      	bne.n	800922a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009226:	2301      	movs	r3, #1
 8009228:	e03f      	b.n	80092aa <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009230:	b2db      	uxtb	r3, r3
 8009232:	2b00      	cmp	r3, #0
 8009234:	d106      	bne.n	8009244 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f7fd fcac 	bl	8006b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2224      	movs	r2, #36	; 0x24
 8009248:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68da      	ldr	r2, [r3, #12]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800925a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 fc2d 	bl	8009abc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	691a      	ldr	r2, [r3, #16]
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009270:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	695a      	ldr	r2, [r3, #20]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009280:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	68da      	ldr	r2, [r3, #12]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009290:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2220      	movs	r2, #32
 800929c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2220      	movs	r2, #32
 80092a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
	...

080092b4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b086      	sub	sp, #24
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	4613      	mov	r3, r2
 80092c0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80092c8:	b2db      	uxtb	r3, r3
 80092ca:	2b20      	cmp	r3, #32
 80092cc:	d153      	bne.n	8009376 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d002      	beq.n	80092da <HAL_UART_Transmit_DMA+0x26>
 80092d4:	88fb      	ldrh	r3, [r7, #6]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d101      	bne.n	80092de <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	e04c      	b.n	8009378 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80092e4:	2b01      	cmp	r3, #1
 80092e6:	d101      	bne.n	80092ec <HAL_UART_Transmit_DMA+0x38>
 80092e8:	2302      	movs	r3, #2
 80092ea:	e045      	b.n	8009378 <HAL_UART_Transmit_DMA+0xc4>
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2201      	movs	r2, #1
 80092f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80092f4:	68ba      	ldr	r2, [r7, #8]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	88fa      	ldrh	r2, [r7, #6]
 80092fe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	88fa      	ldrh	r2, [r7, #6]
 8009304:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2200      	movs	r2, #0
 800930a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2221      	movs	r2, #33	; 0x21
 8009310:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009318:	4a19      	ldr	r2, [pc, #100]	; (8009380 <HAL_UART_Transmit_DMA+0xcc>)
 800931a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009320:	4a18      	ldr	r2, [pc, #96]	; (8009384 <HAL_UART_Transmit_DMA+0xd0>)
 8009322:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009328:	4a17      	ldr	r2, [pc, #92]	; (8009388 <HAL_UART_Transmit_DMA+0xd4>)
 800932a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009330:	2200      	movs	r2, #0
 8009332:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (uint32_t *)&pData;
 8009334:	f107 0308 	add.w	r3, r7, #8
 8009338:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	6819      	ldr	r1, [r3, #0]
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	3304      	adds	r3, #4
 8009348:	461a      	mov	r2, r3
 800934a:	88fb      	ldrh	r3, [r7, #6]
 800934c:	f7fd fee2 	bl	8007114 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009358:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	695a      	ldr	r2, [r3, #20]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009370:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8009372:	2300      	movs	r3, #0
 8009374:	e000      	b.n	8009378 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8009376:	2302      	movs	r3, #2
  }
}
 8009378:	4618      	mov	r0, r3
 800937a:	3718      	adds	r7, #24
 800937c:	46bd      	mov	sp, r7
 800937e:	bd80      	pop	{r7, pc}
 8009380:	080096cd 	.word	0x080096cd
 8009384:	0800971f 	.word	0x0800971f
 8009388:	080097bf 	.word	0x080097bf

0800938c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b086      	sub	sp, #24
 8009390:	af00      	add	r7, sp, #0
 8009392:	60f8      	str	r0, [r7, #12]
 8009394:	60b9      	str	r1, [r7, #8]
 8009396:	4613      	mov	r3, r2
 8009398:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	2b20      	cmp	r3, #32
 80093a4:	d166      	bne.n	8009474 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d002      	beq.n	80093b2 <HAL_UART_Receive_DMA+0x26>
 80093ac:	88fb      	ldrh	r3, [r7, #6]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d101      	bne.n	80093b6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e05f      	b.n	8009476 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80093bc:	2b01      	cmp	r3, #1
 80093be:	d101      	bne.n	80093c4 <HAL_UART_Receive_DMA+0x38>
 80093c0:	2302      	movs	r3, #2
 80093c2:	e058      	b.n	8009476 <HAL_UART_Receive_DMA+0xea>
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	88fa      	ldrh	r2, [r7, #6]
 80093d6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	2222      	movs	r2, #34	; 0x22
 80093e2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093ea:	4a25      	ldr	r2, [pc, #148]	; (8009480 <HAL_UART_Receive_DMA+0xf4>)
 80093ec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093f2:	4a24      	ldr	r2, [pc, #144]	; (8009484 <HAL_UART_Receive_DMA+0xf8>)
 80093f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093fa:	4a23      	ldr	r2, [pc, #140]	; (8009488 <HAL_UART_Receive_DMA+0xfc>)
 80093fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009402:	2200      	movs	r2, #0
 8009404:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8009406:	f107 0308 	add.w	r3, r7, #8
 800940a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	3304      	adds	r3, #4
 8009416:	4619      	mov	r1, r3
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	88fb      	ldrh	r3, [r7, #6]
 800941e:	f7fd fe79 	bl	8007114 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8009422:	2300      	movs	r3, #0
 8009424:	613b      	str	r3, [r7, #16]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	613b      	str	r3, [r7, #16]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	613b      	str	r3, [r7, #16]
 8009436:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2200      	movs	r2, #0
 800943c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68da      	ldr	r2, [r3, #12]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800944e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	695a      	ldr	r2, [r3, #20]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f042 0201 	orr.w	r2, r2, #1
 800945e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	695a      	ldr	r2, [r3, #20]
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800946e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8009470:	2300      	movs	r3, #0
 8009472:	e000      	b.n	8009476 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009474:	2302      	movs	r3, #2
  }
}
 8009476:	4618      	mov	r0, r3
 8009478:	3718      	adds	r7, #24
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	0800973b 	.word	0x0800973b
 8009484:	080097a3 	.word	0x080097a3
 8009488:	080097bf 	.word	0x080097bf

0800948c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b088      	sub	sp, #32
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	695b      	ldr	r3, [r3, #20]
 80094aa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80094ac:	2300      	movs	r3, #0
 80094ae:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80094b0:	2300      	movs	r3, #0
 80094b2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	f003 030f 	and.w	r3, r3, #15
 80094ba:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d10d      	bne.n	80094de <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80094c2:	69fb      	ldr	r3, [r7, #28]
 80094c4:	f003 0320 	and.w	r3, r3, #32
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d008      	beq.n	80094de <HAL_UART_IRQHandler+0x52>
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	f003 0320 	and.w	r3, r3, #32
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d003      	beq.n	80094de <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fa6e 	bl	80099b8 <UART_Receive_IT>
      return;
 80094dc:	e0cc      	b.n	8009678 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	f000 80ab 	beq.w	800963c <HAL_UART_IRQHandler+0x1b0>
 80094e6:	697b      	ldr	r3, [r7, #20]
 80094e8:	f003 0301 	and.w	r3, r3, #1
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d105      	bne.n	80094fc <HAL_UART_IRQHandler+0x70>
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f000 80a0 	beq.w	800963c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80094fc:	69fb      	ldr	r3, [r7, #28]
 80094fe:	f003 0301 	and.w	r3, r3, #1
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00a      	beq.n	800951c <HAL_UART_IRQHandler+0x90>
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800950c:	2b00      	cmp	r3, #0
 800950e:	d005      	beq.n	800951c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009514:	f043 0201 	orr.w	r2, r3, #1
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	f003 0304 	and.w	r3, r3, #4
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00a      	beq.n	800953c <HAL_UART_IRQHandler+0xb0>
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	f003 0301 	and.w	r3, r3, #1
 800952c:	2b00      	cmp	r3, #0
 800952e:	d005      	beq.n	800953c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009534:	f043 0202 	orr.w	r2, r3, #2
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	f003 0302 	and.w	r3, r3, #2
 8009542:	2b00      	cmp	r3, #0
 8009544:	d00a      	beq.n	800955c <HAL_UART_IRQHandler+0xd0>
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	f003 0301 	and.w	r3, r3, #1
 800954c:	2b00      	cmp	r3, #0
 800954e:	d005      	beq.n	800955c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009554:	f043 0204 	orr.w	r2, r3, #4
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800955c:	69fb      	ldr	r3, [r7, #28]
 800955e:	f003 0308 	and.w	r3, r3, #8
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00a      	beq.n	800957c <HAL_UART_IRQHandler+0xf0>
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	f003 0301 	and.w	r3, r3, #1
 800956c:	2b00      	cmp	r3, #0
 800956e:	d005      	beq.n	800957c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009574:	f043 0208 	orr.w	r2, r3, #8
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009580:	2b00      	cmp	r3, #0
 8009582:	d078      	beq.n	8009676 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009584:	69fb      	ldr	r3, [r7, #28]
 8009586:	f003 0320 	and.w	r3, r3, #32
 800958a:	2b00      	cmp	r3, #0
 800958c:	d007      	beq.n	800959e <HAL_UART_IRQHandler+0x112>
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	f003 0320 	and.w	r3, r3, #32
 8009594:	2b00      	cmp	r3, #0
 8009596:	d002      	beq.n	800959e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f000 fa0d 	bl	80099b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	695b      	ldr	r3, [r3, #20]
 80095a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	bf14      	ite	ne
 80095ac:	2301      	movne	r3, #1
 80095ae:	2300      	moveq	r3, #0
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095b8:	f003 0308 	and.w	r3, r3, #8
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d102      	bne.n	80095c6 <HAL_UART_IRQHandler+0x13a>
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d031      	beq.n	800962a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80095c6:	6878      	ldr	r0, [r7, #4]
 80095c8:	f000 f958 	bl	800987c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	695b      	ldr	r3, [r3, #20]
 80095d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d023      	beq.n	8009622 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	695a      	ldr	r2, [r3, #20]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095e8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d013      	beq.n	800961a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095f6:	4a22      	ldr	r2, [pc, #136]	; (8009680 <HAL_UART_IRQHandler+0x1f4>)
 80095f8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095fe:	4618      	mov	r0, r3
 8009600:	f7fd fde8 	bl	80071d4 <HAL_DMA_Abort_IT>
 8009604:	4603      	mov	r3, r0
 8009606:	2b00      	cmp	r3, #0
 8009608:	d016      	beq.n	8009638 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800960e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009614:	4610      	mov	r0, r2
 8009616:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009618:	e00e      	b.n	8009638 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 f84d 	bl	80096ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009620:	e00a      	b.n	8009638 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 f849 	bl	80096ba <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009628:	e006      	b.n	8009638 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f000 f845 	bl	80096ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8009636:	e01e      	b.n	8009676 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009638:	bf00      	nop
    return;
 800963a:	e01c      	b.n	8009676 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009642:	2b00      	cmp	r3, #0
 8009644:	d008      	beq.n	8009658 <HAL_UART_IRQHandler+0x1cc>
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800964c:	2b00      	cmp	r3, #0
 800964e:	d003      	beq.n	8009658 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 f944 	bl	80098de <UART_Transmit_IT>
    return;
 8009656:	e00f      	b.n	8009678 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800965e:	2b00      	cmp	r3, #0
 8009660:	d00a      	beq.n	8009678 <HAL_UART_IRQHandler+0x1ec>
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009668:	2b00      	cmp	r3, #0
 800966a:	d005      	beq.n	8009678 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 f98b 	bl	8009988 <UART_EndTransmit_IT>
    return;
 8009672:	bf00      	nop
 8009674:	e000      	b.n	8009678 <HAL_UART_IRQHandler+0x1ec>
    return;
 8009676:	bf00      	nop
  }
}
 8009678:	3720      	adds	r7, #32
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	080098b7 	.word	0x080098b7

08009684 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009684:	b480      	push	{r7}
 8009686:	b083      	sub	sp, #12
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800968c:	bf00      	nop
 800968e:	370c      	adds	r7, #12
 8009690:	46bd      	mov	sp, r7
 8009692:	bc80      	pop	{r7}
 8009694:	4770      	bx	lr

08009696 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009696:	b480      	push	{r7}
 8009698:	b083      	sub	sp, #12
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800969e:	bf00      	nop
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bc80      	pop	{r7}
 80096a6:	4770      	bx	lr

080096a8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b083      	sub	sp, #12
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bc80      	pop	{r7}
 80096b8:	4770      	bx	lr

080096ba <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80096ba:	b480      	push	{r7}
 80096bc:	b083      	sub	sp, #12
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80096c2:	bf00      	nop
 80096c4:	370c      	adds	r7, #12
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bc80      	pop	{r7}
 80096ca:	4770      	bx	lr

080096cc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b084      	sub	sp, #16
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f003 0320 	and.w	r3, r3, #32
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d113      	bne.n	8009710 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2200      	movs	r2, #0
 80096ec:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	695a      	ldr	r2, [r3, #20]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80096fc:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	68da      	ldr	r2, [r3, #12]
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800970c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800970e:	e002      	b.n	8009716 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8009710:	68f8      	ldr	r0, [r7, #12]
 8009712:	f7ff ffb7 	bl	8009684 <HAL_UART_TxCpltCallback>
}
 8009716:	bf00      	nop
 8009718:	3710      	adds	r7, #16
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}

0800971e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800971e:	b580      	push	{r7, lr}
 8009720:	b084      	sub	sp, #16
 8009722:	af00      	add	r7, sp, #0
 8009724:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800972c:	68f8      	ldr	r0, [r7, #12]
 800972e:	f7ff ffb2 	bl	8009696 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009732:	bf00      	nop
 8009734:	3710      	adds	r7, #16
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b084      	sub	sp, #16
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009746:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f003 0320 	and.w	r3, r3, #32
 8009752:	2b00      	cmp	r3, #0
 8009754:	d11e      	bne.n	8009794 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	2200      	movs	r2, #0
 800975a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	68da      	ldr	r2, [r3, #12]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800976a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	695a      	ldr	r2, [r3, #20]
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f022 0201 	bic.w	r2, r2, #1
 800977a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	695a      	ldr	r2, [r3, #20]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800978a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2220      	movs	r2, #32
 8009790:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8009794:	68f8      	ldr	r0, [r7, #12]
 8009796:	f7f9 fdf1 	bl	800337c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800979a:	bf00      	nop
 800979c:	3710      	adds	r7, #16
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}

080097a2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b084      	sub	sp, #16
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f7ff ff79 	bl	80096a8 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097b6:	bf00      	nop
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b084      	sub	sp, #16
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80097c6:	2300      	movs	r3, #0
 80097c8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ce:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	695b      	ldr	r3, [r3, #20]
 80097d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097da:	2b00      	cmp	r3, #0
 80097dc:	bf14      	ite	ne
 80097de:	2301      	movne	r3, #1
 80097e0:	2300      	moveq	r3, #0
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80097ec:	b2db      	uxtb	r3, r3
 80097ee:	2b21      	cmp	r3, #33	; 0x21
 80097f0:	d108      	bne.n	8009804 <UART_DMAError+0x46>
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d005      	beq.n	8009804 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	2200      	movs	r2, #0
 80097fc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80097fe:	68b8      	ldr	r0, [r7, #8]
 8009800:	f000 f827 	bl	8009852 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	695b      	ldr	r3, [r3, #20]
 800980a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800980e:	2b00      	cmp	r3, #0
 8009810:	bf14      	ite	ne
 8009812:	2301      	movne	r3, #1
 8009814:	2300      	moveq	r3, #0
 8009816:	b2db      	uxtb	r3, r3
 8009818:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009820:	b2db      	uxtb	r3, r3
 8009822:	2b22      	cmp	r3, #34	; 0x22
 8009824:	d108      	bne.n	8009838 <UART_DMAError+0x7a>
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d005      	beq.n	8009838 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	2200      	movs	r2, #0
 8009830:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009832:	68b8      	ldr	r0, [r7, #8]
 8009834:	f000 f822 	bl	800987c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800983c:	f043 0210 	orr.w	r2, r3, #16
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009844:	68b8      	ldr	r0, [r7, #8]
 8009846:	f7ff ff38 	bl	80096ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800984a:	bf00      	nop
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009852:	b480      	push	{r7}
 8009854:	b083      	sub	sp, #12
 8009856:	af00      	add	r7, sp, #0
 8009858:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	68da      	ldr	r2, [r3, #12]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8009868:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2220      	movs	r2, #32
 800986e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8009872:	bf00      	nop
 8009874:	370c      	adds	r7, #12
 8009876:	46bd      	mov	sp, r7
 8009878:	bc80      	pop	{r7}
 800987a:	4770      	bx	lr

0800987c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	68da      	ldr	r2, [r3, #12]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009892:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	695a      	ldr	r2, [r3, #20]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f022 0201 	bic.w	r2, r2, #1
 80098a2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2220      	movs	r2, #32
 80098a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80098ac:	bf00      	nop
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bc80      	pop	{r7}
 80098b4:	4770      	bx	lr

080098b6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098b6:	b580      	push	{r7, lr}
 80098b8:	b084      	sub	sp, #16
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098c2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2200      	movs	r2, #0
 80098c8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2200      	movs	r2, #0
 80098ce:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80098d0:	68f8      	ldr	r0, [r7, #12]
 80098d2:	f7ff fef2 	bl	80096ba <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098d6:	bf00      	nop
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}

080098de <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80098de:	b480      	push	{r7}
 80098e0:	b085      	sub	sp, #20
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	2b21      	cmp	r3, #33	; 0x21
 80098f0:	d144      	bne.n	800997c <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	689b      	ldr	r3, [r3, #8]
 80098f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098fa:	d11a      	bne.n	8009932 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6a1b      	ldr	r3, [r3, #32]
 8009900:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	881b      	ldrh	r3, [r3, #0]
 8009906:	461a      	mov	r2, r3
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009910:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d105      	bne.n	8009926 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6a1b      	ldr	r3, [r3, #32]
 800991e:	1c9a      	adds	r2, r3, #2
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	621a      	str	r2, [r3, #32]
 8009924:	e00e      	b.n	8009944 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a1b      	ldr	r3, [r3, #32]
 800992a:	1c5a      	adds	r2, r3, #1
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	621a      	str	r2, [r3, #32]
 8009930:	e008      	b.n	8009944 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6a1b      	ldr	r3, [r3, #32]
 8009936:	1c59      	adds	r1, r3, #1
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	6211      	str	r1, [r2, #32]
 800993c:	781a      	ldrb	r2, [r3, #0]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009948:	b29b      	uxth	r3, r3
 800994a:	3b01      	subs	r3, #1
 800994c:	b29b      	uxth	r3, r3
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	4619      	mov	r1, r3
 8009952:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009954:	2b00      	cmp	r3, #0
 8009956:	d10f      	bne.n	8009978 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	68da      	ldr	r2, [r3, #12]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009966:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	68da      	ldr	r2, [r3, #12]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009976:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009978:	2300      	movs	r3, #0
 800997a:	e000      	b.n	800997e <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800997c:	2302      	movs	r3, #2
  }
}
 800997e:	4618      	mov	r0, r3
 8009980:	3714      	adds	r7, #20
 8009982:	46bd      	mov	sp, r7
 8009984:	bc80      	pop	{r7}
 8009986:	4770      	bx	lr

08009988 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	68da      	ldr	r2, [r3, #12]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800999e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2220      	movs	r2, #32
 80099a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f7ff fe6b 	bl	8009684 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80099ae:	2300      	movs	r3, #0
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3708      	adds	r7, #8
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd80      	pop	{r7, pc}

080099b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	2b22      	cmp	r3, #34	; 0x22
 80099ca:	d171      	bne.n	8009ab0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	689b      	ldr	r3, [r3, #8]
 80099d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80099d4:	d123      	bne.n	8009a1e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099da:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	691b      	ldr	r3, [r3, #16]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d10e      	bne.n	8009a02 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	685b      	ldr	r3, [r3, #4]
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099f0:	b29a      	uxth	r2, r3
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099fa:	1c9a      	adds	r2, r3, #2
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	629a      	str	r2, [r3, #40]	; 0x28
 8009a00:	e029      	b.n	8009a56 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	b29a      	uxth	r2, r3
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a16:	1c5a      	adds	r2, r3, #1
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	629a      	str	r2, [r3, #40]	; 0x28
 8009a1c:	e01b      	b.n	8009a56 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d10a      	bne.n	8009a3c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	6858      	ldr	r0, [r3, #4]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a30:	1c59      	adds	r1, r3, #1
 8009a32:	687a      	ldr	r2, [r7, #4]
 8009a34:	6291      	str	r1, [r2, #40]	; 0x28
 8009a36:	b2c2      	uxtb	r2, r0
 8009a38:	701a      	strb	r2, [r3, #0]
 8009a3a:	e00c      	b.n	8009a56 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	685b      	ldr	r3, [r3, #4]
 8009a42:	b2da      	uxtb	r2, r3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a48:	1c58      	adds	r0, r3, #1
 8009a4a:	6879      	ldr	r1, [r7, #4]
 8009a4c:	6288      	str	r0, [r1, #40]	; 0x28
 8009a4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009a52:	b2d2      	uxtb	r2, r2
 8009a54:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	3b01      	subs	r3, #1
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	4619      	mov	r1, r3
 8009a64:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d120      	bne.n	8009aac <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	68da      	ldr	r2, [r3, #12]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f022 0220 	bic.w	r2, r2, #32
 8009a78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	68da      	ldr	r2, [r3, #12]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	695a      	ldr	r2, [r3, #20]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f022 0201 	bic.w	r2, r2, #1
 8009a98:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	2220      	movs	r2, #32
 8009a9e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f7f9 fc6a 	bl	800337c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	e002      	b.n	8009ab2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009aac:	2300      	movs	r3, #0
 8009aae:	e000      	b.n	8009ab2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009ab0:	2302      	movs	r3, #2
  }
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
	...

08009abc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b084      	sub	sp, #16
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	68da      	ldr	r2, [r3, #12]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	430a      	orrs	r2, r1
 8009ad8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	689a      	ldr	r2, [r3, #8]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	431a      	orrs	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	695b      	ldr	r3, [r3, #20]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8009af6:	f023 030c 	bic.w	r3, r3, #12
 8009afa:	687a      	ldr	r2, [r7, #4]
 8009afc:	6812      	ldr	r2, [r2, #0]
 8009afe:	68f9      	ldr	r1, [r7, #12]
 8009b00:	430b      	orrs	r3, r1
 8009b02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	695b      	ldr	r3, [r3, #20]
 8009b0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	699a      	ldr	r2, [r3, #24]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	430a      	orrs	r2, r1
 8009b18:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	4a52      	ldr	r2, [pc, #328]	; (8009c68 <UART_SetConfig+0x1ac>)
 8009b20:	4293      	cmp	r3, r2
 8009b22:	d14e      	bne.n	8009bc2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009b24:	f7ff fb46 	bl	80091b4 <HAL_RCC_GetPCLK2Freq>
 8009b28:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009b2a:	68ba      	ldr	r2, [r7, #8]
 8009b2c:	4613      	mov	r3, r2
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	4413      	add	r3, r2
 8009b32:	009a      	lsls	r2, r3, #2
 8009b34:	441a      	add	r2, r3
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b40:	4a4a      	ldr	r2, [pc, #296]	; (8009c6c <UART_SetConfig+0x1b0>)
 8009b42:	fba2 2303 	umull	r2, r3, r2, r3
 8009b46:	095b      	lsrs	r3, r3, #5
 8009b48:	0119      	lsls	r1, r3, #4
 8009b4a:	68ba      	ldr	r2, [r7, #8]
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	4413      	add	r3, r2
 8009b52:	009a      	lsls	r2, r3, #2
 8009b54:	441a      	add	r2, r3
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	685b      	ldr	r3, [r3, #4]
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b60:	4b42      	ldr	r3, [pc, #264]	; (8009c6c <UART_SetConfig+0x1b0>)
 8009b62:	fba3 0302 	umull	r0, r3, r3, r2
 8009b66:	095b      	lsrs	r3, r3, #5
 8009b68:	2064      	movs	r0, #100	; 0x64
 8009b6a:	fb00 f303 	mul.w	r3, r0, r3
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	011b      	lsls	r3, r3, #4
 8009b72:	3332      	adds	r3, #50	; 0x32
 8009b74:	4a3d      	ldr	r2, [pc, #244]	; (8009c6c <UART_SetConfig+0x1b0>)
 8009b76:	fba2 2303 	umull	r2, r3, r2, r3
 8009b7a:	095b      	lsrs	r3, r3, #5
 8009b7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009b80:	4419      	add	r1, r3
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	4613      	mov	r3, r2
 8009b86:	009b      	lsls	r3, r3, #2
 8009b88:	4413      	add	r3, r2
 8009b8a:	009a      	lsls	r2, r3, #2
 8009b8c:	441a      	add	r2, r3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	fbb2 f2f3 	udiv	r2, r2, r3
 8009b98:	4b34      	ldr	r3, [pc, #208]	; (8009c6c <UART_SetConfig+0x1b0>)
 8009b9a:	fba3 0302 	umull	r0, r3, r3, r2
 8009b9e:	095b      	lsrs	r3, r3, #5
 8009ba0:	2064      	movs	r0, #100	; 0x64
 8009ba2:	fb00 f303 	mul.w	r3, r0, r3
 8009ba6:	1ad3      	subs	r3, r2, r3
 8009ba8:	011b      	lsls	r3, r3, #4
 8009baa:	3332      	adds	r3, #50	; 0x32
 8009bac:	4a2f      	ldr	r2, [pc, #188]	; (8009c6c <UART_SetConfig+0x1b0>)
 8009bae:	fba2 2303 	umull	r2, r3, r2, r3
 8009bb2:	095b      	lsrs	r3, r3, #5
 8009bb4:	f003 020f 	and.w	r2, r3, #15
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	440a      	add	r2, r1
 8009bbe:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8009bc0:	e04d      	b.n	8009c5e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8009bc2:	f7ff fae3 	bl	800918c <HAL_RCC_GetPCLK1Freq>
 8009bc6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009bc8:	68ba      	ldr	r2, [r7, #8]
 8009bca:	4613      	mov	r3, r2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	4413      	add	r3, r2
 8009bd0:	009a      	lsls	r2, r3, #2
 8009bd2:	441a      	add	r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bde:	4a23      	ldr	r2, [pc, #140]	; (8009c6c <UART_SetConfig+0x1b0>)
 8009be0:	fba2 2303 	umull	r2, r3, r2, r3
 8009be4:	095b      	lsrs	r3, r3, #5
 8009be6:	0119      	lsls	r1, r3, #4
 8009be8:	68ba      	ldr	r2, [r7, #8]
 8009bea:	4613      	mov	r3, r2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	4413      	add	r3, r2
 8009bf0:	009a      	lsls	r2, r3, #2
 8009bf2:	441a      	add	r2, r3
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	685b      	ldr	r3, [r3, #4]
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8009bfe:	4b1b      	ldr	r3, [pc, #108]	; (8009c6c <UART_SetConfig+0x1b0>)
 8009c00:	fba3 0302 	umull	r0, r3, r3, r2
 8009c04:	095b      	lsrs	r3, r3, #5
 8009c06:	2064      	movs	r0, #100	; 0x64
 8009c08:	fb00 f303 	mul.w	r3, r0, r3
 8009c0c:	1ad3      	subs	r3, r2, r3
 8009c0e:	011b      	lsls	r3, r3, #4
 8009c10:	3332      	adds	r3, #50	; 0x32
 8009c12:	4a16      	ldr	r2, [pc, #88]	; (8009c6c <UART_SetConfig+0x1b0>)
 8009c14:	fba2 2303 	umull	r2, r3, r2, r3
 8009c18:	095b      	lsrs	r3, r3, #5
 8009c1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c1e:	4419      	add	r1, r3
 8009c20:	68ba      	ldr	r2, [r7, #8]
 8009c22:	4613      	mov	r3, r2
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	4413      	add	r3, r2
 8009c28:	009a      	lsls	r2, r3, #2
 8009c2a:	441a      	add	r2, r3
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	fbb2 f2f3 	udiv	r2, r2, r3
 8009c36:	4b0d      	ldr	r3, [pc, #52]	; (8009c6c <UART_SetConfig+0x1b0>)
 8009c38:	fba3 0302 	umull	r0, r3, r3, r2
 8009c3c:	095b      	lsrs	r3, r3, #5
 8009c3e:	2064      	movs	r0, #100	; 0x64
 8009c40:	fb00 f303 	mul.w	r3, r0, r3
 8009c44:	1ad3      	subs	r3, r2, r3
 8009c46:	011b      	lsls	r3, r3, #4
 8009c48:	3332      	adds	r3, #50	; 0x32
 8009c4a:	4a08      	ldr	r2, [pc, #32]	; (8009c6c <UART_SetConfig+0x1b0>)
 8009c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c50:	095b      	lsrs	r3, r3, #5
 8009c52:	f003 020f 	and.w	r2, r3, #15
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	440a      	add	r2, r1
 8009c5c:	609a      	str	r2, [r3, #8]
}
 8009c5e:	bf00      	nop
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}
 8009c66:	bf00      	nop
 8009c68:	40013800 	.word	0x40013800
 8009c6c:	51eb851f 	.word	0x51eb851f

08009c70 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b085      	sub	sp, #20
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	4603      	mov	r3, r0
 8009c78:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009c7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c82:	2b84      	cmp	r3, #132	; 0x84
 8009c84:	d005      	beq.n	8009c92 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009c86:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	4413      	add	r3, r2
 8009c8e:	3303      	adds	r3, #3
 8009c90:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009c92:	68fb      	ldr	r3, [r7, #12]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3714      	adds	r7, #20
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bc80      	pop	{r7}
 8009c9c:	4770      	bx	lr

08009c9e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009ca2:	f000 facd 	bl	800a240 <vTaskStartScheduler>
  
  return osOK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	bd80      	pop	{r7, pc}

08009cac <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cae:	b089      	sub	sp, #36	; 0x24
 8009cb0:	af04      	add	r7, sp, #16
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	695b      	ldr	r3, [r3, #20]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d020      	beq.n	8009d00 <osThreadCreate+0x54>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	699b      	ldr	r3, [r3, #24]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d01c      	beq.n	8009d00 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	685c      	ldr	r4, [r3, #4]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681d      	ldr	r5, [r3, #0]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	691e      	ldr	r6, [r3, #16]
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f7ff ffc9 	bl	8009c70 <makeFreeRtosPriority>
 8009cde:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	695b      	ldr	r3, [r3, #20]
 8009ce4:	687a      	ldr	r2, [r7, #4]
 8009ce6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009ce8:	9202      	str	r2, [sp, #8]
 8009cea:	9301      	str	r3, [sp, #4]
 8009cec:	9100      	str	r1, [sp, #0]
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	4632      	mov	r2, r6
 8009cf2:	4629      	mov	r1, r5
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f000 f8e8 	bl	8009eca <xTaskCreateStatic>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	60fb      	str	r3, [r7, #12]
 8009cfe:	e01c      	b.n	8009d3a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	685c      	ldr	r4, [r3, #4]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d0c:	b29e      	uxth	r6, r3
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009d14:	4618      	mov	r0, r3
 8009d16:	f7ff ffab 	bl	8009c70 <makeFreeRtosPriority>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	f107 030c 	add.w	r3, r7, #12
 8009d20:	9301      	str	r3, [sp, #4]
 8009d22:	9200      	str	r2, [sp, #0]
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	4632      	mov	r2, r6
 8009d28:	4629      	mov	r1, r5
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	f000 f926 	bl	8009f7c <xTaskCreate>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d001      	beq.n	8009d3a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009d36:	2300      	movs	r3, #0
 8009d38:	e000      	b.n	8009d3c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3714      	adds	r7, #20
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009d44 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d001      	beq.n	8009d5a <osDelay+0x16>
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	e000      	b.n	8009d5c <osDelay+0x18>
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f000 fa3b 	bl	800a1d8 <vTaskDelay>
  
  return osOK;
 8009d62:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009d64:	4618      	mov	r0, r3
 8009d66:	3710      	adds	r7, #16
 8009d68:	46bd      	mov	sp, r7
 8009d6a:	bd80      	pop	{r7, pc}

08009d6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	b083      	sub	sp, #12
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f103 0208 	add.w	r2, r3, #8
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009d84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	f103 0208 	add.w	r2, r3, #8
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	f103 0208 	add.w	r2, r3, #8
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009da0:	bf00      	nop
 8009da2:	370c      	adds	r7, #12
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bc80      	pop	{r7}
 8009da8:	4770      	bx	lr

08009daa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009daa:	b480      	push	{r7}
 8009dac:	b083      	sub	sp, #12
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2200      	movs	r2, #0
 8009db6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009db8:	bf00      	nop
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bc80      	pop	{r7}
 8009dc0:	4770      	bx	lr

08009dc2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009dc2:	b480      	push	{r7}
 8009dc4:	b085      	sub	sp, #20
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	6078      	str	r0, [r7, #4]
 8009dca:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	689a      	ldr	r2, [r3, #8]
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	683a      	ldr	r2, [r7, #0]
 8009de6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	683a      	ldr	r2, [r7, #0]
 8009dec:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	687a      	ldr	r2, [r7, #4]
 8009df2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	1c5a      	adds	r2, r3, #1
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	601a      	str	r2, [r3, #0]
}
 8009dfe:	bf00      	nop
 8009e00:	3714      	adds	r7, #20
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bc80      	pop	{r7}
 8009e06:	4770      	bx	lr

08009e08 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e08:	b480      	push	{r7}
 8009e0a:	b085      	sub	sp, #20
 8009e0c:	af00      	add	r7, sp, #0
 8009e0e:	6078      	str	r0, [r7, #4]
 8009e10:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e1e:	d103      	bne.n	8009e28 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	60fb      	str	r3, [r7, #12]
 8009e26:	e00c      	b.n	8009e42 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	3308      	adds	r3, #8
 8009e2c:	60fb      	str	r3, [r7, #12]
 8009e2e:	e002      	b.n	8009e36 <vListInsert+0x2e>
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	60fb      	str	r3, [r7, #12]
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	685b      	ldr	r3, [r3, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	68ba      	ldr	r2, [r7, #8]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d2f6      	bcs.n	8009e30 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	685a      	ldr	r2, [r3, #4]
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	683a      	ldr	r2, [r7, #0]
 8009e50:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	68fa      	ldr	r2, [r7, #12]
 8009e56:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	683a      	ldr	r2, [r7, #0]
 8009e5c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	1c5a      	adds	r2, r3, #1
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	601a      	str	r2, [r3, #0]
}
 8009e6e:	bf00      	nop
 8009e70:	3714      	adds	r7, #20
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bc80      	pop	{r7}
 8009e76:	4770      	bx	lr

08009e78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	691b      	ldr	r3, [r3, #16]
 8009e84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	685b      	ldr	r3, [r3, #4]
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	6892      	ldr	r2, [r2, #8]
 8009e8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	6852      	ldr	r2, [r2, #4]
 8009e98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d103      	bne.n	8009eac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	689a      	ldr	r2, [r3, #8]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	1e5a      	subs	r2, r3, #1
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3714      	adds	r7, #20
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bc80      	pop	{r7}
 8009ec8:	4770      	bx	lr

08009eca <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b08e      	sub	sp, #56	; 0x38
 8009ece:	af04      	add	r7, sp, #16
 8009ed0:	60f8      	str	r0, [r7, #12]
 8009ed2:	60b9      	str	r1, [r7, #8]
 8009ed4:	607a      	str	r2, [r7, #4]
 8009ed6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d109      	bne.n	8009ef2 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ee2:	f383 8811 	msr	BASEPRI, r3
 8009ee6:	f3bf 8f6f 	isb	sy
 8009eea:	f3bf 8f4f 	dsb	sy
 8009eee:	623b      	str	r3, [r7, #32]
 8009ef0:	e7fe      	b.n	8009ef0 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d109      	bne.n	8009f0c <xTaskCreateStatic+0x42>
 8009ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efc:	f383 8811 	msr	BASEPRI, r3
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	61fb      	str	r3, [r7, #28]
 8009f0a:	e7fe      	b.n	8009f0a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009f0c:	2354      	movs	r3, #84	; 0x54
 8009f0e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009f10:	693b      	ldr	r3, [r7, #16]
 8009f12:	2b54      	cmp	r3, #84	; 0x54
 8009f14:	d009      	beq.n	8009f2a <xTaskCreateStatic+0x60>
 8009f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1a:	f383 8811 	msr	BASEPRI, r3
 8009f1e:	f3bf 8f6f 	isb	sy
 8009f22:	f3bf 8f4f 	dsb	sy
 8009f26:	61bb      	str	r3, [r7, #24]
 8009f28:	e7fe      	b.n	8009f28 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d01e      	beq.n	8009f6e <xTaskCreateStatic+0xa4>
 8009f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d01b      	beq.n	8009f6e <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f38:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f3e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f42:	2202      	movs	r2, #2
 8009f44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009f48:	2300      	movs	r3, #0
 8009f4a:	9303      	str	r3, [sp, #12]
 8009f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f4e:	9302      	str	r3, [sp, #8]
 8009f50:	f107 0314 	add.w	r3, r7, #20
 8009f54:	9301      	str	r3, [sp, #4]
 8009f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f58:	9300      	str	r3, [sp, #0]
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	68b9      	ldr	r1, [r7, #8]
 8009f60:	68f8      	ldr	r0, [r7, #12]
 8009f62:	f000 f850 	bl	800a006 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f68:	f000 f8cc 	bl	800a104 <prvAddNewTaskToReadyList>
 8009f6c:	e001      	b.n	8009f72 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009f72:	697b      	ldr	r3, [r7, #20]
	}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3728      	adds	r7, #40	; 0x28
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b08c      	sub	sp, #48	; 0x30
 8009f80:	af04      	add	r7, sp, #16
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	603b      	str	r3, [r7, #0]
 8009f88:	4613      	mov	r3, r2
 8009f8a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f8c:	88fb      	ldrh	r3, [r7, #6]
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	4618      	mov	r0, r3
 8009f92:	f000 fe73 	bl	800ac7c <pvPortMalloc>
 8009f96:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d00e      	beq.n	8009fbc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8009f9e:	2054      	movs	r0, #84	; 0x54
 8009fa0:	f000 fe6c 	bl	800ac7c <pvPortMalloc>
 8009fa4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d003      	beq.n	8009fb4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	697a      	ldr	r2, [r7, #20]
 8009fb0:	631a      	str	r2, [r3, #48]	; 0x30
 8009fb2:	e005      	b.n	8009fc0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009fb4:	6978      	ldr	r0, [r7, #20]
 8009fb6:	f000 ff23 	bl	800ae00 <vPortFree>
 8009fba:	e001      	b.n	8009fc0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009fc0:	69fb      	ldr	r3, [r7, #28]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d017      	beq.n	8009ff6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	2200      	movs	r2, #0
 8009fca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009fce:	88fa      	ldrh	r2, [r7, #6]
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	9303      	str	r3, [sp, #12]
 8009fd4:	69fb      	ldr	r3, [r7, #28]
 8009fd6:	9302      	str	r3, [sp, #8]
 8009fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fda:	9301      	str	r3, [sp, #4]
 8009fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fde:	9300      	str	r3, [sp, #0]
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	68b9      	ldr	r1, [r7, #8]
 8009fe4:	68f8      	ldr	r0, [r7, #12]
 8009fe6:	f000 f80e 	bl	800a006 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009fea:	69f8      	ldr	r0, [r7, #28]
 8009fec:	f000 f88a 	bl	800a104 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	61bb      	str	r3, [r7, #24]
 8009ff4:	e002      	b.n	8009ffc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009ff6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009ffa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009ffc:	69bb      	ldr	r3, [r7, #24]
	}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3720      	adds	r7, #32
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}

0800a006 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a006:	b580      	push	{r7, lr}
 800a008:	b088      	sub	sp, #32
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	60f8      	str	r0, [r7, #12]
 800a00e:	60b9      	str	r1, [r7, #8]
 800a010:	607a      	str	r2, [r7, #4]
 800a012:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a01e:	3b01      	subs	r3, #1
 800a020:	009b      	lsls	r3, r3, #2
 800a022:	4413      	add	r3, r2
 800a024:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a026:	69bb      	ldr	r3, [r7, #24]
 800a028:	f023 0307 	bic.w	r3, r3, #7
 800a02c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a02e:	69bb      	ldr	r3, [r7, #24]
 800a030:	f003 0307 	and.w	r3, r3, #7
 800a034:	2b00      	cmp	r3, #0
 800a036:	d009      	beq.n	800a04c <prvInitialiseNewTask+0x46>
 800a038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03c:	f383 8811 	msr	BASEPRI, r3
 800a040:	f3bf 8f6f 	isb	sy
 800a044:	f3bf 8f4f 	dsb	sy
 800a048:	617b      	str	r3, [r7, #20]
 800a04a:	e7fe      	b.n	800a04a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a04c:	2300      	movs	r3, #0
 800a04e:	61fb      	str	r3, [r7, #28]
 800a050:	e012      	b.n	800a078 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a052:	68ba      	ldr	r2, [r7, #8]
 800a054:	69fb      	ldr	r3, [r7, #28]
 800a056:	4413      	add	r3, r2
 800a058:	7819      	ldrb	r1, [r3, #0]
 800a05a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a05c:	69fb      	ldr	r3, [r7, #28]
 800a05e:	4413      	add	r3, r2
 800a060:	3334      	adds	r3, #52	; 0x34
 800a062:	460a      	mov	r2, r1
 800a064:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a066:	68ba      	ldr	r2, [r7, #8]
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	4413      	add	r3, r2
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d006      	beq.n	800a080 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	3301      	adds	r3, #1
 800a076:	61fb      	str	r3, [r7, #28]
 800a078:	69fb      	ldr	r3, [r7, #28]
 800a07a:	2b0f      	cmp	r3, #15
 800a07c:	d9e9      	bls.n	800a052 <prvInitialiseNewTask+0x4c>
 800a07e:	e000      	b.n	800a082 <prvInitialiseNewTask+0x7c>
		{
			break;
 800a080:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a084:	2200      	movs	r2, #0
 800a086:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a08a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a08c:	2b06      	cmp	r3, #6
 800a08e:	d901      	bls.n	800a094 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a090:	2306      	movs	r3, #6
 800a092:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a098:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a09e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a8:	3304      	adds	r3, #4
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	f7ff fe7d 	bl	8009daa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b2:	3318      	adds	r3, #24
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f7ff fe78 	bl	8009daa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0c2:	f1c3 0207 	rsb	r2, r3, #7
 800a0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0d8:	2200      	movs	r2, #0
 800a0da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a0de:	683a      	ldr	r2, [r7, #0]
 800a0e0:	68f9      	ldr	r1, [r7, #12]
 800a0e2:	69b8      	ldr	r0, [r7, #24]
 800a0e4:	f000 fc24 	bl	800a930 <pxPortInitialiseStack>
 800a0e8:	4602      	mov	r2, r0
 800a0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ec:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a0ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d002      	beq.n	800a0fa <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0fa:	bf00      	nop
 800a0fc:	3720      	adds	r7, #32
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
	...

0800a104 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b082      	sub	sp, #8
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a10c:	f000 fcfc 	bl	800ab08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a110:	4b2a      	ldr	r3, [pc, #168]	; (800a1bc <prvAddNewTaskToReadyList+0xb8>)
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	3301      	adds	r3, #1
 800a116:	4a29      	ldr	r2, [pc, #164]	; (800a1bc <prvAddNewTaskToReadyList+0xb8>)
 800a118:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a11a:	4b29      	ldr	r3, [pc, #164]	; (800a1c0 <prvAddNewTaskToReadyList+0xbc>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d109      	bne.n	800a136 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a122:	4a27      	ldr	r2, [pc, #156]	; (800a1c0 <prvAddNewTaskToReadyList+0xbc>)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a128:	4b24      	ldr	r3, [pc, #144]	; (800a1bc <prvAddNewTaskToReadyList+0xb8>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2b01      	cmp	r3, #1
 800a12e:	d110      	bne.n	800a152 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a130:	f000 fabc 	bl	800a6ac <prvInitialiseTaskLists>
 800a134:	e00d      	b.n	800a152 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a136:	4b23      	ldr	r3, [pc, #140]	; (800a1c4 <prvAddNewTaskToReadyList+0xc0>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d109      	bne.n	800a152 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a13e:	4b20      	ldr	r3, [pc, #128]	; (800a1c0 <prvAddNewTaskToReadyList+0xbc>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a148:	429a      	cmp	r2, r3
 800a14a:	d802      	bhi.n	800a152 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a14c:	4a1c      	ldr	r2, [pc, #112]	; (800a1c0 <prvAddNewTaskToReadyList+0xbc>)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a152:	4b1d      	ldr	r3, [pc, #116]	; (800a1c8 <prvAddNewTaskToReadyList+0xc4>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	3301      	adds	r3, #1
 800a158:	4a1b      	ldr	r2, [pc, #108]	; (800a1c8 <prvAddNewTaskToReadyList+0xc4>)
 800a15a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a160:	2201      	movs	r2, #1
 800a162:	409a      	lsls	r2, r3
 800a164:	4b19      	ldr	r3, [pc, #100]	; (800a1cc <prvAddNewTaskToReadyList+0xc8>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4313      	orrs	r3, r2
 800a16a:	4a18      	ldr	r2, [pc, #96]	; (800a1cc <prvAddNewTaskToReadyList+0xc8>)
 800a16c:	6013      	str	r3, [r2, #0]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a172:	4613      	mov	r3, r2
 800a174:	009b      	lsls	r3, r3, #2
 800a176:	4413      	add	r3, r2
 800a178:	009b      	lsls	r3, r3, #2
 800a17a:	4a15      	ldr	r2, [pc, #84]	; (800a1d0 <prvAddNewTaskToReadyList+0xcc>)
 800a17c:	441a      	add	r2, r3
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	3304      	adds	r3, #4
 800a182:	4619      	mov	r1, r3
 800a184:	4610      	mov	r0, r2
 800a186:	f7ff fe1c 	bl	8009dc2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a18a:	f000 fceb 	bl	800ab64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a18e:	4b0d      	ldr	r3, [pc, #52]	; (800a1c4 <prvAddNewTaskToReadyList+0xc0>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00e      	beq.n	800a1b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a196:	4b0a      	ldr	r3, [pc, #40]	; (800a1c0 <prvAddNewTaskToReadyList+0xbc>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d207      	bcs.n	800a1b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a1a4:	4b0b      	ldr	r3, [pc, #44]	; (800a1d4 <prvAddNewTaskToReadyList+0xd0>)
 800a1a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1aa:	601a      	str	r2, [r3, #0]
 800a1ac:	f3bf 8f4f 	dsb	sy
 800a1b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1b4:	bf00      	nop
 800a1b6:	3708      	adds	r7, #8
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	200004f8 	.word	0x200004f8
 800a1c0:	200003f8 	.word	0x200003f8
 800a1c4:	20000504 	.word	0x20000504
 800a1c8:	20000514 	.word	0x20000514
 800a1cc:	20000500 	.word	0x20000500
 800a1d0:	200003fc 	.word	0x200003fc
 800a1d4:	e000ed04 	.word	0xe000ed04

0800a1d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d016      	beq.n	800a218 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a1ea:	4b13      	ldr	r3, [pc, #76]	; (800a238 <vTaskDelay+0x60>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d009      	beq.n	800a206 <vTaskDelay+0x2e>
 800a1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f6:	f383 8811 	msr	BASEPRI, r3
 800a1fa:	f3bf 8f6f 	isb	sy
 800a1fe:	f3bf 8f4f 	dsb	sy
 800a202:	60bb      	str	r3, [r7, #8]
 800a204:	e7fe      	b.n	800a204 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a206:	f000 f879 	bl	800a2fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a20a:	2100      	movs	r1, #0
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 fb29 	bl	800a864 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a212:	f000 f881 	bl	800a318 <xTaskResumeAll>
 800a216:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d107      	bne.n	800a22e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a21e:	4b07      	ldr	r3, [pc, #28]	; (800a23c <vTaskDelay+0x64>)
 800a220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a224:	601a      	str	r2, [r3, #0]
 800a226:	f3bf 8f4f 	dsb	sy
 800a22a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a22e:	bf00      	nop
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	20000520 	.word	0x20000520
 800a23c:	e000ed04 	.word	0xe000ed04

0800a240 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b08a      	sub	sp, #40	; 0x28
 800a244:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a246:	2300      	movs	r3, #0
 800a248:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a24a:	2300      	movs	r3, #0
 800a24c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a24e:	463a      	mov	r2, r7
 800a250:	1d39      	adds	r1, r7, #4
 800a252:	f107 0308 	add.w	r3, r7, #8
 800a256:	4618      	mov	r0, r3
 800a258:	f7f8 fdc8 	bl	8002dec <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a25c:	6839      	ldr	r1, [r7, #0]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	68ba      	ldr	r2, [r7, #8]
 800a262:	9202      	str	r2, [sp, #8]
 800a264:	9301      	str	r3, [sp, #4]
 800a266:	2300      	movs	r3, #0
 800a268:	9300      	str	r3, [sp, #0]
 800a26a:	2300      	movs	r3, #0
 800a26c:	460a      	mov	r2, r1
 800a26e:	491d      	ldr	r1, [pc, #116]	; (800a2e4 <vTaskStartScheduler+0xa4>)
 800a270:	481d      	ldr	r0, [pc, #116]	; (800a2e8 <vTaskStartScheduler+0xa8>)
 800a272:	f7ff fe2a 	bl	8009eca <xTaskCreateStatic>
 800a276:	4602      	mov	r2, r0
 800a278:	4b1c      	ldr	r3, [pc, #112]	; (800a2ec <vTaskStartScheduler+0xac>)
 800a27a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a27c:	4b1b      	ldr	r3, [pc, #108]	; (800a2ec <vTaskStartScheduler+0xac>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a284:	2301      	movs	r3, #1
 800a286:	617b      	str	r3, [r7, #20]
 800a288:	e001      	b.n	800a28e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a28a:	2300      	movs	r3, #0
 800a28c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	2b01      	cmp	r3, #1
 800a292:	d115      	bne.n	800a2c0 <vTaskStartScheduler+0x80>
 800a294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a298:	f383 8811 	msr	BASEPRI, r3
 800a29c:	f3bf 8f6f 	isb	sy
 800a2a0:	f3bf 8f4f 	dsb	sy
 800a2a4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a2a6:	4b12      	ldr	r3, [pc, #72]	; (800a2f0 <vTaskStartScheduler+0xb0>)
 800a2a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a2ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a2ae:	4b11      	ldr	r3, [pc, #68]	; (800a2f4 <vTaskStartScheduler+0xb4>)
 800a2b0:	2201      	movs	r2, #1
 800a2b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a2b4:	4b10      	ldr	r3, [pc, #64]	; (800a2f8 <vTaskStartScheduler+0xb8>)
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a2ba:	f000 fbb5 	bl	800aa28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a2be:	e00d      	b.n	800a2dc <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2c6:	d109      	bne.n	800a2dc <vTaskStartScheduler+0x9c>
 800a2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2cc:	f383 8811 	msr	BASEPRI, r3
 800a2d0:	f3bf 8f6f 	isb	sy
 800a2d4:	f3bf 8f4f 	dsb	sy
 800a2d8:	60fb      	str	r3, [r7, #12]
 800a2da:	e7fe      	b.n	800a2da <vTaskStartScheduler+0x9a>
}
 800a2dc:	bf00      	nop
 800a2de:	3718      	adds	r7, #24
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}
 800a2e4:	0800f334 	.word	0x0800f334
 800a2e8:	0800a67d 	.word	0x0800a67d
 800a2ec:	2000051c 	.word	0x2000051c
 800a2f0:	20000518 	.word	0x20000518
 800a2f4:	20000504 	.word	0x20000504
 800a2f8:	200004fc 	.word	0x200004fc

0800a2fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a300:	4b04      	ldr	r3, [pc, #16]	; (800a314 <vTaskSuspendAll+0x18>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	3301      	adds	r3, #1
 800a306:	4a03      	ldr	r2, [pc, #12]	; (800a314 <vTaskSuspendAll+0x18>)
 800a308:	6013      	str	r3, [r2, #0]
}
 800a30a:	bf00      	nop
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bc80      	pop	{r7}
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop
 800a314:	20000520 	.word	0x20000520

0800a318 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a31e:	2300      	movs	r3, #0
 800a320:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a322:	2300      	movs	r3, #0
 800a324:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a326:	4b41      	ldr	r3, [pc, #260]	; (800a42c <xTaskResumeAll+0x114>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d109      	bne.n	800a342 <xTaskResumeAll+0x2a>
 800a32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a332:	f383 8811 	msr	BASEPRI, r3
 800a336:	f3bf 8f6f 	isb	sy
 800a33a:	f3bf 8f4f 	dsb	sy
 800a33e:	603b      	str	r3, [r7, #0]
 800a340:	e7fe      	b.n	800a340 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a342:	f000 fbe1 	bl	800ab08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a346:	4b39      	ldr	r3, [pc, #228]	; (800a42c <xTaskResumeAll+0x114>)
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	3b01      	subs	r3, #1
 800a34c:	4a37      	ldr	r2, [pc, #220]	; (800a42c <xTaskResumeAll+0x114>)
 800a34e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a350:	4b36      	ldr	r3, [pc, #216]	; (800a42c <xTaskResumeAll+0x114>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d161      	bne.n	800a41c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a358:	4b35      	ldr	r3, [pc, #212]	; (800a430 <xTaskResumeAll+0x118>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d05d      	beq.n	800a41c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a360:	e02e      	b.n	800a3c0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a362:	4b34      	ldr	r3, [pc, #208]	; (800a434 <xTaskResumeAll+0x11c>)
 800a364:	68db      	ldr	r3, [r3, #12]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	3318      	adds	r3, #24
 800a36e:	4618      	mov	r0, r3
 800a370:	f7ff fd82 	bl	8009e78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	3304      	adds	r3, #4
 800a378:	4618      	mov	r0, r3
 800a37a:	f7ff fd7d 	bl	8009e78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a382:	2201      	movs	r2, #1
 800a384:	409a      	lsls	r2, r3
 800a386:	4b2c      	ldr	r3, [pc, #176]	; (800a438 <xTaskResumeAll+0x120>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	4a2a      	ldr	r2, [pc, #168]	; (800a438 <xTaskResumeAll+0x120>)
 800a38e:	6013      	str	r3, [r2, #0]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a394:	4613      	mov	r3, r2
 800a396:	009b      	lsls	r3, r3, #2
 800a398:	4413      	add	r3, r2
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	4a27      	ldr	r2, [pc, #156]	; (800a43c <xTaskResumeAll+0x124>)
 800a39e:	441a      	add	r2, r3
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	3304      	adds	r3, #4
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	4610      	mov	r0, r2
 800a3a8:	f7ff fd0b 	bl	8009dc2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b0:	4b23      	ldr	r3, [pc, #140]	; (800a440 <xTaskResumeAll+0x128>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d302      	bcc.n	800a3c0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800a3ba:	4b22      	ldr	r3, [pc, #136]	; (800a444 <xTaskResumeAll+0x12c>)
 800a3bc:	2201      	movs	r2, #1
 800a3be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3c0:	4b1c      	ldr	r3, [pc, #112]	; (800a434 <xTaskResumeAll+0x11c>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d1cc      	bne.n	800a362 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d001      	beq.n	800a3d2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a3ce:	f000 fa07 	bl	800a7e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a3d2:	4b1d      	ldr	r3, [pc, #116]	; (800a448 <xTaskResumeAll+0x130>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d010      	beq.n	800a400 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a3de:	f000 f837 	bl	800a450 <xTaskIncrementTick>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d002      	beq.n	800a3ee <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800a3e8:	4b16      	ldr	r3, [pc, #88]	; (800a444 <xTaskResumeAll+0x12c>)
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	3b01      	subs	r3, #1
 800a3f2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d1f1      	bne.n	800a3de <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800a3fa:	4b13      	ldr	r3, [pc, #76]	; (800a448 <xTaskResumeAll+0x130>)
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a400:	4b10      	ldr	r3, [pc, #64]	; (800a444 <xTaskResumeAll+0x12c>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d009      	beq.n	800a41c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a408:	2301      	movs	r3, #1
 800a40a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a40c:	4b0f      	ldr	r3, [pc, #60]	; (800a44c <xTaskResumeAll+0x134>)
 800a40e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a412:	601a      	str	r2, [r3, #0]
 800a414:	f3bf 8f4f 	dsb	sy
 800a418:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a41c:	f000 fba2 	bl	800ab64 <vPortExitCritical>

	return xAlreadyYielded;
 800a420:	68bb      	ldr	r3, [r7, #8]
}
 800a422:	4618      	mov	r0, r3
 800a424:	3710      	adds	r7, #16
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	20000520 	.word	0x20000520
 800a430:	200004f8 	.word	0x200004f8
 800a434:	200004b8 	.word	0x200004b8
 800a438:	20000500 	.word	0x20000500
 800a43c:	200003fc 	.word	0x200003fc
 800a440:	200003f8 	.word	0x200003f8
 800a444:	2000050c 	.word	0x2000050c
 800a448:	20000508 	.word	0x20000508
 800a44c:	e000ed04 	.word	0xe000ed04

0800a450 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b086      	sub	sp, #24
 800a454:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a456:	2300      	movs	r3, #0
 800a458:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a45a:	4b50      	ldr	r3, [pc, #320]	; (800a59c <xTaskIncrementTick+0x14c>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	f040 808c 	bne.w	800a57c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a464:	4b4e      	ldr	r3, [pc, #312]	; (800a5a0 <xTaskIncrementTick+0x150>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	3301      	adds	r3, #1
 800a46a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a46c:	4a4c      	ldr	r2, [pc, #304]	; (800a5a0 <xTaskIncrementTick+0x150>)
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d11f      	bne.n	800a4b8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a478:	4b4a      	ldr	r3, [pc, #296]	; (800a5a4 <xTaskIncrementTick+0x154>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d009      	beq.n	800a496 <xTaskIncrementTick+0x46>
 800a482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a486:	f383 8811 	msr	BASEPRI, r3
 800a48a:	f3bf 8f6f 	isb	sy
 800a48e:	f3bf 8f4f 	dsb	sy
 800a492:	603b      	str	r3, [r7, #0]
 800a494:	e7fe      	b.n	800a494 <xTaskIncrementTick+0x44>
 800a496:	4b43      	ldr	r3, [pc, #268]	; (800a5a4 <xTaskIncrementTick+0x154>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	60fb      	str	r3, [r7, #12]
 800a49c:	4b42      	ldr	r3, [pc, #264]	; (800a5a8 <xTaskIncrementTick+0x158>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a40      	ldr	r2, [pc, #256]	; (800a5a4 <xTaskIncrementTick+0x154>)
 800a4a2:	6013      	str	r3, [r2, #0]
 800a4a4:	4a40      	ldr	r2, [pc, #256]	; (800a5a8 <xTaskIncrementTick+0x158>)
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6013      	str	r3, [r2, #0]
 800a4aa:	4b40      	ldr	r3, [pc, #256]	; (800a5ac <xTaskIncrementTick+0x15c>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	4a3e      	ldr	r2, [pc, #248]	; (800a5ac <xTaskIncrementTick+0x15c>)
 800a4b2:	6013      	str	r3, [r2, #0]
 800a4b4:	f000 f994 	bl	800a7e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a4b8:	4b3d      	ldr	r3, [pc, #244]	; (800a5b0 <xTaskIncrementTick+0x160>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	693a      	ldr	r2, [r7, #16]
 800a4be:	429a      	cmp	r2, r3
 800a4c0:	d34d      	bcc.n	800a55e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4c2:	4b38      	ldr	r3, [pc, #224]	; (800a5a4 <xTaskIncrementTick+0x154>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d101      	bne.n	800a4d0 <xTaskIncrementTick+0x80>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	e000      	b.n	800a4d2 <xTaskIncrementTick+0x82>
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d004      	beq.n	800a4e0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4d6:	4b36      	ldr	r3, [pc, #216]	; (800a5b0 <xTaskIncrementTick+0x160>)
 800a4d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4dc:	601a      	str	r2, [r3, #0]
					break;
 800a4de:	e03e      	b.n	800a55e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a4e0:	4b30      	ldr	r3, [pc, #192]	; (800a5a4 <xTaskIncrementTick+0x154>)
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	68db      	ldr	r3, [r3, #12]
 800a4e6:	68db      	ldr	r3, [r3, #12]
 800a4e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	685b      	ldr	r3, [r3, #4]
 800a4ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a4f0:	693a      	ldr	r2, [r7, #16]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	429a      	cmp	r2, r3
 800a4f6:	d203      	bcs.n	800a500 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a4f8:	4a2d      	ldr	r2, [pc, #180]	; (800a5b0 <xTaskIncrementTick+0x160>)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	6013      	str	r3, [r2, #0]
						break;
 800a4fe:	e02e      	b.n	800a55e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	3304      	adds	r3, #4
 800a504:	4618      	mov	r0, r3
 800a506:	f7ff fcb7 	bl	8009e78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d004      	beq.n	800a51c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	3318      	adds	r3, #24
 800a516:	4618      	mov	r0, r3
 800a518:	f7ff fcae 	bl	8009e78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a520:	2201      	movs	r2, #1
 800a522:	409a      	lsls	r2, r3
 800a524:	4b23      	ldr	r3, [pc, #140]	; (800a5b4 <xTaskIncrementTick+0x164>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4313      	orrs	r3, r2
 800a52a:	4a22      	ldr	r2, [pc, #136]	; (800a5b4 <xTaskIncrementTick+0x164>)
 800a52c:	6013      	str	r3, [r2, #0]
 800a52e:	68bb      	ldr	r3, [r7, #8]
 800a530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a532:	4613      	mov	r3, r2
 800a534:	009b      	lsls	r3, r3, #2
 800a536:	4413      	add	r3, r2
 800a538:	009b      	lsls	r3, r3, #2
 800a53a:	4a1f      	ldr	r2, [pc, #124]	; (800a5b8 <xTaskIncrementTick+0x168>)
 800a53c:	441a      	add	r2, r3
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	3304      	adds	r3, #4
 800a542:	4619      	mov	r1, r3
 800a544:	4610      	mov	r0, r2
 800a546:	f7ff fc3c 	bl	8009dc2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a54e:	4b1b      	ldr	r3, [pc, #108]	; (800a5bc <xTaskIncrementTick+0x16c>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a554:	429a      	cmp	r2, r3
 800a556:	d3b4      	bcc.n	800a4c2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a558:	2301      	movs	r3, #1
 800a55a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a55c:	e7b1      	b.n	800a4c2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a55e:	4b17      	ldr	r3, [pc, #92]	; (800a5bc <xTaskIncrementTick+0x16c>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a564:	4914      	ldr	r1, [pc, #80]	; (800a5b8 <xTaskIncrementTick+0x168>)
 800a566:	4613      	mov	r3, r2
 800a568:	009b      	lsls	r3, r3, #2
 800a56a:	4413      	add	r3, r2
 800a56c:	009b      	lsls	r3, r3, #2
 800a56e:	440b      	add	r3, r1
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2b01      	cmp	r3, #1
 800a574:	d907      	bls.n	800a586 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800a576:	2301      	movs	r3, #1
 800a578:	617b      	str	r3, [r7, #20]
 800a57a:	e004      	b.n	800a586 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a57c:	4b10      	ldr	r3, [pc, #64]	; (800a5c0 <xTaskIncrementTick+0x170>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	3301      	adds	r3, #1
 800a582:	4a0f      	ldr	r2, [pc, #60]	; (800a5c0 <xTaskIncrementTick+0x170>)
 800a584:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a586:	4b0f      	ldr	r3, [pc, #60]	; (800a5c4 <xTaskIncrementTick+0x174>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d001      	beq.n	800a592 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800a58e:	2301      	movs	r3, #1
 800a590:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a592:	697b      	ldr	r3, [r7, #20]
}
 800a594:	4618      	mov	r0, r3
 800a596:	3718      	adds	r7, #24
 800a598:	46bd      	mov	sp, r7
 800a59a:	bd80      	pop	{r7, pc}
 800a59c:	20000520 	.word	0x20000520
 800a5a0:	200004fc 	.word	0x200004fc
 800a5a4:	200004b0 	.word	0x200004b0
 800a5a8:	200004b4 	.word	0x200004b4
 800a5ac:	20000510 	.word	0x20000510
 800a5b0:	20000518 	.word	0x20000518
 800a5b4:	20000500 	.word	0x20000500
 800a5b8:	200003fc 	.word	0x200003fc
 800a5bc:	200003f8 	.word	0x200003f8
 800a5c0:	20000508 	.word	0x20000508
 800a5c4:	2000050c 	.word	0x2000050c

0800a5c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b087      	sub	sp, #28
 800a5cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a5ce:	4b26      	ldr	r3, [pc, #152]	; (800a668 <vTaskSwitchContext+0xa0>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d003      	beq.n	800a5de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a5d6:	4b25      	ldr	r3, [pc, #148]	; (800a66c <vTaskSwitchContext+0xa4>)
 800a5d8:	2201      	movs	r2, #1
 800a5da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a5dc:	e03e      	b.n	800a65c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800a5de:	4b23      	ldr	r3, [pc, #140]	; (800a66c <vTaskSwitchContext+0xa4>)
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800a5e4:	4b22      	ldr	r3, [pc, #136]	; (800a670 <vTaskSwitchContext+0xa8>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	fab3 f383 	clz	r3, r3
 800a5f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a5f2:	7afb      	ldrb	r3, [r7, #11]
 800a5f4:	f1c3 031f 	rsb	r3, r3, #31
 800a5f8:	617b      	str	r3, [r7, #20]
 800a5fa:	491e      	ldr	r1, [pc, #120]	; (800a674 <vTaskSwitchContext+0xac>)
 800a5fc:	697a      	ldr	r2, [r7, #20]
 800a5fe:	4613      	mov	r3, r2
 800a600:	009b      	lsls	r3, r3, #2
 800a602:	4413      	add	r3, r2
 800a604:	009b      	lsls	r3, r3, #2
 800a606:	440b      	add	r3, r1
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d109      	bne.n	800a622 <vTaskSwitchContext+0x5a>
	__asm volatile
 800a60e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a612:	f383 8811 	msr	BASEPRI, r3
 800a616:	f3bf 8f6f 	isb	sy
 800a61a:	f3bf 8f4f 	dsb	sy
 800a61e:	607b      	str	r3, [r7, #4]
 800a620:	e7fe      	b.n	800a620 <vTaskSwitchContext+0x58>
 800a622:	697a      	ldr	r2, [r7, #20]
 800a624:	4613      	mov	r3, r2
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	4413      	add	r3, r2
 800a62a:	009b      	lsls	r3, r3, #2
 800a62c:	4a11      	ldr	r2, [pc, #68]	; (800a674 <vTaskSwitchContext+0xac>)
 800a62e:	4413      	add	r3, r2
 800a630:	613b      	str	r3, [r7, #16]
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	685b      	ldr	r3, [r3, #4]
 800a636:	685a      	ldr	r2, [r3, #4]
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	605a      	str	r2, [r3, #4]
 800a63c:	693b      	ldr	r3, [r7, #16]
 800a63e:	685a      	ldr	r2, [r3, #4]
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	3308      	adds	r3, #8
 800a644:	429a      	cmp	r2, r3
 800a646:	d104      	bne.n	800a652 <vTaskSwitchContext+0x8a>
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	685a      	ldr	r2, [r3, #4]
 800a64e:	693b      	ldr	r3, [r7, #16]
 800a650:	605a      	str	r2, [r3, #4]
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	4a07      	ldr	r2, [pc, #28]	; (800a678 <vTaskSwitchContext+0xb0>)
 800a65a:	6013      	str	r3, [r2, #0]
}
 800a65c:	bf00      	nop
 800a65e:	371c      	adds	r7, #28
 800a660:	46bd      	mov	sp, r7
 800a662:	bc80      	pop	{r7}
 800a664:	4770      	bx	lr
 800a666:	bf00      	nop
 800a668:	20000520 	.word	0x20000520
 800a66c:	2000050c 	.word	0x2000050c
 800a670:	20000500 	.word	0x20000500
 800a674:	200003fc 	.word	0x200003fc
 800a678:	200003f8 	.word	0x200003f8

0800a67c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a684:	f000 f852 	bl	800a72c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a688:	4b06      	ldr	r3, [pc, #24]	; (800a6a4 <prvIdleTask+0x28>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d9f9      	bls.n	800a684 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a690:	4b05      	ldr	r3, [pc, #20]	; (800a6a8 <prvIdleTask+0x2c>)
 800a692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a696:	601a      	str	r2, [r3, #0]
 800a698:	f3bf 8f4f 	dsb	sy
 800a69c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a6a0:	e7f0      	b.n	800a684 <prvIdleTask+0x8>
 800a6a2:	bf00      	nop
 800a6a4:	200003fc 	.word	0x200003fc
 800a6a8:	e000ed04 	.word	0xe000ed04

0800a6ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b082      	sub	sp, #8
 800a6b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	607b      	str	r3, [r7, #4]
 800a6b6:	e00c      	b.n	800a6d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	4413      	add	r3, r2
 800a6c0:	009b      	lsls	r3, r3, #2
 800a6c2:	4a12      	ldr	r2, [pc, #72]	; (800a70c <prvInitialiseTaskLists+0x60>)
 800a6c4:	4413      	add	r3, r2
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7ff fb50 	bl	8009d6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	3301      	adds	r3, #1
 800a6d0:	607b      	str	r3, [r7, #4]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2b06      	cmp	r3, #6
 800a6d6:	d9ef      	bls.n	800a6b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a6d8:	480d      	ldr	r0, [pc, #52]	; (800a710 <prvInitialiseTaskLists+0x64>)
 800a6da:	f7ff fb47 	bl	8009d6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a6de:	480d      	ldr	r0, [pc, #52]	; (800a714 <prvInitialiseTaskLists+0x68>)
 800a6e0:	f7ff fb44 	bl	8009d6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a6e4:	480c      	ldr	r0, [pc, #48]	; (800a718 <prvInitialiseTaskLists+0x6c>)
 800a6e6:	f7ff fb41 	bl	8009d6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a6ea:	480c      	ldr	r0, [pc, #48]	; (800a71c <prvInitialiseTaskLists+0x70>)
 800a6ec:	f7ff fb3e 	bl	8009d6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a6f0:	480b      	ldr	r0, [pc, #44]	; (800a720 <prvInitialiseTaskLists+0x74>)
 800a6f2:	f7ff fb3b 	bl	8009d6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a6f6:	4b0b      	ldr	r3, [pc, #44]	; (800a724 <prvInitialiseTaskLists+0x78>)
 800a6f8:	4a05      	ldr	r2, [pc, #20]	; (800a710 <prvInitialiseTaskLists+0x64>)
 800a6fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a6fc:	4b0a      	ldr	r3, [pc, #40]	; (800a728 <prvInitialiseTaskLists+0x7c>)
 800a6fe:	4a05      	ldr	r2, [pc, #20]	; (800a714 <prvInitialiseTaskLists+0x68>)
 800a700:	601a      	str	r2, [r3, #0]
}
 800a702:	bf00      	nop
 800a704:	3708      	adds	r7, #8
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	200003fc 	.word	0x200003fc
 800a710:	20000488 	.word	0x20000488
 800a714:	2000049c 	.word	0x2000049c
 800a718:	200004b8 	.word	0x200004b8
 800a71c:	200004cc 	.word	0x200004cc
 800a720:	200004e4 	.word	0x200004e4
 800a724:	200004b0 	.word	0x200004b0
 800a728:	200004b4 	.word	0x200004b4

0800a72c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a732:	e019      	b.n	800a768 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a734:	f000 f9e8 	bl	800ab08 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800a738:	4b0f      	ldr	r3, [pc, #60]	; (800a778 <prvCheckTasksWaitingTermination+0x4c>)
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	68db      	ldr	r3, [r3, #12]
 800a73e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	3304      	adds	r3, #4
 800a744:	4618      	mov	r0, r3
 800a746:	f7ff fb97 	bl	8009e78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a74a:	4b0c      	ldr	r3, [pc, #48]	; (800a77c <prvCheckTasksWaitingTermination+0x50>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	3b01      	subs	r3, #1
 800a750:	4a0a      	ldr	r2, [pc, #40]	; (800a77c <prvCheckTasksWaitingTermination+0x50>)
 800a752:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a754:	4b0a      	ldr	r3, [pc, #40]	; (800a780 <prvCheckTasksWaitingTermination+0x54>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	3b01      	subs	r3, #1
 800a75a:	4a09      	ldr	r2, [pc, #36]	; (800a780 <prvCheckTasksWaitingTermination+0x54>)
 800a75c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a75e:	f000 fa01 	bl	800ab64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f000 f80e 	bl	800a784 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a768:	4b05      	ldr	r3, [pc, #20]	; (800a780 <prvCheckTasksWaitingTermination+0x54>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d1e1      	bne.n	800a734 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a770:	bf00      	nop
 800a772:	3708      	adds	r7, #8
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}
 800a778:	200004cc 	.word	0x200004cc
 800a77c:	200004f8 	.word	0x200004f8
 800a780:	200004e0 	.word	0x200004e0

0800a784 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a792:	2b00      	cmp	r3, #0
 800a794:	d108      	bne.n	800a7a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a79a:	4618      	mov	r0, r3
 800a79c:	f000 fb30 	bl	800ae00 <vPortFree>
				vPortFree( pxTCB );
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f000 fb2d 	bl	800ae00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a7a6:	e017      	b.n	800a7d8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d103      	bne.n	800a7ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 fb24 	bl	800ae00 <vPortFree>
	}
 800a7b8:	e00e      	b.n	800a7d8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a7c0:	2b02      	cmp	r3, #2
 800a7c2:	d009      	beq.n	800a7d8 <prvDeleteTCB+0x54>
 800a7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c8:	f383 8811 	msr	BASEPRI, r3
 800a7cc:	f3bf 8f6f 	isb	sy
 800a7d0:	f3bf 8f4f 	dsb	sy
 800a7d4:	60fb      	str	r3, [r7, #12]
 800a7d6:	e7fe      	b.n	800a7d6 <prvDeleteTCB+0x52>
	}
 800a7d8:	bf00      	nop
 800a7da:	3710      	adds	r7, #16
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7e6:	4b0e      	ldr	r3, [pc, #56]	; (800a820 <prvResetNextTaskUnblockTime+0x40>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d101      	bne.n	800a7f4 <prvResetNextTaskUnblockTime+0x14>
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e000      	b.n	800a7f6 <prvResetNextTaskUnblockTime+0x16>
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d004      	beq.n	800a804 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a7fa:	4b0a      	ldr	r3, [pc, #40]	; (800a824 <prvResetNextTaskUnblockTime+0x44>)
 800a7fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a800:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a802:	e008      	b.n	800a816 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a804:	4b06      	ldr	r3, [pc, #24]	; (800a820 <prvResetNextTaskUnblockTime+0x40>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	4a04      	ldr	r2, [pc, #16]	; (800a824 <prvResetNextTaskUnblockTime+0x44>)
 800a814:	6013      	str	r3, [r2, #0]
}
 800a816:	bf00      	nop
 800a818:	370c      	adds	r7, #12
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bc80      	pop	{r7}
 800a81e:	4770      	bx	lr
 800a820:	200004b0 	.word	0x200004b0
 800a824:	20000518 	.word	0x20000518

0800a828 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a82e:	4b0b      	ldr	r3, [pc, #44]	; (800a85c <xTaskGetSchedulerState+0x34>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d102      	bne.n	800a83c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a836:	2301      	movs	r3, #1
 800a838:	607b      	str	r3, [r7, #4]
 800a83a:	e008      	b.n	800a84e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a83c:	4b08      	ldr	r3, [pc, #32]	; (800a860 <xTaskGetSchedulerState+0x38>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d102      	bne.n	800a84a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a844:	2302      	movs	r3, #2
 800a846:	607b      	str	r3, [r7, #4]
 800a848:	e001      	b.n	800a84e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a84a:	2300      	movs	r3, #0
 800a84c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a84e:	687b      	ldr	r3, [r7, #4]
	}
 800a850:	4618      	mov	r0, r3
 800a852:	370c      	adds	r7, #12
 800a854:	46bd      	mov	sp, r7
 800a856:	bc80      	pop	{r7}
 800a858:	4770      	bx	lr
 800a85a:	bf00      	nop
 800a85c:	20000504 	.word	0x20000504
 800a860:	20000520 	.word	0x20000520

0800a864 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a86e:	4b29      	ldr	r3, [pc, #164]	; (800a914 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a874:	4b28      	ldr	r3, [pc, #160]	; (800a918 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	3304      	adds	r3, #4
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7ff fafc 	bl	8009e78 <uxListRemove>
 800a880:	4603      	mov	r3, r0
 800a882:	2b00      	cmp	r3, #0
 800a884:	d10b      	bne.n	800a89e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800a886:	4b24      	ldr	r3, [pc, #144]	; (800a918 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a88c:	2201      	movs	r2, #1
 800a88e:	fa02 f303 	lsl.w	r3, r2, r3
 800a892:	43da      	mvns	r2, r3
 800a894:	4b21      	ldr	r3, [pc, #132]	; (800a91c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4013      	ands	r3, r2
 800a89a:	4a20      	ldr	r2, [pc, #128]	; (800a91c <prvAddCurrentTaskToDelayedList+0xb8>)
 800a89c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8a4:	d10a      	bne.n	800a8bc <prvAddCurrentTaskToDelayedList+0x58>
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d007      	beq.n	800a8bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8ac:	4b1a      	ldr	r3, [pc, #104]	; (800a918 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	3304      	adds	r3, #4
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	481a      	ldr	r0, [pc, #104]	; (800a920 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a8b6:	f7ff fa84 	bl	8009dc2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a8ba:	e026      	b.n	800a90a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a8bc:	68fa      	ldr	r2, [r7, #12]
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4413      	add	r3, r2
 800a8c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a8c4:	4b14      	ldr	r3, [pc, #80]	; (800a918 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	68ba      	ldr	r2, [r7, #8]
 800a8ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a8cc:	68ba      	ldr	r2, [r7, #8]
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	429a      	cmp	r2, r3
 800a8d2:	d209      	bcs.n	800a8e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8d4:	4b13      	ldr	r3, [pc, #76]	; (800a924 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a8d6:	681a      	ldr	r2, [r3, #0]
 800a8d8:	4b0f      	ldr	r3, [pc, #60]	; (800a918 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	3304      	adds	r3, #4
 800a8de:	4619      	mov	r1, r3
 800a8e0:	4610      	mov	r0, r2
 800a8e2:	f7ff fa91 	bl	8009e08 <vListInsert>
}
 800a8e6:	e010      	b.n	800a90a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a8e8:	4b0f      	ldr	r3, [pc, #60]	; (800a928 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	4b0a      	ldr	r3, [pc, #40]	; (800a918 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	3304      	adds	r3, #4
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	4610      	mov	r0, r2
 800a8f6:	f7ff fa87 	bl	8009e08 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a8fa:	4b0c      	ldr	r3, [pc, #48]	; (800a92c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	68ba      	ldr	r2, [r7, #8]
 800a900:	429a      	cmp	r2, r3
 800a902:	d202      	bcs.n	800a90a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a904:	4a09      	ldr	r2, [pc, #36]	; (800a92c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	6013      	str	r3, [r2, #0]
}
 800a90a:	bf00      	nop
 800a90c:	3710      	adds	r7, #16
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	200004fc 	.word	0x200004fc
 800a918:	200003f8 	.word	0x200003f8
 800a91c:	20000500 	.word	0x20000500
 800a920:	200004e4 	.word	0x200004e4
 800a924:	200004b4 	.word	0x200004b4
 800a928:	200004b0 	.word	0x200004b0
 800a92c:	20000518 	.word	0x20000518

0800a930 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a930:	b480      	push	{r7}
 800a932:	b085      	sub	sp, #20
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	3b04      	subs	r3, #4
 800a940:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a948:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	3b04      	subs	r3, #4
 800a94e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	f023 0201 	bic.w	r2, r3, #1
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	3b04      	subs	r3, #4
 800a95e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a960:	4a08      	ldr	r2, [pc, #32]	; (800a984 <pxPortInitialiseStack+0x54>)
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	3b14      	subs	r3, #20
 800a96a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	3b20      	subs	r3, #32
 800a976:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a978:	68fb      	ldr	r3, [r7, #12]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3714      	adds	r7, #20
 800a97e:	46bd      	mov	sp, r7
 800a980:	bc80      	pop	{r7}
 800a982:	4770      	bx	lr
 800a984:	0800a989 	.word	0x0800a989

0800a988 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a988:	b480      	push	{r7}
 800a98a:	b085      	sub	sp, #20
 800a98c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a98e:	2300      	movs	r3, #0
 800a990:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a992:	4b10      	ldr	r3, [pc, #64]	; (800a9d4 <prvTaskExitError+0x4c>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a99a:	d009      	beq.n	800a9b0 <prvTaskExitError+0x28>
 800a99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9a0:	f383 8811 	msr	BASEPRI, r3
 800a9a4:	f3bf 8f6f 	isb	sy
 800a9a8:	f3bf 8f4f 	dsb	sy
 800a9ac:	60fb      	str	r3, [r7, #12]
 800a9ae:	e7fe      	b.n	800a9ae <prvTaskExitError+0x26>
 800a9b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9b4:	f383 8811 	msr	BASEPRI, r3
 800a9b8:	f3bf 8f6f 	isb	sy
 800a9bc:	f3bf 8f4f 	dsb	sy
 800a9c0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a9c2:	bf00      	nop
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d0fc      	beq.n	800a9c4 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a9ca:	bf00      	nop
 800a9cc:	3714      	adds	r7, #20
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bc80      	pop	{r7}
 800a9d2:	4770      	bx	lr
 800a9d4:	20000048 	.word	0x20000048
	...

0800a9e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a9e0:	4b07      	ldr	r3, [pc, #28]	; (800aa00 <pxCurrentTCBConst2>)
 800a9e2:	6819      	ldr	r1, [r3, #0]
 800a9e4:	6808      	ldr	r0, [r1, #0]
 800a9e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a9ea:	f380 8809 	msr	PSP, r0
 800a9ee:	f3bf 8f6f 	isb	sy
 800a9f2:	f04f 0000 	mov.w	r0, #0
 800a9f6:	f380 8811 	msr	BASEPRI, r0
 800a9fa:	f04e 0e0d 	orr.w	lr, lr, #13
 800a9fe:	4770      	bx	lr

0800aa00 <pxCurrentTCBConst2>:
 800aa00:	200003f8 	.word	0x200003f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa04:	bf00      	nop
 800aa06:	bf00      	nop

0800aa08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800aa08:	4806      	ldr	r0, [pc, #24]	; (800aa24 <prvPortStartFirstTask+0x1c>)
 800aa0a:	6800      	ldr	r0, [r0, #0]
 800aa0c:	6800      	ldr	r0, [r0, #0]
 800aa0e:	f380 8808 	msr	MSP, r0
 800aa12:	b662      	cpsie	i
 800aa14:	b661      	cpsie	f
 800aa16:	f3bf 8f4f 	dsb	sy
 800aa1a:	f3bf 8f6f 	isb	sy
 800aa1e:	df00      	svc	0
 800aa20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800aa22:	bf00      	nop
 800aa24:	e000ed08 	.word	0xe000ed08

0800aa28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800aa2e:	4b31      	ldr	r3, [pc, #196]	; (800aaf4 <xPortStartScheduler+0xcc>)
 800aa30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	781b      	ldrb	r3, [r3, #0]
 800aa36:	b2db      	uxtb	r3, r3
 800aa38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	22ff      	movs	r2, #255	; 0xff
 800aa3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aa48:	78fb      	ldrb	r3, [r7, #3]
 800aa4a:	b2db      	uxtb	r3, r3
 800aa4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aa50:	b2da      	uxtb	r2, r3
 800aa52:	4b29      	ldr	r3, [pc, #164]	; (800aaf8 <xPortStartScheduler+0xd0>)
 800aa54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aa56:	4b29      	ldr	r3, [pc, #164]	; (800aafc <xPortStartScheduler+0xd4>)
 800aa58:	2207      	movs	r2, #7
 800aa5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa5c:	e009      	b.n	800aa72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800aa5e:	4b27      	ldr	r3, [pc, #156]	; (800aafc <xPortStartScheduler+0xd4>)
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	3b01      	subs	r3, #1
 800aa64:	4a25      	ldr	r2, [pc, #148]	; (800aafc <xPortStartScheduler+0xd4>)
 800aa66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aa68:	78fb      	ldrb	r3, [r7, #3]
 800aa6a:	b2db      	uxtb	r3, r3
 800aa6c:	005b      	lsls	r3, r3, #1
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aa72:	78fb      	ldrb	r3, [r7, #3]
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa7a:	2b80      	cmp	r3, #128	; 0x80
 800aa7c:	d0ef      	beq.n	800aa5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aa7e:	4b1f      	ldr	r3, [pc, #124]	; (800aafc <xPortStartScheduler+0xd4>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f1c3 0307 	rsb	r3, r3, #7
 800aa86:	2b04      	cmp	r3, #4
 800aa88:	d009      	beq.n	800aa9e <xPortStartScheduler+0x76>
 800aa8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8e:	f383 8811 	msr	BASEPRI, r3
 800aa92:	f3bf 8f6f 	isb	sy
 800aa96:	f3bf 8f4f 	dsb	sy
 800aa9a:	60bb      	str	r3, [r7, #8]
 800aa9c:	e7fe      	b.n	800aa9c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aa9e:	4b17      	ldr	r3, [pc, #92]	; (800aafc <xPortStartScheduler+0xd4>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	021b      	lsls	r3, r3, #8
 800aaa4:	4a15      	ldr	r2, [pc, #84]	; (800aafc <xPortStartScheduler+0xd4>)
 800aaa6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aaa8:	4b14      	ldr	r3, [pc, #80]	; (800aafc <xPortStartScheduler+0xd4>)
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aab0:	4a12      	ldr	r2, [pc, #72]	; (800aafc <xPortStartScheduler+0xd4>)
 800aab2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	b2da      	uxtb	r2, r3
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aabc:	4b10      	ldr	r3, [pc, #64]	; (800ab00 <xPortStartScheduler+0xd8>)
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a0f      	ldr	r2, [pc, #60]	; (800ab00 <xPortStartScheduler+0xd8>)
 800aac2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aac6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aac8:	4b0d      	ldr	r3, [pc, #52]	; (800ab00 <xPortStartScheduler+0xd8>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	4a0c      	ldr	r2, [pc, #48]	; (800ab00 <xPortStartScheduler+0xd8>)
 800aace:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aad2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aad4:	f000 f8b0 	bl	800ac38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aad8:	4b0a      	ldr	r3, [pc, #40]	; (800ab04 <xPortStartScheduler+0xdc>)
 800aada:	2200      	movs	r2, #0
 800aadc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aade:	f7ff ff93 	bl	800aa08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aae2:	f7ff fd71 	bl	800a5c8 <vTaskSwitchContext>
	prvTaskExitError();
 800aae6:	f7ff ff4f 	bl	800a988 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aaea:	2300      	movs	r3, #0
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	3710      	adds	r7, #16
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd80      	pop	{r7, pc}
 800aaf4:	e000e400 	.word	0xe000e400
 800aaf8:	20000524 	.word	0x20000524
 800aafc:	20000528 	.word	0x20000528
 800ab00:	e000ed20 	.word	0xe000ed20
 800ab04:	20000048 	.word	0x20000048

0800ab08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b083      	sub	sp, #12
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab12:	f383 8811 	msr	BASEPRI, r3
 800ab16:	f3bf 8f6f 	isb	sy
 800ab1a:	f3bf 8f4f 	dsb	sy
 800ab1e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ab20:	4b0e      	ldr	r3, [pc, #56]	; (800ab5c <vPortEnterCritical+0x54>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	3301      	adds	r3, #1
 800ab26:	4a0d      	ldr	r2, [pc, #52]	; (800ab5c <vPortEnterCritical+0x54>)
 800ab28:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ab2a:	4b0c      	ldr	r3, [pc, #48]	; (800ab5c <vPortEnterCritical+0x54>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d10e      	bne.n	800ab50 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ab32:	4b0b      	ldr	r3, [pc, #44]	; (800ab60 <vPortEnterCritical+0x58>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	b2db      	uxtb	r3, r3
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d009      	beq.n	800ab50 <vPortEnterCritical+0x48>
 800ab3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab40:	f383 8811 	msr	BASEPRI, r3
 800ab44:	f3bf 8f6f 	isb	sy
 800ab48:	f3bf 8f4f 	dsb	sy
 800ab4c:	603b      	str	r3, [r7, #0]
 800ab4e:	e7fe      	b.n	800ab4e <vPortEnterCritical+0x46>
	}
}
 800ab50:	bf00      	nop
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bc80      	pop	{r7}
 800ab58:	4770      	bx	lr
 800ab5a:	bf00      	nop
 800ab5c:	20000048 	.word	0x20000048
 800ab60:	e000ed04 	.word	0xe000ed04

0800ab64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ab64:	b480      	push	{r7}
 800ab66:	b083      	sub	sp, #12
 800ab68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ab6a:	4b10      	ldr	r3, [pc, #64]	; (800abac <vPortExitCritical+0x48>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d109      	bne.n	800ab86 <vPortExitCritical+0x22>
 800ab72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab76:	f383 8811 	msr	BASEPRI, r3
 800ab7a:	f3bf 8f6f 	isb	sy
 800ab7e:	f3bf 8f4f 	dsb	sy
 800ab82:	607b      	str	r3, [r7, #4]
 800ab84:	e7fe      	b.n	800ab84 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800ab86:	4b09      	ldr	r3, [pc, #36]	; (800abac <vPortExitCritical+0x48>)
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	3b01      	subs	r3, #1
 800ab8c:	4a07      	ldr	r2, [pc, #28]	; (800abac <vPortExitCritical+0x48>)
 800ab8e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ab90:	4b06      	ldr	r3, [pc, #24]	; (800abac <vPortExitCritical+0x48>)
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d104      	bne.n	800aba2 <vPortExitCritical+0x3e>
 800ab98:	2300      	movs	r3, #0
 800ab9a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800aba2:	bf00      	nop
 800aba4:	370c      	adds	r7, #12
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bc80      	pop	{r7}
 800abaa:	4770      	bx	lr
 800abac:	20000048 	.word	0x20000048

0800abb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800abb0:	f3ef 8009 	mrs	r0, PSP
 800abb4:	f3bf 8f6f 	isb	sy
 800abb8:	4b0d      	ldr	r3, [pc, #52]	; (800abf0 <pxCurrentTCBConst>)
 800abba:	681a      	ldr	r2, [r3, #0]
 800abbc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800abc0:	6010      	str	r0, [r2, #0]
 800abc2:	e92d 4008 	stmdb	sp!, {r3, lr}
 800abc6:	f04f 0050 	mov.w	r0, #80	; 0x50
 800abca:	f380 8811 	msr	BASEPRI, r0
 800abce:	f7ff fcfb 	bl	800a5c8 <vTaskSwitchContext>
 800abd2:	f04f 0000 	mov.w	r0, #0
 800abd6:	f380 8811 	msr	BASEPRI, r0
 800abda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800abde:	6819      	ldr	r1, [r3, #0]
 800abe0:	6808      	ldr	r0, [r1, #0]
 800abe2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800abe6:	f380 8809 	msr	PSP, r0
 800abea:	f3bf 8f6f 	isb	sy
 800abee:	4770      	bx	lr

0800abf0 <pxCurrentTCBConst>:
 800abf0:	200003f8 	.word	0x200003f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800abf4:	bf00      	nop
 800abf6:	bf00      	nop

0800abf8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
	__asm volatile
 800abfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac02:	f383 8811 	msr	BASEPRI, r3
 800ac06:	f3bf 8f6f 	isb	sy
 800ac0a:	f3bf 8f4f 	dsb	sy
 800ac0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ac10:	f7ff fc1e 	bl	800a450 <xTaskIncrementTick>
 800ac14:	4603      	mov	r3, r0
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d003      	beq.n	800ac22 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ac1a:	4b06      	ldr	r3, [pc, #24]	; (800ac34 <xPortSysTickHandler+0x3c>)
 800ac1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac20:	601a      	str	r2, [r3, #0]
 800ac22:	2300      	movs	r3, #0
 800ac24:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800ac2c:	bf00      	nop
 800ac2e:	3708      	adds	r7, #8
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd80      	pop	{r7, pc}
 800ac34:	e000ed04 	.word	0xe000ed04

0800ac38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ac38:	b480      	push	{r7}
 800ac3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ac3c:	4b0a      	ldr	r3, [pc, #40]	; (800ac68 <vPortSetupTimerInterrupt+0x30>)
 800ac3e:	2200      	movs	r2, #0
 800ac40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ac42:	4b0a      	ldr	r3, [pc, #40]	; (800ac6c <vPortSetupTimerInterrupt+0x34>)
 800ac44:	2200      	movs	r2, #0
 800ac46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ac48:	4b09      	ldr	r3, [pc, #36]	; (800ac70 <vPortSetupTimerInterrupt+0x38>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	4a09      	ldr	r2, [pc, #36]	; (800ac74 <vPortSetupTimerInterrupt+0x3c>)
 800ac4e:	fba2 2303 	umull	r2, r3, r2, r3
 800ac52:	099b      	lsrs	r3, r3, #6
 800ac54:	4a08      	ldr	r2, [pc, #32]	; (800ac78 <vPortSetupTimerInterrupt+0x40>)
 800ac56:	3b01      	subs	r3, #1
 800ac58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ac5a:	4b03      	ldr	r3, [pc, #12]	; (800ac68 <vPortSetupTimerInterrupt+0x30>)
 800ac5c:	2207      	movs	r2, #7
 800ac5e:	601a      	str	r2, [r3, #0]
}
 800ac60:	bf00      	nop
 800ac62:	46bd      	mov	sp, r7
 800ac64:	bc80      	pop	{r7}
 800ac66:	4770      	bx	lr
 800ac68:	e000e010 	.word	0xe000e010
 800ac6c:	e000e018 	.word	0xe000e018
 800ac70:	2000003c 	.word	0x2000003c
 800ac74:	10624dd3 	.word	0x10624dd3
 800ac78:	e000e014 	.word	0xe000e014

0800ac7c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	b08a      	sub	sp, #40	; 0x28
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ac84:	2300      	movs	r3, #0
 800ac86:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ac88:	f7ff fb38 	bl	800a2fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ac8c:	4b57      	ldr	r3, [pc, #348]	; (800adec <pvPortMalloc+0x170>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d101      	bne.n	800ac98 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ac94:	f000 f90c 	bl	800aeb0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ac98:	4b55      	ldr	r3, [pc, #340]	; (800adf0 <pvPortMalloc+0x174>)
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	4013      	ands	r3, r2
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f040 808c 	bne.w	800adbe <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d01c      	beq.n	800ace6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800acac:	2208      	movs	r2, #8
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	4413      	add	r3, r2
 800acb2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f003 0307 	and.w	r3, r3, #7
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d013      	beq.n	800ace6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f023 0307 	bic.w	r3, r3, #7
 800acc4:	3308      	adds	r3, #8
 800acc6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f003 0307 	and.w	r3, r3, #7
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d009      	beq.n	800ace6 <pvPortMalloc+0x6a>
	__asm volatile
 800acd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd6:	f383 8811 	msr	BASEPRI, r3
 800acda:	f3bf 8f6f 	isb	sy
 800acde:	f3bf 8f4f 	dsb	sy
 800ace2:	617b      	str	r3, [r7, #20]
 800ace4:	e7fe      	b.n	800ace4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d068      	beq.n	800adbe <pvPortMalloc+0x142>
 800acec:	4b41      	ldr	r3, [pc, #260]	; (800adf4 <pvPortMalloc+0x178>)
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	687a      	ldr	r2, [r7, #4]
 800acf2:	429a      	cmp	r2, r3
 800acf4:	d863      	bhi.n	800adbe <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800acf6:	4b40      	ldr	r3, [pc, #256]	; (800adf8 <pvPortMalloc+0x17c>)
 800acf8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800acfa:	4b3f      	ldr	r3, [pc, #252]	; (800adf8 <pvPortMalloc+0x17c>)
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad00:	e004      	b.n	800ad0c <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800ad02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad04:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ad06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ad0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d903      	bls.n	800ad1e <pvPortMalloc+0xa2>
 800ad16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1f1      	bne.n	800ad02 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ad1e:	4b33      	ldr	r3, [pc, #204]	; (800adec <pvPortMalloc+0x170>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d04a      	beq.n	800adbe <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ad28:	6a3b      	ldr	r3, [r7, #32]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	2208      	movs	r2, #8
 800ad2e:	4413      	add	r3, r2
 800ad30:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ad32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	6a3b      	ldr	r3, [r7, #32]
 800ad38:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ad3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad3c:	685a      	ldr	r2, [r3, #4]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	1ad2      	subs	r2, r2, r3
 800ad42:	2308      	movs	r3, #8
 800ad44:	005b      	lsls	r3, r3, #1
 800ad46:	429a      	cmp	r2, r3
 800ad48:	d91e      	bls.n	800ad88 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ad4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4413      	add	r3, r2
 800ad50:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ad52:	69bb      	ldr	r3, [r7, #24]
 800ad54:	f003 0307 	and.w	r3, r3, #7
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d009      	beq.n	800ad70 <pvPortMalloc+0xf4>
 800ad5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad60:	f383 8811 	msr	BASEPRI, r3
 800ad64:	f3bf 8f6f 	isb	sy
 800ad68:	f3bf 8f4f 	dsb	sy
 800ad6c:	613b      	str	r3, [r7, #16]
 800ad6e:	e7fe      	b.n	800ad6e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ad70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad72:	685a      	ldr	r2, [r3, #4]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	1ad2      	subs	r2, r2, r3
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ad7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ad82:	69b8      	ldr	r0, [r7, #24]
 800ad84:	f000 f8f6 	bl	800af74 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ad88:	4b1a      	ldr	r3, [pc, #104]	; (800adf4 <pvPortMalloc+0x178>)
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	1ad3      	subs	r3, r2, r3
 800ad92:	4a18      	ldr	r2, [pc, #96]	; (800adf4 <pvPortMalloc+0x178>)
 800ad94:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ad96:	4b17      	ldr	r3, [pc, #92]	; (800adf4 <pvPortMalloc+0x178>)
 800ad98:	681a      	ldr	r2, [r3, #0]
 800ad9a:	4b18      	ldr	r3, [pc, #96]	; (800adfc <pvPortMalloc+0x180>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	429a      	cmp	r2, r3
 800ada0:	d203      	bcs.n	800adaa <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ada2:	4b14      	ldr	r3, [pc, #80]	; (800adf4 <pvPortMalloc+0x178>)
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	4a15      	ldr	r2, [pc, #84]	; (800adfc <pvPortMalloc+0x180>)
 800ada8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800adaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adac:	685a      	ldr	r2, [r3, #4]
 800adae:	4b10      	ldr	r3, [pc, #64]	; (800adf0 <pvPortMalloc+0x174>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	431a      	orrs	r2, r3
 800adb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800adb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adba:	2200      	movs	r2, #0
 800adbc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800adbe:	f7ff faab 	bl	800a318 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	f003 0307 	and.w	r3, r3, #7
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d009      	beq.n	800ade0 <pvPortMalloc+0x164>
 800adcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add0:	f383 8811 	msr	BASEPRI, r3
 800add4:	f3bf 8f6f 	isb	sy
 800add8:	f3bf 8f4f 	dsb	sy
 800addc:	60fb      	str	r3, [r7, #12]
 800adde:	e7fe      	b.n	800adde <pvPortMalloc+0x162>
	return pvReturn;
 800ade0:	69fb      	ldr	r3, [r7, #28]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3728      	adds	r7, #40	; 0x28
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	bf00      	nop
 800adec:	20003414 	.word	0x20003414
 800adf0:	20003420 	.word	0x20003420
 800adf4:	20003418 	.word	0x20003418
 800adf8:	2000340c 	.word	0x2000340c
 800adfc:	2000341c 	.word	0x2000341c

0800ae00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b086      	sub	sp, #24
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d046      	beq.n	800aea0 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ae12:	2308      	movs	r3, #8
 800ae14:	425b      	negs	r3, r3
 800ae16:	697a      	ldr	r2, [r7, #20]
 800ae18:	4413      	add	r3, r2
 800ae1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	685a      	ldr	r2, [r3, #4]
 800ae24:	4b20      	ldr	r3, [pc, #128]	; (800aea8 <vPortFree+0xa8>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	4013      	ands	r3, r2
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d109      	bne.n	800ae42 <vPortFree+0x42>
 800ae2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae32:	f383 8811 	msr	BASEPRI, r3
 800ae36:	f3bf 8f6f 	isb	sy
 800ae3a:	f3bf 8f4f 	dsb	sy
 800ae3e:	60fb      	str	r3, [r7, #12]
 800ae40:	e7fe      	b.n	800ae40 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d009      	beq.n	800ae5e <vPortFree+0x5e>
 800ae4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae4e:	f383 8811 	msr	BASEPRI, r3
 800ae52:	f3bf 8f6f 	isb	sy
 800ae56:	f3bf 8f4f 	dsb	sy
 800ae5a:	60bb      	str	r3, [r7, #8]
 800ae5c:	e7fe      	b.n	800ae5c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	685a      	ldr	r2, [r3, #4]
 800ae62:	4b11      	ldr	r3, [pc, #68]	; (800aea8 <vPortFree+0xa8>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	4013      	ands	r3, r2
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d019      	beq.n	800aea0 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ae6c:	693b      	ldr	r3, [r7, #16]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d115      	bne.n	800aea0 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	685a      	ldr	r2, [r3, #4]
 800ae78:	4b0b      	ldr	r3, [pc, #44]	; (800aea8 <vPortFree+0xa8>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	43db      	mvns	r3, r3
 800ae7e:	401a      	ands	r2, r3
 800ae80:	693b      	ldr	r3, [r7, #16]
 800ae82:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ae84:	f7ff fa3a 	bl	800a2fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ae88:	693b      	ldr	r3, [r7, #16]
 800ae8a:	685a      	ldr	r2, [r3, #4]
 800ae8c:	4b07      	ldr	r3, [pc, #28]	; (800aeac <vPortFree+0xac>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4413      	add	r3, r2
 800ae92:	4a06      	ldr	r2, [pc, #24]	; (800aeac <vPortFree+0xac>)
 800ae94:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ae96:	6938      	ldr	r0, [r7, #16]
 800ae98:	f000 f86c 	bl	800af74 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ae9c:	f7ff fa3c 	bl	800a318 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800aea0:	bf00      	nop
 800aea2:	3718      	adds	r7, #24
 800aea4:	46bd      	mov	sp, r7
 800aea6:	bd80      	pop	{r7, pc}
 800aea8:	20003420 	.word	0x20003420
 800aeac:	20003418 	.word	0x20003418

0800aeb0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800aeb6:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800aeba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800aebc:	4b27      	ldr	r3, [pc, #156]	; (800af5c <prvHeapInit+0xac>)
 800aebe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f003 0307 	and.w	r3, r3, #7
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d00c      	beq.n	800aee4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	3307      	adds	r3, #7
 800aece:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	f023 0307 	bic.w	r3, r3, #7
 800aed6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800aed8:	68ba      	ldr	r2, [r7, #8]
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	1ad3      	subs	r3, r2, r3
 800aede:	4a1f      	ldr	r2, [pc, #124]	; (800af5c <prvHeapInit+0xac>)
 800aee0:	4413      	add	r3, r2
 800aee2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800aee8:	4a1d      	ldr	r2, [pc, #116]	; (800af60 <prvHeapInit+0xb0>)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800aeee:	4b1c      	ldr	r3, [pc, #112]	; (800af60 <prvHeapInit+0xb0>)
 800aef0:	2200      	movs	r2, #0
 800aef2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	68ba      	ldr	r2, [r7, #8]
 800aef8:	4413      	add	r3, r2
 800aefa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800aefc:	2208      	movs	r2, #8
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	1a9b      	subs	r3, r3, r2
 800af02:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	f023 0307 	bic.w	r3, r3, #7
 800af0a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	4a15      	ldr	r2, [pc, #84]	; (800af64 <prvHeapInit+0xb4>)
 800af10:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800af12:	4b14      	ldr	r3, [pc, #80]	; (800af64 <prvHeapInit+0xb4>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2200      	movs	r2, #0
 800af18:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800af1a:	4b12      	ldr	r3, [pc, #72]	; (800af64 <prvHeapInit+0xb4>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2200      	movs	r2, #0
 800af20:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	68fa      	ldr	r2, [r7, #12]
 800af2a:	1ad2      	subs	r2, r2, r3
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800af30:	4b0c      	ldr	r3, [pc, #48]	; (800af64 <prvHeapInit+0xb4>)
 800af32:	681a      	ldr	r2, [r3, #0]
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	4a0a      	ldr	r2, [pc, #40]	; (800af68 <prvHeapInit+0xb8>)
 800af3e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	4a09      	ldr	r2, [pc, #36]	; (800af6c <prvHeapInit+0xbc>)
 800af46:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800af48:	4b09      	ldr	r3, [pc, #36]	; (800af70 <prvHeapInit+0xc0>)
 800af4a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800af4e:	601a      	str	r2, [r3, #0]
}
 800af50:	bf00      	nop
 800af52:	3714      	adds	r7, #20
 800af54:	46bd      	mov	sp, r7
 800af56:	bc80      	pop	{r7}
 800af58:	4770      	bx	lr
 800af5a:	bf00      	nop
 800af5c:	2000052c 	.word	0x2000052c
 800af60:	2000340c 	.word	0x2000340c
 800af64:	20003414 	.word	0x20003414
 800af68:	2000341c 	.word	0x2000341c
 800af6c:	20003418 	.word	0x20003418
 800af70:	20003420 	.word	0x20003420

0800af74 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800af74:	b480      	push	{r7}
 800af76:	b085      	sub	sp, #20
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800af7c:	4b27      	ldr	r3, [pc, #156]	; (800b01c <prvInsertBlockIntoFreeList+0xa8>)
 800af7e:	60fb      	str	r3, [r7, #12]
 800af80:	e002      	b.n	800af88 <prvInsertBlockIntoFreeList+0x14>
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	60fb      	str	r3, [r7, #12]
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	687a      	ldr	r2, [r7, #4]
 800af8e:	429a      	cmp	r2, r3
 800af90:	d8f7      	bhi.n	800af82 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	68ba      	ldr	r2, [r7, #8]
 800af9c:	4413      	add	r3, r2
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d108      	bne.n	800afb6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	685a      	ldr	r2, [r3, #4]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	441a      	add	r2, r3
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	68ba      	ldr	r2, [r7, #8]
 800afc0:	441a      	add	r2, r3
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d118      	bne.n	800affc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	4b14      	ldr	r3, [pc, #80]	; (800b020 <prvInsertBlockIntoFreeList+0xac>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	429a      	cmp	r2, r3
 800afd4:	d00d      	beq.n	800aff2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	685a      	ldr	r2, [r3, #4]
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	685b      	ldr	r3, [r3, #4]
 800afe0:	441a      	add	r2, r3
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	601a      	str	r2, [r3, #0]
 800aff0:	e008      	b.n	800b004 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aff2:	4b0b      	ldr	r3, [pc, #44]	; (800b020 <prvInsertBlockIntoFreeList+0xac>)
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	601a      	str	r2, [r3, #0]
 800affa:	e003      	b.n	800b004 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b004:	68fa      	ldr	r2, [r7, #12]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	429a      	cmp	r2, r3
 800b00a:	d002      	beq.n	800b012 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b012:	bf00      	nop
 800b014:	3714      	adds	r7, #20
 800b016:	46bd      	mov	sp, r7
 800b018:	bc80      	pop	{r7}
 800b01a:	4770      	bx	lr
 800b01c:	2000340c 	.word	0x2000340c
 800b020:	20003414 	.word	0x20003414

0800b024 <__errno>:
 800b024:	4b01      	ldr	r3, [pc, #4]	; (800b02c <__errno+0x8>)
 800b026:	6818      	ldr	r0, [r3, #0]
 800b028:	4770      	bx	lr
 800b02a:	bf00      	nop
 800b02c:	2000004c 	.word	0x2000004c

0800b030 <__libc_init_array>:
 800b030:	b570      	push	{r4, r5, r6, lr}
 800b032:	2500      	movs	r5, #0
 800b034:	4e0c      	ldr	r6, [pc, #48]	; (800b068 <__libc_init_array+0x38>)
 800b036:	4c0d      	ldr	r4, [pc, #52]	; (800b06c <__libc_init_array+0x3c>)
 800b038:	1ba4      	subs	r4, r4, r6
 800b03a:	10a4      	asrs	r4, r4, #2
 800b03c:	42a5      	cmp	r5, r4
 800b03e:	d109      	bne.n	800b054 <__libc_init_array+0x24>
 800b040:	f004 f938 	bl	800f2b4 <_init>
 800b044:	2500      	movs	r5, #0
 800b046:	4e0a      	ldr	r6, [pc, #40]	; (800b070 <__libc_init_array+0x40>)
 800b048:	4c0a      	ldr	r4, [pc, #40]	; (800b074 <__libc_init_array+0x44>)
 800b04a:	1ba4      	subs	r4, r4, r6
 800b04c:	10a4      	asrs	r4, r4, #2
 800b04e:	42a5      	cmp	r5, r4
 800b050:	d105      	bne.n	800b05e <__libc_init_array+0x2e>
 800b052:	bd70      	pop	{r4, r5, r6, pc}
 800b054:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b058:	4798      	blx	r3
 800b05a:	3501      	adds	r5, #1
 800b05c:	e7ee      	b.n	800b03c <__libc_init_array+0xc>
 800b05e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b062:	4798      	blx	r3
 800b064:	3501      	adds	r5, #1
 800b066:	e7f2      	b.n	800b04e <__libc_init_array+0x1e>
 800b068:	0800f9d8 	.word	0x0800f9d8
 800b06c:	0800f9d8 	.word	0x0800f9d8
 800b070:	0800f9d8 	.word	0x0800f9d8
 800b074:	0800f9dc 	.word	0x0800f9dc

0800b078 <memset>:
 800b078:	4603      	mov	r3, r0
 800b07a:	4402      	add	r2, r0
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d100      	bne.n	800b082 <memset+0xa>
 800b080:	4770      	bx	lr
 800b082:	f803 1b01 	strb.w	r1, [r3], #1
 800b086:	e7f9      	b.n	800b07c <memset+0x4>

0800b088 <cos>:
 800b088:	b530      	push	{r4, r5, lr}
 800b08a:	4a18      	ldr	r2, [pc, #96]	; (800b0ec <cos+0x64>)
 800b08c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b090:	4293      	cmp	r3, r2
 800b092:	b087      	sub	sp, #28
 800b094:	dc04      	bgt.n	800b0a0 <cos+0x18>
 800b096:	2200      	movs	r2, #0
 800b098:	2300      	movs	r3, #0
 800b09a:	f002 fb95 	bl	800d7c8 <__kernel_cos>
 800b09e:	e006      	b.n	800b0ae <cos+0x26>
 800b0a0:	4a13      	ldr	r2, [pc, #76]	; (800b0f0 <cos+0x68>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	dd05      	ble.n	800b0b2 <cos+0x2a>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	f7f5 f855 	bl	8000158 <__aeabi_dsub>
 800b0ae:	b007      	add	sp, #28
 800b0b0:	bd30      	pop	{r4, r5, pc}
 800b0b2:	aa02      	add	r2, sp, #8
 800b0b4:	f001 fa20 	bl	800c4f8 <__ieee754_rem_pio2>
 800b0b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0bc:	f000 0403 	and.w	r4, r0, #3
 800b0c0:	2c01      	cmp	r4, #1
 800b0c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b0c6:	d008      	beq.n	800b0da <cos+0x52>
 800b0c8:	2c02      	cmp	r4, #2
 800b0ca:	d00c      	beq.n	800b0e6 <cos+0x5e>
 800b0cc:	2c00      	cmp	r4, #0
 800b0ce:	d0e4      	beq.n	800b09a <cos+0x12>
 800b0d0:	2401      	movs	r4, #1
 800b0d2:	9400      	str	r4, [sp, #0]
 800b0d4:	f002 ff80 	bl	800dfd8 <__kernel_sin>
 800b0d8:	e7e9      	b.n	800b0ae <cos+0x26>
 800b0da:	9400      	str	r4, [sp, #0]
 800b0dc:	f002 ff7c 	bl	800dfd8 <__kernel_sin>
 800b0e0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800b0e4:	e7e3      	b.n	800b0ae <cos+0x26>
 800b0e6:	f002 fb6f 	bl	800d7c8 <__kernel_cos>
 800b0ea:	e7f9      	b.n	800b0e0 <cos+0x58>
 800b0ec:	3fe921fb 	.word	0x3fe921fb
 800b0f0:	7fefffff 	.word	0x7fefffff

0800b0f4 <cosf>:
 800b0f4:	b507      	push	{r0, r1, r2, lr}
 800b0f6:	4a18      	ldr	r2, [pc, #96]	; (800b158 <cosf+0x64>)
 800b0f8:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	4601      	mov	r1, r0
 800b100:	dc03      	bgt.n	800b10a <cosf+0x16>
 800b102:	2100      	movs	r1, #0
 800b104:	f003 f81e 	bl	800e144 <__kernel_cosf>
 800b108:	e004      	b.n	800b114 <cosf+0x20>
 800b10a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b10e:	db04      	blt.n	800b11a <cosf+0x26>
 800b110:	f7f5 fd06 	bl	8000b20 <__aeabi_fsub>
 800b114:	b003      	add	sp, #12
 800b116:	f85d fb04 	ldr.w	pc, [sp], #4
 800b11a:	4669      	mov	r1, sp
 800b11c:	f002 f9a6 	bl	800d46c <__ieee754_rem_pio2f>
 800b120:	f000 0203 	and.w	r2, r0, #3
 800b124:	2a01      	cmp	r2, #1
 800b126:	d005      	beq.n	800b134 <cosf+0x40>
 800b128:	2a02      	cmp	r2, #2
 800b12a:	d00a      	beq.n	800b142 <cosf+0x4e>
 800b12c:	b972      	cbnz	r2, 800b14c <cosf+0x58>
 800b12e:	9901      	ldr	r1, [sp, #4]
 800b130:	9800      	ldr	r0, [sp, #0]
 800b132:	e7e7      	b.n	800b104 <cosf+0x10>
 800b134:	9901      	ldr	r1, [sp, #4]
 800b136:	9800      	ldr	r0, [sp, #0]
 800b138:	f003 fb22 	bl	800e780 <__kernel_sinf>
 800b13c:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b140:	e7e8      	b.n	800b114 <cosf+0x20>
 800b142:	9901      	ldr	r1, [sp, #4]
 800b144:	9800      	ldr	r0, [sp, #0]
 800b146:	f002 fffd 	bl	800e144 <__kernel_cosf>
 800b14a:	e7f7      	b.n	800b13c <cosf+0x48>
 800b14c:	2201      	movs	r2, #1
 800b14e:	9901      	ldr	r1, [sp, #4]
 800b150:	9800      	ldr	r0, [sp, #0]
 800b152:	f003 fb15 	bl	800e780 <__kernel_sinf>
 800b156:	e7dd      	b.n	800b114 <cosf+0x20>
 800b158:	3f490fd8 	.word	0x3f490fd8

0800b15c <sinf>:
 800b15c:	b507      	push	{r0, r1, r2, lr}
 800b15e:	4a19      	ldr	r2, [pc, #100]	; (800b1c4 <sinf+0x68>)
 800b160:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800b164:	4293      	cmp	r3, r2
 800b166:	4601      	mov	r1, r0
 800b168:	dc04      	bgt.n	800b174 <sinf+0x18>
 800b16a:	2200      	movs	r2, #0
 800b16c:	2100      	movs	r1, #0
 800b16e:	f003 fb07 	bl	800e780 <__kernel_sinf>
 800b172:	e004      	b.n	800b17e <sinf+0x22>
 800b174:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b178:	db04      	blt.n	800b184 <sinf+0x28>
 800b17a:	f7f5 fcd1 	bl	8000b20 <__aeabi_fsub>
 800b17e:	b003      	add	sp, #12
 800b180:	f85d fb04 	ldr.w	pc, [sp], #4
 800b184:	4669      	mov	r1, sp
 800b186:	f002 f971 	bl	800d46c <__ieee754_rem_pio2f>
 800b18a:	f000 0003 	and.w	r0, r0, #3
 800b18e:	2801      	cmp	r0, #1
 800b190:	d006      	beq.n	800b1a0 <sinf+0x44>
 800b192:	2802      	cmp	r0, #2
 800b194:	d009      	beq.n	800b1aa <sinf+0x4e>
 800b196:	b980      	cbnz	r0, 800b1ba <sinf+0x5e>
 800b198:	2201      	movs	r2, #1
 800b19a:	9901      	ldr	r1, [sp, #4]
 800b19c:	9800      	ldr	r0, [sp, #0]
 800b19e:	e7e6      	b.n	800b16e <sinf+0x12>
 800b1a0:	9901      	ldr	r1, [sp, #4]
 800b1a2:	9800      	ldr	r0, [sp, #0]
 800b1a4:	f002 ffce 	bl	800e144 <__kernel_cosf>
 800b1a8:	e7e9      	b.n	800b17e <sinf+0x22>
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	9901      	ldr	r1, [sp, #4]
 800b1ae:	9800      	ldr	r0, [sp, #0]
 800b1b0:	f003 fae6 	bl	800e780 <__kernel_sinf>
 800b1b4:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800b1b8:	e7e1      	b.n	800b17e <sinf+0x22>
 800b1ba:	9901      	ldr	r1, [sp, #4]
 800b1bc:	9800      	ldr	r0, [sp, #0]
 800b1be:	f002 ffc1 	bl	800e144 <__kernel_cosf>
 800b1c2:	e7f7      	b.n	800b1b4 <sinf+0x58>
 800b1c4:	3f490fd8 	.word	0x3f490fd8

0800b1c8 <atan2>:
 800b1c8:	f000 bbaa 	b.w	800b920 <__ieee754_atan2>

0800b1cc <pow>:
 800b1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d0:	b08f      	sub	sp, #60	; 0x3c
 800b1d2:	461d      	mov	r5, r3
 800b1d4:	4680      	mov	r8, r0
 800b1d6:	4689      	mov	r9, r1
 800b1d8:	4614      	mov	r4, r2
 800b1da:	f000 fc81 	bl	800bae0 <__ieee754_pow>
 800b1de:	4fa1      	ldr	r7, [pc, #644]	; (800b464 <pow+0x298>)
 800b1e0:	e9cd 0100 	strd	r0, r1, [sp]
 800b1e4:	f997 3000 	ldrsb.w	r3, [r7]
 800b1e8:	463e      	mov	r6, r7
 800b1ea:	9302      	str	r3, [sp, #8]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	d05f      	beq.n	800b2b0 <pow+0xe4>
 800b1f0:	4622      	mov	r2, r4
 800b1f2:	462b      	mov	r3, r5
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	f7f5 fc00 	bl	80009fc <__aeabi_dcmpun>
 800b1fc:	4682      	mov	sl, r0
 800b1fe:	2800      	cmp	r0, #0
 800b200:	d156      	bne.n	800b2b0 <pow+0xe4>
 800b202:	4642      	mov	r2, r8
 800b204:	464b      	mov	r3, r9
 800b206:	4640      	mov	r0, r8
 800b208:	4649      	mov	r1, r9
 800b20a:	f7f5 fbf7 	bl	80009fc <__aeabi_dcmpun>
 800b20e:	9003      	str	r0, [sp, #12]
 800b210:	b1e8      	cbz	r0, 800b24e <pow+0x82>
 800b212:	2200      	movs	r2, #0
 800b214:	2300      	movs	r3, #0
 800b216:	4620      	mov	r0, r4
 800b218:	4629      	mov	r1, r5
 800b21a:	f7f5 fbbd 	bl	8000998 <__aeabi_dcmpeq>
 800b21e:	2800      	cmp	r0, #0
 800b220:	d046      	beq.n	800b2b0 <pow+0xe4>
 800b222:	2301      	movs	r3, #1
 800b224:	2200      	movs	r2, #0
 800b226:	9304      	str	r3, [sp, #16]
 800b228:	4b8f      	ldr	r3, [pc, #572]	; (800b468 <pow+0x29c>)
 800b22a:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 800b22e:	9305      	str	r3, [sp, #20]
 800b230:	4b8e      	ldr	r3, [pc, #568]	; (800b46c <pow+0x2a0>)
 800b232:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800b236:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b23a:	9b02      	ldr	r3, [sp, #8]
 800b23c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800b240:	2b02      	cmp	r3, #2
 800b242:	d031      	beq.n	800b2a8 <pow+0xdc>
 800b244:	a804      	add	r0, sp, #16
 800b246:	f003 fd2b 	bl	800eca0 <matherr>
 800b24a:	bb38      	cbnz	r0, 800b29c <pow+0xd0>
 800b24c:	e058      	b.n	800b300 <pow+0x134>
 800b24e:	f04f 0a00 	mov.w	sl, #0
 800b252:	f04f 0b00 	mov.w	fp, #0
 800b256:	4652      	mov	r2, sl
 800b258:	465b      	mov	r3, fp
 800b25a:	4640      	mov	r0, r8
 800b25c:	4649      	mov	r1, r9
 800b25e:	f7f5 fb9b 	bl	8000998 <__aeabi_dcmpeq>
 800b262:	2800      	cmp	r0, #0
 800b264:	d051      	beq.n	800b30a <pow+0x13e>
 800b266:	4652      	mov	r2, sl
 800b268:	465b      	mov	r3, fp
 800b26a:	4620      	mov	r0, r4
 800b26c:	4629      	mov	r1, r5
 800b26e:	f7f5 fb93 	bl	8000998 <__aeabi_dcmpeq>
 800b272:	4606      	mov	r6, r0
 800b274:	b308      	cbz	r0, 800b2ba <pow+0xee>
 800b276:	2301      	movs	r3, #1
 800b278:	9304      	str	r3, [sp, #16]
 800b27a:	4b7b      	ldr	r3, [pc, #492]	; (800b468 <pow+0x29c>)
 800b27c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800b280:	9305      	str	r3, [sp, #20]
 800b282:	9b03      	ldr	r3, [sp, #12]
 800b284:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800b288:	930c      	str	r3, [sp, #48]	; 0x30
 800b28a:	9b02      	ldr	r3, [sp, #8]
 800b28c:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800b290:	2b00      	cmp	r3, #0
 800b292:	d0d7      	beq.n	800b244 <pow+0x78>
 800b294:	2200      	movs	r2, #0
 800b296:	4b75      	ldr	r3, [pc, #468]	; (800b46c <pow+0x2a0>)
 800b298:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b29c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b29e:	b11b      	cbz	r3, 800b2a8 <pow+0xdc>
 800b2a0:	f7ff fec0 	bl	800b024 <__errno>
 800b2a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b2a6:	6003      	str	r3, [r0, #0]
 800b2a8:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	; 0x28
 800b2ac:	e9cd 3400 	strd	r3, r4, [sp]
 800b2b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b2b4:	b00f      	add	sp, #60	; 0x3c
 800b2b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	4629      	mov	r1, r5
 800b2be:	f003 fc65 	bl	800eb8c <finite>
 800b2c2:	2800      	cmp	r0, #0
 800b2c4:	d0f4      	beq.n	800b2b0 <pow+0xe4>
 800b2c6:	4652      	mov	r2, sl
 800b2c8:	465b      	mov	r3, fp
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	4629      	mov	r1, r5
 800b2ce:	f7f5 fb6d 	bl	80009ac <__aeabi_dcmplt>
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	d0ec      	beq.n	800b2b0 <pow+0xe4>
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	9304      	str	r3, [sp, #16]
 800b2da:	4b63      	ldr	r3, [pc, #396]	; (800b468 <pow+0x29c>)
 800b2dc:	960c      	str	r6, [sp, #48]	; 0x30
 800b2de:	9305      	str	r3, [sp, #20]
 800b2e0:	f997 3000 	ldrsb.w	r3, [r7]
 800b2e4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800b2e8:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800b2ec:	b913      	cbnz	r3, 800b2f4 <pow+0x128>
 800b2ee:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800b2f2:	e7a7      	b.n	800b244 <pow+0x78>
 800b2f4:	2000      	movs	r0, #0
 800b2f6:	495e      	ldr	r1, [pc, #376]	; (800b470 <pow+0x2a4>)
 800b2f8:	2b02      	cmp	r3, #2
 800b2fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b2fe:	d1a1      	bne.n	800b244 <pow+0x78>
 800b300:	f7ff fe90 	bl	800b024 <__errno>
 800b304:	2321      	movs	r3, #33	; 0x21
 800b306:	6003      	str	r3, [r0, #0]
 800b308:	e7c8      	b.n	800b29c <pow+0xd0>
 800b30a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b30e:	f003 fc3d 	bl	800eb8c <finite>
 800b312:	9002      	str	r0, [sp, #8]
 800b314:	2800      	cmp	r0, #0
 800b316:	d177      	bne.n	800b408 <pow+0x23c>
 800b318:	4640      	mov	r0, r8
 800b31a:	4649      	mov	r1, r9
 800b31c:	f003 fc36 	bl	800eb8c <finite>
 800b320:	2800      	cmp	r0, #0
 800b322:	d071      	beq.n	800b408 <pow+0x23c>
 800b324:	4620      	mov	r0, r4
 800b326:	4629      	mov	r1, r5
 800b328:	f003 fc30 	bl	800eb8c <finite>
 800b32c:	2800      	cmp	r0, #0
 800b32e:	d06b      	beq.n	800b408 <pow+0x23c>
 800b330:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b334:	4619      	mov	r1, r3
 800b336:	4610      	mov	r0, r2
 800b338:	f7f5 fb60 	bl	80009fc <__aeabi_dcmpun>
 800b33c:	f997 7000 	ldrsb.w	r7, [r7]
 800b340:	4b49      	ldr	r3, [pc, #292]	; (800b468 <pow+0x29c>)
 800b342:	b1a0      	cbz	r0, 800b36e <pow+0x1a2>
 800b344:	2201      	movs	r2, #1
 800b346:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b34a:	9b02      	ldr	r3, [sp, #8]
 800b34c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800b350:	930c      	str	r3, [sp, #48]	; 0x30
 800b352:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800b356:	2f00      	cmp	r7, #0
 800b358:	d0c9      	beq.n	800b2ee <pow+0x122>
 800b35a:	4652      	mov	r2, sl
 800b35c:	465b      	mov	r3, fp
 800b35e:	4650      	mov	r0, sl
 800b360:	4659      	mov	r1, fp
 800b362:	f7f5 f9db 	bl	800071c <__aeabi_ddiv>
 800b366:	2f02      	cmp	r7, #2
 800b368:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800b36c:	e7c7      	b.n	800b2fe <pow+0x132>
 800b36e:	2203      	movs	r2, #3
 800b370:	900c      	str	r0, [sp, #48]	; 0x30
 800b372:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b376:	4620      	mov	r0, r4
 800b378:	4629      	mov	r1, r5
 800b37a:	2200      	movs	r2, #0
 800b37c:	4b3d      	ldr	r3, [pc, #244]	; (800b474 <pow+0x2a8>)
 800b37e:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800b382:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800b386:	f7f5 f89f 	bl	80004c8 <__aeabi_dmul>
 800b38a:	4604      	mov	r4, r0
 800b38c:	460d      	mov	r5, r1
 800b38e:	bb17      	cbnz	r7, 800b3d6 <pow+0x20a>
 800b390:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b394:	4b38      	ldr	r3, [pc, #224]	; (800b478 <pow+0x2ac>)
 800b396:	4640      	mov	r0, r8
 800b398:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b39c:	4649      	mov	r1, r9
 800b39e:	4652      	mov	r2, sl
 800b3a0:	465b      	mov	r3, fp
 800b3a2:	f7f5 fb03 	bl	80009ac <__aeabi_dcmplt>
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	d054      	beq.n	800b454 <pow+0x288>
 800b3aa:	4620      	mov	r0, r4
 800b3ac:	4629      	mov	r1, r5
 800b3ae:	f003 fc7f 	bl	800ecb0 <rint>
 800b3b2:	4622      	mov	r2, r4
 800b3b4:	462b      	mov	r3, r5
 800b3b6:	f7f5 faef 	bl	8000998 <__aeabi_dcmpeq>
 800b3ba:	b920      	cbnz	r0, 800b3c6 <pow+0x1fa>
 800b3bc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b3c0:	4b2e      	ldr	r3, [pc, #184]	; (800b47c <pow+0x2b0>)
 800b3c2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b3c6:	f996 3000 	ldrsb.w	r3, [r6]
 800b3ca:	2b02      	cmp	r3, #2
 800b3cc:	d142      	bne.n	800b454 <pow+0x288>
 800b3ce:	f7ff fe29 	bl	800b024 <__errno>
 800b3d2:	2322      	movs	r3, #34	; 0x22
 800b3d4:	e797      	b.n	800b306 <pow+0x13a>
 800b3d6:	2200      	movs	r2, #0
 800b3d8:	4b29      	ldr	r3, [pc, #164]	; (800b480 <pow+0x2b4>)
 800b3da:	4640      	mov	r0, r8
 800b3dc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800b3e0:	4649      	mov	r1, r9
 800b3e2:	4652      	mov	r2, sl
 800b3e4:	465b      	mov	r3, fp
 800b3e6:	f7f5 fae1 	bl	80009ac <__aeabi_dcmplt>
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	d0eb      	beq.n	800b3c6 <pow+0x1fa>
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	4629      	mov	r1, r5
 800b3f2:	f003 fc5d 	bl	800ecb0 <rint>
 800b3f6:	4622      	mov	r2, r4
 800b3f8:	462b      	mov	r3, r5
 800b3fa:	f7f5 facd 	bl	8000998 <__aeabi_dcmpeq>
 800b3fe:	2800      	cmp	r0, #0
 800b400:	d1e1      	bne.n	800b3c6 <pow+0x1fa>
 800b402:	2200      	movs	r2, #0
 800b404:	4b1a      	ldr	r3, [pc, #104]	; (800b470 <pow+0x2a4>)
 800b406:	e7dc      	b.n	800b3c2 <pow+0x1f6>
 800b408:	2200      	movs	r2, #0
 800b40a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b40e:	2300      	movs	r3, #0
 800b410:	f7f5 fac2 	bl	8000998 <__aeabi_dcmpeq>
 800b414:	2800      	cmp	r0, #0
 800b416:	f43f af4b 	beq.w	800b2b0 <pow+0xe4>
 800b41a:	4640      	mov	r0, r8
 800b41c:	4649      	mov	r1, r9
 800b41e:	f003 fbb5 	bl	800eb8c <finite>
 800b422:	2800      	cmp	r0, #0
 800b424:	f43f af44 	beq.w	800b2b0 <pow+0xe4>
 800b428:	4620      	mov	r0, r4
 800b42a:	4629      	mov	r1, r5
 800b42c:	f003 fbae 	bl	800eb8c <finite>
 800b430:	2800      	cmp	r0, #0
 800b432:	f43f af3d 	beq.w	800b2b0 <pow+0xe4>
 800b436:	2304      	movs	r3, #4
 800b438:	9304      	str	r3, [sp, #16]
 800b43a:	4b0b      	ldr	r3, [pc, #44]	; (800b468 <pow+0x29c>)
 800b43c:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800b440:	9305      	str	r3, [sp, #20]
 800b442:	2300      	movs	r3, #0
 800b444:	2400      	movs	r4, #0
 800b446:	930c      	str	r3, [sp, #48]	; 0x30
 800b448:	2300      	movs	r3, #0
 800b44a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800b44e:	e9cd 340a 	strd	r3, r4, [sp, #40]	; 0x28
 800b452:	e7b8      	b.n	800b3c6 <pow+0x1fa>
 800b454:	a804      	add	r0, sp, #16
 800b456:	f003 fc23 	bl	800eca0 <matherr>
 800b45a:	2800      	cmp	r0, #0
 800b45c:	f47f af1e 	bne.w	800b29c <pow+0xd0>
 800b460:	e7b5      	b.n	800b3ce <pow+0x202>
 800b462:	bf00      	nop
 800b464:	200000b0 	.word	0x200000b0
 800b468:	0800f354 	.word	0x0800f354
 800b46c:	3ff00000 	.word	0x3ff00000
 800b470:	fff00000 	.word	0xfff00000
 800b474:	3fe00000 	.word	0x3fe00000
 800b478:	47efffff 	.word	0x47efffff
 800b47c:	c7efffff 	.word	0xc7efffff
 800b480:	7ff00000 	.word	0x7ff00000

0800b484 <sqrt>:
 800b484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b488:	b08b      	sub	sp, #44	; 0x2c
 800b48a:	4604      	mov	r4, r0
 800b48c:	460d      	mov	r5, r1
 800b48e:	f001 fa23 	bl	800c8d8 <__ieee754_sqrt>
 800b492:	4b24      	ldr	r3, [pc, #144]	; (800b524 <sqrt+0xa0>)
 800b494:	4680      	mov	r8, r0
 800b496:	f993 a000 	ldrsb.w	sl, [r3]
 800b49a:	4689      	mov	r9, r1
 800b49c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800b4a0:	d02b      	beq.n	800b4fa <sqrt+0x76>
 800b4a2:	4622      	mov	r2, r4
 800b4a4:	462b      	mov	r3, r5
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	4629      	mov	r1, r5
 800b4aa:	f7f5 faa7 	bl	80009fc <__aeabi_dcmpun>
 800b4ae:	4683      	mov	fp, r0
 800b4b0:	bb18      	cbnz	r0, 800b4fa <sqrt+0x76>
 800b4b2:	2600      	movs	r6, #0
 800b4b4:	2700      	movs	r7, #0
 800b4b6:	4632      	mov	r2, r6
 800b4b8:	463b      	mov	r3, r7
 800b4ba:	4620      	mov	r0, r4
 800b4bc:	4629      	mov	r1, r5
 800b4be:	f7f5 fa75 	bl	80009ac <__aeabi_dcmplt>
 800b4c2:	b1d0      	cbz	r0, 800b4fa <sqrt+0x76>
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	9300      	str	r3, [sp, #0]
 800b4c8:	4b17      	ldr	r3, [pc, #92]	; (800b528 <sqrt+0xa4>)
 800b4ca:	f8cd b020 	str.w	fp, [sp, #32]
 800b4ce:	9301      	str	r3, [sp, #4]
 800b4d0:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b4d4:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b4d8:	f1ba 0f00 	cmp.w	sl, #0
 800b4dc:	d112      	bne.n	800b504 <sqrt+0x80>
 800b4de:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b4e2:	4668      	mov	r0, sp
 800b4e4:	f003 fbdc 	bl	800eca0 <matherr>
 800b4e8:	b1b8      	cbz	r0, 800b51a <sqrt+0x96>
 800b4ea:	9b08      	ldr	r3, [sp, #32]
 800b4ec:	b11b      	cbz	r3, 800b4f6 <sqrt+0x72>
 800b4ee:	f7ff fd99 	bl	800b024 <__errno>
 800b4f2:	9b08      	ldr	r3, [sp, #32]
 800b4f4:	6003      	str	r3, [r0, #0]
 800b4f6:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 800b4fa:	4640      	mov	r0, r8
 800b4fc:	4649      	mov	r1, r9
 800b4fe:	b00b      	add	sp, #44	; 0x2c
 800b500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b504:	4632      	mov	r2, r6
 800b506:	463b      	mov	r3, r7
 800b508:	4630      	mov	r0, r6
 800b50a:	4639      	mov	r1, r7
 800b50c:	f7f5 f906 	bl	800071c <__aeabi_ddiv>
 800b510:	f1ba 0f02 	cmp.w	sl, #2
 800b514:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b518:	d1e3      	bne.n	800b4e2 <sqrt+0x5e>
 800b51a:	f7ff fd83 	bl	800b024 <__errno>
 800b51e:	2321      	movs	r3, #33	; 0x21
 800b520:	6003      	str	r3, [r0, #0]
 800b522:	e7e2      	b.n	800b4ea <sqrt+0x66>
 800b524:	200000b0 	.word	0x200000b0
 800b528:	0800f358 	.word	0x0800f358

0800b52c <asinf>:
 800b52c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b52e:	b08b      	sub	sp, #44	; 0x2c
 800b530:	4604      	mov	r4, r0
 800b532:	f001 fa7d 	bl	800ca30 <__ieee754_asinf>
 800b536:	4e21      	ldr	r6, [pc, #132]	; (800b5bc <asinf+0x90>)
 800b538:	4605      	mov	r5, r0
 800b53a:	f996 3000 	ldrsb.w	r3, [r6]
 800b53e:	3301      	adds	r3, #1
 800b540:	d038      	beq.n	800b5b4 <asinf+0x88>
 800b542:	4621      	mov	r1, r4
 800b544:	4620      	mov	r0, r4
 800b546:	f7f5 fdbb 	bl	80010c0 <__aeabi_fcmpun>
 800b54a:	4607      	mov	r7, r0
 800b54c:	2800      	cmp	r0, #0
 800b54e:	d131      	bne.n	800b5b4 <asinf+0x88>
 800b550:	4620      	mov	r0, r4
 800b552:	f003 fdb3 	bl	800f0bc <fabsf>
 800b556:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800b55a:	f7f5 fda7 	bl	80010ac <__aeabi_fcmpgt>
 800b55e:	b348      	cbz	r0, 800b5b4 <asinf+0x88>
 800b560:	2301      	movs	r3, #1
 800b562:	9300      	str	r3, [sp, #0]
 800b564:	4b16      	ldr	r3, [pc, #88]	; (800b5c0 <asinf+0x94>)
 800b566:	4620      	mov	r0, r4
 800b568:	9301      	str	r3, [sp, #4]
 800b56a:	9708      	str	r7, [sp, #32]
 800b56c:	f7f4 ff54 	bl	8000418 <__aeabi_f2d>
 800b570:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b574:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b578:	4812      	ldr	r0, [pc, #72]	; (800b5c4 <asinf+0x98>)
 800b57a:	f003 fb93 	bl	800eca4 <nan>
 800b57e:	f996 3000 	ldrsb.w	r3, [r6]
 800b582:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b586:	2b02      	cmp	r3, #2
 800b588:	d104      	bne.n	800b594 <asinf+0x68>
 800b58a:	f7ff fd4b 	bl	800b024 <__errno>
 800b58e:	2321      	movs	r3, #33	; 0x21
 800b590:	6003      	str	r3, [r0, #0]
 800b592:	e004      	b.n	800b59e <asinf+0x72>
 800b594:	4668      	mov	r0, sp
 800b596:	f003 fb83 	bl	800eca0 <matherr>
 800b59a:	2800      	cmp	r0, #0
 800b59c:	d0f5      	beq.n	800b58a <asinf+0x5e>
 800b59e:	9b08      	ldr	r3, [sp, #32]
 800b5a0:	b11b      	cbz	r3, 800b5aa <asinf+0x7e>
 800b5a2:	f7ff fd3f 	bl	800b024 <__errno>
 800b5a6:	9b08      	ldr	r3, [sp, #32]
 800b5a8:	6003      	str	r3, [r0, #0]
 800b5aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b5ae:	f7f5 fa63 	bl	8000a78 <__aeabi_d2f>
 800b5b2:	4605      	mov	r5, r0
 800b5b4:	4628      	mov	r0, r5
 800b5b6:	b00b      	add	sp, #44	; 0x2c
 800b5b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b5ba:	bf00      	nop
 800b5bc:	200000b0 	.word	0x200000b0
 800b5c0:	0800f35d 	.word	0x0800f35d
 800b5c4:	0800f362 	.word	0x0800f362

0800b5c8 <atan2f>:
 800b5c8:	f001 bb74 	b.w	800ccb4 <__ieee754_atan2f>

0800b5cc <powf>:
 800b5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d0:	b08d      	sub	sp, #52	; 0x34
 800b5d2:	4605      	mov	r5, r0
 800b5d4:	460c      	mov	r4, r1
 800b5d6:	f001 fbfd 	bl	800cdd4 <__ieee754_powf>
 800b5da:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 800b888 <powf+0x2bc>
 800b5de:	4606      	mov	r6, r0
 800b5e0:	f998 9000 	ldrsb.w	r9, [r8]
 800b5e4:	4647      	mov	r7, r8
 800b5e6:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800b5ea:	d060      	beq.n	800b6ae <powf+0xe2>
 800b5ec:	4621      	mov	r1, r4
 800b5ee:	4620      	mov	r0, r4
 800b5f0:	f7f5 fd66 	bl	80010c0 <__aeabi_fcmpun>
 800b5f4:	4683      	mov	fp, r0
 800b5f6:	2800      	cmp	r0, #0
 800b5f8:	d159      	bne.n	800b6ae <powf+0xe2>
 800b5fa:	4629      	mov	r1, r5
 800b5fc:	4628      	mov	r0, r5
 800b5fe:	f7f5 fd5f 	bl	80010c0 <__aeabi_fcmpun>
 800b602:	2100      	movs	r1, #0
 800b604:	4682      	mov	sl, r0
 800b606:	b300      	cbz	r0, 800b64a <powf+0x7e>
 800b608:	4620      	mov	r0, r4
 800b60a:	f7f5 fd27 	bl	800105c <__aeabi_fcmpeq>
 800b60e:	2800      	cmp	r0, #0
 800b610:	d04d      	beq.n	800b6ae <powf+0xe2>
 800b612:	2301      	movs	r3, #1
 800b614:	9302      	str	r3, [sp, #8]
 800b616:	4b96      	ldr	r3, [pc, #600]	; (800b870 <powf+0x2a4>)
 800b618:	4628      	mov	r0, r5
 800b61a:	9303      	str	r3, [sp, #12]
 800b61c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800b620:	f7f4 fefa 	bl	8000418 <__aeabi_f2d>
 800b624:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b628:	4620      	mov	r0, r4
 800b62a:	f7f4 fef5 	bl	8000418 <__aeabi_f2d>
 800b62e:	2200      	movs	r2, #0
 800b630:	4b90      	ldr	r3, [pc, #576]	; (800b874 <powf+0x2a8>)
 800b632:	f1b9 0f02 	cmp.w	r9, #2
 800b636:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b63a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b63e:	d031      	beq.n	800b6a4 <powf+0xd8>
 800b640:	a802      	add	r0, sp, #8
 800b642:	f003 fb2d 	bl	800eca0 <matherr>
 800b646:	bb38      	cbnz	r0, 800b698 <powf+0xcc>
 800b648:	e05d      	b.n	800b706 <powf+0x13a>
 800b64a:	4628      	mov	r0, r5
 800b64c:	f7f5 fd06 	bl	800105c <__aeabi_fcmpeq>
 800b650:	2800      	cmp	r0, #0
 800b652:	d05d      	beq.n	800b710 <powf+0x144>
 800b654:	2100      	movs	r1, #0
 800b656:	4620      	mov	r0, r4
 800b658:	f7f5 fd00 	bl	800105c <__aeabi_fcmpeq>
 800b65c:	4607      	mov	r7, r0
 800b65e:	2800      	cmp	r0, #0
 800b660:	d029      	beq.n	800b6b6 <powf+0xea>
 800b662:	2301      	movs	r3, #1
 800b664:	9302      	str	r3, [sp, #8]
 800b666:	4b82      	ldr	r3, [pc, #520]	; (800b870 <powf+0x2a4>)
 800b668:	4628      	mov	r0, r5
 800b66a:	9303      	str	r3, [sp, #12]
 800b66c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800b670:	f7f4 fed2 	bl	8000418 <__aeabi_f2d>
 800b674:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b678:	4620      	mov	r0, r4
 800b67a:	f7f4 fecd 	bl	8000418 <__aeabi_f2d>
 800b67e:	2200      	movs	r2, #0
 800b680:	2300      	movs	r3, #0
 800b682:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b686:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b68a:	f1b9 0f00 	cmp.w	r9, #0
 800b68e:	d0d7      	beq.n	800b640 <powf+0x74>
 800b690:	2200      	movs	r2, #0
 800b692:	4b78      	ldr	r3, [pc, #480]	; (800b874 <powf+0x2a8>)
 800b694:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b698:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b69a:	b11b      	cbz	r3, 800b6a4 <powf+0xd8>
 800b69c:	f7ff fcc2 	bl	800b024 <__errno>
 800b6a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6a2:	6003      	str	r3, [r0, #0]
 800b6a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b6a8:	f7f5 f9e6 	bl	8000a78 <__aeabi_d2f>
 800b6ac:	4606      	mov	r6, r0
 800b6ae:	4630      	mov	r0, r6
 800b6b0:	b00d      	add	sp, #52	; 0x34
 800b6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	f003 fd03 	bl	800f0c2 <finitef>
 800b6bc:	2800      	cmp	r0, #0
 800b6be:	d0f6      	beq.n	800b6ae <powf+0xe2>
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f7f5 fcd4 	bl	8001070 <__aeabi_fcmplt>
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	d0f0      	beq.n	800b6ae <powf+0xe2>
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	9302      	str	r3, [sp, #8]
 800b6d0:	4b67      	ldr	r3, [pc, #412]	; (800b870 <powf+0x2a4>)
 800b6d2:	4628      	mov	r0, r5
 800b6d4:	9303      	str	r3, [sp, #12]
 800b6d6:	970a      	str	r7, [sp, #40]	; 0x28
 800b6d8:	f7f4 fe9e 	bl	8000418 <__aeabi_f2d>
 800b6dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6e0:	4620      	mov	r0, r4
 800b6e2:	f7f4 fe99 	bl	8000418 <__aeabi_f2d>
 800b6e6:	f998 3000 	ldrsb.w	r3, [r8]
 800b6ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b6ee:	b923      	cbnz	r3, 800b6fa <powf+0x12e>
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b6f8:	e7a2      	b.n	800b640 <powf+0x74>
 800b6fa:	2000      	movs	r0, #0
 800b6fc:	495e      	ldr	r1, [pc, #376]	; (800b878 <powf+0x2ac>)
 800b6fe:	2b02      	cmp	r3, #2
 800b700:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b704:	d19c      	bne.n	800b640 <powf+0x74>
 800b706:	f7ff fc8d 	bl	800b024 <__errno>
 800b70a:	2321      	movs	r3, #33	; 0x21
 800b70c:	6003      	str	r3, [r0, #0]
 800b70e:	e7c3      	b.n	800b698 <powf+0xcc>
 800b710:	4630      	mov	r0, r6
 800b712:	f003 fcd6 	bl	800f0c2 <finitef>
 800b716:	4681      	mov	r9, r0
 800b718:	2800      	cmp	r0, #0
 800b71a:	d17b      	bne.n	800b814 <powf+0x248>
 800b71c:	4628      	mov	r0, r5
 800b71e:	f003 fcd0 	bl	800f0c2 <finitef>
 800b722:	2800      	cmp	r0, #0
 800b724:	d076      	beq.n	800b814 <powf+0x248>
 800b726:	4620      	mov	r0, r4
 800b728:	f003 fccb 	bl	800f0c2 <finitef>
 800b72c:	2800      	cmp	r0, #0
 800b72e:	d071      	beq.n	800b814 <powf+0x248>
 800b730:	4628      	mov	r0, r5
 800b732:	f7f4 fe71 	bl	8000418 <__aeabi_f2d>
 800b736:	4682      	mov	sl, r0
 800b738:	4620      	mov	r0, r4
 800b73a:	468b      	mov	fp, r1
 800b73c:	f7f4 fe6c 	bl	8000418 <__aeabi_f2d>
 800b740:	4602      	mov	r2, r0
 800b742:	460b      	mov	r3, r1
 800b744:	4630      	mov	r0, r6
 800b746:	4631      	mov	r1, r6
 800b748:	e9cd 2300 	strd	r2, r3, [sp]
 800b74c:	f7f5 fcb8 	bl	80010c0 <__aeabi_fcmpun>
 800b750:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b754:	f998 8000 	ldrsb.w	r8, [r8]
 800b758:	4945      	ldr	r1, [pc, #276]	; (800b870 <powf+0x2a4>)
 800b75a:	b1b0      	cbz	r0, 800b78a <powf+0x1be>
 800b75c:	2001      	movs	r0, #1
 800b75e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 800b762:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b766:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800b76a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b76e:	f1b8 0f00 	cmp.w	r8, #0
 800b772:	d0bd      	beq.n	800b6f0 <powf+0x124>
 800b774:	2100      	movs	r1, #0
 800b776:	4608      	mov	r0, r1
 800b778:	f7f5 fb90 	bl	8000e9c <__aeabi_fdiv>
 800b77c:	f7f4 fe4c 	bl	8000418 <__aeabi_f2d>
 800b780:	f1b8 0f02 	cmp.w	r8, #2
 800b784:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b788:	e7bc      	b.n	800b704 <powf+0x138>
 800b78a:	2603      	movs	r6, #3
 800b78c:	900a      	str	r0, [sp, #40]	; 0x28
 800b78e:	e9cd 6102 	strd	r6, r1, [sp, #8]
 800b792:	4620      	mov	r0, r4
 800b794:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800b798:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800b79c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b7a0:	f7f5 fac8 	bl	8000d34 <__aeabi_fmul>
 800b7a4:	4604      	mov	r4, r0
 800b7a6:	f1b8 0f00 	cmp.w	r8, #0
 800b7aa:	d11e      	bne.n	800b7ea <powf+0x21e>
 800b7ac:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b7b0:	4b32      	ldr	r3, [pc, #200]	; (800b87c <powf+0x2b0>)
 800b7b2:	2100      	movs	r1, #0
 800b7b4:	4628      	mov	r0, r5
 800b7b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b7ba:	f7f5 fc59 	bl	8001070 <__aeabi_fcmplt>
 800b7be:	2800      	cmp	r0, #0
 800b7c0:	d04e      	beq.n	800b860 <powf+0x294>
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	f003 fcca 	bl	800f15c <rintf>
 800b7c8:	4621      	mov	r1, r4
 800b7ca:	f7f5 fc47 	bl	800105c <__aeabi_fcmpeq>
 800b7ce:	b920      	cbnz	r0, 800b7da <powf+0x20e>
 800b7d0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b7d4:	4b2a      	ldr	r3, [pc, #168]	; (800b880 <powf+0x2b4>)
 800b7d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b7da:	f997 3000 	ldrsb.w	r3, [r7]
 800b7de:	2b02      	cmp	r3, #2
 800b7e0:	d13e      	bne.n	800b860 <powf+0x294>
 800b7e2:	f7ff fc1f 	bl	800b024 <__errno>
 800b7e6:	2322      	movs	r3, #34	; 0x22
 800b7e8:	e790      	b.n	800b70c <powf+0x140>
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	4b25      	ldr	r3, [pc, #148]	; (800b884 <powf+0x2b8>)
 800b7ee:	2100      	movs	r1, #0
 800b7f0:	4628      	mov	r0, r5
 800b7f2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b7f6:	f7f5 fc3b 	bl	8001070 <__aeabi_fcmplt>
 800b7fa:	2800      	cmp	r0, #0
 800b7fc:	d0ed      	beq.n	800b7da <powf+0x20e>
 800b7fe:	4620      	mov	r0, r4
 800b800:	f003 fcac 	bl	800f15c <rintf>
 800b804:	4621      	mov	r1, r4
 800b806:	f7f5 fc29 	bl	800105c <__aeabi_fcmpeq>
 800b80a:	2800      	cmp	r0, #0
 800b80c:	d1e5      	bne.n	800b7da <powf+0x20e>
 800b80e:	2200      	movs	r2, #0
 800b810:	4b19      	ldr	r3, [pc, #100]	; (800b878 <powf+0x2ac>)
 800b812:	e7e0      	b.n	800b7d6 <powf+0x20a>
 800b814:	2100      	movs	r1, #0
 800b816:	4630      	mov	r0, r6
 800b818:	f7f5 fc20 	bl	800105c <__aeabi_fcmpeq>
 800b81c:	2800      	cmp	r0, #0
 800b81e:	f43f af46 	beq.w	800b6ae <powf+0xe2>
 800b822:	4628      	mov	r0, r5
 800b824:	f003 fc4d 	bl	800f0c2 <finitef>
 800b828:	2800      	cmp	r0, #0
 800b82a:	f43f af40 	beq.w	800b6ae <powf+0xe2>
 800b82e:	4620      	mov	r0, r4
 800b830:	f003 fc47 	bl	800f0c2 <finitef>
 800b834:	2800      	cmp	r0, #0
 800b836:	f43f af3a 	beq.w	800b6ae <powf+0xe2>
 800b83a:	2304      	movs	r3, #4
 800b83c:	9302      	str	r3, [sp, #8]
 800b83e:	4b0c      	ldr	r3, [pc, #48]	; (800b870 <powf+0x2a4>)
 800b840:	4628      	mov	r0, r5
 800b842:	9303      	str	r3, [sp, #12]
 800b844:	2300      	movs	r3, #0
 800b846:	930a      	str	r3, [sp, #40]	; 0x28
 800b848:	f7f4 fde6 	bl	8000418 <__aeabi_f2d>
 800b84c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b850:	4620      	mov	r0, r4
 800b852:	f7f4 fde1 	bl	8000418 <__aeabi_f2d>
 800b856:	2200      	movs	r2, #0
 800b858:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b85c:	2300      	movs	r3, #0
 800b85e:	e7ba      	b.n	800b7d6 <powf+0x20a>
 800b860:	a802      	add	r0, sp, #8
 800b862:	f003 fa1d 	bl	800eca0 <matherr>
 800b866:	2800      	cmp	r0, #0
 800b868:	f47f af16 	bne.w	800b698 <powf+0xcc>
 800b86c:	e7b9      	b.n	800b7e2 <powf+0x216>
 800b86e:	bf00      	nop
 800b870:	0800f363 	.word	0x0800f363
 800b874:	3ff00000 	.word	0x3ff00000
 800b878:	fff00000 	.word	0xfff00000
 800b87c:	47efffff 	.word	0x47efffff
 800b880:	c7efffff 	.word	0xc7efffff
 800b884:	7ff00000 	.word	0x7ff00000
 800b888:	200000b0 	.word	0x200000b0

0800b88c <sqrtf>:
 800b88c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b88e:	b08b      	sub	sp, #44	; 0x2c
 800b890:	4604      	mov	r4, r0
 800b892:	f001 ff43 	bl	800d71c <__ieee754_sqrtf>
 800b896:	4b20      	ldr	r3, [pc, #128]	; (800b918 <sqrtf+0x8c>)
 800b898:	4606      	mov	r6, r0
 800b89a:	f993 5000 	ldrsb.w	r5, [r3]
 800b89e:	1c6b      	adds	r3, r5, #1
 800b8a0:	d02a      	beq.n	800b8f8 <sqrtf+0x6c>
 800b8a2:	4621      	mov	r1, r4
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	f7f5 fc0b 	bl	80010c0 <__aeabi_fcmpun>
 800b8aa:	4607      	mov	r7, r0
 800b8ac:	bb20      	cbnz	r0, 800b8f8 <sqrtf+0x6c>
 800b8ae:	2100      	movs	r1, #0
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	f7f5 fbdd 	bl	8001070 <__aeabi_fcmplt>
 800b8b6:	b1f8      	cbz	r0, 800b8f8 <sqrtf+0x6c>
 800b8b8:	2301      	movs	r3, #1
 800b8ba:	9300      	str	r3, [sp, #0]
 800b8bc:	4b17      	ldr	r3, [pc, #92]	; (800b91c <sqrtf+0x90>)
 800b8be:	4620      	mov	r0, r4
 800b8c0:	9301      	str	r3, [sp, #4]
 800b8c2:	9708      	str	r7, [sp, #32]
 800b8c4:	f7f4 fda8 	bl	8000418 <__aeabi_f2d>
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b8ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	b99d      	cbnz	r5, 800b8fe <sqrtf+0x72>
 800b8d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b8da:	4668      	mov	r0, sp
 800b8dc:	f003 f9e0 	bl	800eca0 <matherr>
 800b8e0:	b1a8      	cbz	r0, 800b90e <sqrtf+0x82>
 800b8e2:	9b08      	ldr	r3, [sp, #32]
 800b8e4:	b11b      	cbz	r3, 800b8ee <sqrtf+0x62>
 800b8e6:	f7ff fb9d 	bl	800b024 <__errno>
 800b8ea:	9b08      	ldr	r3, [sp, #32]
 800b8ec:	6003      	str	r3, [r0, #0]
 800b8ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b8f2:	f7f5 f8c1 	bl	8000a78 <__aeabi_d2f>
 800b8f6:	4606      	mov	r6, r0
 800b8f8:	4630      	mov	r0, r6
 800b8fa:	b00b      	add	sp, #44	; 0x2c
 800b8fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8fe:	4610      	mov	r0, r2
 800b900:	4619      	mov	r1, r3
 800b902:	f7f4 ff0b 	bl	800071c <__aeabi_ddiv>
 800b906:	2d02      	cmp	r5, #2
 800b908:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b90c:	d1e5      	bne.n	800b8da <sqrtf+0x4e>
 800b90e:	f7ff fb89 	bl	800b024 <__errno>
 800b912:	2321      	movs	r3, #33	; 0x21
 800b914:	6003      	str	r3, [r0, #0]
 800b916:	e7e4      	b.n	800b8e2 <sqrtf+0x56>
 800b918:	200000b0 	.word	0x200000b0
 800b91c:	0800f368 	.word	0x0800f368

0800b920 <__ieee754_atan2>:
 800b920:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b924:	4256      	negs	r6, r2
 800b926:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800b92a:	4316      	orrs	r6, r2
 800b92c:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 800bad8 <__ieee754_atan2+0x1b8>
 800b930:	ea4c 76d6 	orr.w	r6, ip, r6, lsr #31
 800b934:	454e      	cmp	r6, r9
 800b936:	4604      	mov	r4, r0
 800b938:	460d      	mov	r5, r1
 800b93a:	469e      	mov	lr, r3
 800b93c:	d808      	bhi.n	800b950 <__ieee754_atan2+0x30>
 800b93e:	4246      	negs	r6, r0
 800b940:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800b944:	4306      	orrs	r6, r0
 800b946:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 800b94a:	454e      	cmp	r6, r9
 800b94c:	4688      	mov	r8, r1
 800b94e:	d906      	bls.n	800b95e <__ieee754_atan2+0x3e>
 800b950:	4620      	mov	r0, r4
 800b952:	4629      	mov	r1, r5
 800b954:	f7f4 fc02 	bl	800015c <__adddf3>
 800b958:	4604      	mov	r4, r0
 800b95a:	460d      	mov	r5, r1
 800b95c:	e030      	b.n	800b9c0 <__ieee754_atan2+0xa0>
 800b95e:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 800b962:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 800b966:	4316      	orrs	r6, r2
 800b968:	d103      	bne.n	800b972 <__ieee754_atan2+0x52>
 800b96a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b96e:	f002 bf7f 	b.w	800e870 <atan>
 800b972:	179e      	asrs	r6, r3, #30
 800b974:	f006 0602 	and.w	r6, r6, #2
 800b978:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 800b97c:	ea57 0100 	orrs.w	r1, r7, r0
 800b980:	d107      	bne.n	800b992 <__ieee754_atan2+0x72>
 800b982:	2e02      	cmp	r6, #2
 800b984:	d079      	beq.n	800ba7a <__ieee754_atan2+0x15a>
 800b986:	2e03      	cmp	r6, #3
 800b988:	d11a      	bne.n	800b9c0 <__ieee754_atan2+0xa0>
 800b98a:	a541      	add	r5, pc, #260	; (adr r5, 800ba90 <__ieee754_atan2+0x170>)
 800b98c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b990:	e016      	b.n	800b9c0 <__ieee754_atan2+0xa0>
 800b992:	ea5c 0102 	orrs.w	r1, ip, r2
 800b996:	d106      	bne.n	800b9a6 <__ieee754_atan2+0x86>
 800b998:	f1b8 0f00 	cmp.w	r8, #0
 800b99c:	da71      	bge.n	800ba82 <__ieee754_atan2+0x162>
 800b99e:	a53e      	add	r5, pc, #248	; (adr r5, 800ba98 <__ieee754_atan2+0x178>)
 800b9a0:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b9a4:	e00c      	b.n	800b9c0 <__ieee754_atan2+0xa0>
 800b9a6:	45cc      	cmp	ip, r9
 800b9a8:	d123      	bne.n	800b9f2 <__ieee754_atan2+0xd2>
 800b9aa:	4567      	cmp	r7, ip
 800b9ac:	d114      	bne.n	800b9d8 <__ieee754_atan2+0xb8>
 800b9ae:	2e02      	cmp	r6, #2
 800b9b0:	d00a      	beq.n	800b9c8 <__ieee754_atan2+0xa8>
 800b9b2:	2e03      	cmp	r6, #3
 800b9b4:	d00c      	beq.n	800b9d0 <__ieee754_atan2+0xb0>
 800b9b6:	2e01      	cmp	r6, #1
 800b9b8:	d15b      	bne.n	800ba72 <__ieee754_atan2+0x152>
 800b9ba:	a539      	add	r5, pc, #228	; (adr r5, 800baa0 <__ieee754_atan2+0x180>)
 800b9bc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	4629      	mov	r1, r5
 800b9c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9c8:	a537      	add	r5, pc, #220	; (adr r5, 800baa8 <__ieee754_atan2+0x188>)
 800b9ca:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b9ce:	e7f7      	b.n	800b9c0 <__ieee754_atan2+0xa0>
 800b9d0:	a537      	add	r5, pc, #220	; (adr r5, 800bab0 <__ieee754_atan2+0x190>)
 800b9d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b9d6:	e7f3      	b.n	800b9c0 <__ieee754_atan2+0xa0>
 800b9d8:	2e02      	cmp	r6, #2
 800b9da:	d04e      	beq.n	800ba7a <__ieee754_atan2+0x15a>
 800b9dc:	2e03      	cmp	r6, #3
 800b9de:	d0d4      	beq.n	800b98a <__ieee754_atan2+0x6a>
 800b9e0:	2e01      	cmp	r6, #1
 800b9e2:	f04f 0400 	mov.w	r4, #0
 800b9e6:	d102      	bne.n	800b9ee <__ieee754_atan2+0xce>
 800b9e8:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800b9ec:	e7e8      	b.n	800b9c0 <__ieee754_atan2+0xa0>
 800b9ee:	2500      	movs	r5, #0
 800b9f0:	e7e6      	b.n	800b9c0 <__ieee754_atan2+0xa0>
 800b9f2:	454f      	cmp	r7, r9
 800b9f4:	d0d0      	beq.n	800b998 <__ieee754_atan2+0x78>
 800b9f6:	eba7 070c 	sub.w	r7, r7, ip
 800b9fa:	153f      	asrs	r7, r7, #20
 800b9fc:	2f3c      	cmp	r7, #60	; 0x3c
 800b9fe:	dc1e      	bgt.n	800ba3e <__ieee754_atan2+0x11e>
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	da01      	bge.n	800ba08 <__ieee754_atan2+0xe8>
 800ba04:	373c      	adds	r7, #60	; 0x3c
 800ba06:	db1e      	blt.n	800ba46 <__ieee754_atan2+0x126>
 800ba08:	4620      	mov	r0, r4
 800ba0a:	4629      	mov	r1, r5
 800ba0c:	f7f4 fe86 	bl	800071c <__aeabi_ddiv>
 800ba10:	f003 f8b8 	bl	800eb84 <fabs>
 800ba14:	f002 ff2c 	bl	800e870 <atan>
 800ba18:	4604      	mov	r4, r0
 800ba1a:	460d      	mov	r5, r1
 800ba1c:	2e01      	cmp	r6, #1
 800ba1e:	d015      	beq.n	800ba4c <__ieee754_atan2+0x12c>
 800ba20:	2e02      	cmp	r6, #2
 800ba22:	d017      	beq.n	800ba54 <__ieee754_atan2+0x134>
 800ba24:	2e00      	cmp	r6, #0
 800ba26:	d0cb      	beq.n	800b9c0 <__ieee754_atan2+0xa0>
 800ba28:	a323      	add	r3, pc, #140	; (adr r3, 800bab8 <__ieee754_atan2+0x198>)
 800ba2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba2e:	4620      	mov	r0, r4
 800ba30:	4629      	mov	r1, r5
 800ba32:	f7f4 fb91 	bl	8000158 <__aeabi_dsub>
 800ba36:	a322      	add	r3, pc, #136	; (adr r3, 800bac0 <__ieee754_atan2+0x1a0>)
 800ba38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba3c:	e016      	b.n	800ba6c <__ieee754_atan2+0x14c>
 800ba3e:	a522      	add	r5, pc, #136	; (adr r5, 800bac8 <__ieee754_atan2+0x1a8>)
 800ba40:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ba44:	e7ea      	b.n	800ba1c <__ieee754_atan2+0xfc>
 800ba46:	2400      	movs	r4, #0
 800ba48:	2500      	movs	r5, #0
 800ba4a:	e7e7      	b.n	800ba1c <__ieee754_atan2+0xfc>
 800ba4c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ba50:	461d      	mov	r5, r3
 800ba52:	e7b5      	b.n	800b9c0 <__ieee754_atan2+0xa0>
 800ba54:	a318      	add	r3, pc, #96	; (adr r3, 800bab8 <__ieee754_atan2+0x198>)
 800ba56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	4629      	mov	r1, r5
 800ba5e:	f7f4 fb7b 	bl	8000158 <__aeabi_dsub>
 800ba62:	4602      	mov	r2, r0
 800ba64:	460b      	mov	r3, r1
 800ba66:	a116      	add	r1, pc, #88	; (adr r1, 800bac0 <__ieee754_atan2+0x1a0>)
 800ba68:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba6c:	f7f4 fb74 	bl	8000158 <__aeabi_dsub>
 800ba70:	e772      	b.n	800b958 <__ieee754_atan2+0x38>
 800ba72:	a517      	add	r5, pc, #92	; (adr r5, 800bad0 <__ieee754_atan2+0x1b0>)
 800ba74:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ba78:	e7a2      	b.n	800b9c0 <__ieee754_atan2+0xa0>
 800ba7a:	a511      	add	r5, pc, #68	; (adr r5, 800bac0 <__ieee754_atan2+0x1a0>)
 800ba7c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ba80:	e79e      	b.n	800b9c0 <__ieee754_atan2+0xa0>
 800ba82:	a511      	add	r5, pc, #68	; (adr r5, 800bac8 <__ieee754_atan2+0x1a8>)
 800ba84:	e9d5 4500 	ldrd	r4, r5, [r5]
 800ba88:	e79a      	b.n	800b9c0 <__ieee754_atan2+0xa0>
 800ba8a:	bf00      	nop
 800ba8c:	f3af 8000 	nop.w
 800ba90:	54442d18 	.word	0x54442d18
 800ba94:	c00921fb 	.word	0xc00921fb
 800ba98:	54442d18 	.word	0x54442d18
 800ba9c:	bff921fb 	.word	0xbff921fb
 800baa0:	54442d18 	.word	0x54442d18
 800baa4:	bfe921fb 	.word	0xbfe921fb
 800baa8:	7f3321d2 	.word	0x7f3321d2
 800baac:	4002d97c 	.word	0x4002d97c
 800bab0:	7f3321d2 	.word	0x7f3321d2
 800bab4:	c002d97c 	.word	0xc002d97c
 800bab8:	33145c07 	.word	0x33145c07
 800babc:	3ca1a626 	.word	0x3ca1a626
 800bac0:	54442d18 	.word	0x54442d18
 800bac4:	400921fb 	.word	0x400921fb
 800bac8:	54442d18 	.word	0x54442d18
 800bacc:	3ff921fb 	.word	0x3ff921fb
 800bad0:	54442d18 	.word	0x54442d18
 800bad4:	3fe921fb 	.word	0x3fe921fb
 800bad8:	7ff00000 	.word	0x7ff00000
 800badc:	00000000 	.word	0x00000000

0800bae0 <__ieee754_pow>:
 800bae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae4:	b091      	sub	sp, #68	; 0x44
 800bae6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800baea:	e9dd 2602 	ldrd	r2, r6, [sp, #8]
 800baee:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800baf2:	ea55 0302 	orrs.w	r3, r5, r2
 800baf6:	4607      	mov	r7, r0
 800baf8:	4688      	mov	r8, r1
 800bafa:	f000 84b7 	beq.w	800c46c <__ieee754_pow+0x98c>
 800bafe:	4b80      	ldr	r3, [pc, #512]	; (800bd00 <__ieee754_pow+0x220>)
 800bb00:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 800bb04:	429c      	cmp	r4, r3
 800bb06:	4689      	mov	r9, r1
 800bb08:	4682      	mov	sl, r0
 800bb0a:	dc09      	bgt.n	800bb20 <__ieee754_pow+0x40>
 800bb0c:	d103      	bne.n	800bb16 <__ieee754_pow+0x36>
 800bb0e:	b938      	cbnz	r0, 800bb20 <__ieee754_pow+0x40>
 800bb10:	42a5      	cmp	r5, r4
 800bb12:	dc0d      	bgt.n	800bb30 <__ieee754_pow+0x50>
 800bb14:	e001      	b.n	800bb1a <__ieee754_pow+0x3a>
 800bb16:	429d      	cmp	r5, r3
 800bb18:	dc02      	bgt.n	800bb20 <__ieee754_pow+0x40>
 800bb1a:	429d      	cmp	r5, r3
 800bb1c:	d10e      	bne.n	800bb3c <__ieee754_pow+0x5c>
 800bb1e:	b16a      	cbz	r2, 800bb3c <__ieee754_pow+0x5c>
 800bb20:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bb24:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bb28:	ea54 030a 	orrs.w	r3, r4, sl
 800bb2c:	f000 849e 	beq.w	800c46c <__ieee754_pow+0x98c>
 800bb30:	4874      	ldr	r0, [pc, #464]	; (800bd04 <__ieee754_pow+0x224>)
 800bb32:	b011      	add	sp, #68	; 0x44
 800bb34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb38:	f003 b8b4 	b.w	800eca4 <nan>
 800bb3c:	f1b9 0f00 	cmp.w	r9, #0
 800bb40:	da53      	bge.n	800bbea <__ieee754_pow+0x10a>
 800bb42:	4b71      	ldr	r3, [pc, #452]	; (800bd08 <__ieee754_pow+0x228>)
 800bb44:	429d      	cmp	r5, r3
 800bb46:	dc4e      	bgt.n	800bbe6 <__ieee754_pow+0x106>
 800bb48:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800bb4c:	429d      	cmp	r5, r3
 800bb4e:	dd4c      	ble.n	800bbea <__ieee754_pow+0x10a>
 800bb50:	152b      	asrs	r3, r5, #20
 800bb52:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bb56:	2b14      	cmp	r3, #20
 800bb58:	dd28      	ble.n	800bbac <__ieee754_pow+0xcc>
 800bb5a:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800bb5e:	fa22 f103 	lsr.w	r1, r2, r3
 800bb62:	fa01 f303 	lsl.w	r3, r1, r3
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d13f      	bne.n	800bbea <__ieee754_pow+0x10a>
 800bb6a:	f001 0101 	and.w	r1, r1, #1
 800bb6e:	f1c1 0302 	rsb	r3, r1, #2
 800bb72:	9300      	str	r3, [sp, #0]
 800bb74:	2a00      	cmp	r2, #0
 800bb76:	d15c      	bne.n	800bc32 <__ieee754_pow+0x152>
 800bb78:	4b61      	ldr	r3, [pc, #388]	; (800bd00 <__ieee754_pow+0x220>)
 800bb7a:	429d      	cmp	r5, r3
 800bb7c:	d126      	bne.n	800bbcc <__ieee754_pow+0xec>
 800bb7e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800bb82:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800bb86:	ea53 030a 	orrs.w	r3, r3, sl
 800bb8a:	f000 846f 	beq.w	800c46c <__ieee754_pow+0x98c>
 800bb8e:	4b5f      	ldr	r3, [pc, #380]	; (800bd0c <__ieee754_pow+0x22c>)
 800bb90:	429c      	cmp	r4, r3
 800bb92:	dd2c      	ble.n	800bbee <__ieee754_pow+0x10e>
 800bb94:	2e00      	cmp	r6, #0
 800bb96:	f280 846f 	bge.w	800c478 <__ieee754_pow+0x998>
 800bb9a:	f04f 0b00 	mov.w	fp, #0
 800bb9e:	f04f 0c00 	mov.w	ip, #0
 800bba2:	4658      	mov	r0, fp
 800bba4:	4661      	mov	r1, ip
 800bba6:	b011      	add	sp, #68	; 0x44
 800bba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbac:	2a00      	cmp	r2, #0
 800bbae:	d13e      	bne.n	800bc2e <__ieee754_pow+0x14e>
 800bbb0:	f1c3 0314 	rsb	r3, r3, #20
 800bbb4:	fa45 f103 	asr.w	r1, r5, r3
 800bbb8:	fa01 f303 	lsl.w	r3, r1, r3
 800bbbc:	42ab      	cmp	r3, r5
 800bbbe:	f040 8463 	bne.w	800c488 <__ieee754_pow+0x9a8>
 800bbc2:	f001 0101 	and.w	r1, r1, #1
 800bbc6:	f1c1 0302 	rsb	r3, r1, #2
 800bbca:	9300      	str	r3, [sp, #0]
 800bbcc:	4b50      	ldr	r3, [pc, #320]	; (800bd10 <__ieee754_pow+0x230>)
 800bbce:	429d      	cmp	r5, r3
 800bbd0:	d114      	bne.n	800bbfc <__ieee754_pow+0x11c>
 800bbd2:	2e00      	cmp	r6, #0
 800bbd4:	f280 8454 	bge.w	800c480 <__ieee754_pow+0x9a0>
 800bbd8:	463a      	mov	r2, r7
 800bbda:	4643      	mov	r3, r8
 800bbdc:	2000      	movs	r0, #0
 800bbde:	494c      	ldr	r1, [pc, #304]	; (800bd10 <__ieee754_pow+0x230>)
 800bbe0:	f7f4 fd9c 	bl	800071c <__aeabi_ddiv>
 800bbe4:	e013      	b.n	800bc0e <__ieee754_pow+0x12e>
 800bbe6:	2302      	movs	r3, #2
 800bbe8:	e7c3      	b.n	800bb72 <__ieee754_pow+0x92>
 800bbea:	2300      	movs	r3, #0
 800bbec:	e7c1      	b.n	800bb72 <__ieee754_pow+0x92>
 800bbee:	2e00      	cmp	r6, #0
 800bbf0:	dad3      	bge.n	800bb9a <__ieee754_pow+0xba>
 800bbf2:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 800bbf6:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 800bbfa:	e7d2      	b.n	800bba2 <__ieee754_pow+0xc2>
 800bbfc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 800bc00:	d108      	bne.n	800bc14 <__ieee754_pow+0x134>
 800bc02:	463a      	mov	r2, r7
 800bc04:	4643      	mov	r3, r8
 800bc06:	4638      	mov	r0, r7
 800bc08:	4641      	mov	r1, r8
 800bc0a:	f7f4 fc5d 	bl	80004c8 <__aeabi_dmul>
 800bc0e:	4683      	mov	fp, r0
 800bc10:	468c      	mov	ip, r1
 800bc12:	e7c6      	b.n	800bba2 <__ieee754_pow+0xc2>
 800bc14:	4b3f      	ldr	r3, [pc, #252]	; (800bd14 <__ieee754_pow+0x234>)
 800bc16:	429e      	cmp	r6, r3
 800bc18:	d10b      	bne.n	800bc32 <__ieee754_pow+0x152>
 800bc1a:	f1b9 0f00 	cmp.w	r9, #0
 800bc1e:	db08      	blt.n	800bc32 <__ieee754_pow+0x152>
 800bc20:	4638      	mov	r0, r7
 800bc22:	4641      	mov	r1, r8
 800bc24:	b011      	add	sp, #68	; 0x44
 800bc26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc2a:	f000 be55 	b.w	800c8d8 <__ieee754_sqrt>
 800bc2e:	2300      	movs	r3, #0
 800bc30:	9300      	str	r3, [sp, #0]
 800bc32:	4638      	mov	r0, r7
 800bc34:	4641      	mov	r1, r8
 800bc36:	f002 ffa5 	bl	800eb84 <fabs>
 800bc3a:	4683      	mov	fp, r0
 800bc3c:	468c      	mov	ip, r1
 800bc3e:	f1ba 0f00 	cmp.w	sl, #0
 800bc42:	d12b      	bne.n	800bc9c <__ieee754_pow+0x1bc>
 800bc44:	b124      	cbz	r4, 800bc50 <__ieee754_pow+0x170>
 800bc46:	4b32      	ldr	r3, [pc, #200]	; (800bd10 <__ieee754_pow+0x230>)
 800bc48:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d125      	bne.n	800bc9c <__ieee754_pow+0x1bc>
 800bc50:	2e00      	cmp	r6, #0
 800bc52:	da07      	bge.n	800bc64 <__ieee754_pow+0x184>
 800bc54:	465a      	mov	r2, fp
 800bc56:	4663      	mov	r3, ip
 800bc58:	2000      	movs	r0, #0
 800bc5a:	492d      	ldr	r1, [pc, #180]	; (800bd10 <__ieee754_pow+0x230>)
 800bc5c:	f7f4 fd5e 	bl	800071c <__aeabi_ddiv>
 800bc60:	4683      	mov	fp, r0
 800bc62:	468c      	mov	ip, r1
 800bc64:	f1b9 0f00 	cmp.w	r9, #0
 800bc68:	da9b      	bge.n	800bba2 <__ieee754_pow+0xc2>
 800bc6a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bc6e:	9b00      	ldr	r3, [sp, #0]
 800bc70:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bc74:	4323      	orrs	r3, r4
 800bc76:	d108      	bne.n	800bc8a <__ieee754_pow+0x1aa>
 800bc78:	465a      	mov	r2, fp
 800bc7a:	4663      	mov	r3, ip
 800bc7c:	4658      	mov	r0, fp
 800bc7e:	4661      	mov	r1, ip
 800bc80:	f7f4 fa6a 	bl	8000158 <__aeabi_dsub>
 800bc84:	4602      	mov	r2, r0
 800bc86:	460b      	mov	r3, r1
 800bc88:	e7aa      	b.n	800bbe0 <__ieee754_pow+0x100>
 800bc8a:	9b00      	ldr	r3, [sp, #0]
 800bc8c:	2b01      	cmp	r3, #1
 800bc8e:	d188      	bne.n	800bba2 <__ieee754_pow+0xc2>
 800bc90:	4658      	mov	r0, fp
 800bc92:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 800bc96:	4683      	mov	fp, r0
 800bc98:	469c      	mov	ip, r3
 800bc9a:	e782      	b.n	800bba2 <__ieee754_pow+0xc2>
 800bc9c:	ea4f 79d9 	mov.w	r9, r9, lsr #31
 800bca0:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 800bca4:	930d      	str	r3, [sp, #52]	; 0x34
 800bca6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bca8:	9b00      	ldr	r3, [sp, #0]
 800bcaa:	4313      	orrs	r3, r2
 800bcac:	d104      	bne.n	800bcb8 <__ieee754_pow+0x1d8>
 800bcae:	463a      	mov	r2, r7
 800bcb0:	4643      	mov	r3, r8
 800bcb2:	4638      	mov	r0, r7
 800bcb4:	4641      	mov	r1, r8
 800bcb6:	e7e3      	b.n	800bc80 <__ieee754_pow+0x1a0>
 800bcb8:	4b17      	ldr	r3, [pc, #92]	; (800bd18 <__ieee754_pow+0x238>)
 800bcba:	429d      	cmp	r5, r3
 800bcbc:	f340 80fe 	ble.w	800bebc <__ieee754_pow+0x3dc>
 800bcc0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bcc4:	429d      	cmp	r5, r3
 800bcc6:	dd0b      	ble.n	800bce0 <__ieee754_pow+0x200>
 800bcc8:	4b10      	ldr	r3, [pc, #64]	; (800bd0c <__ieee754_pow+0x22c>)
 800bcca:	429c      	cmp	r4, r3
 800bccc:	dc0e      	bgt.n	800bcec <__ieee754_pow+0x20c>
 800bcce:	2e00      	cmp	r6, #0
 800bcd0:	f6bf af63 	bge.w	800bb9a <__ieee754_pow+0xba>
 800bcd4:	a308      	add	r3, pc, #32	; (adr r3, 800bcf8 <__ieee754_pow+0x218>)
 800bcd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcda:	4610      	mov	r0, r2
 800bcdc:	4619      	mov	r1, r3
 800bcde:	e794      	b.n	800bc0a <__ieee754_pow+0x12a>
 800bce0:	4b0e      	ldr	r3, [pc, #56]	; (800bd1c <__ieee754_pow+0x23c>)
 800bce2:	429c      	cmp	r4, r3
 800bce4:	ddf3      	ble.n	800bcce <__ieee754_pow+0x1ee>
 800bce6:	4b0a      	ldr	r3, [pc, #40]	; (800bd10 <__ieee754_pow+0x230>)
 800bce8:	429c      	cmp	r4, r3
 800bcea:	dd19      	ble.n	800bd20 <__ieee754_pow+0x240>
 800bcec:	2e00      	cmp	r6, #0
 800bcee:	dcf1      	bgt.n	800bcd4 <__ieee754_pow+0x1f4>
 800bcf0:	e753      	b.n	800bb9a <__ieee754_pow+0xba>
 800bcf2:	bf00      	nop
 800bcf4:	f3af 8000 	nop.w
 800bcf8:	8800759c 	.word	0x8800759c
 800bcfc:	7e37e43c 	.word	0x7e37e43c
 800bd00:	7ff00000 	.word	0x7ff00000
 800bd04:	0800f362 	.word	0x0800f362
 800bd08:	433fffff 	.word	0x433fffff
 800bd0c:	3fefffff 	.word	0x3fefffff
 800bd10:	3ff00000 	.word	0x3ff00000
 800bd14:	3fe00000 	.word	0x3fe00000
 800bd18:	41e00000 	.word	0x41e00000
 800bd1c:	3feffffe 	.word	0x3feffffe
 800bd20:	4661      	mov	r1, ip
 800bd22:	2200      	movs	r2, #0
 800bd24:	4b60      	ldr	r3, [pc, #384]	; (800bea8 <__ieee754_pow+0x3c8>)
 800bd26:	4658      	mov	r0, fp
 800bd28:	f7f4 fa16 	bl	8000158 <__aeabi_dsub>
 800bd2c:	a354      	add	r3, pc, #336	; (adr r3, 800be80 <__ieee754_pow+0x3a0>)
 800bd2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd32:	4604      	mov	r4, r0
 800bd34:	460d      	mov	r5, r1
 800bd36:	f7f4 fbc7 	bl	80004c8 <__aeabi_dmul>
 800bd3a:	a353      	add	r3, pc, #332	; (adr r3, 800be88 <__ieee754_pow+0x3a8>)
 800bd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd40:	4606      	mov	r6, r0
 800bd42:	460f      	mov	r7, r1
 800bd44:	4620      	mov	r0, r4
 800bd46:	4629      	mov	r1, r5
 800bd48:	f7f4 fbbe 	bl	80004c8 <__aeabi_dmul>
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	4682      	mov	sl, r0
 800bd50:	468b      	mov	fp, r1
 800bd52:	4b56      	ldr	r3, [pc, #344]	; (800beac <__ieee754_pow+0x3cc>)
 800bd54:	4620      	mov	r0, r4
 800bd56:	4629      	mov	r1, r5
 800bd58:	f7f4 fbb6 	bl	80004c8 <__aeabi_dmul>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	460b      	mov	r3, r1
 800bd60:	a14b      	add	r1, pc, #300	; (adr r1, 800be90 <__ieee754_pow+0x3b0>)
 800bd62:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd66:	f7f4 f9f7 	bl	8000158 <__aeabi_dsub>
 800bd6a:	4622      	mov	r2, r4
 800bd6c:	462b      	mov	r3, r5
 800bd6e:	f7f4 fbab 	bl	80004c8 <__aeabi_dmul>
 800bd72:	4602      	mov	r2, r0
 800bd74:	460b      	mov	r3, r1
 800bd76:	2000      	movs	r0, #0
 800bd78:	494d      	ldr	r1, [pc, #308]	; (800beb0 <__ieee754_pow+0x3d0>)
 800bd7a:	f7f4 f9ed 	bl	8000158 <__aeabi_dsub>
 800bd7e:	4622      	mov	r2, r4
 800bd80:	462b      	mov	r3, r5
 800bd82:	4680      	mov	r8, r0
 800bd84:	4689      	mov	r9, r1
 800bd86:	4620      	mov	r0, r4
 800bd88:	4629      	mov	r1, r5
 800bd8a:	f7f4 fb9d 	bl	80004c8 <__aeabi_dmul>
 800bd8e:	4602      	mov	r2, r0
 800bd90:	460b      	mov	r3, r1
 800bd92:	4640      	mov	r0, r8
 800bd94:	4649      	mov	r1, r9
 800bd96:	f7f4 fb97 	bl	80004c8 <__aeabi_dmul>
 800bd9a:	a33f      	add	r3, pc, #252	; (adr r3, 800be98 <__ieee754_pow+0x3b8>)
 800bd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda0:	f7f4 fb92 	bl	80004c8 <__aeabi_dmul>
 800bda4:	4602      	mov	r2, r0
 800bda6:	460b      	mov	r3, r1
 800bda8:	4650      	mov	r0, sl
 800bdaa:	4659      	mov	r1, fp
 800bdac:	f7f4 f9d4 	bl	8000158 <__aeabi_dsub>
 800bdb0:	4602      	mov	r2, r0
 800bdb2:	460b      	mov	r3, r1
 800bdb4:	4604      	mov	r4, r0
 800bdb6:	460d      	mov	r5, r1
 800bdb8:	4630      	mov	r0, r6
 800bdba:	4639      	mov	r1, r7
 800bdbc:	f7f4 f9ce 	bl	800015c <__adddf3>
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	468b      	mov	fp, r1
 800bdc4:	4682      	mov	sl, r0
 800bdc6:	4632      	mov	r2, r6
 800bdc8:	463b      	mov	r3, r7
 800bdca:	f7f4 f9c5 	bl	8000158 <__aeabi_dsub>
 800bdce:	4602      	mov	r2, r0
 800bdd0:	460b      	mov	r3, r1
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	4629      	mov	r1, r5
 800bdd6:	f7f4 f9bf 	bl	8000158 <__aeabi_dsub>
 800bdda:	9b00      	ldr	r3, [sp, #0]
 800bddc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bdde:	3b01      	subs	r3, #1
 800bde0:	4313      	orrs	r3, r2
 800bde2:	f04f 0300 	mov.w	r3, #0
 800bde6:	bf0c      	ite	eq
 800bde8:	4c32      	ldreq	r4, [pc, #200]	; (800beb4 <__ieee754_pow+0x3d4>)
 800bdea:	4c2f      	ldrne	r4, [pc, #188]	; (800bea8 <__ieee754_pow+0x3c8>)
 800bdec:	4606      	mov	r6, r0
 800bdee:	e9cd 3400 	strd	r3, r4, [sp]
 800bdf2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bdf6:	2400      	movs	r4, #0
 800bdf8:	460f      	mov	r7, r1
 800bdfa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bdfe:	4622      	mov	r2, r4
 800be00:	462b      	mov	r3, r5
 800be02:	f7f4 f9a9 	bl	8000158 <__aeabi_dsub>
 800be06:	4652      	mov	r2, sl
 800be08:	465b      	mov	r3, fp
 800be0a:	f7f4 fb5d 	bl	80004c8 <__aeabi_dmul>
 800be0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800be12:	4680      	mov	r8, r0
 800be14:	4689      	mov	r9, r1
 800be16:	4630      	mov	r0, r6
 800be18:	4639      	mov	r1, r7
 800be1a:	f7f4 fb55 	bl	80004c8 <__aeabi_dmul>
 800be1e:	4602      	mov	r2, r0
 800be20:	460b      	mov	r3, r1
 800be22:	4640      	mov	r0, r8
 800be24:	4649      	mov	r1, r9
 800be26:	f7f4 f999 	bl	800015c <__adddf3>
 800be2a:	4622      	mov	r2, r4
 800be2c:	462b      	mov	r3, r5
 800be2e:	4680      	mov	r8, r0
 800be30:	4689      	mov	r9, r1
 800be32:	4650      	mov	r0, sl
 800be34:	4659      	mov	r1, fp
 800be36:	f7f4 fb47 	bl	80004c8 <__aeabi_dmul>
 800be3a:	4604      	mov	r4, r0
 800be3c:	460d      	mov	r5, r1
 800be3e:	460b      	mov	r3, r1
 800be40:	4602      	mov	r2, r0
 800be42:	4649      	mov	r1, r9
 800be44:	4640      	mov	r0, r8
 800be46:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800be4a:	f7f4 f987 	bl	800015c <__adddf3>
 800be4e:	4b1a      	ldr	r3, [pc, #104]	; (800beb8 <__ieee754_pow+0x3d8>)
 800be50:	4682      	mov	sl, r0
 800be52:	4299      	cmp	r1, r3
 800be54:	460f      	mov	r7, r1
 800be56:	460e      	mov	r6, r1
 800be58:	f340 82e1 	ble.w	800c41e <__ieee754_pow+0x93e>
 800be5c:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800be60:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800be64:	4303      	orrs	r3, r0
 800be66:	f000 81db 	beq.w	800c220 <__ieee754_pow+0x740>
 800be6a:	a30d      	add	r3, pc, #52	; (adr r3, 800bea0 <__ieee754_pow+0x3c0>)
 800be6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be70:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be74:	f7f4 fb28 	bl	80004c8 <__aeabi_dmul>
 800be78:	a309      	add	r3, pc, #36	; (adr r3, 800bea0 <__ieee754_pow+0x3c0>)
 800be7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be7e:	e6c4      	b.n	800bc0a <__ieee754_pow+0x12a>
 800be80:	60000000 	.word	0x60000000
 800be84:	3ff71547 	.word	0x3ff71547
 800be88:	f85ddf44 	.word	0xf85ddf44
 800be8c:	3e54ae0b 	.word	0x3e54ae0b
 800be90:	55555555 	.word	0x55555555
 800be94:	3fd55555 	.word	0x3fd55555
 800be98:	652b82fe 	.word	0x652b82fe
 800be9c:	3ff71547 	.word	0x3ff71547
 800bea0:	8800759c 	.word	0x8800759c
 800bea4:	7e37e43c 	.word	0x7e37e43c
 800bea8:	3ff00000 	.word	0x3ff00000
 800beac:	3fd00000 	.word	0x3fd00000
 800beb0:	3fe00000 	.word	0x3fe00000
 800beb4:	bff00000 	.word	0xbff00000
 800beb8:	408fffff 	.word	0x408fffff
 800bebc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800bec0:	f04f 0200 	mov.w	r2, #0
 800bec4:	da08      	bge.n	800bed8 <__ieee754_pow+0x3f8>
 800bec6:	4658      	mov	r0, fp
 800bec8:	4bcd      	ldr	r3, [pc, #820]	; (800c200 <__ieee754_pow+0x720>)
 800beca:	4661      	mov	r1, ip
 800becc:	f7f4 fafc 	bl	80004c8 <__aeabi_dmul>
 800bed0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bed4:	4683      	mov	fp, r0
 800bed6:	460c      	mov	r4, r1
 800bed8:	1523      	asrs	r3, r4, #20
 800beda:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bede:	4413      	add	r3, r2
 800bee0:	930c      	str	r3, [sp, #48]	; 0x30
 800bee2:	4bc8      	ldr	r3, [pc, #800]	; (800c204 <__ieee754_pow+0x724>)
 800bee4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bee8:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800beec:	429c      	cmp	r4, r3
 800beee:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bef2:	dd08      	ble.n	800bf06 <__ieee754_pow+0x426>
 800bef4:	4bc4      	ldr	r3, [pc, #784]	; (800c208 <__ieee754_pow+0x728>)
 800bef6:	429c      	cmp	r4, r3
 800bef8:	f340 815b 	ble.w	800c1b2 <__ieee754_pow+0x6d2>
 800befc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800befe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bf02:	3301      	adds	r3, #1
 800bf04:	930c      	str	r3, [sp, #48]	; 0x30
 800bf06:	f04f 0800 	mov.w	r8, #0
 800bf0a:	4658      	mov	r0, fp
 800bf0c:	4629      	mov	r1, r5
 800bf0e:	4bbf      	ldr	r3, [pc, #764]	; (800c20c <__ieee754_pow+0x72c>)
 800bf10:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 800bf14:	444b      	add	r3, r9
 800bf16:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bf1a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800bf1e:	461a      	mov	r2, r3
 800bf20:	4623      	mov	r3, r4
 800bf22:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bf26:	f7f4 f917 	bl	8000158 <__aeabi_dsub>
 800bf2a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bf2e:	4606      	mov	r6, r0
 800bf30:	460f      	mov	r7, r1
 800bf32:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bf36:	f7f4 f911 	bl	800015c <__adddf3>
 800bf3a:	4602      	mov	r2, r0
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	2000      	movs	r0, #0
 800bf40:	49b3      	ldr	r1, [pc, #716]	; (800c210 <__ieee754_pow+0x730>)
 800bf42:	f7f4 fbeb 	bl	800071c <__aeabi_ddiv>
 800bf46:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	4630      	mov	r0, r6
 800bf50:	4639      	mov	r1, r7
 800bf52:	f7f4 fab9 	bl	80004c8 <__aeabi_dmul>
 800bf56:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bf5a:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800bf5e:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bf62:	2300      	movs	r3, #0
 800bf64:	2200      	movs	r2, #0
 800bf66:	106d      	asrs	r5, r5, #1
 800bf68:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bf6c:	9304      	str	r3, [sp, #16]
 800bf6e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bf72:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800bf76:	eb05 4388 	add.w	r3, r5, r8, lsl #18
 800bf7a:	4650      	mov	r0, sl
 800bf7c:	4659      	mov	r1, fp
 800bf7e:	4614      	mov	r4, r2
 800bf80:	461d      	mov	r5, r3
 800bf82:	f7f4 faa1 	bl	80004c8 <__aeabi_dmul>
 800bf86:	4602      	mov	r2, r0
 800bf88:	460b      	mov	r3, r1
 800bf8a:	4630      	mov	r0, r6
 800bf8c:	4639      	mov	r1, r7
 800bf8e:	f7f4 f8e3 	bl	8000158 <__aeabi_dsub>
 800bf92:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bf96:	4606      	mov	r6, r0
 800bf98:	460f      	mov	r7, r1
 800bf9a:	4620      	mov	r0, r4
 800bf9c:	4629      	mov	r1, r5
 800bf9e:	f7f4 f8db 	bl	8000158 <__aeabi_dsub>
 800bfa2:	4602      	mov	r2, r0
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bfaa:	f7f4 f8d5 	bl	8000158 <__aeabi_dsub>
 800bfae:	4652      	mov	r2, sl
 800bfb0:	465b      	mov	r3, fp
 800bfb2:	f7f4 fa89 	bl	80004c8 <__aeabi_dmul>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	460b      	mov	r3, r1
 800bfba:	4630      	mov	r0, r6
 800bfbc:	4639      	mov	r1, r7
 800bfbe:	f7f4 f8cb 	bl	8000158 <__aeabi_dsub>
 800bfc2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bfc6:	f7f4 fa7f 	bl	80004c8 <__aeabi_dmul>
 800bfca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bfce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bfd2:	4610      	mov	r0, r2
 800bfd4:	4619      	mov	r1, r3
 800bfd6:	f7f4 fa77 	bl	80004c8 <__aeabi_dmul>
 800bfda:	a377      	add	r3, pc, #476	; (adr r3, 800c1b8 <__ieee754_pow+0x6d8>)
 800bfdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe0:	4604      	mov	r4, r0
 800bfe2:	460d      	mov	r5, r1
 800bfe4:	f7f4 fa70 	bl	80004c8 <__aeabi_dmul>
 800bfe8:	a375      	add	r3, pc, #468	; (adr r3, 800c1c0 <__ieee754_pow+0x6e0>)
 800bfea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfee:	f7f4 f8b5 	bl	800015c <__adddf3>
 800bff2:	4622      	mov	r2, r4
 800bff4:	462b      	mov	r3, r5
 800bff6:	f7f4 fa67 	bl	80004c8 <__aeabi_dmul>
 800bffa:	a373      	add	r3, pc, #460	; (adr r3, 800c1c8 <__ieee754_pow+0x6e8>)
 800bffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c000:	f7f4 f8ac 	bl	800015c <__adddf3>
 800c004:	4622      	mov	r2, r4
 800c006:	462b      	mov	r3, r5
 800c008:	f7f4 fa5e 	bl	80004c8 <__aeabi_dmul>
 800c00c:	a370      	add	r3, pc, #448	; (adr r3, 800c1d0 <__ieee754_pow+0x6f0>)
 800c00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c012:	f7f4 f8a3 	bl	800015c <__adddf3>
 800c016:	4622      	mov	r2, r4
 800c018:	462b      	mov	r3, r5
 800c01a:	f7f4 fa55 	bl	80004c8 <__aeabi_dmul>
 800c01e:	a36e      	add	r3, pc, #440	; (adr r3, 800c1d8 <__ieee754_pow+0x6f8>)
 800c020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c024:	f7f4 f89a 	bl	800015c <__adddf3>
 800c028:	4622      	mov	r2, r4
 800c02a:	462b      	mov	r3, r5
 800c02c:	f7f4 fa4c 	bl	80004c8 <__aeabi_dmul>
 800c030:	a36b      	add	r3, pc, #428	; (adr r3, 800c1e0 <__ieee754_pow+0x700>)
 800c032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c036:	f7f4 f891 	bl	800015c <__adddf3>
 800c03a:	4622      	mov	r2, r4
 800c03c:	4606      	mov	r6, r0
 800c03e:	460f      	mov	r7, r1
 800c040:	462b      	mov	r3, r5
 800c042:	4620      	mov	r0, r4
 800c044:	4629      	mov	r1, r5
 800c046:	f7f4 fa3f 	bl	80004c8 <__aeabi_dmul>
 800c04a:	4602      	mov	r2, r0
 800c04c:	460b      	mov	r3, r1
 800c04e:	4630      	mov	r0, r6
 800c050:	4639      	mov	r1, r7
 800c052:	f7f4 fa39 	bl	80004c8 <__aeabi_dmul>
 800c056:	4604      	mov	r4, r0
 800c058:	460d      	mov	r5, r1
 800c05a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c05e:	4652      	mov	r2, sl
 800c060:	465b      	mov	r3, fp
 800c062:	f7f4 f87b 	bl	800015c <__adddf3>
 800c066:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c06a:	f7f4 fa2d 	bl	80004c8 <__aeabi_dmul>
 800c06e:	4622      	mov	r2, r4
 800c070:	462b      	mov	r3, r5
 800c072:	f7f4 f873 	bl	800015c <__adddf3>
 800c076:	4652      	mov	r2, sl
 800c078:	4606      	mov	r6, r0
 800c07a:	460f      	mov	r7, r1
 800c07c:	465b      	mov	r3, fp
 800c07e:	4650      	mov	r0, sl
 800c080:	4659      	mov	r1, fp
 800c082:	f7f4 fa21 	bl	80004c8 <__aeabi_dmul>
 800c086:	2200      	movs	r2, #0
 800c088:	4b62      	ldr	r3, [pc, #392]	; (800c214 <__ieee754_pow+0x734>)
 800c08a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c08e:	f7f4 f865 	bl	800015c <__adddf3>
 800c092:	4632      	mov	r2, r6
 800c094:	463b      	mov	r3, r7
 800c096:	f7f4 f861 	bl	800015c <__adddf3>
 800c09a:	9804      	ldr	r0, [sp, #16]
 800c09c:	460d      	mov	r5, r1
 800c09e:	4604      	mov	r4, r0
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	460b      	mov	r3, r1
 800c0a4:	4650      	mov	r0, sl
 800c0a6:	4659      	mov	r1, fp
 800c0a8:	f7f4 fa0e 	bl	80004c8 <__aeabi_dmul>
 800c0ac:	2200      	movs	r2, #0
 800c0ae:	4682      	mov	sl, r0
 800c0b0:	468b      	mov	fp, r1
 800c0b2:	4b58      	ldr	r3, [pc, #352]	; (800c214 <__ieee754_pow+0x734>)
 800c0b4:	4620      	mov	r0, r4
 800c0b6:	4629      	mov	r1, r5
 800c0b8:	f7f4 f84e 	bl	8000158 <__aeabi_dsub>
 800c0bc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800c0c0:	f7f4 f84a 	bl	8000158 <__aeabi_dsub>
 800c0c4:	4602      	mov	r2, r0
 800c0c6:	460b      	mov	r3, r1
 800c0c8:	4630      	mov	r0, r6
 800c0ca:	4639      	mov	r1, r7
 800c0cc:	f7f4 f844 	bl	8000158 <__aeabi_dsub>
 800c0d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c0d4:	f7f4 f9f8 	bl	80004c8 <__aeabi_dmul>
 800c0d8:	4622      	mov	r2, r4
 800c0da:	4606      	mov	r6, r0
 800c0dc:	460f      	mov	r7, r1
 800c0de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c0e2:	462b      	mov	r3, r5
 800c0e4:	f7f4 f9f0 	bl	80004c8 <__aeabi_dmul>
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	460b      	mov	r3, r1
 800c0ec:	4630      	mov	r0, r6
 800c0ee:	4639      	mov	r1, r7
 800c0f0:	f7f4 f834 	bl	800015c <__adddf3>
 800c0f4:	4606      	mov	r6, r0
 800c0f6:	460f      	mov	r7, r1
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	460b      	mov	r3, r1
 800c0fc:	4650      	mov	r0, sl
 800c0fe:	4659      	mov	r1, fp
 800c100:	f7f4 f82c 	bl	800015c <__adddf3>
 800c104:	a338      	add	r3, pc, #224	; (adr r3, 800c1e8 <__ieee754_pow+0x708>)
 800c106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c10a:	9804      	ldr	r0, [sp, #16]
 800c10c:	460d      	mov	r5, r1
 800c10e:	4604      	mov	r4, r0
 800c110:	f7f4 f9da 	bl	80004c8 <__aeabi_dmul>
 800c114:	4652      	mov	r2, sl
 800c116:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c11a:	465b      	mov	r3, fp
 800c11c:	4620      	mov	r0, r4
 800c11e:	4629      	mov	r1, r5
 800c120:	f7f4 f81a 	bl	8000158 <__aeabi_dsub>
 800c124:	4602      	mov	r2, r0
 800c126:	460b      	mov	r3, r1
 800c128:	4630      	mov	r0, r6
 800c12a:	4639      	mov	r1, r7
 800c12c:	f7f4 f814 	bl	8000158 <__aeabi_dsub>
 800c130:	a32f      	add	r3, pc, #188	; (adr r3, 800c1f0 <__ieee754_pow+0x710>)
 800c132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c136:	f7f4 f9c7 	bl	80004c8 <__aeabi_dmul>
 800c13a:	a32f      	add	r3, pc, #188	; (adr r3, 800c1f8 <__ieee754_pow+0x718>)
 800c13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c140:	4606      	mov	r6, r0
 800c142:	460f      	mov	r7, r1
 800c144:	4620      	mov	r0, r4
 800c146:	4629      	mov	r1, r5
 800c148:	f7f4 f9be 	bl	80004c8 <__aeabi_dmul>
 800c14c:	4602      	mov	r2, r0
 800c14e:	460b      	mov	r3, r1
 800c150:	4630      	mov	r0, r6
 800c152:	4639      	mov	r1, r7
 800c154:	f7f4 f802 	bl	800015c <__adddf3>
 800c158:	4b2f      	ldr	r3, [pc, #188]	; (800c218 <__ieee754_pow+0x738>)
 800c15a:	444b      	add	r3, r9
 800c15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c160:	f7f3 fffc 	bl	800015c <__adddf3>
 800c164:	4604      	mov	r4, r0
 800c166:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c168:	460d      	mov	r5, r1
 800c16a:	f7f4 f943 	bl	80003f4 <__aeabi_i2d>
 800c16e:	4606      	mov	r6, r0
 800c170:	460f      	mov	r7, r1
 800c172:	4b2a      	ldr	r3, [pc, #168]	; (800c21c <__ieee754_pow+0x73c>)
 800c174:	4622      	mov	r2, r4
 800c176:	444b      	add	r3, r9
 800c178:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c17c:	462b      	mov	r3, r5
 800c17e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c182:	f7f3 ffeb 	bl	800015c <__adddf3>
 800c186:	4642      	mov	r2, r8
 800c188:	464b      	mov	r3, r9
 800c18a:	f7f3 ffe7 	bl	800015c <__adddf3>
 800c18e:	4632      	mov	r2, r6
 800c190:	463b      	mov	r3, r7
 800c192:	f7f3 ffe3 	bl	800015c <__adddf3>
 800c196:	9804      	ldr	r0, [sp, #16]
 800c198:	4632      	mov	r2, r6
 800c19a:	463b      	mov	r3, r7
 800c19c:	4682      	mov	sl, r0
 800c19e:	468b      	mov	fp, r1
 800c1a0:	f7f3 ffda 	bl	8000158 <__aeabi_dsub>
 800c1a4:	4642      	mov	r2, r8
 800c1a6:	464b      	mov	r3, r9
 800c1a8:	f7f3 ffd6 	bl	8000158 <__aeabi_dsub>
 800c1ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1b0:	e60b      	b.n	800bdca <__ieee754_pow+0x2ea>
 800c1b2:	f04f 0801 	mov.w	r8, #1
 800c1b6:	e6a8      	b.n	800bf0a <__ieee754_pow+0x42a>
 800c1b8:	4a454eef 	.word	0x4a454eef
 800c1bc:	3fca7e28 	.word	0x3fca7e28
 800c1c0:	93c9db65 	.word	0x93c9db65
 800c1c4:	3fcd864a 	.word	0x3fcd864a
 800c1c8:	a91d4101 	.word	0xa91d4101
 800c1cc:	3fd17460 	.word	0x3fd17460
 800c1d0:	518f264d 	.word	0x518f264d
 800c1d4:	3fd55555 	.word	0x3fd55555
 800c1d8:	db6fabff 	.word	0xdb6fabff
 800c1dc:	3fdb6db6 	.word	0x3fdb6db6
 800c1e0:	33333303 	.word	0x33333303
 800c1e4:	3fe33333 	.word	0x3fe33333
 800c1e8:	e0000000 	.word	0xe0000000
 800c1ec:	3feec709 	.word	0x3feec709
 800c1f0:	dc3a03fd 	.word	0xdc3a03fd
 800c1f4:	3feec709 	.word	0x3feec709
 800c1f8:	145b01f5 	.word	0x145b01f5
 800c1fc:	be3e2fe0 	.word	0xbe3e2fe0
 800c200:	43400000 	.word	0x43400000
 800c204:	0003988e 	.word	0x0003988e
 800c208:	000bb679 	.word	0x000bb679
 800c20c:	0800f370 	.word	0x0800f370
 800c210:	3ff00000 	.word	0x3ff00000
 800c214:	40080000 	.word	0x40080000
 800c218:	0800f390 	.word	0x0800f390
 800c21c:	0800f380 	.word	0x0800f380
 800c220:	a39b      	add	r3, pc, #620	; (adr r3, 800c490 <__ieee754_pow+0x9b0>)
 800c222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c226:	4640      	mov	r0, r8
 800c228:	4649      	mov	r1, r9
 800c22a:	f7f3 ff97 	bl	800015c <__adddf3>
 800c22e:	4622      	mov	r2, r4
 800c230:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c234:	462b      	mov	r3, r5
 800c236:	4650      	mov	r0, sl
 800c238:	4639      	mov	r1, r7
 800c23a:	f7f3 ff8d 	bl	8000158 <__aeabi_dsub>
 800c23e:	4602      	mov	r2, r0
 800c240:	460b      	mov	r3, r1
 800c242:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c246:	f7f4 fbcf 	bl	80009e8 <__aeabi_dcmpgt>
 800c24a:	2800      	cmp	r0, #0
 800c24c:	f47f ae0d 	bne.w	800be6a <__ieee754_pow+0x38a>
 800c250:	4aa3      	ldr	r2, [pc, #652]	; (800c4e0 <__ieee754_pow+0xa00>)
 800c252:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 800c256:	4293      	cmp	r3, r2
 800c258:	f340 8103 	ble.w	800c462 <__ieee754_pow+0x982>
 800c25c:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c260:	2000      	movs	r0, #0
 800c262:	151b      	asrs	r3, r3, #20
 800c264:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c268:	fa4a f303 	asr.w	r3, sl, r3
 800c26c:	4433      	add	r3, r6
 800c26e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c272:	4f9c      	ldr	r7, [pc, #624]	; (800c4e4 <__ieee754_pow+0xa04>)
 800c274:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c278:	4117      	asrs	r7, r2
 800c27a:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c27e:	ea23 0107 	bic.w	r1, r3, r7
 800c282:	f1c2 0214 	rsb	r2, r2, #20
 800c286:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c28a:	fa4a fa02 	asr.w	sl, sl, r2
 800c28e:	2e00      	cmp	r6, #0
 800c290:	4602      	mov	r2, r0
 800c292:	460b      	mov	r3, r1
 800c294:	4620      	mov	r0, r4
 800c296:	4629      	mov	r1, r5
 800c298:	bfb8      	it	lt
 800c29a:	f1ca 0a00 	rsblt	sl, sl, #0
 800c29e:	f7f3 ff5b 	bl	8000158 <__aeabi_dsub>
 800c2a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c2aa:	4642      	mov	r2, r8
 800c2ac:	464b      	mov	r3, r9
 800c2ae:	f7f3 ff55 	bl	800015c <__adddf3>
 800c2b2:	a379      	add	r3, pc, #484	; (adr r3, 800c498 <__ieee754_pow+0x9b8>)
 800c2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b8:	2000      	movs	r0, #0
 800c2ba:	460d      	mov	r5, r1
 800c2bc:	4604      	mov	r4, r0
 800c2be:	f7f4 f903 	bl	80004c8 <__aeabi_dmul>
 800c2c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c2c6:	4606      	mov	r6, r0
 800c2c8:	460f      	mov	r7, r1
 800c2ca:	4620      	mov	r0, r4
 800c2cc:	4629      	mov	r1, r5
 800c2ce:	f7f3 ff43 	bl	8000158 <__aeabi_dsub>
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	460b      	mov	r3, r1
 800c2d6:	4640      	mov	r0, r8
 800c2d8:	4649      	mov	r1, r9
 800c2da:	f7f3 ff3d 	bl	8000158 <__aeabi_dsub>
 800c2de:	a370      	add	r3, pc, #448	; (adr r3, 800c4a0 <__ieee754_pow+0x9c0>)
 800c2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2e4:	f7f4 f8f0 	bl	80004c8 <__aeabi_dmul>
 800c2e8:	a36f      	add	r3, pc, #444	; (adr r3, 800c4a8 <__ieee754_pow+0x9c8>)
 800c2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ee:	4680      	mov	r8, r0
 800c2f0:	4689      	mov	r9, r1
 800c2f2:	4620      	mov	r0, r4
 800c2f4:	4629      	mov	r1, r5
 800c2f6:	f7f4 f8e7 	bl	80004c8 <__aeabi_dmul>
 800c2fa:	4602      	mov	r2, r0
 800c2fc:	460b      	mov	r3, r1
 800c2fe:	4640      	mov	r0, r8
 800c300:	4649      	mov	r1, r9
 800c302:	f7f3 ff2b 	bl	800015c <__adddf3>
 800c306:	4604      	mov	r4, r0
 800c308:	460d      	mov	r5, r1
 800c30a:	4602      	mov	r2, r0
 800c30c:	460b      	mov	r3, r1
 800c30e:	4630      	mov	r0, r6
 800c310:	4639      	mov	r1, r7
 800c312:	f7f3 ff23 	bl	800015c <__adddf3>
 800c316:	4632      	mov	r2, r6
 800c318:	463b      	mov	r3, r7
 800c31a:	4680      	mov	r8, r0
 800c31c:	4689      	mov	r9, r1
 800c31e:	f7f3 ff1b 	bl	8000158 <__aeabi_dsub>
 800c322:	4602      	mov	r2, r0
 800c324:	460b      	mov	r3, r1
 800c326:	4620      	mov	r0, r4
 800c328:	4629      	mov	r1, r5
 800c32a:	f7f3 ff15 	bl	8000158 <__aeabi_dsub>
 800c32e:	4642      	mov	r2, r8
 800c330:	4606      	mov	r6, r0
 800c332:	460f      	mov	r7, r1
 800c334:	464b      	mov	r3, r9
 800c336:	4640      	mov	r0, r8
 800c338:	4649      	mov	r1, r9
 800c33a:	f7f4 f8c5 	bl	80004c8 <__aeabi_dmul>
 800c33e:	a35c      	add	r3, pc, #368	; (adr r3, 800c4b0 <__ieee754_pow+0x9d0>)
 800c340:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c344:	4604      	mov	r4, r0
 800c346:	460d      	mov	r5, r1
 800c348:	f7f4 f8be 	bl	80004c8 <__aeabi_dmul>
 800c34c:	a35a      	add	r3, pc, #360	; (adr r3, 800c4b8 <__ieee754_pow+0x9d8>)
 800c34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c352:	f7f3 ff01 	bl	8000158 <__aeabi_dsub>
 800c356:	4622      	mov	r2, r4
 800c358:	462b      	mov	r3, r5
 800c35a:	f7f4 f8b5 	bl	80004c8 <__aeabi_dmul>
 800c35e:	a358      	add	r3, pc, #352	; (adr r3, 800c4c0 <__ieee754_pow+0x9e0>)
 800c360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c364:	f7f3 fefa 	bl	800015c <__adddf3>
 800c368:	4622      	mov	r2, r4
 800c36a:	462b      	mov	r3, r5
 800c36c:	f7f4 f8ac 	bl	80004c8 <__aeabi_dmul>
 800c370:	a355      	add	r3, pc, #340	; (adr r3, 800c4c8 <__ieee754_pow+0x9e8>)
 800c372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c376:	f7f3 feef 	bl	8000158 <__aeabi_dsub>
 800c37a:	4622      	mov	r2, r4
 800c37c:	462b      	mov	r3, r5
 800c37e:	f7f4 f8a3 	bl	80004c8 <__aeabi_dmul>
 800c382:	a353      	add	r3, pc, #332	; (adr r3, 800c4d0 <__ieee754_pow+0x9f0>)
 800c384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c388:	f7f3 fee8 	bl	800015c <__adddf3>
 800c38c:	4622      	mov	r2, r4
 800c38e:	462b      	mov	r3, r5
 800c390:	f7f4 f89a 	bl	80004c8 <__aeabi_dmul>
 800c394:	4602      	mov	r2, r0
 800c396:	460b      	mov	r3, r1
 800c398:	4640      	mov	r0, r8
 800c39a:	4649      	mov	r1, r9
 800c39c:	f7f3 fedc 	bl	8000158 <__aeabi_dsub>
 800c3a0:	4604      	mov	r4, r0
 800c3a2:	460d      	mov	r5, r1
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	4640      	mov	r0, r8
 800c3aa:	4649      	mov	r1, r9
 800c3ac:	f7f4 f88c 	bl	80004c8 <__aeabi_dmul>
 800c3b0:	2200      	movs	r2, #0
 800c3b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	4629      	mov	r1, r5
 800c3be:	f7f3 fecb 	bl	8000158 <__aeabi_dsub>
 800c3c2:	4602      	mov	r2, r0
 800c3c4:	460b      	mov	r3, r1
 800c3c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3ca:	f7f4 f9a7 	bl	800071c <__aeabi_ddiv>
 800c3ce:	4632      	mov	r2, r6
 800c3d0:	4604      	mov	r4, r0
 800c3d2:	460d      	mov	r5, r1
 800c3d4:	463b      	mov	r3, r7
 800c3d6:	4640      	mov	r0, r8
 800c3d8:	4649      	mov	r1, r9
 800c3da:	f7f4 f875 	bl	80004c8 <__aeabi_dmul>
 800c3de:	4632      	mov	r2, r6
 800c3e0:	463b      	mov	r3, r7
 800c3e2:	f7f3 febb 	bl	800015c <__adddf3>
 800c3e6:	4602      	mov	r2, r0
 800c3e8:	460b      	mov	r3, r1
 800c3ea:	4620      	mov	r0, r4
 800c3ec:	4629      	mov	r1, r5
 800c3ee:	f7f3 feb3 	bl	8000158 <__aeabi_dsub>
 800c3f2:	4642      	mov	r2, r8
 800c3f4:	464b      	mov	r3, r9
 800c3f6:	f7f3 feaf 	bl	8000158 <__aeabi_dsub>
 800c3fa:	4602      	mov	r2, r0
 800c3fc:	460b      	mov	r3, r1
 800c3fe:	2000      	movs	r0, #0
 800c400:	4939      	ldr	r1, [pc, #228]	; (800c4e8 <__ieee754_pow+0xa08>)
 800c402:	f7f3 fea9 	bl	8000158 <__aeabi_dsub>
 800c406:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800c40a:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c40e:	da2b      	bge.n	800c468 <__ieee754_pow+0x988>
 800c410:	4652      	mov	r2, sl
 800c412:	f002 fcd9 	bl	800edc8 <scalbn>
 800c416:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c41a:	f7ff bbf6 	b.w	800bc0a <__ieee754_pow+0x12a>
 800c41e:	4b33      	ldr	r3, [pc, #204]	; (800c4ec <__ieee754_pow+0xa0c>)
 800c420:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800c424:	429f      	cmp	r7, r3
 800c426:	f77f af13 	ble.w	800c250 <__ieee754_pow+0x770>
 800c42a:	4b31      	ldr	r3, [pc, #196]	; (800c4f0 <__ieee754_pow+0xa10>)
 800c42c:	440b      	add	r3, r1
 800c42e:	4303      	orrs	r3, r0
 800c430:	d00b      	beq.n	800c44a <__ieee754_pow+0x96a>
 800c432:	a329      	add	r3, pc, #164	; (adr r3, 800c4d8 <__ieee754_pow+0x9f8>)
 800c434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c438:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c43c:	f7f4 f844 	bl	80004c8 <__aeabi_dmul>
 800c440:	a325      	add	r3, pc, #148	; (adr r3, 800c4d8 <__ieee754_pow+0x9f8>)
 800c442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c446:	f7ff bbe0 	b.w	800bc0a <__ieee754_pow+0x12a>
 800c44a:	4622      	mov	r2, r4
 800c44c:	462b      	mov	r3, r5
 800c44e:	f7f3 fe83 	bl	8000158 <__aeabi_dsub>
 800c452:	4642      	mov	r2, r8
 800c454:	464b      	mov	r3, r9
 800c456:	f7f4 fabd 	bl	80009d4 <__aeabi_dcmpge>
 800c45a:	2800      	cmp	r0, #0
 800c45c:	f43f aef8 	beq.w	800c250 <__ieee754_pow+0x770>
 800c460:	e7e7      	b.n	800c432 <__ieee754_pow+0x952>
 800c462:	f04f 0a00 	mov.w	sl, #0
 800c466:	e71e      	b.n	800c2a6 <__ieee754_pow+0x7c6>
 800c468:	4621      	mov	r1, r4
 800c46a:	e7d4      	b.n	800c416 <__ieee754_pow+0x936>
 800c46c:	f04f 0b00 	mov.w	fp, #0
 800c470:	f8df c074 	ldr.w	ip, [pc, #116]	; 800c4e8 <__ieee754_pow+0xa08>
 800c474:	f7ff bb95 	b.w	800bba2 <__ieee754_pow+0xc2>
 800c478:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 800c47c:	f7ff bb91 	b.w	800bba2 <__ieee754_pow+0xc2>
 800c480:	4638      	mov	r0, r7
 800c482:	4641      	mov	r1, r8
 800c484:	f7ff bbc3 	b.w	800bc0e <__ieee754_pow+0x12e>
 800c488:	9200      	str	r2, [sp, #0]
 800c48a:	f7ff bb9f 	b.w	800bbcc <__ieee754_pow+0xec>
 800c48e:	bf00      	nop
 800c490:	652b82fe 	.word	0x652b82fe
 800c494:	3c971547 	.word	0x3c971547
 800c498:	00000000 	.word	0x00000000
 800c49c:	3fe62e43 	.word	0x3fe62e43
 800c4a0:	fefa39ef 	.word	0xfefa39ef
 800c4a4:	3fe62e42 	.word	0x3fe62e42
 800c4a8:	0ca86c39 	.word	0x0ca86c39
 800c4ac:	be205c61 	.word	0xbe205c61
 800c4b0:	72bea4d0 	.word	0x72bea4d0
 800c4b4:	3e663769 	.word	0x3e663769
 800c4b8:	c5d26bf1 	.word	0xc5d26bf1
 800c4bc:	3ebbbd41 	.word	0x3ebbbd41
 800c4c0:	af25de2c 	.word	0xaf25de2c
 800c4c4:	3f11566a 	.word	0x3f11566a
 800c4c8:	16bebd93 	.word	0x16bebd93
 800c4cc:	3f66c16c 	.word	0x3f66c16c
 800c4d0:	5555553e 	.word	0x5555553e
 800c4d4:	3fc55555 	.word	0x3fc55555
 800c4d8:	c2f8f359 	.word	0xc2f8f359
 800c4dc:	01a56e1f 	.word	0x01a56e1f
 800c4e0:	3fe00000 	.word	0x3fe00000
 800c4e4:	000fffff 	.word	0x000fffff
 800c4e8:	3ff00000 	.word	0x3ff00000
 800c4ec:	4090cbff 	.word	0x4090cbff
 800c4f0:	3f6f3400 	.word	0x3f6f3400
 800c4f4:	00000000 	.word	0x00000000

0800c4f8 <__ieee754_rem_pio2>:
 800c4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4fc:	4614      	mov	r4, r2
 800c4fe:	4ac2      	ldr	r2, [pc, #776]	; (800c808 <__ieee754_rem_pio2+0x310>)
 800c500:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 800c504:	4592      	cmp	sl, r2
 800c506:	b08d      	sub	sp, #52	; 0x34
 800c508:	468b      	mov	fp, r1
 800c50a:	dc07      	bgt.n	800c51c <__ieee754_rem_pio2+0x24>
 800c50c:	2200      	movs	r2, #0
 800c50e:	2300      	movs	r3, #0
 800c510:	e9c4 0100 	strd	r0, r1, [r4]
 800c514:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c518:	2500      	movs	r5, #0
 800c51a:	e023      	b.n	800c564 <__ieee754_rem_pio2+0x6c>
 800c51c:	4abb      	ldr	r2, [pc, #748]	; (800c80c <__ieee754_rem_pio2+0x314>)
 800c51e:	4592      	cmp	sl, r2
 800c520:	dc71      	bgt.n	800c606 <__ieee754_rem_pio2+0x10e>
 800c522:	a3ab      	add	r3, pc, #684	; (adr r3, 800c7d0 <__ieee754_rem_pio2+0x2d8>)
 800c524:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c528:	2900      	cmp	r1, #0
 800c52a:	4db9      	ldr	r5, [pc, #740]	; (800c810 <__ieee754_rem_pio2+0x318>)
 800c52c:	dd36      	ble.n	800c59c <__ieee754_rem_pio2+0xa4>
 800c52e:	f7f3 fe13 	bl	8000158 <__aeabi_dsub>
 800c532:	45aa      	cmp	sl, r5
 800c534:	4606      	mov	r6, r0
 800c536:	460f      	mov	r7, r1
 800c538:	d018      	beq.n	800c56c <__ieee754_rem_pio2+0x74>
 800c53a:	a3a7      	add	r3, pc, #668	; (adr r3, 800c7d8 <__ieee754_rem_pio2+0x2e0>)
 800c53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c540:	f7f3 fe0a 	bl	8000158 <__aeabi_dsub>
 800c544:	4602      	mov	r2, r0
 800c546:	460b      	mov	r3, r1
 800c548:	4630      	mov	r0, r6
 800c54a:	e9c4 2300 	strd	r2, r3, [r4]
 800c54e:	4639      	mov	r1, r7
 800c550:	f7f3 fe02 	bl	8000158 <__aeabi_dsub>
 800c554:	a3a0      	add	r3, pc, #640	; (adr r3, 800c7d8 <__ieee754_rem_pio2+0x2e0>)
 800c556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c55a:	f7f3 fdfd 	bl	8000158 <__aeabi_dsub>
 800c55e:	2501      	movs	r5, #1
 800c560:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c564:	4628      	mov	r0, r5
 800c566:	b00d      	add	sp, #52	; 0x34
 800c568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c56c:	a39c      	add	r3, pc, #624	; (adr r3, 800c7e0 <__ieee754_rem_pio2+0x2e8>)
 800c56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c572:	f7f3 fdf1 	bl	8000158 <__aeabi_dsub>
 800c576:	a39c      	add	r3, pc, #624	; (adr r3, 800c7e8 <__ieee754_rem_pio2+0x2f0>)
 800c578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c57c:	4606      	mov	r6, r0
 800c57e:	460f      	mov	r7, r1
 800c580:	f7f3 fdea 	bl	8000158 <__aeabi_dsub>
 800c584:	4602      	mov	r2, r0
 800c586:	460b      	mov	r3, r1
 800c588:	4630      	mov	r0, r6
 800c58a:	e9c4 2300 	strd	r2, r3, [r4]
 800c58e:	4639      	mov	r1, r7
 800c590:	f7f3 fde2 	bl	8000158 <__aeabi_dsub>
 800c594:	a394      	add	r3, pc, #592	; (adr r3, 800c7e8 <__ieee754_rem_pio2+0x2f0>)
 800c596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59a:	e7de      	b.n	800c55a <__ieee754_rem_pio2+0x62>
 800c59c:	f7f3 fdde 	bl	800015c <__adddf3>
 800c5a0:	45aa      	cmp	sl, r5
 800c5a2:	4606      	mov	r6, r0
 800c5a4:	460f      	mov	r7, r1
 800c5a6:	d016      	beq.n	800c5d6 <__ieee754_rem_pio2+0xde>
 800c5a8:	a38b      	add	r3, pc, #556	; (adr r3, 800c7d8 <__ieee754_rem_pio2+0x2e0>)
 800c5aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ae:	f7f3 fdd5 	bl	800015c <__adddf3>
 800c5b2:	4602      	mov	r2, r0
 800c5b4:	460b      	mov	r3, r1
 800c5b6:	4630      	mov	r0, r6
 800c5b8:	e9c4 2300 	strd	r2, r3, [r4]
 800c5bc:	4639      	mov	r1, r7
 800c5be:	f7f3 fdcb 	bl	8000158 <__aeabi_dsub>
 800c5c2:	a385      	add	r3, pc, #532	; (adr r3, 800c7d8 <__ieee754_rem_pio2+0x2e0>)
 800c5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5c8:	f7f3 fdc8 	bl	800015c <__adddf3>
 800c5cc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800c5d0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c5d4:	e7c6      	b.n	800c564 <__ieee754_rem_pio2+0x6c>
 800c5d6:	a382      	add	r3, pc, #520	; (adr r3, 800c7e0 <__ieee754_rem_pio2+0x2e8>)
 800c5d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5dc:	f7f3 fdbe 	bl	800015c <__adddf3>
 800c5e0:	a381      	add	r3, pc, #516	; (adr r3, 800c7e8 <__ieee754_rem_pio2+0x2f0>)
 800c5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e6:	4606      	mov	r6, r0
 800c5e8:	460f      	mov	r7, r1
 800c5ea:	f7f3 fdb7 	bl	800015c <__adddf3>
 800c5ee:	4602      	mov	r2, r0
 800c5f0:	460b      	mov	r3, r1
 800c5f2:	4630      	mov	r0, r6
 800c5f4:	e9c4 2300 	strd	r2, r3, [r4]
 800c5f8:	4639      	mov	r1, r7
 800c5fa:	f7f3 fdad 	bl	8000158 <__aeabi_dsub>
 800c5fe:	a37a      	add	r3, pc, #488	; (adr r3, 800c7e8 <__ieee754_rem_pio2+0x2f0>)
 800c600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c604:	e7e0      	b.n	800c5c8 <__ieee754_rem_pio2+0xd0>
 800c606:	4a83      	ldr	r2, [pc, #524]	; (800c814 <__ieee754_rem_pio2+0x31c>)
 800c608:	4592      	cmp	sl, r2
 800c60a:	f300 80d2 	bgt.w	800c7b2 <__ieee754_rem_pio2+0x2ba>
 800c60e:	f002 fab9 	bl	800eb84 <fabs>
 800c612:	a377      	add	r3, pc, #476	; (adr r3, 800c7f0 <__ieee754_rem_pio2+0x2f8>)
 800c614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c618:	4606      	mov	r6, r0
 800c61a:	460f      	mov	r7, r1
 800c61c:	f7f3 ff54 	bl	80004c8 <__aeabi_dmul>
 800c620:	2200      	movs	r2, #0
 800c622:	4b7d      	ldr	r3, [pc, #500]	; (800c818 <__ieee754_rem_pio2+0x320>)
 800c624:	f7f3 fd9a 	bl	800015c <__adddf3>
 800c628:	f7f4 f9fe 	bl	8000a28 <__aeabi_d2iz>
 800c62c:	4605      	mov	r5, r0
 800c62e:	f7f3 fee1 	bl	80003f4 <__aeabi_i2d>
 800c632:	a367      	add	r3, pc, #412	; (adr r3, 800c7d0 <__ieee754_rem_pio2+0x2d8>)
 800c634:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c638:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c63c:	f7f3 ff44 	bl	80004c8 <__aeabi_dmul>
 800c640:	4602      	mov	r2, r0
 800c642:	460b      	mov	r3, r1
 800c644:	4630      	mov	r0, r6
 800c646:	4639      	mov	r1, r7
 800c648:	f7f3 fd86 	bl	8000158 <__aeabi_dsub>
 800c64c:	a362      	add	r3, pc, #392	; (adr r3, 800c7d8 <__ieee754_rem_pio2+0x2e0>)
 800c64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c652:	4606      	mov	r6, r0
 800c654:	460f      	mov	r7, r1
 800c656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c65a:	f7f3 ff35 	bl	80004c8 <__aeabi_dmul>
 800c65e:	2d1f      	cmp	r5, #31
 800c660:	4680      	mov	r8, r0
 800c662:	4689      	mov	r9, r1
 800c664:	dc0e      	bgt.n	800c684 <__ieee754_rem_pio2+0x18c>
 800c666:	4b6d      	ldr	r3, [pc, #436]	; (800c81c <__ieee754_rem_pio2+0x324>)
 800c668:	1e6a      	subs	r2, r5, #1
 800c66a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c66e:	4553      	cmp	r3, sl
 800c670:	d008      	beq.n	800c684 <__ieee754_rem_pio2+0x18c>
 800c672:	4642      	mov	r2, r8
 800c674:	464b      	mov	r3, r9
 800c676:	4630      	mov	r0, r6
 800c678:	4639      	mov	r1, r7
 800c67a:	f7f3 fd6d 	bl	8000158 <__aeabi_dsub>
 800c67e:	e9c4 0100 	strd	r0, r1, [r4]
 800c682:	e011      	b.n	800c6a8 <__ieee754_rem_pio2+0x1b0>
 800c684:	464b      	mov	r3, r9
 800c686:	4642      	mov	r2, r8
 800c688:	4630      	mov	r0, r6
 800c68a:	4639      	mov	r1, r7
 800c68c:	f7f3 fd64 	bl	8000158 <__aeabi_dsub>
 800c690:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800c694:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c698:	ebaa 0303 	sub.w	r3, sl, r3
 800c69c:	2b10      	cmp	r3, #16
 800c69e:	dc1f      	bgt.n	800c6e0 <__ieee754_rem_pio2+0x1e8>
 800c6a0:	4602      	mov	r2, r0
 800c6a2:	460b      	mov	r3, r1
 800c6a4:	e9c4 2300 	strd	r2, r3, [r4]
 800c6a8:	e9d4 2a00 	ldrd	r2, sl, [r4]
 800c6ac:	4630      	mov	r0, r6
 800c6ae:	4653      	mov	r3, sl
 800c6b0:	4639      	mov	r1, r7
 800c6b2:	f7f3 fd51 	bl	8000158 <__aeabi_dsub>
 800c6b6:	4642      	mov	r2, r8
 800c6b8:	464b      	mov	r3, r9
 800c6ba:	f7f3 fd4d 	bl	8000158 <__aeabi_dsub>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	f1bb 0f00 	cmp.w	fp, #0
 800c6c6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800c6ca:	f6bf af4b 	bge.w	800c564 <__ieee754_rem_pio2+0x6c>
 800c6ce:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800c6d2:	e9c4 3001 	strd	r3, r0, [r4, #4]
 800c6d6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800c6da:	60e1      	str	r1, [r4, #12]
 800c6dc:	426d      	negs	r5, r5
 800c6de:	e741      	b.n	800c564 <__ieee754_rem_pio2+0x6c>
 800c6e0:	a33f      	add	r3, pc, #252	; (adr r3, 800c7e0 <__ieee754_rem_pio2+0x2e8>)
 800c6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c6ea:	f7f3 feed 	bl	80004c8 <__aeabi_dmul>
 800c6ee:	4680      	mov	r8, r0
 800c6f0:	4689      	mov	r9, r1
 800c6f2:	4602      	mov	r2, r0
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	4630      	mov	r0, r6
 800c6f8:	4639      	mov	r1, r7
 800c6fa:	f7f3 fd2d 	bl	8000158 <__aeabi_dsub>
 800c6fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c702:	4602      	mov	r2, r0
 800c704:	460b      	mov	r3, r1
 800c706:	4630      	mov	r0, r6
 800c708:	4639      	mov	r1, r7
 800c70a:	f7f3 fd25 	bl	8000158 <__aeabi_dsub>
 800c70e:	4642      	mov	r2, r8
 800c710:	464b      	mov	r3, r9
 800c712:	f7f3 fd21 	bl	8000158 <__aeabi_dsub>
 800c716:	a334      	add	r3, pc, #208	; (adr r3, 800c7e8 <__ieee754_rem_pio2+0x2f0>)
 800c718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c71c:	4606      	mov	r6, r0
 800c71e:	460f      	mov	r7, r1
 800c720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c724:	f7f3 fed0 	bl	80004c8 <__aeabi_dmul>
 800c728:	4632      	mov	r2, r6
 800c72a:	463b      	mov	r3, r7
 800c72c:	f7f3 fd14 	bl	8000158 <__aeabi_dsub>
 800c730:	460b      	mov	r3, r1
 800c732:	4602      	mov	r2, r0
 800c734:	4680      	mov	r8, r0
 800c736:	4689      	mov	r9, r1
 800c738:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c73c:	f7f3 fd0c 	bl	8000158 <__aeabi_dsub>
 800c740:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c744:	ebaa 0a03 	sub.w	sl, sl, r3
 800c748:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 800c74c:	dc06      	bgt.n	800c75c <__ieee754_rem_pio2+0x264>
 800c74e:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 800c752:	4602      	mov	r2, r0
 800c754:	460b      	mov	r3, r1
 800c756:	e9c4 2300 	strd	r2, r3, [r4]
 800c75a:	e7a5      	b.n	800c6a8 <__ieee754_rem_pio2+0x1b0>
 800c75c:	a326      	add	r3, pc, #152	; (adr r3, 800c7f8 <__ieee754_rem_pio2+0x300>)
 800c75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c762:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c766:	f7f3 feaf 	bl	80004c8 <__aeabi_dmul>
 800c76a:	4680      	mov	r8, r0
 800c76c:	4689      	mov	r9, r1
 800c76e:	4602      	mov	r2, r0
 800c770:	460b      	mov	r3, r1
 800c772:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c776:	f7f3 fcef 	bl	8000158 <__aeabi_dsub>
 800c77a:	4602      	mov	r2, r0
 800c77c:	460b      	mov	r3, r1
 800c77e:	4606      	mov	r6, r0
 800c780:	460f      	mov	r7, r1
 800c782:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c786:	f7f3 fce7 	bl	8000158 <__aeabi_dsub>
 800c78a:	4642      	mov	r2, r8
 800c78c:	464b      	mov	r3, r9
 800c78e:	f7f3 fce3 	bl	8000158 <__aeabi_dsub>
 800c792:	a31b      	add	r3, pc, #108	; (adr r3, 800c800 <__ieee754_rem_pio2+0x308>)
 800c794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c798:	4680      	mov	r8, r0
 800c79a:	4689      	mov	r9, r1
 800c79c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c7a0:	f7f3 fe92 	bl	80004c8 <__aeabi_dmul>
 800c7a4:	4642      	mov	r2, r8
 800c7a6:	464b      	mov	r3, r9
 800c7a8:	f7f3 fcd6 	bl	8000158 <__aeabi_dsub>
 800c7ac:	4680      	mov	r8, r0
 800c7ae:	4689      	mov	r9, r1
 800c7b0:	e75f      	b.n	800c672 <__ieee754_rem_pio2+0x17a>
 800c7b2:	4a1b      	ldr	r2, [pc, #108]	; (800c820 <__ieee754_rem_pio2+0x328>)
 800c7b4:	4592      	cmp	sl, r2
 800c7b6:	dd35      	ble.n	800c824 <__ieee754_rem_pio2+0x32c>
 800c7b8:	4602      	mov	r2, r0
 800c7ba:	460b      	mov	r3, r1
 800c7bc:	f7f3 fccc 	bl	8000158 <__aeabi_dsub>
 800c7c0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c7c4:	e9c4 0100 	strd	r0, r1, [r4]
 800c7c8:	e6a6      	b.n	800c518 <__ieee754_rem_pio2+0x20>
 800c7ca:	bf00      	nop
 800c7cc:	f3af 8000 	nop.w
 800c7d0:	54400000 	.word	0x54400000
 800c7d4:	3ff921fb 	.word	0x3ff921fb
 800c7d8:	1a626331 	.word	0x1a626331
 800c7dc:	3dd0b461 	.word	0x3dd0b461
 800c7e0:	1a600000 	.word	0x1a600000
 800c7e4:	3dd0b461 	.word	0x3dd0b461
 800c7e8:	2e037073 	.word	0x2e037073
 800c7ec:	3ba3198a 	.word	0x3ba3198a
 800c7f0:	6dc9c883 	.word	0x6dc9c883
 800c7f4:	3fe45f30 	.word	0x3fe45f30
 800c7f8:	2e000000 	.word	0x2e000000
 800c7fc:	3ba3198a 	.word	0x3ba3198a
 800c800:	252049c1 	.word	0x252049c1
 800c804:	397b839a 	.word	0x397b839a
 800c808:	3fe921fb 	.word	0x3fe921fb
 800c80c:	4002d97b 	.word	0x4002d97b
 800c810:	3ff921fb 	.word	0x3ff921fb
 800c814:	413921fb 	.word	0x413921fb
 800c818:	3fe00000 	.word	0x3fe00000
 800c81c:	0800f3a0 	.word	0x0800f3a0
 800c820:	7fefffff 	.word	0x7fefffff
 800c824:	ea4f 552a 	mov.w	r5, sl, asr #20
 800c828:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800c82c:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 800c830:	460f      	mov	r7, r1
 800c832:	4606      	mov	r6, r0
 800c834:	f7f4 f8f8 	bl	8000a28 <__aeabi_d2iz>
 800c838:	f7f3 fddc 	bl	80003f4 <__aeabi_i2d>
 800c83c:	4602      	mov	r2, r0
 800c83e:	460b      	mov	r3, r1
 800c840:	4630      	mov	r0, r6
 800c842:	4639      	mov	r1, r7
 800c844:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c848:	f7f3 fc86 	bl	8000158 <__aeabi_dsub>
 800c84c:	2200      	movs	r2, #0
 800c84e:	4b20      	ldr	r3, [pc, #128]	; (800c8d0 <__ieee754_rem_pio2+0x3d8>)
 800c850:	f7f3 fe3a 	bl	80004c8 <__aeabi_dmul>
 800c854:	460f      	mov	r7, r1
 800c856:	4606      	mov	r6, r0
 800c858:	f7f4 f8e6 	bl	8000a28 <__aeabi_d2iz>
 800c85c:	f7f3 fdca 	bl	80003f4 <__aeabi_i2d>
 800c860:	4602      	mov	r2, r0
 800c862:	460b      	mov	r3, r1
 800c864:	4630      	mov	r0, r6
 800c866:	4639      	mov	r1, r7
 800c868:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c86c:	f7f3 fc74 	bl	8000158 <__aeabi_dsub>
 800c870:	2200      	movs	r2, #0
 800c872:	4b17      	ldr	r3, [pc, #92]	; (800c8d0 <__ieee754_rem_pio2+0x3d8>)
 800c874:	f7f3 fe28 	bl	80004c8 <__aeabi_dmul>
 800c878:	f04f 0803 	mov.w	r8, #3
 800c87c:	2600      	movs	r6, #0
 800c87e:	2700      	movs	r7, #0
 800c880:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800c884:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800c888:	4632      	mov	r2, r6
 800c88a:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800c88e:	463b      	mov	r3, r7
 800c890:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800c894:	f7f4 f880 	bl	8000998 <__aeabi_dcmpeq>
 800c898:	b9b8      	cbnz	r0, 800c8ca <__ieee754_rem_pio2+0x3d2>
 800c89a:	4b0e      	ldr	r3, [pc, #56]	; (800c8d4 <__ieee754_rem_pio2+0x3dc>)
 800c89c:	462a      	mov	r2, r5
 800c89e:	9301      	str	r3, [sp, #4]
 800c8a0:	2302      	movs	r3, #2
 800c8a2:	4621      	mov	r1, r4
 800c8a4:	9300      	str	r3, [sp, #0]
 800c8a6:	a806      	add	r0, sp, #24
 800c8a8:	4643      	mov	r3, r8
 800c8aa:	f001 f84b 	bl	800d944 <__kernel_rem_pio2>
 800c8ae:	f1bb 0f00 	cmp.w	fp, #0
 800c8b2:	4605      	mov	r5, r0
 800c8b4:	f6bf ae56 	bge.w	800c564 <__ieee754_rem_pio2+0x6c>
 800c8b8:	6863      	ldr	r3, [r4, #4]
 800c8ba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c8be:	6063      	str	r3, [r4, #4]
 800c8c0:	68e3      	ldr	r3, [r4, #12]
 800c8c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c8c6:	60e3      	str	r3, [r4, #12]
 800c8c8:	e708      	b.n	800c6dc <__ieee754_rem_pio2+0x1e4>
 800c8ca:	46d0      	mov	r8, sl
 800c8cc:	e7dc      	b.n	800c888 <__ieee754_rem_pio2+0x390>
 800c8ce:	bf00      	nop
 800c8d0:	41700000 	.word	0x41700000
 800c8d4:	0800f420 	.word	0x0800f420

0800c8d8 <__ieee754_sqrt>:
 800c8d8:	4b54      	ldr	r3, [pc, #336]	; (800ca2c <__ieee754_sqrt+0x154>)
 800c8da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8de:	438b      	bics	r3, r1
 800c8e0:	4606      	mov	r6, r0
 800c8e2:	460d      	mov	r5, r1
 800c8e4:	460a      	mov	r2, r1
 800c8e6:	460c      	mov	r4, r1
 800c8e8:	d10f      	bne.n	800c90a <__ieee754_sqrt+0x32>
 800c8ea:	4602      	mov	r2, r0
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	f7f3 fdeb 	bl	80004c8 <__aeabi_dmul>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	4630      	mov	r0, r6
 800c8f8:	4629      	mov	r1, r5
 800c8fa:	f7f3 fc2f 	bl	800015c <__adddf3>
 800c8fe:	4606      	mov	r6, r0
 800c900:	460d      	mov	r5, r1
 800c902:	4630      	mov	r0, r6
 800c904:	4629      	mov	r1, r5
 800c906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c90a:	2900      	cmp	r1, #0
 800c90c:	4607      	mov	r7, r0
 800c90e:	4603      	mov	r3, r0
 800c910:	dc0e      	bgt.n	800c930 <__ieee754_sqrt+0x58>
 800c912:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800c916:	ea5c 0707 	orrs.w	r7, ip, r7
 800c91a:	d0f2      	beq.n	800c902 <__ieee754_sqrt+0x2a>
 800c91c:	b141      	cbz	r1, 800c930 <__ieee754_sqrt+0x58>
 800c91e:	4602      	mov	r2, r0
 800c920:	460b      	mov	r3, r1
 800c922:	f7f3 fc19 	bl	8000158 <__aeabi_dsub>
 800c926:	4602      	mov	r2, r0
 800c928:	460b      	mov	r3, r1
 800c92a:	f7f3 fef7 	bl	800071c <__aeabi_ddiv>
 800c92e:	e7e6      	b.n	800c8fe <__ieee754_sqrt+0x26>
 800c930:	1512      	asrs	r2, r2, #20
 800c932:	d074      	beq.n	800ca1e <__ieee754_sqrt+0x146>
 800c934:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c938:	07d5      	lsls	r5, r2, #31
 800c93a:	f04f 0500 	mov.w	r5, #0
 800c93e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800c942:	bf48      	it	mi
 800c944:	0fd9      	lsrmi	r1, r3, #31
 800c946:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 800c94a:	bf44      	itt	mi
 800c94c:	005b      	lslmi	r3, r3, #1
 800c94e:	eb01 0444 	addmi.w	r4, r1, r4, lsl #1
 800c952:	1051      	asrs	r1, r2, #1
 800c954:	0fda      	lsrs	r2, r3, #31
 800c956:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 800c95a:	4628      	mov	r0, r5
 800c95c:	2216      	movs	r2, #22
 800c95e:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c962:	005b      	lsls	r3, r3, #1
 800c964:	1987      	adds	r7, r0, r6
 800c966:	42a7      	cmp	r7, r4
 800c968:	bfde      	ittt	le
 800c96a:	19b8      	addle	r0, r7, r6
 800c96c:	1be4      	suble	r4, r4, r7
 800c96e:	19ad      	addle	r5, r5, r6
 800c970:	0fdf      	lsrs	r7, r3, #31
 800c972:	3a01      	subs	r2, #1
 800c974:	eb07 0444 	add.w	r4, r7, r4, lsl #1
 800c978:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c97c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c980:	d1f0      	bne.n	800c964 <__ieee754_sqrt+0x8c>
 800c982:	f04f 0c20 	mov.w	ip, #32
 800c986:	4696      	mov	lr, r2
 800c988:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c98c:	4284      	cmp	r4, r0
 800c98e:	eb06 070e 	add.w	r7, r6, lr
 800c992:	dc02      	bgt.n	800c99a <__ieee754_sqrt+0xc2>
 800c994:	d112      	bne.n	800c9bc <__ieee754_sqrt+0xe4>
 800c996:	429f      	cmp	r7, r3
 800c998:	d810      	bhi.n	800c9bc <__ieee754_sqrt+0xe4>
 800c99a:	2f00      	cmp	r7, #0
 800c99c:	eb07 0e06 	add.w	lr, r7, r6
 800c9a0:	da42      	bge.n	800ca28 <__ieee754_sqrt+0x150>
 800c9a2:	f1be 0f00 	cmp.w	lr, #0
 800c9a6:	db3f      	blt.n	800ca28 <__ieee754_sqrt+0x150>
 800c9a8:	f100 0801 	add.w	r8, r0, #1
 800c9ac:	1a24      	subs	r4, r4, r0
 800c9ae:	4640      	mov	r0, r8
 800c9b0:	429f      	cmp	r7, r3
 800c9b2:	bf88      	it	hi
 800c9b4:	f104 34ff 	addhi.w	r4, r4, #4294967295	; 0xffffffff
 800c9b8:	1bdb      	subs	r3, r3, r7
 800c9ba:	4432      	add	r2, r6
 800c9bc:	0064      	lsls	r4, r4, #1
 800c9be:	f1bc 0c01 	subs.w	ip, ip, #1
 800c9c2:	eb04 74d3 	add.w	r4, r4, r3, lsr #31
 800c9c6:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c9ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c9ce:	d1dd      	bne.n	800c98c <__ieee754_sqrt+0xb4>
 800c9d0:	4323      	orrs	r3, r4
 800c9d2:	d006      	beq.n	800c9e2 <__ieee754_sqrt+0x10a>
 800c9d4:	1c54      	adds	r4, r2, #1
 800c9d6:	bf0b      	itete	eq
 800c9d8:	4662      	moveq	r2, ip
 800c9da:	3201      	addne	r2, #1
 800c9dc:	3501      	addeq	r5, #1
 800c9de:	f022 0201 	bicne.w	r2, r2, #1
 800c9e2:	106b      	asrs	r3, r5, #1
 800c9e4:	0852      	lsrs	r2, r2, #1
 800c9e6:	07e8      	lsls	r0, r5, #31
 800c9e8:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c9ec:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c9f0:	bf48      	it	mi
 800c9f2:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c9f6:	eb03 5501 	add.w	r5, r3, r1, lsl #20
 800c9fa:	4616      	mov	r6, r2
 800c9fc:	e781      	b.n	800c902 <__ieee754_sqrt+0x2a>
 800c9fe:	0adc      	lsrs	r4, r3, #11
 800ca00:	3915      	subs	r1, #21
 800ca02:	055b      	lsls	r3, r3, #21
 800ca04:	2c00      	cmp	r4, #0
 800ca06:	d0fa      	beq.n	800c9fe <__ieee754_sqrt+0x126>
 800ca08:	02e6      	lsls	r6, r4, #11
 800ca0a:	d50a      	bpl.n	800ca22 <__ieee754_sqrt+0x14a>
 800ca0c:	f1c2 0020 	rsb	r0, r2, #32
 800ca10:	fa23 f000 	lsr.w	r0, r3, r0
 800ca14:	1e55      	subs	r5, r2, #1
 800ca16:	4093      	lsls	r3, r2
 800ca18:	4304      	orrs	r4, r0
 800ca1a:	1b4a      	subs	r2, r1, r5
 800ca1c:	e78a      	b.n	800c934 <__ieee754_sqrt+0x5c>
 800ca1e:	4611      	mov	r1, r2
 800ca20:	e7f0      	b.n	800ca04 <__ieee754_sqrt+0x12c>
 800ca22:	0064      	lsls	r4, r4, #1
 800ca24:	3201      	adds	r2, #1
 800ca26:	e7ef      	b.n	800ca08 <__ieee754_sqrt+0x130>
 800ca28:	4680      	mov	r8, r0
 800ca2a:	e7bf      	b.n	800c9ac <__ieee754_sqrt+0xd4>
 800ca2c:	7ff00000 	.word	0x7ff00000

0800ca30 <__ieee754_asinf>:
 800ca30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca34:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800ca38:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800ca3c:	4604      	mov	r4, r0
 800ca3e:	4607      	mov	r7, r0
 800ca40:	d10c      	bne.n	800ca5c <__ieee754_asinf+0x2c>
 800ca42:	498c      	ldr	r1, [pc, #560]	; (800cc74 <__ieee754_asinf+0x244>)
 800ca44:	f7f4 f976 	bl	8000d34 <__aeabi_fmul>
 800ca48:	498b      	ldr	r1, [pc, #556]	; (800cc78 <__ieee754_asinf+0x248>)
 800ca4a:	4605      	mov	r5, r0
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	f7f4 f971 	bl	8000d34 <__aeabi_fmul>
 800ca52:	4601      	mov	r1, r0
 800ca54:	4628      	mov	r0, r5
 800ca56:	f7f4 f865 	bl	8000b24 <__addsf3>
 800ca5a:	e006      	b.n	800ca6a <__ieee754_asinf+0x3a>
 800ca5c:	dd09      	ble.n	800ca72 <__ieee754_asinf+0x42>
 800ca5e:	4601      	mov	r1, r0
 800ca60:	f7f4 f85e 	bl	8000b20 <__aeabi_fsub>
 800ca64:	4601      	mov	r1, r0
 800ca66:	f7f4 fa19 	bl	8000e9c <__aeabi_fdiv>
 800ca6a:	4604      	mov	r4, r0
 800ca6c:	4620      	mov	r0, r4
 800ca6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca72:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800ca76:	da0b      	bge.n	800ca90 <__ieee754_asinf+0x60>
 800ca78:	f1b5 5f48 	cmp.w	r5, #838860800	; 0x32000000
 800ca7c:	da73      	bge.n	800cb66 <__ieee754_asinf+0x136>
 800ca7e:	497f      	ldr	r1, [pc, #508]	; (800cc7c <__ieee754_asinf+0x24c>)
 800ca80:	f7f4 f850 	bl	8000b24 <__addsf3>
 800ca84:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ca88:	f7f4 fb10 	bl	80010ac <__aeabi_fcmpgt>
 800ca8c:	2800      	cmp	r0, #0
 800ca8e:	d1ed      	bne.n	800ca6c <__ieee754_asinf+0x3c>
 800ca90:	4620      	mov	r0, r4
 800ca92:	f002 fb13 	bl	800f0bc <fabsf>
 800ca96:	4601      	mov	r1, r0
 800ca98:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ca9c:	f7f4 f840 	bl	8000b20 <__aeabi_fsub>
 800caa0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800caa4:	f7f4 f946 	bl	8000d34 <__aeabi_fmul>
 800caa8:	4604      	mov	r4, r0
 800caaa:	4975      	ldr	r1, [pc, #468]	; (800cc80 <__ieee754_asinf+0x250>)
 800caac:	f7f4 f942 	bl	8000d34 <__aeabi_fmul>
 800cab0:	4974      	ldr	r1, [pc, #464]	; (800cc84 <__ieee754_asinf+0x254>)
 800cab2:	f7f4 f837 	bl	8000b24 <__addsf3>
 800cab6:	4621      	mov	r1, r4
 800cab8:	f7f4 f93c 	bl	8000d34 <__aeabi_fmul>
 800cabc:	4972      	ldr	r1, [pc, #456]	; (800cc88 <__ieee754_asinf+0x258>)
 800cabe:	f7f4 f82f 	bl	8000b20 <__aeabi_fsub>
 800cac2:	4621      	mov	r1, r4
 800cac4:	f7f4 f936 	bl	8000d34 <__aeabi_fmul>
 800cac8:	4970      	ldr	r1, [pc, #448]	; (800cc8c <__ieee754_asinf+0x25c>)
 800caca:	f7f4 f82b 	bl	8000b24 <__addsf3>
 800cace:	4621      	mov	r1, r4
 800cad0:	f7f4 f930 	bl	8000d34 <__aeabi_fmul>
 800cad4:	496e      	ldr	r1, [pc, #440]	; (800cc90 <__ieee754_asinf+0x260>)
 800cad6:	f7f4 f823 	bl	8000b20 <__aeabi_fsub>
 800cada:	4621      	mov	r1, r4
 800cadc:	f7f4 f92a 	bl	8000d34 <__aeabi_fmul>
 800cae0:	496c      	ldr	r1, [pc, #432]	; (800cc94 <__ieee754_asinf+0x264>)
 800cae2:	f7f4 f81f 	bl	8000b24 <__addsf3>
 800cae6:	4621      	mov	r1, r4
 800cae8:	f7f4 f924 	bl	8000d34 <__aeabi_fmul>
 800caec:	496a      	ldr	r1, [pc, #424]	; (800cc98 <__ieee754_asinf+0x268>)
 800caee:	4680      	mov	r8, r0
 800caf0:	4620      	mov	r0, r4
 800caf2:	f7f4 f91f 	bl	8000d34 <__aeabi_fmul>
 800caf6:	4969      	ldr	r1, [pc, #420]	; (800cc9c <__ieee754_asinf+0x26c>)
 800caf8:	f7f4 f812 	bl	8000b20 <__aeabi_fsub>
 800cafc:	4621      	mov	r1, r4
 800cafe:	f7f4 f919 	bl	8000d34 <__aeabi_fmul>
 800cb02:	4967      	ldr	r1, [pc, #412]	; (800cca0 <__ieee754_asinf+0x270>)
 800cb04:	f7f4 f80e 	bl	8000b24 <__addsf3>
 800cb08:	4621      	mov	r1, r4
 800cb0a:	f7f4 f913 	bl	8000d34 <__aeabi_fmul>
 800cb0e:	4965      	ldr	r1, [pc, #404]	; (800cca4 <__ieee754_asinf+0x274>)
 800cb10:	f7f4 f806 	bl	8000b20 <__aeabi_fsub>
 800cb14:	4621      	mov	r1, r4
 800cb16:	f7f4 f90d 	bl	8000d34 <__aeabi_fmul>
 800cb1a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cb1e:	f7f4 f801 	bl	8000b24 <__addsf3>
 800cb22:	4681      	mov	r9, r0
 800cb24:	4620      	mov	r0, r4
 800cb26:	f000 fdf9 	bl	800d71c <__ieee754_sqrtf>
 800cb2a:	4b5f      	ldr	r3, [pc, #380]	; (800cca8 <__ieee754_asinf+0x278>)
 800cb2c:	4606      	mov	r6, r0
 800cb2e:	429d      	cmp	r5, r3
 800cb30:	dd63      	ble.n	800cbfa <__ieee754_asinf+0x1ca>
 800cb32:	4649      	mov	r1, r9
 800cb34:	4640      	mov	r0, r8
 800cb36:	f7f4 f9b1 	bl	8000e9c <__aeabi_fdiv>
 800cb3a:	4631      	mov	r1, r6
 800cb3c:	f7f4 f8fa 	bl	8000d34 <__aeabi_fmul>
 800cb40:	4631      	mov	r1, r6
 800cb42:	f7f3 ffef 	bl	8000b24 <__addsf3>
 800cb46:	4601      	mov	r1, r0
 800cb48:	f7f3 ffec 	bl	8000b24 <__addsf3>
 800cb4c:	4957      	ldr	r1, [pc, #348]	; (800ccac <__ieee754_asinf+0x27c>)
 800cb4e:	f7f3 ffe9 	bl	8000b24 <__addsf3>
 800cb52:	4601      	mov	r1, r0
 800cb54:	4847      	ldr	r0, [pc, #284]	; (800cc74 <__ieee754_asinf+0x244>)
 800cb56:	f7f3 ffe3 	bl	8000b20 <__aeabi_fsub>
 800cb5a:	2f00      	cmp	r7, #0
 800cb5c:	4604      	mov	r4, r0
 800cb5e:	bfd8      	it	le
 800cb60:	f100 4400 	addle.w	r4, r0, #2147483648	; 0x80000000
 800cb64:	e782      	b.n	800ca6c <__ieee754_asinf+0x3c>
 800cb66:	4601      	mov	r1, r0
 800cb68:	f7f4 f8e4 	bl	8000d34 <__aeabi_fmul>
 800cb6c:	4605      	mov	r5, r0
 800cb6e:	4944      	ldr	r1, [pc, #272]	; (800cc80 <__ieee754_asinf+0x250>)
 800cb70:	f7f4 f8e0 	bl	8000d34 <__aeabi_fmul>
 800cb74:	4943      	ldr	r1, [pc, #268]	; (800cc84 <__ieee754_asinf+0x254>)
 800cb76:	f7f3 ffd5 	bl	8000b24 <__addsf3>
 800cb7a:	4629      	mov	r1, r5
 800cb7c:	f7f4 f8da 	bl	8000d34 <__aeabi_fmul>
 800cb80:	4941      	ldr	r1, [pc, #260]	; (800cc88 <__ieee754_asinf+0x258>)
 800cb82:	f7f3 ffcd 	bl	8000b20 <__aeabi_fsub>
 800cb86:	4629      	mov	r1, r5
 800cb88:	f7f4 f8d4 	bl	8000d34 <__aeabi_fmul>
 800cb8c:	493f      	ldr	r1, [pc, #252]	; (800cc8c <__ieee754_asinf+0x25c>)
 800cb8e:	f7f3 ffc9 	bl	8000b24 <__addsf3>
 800cb92:	4629      	mov	r1, r5
 800cb94:	f7f4 f8ce 	bl	8000d34 <__aeabi_fmul>
 800cb98:	493d      	ldr	r1, [pc, #244]	; (800cc90 <__ieee754_asinf+0x260>)
 800cb9a:	f7f3 ffc1 	bl	8000b20 <__aeabi_fsub>
 800cb9e:	4629      	mov	r1, r5
 800cba0:	f7f4 f8c8 	bl	8000d34 <__aeabi_fmul>
 800cba4:	493b      	ldr	r1, [pc, #236]	; (800cc94 <__ieee754_asinf+0x264>)
 800cba6:	f7f3 ffbd 	bl	8000b24 <__addsf3>
 800cbaa:	4629      	mov	r1, r5
 800cbac:	f7f4 f8c2 	bl	8000d34 <__aeabi_fmul>
 800cbb0:	4939      	ldr	r1, [pc, #228]	; (800cc98 <__ieee754_asinf+0x268>)
 800cbb2:	4606      	mov	r6, r0
 800cbb4:	4628      	mov	r0, r5
 800cbb6:	f7f4 f8bd 	bl	8000d34 <__aeabi_fmul>
 800cbba:	4938      	ldr	r1, [pc, #224]	; (800cc9c <__ieee754_asinf+0x26c>)
 800cbbc:	f7f3 ffb0 	bl	8000b20 <__aeabi_fsub>
 800cbc0:	4629      	mov	r1, r5
 800cbc2:	f7f4 f8b7 	bl	8000d34 <__aeabi_fmul>
 800cbc6:	4936      	ldr	r1, [pc, #216]	; (800cca0 <__ieee754_asinf+0x270>)
 800cbc8:	f7f3 ffac 	bl	8000b24 <__addsf3>
 800cbcc:	4629      	mov	r1, r5
 800cbce:	f7f4 f8b1 	bl	8000d34 <__aeabi_fmul>
 800cbd2:	4934      	ldr	r1, [pc, #208]	; (800cca4 <__ieee754_asinf+0x274>)
 800cbd4:	f7f3 ffa4 	bl	8000b20 <__aeabi_fsub>
 800cbd8:	4629      	mov	r1, r5
 800cbda:	f7f4 f8ab 	bl	8000d34 <__aeabi_fmul>
 800cbde:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cbe2:	f7f3 ff9f 	bl	8000b24 <__addsf3>
 800cbe6:	4601      	mov	r1, r0
 800cbe8:	4630      	mov	r0, r6
 800cbea:	f7f4 f957 	bl	8000e9c <__aeabi_fdiv>
 800cbee:	4621      	mov	r1, r4
 800cbf0:	f7f4 f8a0 	bl	8000d34 <__aeabi_fmul>
 800cbf4:	4601      	mov	r1, r0
 800cbf6:	4620      	mov	r0, r4
 800cbf8:	e72d      	b.n	800ca56 <__ieee754_asinf+0x26>
 800cbfa:	4601      	mov	r1, r0
 800cbfc:	f420 657f 	bic.w	r5, r0, #4080	; 0xff0
 800cc00:	f7f3 ff90 	bl	8000b24 <__addsf3>
 800cc04:	4649      	mov	r1, r9
 800cc06:	4682      	mov	sl, r0
 800cc08:	4640      	mov	r0, r8
 800cc0a:	f7f4 f947 	bl	8000e9c <__aeabi_fdiv>
 800cc0e:	4601      	mov	r1, r0
 800cc10:	4650      	mov	r0, sl
 800cc12:	f7f4 f88f 	bl	8000d34 <__aeabi_fmul>
 800cc16:	f025 050f 	bic.w	r5, r5, #15
 800cc1a:	4680      	mov	r8, r0
 800cc1c:	4629      	mov	r1, r5
 800cc1e:	4628      	mov	r0, r5
 800cc20:	f7f4 f888 	bl	8000d34 <__aeabi_fmul>
 800cc24:	4601      	mov	r1, r0
 800cc26:	4620      	mov	r0, r4
 800cc28:	f7f3 ff7a 	bl	8000b20 <__aeabi_fsub>
 800cc2c:	4631      	mov	r1, r6
 800cc2e:	4604      	mov	r4, r0
 800cc30:	4628      	mov	r0, r5
 800cc32:	f7f3 ff77 	bl	8000b24 <__addsf3>
 800cc36:	4601      	mov	r1, r0
 800cc38:	4620      	mov	r0, r4
 800cc3a:	f7f4 f92f 	bl	8000e9c <__aeabi_fdiv>
 800cc3e:	4601      	mov	r1, r0
 800cc40:	f7f3 ff70 	bl	8000b24 <__addsf3>
 800cc44:	4601      	mov	r1, r0
 800cc46:	480c      	ldr	r0, [pc, #48]	; (800cc78 <__ieee754_asinf+0x248>)
 800cc48:	f7f3 ff6a 	bl	8000b20 <__aeabi_fsub>
 800cc4c:	4601      	mov	r1, r0
 800cc4e:	4640      	mov	r0, r8
 800cc50:	f7f3 ff66 	bl	8000b20 <__aeabi_fsub>
 800cc54:	4629      	mov	r1, r5
 800cc56:	4604      	mov	r4, r0
 800cc58:	4628      	mov	r0, r5
 800cc5a:	f7f3 ff63 	bl	8000b24 <__addsf3>
 800cc5e:	4601      	mov	r1, r0
 800cc60:	4813      	ldr	r0, [pc, #76]	; (800ccb0 <__ieee754_asinf+0x280>)
 800cc62:	f7f3 ff5d 	bl	8000b20 <__aeabi_fsub>
 800cc66:	4601      	mov	r1, r0
 800cc68:	4620      	mov	r0, r4
 800cc6a:	f7f3 ff59 	bl	8000b20 <__aeabi_fsub>
 800cc6e:	4601      	mov	r1, r0
 800cc70:	480f      	ldr	r0, [pc, #60]	; (800ccb0 <__ieee754_asinf+0x280>)
 800cc72:	e770      	b.n	800cb56 <__ieee754_asinf+0x126>
 800cc74:	3fc90fdb 	.word	0x3fc90fdb
 800cc78:	b33bbd2e 	.word	0xb33bbd2e
 800cc7c:	7149f2ca 	.word	0x7149f2ca
 800cc80:	3811ef08 	.word	0x3811ef08
 800cc84:	3a4f7f04 	.word	0x3a4f7f04
 800cc88:	3d241146 	.word	0x3d241146
 800cc8c:	3e4e0aa8 	.word	0x3e4e0aa8
 800cc90:	3ea6b090 	.word	0x3ea6b090
 800cc94:	3e2aaaab 	.word	0x3e2aaaab
 800cc98:	3d9dc62e 	.word	0x3d9dc62e
 800cc9c:	3f303361 	.word	0x3f303361
 800cca0:	4001572d 	.word	0x4001572d
 800cca4:	4019d139 	.word	0x4019d139
 800cca8:	3f799999 	.word	0x3f799999
 800ccac:	333bbd2e 	.word	0x333bbd2e
 800ccb0:	3f490fdb 	.word	0x3f490fdb

0800ccb4 <__ieee754_atan2f>:
 800ccb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccb6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800ccba:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	dc05      	bgt.n	800ccce <__ieee754_atan2f+0x1a>
 800ccc2:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800ccc6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ccca:	4607      	mov	r7, r0
 800cccc:	dd04      	ble.n	800ccd8 <__ieee754_atan2f+0x24>
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f7f3 ff28 	bl	8000b24 <__addsf3>
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	e024      	b.n	800cd22 <__ieee754_atan2f+0x6e>
 800ccd8:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800ccdc:	d103      	bne.n	800cce6 <__ieee754_atan2f+0x32>
 800ccde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800cce2:	f002 b8df 	b.w	800eea4 <atanf>
 800cce6:	178c      	asrs	r4, r1, #30
 800cce8:	f004 0402 	and.w	r4, r4, #2
 800ccec:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800ccf0:	b92a      	cbnz	r2, 800ccfe <__ieee754_atan2f+0x4a>
 800ccf2:	2c02      	cmp	r4, #2
 800ccf4:	d057      	beq.n	800cda6 <__ieee754_atan2f+0xf2>
 800ccf6:	2c03      	cmp	r4, #3
 800ccf8:	d113      	bne.n	800cd22 <__ieee754_atan2f+0x6e>
 800ccfa:	4b2d      	ldr	r3, [pc, #180]	; (800cdb0 <__ieee754_atan2f+0xfc>)
 800ccfc:	e011      	b.n	800cd22 <__ieee754_atan2f+0x6e>
 800ccfe:	b91e      	cbnz	r6, 800cd08 <__ieee754_atan2f+0x54>
 800cd00:	2f00      	cmp	r7, #0
 800cd02:	da52      	bge.n	800cdaa <__ieee754_atan2f+0xf6>
 800cd04:	4b2b      	ldr	r3, [pc, #172]	; (800cdb4 <__ieee754_atan2f+0x100>)
 800cd06:	e00c      	b.n	800cd22 <__ieee754_atan2f+0x6e>
 800cd08:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800cd0c:	d11a      	bne.n	800cd44 <__ieee754_atan2f+0x90>
 800cd0e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800cd12:	d10c      	bne.n	800cd2e <__ieee754_atan2f+0x7a>
 800cd14:	2c02      	cmp	r4, #2
 800cd16:	d006      	beq.n	800cd26 <__ieee754_atan2f+0x72>
 800cd18:	2c03      	cmp	r4, #3
 800cd1a:	d006      	beq.n	800cd2a <__ieee754_atan2f+0x76>
 800cd1c:	2c01      	cmp	r4, #1
 800cd1e:	d140      	bne.n	800cda2 <__ieee754_atan2f+0xee>
 800cd20:	4b25      	ldr	r3, [pc, #148]	; (800cdb8 <__ieee754_atan2f+0x104>)
 800cd22:	4618      	mov	r0, r3
 800cd24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd26:	4b25      	ldr	r3, [pc, #148]	; (800cdbc <__ieee754_atan2f+0x108>)
 800cd28:	e7fb      	b.n	800cd22 <__ieee754_atan2f+0x6e>
 800cd2a:	4b25      	ldr	r3, [pc, #148]	; (800cdc0 <__ieee754_atan2f+0x10c>)
 800cd2c:	e7f9      	b.n	800cd22 <__ieee754_atan2f+0x6e>
 800cd2e:	2c02      	cmp	r4, #2
 800cd30:	d039      	beq.n	800cda6 <__ieee754_atan2f+0xf2>
 800cd32:	2c03      	cmp	r4, #3
 800cd34:	d0e1      	beq.n	800ccfa <__ieee754_atan2f+0x46>
 800cd36:	2c01      	cmp	r4, #1
 800cd38:	d102      	bne.n	800cd40 <__ieee754_atan2f+0x8c>
 800cd3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd3e:	e7f0      	b.n	800cd22 <__ieee754_atan2f+0x6e>
 800cd40:	2300      	movs	r3, #0
 800cd42:	e7ee      	b.n	800cd22 <__ieee754_atan2f+0x6e>
 800cd44:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800cd48:	d0da      	beq.n	800cd00 <__ieee754_atan2f+0x4c>
 800cd4a:	1b92      	subs	r2, r2, r6
 800cd4c:	15d2      	asrs	r2, r2, #23
 800cd4e:	2a3c      	cmp	r2, #60	; 0x3c
 800cd50:	dc17      	bgt.n	800cd82 <__ieee754_atan2f+0xce>
 800cd52:	2900      	cmp	r1, #0
 800cd54:	da01      	bge.n	800cd5a <__ieee754_atan2f+0xa6>
 800cd56:	323c      	adds	r2, #60	; 0x3c
 800cd58:	db15      	blt.n	800cd86 <__ieee754_atan2f+0xd2>
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f7f4 f89e 	bl	8000e9c <__aeabi_fdiv>
 800cd60:	f002 f9ac 	bl	800f0bc <fabsf>
 800cd64:	f002 f89e 	bl	800eea4 <atanf>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	2c01      	cmp	r4, #1
 800cd6c:	d00d      	beq.n	800cd8a <__ieee754_atan2f+0xd6>
 800cd6e:	2c02      	cmp	r4, #2
 800cd70:	d00e      	beq.n	800cd90 <__ieee754_atan2f+0xdc>
 800cd72:	2c00      	cmp	r4, #0
 800cd74:	d0d5      	beq.n	800cd22 <__ieee754_atan2f+0x6e>
 800cd76:	4913      	ldr	r1, [pc, #76]	; (800cdc4 <__ieee754_atan2f+0x110>)
 800cd78:	4618      	mov	r0, r3
 800cd7a:	f7f3 fed3 	bl	8000b24 <__addsf3>
 800cd7e:	4912      	ldr	r1, [pc, #72]	; (800cdc8 <__ieee754_atan2f+0x114>)
 800cd80:	e00c      	b.n	800cd9c <__ieee754_atan2f+0xe8>
 800cd82:	4b12      	ldr	r3, [pc, #72]	; (800cdcc <__ieee754_atan2f+0x118>)
 800cd84:	e7f1      	b.n	800cd6a <__ieee754_atan2f+0xb6>
 800cd86:	2300      	movs	r3, #0
 800cd88:	e7ef      	b.n	800cd6a <__ieee754_atan2f+0xb6>
 800cd8a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800cd8e:	e7c8      	b.n	800cd22 <__ieee754_atan2f+0x6e>
 800cd90:	490c      	ldr	r1, [pc, #48]	; (800cdc4 <__ieee754_atan2f+0x110>)
 800cd92:	4618      	mov	r0, r3
 800cd94:	f7f3 fec6 	bl	8000b24 <__addsf3>
 800cd98:	4601      	mov	r1, r0
 800cd9a:	480b      	ldr	r0, [pc, #44]	; (800cdc8 <__ieee754_atan2f+0x114>)
 800cd9c:	f7f3 fec0 	bl	8000b20 <__aeabi_fsub>
 800cda0:	e798      	b.n	800ccd4 <__ieee754_atan2f+0x20>
 800cda2:	4b0b      	ldr	r3, [pc, #44]	; (800cdd0 <__ieee754_atan2f+0x11c>)
 800cda4:	e7bd      	b.n	800cd22 <__ieee754_atan2f+0x6e>
 800cda6:	4b08      	ldr	r3, [pc, #32]	; (800cdc8 <__ieee754_atan2f+0x114>)
 800cda8:	e7bb      	b.n	800cd22 <__ieee754_atan2f+0x6e>
 800cdaa:	4b08      	ldr	r3, [pc, #32]	; (800cdcc <__ieee754_atan2f+0x118>)
 800cdac:	e7b9      	b.n	800cd22 <__ieee754_atan2f+0x6e>
 800cdae:	bf00      	nop
 800cdb0:	c0490fdb 	.word	0xc0490fdb
 800cdb4:	bfc90fdb 	.word	0xbfc90fdb
 800cdb8:	bf490fdb 	.word	0xbf490fdb
 800cdbc:	4016cbe4 	.word	0x4016cbe4
 800cdc0:	c016cbe4 	.word	0xc016cbe4
 800cdc4:	33bbbd2e 	.word	0x33bbbd2e
 800cdc8:	40490fdb 	.word	0x40490fdb
 800cdcc:	3fc90fdb 	.word	0x3fc90fdb
 800cdd0:	3f490fdb 	.word	0x3f490fdb

0800cdd4 <__ieee754_powf>:
 800cdd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdd8:	b087      	sub	sp, #28
 800cdda:	9101      	str	r1, [sp, #4]
 800cddc:	9c01      	ldr	r4, [sp, #4]
 800cdde:	4681      	mov	r9, r0
 800cde0:	f034 4700 	bics.w	r7, r4, #2147483648	; 0x80000000
 800cde4:	f000 8324 	beq.w	800d430 <__ieee754_powf+0x65c>
 800cde8:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800cdec:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800cdf0:	4680      	mov	r8, r0
 800cdf2:	dc06      	bgt.n	800ce02 <__ieee754_powf+0x2e>
 800cdf4:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800cdf8:	dd09      	ble.n	800ce0e <__ieee754_powf+0x3a>
 800cdfa:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800cdfe:	f000 8317 	beq.w	800d430 <__ieee754_powf+0x65c>
 800ce02:	4885      	ldr	r0, [pc, #532]	; (800d018 <__ieee754_powf+0x244>)
 800ce04:	b007      	add	sp, #28
 800ce06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce0a:	f002 b9a3 	b.w	800f154 <nanf>
 800ce0e:	2800      	cmp	r0, #0
 800ce10:	da1d      	bge.n	800ce4e <__ieee754_powf+0x7a>
 800ce12:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800ce16:	da2b      	bge.n	800ce70 <__ieee754_powf+0x9c>
 800ce18:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800ce1c:	db30      	blt.n	800ce80 <__ieee754_powf+0xac>
 800ce1e:	15fb      	asrs	r3, r7, #23
 800ce20:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800ce24:	fa47 f503 	asr.w	r5, r7, r3
 800ce28:	fa05 f303 	lsl.w	r3, r5, r3
 800ce2c:	42bb      	cmp	r3, r7
 800ce2e:	d127      	bne.n	800ce80 <__ieee754_powf+0xac>
 800ce30:	f005 0501 	and.w	r5, r5, #1
 800ce34:	f1c5 0502 	rsb	r5, r5, #2
 800ce38:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800ce3c:	d122      	bne.n	800ce84 <__ieee754_powf+0xb0>
 800ce3e:	2c00      	cmp	r4, #0
 800ce40:	4649      	mov	r1, r9
 800ce42:	da11      	bge.n	800ce68 <__ieee754_powf+0x94>
 800ce44:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800ce48:	f7f4 f828 	bl	8000e9c <__aeabi_fdiv>
 800ce4c:	e021      	b.n	800ce92 <__ieee754_powf+0xbe>
 800ce4e:	2500      	movs	r5, #0
 800ce50:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800ce54:	d1f0      	bne.n	800ce38 <__ieee754_powf+0x64>
 800ce56:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800ce5a:	f000 82e9 	beq.w	800d430 <__ieee754_powf+0x65c>
 800ce5e:	dd09      	ble.n	800ce74 <__ieee754_powf+0xa0>
 800ce60:	2c00      	cmp	r4, #0
 800ce62:	f280 82e8 	bge.w	800d436 <__ieee754_powf+0x662>
 800ce66:	2100      	movs	r1, #0
 800ce68:	4608      	mov	r0, r1
 800ce6a:	b007      	add	sp, #28
 800ce6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce70:	2502      	movs	r5, #2
 800ce72:	e7ed      	b.n	800ce50 <__ieee754_powf+0x7c>
 800ce74:	2c00      	cmp	r4, #0
 800ce76:	daf6      	bge.n	800ce66 <__ieee754_powf+0x92>
 800ce78:	9b01      	ldr	r3, [sp, #4]
 800ce7a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ce7e:	e7f3      	b.n	800ce68 <__ieee754_powf+0x94>
 800ce80:	2500      	movs	r5, #0
 800ce82:	e7d9      	b.n	800ce38 <__ieee754_powf+0x64>
 800ce84:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800ce88:	d105      	bne.n	800ce96 <__ieee754_powf+0xc2>
 800ce8a:	4649      	mov	r1, r9
 800ce8c:	4608      	mov	r0, r1
 800ce8e:	f7f3 ff51 	bl	8000d34 <__aeabi_fmul>
 800ce92:	4601      	mov	r1, r0
 800ce94:	e7e8      	b.n	800ce68 <__ieee754_powf+0x94>
 800ce96:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800ce9a:	4648      	mov	r0, r9
 800ce9c:	d107      	bne.n	800ceae <__ieee754_powf+0xda>
 800ce9e:	f1b8 0f00 	cmp.w	r8, #0
 800cea2:	db04      	blt.n	800ceae <__ieee754_powf+0xda>
 800cea4:	b007      	add	sp, #28
 800cea6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceaa:	f000 bc37 	b.w	800d71c <__ieee754_sqrtf>
 800ceae:	f002 f905 	bl	800f0bc <fabsf>
 800ceb2:	4601      	mov	r1, r0
 800ceb4:	b126      	cbz	r6, 800cec0 <__ieee754_powf+0xec>
 800ceb6:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800ceba:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800cebe:	d118      	bne.n	800cef2 <__ieee754_powf+0x11e>
 800cec0:	2c00      	cmp	r4, #0
 800cec2:	da04      	bge.n	800cece <__ieee754_powf+0xfa>
 800cec4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800cec8:	f7f3 ffe8 	bl	8000e9c <__aeabi_fdiv>
 800cecc:	4601      	mov	r1, r0
 800cece:	f1b8 0f00 	cmp.w	r8, #0
 800ced2:	dac9      	bge.n	800ce68 <__ieee754_powf+0x94>
 800ced4:	f1a6 507e 	sub.w	r0, r6, #1065353216	; 0x3f800000
 800ced8:	ea50 0305 	orrs.w	r3, r0, r5
 800cedc:	d104      	bne.n	800cee8 <__ieee754_powf+0x114>
 800cede:	4608      	mov	r0, r1
 800cee0:	f7f3 fe1e 	bl	8000b20 <__aeabi_fsub>
 800cee4:	4601      	mov	r1, r0
 800cee6:	e7af      	b.n	800ce48 <__ieee754_powf+0x74>
 800cee8:	2d01      	cmp	r5, #1
 800ceea:	d1bd      	bne.n	800ce68 <__ieee754_powf+0x94>
 800ceec:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800cef0:	e7ba      	b.n	800ce68 <__ieee754_powf+0x94>
 800cef2:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 800cef6:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800cefa:	9303      	str	r3, [sp, #12]
 800cefc:	432b      	orrs	r3, r5
 800cefe:	d101      	bne.n	800cf04 <__ieee754_powf+0x130>
 800cf00:	4649      	mov	r1, r9
 800cf02:	e7ec      	b.n	800cede <__ieee754_powf+0x10a>
 800cf04:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800cf08:	f340 8098 	ble.w	800d03c <__ieee754_powf+0x268>
 800cf0c:	4b43      	ldr	r3, [pc, #268]	; (800d01c <__ieee754_powf+0x248>)
 800cf0e:	429e      	cmp	r6, r3
 800cf10:	dc03      	bgt.n	800cf1a <__ieee754_powf+0x146>
 800cf12:	2c00      	cmp	r4, #0
 800cf14:	daa7      	bge.n	800ce66 <__ieee754_powf+0x92>
 800cf16:	4942      	ldr	r1, [pc, #264]	; (800d020 <__ieee754_powf+0x24c>)
 800cf18:	e7b8      	b.n	800ce8c <__ieee754_powf+0xb8>
 800cf1a:	4b42      	ldr	r3, [pc, #264]	; (800d024 <__ieee754_powf+0x250>)
 800cf1c:	429e      	cmp	r6, r3
 800cf1e:	dd02      	ble.n	800cf26 <__ieee754_powf+0x152>
 800cf20:	2c00      	cmp	r4, #0
 800cf22:	dcf8      	bgt.n	800cf16 <__ieee754_powf+0x142>
 800cf24:	e79f      	b.n	800ce66 <__ieee754_powf+0x92>
 800cf26:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800cf2a:	f7f3 fdf9 	bl	8000b20 <__aeabi_fsub>
 800cf2e:	493e      	ldr	r1, [pc, #248]	; (800d028 <__ieee754_powf+0x254>)
 800cf30:	4606      	mov	r6, r0
 800cf32:	f7f3 feff 	bl	8000d34 <__aeabi_fmul>
 800cf36:	493d      	ldr	r1, [pc, #244]	; (800d02c <__ieee754_powf+0x258>)
 800cf38:	4607      	mov	r7, r0
 800cf3a:	4630      	mov	r0, r6
 800cf3c:	f7f3 fefa 	bl	8000d34 <__aeabi_fmul>
 800cf40:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 800cf44:	4680      	mov	r8, r0
 800cf46:	4630      	mov	r0, r6
 800cf48:	f7f3 fef4 	bl	8000d34 <__aeabi_fmul>
 800cf4c:	4601      	mov	r1, r0
 800cf4e:	4838      	ldr	r0, [pc, #224]	; (800d030 <__ieee754_powf+0x25c>)
 800cf50:	f7f3 fde6 	bl	8000b20 <__aeabi_fsub>
 800cf54:	4631      	mov	r1, r6
 800cf56:	f7f3 feed 	bl	8000d34 <__aeabi_fmul>
 800cf5a:	4601      	mov	r1, r0
 800cf5c:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 800cf60:	f7f3 fdde 	bl	8000b20 <__aeabi_fsub>
 800cf64:	4631      	mov	r1, r6
 800cf66:	4681      	mov	r9, r0
 800cf68:	4630      	mov	r0, r6
 800cf6a:	f7f3 fee3 	bl	8000d34 <__aeabi_fmul>
 800cf6e:	4601      	mov	r1, r0
 800cf70:	4648      	mov	r0, r9
 800cf72:	f7f3 fedf 	bl	8000d34 <__aeabi_fmul>
 800cf76:	492f      	ldr	r1, [pc, #188]	; (800d034 <__ieee754_powf+0x260>)
 800cf78:	f7f3 fedc 	bl	8000d34 <__aeabi_fmul>
 800cf7c:	4601      	mov	r1, r0
 800cf7e:	4640      	mov	r0, r8
 800cf80:	f7f3 fdce 	bl	8000b20 <__aeabi_fsub>
 800cf84:	4601      	mov	r1, r0
 800cf86:	4606      	mov	r6, r0
 800cf88:	4638      	mov	r0, r7
 800cf8a:	f7f3 fdcb 	bl	8000b24 <__addsf3>
 800cf8e:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 800cf92:	f02a 0a0f 	bic.w	sl, sl, #15
 800cf96:	4639      	mov	r1, r7
 800cf98:	4650      	mov	r0, sl
 800cf9a:	f7f3 fdc1 	bl	8000b20 <__aeabi_fsub>
 800cf9e:	4601      	mov	r1, r0
 800cfa0:	4630      	mov	r0, r6
 800cfa2:	f7f3 fdbd 	bl	8000b20 <__aeabi_fsub>
 800cfa6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800cfaa:	9b03      	ldr	r3, [sp, #12]
 800cfac:	3d01      	subs	r5, #1
 800cfae:	f024 040f 	bic.w	r4, r4, #15
 800cfb2:	432b      	orrs	r3, r5
 800cfb4:	4606      	mov	r6, r0
 800cfb6:	4621      	mov	r1, r4
 800cfb8:	9801      	ldr	r0, [sp, #4]
 800cfba:	bf0c      	ite	eq
 800cfbc:	4d1e      	ldreq	r5, [pc, #120]	; (800d038 <__ieee754_powf+0x264>)
 800cfbe:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 800cfc2:	f7f3 fdad 	bl	8000b20 <__aeabi_fsub>
 800cfc6:	4651      	mov	r1, sl
 800cfc8:	f7f3 feb4 	bl	8000d34 <__aeabi_fmul>
 800cfcc:	9901      	ldr	r1, [sp, #4]
 800cfce:	4607      	mov	r7, r0
 800cfd0:	4630      	mov	r0, r6
 800cfd2:	f7f3 feaf 	bl	8000d34 <__aeabi_fmul>
 800cfd6:	4601      	mov	r1, r0
 800cfd8:	4638      	mov	r0, r7
 800cfda:	f7f3 fda3 	bl	8000b24 <__addsf3>
 800cfde:	4621      	mov	r1, r4
 800cfe0:	4606      	mov	r6, r0
 800cfe2:	4650      	mov	r0, sl
 800cfe4:	f7f3 fea6 	bl	8000d34 <__aeabi_fmul>
 800cfe8:	4601      	mov	r1, r0
 800cfea:	4607      	mov	r7, r0
 800cfec:	4681      	mov	r9, r0
 800cfee:	4630      	mov	r0, r6
 800cff0:	f7f3 fd98 	bl	8000b24 <__addsf3>
 800cff4:	2800      	cmp	r0, #0
 800cff6:	4682      	mov	sl, r0
 800cff8:	4680      	mov	r8, r0
 800cffa:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800cffe:	f340 81fb 	ble.w	800d3f8 <__ieee754_powf+0x624>
 800d002:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 800d006:	f340 8149 	ble.w	800d29c <__ieee754_powf+0x4c8>
 800d00a:	4905      	ldr	r1, [pc, #20]	; (800d020 <__ieee754_powf+0x24c>)
 800d00c:	4628      	mov	r0, r5
 800d00e:	f7f3 fe91 	bl	8000d34 <__aeabi_fmul>
 800d012:	4903      	ldr	r1, [pc, #12]	; (800d020 <__ieee754_powf+0x24c>)
 800d014:	e73b      	b.n	800ce8e <__ieee754_powf+0xba>
 800d016:	bf00      	nop
 800d018:	0800f362 	.word	0x0800f362
 800d01c:	3f7ffff7 	.word	0x3f7ffff7
 800d020:	7149f2ca 	.word	0x7149f2ca
 800d024:	3f800007 	.word	0x3f800007
 800d028:	3fb8aa00 	.word	0x3fb8aa00
 800d02c:	36eca570 	.word	0x36eca570
 800d030:	3eaaaaab 	.word	0x3eaaaaab
 800d034:	3fb8aa3b 	.word	0x3fb8aa3b
 800d038:	bf800000 	.word	0xbf800000
 800d03c:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
 800d040:	f280 810a 	bge.w	800d258 <__ieee754_powf+0x484>
 800d044:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 800d048:	f7f3 fe74 	bl	8000d34 <__aeabi_fmul>
 800d04c:	f06f 0217 	mvn.w	r2, #23
 800d050:	4606      	mov	r6, r0
 800d052:	15f3      	asrs	r3, r6, #23
 800d054:	3b7f      	subs	r3, #127	; 0x7f
 800d056:	441a      	add	r2, r3
 800d058:	4b81      	ldr	r3, [pc, #516]	; (800d260 <__ieee754_powf+0x48c>)
 800d05a:	f3c6 0016 	ubfx	r0, r6, #0, #23
 800d05e:	4298      	cmp	r0, r3
 800d060:	f040 567e 	orr.w	r6, r0, #1065353216	; 0x3f800000
 800d064:	dd06      	ble.n	800d074 <__ieee754_powf+0x2a0>
 800d066:	4b7f      	ldr	r3, [pc, #508]	; (800d264 <__ieee754_powf+0x490>)
 800d068:	4298      	cmp	r0, r3
 800d06a:	f340 80f7 	ble.w	800d25c <__ieee754_powf+0x488>
 800d06e:	3201      	adds	r2, #1
 800d070:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 800d074:	2700      	movs	r7, #0
 800d076:	4b7c      	ldr	r3, [pc, #496]	; (800d268 <__ieee754_powf+0x494>)
 800d078:	4630      	mov	r0, r6
 800d07a:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 800d07e:	9205      	str	r2, [sp, #20]
 800d080:	4619      	mov	r1, r3
 800d082:	9302      	str	r3, [sp, #8]
 800d084:	f7f3 fd4c 	bl	8000b20 <__aeabi_fsub>
 800d088:	4631      	mov	r1, r6
 800d08a:	4683      	mov	fp, r0
 800d08c:	9802      	ldr	r0, [sp, #8]
 800d08e:	f7f3 fd49 	bl	8000b24 <__addsf3>
 800d092:	4601      	mov	r1, r0
 800d094:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d098:	f7f3 ff00 	bl	8000e9c <__aeabi_fdiv>
 800d09c:	4601      	mov	r1, r0
 800d09e:	9004      	str	r0, [sp, #16]
 800d0a0:	4658      	mov	r0, fp
 800d0a2:	f7f3 fe47 	bl	8000d34 <__aeabi_fmul>
 800d0a6:	46b2      	mov	sl, r6
 800d0a8:	1076      	asrs	r6, r6, #1
 800d0aa:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 800d0ae:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 800d0b2:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 800d0b6:	f028 080f 	bic.w	r8, r8, #15
 800d0ba:	eb06 5647 	add.w	r6, r6, r7, lsl #21
 800d0be:	4681      	mov	r9, r0
 800d0c0:	4631      	mov	r1, r6
 800d0c2:	4640      	mov	r0, r8
 800d0c4:	f7f3 fe36 	bl	8000d34 <__aeabi_fmul>
 800d0c8:	4601      	mov	r1, r0
 800d0ca:	4658      	mov	r0, fp
 800d0cc:	f7f3 fd28 	bl	8000b20 <__aeabi_fsub>
 800d0d0:	9902      	ldr	r1, [sp, #8]
 800d0d2:	4683      	mov	fp, r0
 800d0d4:	4630      	mov	r0, r6
 800d0d6:	f7f3 fd23 	bl	8000b20 <__aeabi_fsub>
 800d0da:	4601      	mov	r1, r0
 800d0dc:	4650      	mov	r0, sl
 800d0de:	f7f3 fd1f 	bl	8000b20 <__aeabi_fsub>
 800d0e2:	4641      	mov	r1, r8
 800d0e4:	f7f3 fe26 	bl	8000d34 <__aeabi_fmul>
 800d0e8:	4601      	mov	r1, r0
 800d0ea:	4658      	mov	r0, fp
 800d0ec:	f7f3 fd18 	bl	8000b20 <__aeabi_fsub>
 800d0f0:	9b04      	ldr	r3, [sp, #16]
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	f7f3 fe1e 	bl	8000d34 <__aeabi_fmul>
 800d0f8:	4649      	mov	r1, r9
 800d0fa:	4683      	mov	fp, r0
 800d0fc:	4648      	mov	r0, r9
 800d0fe:	f7f3 fe19 	bl	8000d34 <__aeabi_fmul>
 800d102:	4606      	mov	r6, r0
 800d104:	4959      	ldr	r1, [pc, #356]	; (800d26c <__ieee754_powf+0x498>)
 800d106:	f7f3 fe15 	bl	8000d34 <__aeabi_fmul>
 800d10a:	4959      	ldr	r1, [pc, #356]	; (800d270 <__ieee754_powf+0x49c>)
 800d10c:	f7f3 fd0a 	bl	8000b24 <__addsf3>
 800d110:	4631      	mov	r1, r6
 800d112:	f7f3 fe0f 	bl	8000d34 <__aeabi_fmul>
 800d116:	4957      	ldr	r1, [pc, #348]	; (800d274 <__ieee754_powf+0x4a0>)
 800d118:	f7f3 fd04 	bl	8000b24 <__addsf3>
 800d11c:	4631      	mov	r1, r6
 800d11e:	f7f3 fe09 	bl	8000d34 <__aeabi_fmul>
 800d122:	4955      	ldr	r1, [pc, #340]	; (800d278 <__ieee754_powf+0x4a4>)
 800d124:	f7f3 fcfe 	bl	8000b24 <__addsf3>
 800d128:	4631      	mov	r1, r6
 800d12a:	f7f3 fe03 	bl	8000d34 <__aeabi_fmul>
 800d12e:	4953      	ldr	r1, [pc, #332]	; (800d27c <__ieee754_powf+0x4a8>)
 800d130:	f7f3 fcf8 	bl	8000b24 <__addsf3>
 800d134:	4631      	mov	r1, r6
 800d136:	f7f3 fdfd 	bl	8000d34 <__aeabi_fmul>
 800d13a:	4951      	ldr	r1, [pc, #324]	; (800d280 <__ieee754_powf+0x4ac>)
 800d13c:	f7f3 fcf2 	bl	8000b24 <__addsf3>
 800d140:	4631      	mov	r1, r6
 800d142:	4682      	mov	sl, r0
 800d144:	4630      	mov	r0, r6
 800d146:	f7f3 fdf5 	bl	8000d34 <__aeabi_fmul>
 800d14a:	4601      	mov	r1, r0
 800d14c:	4650      	mov	r0, sl
 800d14e:	f7f3 fdf1 	bl	8000d34 <__aeabi_fmul>
 800d152:	4606      	mov	r6, r0
 800d154:	4649      	mov	r1, r9
 800d156:	4640      	mov	r0, r8
 800d158:	f7f3 fce4 	bl	8000b24 <__addsf3>
 800d15c:	4659      	mov	r1, fp
 800d15e:	f7f3 fde9 	bl	8000d34 <__aeabi_fmul>
 800d162:	4631      	mov	r1, r6
 800d164:	f7f3 fcde 	bl	8000b24 <__addsf3>
 800d168:	4641      	mov	r1, r8
 800d16a:	4682      	mov	sl, r0
 800d16c:	4640      	mov	r0, r8
 800d16e:	f7f3 fde1 	bl	8000d34 <__aeabi_fmul>
 800d172:	4944      	ldr	r1, [pc, #272]	; (800d284 <__ieee754_powf+0x4b0>)
 800d174:	9002      	str	r0, [sp, #8]
 800d176:	f7f3 fcd5 	bl	8000b24 <__addsf3>
 800d17a:	4651      	mov	r1, sl
 800d17c:	f7f3 fcd2 	bl	8000b24 <__addsf3>
 800d180:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 800d184:	f026 060f 	bic.w	r6, r6, #15
 800d188:	4631      	mov	r1, r6
 800d18a:	4640      	mov	r0, r8
 800d18c:	f7f3 fdd2 	bl	8000d34 <__aeabi_fmul>
 800d190:	493c      	ldr	r1, [pc, #240]	; (800d284 <__ieee754_powf+0x4b0>)
 800d192:	4680      	mov	r8, r0
 800d194:	4630      	mov	r0, r6
 800d196:	f7f3 fcc3 	bl	8000b20 <__aeabi_fsub>
 800d19a:	9b02      	ldr	r3, [sp, #8]
 800d19c:	4619      	mov	r1, r3
 800d19e:	f7f3 fcbf 	bl	8000b20 <__aeabi_fsub>
 800d1a2:	4601      	mov	r1, r0
 800d1a4:	4650      	mov	r0, sl
 800d1a6:	f7f3 fcbb 	bl	8000b20 <__aeabi_fsub>
 800d1aa:	4649      	mov	r1, r9
 800d1ac:	f7f3 fdc2 	bl	8000d34 <__aeabi_fmul>
 800d1b0:	4659      	mov	r1, fp
 800d1b2:	4681      	mov	r9, r0
 800d1b4:	4630      	mov	r0, r6
 800d1b6:	f7f3 fdbd 	bl	8000d34 <__aeabi_fmul>
 800d1ba:	4601      	mov	r1, r0
 800d1bc:	4648      	mov	r0, r9
 800d1be:	f7f3 fcb1 	bl	8000b24 <__addsf3>
 800d1c2:	4682      	mov	sl, r0
 800d1c4:	4601      	mov	r1, r0
 800d1c6:	4640      	mov	r0, r8
 800d1c8:	f7f3 fcac 	bl	8000b24 <__addsf3>
 800d1cc:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 800d1d0:	f029 090f 	bic.w	r9, r9, #15
 800d1d4:	492c      	ldr	r1, [pc, #176]	; (800d288 <__ieee754_powf+0x4b4>)
 800d1d6:	4648      	mov	r0, r9
 800d1d8:	f7f3 fdac 	bl	8000d34 <__aeabi_fmul>
 800d1dc:	4641      	mov	r1, r8
 800d1de:	4606      	mov	r6, r0
 800d1e0:	4648      	mov	r0, r9
 800d1e2:	f7f3 fc9d 	bl	8000b20 <__aeabi_fsub>
 800d1e6:	4601      	mov	r1, r0
 800d1e8:	4650      	mov	r0, sl
 800d1ea:	f7f3 fc99 	bl	8000b20 <__aeabi_fsub>
 800d1ee:	4927      	ldr	r1, [pc, #156]	; (800d28c <__ieee754_powf+0x4b8>)
 800d1f0:	f7f3 fda0 	bl	8000d34 <__aeabi_fmul>
 800d1f4:	4926      	ldr	r1, [pc, #152]	; (800d290 <__ieee754_powf+0x4bc>)
 800d1f6:	4680      	mov	r8, r0
 800d1f8:	4648      	mov	r0, r9
 800d1fa:	f7f3 fd9b 	bl	8000d34 <__aeabi_fmul>
 800d1fe:	4601      	mov	r1, r0
 800d200:	4640      	mov	r0, r8
 800d202:	f7f3 fc8f 	bl	8000b24 <__addsf3>
 800d206:	4b23      	ldr	r3, [pc, #140]	; (800d294 <__ieee754_powf+0x4c0>)
 800d208:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 800d20c:	f7f3 fc8a 	bl	8000b24 <__addsf3>
 800d210:	9a05      	ldr	r2, [sp, #20]
 800d212:	4680      	mov	r8, r0
 800d214:	4610      	mov	r0, r2
 800d216:	f7f3 fd39 	bl	8000c8c <__aeabi_i2f>
 800d21a:	4681      	mov	r9, r0
 800d21c:	4b1e      	ldr	r3, [pc, #120]	; (800d298 <__ieee754_powf+0x4c4>)
 800d21e:	4641      	mov	r1, r8
 800d220:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 800d224:	4630      	mov	r0, r6
 800d226:	f7f3 fc7d 	bl	8000b24 <__addsf3>
 800d22a:	4639      	mov	r1, r7
 800d22c:	f7f3 fc7a 	bl	8000b24 <__addsf3>
 800d230:	4649      	mov	r1, r9
 800d232:	f7f3 fc77 	bl	8000b24 <__addsf3>
 800d236:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 800d23a:	f02a 0a0f 	bic.w	sl, sl, #15
 800d23e:	4649      	mov	r1, r9
 800d240:	4650      	mov	r0, sl
 800d242:	f7f3 fc6d 	bl	8000b20 <__aeabi_fsub>
 800d246:	4639      	mov	r1, r7
 800d248:	f7f3 fc6a 	bl	8000b20 <__aeabi_fsub>
 800d24c:	4631      	mov	r1, r6
 800d24e:	f7f3 fc67 	bl	8000b20 <__aeabi_fsub>
 800d252:	4601      	mov	r1, r0
 800d254:	4640      	mov	r0, r8
 800d256:	e6a4      	b.n	800cfa2 <__ieee754_powf+0x1ce>
 800d258:	2200      	movs	r2, #0
 800d25a:	e6fa      	b.n	800d052 <__ieee754_powf+0x27e>
 800d25c:	2701      	movs	r7, #1
 800d25e:	e70a      	b.n	800d076 <__ieee754_powf+0x2a2>
 800d260:	001cc471 	.word	0x001cc471
 800d264:	005db3d6 	.word	0x005db3d6
 800d268:	0800f528 	.word	0x0800f528
 800d26c:	3e53f142 	.word	0x3e53f142
 800d270:	3e6c3255 	.word	0x3e6c3255
 800d274:	3e8ba305 	.word	0x3e8ba305
 800d278:	3eaaaaab 	.word	0x3eaaaaab
 800d27c:	3edb6db7 	.word	0x3edb6db7
 800d280:	3f19999a 	.word	0x3f19999a
 800d284:	40400000 	.word	0x40400000
 800d288:	3f763800 	.word	0x3f763800
 800d28c:	3f76384f 	.word	0x3f76384f
 800d290:	369dc3a0 	.word	0x369dc3a0
 800d294:	0800f538 	.word	0x0800f538
 800d298:	0800f530 	.word	0x0800f530
 800d29c:	f040 80c0 	bne.w	800d420 <__ieee754_powf+0x64c>
 800d2a0:	4966      	ldr	r1, [pc, #408]	; (800d43c <__ieee754_powf+0x668>)
 800d2a2:	4630      	mov	r0, r6
 800d2a4:	f7f3 fc3e 	bl	8000b24 <__addsf3>
 800d2a8:	4639      	mov	r1, r7
 800d2aa:	4681      	mov	r9, r0
 800d2ac:	4650      	mov	r0, sl
 800d2ae:	f7f3 fc37 	bl	8000b20 <__aeabi_fsub>
 800d2b2:	4601      	mov	r1, r0
 800d2b4:	4648      	mov	r0, r9
 800d2b6:	f7f3 fef9 	bl	80010ac <__aeabi_fcmpgt>
 800d2ba:	2800      	cmp	r0, #0
 800d2bc:	f47f aea5 	bne.w	800d00a <__ieee754_powf+0x236>
 800d2c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d2c4:	15e4      	asrs	r4, r4, #23
 800d2c6:	3c7e      	subs	r4, #126	; 0x7e
 800d2c8:	4123      	asrs	r3, r4
 800d2ca:	4443      	add	r3, r8
 800d2cc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d2d0:	495b      	ldr	r1, [pc, #364]	; (800d440 <__ieee754_powf+0x66c>)
 800d2d2:	3a7f      	subs	r2, #127	; 0x7f
 800d2d4:	f3c3 0416 	ubfx	r4, r3, #0, #23
 800d2d8:	4111      	asrs	r1, r2
 800d2da:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 800d2de:	f1c2 0217 	rsb	r2, r2, #23
 800d2e2:	4114      	asrs	r4, r2
 800d2e4:	f1b8 0f00 	cmp.w	r8, #0
 800d2e8:	ea23 0101 	bic.w	r1, r3, r1
 800d2ec:	4638      	mov	r0, r7
 800d2ee:	bfb8      	it	lt
 800d2f0:	4264      	neglt	r4, r4
 800d2f2:	f7f3 fc15 	bl	8000b20 <__aeabi_fsub>
 800d2f6:	4681      	mov	r9, r0
 800d2f8:	4631      	mov	r1, r6
 800d2fa:	4648      	mov	r0, r9
 800d2fc:	f7f3 fc12 	bl	8000b24 <__addsf3>
 800d300:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 800d304:	f027 070f 	bic.w	r7, r7, #15
 800d308:	494e      	ldr	r1, [pc, #312]	; (800d444 <__ieee754_powf+0x670>)
 800d30a:	4638      	mov	r0, r7
 800d30c:	f7f3 fd12 	bl	8000d34 <__aeabi_fmul>
 800d310:	4649      	mov	r1, r9
 800d312:	4680      	mov	r8, r0
 800d314:	4638      	mov	r0, r7
 800d316:	f7f3 fc03 	bl	8000b20 <__aeabi_fsub>
 800d31a:	4601      	mov	r1, r0
 800d31c:	4630      	mov	r0, r6
 800d31e:	f7f3 fbff 	bl	8000b20 <__aeabi_fsub>
 800d322:	4949      	ldr	r1, [pc, #292]	; (800d448 <__ieee754_powf+0x674>)
 800d324:	f7f3 fd06 	bl	8000d34 <__aeabi_fmul>
 800d328:	4948      	ldr	r1, [pc, #288]	; (800d44c <__ieee754_powf+0x678>)
 800d32a:	4606      	mov	r6, r0
 800d32c:	4638      	mov	r0, r7
 800d32e:	f7f3 fd01 	bl	8000d34 <__aeabi_fmul>
 800d332:	4601      	mov	r1, r0
 800d334:	4630      	mov	r0, r6
 800d336:	f7f3 fbf5 	bl	8000b24 <__addsf3>
 800d33a:	4607      	mov	r7, r0
 800d33c:	4601      	mov	r1, r0
 800d33e:	4640      	mov	r0, r8
 800d340:	f7f3 fbf0 	bl	8000b24 <__addsf3>
 800d344:	4641      	mov	r1, r8
 800d346:	4606      	mov	r6, r0
 800d348:	f7f3 fbea 	bl	8000b20 <__aeabi_fsub>
 800d34c:	4601      	mov	r1, r0
 800d34e:	4638      	mov	r0, r7
 800d350:	f7f3 fbe6 	bl	8000b20 <__aeabi_fsub>
 800d354:	4631      	mov	r1, r6
 800d356:	4680      	mov	r8, r0
 800d358:	4630      	mov	r0, r6
 800d35a:	f7f3 fceb 	bl	8000d34 <__aeabi_fmul>
 800d35e:	4607      	mov	r7, r0
 800d360:	493b      	ldr	r1, [pc, #236]	; (800d450 <__ieee754_powf+0x67c>)
 800d362:	f7f3 fce7 	bl	8000d34 <__aeabi_fmul>
 800d366:	493b      	ldr	r1, [pc, #236]	; (800d454 <__ieee754_powf+0x680>)
 800d368:	f7f3 fbda 	bl	8000b20 <__aeabi_fsub>
 800d36c:	4639      	mov	r1, r7
 800d36e:	f7f3 fce1 	bl	8000d34 <__aeabi_fmul>
 800d372:	4939      	ldr	r1, [pc, #228]	; (800d458 <__ieee754_powf+0x684>)
 800d374:	f7f3 fbd6 	bl	8000b24 <__addsf3>
 800d378:	4639      	mov	r1, r7
 800d37a:	f7f3 fcdb 	bl	8000d34 <__aeabi_fmul>
 800d37e:	4937      	ldr	r1, [pc, #220]	; (800d45c <__ieee754_powf+0x688>)
 800d380:	f7f3 fbce 	bl	8000b20 <__aeabi_fsub>
 800d384:	4639      	mov	r1, r7
 800d386:	f7f3 fcd5 	bl	8000d34 <__aeabi_fmul>
 800d38a:	4935      	ldr	r1, [pc, #212]	; (800d460 <__ieee754_powf+0x68c>)
 800d38c:	f7f3 fbca 	bl	8000b24 <__addsf3>
 800d390:	4639      	mov	r1, r7
 800d392:	f7f3 fccf 	bl	8000d34 <__aeabi_fmul>
 800d396:	4601      	mov	r1, r0
 800d398:	4630      	mov	r0, r6
 800d39a:	f7f3 fbc1 	bl	8000b20 <__aeabi_fsub>
 800d39e:	4607      	mov	r7, r0
 800d3a0:	4601      	mov	r1, r0
 800d3a2:	4630      	mov	r0, r6
 800d3a4:	f7f3 fcc6 	bl	8000d34 <__aeabi_fmul>
 800d3a8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800d3ac:	4681      	mov	r9, r0
 800d3ae:	4638      	mov	r0, r7
 800d3b0:	f7f3 fbb6 	bl	8000b20 <__aeabi_fsub>
 800d3b4:	4601      	mov	r1, r0
 800d3b6:	4648      	mov	r0, r9
 800d3b8:	f7f3 fd70 	bl	8000e9c <__aeabi_fdiv>
 800d3bc:	4641      	mov	r1, r8
 800d3be:	4607      	mov	r7, r0
 800d3c0:	4630      	mov	r0, r6
 800d3c2:	f7f3 fcb7 	bl	8000d34 <__aeabi_fmul>
 800d3c6:	4641      	mov	r1, r8
 800d3c8:	f7f3 fbac 	bl	8000b24 <__addsf3>
 800d3cc:	4601      	mov	r1, r0
 800d3ce:	4638      	mov	r0, r7
 800d3d0:	f7f3 fba6 	bl	8000b20 <__aeabi_fsub>
 800d3d4:	4631      	mov	r1, r6
 800d3d6:	f7f3 fba3 	bl	8000b20 <__aeabi_fsub>
 800d3da:	4601      	mov	r1, r0
 800d3dc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800d3e0:	f7f3 fb9e 	bl	8000b20 <__aeabi_fsub>
 800d3e4:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 800d3e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d3ec:	da1e      	bge.n	800d42c <__ieee754_powf+0x658>
 800d3ee:	4621      	mov	r1, r4
 800d3f0:	f001 ff04 	bl	800f1fc <scalbnf>
 800d3f4:	4629      	mov	r1, r5
 800d3f6:	e54a      	b.n	800ce8e <__ieee754_powf+0xba>
 800d3f8:	4b1a      	ldr	r3, [pc, #104]	; (800d464 <__ieee754_powf+0x690>)
 800d3fa:	429c      	cmp	r4, r3
 800d3fc:	dd05      	ble.n	800d40a <__ieee754_powf+0x636>
 800d3fe:	491a      	ldr	r1, [pc, #104]	; (800d468 <__ieee754_powf+0x694>)
 800d400:	4628      	mov	r0, r5
 800d402:	f7f3 fc97 	bl	8000d34 <__aeabi_fmul>
 800d406:	4918      	ldr	r1, [pc, #96]	; (800d468 <__ieee754_powf+0x694>)
 800d408:	e541      	b.n	800ce8e <__ieee754_powf+0xba>
 800d40a:	d109      	bne.n	800d420 <__ieee754_powf+0x64c>
 800d40c:	4639      	mov	r1, r7
 800d40e:	f7f3 fb87 	bl	8000b20 <__aeabi_fsub>
 800d412:	4631      	mov	r1, r6
 800d414:	f7f3 fe40 	bl	8001098 <__aeabi_fcmpge>
 800d418:	2800      	cmp	r0, #0
 800d41a:	f43f af51 	beq.w	800d2c0 <__ieee754_powf+0x4ec>
 800d41e:	e7ee      	b.n	800d3fe <__ieee754_powf+0x62a>
 800d420:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800d424:	f73f af4c 	bgt.w	800d2c0 <__ieee754_powf+0x4ec>
 800d428:	2400      	movs	r4, #0
 800d42a:	e765      	b.n	800d2f8 <__ieee754_powf+0x524>
 800d42c:	4618      	mov	r0, r3
 800d42e:	e7e1      	b.n	800d3f4 <__ieee754_powf+0x620>
 800d430:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800d434:	e518      	b.n	800ce68 <__ieee754_powf+0x94>
 800d436:	9901      	ldr	r1, [sp, #4]
 800d438:	e516      	b.n	800ce68 <__ieee754_powf+0x94>
 800d43a:	bf00      	nop
 800d43c:	3338aa3c 	.word	0x3338aa3c
 800d440:	007fffff 	.word	0x007fffff
 800d444:	3f317200 	.word	0x3f317200
 800d448:	3f317218 	.word	0x3f317218
 800d44c:	35bfbe8c 	.word	0x35bfbe8c
 800d450:	3331bb4c 	.word	0x3331bb4c
 800d454:	35ddea0e 	.word	0x35ddea0e
 800d458:	388ab355 	.word	0x388ab355
 800d45c:	3b360b61 	.word	0x3b360b61
 800d460:	3e2aaaab 	.word	0x3e2aaaab
 800d464:	43160000 	.word	0x43160000
 800d468:	0da24260 	.word	0x0da24260

0800d46c <__ieee754_rem_pio2f>:
 800d46c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d470:	4a9d      	ldr	r2, [pc, #628]	; (800d6e8 <__ieee754_rem_pio2f+0x27c>)
 800d472:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800d476:	4295      	cmp	r5, r2
 800d478:	b087      	sub	sp, #28
 800d47a:	460c      	mov	r4, r1
 800d47c:	4607      	mov	r7, r0
 800d47e:	dc04      	bgt.n	800d48a <__ieee754_rem_pio2f+0x1e>
 800d480:	2300      	movs	r3, #0
 800d482:	6020      	str	r0, [r4, #0]
 800d484:	604b      	str	r3, [r1, #4]
 800d486:	2600      	movs	r6, #0
 800d488:	e01a      	b.n	800d4c0 <__ieee754_rem_pio2f+0x54>
 800d48a:	4a98      	ldr	r2, [pc, #608]	; (800d6ec <__ieee754_rem_pio2f+0x280>)
 800d48c:	4295      	cmp	r5, r2
 800d48e:	dc4b      	bgt.n	800d528 <__ieee754_rem_pio2f+0xbc>
 800d490:	2800      	cmp	r0, #0
 800d492:	f025 050f 	bic.w	r5, r5, #15
 800d496:	4996      	ldr	r1, [pc, #600]	; (800d6f0 <__ieee754_rem_pio2f+0x284>)
 800d498:	4e96      	ldr	r6, [pc, #600]	; (800d6f4 <__ieee754_rem_pio2f+0x288>)
 800d49a:	dd23      	ble.n	800d4e4 <__ieee754_rem_pio2f+0x78>
 800d49c:	f7f3 fb40 	bl	8000b20 <__aeabi_fsub>
 800d4a0:	42b5      	cmp	r5, r6
 800d4a2:	4607      	mov	r7, r0
 800d4a4:	d010      	beq.n	800d4c8 <__ieee754_rem_pio2f+0x5c>
 800d4a6:	4994      	ldr	r1, [pc, #592]	; (800d6f8 <__ieee754_rem_pio2f+0x28c>)
 800d4a8:	f7f3 fb3a 	bl	8000b20 <__aeabi_fsub>
 800d4ac:	4601      	mov	r1, r0
 800d4ae:	6020      	str	r0, [r4, #0]
 800d4b0:	4638      	mov	r0, r7
 800d4b2:	f7f3 fb35 	bl	8000b20 <__aeabi_fsub>
 800d4b6:	4990      	ldr	r1, [pc, #576]	; (800d6f8 <__ieee754_rem_pio2f+0x28c>)
 800d4b8:	f7f3 fb32 	bl	8000b20 <__aeabi_fsub>
 800d4bc:	2601      	movs	r6, #1
 800d4be:	6060      	str	r0, [r4, #4]
 800d4c0:	4630      	mov	r0, r6
 800d4c2:	b007      	add	sp, #28
 800d4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4c8:	498c      	ldr	r1, [pc, #560]	; (800d6fc <__ieee754_rem_pio2f+0x290>)
 800d4ca:	f7f3 fb29 	bl	8000b20 <__aeabi_fsub>
 800d4ce:	498c      	ldr	r1, [pc, #560]	; (800d700 <__ieee754_rem_pio2f+0x294>)
 800d4d0:	4605      	mov	r5, r0
 800d4d2:	f7f3 fb25 	bl	8000b20 <__aeabi_fsub>
 800d4d6:	4601      	mov	r1, r0
 800d4d8:	6020      	str	r0, [r4, #0]
 800d4da:	4628      	mov	r0, r5
 800d4dc:	f7f3 fb20 	bl	8000b20 <__aeabi_fsub>
 800d4e0:	4987      	ldr	r1, [pc, #540]	; (800d700 <__ieee754_rem_pio2f+0x294>)
 800d4e2:	e7e9      	b.n	800d4b8 <__ieee754_rem_pio2f+0x4c>
 800d4e4:	f7f3 fb1e 	bl	8000b24 <__addsf3>
 800d4e8:	42b5      	cmp	r5, r6
 800d4ea:	4607      	mov	r7, r0
 800d4ec:	d00e      	beq.n	800d50c <__ieee754_rem_pio2f+0xa0>
 800d4ee:	4982      	ldr	r1, [pc, #520]	; (800d6f8 <__ieee754_rem_pio2f+0x28c>)
 800d4f0:	f7f3 fb18 	bl	8000b24 <__addsf3>
 800d4f4:	4601      	mov	r1, r0
 800d4f6:	6020      	str	r0, [r4, #0]
 800d4f8:	4638      	mov	r0, r7
 800d4fa:	f7f3 fb11 	bl	8000b20 <__aeabi_fsub>
 800d4fe:	497e      	ldr	r1, [pc, #504]	; (800d6f8 <__ieee754_rem_pio2f+0x28c>)
 800d500:	f7f3 fb10 	bl	8000b24 <__addsf3>
 800d504:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800d508:	6060      	str	r0, [r4, #4]
 800d50a:	e7d9      	b.n	800d4c0 <__ieee754_rem_pio2f+0x54>
 800d50c:	497b      	ldr	r1, [pc, #492]	; (800d6fc <__ieee754_rem_pio2f+0x290>)
 800d50e:	f7f3 fb09 	bl	8000b24 <__addsf3>
 800d512:	497b      	ldr	r1, [pc, #492]	; (800d700 <__ieee754_rem_pio2f+0x294>)
 800d514:	4605      	mov	r5, r0
 800d516:	f7f3 fb05 	bl	8000b24 <__addsf3>
 800d51a:	4601      	mov	r1, r0
 800d51c:	6020      	str	r0, [r4, #0]
 800d51e:	4628      	mov	r0, r5
 800d520:	f7f3 fafe 	bl	8000b20 <__aeabi_fsub>
 800d524:	4976      	ldr	r1, [pc, #472]	; (800d700 <__ieee754_rem_pio2f+0x294>)
 800d526:	e7eb      	b.n	800d500 <__ieee754_rem_pio2f+0x94>
 800d528:	4a76      	ldr	r2, [pc, #472]	; (800d704 <__ieee754_rem_pio2f+0x298>)
 800d52a:	4295      	cmp	r5, r2
 800d52c:	f300 808c 	bgt.w	800d648 <__ieee754_rem_pio2f+0x1dc>
 800d530:	f001 fdc4 	bl	800f0bc <fabsf>
 800d534:	4974      	ldr	r1, [pc, #464]	; (800d708 <__ieee754_rem_pio2f+0x29c>)
 800d536:	4680      	mov	r8, r0
 800d538:	f7f3 fbfc 	bl	8000d34 <__aeabi_fmul>
 800d53c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800d540:	f7f3 faf0 	bl	8000b24 <__addsf3>
 800d544:	f7f3 fdd2 	bl	80010ec <__aeabi_f2iz>
 800d548:	4606      	mov	r6, r0
 800d54a:	f7f3 fb9f 	bl	8000c8c <__aeabi_i2f>
 800d54e:	4968      	ldr	r1, [pc, #416]	; (800d6f0 <__ieee754_rem_pio2f+0x284>)
 800d550:	4682      	mov	sl, r0
 800d552:	f7f3 fbef 	bl	8000d34 <__aeabi_fmul>
 800d556:	4601      	mov	r1, r0
 800d558:	4640      	mov	r0, r8
 800d55a:	f7f3 fae1 	bl	8000b20 <__aeabi_fsub>
 800d55e:	4966      	ldr	r1, [pc, #408]	; (800d6f8 <__ieee754_rem_pio2f+0x28c>)
 800d560:	4680      	mov	r8, r0
 800d562:	4650      	mov	r0, sl
 800d564:	f7f3 fbe6 	bl	8000d34 <__aeabi_fmul>
 800d568:	2e1f      	cmp	r6, #31
 800d56a:	4681      	mov	r9, r0
 800d56c:	dc0c      	bgt.n	800d588 <__ieee754_rem_pio2f+0x11c>
 800d56e:	4a67      	ldr	r2, [pc, #412]	; (800d70c <__ieee754_rem_pio2f+0x2a0>)
 800d570:	1e71      	subs	r1, r6, #1
 800d572:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800d576:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800d57a:	4293      	cmp	r3, r2
 800d57c:	d004      	beq.n	800d588 <__ieee754_rem_pio2f+0x11c>
 800d57e:	4649      	mov	r1, r9
 800d580:	4640      	mov	r0, r8
 800d582:	f7f3 facd 	bl	8000b20 <__aeabi_fsub>
 800d586:	e009      	b.n	800d59c <__ieee754_rem_pio2f+0x130>
 800d588:	4649      	mov	r1, r9
 800d58a:	4640      	mov	r0, r8
 800d58c:	f7f3 fac8 	bl	8000b20 <__aeabi_fsub>
 800d590:	15ed      	asrs	r5, r5, #23
 800d592:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d596:	1aeb      	subs	r3, r5, r3
 800d598:	2b08      	cmp	r3, #8
 800d59a:	dc01      	bgt.n	800d5a0 <__ieee754_rem_pio2f+0x134>
 800d59c:	6020      	str	r0, [r4, #0]
 800d59e:	e024      	b.n	800d5ea <__ieee754_rem_pio2f+0x17e>
 800d5a0:	4956      	ldr	r1, [pc, #344]	; (800d6fc <__ieee754_rem_pio2f+0x290>)
 800d5a2:	4650      	mov	r0, sl
 800d5a4:	f7f3 fbc6 	bl	8000d34 <__aeabi_fmul>
 800d5a8:	4681      	mov	r9, r0
 800d5aa:	4601      	mov	r1, r0
 800d5ac:	4640      	mov	r0, r8
 800d5ae:	f7f3 fab7 	bl	8000b20 <__aeabi_fsub>
 800d5b2:	4601      	mov	r1, r0
 800d5b4:	4683      	mov	fp, r0
 800d5b6:	4640      	mov	r0, r8
 800d5b8:	f7f3 fab2 	bl	8000b20 <__aeabi_fsub>
 800d5bc:	4649      	mov	r1, r9
 800d5be:	f7f3 faaf 	bl	8000b20 <__aeabi_fsub>
 800d5c2:	4680      	mov	r8, r0
 800d5c4:	494e      	ldr	r1, [pc, #312]	; (800d700 <__ieee754_rem_pio2f+0x294>)
 800d5c6:	4650      	mov	r0, sl
 800d5c8:	f7f3 fbb4 	bl	8000d34 <__aeabi_fmul>
 800d5cc:	4641      	mov	r1, r8
 800d5ce:	f7f3 faa7 	bl	8000b20 <__aeabi_fsub>
 800d5d2:	4601      	mov	r1, r0
 800d5d4:	4681      	mov	r9, r0
 800d5d6:	4658      	mov	r0, fp
 800d5d8:	f7f3 faa2 	bl	8000b20 <__aeabi_fsub>
 800d5dc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d5e0:	1aed      	subs	r5, r5, r3
 800d5e2:	2d19      	cmp	r5, #25
 800d5e4:	dc15      	bgt.n	800d612 <__ieee754_rem_pio2f+0x1a6>
 800d5e6:	46d8      	mov	r8, fp
 800d5e8:	6020      	str	r0, [r4, #0]
 800d5ea:	6825      	ldr	r5, [r4, #0]
 800d5ec:	4640      	mov	r0, r8
 800d5ee:	4629      	mov	r1, r5
 800d5f0:	f7f3 fa96 	bl	8000b20 <__aeabi_fsub>
 800d5f4:	4649      	mov	r1, r9
 800d5f6:	f7f3 fa93 	bl	8000b20 <__aeabi_fsub>
 800d5fa:	2f00      	cmp	r7, #0
 800d5fc:	6060      	str	r0, [r4, #4]
 800d5fe:	f6bf af5f 	bge.w	800d4c0 <__ieee754_rem_pio2f+0x54>
 800d602:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800d606:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800d60a:	6025      	str	r5, [r4, #0]
 800d60c:	6060      	str	r0, [r4, #4]
 800d60e:	4276      	negs	r6, r6
 800d610:	e756      	b.n	800d4c0 <__ieee754_rem_pio2f+0x54>
 800d612:	493f      	ldr	r1, [pc, #252]	; (800d710 <__ieee754_rem_pio2f+0x2a4>)
 800d614:	4650      	mov	r0, sl
 800d616:	f7f3 fb8d 	bl	8000d34 <__aeabi_fmul>
 800d61a:	4605      	mov	r5, r0
 800d61c:	4601      	mov	r1, r0
 800d61e:	4658      	mov	r0, fp
 800d620:	f7f3 fa7e 	bl	8000b20 <__aeabi_fsub>
 800d624:	4601      	mov	r1, r0
 800d626:	4680      	mov	r8, r0
 800d628:	4658      	mov	r0, fp
 800d62a:	f7f3 fa79 	bl	8000b20 <__aeabi_fsub>
 800d62e:	4629      	mov	r1, r5
 800d630:	f7f3 fa76 	bl	8000b20 <__aeabi_fsub>
 800d634:	4605      	mov	r5, r0
 800d636:	4937      	ldr	r1, [pc, #220]	; (800d714 <__ieee754_rem_pio2f+0x2a8>)
 800d638:	4650      	mov	r0, sl
 800d63a:	f7f3 fb7b 	bl	8000d34 <__aeabi_fmul>
 800d63e:	4629      	mov	r1, r5
 800d640:	f7f3 fa6e 	bl	8000b20 <__aeabi_fsub>
 800d644:	4681      	mov	r9, r0
 800d646:	e79a      	b.n	800d57e <__ieee754_rem_pio2f+0x112>
 800d648:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800d64c:	db05      	blt.n	800d65a <__ieee754_rem_pio2f+0x1ee>
 800d64e:	4601      	mov	r1, r0
 800d650:	f7f3 fa66 	bl	8000b20 <__aeabi_fsub>
 800d654:	6060      	str	r0, [r4, #4]
 800d656:	6020      	str	r0, [r4, #0]
 800d658:	e715      	b.n	800d486 <__ieee754_rem_pio2f+0x1a>
 800d65a:	15ee      	asrs	r6, r5, #23
 800d65c:	3e86      	subs	r6, #134	; 0x86
 800d65e:	eba5 55c6 	sub.w	r5, r5, r6, lsl #23
 800d662:	4628      	mov	r0, r5
 800d664:	f7f3 fd42 	bl	80010ec <__aeabi_f2iz>
 800d668:	f7f3 fb10 	bl	8000c8c <__aeabi_i2f>
 800d66c:	4601      	mov	r1, r0
 800d66e:	9003      	str	r0, [sp, #12]
 800d670:	4628      	mov	r0, r5
 800d672:	f7f3 fa55 	bl	8000b20 <__aeabi_fsub>
 800d676:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800d67a:	f7f3 fb5b 	bl	8000d34 <__aeabi_fmul>
 800d67e:	4680      	mov	r8, r0
 800d680:	f7f3 fd34 	bl	80010ec <__aeabi_f2iz>
 800d684:	f7f3 fb02 	bl	8000c8c <__aeabi_i2f>
 800d688:	4601      	mov	r1, r0
 800d68a:	9004      	str	r0, [sp, #16]
 800d68c:	4605      	mov	r5, r0
 800d68e:	4640      	mov	r0, r8
 800d690:	f7f3 fa46 	bl	8000b20 <__aeabi_fsub>
 800d694:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800d698:	f7f3 fb4c 	bl	8000d34 <__aeabi_fmul>
 800d69c:	2100      	movs	r1, #0
 800d69e:	9005      	str	r0, [sp, #20]
 800d6a0:	f7f3 fcdc 	bl	800105c <__aeabi_fcmpeq>
 800d6a4:	b1e8      	cbz	r0, 800d6e2 <__ieee754_rem_pio2f+0x276>
 800d6a6:	2100      	movs	r1, #0
 800d6a8:	4628      	mov	r0, r5
 800d6aa:	f7f3 fcd7 	bl	800105c <__aeabi_fcmpeq>
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	bf14      	ite	ne
 800d6b2:	2301      	movne	r3, #1
 800d6b4:	2302      	moveq	r3, #2
 800d6b6:	4a18      	ldr	r2, [pc, #96]	; (800d718 <__ieee754_rem_pio2f+0x2ac>)
 800d6b8:	4621      	mov	r1, r4
 800d6ba:	9201      	str	r2, [sp, #4]
 800d6bc:	2202      	movs	r2, #2
 800d6be:	a803      	add	r0, sp, #12
 800d6c0:	9200      	str	r2, [sp, #0]
 800d6c2:	4632      	mov	r2, r6
 800d6c4:	f000 fdbe 	bl	800e244 <__kernel_rem_pio2f>
 800d6c8:	2f00      	cmp	r7, #0
 800d6ca:	4606      	mov	r6, r0
 800d6cc:	f6bf aef8 	bge.w	800d4c0 <__ieee754_rem_pio2f+0x54>
 800d6d0:	6823      	ldr	r3, [r4, #0]
 800d6d2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d6d6:	6023      	str	r3, [r4, #0]
 800d6d8:	6863      	ldr	r3, [r4, #4]
 800d6da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d6de:	6063      	str	r3, [r4, #4]
 800d6e0:	e795      	b.n	800d60e <__ieee754_rem_pio2f+0x1a2>
 800d6e2:	2303      	movs	r3, #3
 800d6e4:	e7e7      	b.n	800d6b6 <__ieee754_rem_pio2f+0x24a>
 800d6e6:	bf00      	nop
 800d6e8:	3f490fd8 	.word	0x3f490fd8
 800d6ec:	4016cbe3 	.word	0x4016cbe3
 800d6f0:	3fc90f80 	.word	0x3fc90f80
 800d6f4:	3fc90fd0 	.word	0x3fc90fd0
 800d6f8:	37354443 	.word	0x37354443
 800d6fc:	37354400 	.word	0x37354400
 800d700:	2e85a308 	.word	0x2e85a308
 800d704:	43490f80 	.word	0x43490f80
 800d708:	3f22f984 	.word	0x3f22f984
 800d70c:	0800f540 	.word	0x0800f540
 800d710:	2e85a300 	.word	0x2e85a300
 800d714:	248d3132 	.word	0x248d3132
 800d718:	0800f5c0 	.word	0x0800f5c0

0800d71c <__ieee754_sqrtf>:
 800d71c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800d720:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800d724:	b570      	push	{r4, r5, r6, lr}
 800d726:	4603      	mov	r3, r0
 800d728:	4604      	mov	r4, r0
 800d72a:	d309      	bcc.n	800d740 <__ieee754_sqrtf+0x24>
 800d72c:	4601      	mov	r1, r0
 800d72e:	f7f3 fb01 	bl	8000d34 <__aeabi_fmul>
 800d732:	4601      	mov	r1, r0
 800d734:	4620      	mov	r0, r4
 800d736:	f7f3 f9f5 	bl	8000b24 <__addsf3>
 800d73a:	4604      	mov	r4, r0
 800d73c:	4620      	mov	r0, r4
 800d73e:	bd70      	pop	{r4, r5, r6, pc}
 800d740:	2a00      	cmp	r2, #0
 800d742:	d0fb      	beq.n	800d73c <__ieee754_sqrtf+0x20>
 800d744:	2800      	cmp	r0, #0
 800d746:	da06      	bge.n	800d756 <__ieee754_sqrtf+0x3a>
 800d748:	4601      	mov	r1, r0
 800d74a:	f7f3 f9e9 	bl	8000b20 <__aeabi_fsub>
 800d74e:	4601      	mov	r1, r0
 800d750:	f7f3 fba4 	bl	8000e9c <__aeabi_fdiv>
 800d754:	e7f1      	b.n	800d73a <__ieee754_sqrtf+0x1e>
 800d756:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800d75a:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800d75e:	d32e      	bcc.n	800d7be <__ieee754_sqrtf+0xa2>
 800d760:	3c7f      	subs	r4, #127	; 0x7f
 800d762:	07e2      	lsls	r2, r4, #31
 800d764:	f04f 0200 	mov.w	r2, #0
 800d768:	ea4f 0164 	mov.w	r1, r4, asr #1
 800d76c:	4616      	mov	r6, r2
 800d76e:	f04f 0419 	mov.w	r4, #25
 800d772:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800d776:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800d77a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d77e:	bf48      	it	mi
 800d780:	005b      	lslmi	r3, r3, #1
 800d782:	005b      	lsls	r3, r3, #1
 800d784:	1835      	adds	r5, r6, r0
 800d786:	429d      	cmp	r5, r3
 800d788:	bfde      	ittt	le
 800d78a:	182e      	addle	r6, r5, r0
 800d78c:	1b5b      	suble	r3, r3, r5
 800d78e:	1812      	addle	r2, r2, r0
 800d790:	3c01      	subs	r4, #1
 800d792:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d796:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800d79a:	d1f3      	bne.n	800d784 <__ieee754_sqrtf+0x68>
 800d79c:	b113      	cbz	r3, 800d7a4 <__ieee754_sqrtf+0x88>
 800d79e:	3201      	adds	r2, #1
 800d7a0:	f022 0201 	bic.w	r2, r2, #1
 800d7a4:	1054      	asrs	r4, r2, #1
 800d7a6:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800d7aa:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 800d7ae:	e7c5      	b.n	800d73c <__ieee754_sqrtf+0x20>
 800d7b0:	005b      	lsls	r3, r3, #1
 800d7b2:	3201      	adds	r2, #1
 800d7b4:	0219      	lsls	r1, r3, #8
 800d7b6:	d5fb      	bpl.n	800d7b0 <__ieee754_sqrtf+0x94>
 800d7b8:	3a01      	subs	r2, #1
 800d7ba:	1aa4      	subs	r4, r4, r2
 800d7bc:	e7d0      	b.n	800d760 <__ieee754_sqrtf+0x44>
 800d7be:	2200      	movs	r2, #0
 800d7c0:	e7f8      	b.n	800d7b4 <__ieee754_sqrtf+0x98>
 800d7c2:	0000      	movs	r0, r0
 800d7c4:	0000      	movs	r0, r0
	...

0800d7c8 <__kernel_cos>:
 800d7c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7cc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d7d0:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800d7d4:	4680      	mov	r8, r0
 800d7d6:	460f      	mov	r7, r1
 800d7d8:	e9cd 2300 	strd	r2, r3, [sp]
 800d7dc:	da04      	bge.n	800d7e8 <__kernel_cos+0x20>
 800d7de:	f7f3 f923 	bl	8000a28 <__aeabi_d2iz>
 800d7e2:	2800      	cmp	r0, #0
 800d7e4:	f000 8086 	beq.w	800d8f4 <__kernel_cos+0x12c>
 800d7e8:	4642      	mov	r2, r8
 800d7ea:	463b      	mov	r3, r7
 800d7ec:	4640      	mov	r0, r8
 800d7ee:	4639      	mov	r1, r7
 800d7f0:	f7f2 fe6a 	bl	80004c8 <__aeabi_dmul>
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	4b4e      	ldr	r3, [pc, #312]	; (800d930 <__kernel_cos+0x168>)
 800d7f8:	4604      	mov	r4, r0
 800d7fa:	460d      	mov	r5, r1
 800d7fc:	f7f2 fe64 	bl	80004c8 <__aeabi_dmul>
 800d800:	a33f      	add	r3, pc, #252	; (adr r3, 800d900 <__kernel_cos+0x138>)
 800d802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d806:	4682      	mov	sl, r0
 800d808:	468b      	mov	fp, r1
 800d80a:	4620      	mov	r0, r4
 800d80c:	4629      	mov	r1, r5
 800d80e:	f7f2 fe5b 	bl	80004c8 <__aeabi_dmul>
 800d812:	a33d      	add	r3, pc, #244	; (adr r3, 800d908 <__kernel_cos+0x140>)
 800d814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d818:	f7f2 fca0 	bl	800015c <__adddf3>
 800d81c:	4622      	mov	r2, r4
 800d81e:	462b      	mov	r3, r5
 800d820:	f7f2 fe52 	bl	80004c8 <__aeabi_dmul>
 800d824:	a33a      	add	r3, pc, #232	; (adr r3, 800d910 <__kernel_cos+0x148>)
 800d826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d82a:	f7f2 fc95 	bl	8000158 <__aeabi_dsub>
 800d82e:	4622      	mov	r2, r4
 800d830:	462b      	mov	r3, r5
 800d832:	f7f2 fe49 	bl	80004c8 <__aeabi_dmul>
 800d836:	a338      	add	r3, pc, #224	; (adr r3, 800d918 <__kernel_cos+0x150>)
 800d838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d83c:	f7f2 fc8e 	bl	800015c <__adddf3>
 800d840:	4622      	mov	r2, r4
 800d842:	462b      	mov	r3, r5
 800d844:	f7f2 fe40 	bl	80004c8 <__aeabi_dmul>
 800d848:	a335      	add	r3, pc, #212	; (adr r3, 800d920 <__kernel_cos+0x158>)
 800d84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d84e:	f7f2 fc83 	bl	8000158 <__aeabi_dsub>
 800d852:	4622      	mov	r2, r4
 800d854:	462b      	mov	r3, r5
 800d856:	f7f2 fe37 	bl	80004c8 <__aeabi_dmul>
 800d85a:	a333      	add	r3, pc, #204	; (adr r3, 800d928 <__kernel_cos+0x160>)
 800d85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d860:	f7f2 fc7c 	bl	800015c <__adddf3>
 800d864:	4622      	mov	r2, r4
 800d866:	462b      	mov	r3, r5
 800d868:	f7f2 fe2e 	bl	80004c8 <__aeabi_dmul>
 800d86c:	4622      	mov	r2, r4
 800d86e:	462b      	mov	r3, r5
 800d870:	f7f2 fe2a 	bl	80004c8 <__aeabi_dmul>
 800d874:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d878:	4604      	mov	r4, r0
 800d87a:	460d      	mov	r5, r1
 800d87c:	4640      	mov	r0, r8
 800d87e:	4639      	mov	r1, r7
 800d880:	f7f2 fe22 	bl	80004c8 <__aeabi_dmul>
 800d884:	460b      	mov	r3, r1
 800d886:	4602      	mov	r2, r0
 800d888:	4629      	mov	r1, r5
 800d88a:	4620      	mov	r0, r4
 800d88c:	f7f2 fc64 	bl	8000158 <__aeabi_dsub>
 800d890:	4b28      	ldr	r3, [pc, #160]	; (800d934 <__kernel_cos+0x16c>)
 800d892:	4680      	mov	r8, r0
 800d894:	429e      	cmp	r6, r3
 800d896:	4689      	mov	r9, r1
 800d898:	dc0e      	bgt.n	800d8b8 <__kernel_cos+0xf0>
 800d89a:	4602      	mov	r2, r0
 800d89c:	460b      	mov	r3, r1
 800d89e:	4650      	mov	r0, sl
 800d8a0:	4659      	mov	r1, fp
 800d8a2:	f7f2 fc59 	bl	8000158 <__aeabi_dsub>
 800d8a6:	4602      	mov	r2, r0
 800d8a8:	2000      	movs	r0, #0
 800d8aa:	460b      	mov	r3, r1
 800d8ac:	4922      	ldr	r1, [pc, #136]	; (800d938 <__kernel_cos+0x170>)
 800d8ae:	f7f2 fc53 	bl	8000158 <__aeabi_dsub>
 800d8b2:	b003      	add	sp, #12
 800d8b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8b8:	2400      	movs	r4, #0
 800d8ba:	4b20      	ldr	r3, [pc, #128]	; (800d93c <__kernel_cos+0x174>)
 800d8bc:	4622      	mov	r2, r4
 800d8be:	429e      	cmp	r6, r3
 800d8c0:	bfcc      	ite	gt
 800d8c2:	4d1f      	ldrgt	r5, [pc, #124]	; (800d940 <__kernel_cos+0x178>)
 800d8c4:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800d8c8:	462b      	mov	r3, r5
 800d8ca:	2000      	movs	r0, #0
 800d8cc:	491a      	ldr	r1, [pc, #104]	; (800d938 <__kernel_cos+0x170>)
 800d8ce:	f7f2 fc43 	bl	8000158 <__aeabi_dsub>
 800d8d2:	4622      	mov	r2, r4
 800d8d4:	4606      	mov	r6, r0
 800d8d6:	460f      	mov	r7, r1
 800d8d8:	462b      	mov	r3, r5
 800d8da:	4650      	mov	r0, sl
 800d8dc:	4659      	mov	r1, fp
 800d8de:	f7f2 fc3b 	bl	8000158 <__aeabi_dsub>
 800d8e2:	4642      	mov	r2, r8
 800d8e4:	464b      	mov	r3, r9
 800d8e6:	f7f2 fc37 	bl	8000158 <__aeabi_dsub>
 800d8ea:	4602      	mov	r2, r0
 800d8ec:	460b      	mov	r3, r1
 800d8ee:	4630      	mov	r0, r6
 800d8f0:	4639      	mov	r1, r7
 800d8f2:	e7dc      	b.n	800d8ae <__kernel_cos+0xe6>
 800d8f4:	2000      	movs	r0, #0
 800d8f6:	4910      	ldr	r1, [pc, #64]	; (800d938 <__kernel_cos+0x170>)
 800d8f8:	e7db      	b.n	800d8b2 <__kernel_cos+0xea>
 800d8fa:	bf00      	nop
 800d8fc:	f3af 8000 	nop.w
 800d900:	be8838d4 	.word	0xbe8838d4
 800d904:	bda8fae9 	.word	0xbda8fae9
 800d908:	bdb4b1c4 	.word	0xbdb4b1c4
 800d90c:	3e21ee9e 	.word	0x3e21ee9e
 800d910:	809c52ad 	.word	0x809c52ad
 800d914:	3e927e4f 	.word	0x3e927e4f
 800d918:	19cb1590 	.word	0x19cb1590
 800d91c:	3efa01a0 	.word	0x3efa01a0
 800d920:	16c15177 	.word	0x16c15177
 800d924:	3f56c16c 	.word	0x3f56c16c
 800d928:	5555554c 	.word	0x5555554c
 800d92c:	3fa55555 	.word	0x3fa55555
 800d930:	3fe00000 	.word	0x3fe00000
 800d934:	3fd33332 	.word	0x3fd33332
 800d938:	3ff00000 	.word	0x3ff00000
 800d93c:	3fe90000 	.word	0x3fe90000
 800d940:	3fd20000 	.word	0x3fd20000

0800d944 <__kernel_rem_pio2>:
 800d944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d948:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800d94c:	9307      	str	r3, [sp, #28]
 800d94e:	9104      	str	r1, [sp, #16]
 800d950:	4bbf      	ldr	r3, [pc, #764]	; (800dc50 <__kernel_rem_pio2+0x30c>)
 800d952:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800d954:	1ed4      	subs	r4, r2, #3
 800d956:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d95a:	2500      	movs	r5, #0
 800d95c:	9302      	str	r3, [sp, #8]
 800d95e:	9b07      	ldr	r3, [sp, #28]
 800d960:	9008      	str	r0, [sp, #32]
 800d962:	3b01      	subs	r3, #1
 800d964:	9306      	str	r3, [sp, #24]
 800d966:	2318      	movs	r3, #24
 800d968:	fb94 f4f3 	sdiv	r4, r4, r3
 800d96c:	f06f 0317 	mvn.w	r3, #23
 800d970:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800d974:	fb04 3303 	mla	r3, r4, r3, r3
 800d978:	eb03 0a02 	add.w	sl, r3, r2
 800d97c:	9a06      	ldr	r2, [sp, #24]
 800d97e:	9b02      	ldr	r3, [sp, #8]
 800d980:	1aa7      	subs	r7, r4, r2
 800d982:	eb03 0802 	add.w	r8, r3, r2
 800d986:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800d988:	2200      	movs	r2, #0
 800d98a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d98e:	2300      	movs	r3, #0
 800d990:	ae1e      	add	r6, sp, #120	; 0x78
 800d992:	4545      	cmp	r5, r8
 800d994:	dd14      	ble.n	800d9c0 <__kernel_rem_pio2+0x7c>
 800d996:	2600      	movs	r6, #0
 800d998:	f50d 7bdc 	add.w	fp, sp, #440	; 0x1b8
 800d99c:	9b02      	ldr	r3, [sp, #8]
 800d99e:	429e      	cmp	r6, r3
 800d9a0:	dc39      	bgt.n	800da16 <__kernel_rem_pio2+0xd2>
 800d9a2:	9b08      	ldr	r3, [sp, #32]
 800d9a4:	f04f 0800 	mov.w	r8, #0
 800d9a8:	3b08      	subs	r3, #8
 800d9aa:	9300      	str	r3, [sp, #0]
 800d9ac:	9b07      	ldr	r3, [sp, #28]
 800d9ae:	f04f 0900 	mov.w	r9, #0
 800d9b2:	199d      	adds	r5, r3, r6
 800d9b4:	ab20      	add	r3, sp, #128	; 0x80
 800d9b6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800d9ba:	9305      	str	r3, [sp, #20]
 800d9bc:	2700      	movs	r7, #0
 800d9be:	e023      	b.n	800da08 <__kernel_rem_pio2+0xc4>
 800d9c0:	42ef      	cmn	r7, r5
 800d9c2:	d40b      	bmi.n	800d9dc <__kernel_rem_pio2+0x98>
 800d9c4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d9c8:	e9cd 2300 	strd	r2, r3, [sp]
 800d9cc:	f7f2 fd12 	bl	80003f4 <__aeabi_i2d>
 800d9d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9d4:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 800d9d8:	3501      	adds	r5, #1
 800d9da:	e7da      	b.n	800d992 <__kernel_rem_pio2+0x4e>
 800d9dc:	4610      	mov	r0, r2
 800d9de:	4619      	mov	r1, r3
 800d9e0:	e7f8      	b.n	800d9d4 <__kernel_rem_pio2+0x90>
 800d9e2:	9905      	ldr	r1, [sp, #20]
 800d9e4:	9d00      	ldr	r5, [sp, #0]
 800d9e6:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800d9ea:	9105      	str	r1, [sp, #20]
 800d9ec:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800d9f0:	9500      	str	r5, [sp, #0]
 800d9f2:	f7f2 fd69 	bl	80004c8 <__aeabi_dmul>
 800d9f6:	4602      	mov	r2, r0
 800d9f8:	460b      	mov	r3, r1
 800d9fa:	4640      	mov	r0, r8
 800d9fc:	4649      	mov	r1, r9
 800d9fe:	f7f2 fbad 	bl	800015c <__adddf3>
 800da02:	4680      	mov	r8, r0
 800da04:	4689      	mov	r9, r1
 800da06:	3701      	adds	r7, #1
 800da08:	9b06      	ldr	r3, [sp, #24]
 800da0a:	429f      	cmp	r7, r3
 800da0c:	dde9      	ble.n	800d9e2 <__kernel_rem_pio2+0x9e>
 800da0e:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800da12:	3601      	adds	r6, #1
 800da14:	e7c2      	b.n	800d99c <__kernel_rem_pio2+0x58>
 800da16:	9b02      	ldr	r3, [sp, #8]
 800da18:	aa0c      	add	r2, sp, #48	; 0x30
 800da1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800da1e:	930b      	str	r3, [sp, #44]	; 0x2c
 800da20:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 800da22:	9f02      	ldr	r7, [sp, #8]
 800da24:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800da28:	930a      	str	r3, [sp, #40]	; 0x28
 800da2a:	2600      	movs	r6, #0
 800da2c:	ab98      	add	r3, sp, #608	; 0x260
 800da2e:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800da32:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800da36:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800da3a:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800da3e:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800da42:	ab98      	add	r3, sp, #608	; 0x260
 800da44:	445b      	add	r3, fp
 800da46:	f1a3 0498 	sub.w	r4, r3, #152	; 0x98
 800da4a:	1bbb      	subs	r3, r7, r6
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	dc71      	bgt.n	800db34 <__kernel_rem_pio2+0x1f0>
 800da50:	4652      	mov	r2, sl
 800da52:	4640      	mov	r0, r8
 800da54:	4649      	mov	r1, r9
 800da56:	f001 f9b7 	bl	800edc8 <scalbn>
 800da5a:	2200      	movs	r2, #0
 800da5c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800da60:	4604      	mov	r4, r0
 800da62:	460d      	mov	r5, r1
 800da64:	f7f2 fd30 	bl	80004c8 <__aeabi_dmul>
 800da68:	f001 f896 	bl	800eb98 <floor>
 800da6c:	2200      	movs	r2, #0
 800da6e:	4b79      	ldr	r3, [pc, #484]	; (800dc54 <__kernel_rem_pio2+0x310>)
 800da70:	f7f2 fd2a 	bl	80004c8 <__aeabi_dmul>
 800da74:	4602      	mov	r2, r0
 800da76:	460b      	mov	r3, r1
 800da78:	4620      	mov	r0, r4
 800da7a:	4629      	mov	r1, r5
 800da7c:	f7f2 fb6c 	bl	8000158 <__aeabi_dsub>
 800da80:	460d      	mov	r5, r1
 800da82:	4604      	mov	r4, r0
 800da84:	f7f2 ffd0 	bl	8000a28 <__aeabi_d2iz>
 800da88:	9005      	str	r0, [sp, #20]
 800da8a:	f7f2 fcb3 	bl	80003f4 <__aeabi_i2d>
 800da8e:	4602      	mov	r2, r0
 800da90:	460b      	mov	r3, r1
 800da92:	4620      	mov	r0, r4
 800da94:	4629      	mov	r1, r5
 800da96:	f7f2 fb5f 	bl	8000158 <__aeabi_dsub>
 800da9a:	f1ba 0f00 	cmp.w	sl, #0
 800da9e:	4680      	mov	r8, r0
 800daa0:	4689      	mov	r9, r1
 800daa2:	dd6c      	ble.n	800db7e <__kernel_rem_pio2+0x23a>
 800daa4:	1e7a      	subs	r2, r7, #1
 800daa6:	ab0c      	add	r3, sp, #48	; 0x30
 800daa8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800daac:	f1ca 0118 	rsb	r1, sl, #24
 800dab0:	9c05      	ldr	r4, [sp, #20]
 800dab2:	fa40 f301 	asr.w	r3, r0, r1
 800dab6:	441c      	add	r4, r3
 800dab8:	408b      	lsls	r3, r1
 800daba:	1ac0      	subs	r0, r0, r3
 800dabc:	ab0c      	add	r3, sp, #48	; 0x30
 800dabe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800dac2:	f1ca 0317 	rsb	r3, sl, #23
 800dac6:	9405      	str	r4, [sp, #20]
 800dac8:	fa40 f303 	asr.w	r3, r0, r3
 800dacc:	9300      	str	r3, [sp, #0]
 800dace:	9b00      	ldr	r3, [sp, #0]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	dd62      	ble.n	800db9a <__kernel_rem_pio2+0x256>
 800dad4:	2200      	movs	r2, #0
 800dad6:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800dada:	4614      	mov	r4, r2
 800dadc:	9b05      	ldr	r3, [sp, #20]
 800dade:	3301      	adds	r3, #1
 800dae0:	9305      	str	r3, [sp, #20]
 800dae2:	4297      	cmp	r7, r2
 800dae4:	f300 809f 	bgt.w	800dc26 <__kernel_rem_pio2+0x2e2>
 800dae8:	f1ba 0f00 	cmp.w	sl, #0
 800daec:	dd07      	ble.n	800dafe <__kernel_rem_pio2+0x1ba>
 800daee:	f1ba 0f01 	cmp.w	sl, #1
 800daf2:	f000 80bb 	beq.w	800dc6c <__kernel_rem_pio2+0x328>
 800daf6:	f1ba 0f02 	cmp.w	sl, #2
 800dafa:	f000 80c1 	beq.w	800dc80 <__kernel_rem_pio2+0x33c>
 800dafe:	9b00      	ldr	r3, [sp, #0]
 800db00:	2b02      	cmp	r3, #2
 800db02:	d14a      	bne.n	800db9a <__kernel_rem_pio2+0x256>
 800db04:	4642      	mov	r2, r8
 800db06:	464b      	mov	r3, r9
 800db08:	2000      	movs	r0, #0
 800db0a:	4953      	ldr	r1, [pc, #332]	; (800dc58 <__kernel_rem_pio2+0x314>)
 800db0c:	f7f2 fb24 	bl	8000158 <__aeabi_dsub>
 800db10:	4680      	mov	r8, r0
 800db12:	4689      	mov	r9, r1
 800db14:	2c00      	cmp	r4, #0
 800db16:	d040      	beq.n	800db9a <__kernel_rem_pio2+0x256>
 800db18:	4652      	mov	r2, sl
 800db1a:	2000      	movs	r0, #0
 800db1c:	494e      	ldr	r1, [pc, #312]	; (800dc58 <__kernel_rem_pio2+0x314>)
 800db1e:	f001 f953 	bl	800edc8 <scalbn>
 800db22:	4602      	mov	r2, r0
 800db24:	460b      	mov	r3, r1
 800db26:	4640      	mov	r0, r8
 800db28:	4649      	mov	r1, r9
 800db2a:	f7f2 fb15 	bl	8000158 <__aeabi_dsub>
 800db2e:	4680      	mov	r8, r0
 800db30:	4689      	mov	r9, r1
 800db32:	e032      	b.n	800db9a <__kernel_rem_pio2+0x256>
 800db34:	2200      	movs	r2, #0
 800db36:	4b49      	ldr	r3, [pc, #292]	; (800dc5c <__kernel_rem_pio2+0x318>)
 800db38:	4640      	mov	r0, r8
 800db3a:	4649      	mov	r1, r9
 800db3c:	f7f2 fcc4 	bl	80004c8 <__aeabi_dmul>
 800db40:	f7f2 ff72 	bl	8000a28 <__aeabi_d2iz>
 800db44:	f7f2 fc56 	bl	80003f4 <__aeabi_i2d>
 800db48:	2200      	movs	r2, #0
 800db4a:	4b45      	ldr	r3, [pc, #276]	; (800dc60 <__kernel_rem_pio2+0x31c>)
 800db4c:	e9cd 0100 	strd	r0, r1, [sp]
 800db50:	f7f2 fcba 	bl	80004c8 <__aeabi_dmul>
 800db54:	4602      	mov	r2, r0
 800db56:	460b      	mov	r3, r1
 800db58:	4640      	mov	r0, r8
 800db5a:	4649      	mov	r1, r9
 800db5c:	f7f2 fafc 	bl	8000158 <__aeabi_dsub>
 800db60:	f7f2 ff62 	bl	8000a28 <__aeabi_d2iz>
 800db64:	ab0c      	add	r3, sp, #48	; 0x30
 800db66:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800db6a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800db6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db72:	f7f2 faf3 	bl	800015c <__adddf3>
 800db76:	3601      	adds	r6, #1
 800db78:	4680      	mov	r8, r0
 800db7a:	4689      	mov	r9, r1
 800db7c:	e765      	b.n	800da4a <__kernel_rem_pio2+0x106>
 800db7e:	d105      	bne.n	800db8c <__kernel_rem_pio2+0x248>
 800db80:	1e7b      	subs	r3, r7, #1
 800db82:	aa0c      	add	r2, sp, #48	; 0x30
 800db84:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800db88:	15c3      	asrs	r3, r0, #23
 800db8a:	e79f      	b.n	800dacc <__kernel_rem_pio2+0x188>
 800db8c:	2200      	movs	r2, #0
 800db8e:	4b35      	ldr	r3, [pc, #212]	; (800dc64 <__kernel_rem_pio2+0x320>)
 800db90:	f7f2 ff20 	bl	80009d4 <__aeabi_dcmpge>
 800db94:	2800      	cmp	r0, #0
 800db96:	d143      	bne.n	800dc20 <__kernel_rem_pio2+0x2dc>
 800db98:	9000      	str	r0, [sp, #0]
 800db9a:	2200      	movs	r2, #0
 800db9c:	2300      	movs	r3, #0
 800db9e:	4640      	mov	r0, r8
 800dba0:	4649      	mov	r1, r9
 800dba2:	f7f2 fef9 	bl	8000998 <__aeabi_dcmpeq>
 800dba6:	2800      	cmp	r0, #0
 800dba8:	f000 80c3 	beq.w	800dd32 <__kernel_rem_pio2+0x3ee>
 800dbac:	1e7c      	subs	r4, r7, #1
 800dbae:	4623      	mov	r3, r4
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	9902      	ldr	r1, [sp, #8]
 800dbb4:	428b      	cmp	r3, r1
 800dbb6:	da6a      	bge.n	800dc8e <__kernel_rem_pio2+0x34a>
 800dbb8:	2a00      	cmp	r2, #0
 800dbba:	f000 8084 	beq.w	800dcc6 <__kernel_rem_pio2+0x382>
 800dbbe:	ab0c      	add	r3, sp, #48	; 0x30
 800dbc0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800dbc4:	f1aa 0a18 	sub.w	sl, sl, #24
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	f000 80b0 	beq.w	800dd2e <__kernel_rem_pio2+0x3ea>
 800dbce:	4652      	mov	r2, sl
 800dbd0:	2000      	movs	r0, #0
 800dbd2:	4921      	ldr	r1, [pc, #132]	; (800dc58 <__kernel_rem_pio2+0x314>)
 800dbd4:	f001 f8f8 	bl	800edc8 <scalbn>
 800dbd8:	4625      	mov	r5, r4
 800dbda:	4606      	mov	r6, r0
 800dbdc:	460f      	mov	r7, r1
 800dbde:	f04f 0a00 	mov.w	sl, #0
 800dbe2:	00e3      	lsls	r3, r4, #3
 800dbe4:	aa98      	add	r2, sp, #608	; 0x260
 800dbe6:	eb02 0803 	add.w	r8, r2, r3
 800dbea:	f8df b070 	ldr.w	fp, [pc, #112]	; 800dc5c <__kernel_rem_pio2+0x318>
 800dbee:	9306      	str	r3, [sp, #24]
 800dbf0:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 800dbf4:	2d00      	cmp	r5, #0
 800dbf6:	f280 80d2 	bge.w	800dd9e <__kernel_rem_pio2+0x45a>
 800dbfa:	2500      	movs	r5, #0
 800dbfc:	9a06      	ldr	r2, [sp, #24]
 800dbfe:	ab98      	add	r3, sp, #608	; 0x260
 800dc00:	189e      	adds	r6, r3, r2
 800dc02:	3ea8      	subs	r6, #168	; 0xa8
 800dc04:	1b63      	subs	r3, r4, r5
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	f2c0 80f9 	blt.w	800ddfe <__kernel_rem_pio2+0x4ba>
 800dc0c:	f8df 9058 	ldr.w	r9, [pc, #88]	; 800dc68 <__kernel_rem_pio2+0x324>
 800dc10:	eba6 08c5 	sub.w	r8, r6, r5, lsl #3
 800dc14:	f04f 0a00 	mov.w	sl, #0
 800dc18:	f04f 0b00 	mov.w	fp, #0
 800dc1c:	2700      	movs	r7, #0
 800dc1e:	e0e2      	b.n	800dde6 <__kernel_rem_pio2+0x4a2>
 800dc20:	2302      	movs	r3, #2
 800dc22:	9300      	str	r3, [sp, #0]
 800dc24:	e756      	b.n	800dad4 <__kernel_rem_pio2+0x190>
 800dc26:	ab0c      	add	r3, sp, #48	; 0x30
 800dc28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc2c:	b94c      	cbnz	r4, 800dc42 <__kernel_rem_pio2+0x2fe>
 800dc2e:	b12b      	cbz	r3, 800dc3c <__kernel_rem_pio2+0x2f8>
 800dc30:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800dc34:	a80c      	add	r0, sp, #48	; 0x30
 800dc36:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	3201      	adds	r2, #1
 800dc3e:	461c      	mov	r4, r3
 800dc40:	e74f      	b.n	800dae2 <__kernel_rem_pio2+0x19e>
 800dc42:	1acb      	subs	r3, r1, r3
 800dc44:	a80c      	add	r0, sp, #48	; 0x30
 800dc46:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800dc4a:	4623      	mov	r3, r4
 800dc4c:	e7f6      	b.n	800dc3c <__kernel_rem_pio2+0x2f8>
 800dc4e:	bf00      	nop
 800dc50:	0800f918 	.word	0x0800f918
 800dc54:	40200000 	.word	0x40200000
 800dc58:	3ff00000 	.word	0x3ff00000
 800dc5c:	3e700000 	.word	0x3e700000
 800dc60:	41700000 	.word	0x41700000
 800dc64:	3fe00000 	.word	0x3fe00000
 800dc68:	0800f8d0 	.word	0x0800f8d0
 800dc6c:	1e7a      	subs	r2, r7, #1
 800dc6e:	ab0c      	add	r3, sp, #48	; 0x30
 800dc70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc74:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800dc78:	a90c      	add	r1, sp, #48	; 0x30
 800dc7a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800dc7e:	e73e      	b.n	800dafe <__kernel_rem_pio2+0x1ba>
 800dc80:	1e7a      	subs	r2, r7, #1
 800dc82:	ab0c      	add	r3, sp, #48	; 0x30
 800dc84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc88:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800dc8c:	e7f4      	b.n	800dc78 <__kernel_rem_pio2+0x334>
 800dc8e:	a90c      	add	r1, sp, #48	; 0x30
 800dc90:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800dc94:	3b01      	subs	r3, #1
 800dc96:	430a      	orrs	r2, r1
 800dc98:	e78b      	b.n	800dbb2 <__kernel_rem_pio2+0x26e>
 800dc9a:	3401      	adds	r4, #1
 800dc9c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800dca0:	2a00      	cmp	r2, #0
 800dca2:	d0fa      	beq.n	800dc9a <__kernel_rem_pio2+0x356>
 800dca4:	ab98      	add	r3, sp, #608	; 0x260
 800dca6:	449b      	add	fp, r3
 800dca8:	9b07      	ldr	r3, [sp, #28]
 800dcaa:	1c7e      	adds	r6, r7, #1
 800dcac:	19dd      	adds	r5, r3, r7
 800dcae:	ab98      	add	r3, sp, #608	; 0x260
 800dcb0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800dcb4:	f1ab 0b98 	sub.w	fp, fp, #152	; 0x98
 800dcb8:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 800dcbc:	443c      	add	r4, r7
 800dcbe:	42b4      	cmp	r4, r6
 800dcc0:	da04      	bge.n	800dccc <__kernel_rem_pio2+0x388>
 800dcc2:	4627      	mov	r7, r4
 800dcc4:	e6b1      	b.n	800da2a <__kernel_rem_pio2+0xe6>
 800dcc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dcc8:	2401      	movs	r4, #1
 800dcca:	e7e7      	b.n	800dc9c <__kernel_rem_pio2+0x358>
 800dccc:	f105 0308 	add.w	r3, r5, #8
 800dcd0:	9309      	str	r3, [sp, #36]	; 0x24
 800dcd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcd4:	2700      	movs	r7, #0
 800dcd6:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dcda:	f7f2 fb8b 	bl	80003f4 <__aeabi_i2d>
 800dcde:	f04f 0800 	mov.w	r8, #0
 800dce2:	f04f 0900 	mov.w	r9, #0
 800dce6:	9b08      	ldr	r3, [sp, #32]
 800dce8:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800dcec:	3b08      	subs	r3, #8
 800dcee:	9300      	str	r3, [sp, #0]
 800dcf0:	f105 0310 	add.w	r3, r5, #16
 800dcf4:	9305      	str	r3, [sp, #20]
 800dcf6:	9b06      	ldr	r3, [sp, #24]
 800dcf8:	429f      	cmp	r7, r3
 800dcfa:	dd04      	ble.n	800dd06 <__kernel_rem_pio2+0x3c2>
 800dcfc:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 800dd00:	3601      	adds	r6, #1
 800dd02:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800dd04:	e7db      	b.n	800dcbe <__kernel_rem_pio2+0x37a>
 800dd06:	9905      	ldr	r1, [sp, #20]
 800dd08:	9d00      	ldr	r5, [sp, #0]
 800dd0a:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800dd0e:	9105      	str	r1, [sp, #20]
 800dd10:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 800dd14:	9500      	str	r5, [sp, #0]
 800dd16:	f7f2 fbd7 	bl	80004c8 <__aeabi_dmul>
 800dd1a:	4602      	mov	r2, r0
 800dd1c:	460b      	mov	r3, r1
 800dd1e:	4640      	mov	r0, r8
 800dd20:	4649      	mov	r1, r9
 800dd22:	f7f2 fa1b 	bl	800015c <__adddf3>
 800dd26:	3701      	adds	r7, #1
 800dd28:	4680      	mov	r8, r0
 800dd2a:	4689      	mov	r9, r1
 800dd2c:	e7e3      	b.n	800dcf6 <__kernel_rem_pio2+0x3b2>
 800dd2e:	3c01      	subs	r4, #1
 800dd30:	e745      	b.n	800dbbe <__kernel_rem_pio2+0x27a>
 800dd32:	f1ca 0200 	rsb	r2, sl, #0
 800dd36:	4640      	mov	r0, r8
 800dd38:	4649      	mov	r1, r9
 800dd3a:	f001 f845 	bl	800edc8 <scalbn>
 800dd3e:	2200      	movs	r2, #0
 800dd40:	4ba3      	ldr	r3, [pc, #652]	; (800dfd0 <__kernel_rem_pio2+0x68c>)
 800dd42:	4604      	mov	r4, r0
 800dd44:	460d      	mov	r5, r1
 800dd46:	f7f2 fe45 	bl	80009d4 <__aeabi_dcmpge>
 800dd4a:	b1f8      	cbz	r0, 800dd8c <__kernel_rem_pio2+0x448>
 800dd4c:	2200      	movs	r2, #0
 800dd4e:	4ba1      	ldr	r3, [pc, #644]	; (800dfd4 <__kernel_rem_pio2+0x690>)
 800dd50:	4620      	mov	r0, r4
 800dd52:	4629      	mov	r1, r5
 800dd54:	f7f2 fbb8 	bl	80004c8 <__aeabi_dmul>
 800dd58:	f7f2 fe66 	bl	8000a28 <__aeabi_d2iz>
 800dd5c:	4606      	mov	r6, r0
 800dd5e:	f7f2 fb49 	bl	80003f4 <__aeabi_i2d>
 800dd62:	2200      	movs	r2, #0
 800dd64:	4b9a      	ldr	r3, [pc, #616]	; (800dfd0 <__kernel_rem_pio2+0x68c>)
 800dd66:	f7f2 fbaf 	bl	80004c8 <__aeabi_dmul>
 800dd6a:	460b      	mov	r3, r1
 800dd6c:	4602      	mov	r2, r0
 800dd6e:	4629      	mov	r1, r5
 800dd70:	4620      	mov	r0, r4
 800dd72:	f7f2 f9f1 	bl	8000158 <__aeabi_dsub>
 800dd76:	f7f2 fe57 	bl	8000a28 <__aeabi_d2iz>
 800dd7a:	1c7c      	adds	r4, r7, #1
 800dd7c:	ab0c      	add	r3, sp, #48	; 0x30
 800dd7e:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800dd82:	f10a 0a18 	add.w	sl, sl, #24
 800dd86:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800dd8a:	e720      	b.n	800dbce <__kernel_rem_pio2+0x28a>
 800dd8c:	4620      	mov	r0, r4
 800dd8e:	4629      	mov	r1, r5
 800dd90:	f7f2 fe4a 	bl	8000a28 <__aeabi_d2iz>
 800dd94:	ab0c      	add	r3, sp, #48	; 0x30
 800dd96:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800dd9a:	463c      	mov	r4, r7
 800dd9c:	e717      	b.n	800dbce <__kernel_rem_pio2+0x28a>
 800dd9e:	ab0c      	add	r3, sp, #48	; 0x30
 800dda0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dda4:	f7f2 fb26 	bl	80003f4 <__aeabi_i2d>
 800dda8:	4632      	mov	r2, r6
 800ddaa:	463b      	mov	r3, r7
 800ddac:	f7f2 fb8c 	bl	80004c8 <__aeabi_dmul>
 800ddb0:	4652      	mov	r2, sl
 800ddb2:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800ddb6:	465b      	mov	r3, fp
 800ddb8:	4630      	mov	r0, r6
 800ddba:	4639      	mov	r1, r7
 800ddbc:	f7f2 fb84 	bl	80004c8 <__aeabi_dmul>
 800ddc0:	3d01      	subs	r5, #1
 800ddc2:	4606      	mov	r6, r0
 800ddc4:	460f      	mov	r7, r1
 800ddc6:	e715      	b.n	800dbf4 <__kernel_rem_pio2+0x2b0>
 800ddc8:	e9f8 2302 	ldrd	r2, r3, [r8, #8]!
 800ddcc:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800ddd0:	f7f2 fb7a 	bl	80004c8 <__aeabi_dmul>
 800ddd4:	4602      	mov	r2, r0
 800ddd6:	460b      	mov	r3, r1
 800ddd8:	4650      	mov	r0, sl
 800ddda:	4659      	mov	r1, fp
 800dddc:	f7f2 f9be 	bl	800015c <__adddf3>
 800dde0:	4682      	mov	sl, r0
 800dde2:	468b      	mov	fp, r1
 800dde4:	3701      	adds	r7, #1
 800dde6:	9b02      	ldr	r3, [sp, #8]
 800dde8:	429f      	cmp	r7, r3
 800ddea:	dc01      	bgt.n	800ddf0 <__kernel_rem_pio2+0x4ac>
 800ddec:	42bd      	cmp	r5, r7
 800ddee:	daeb      	bge.n	800ddc8 <__kernel_rem_pio2+0x484>
 800ddf0:	ab48      	add	r3, sp, #288	; 0x120
 800ddf2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ddf6:	e9c3 ab00 	strd	sl, fp, [r3]
 800ddfa:	3501      	adds	r5, #1
 800ddfc:	e702      	b.n	800dc04 <__kernel_rem_pio2+0x2c0>
 800ddfe:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800de00:	2b03      	cmp	r3, #3
 800de02:	d86c      	bhi.n	800dede <__kernel_rem_pio2+0x59a>
 800de04:	e8df f003 	tbb	[pc, r3]
 800de08:	022f2f59 	.word	0x022f2f59
 800de0c:	9a06      	ldr	r2, [sp, #24]
 800de0e:	ab48      	add	r3, sp, #288	; 0x120
 800de10:	189d      	adds	r5, r3, r2
 800de12:	46aa      	mov	sl, r5
 800de14:	46a3      	mov	fp, r4
 800de16:	f1bb 0f00 	cmp.w	fp, #0
 800de1a:	f300 8087 	bgt.w	800df2c <__kernel_rem_pio2+0x5e8>
 800de1e:	46a2      	mov	sl, r4
 800de20:	f1ba 0f01 	cmp.w	sl, #1
 800de24:	f300 809f 	bgt.w	800df66 <__kernel_rem_pio2+0x622>
 800de28:	2700      	movs	r7, #0
 800de2a:	463e      	mov	r6, r7
 800de2c:	9d06      	ldr	r5, [sp, #24]
 800de2e:	ab48      	add	r3, sp, #288	; 0x120
 800de30:	3508      	adds	r5, #8
 800de32:	441d      	add	r5, r3
 800de34:	2c01      	cmp	r4, #1
 800de36:	f300 80b3 	bgt.w	800dfa0 <__kernel_rem_pio2+0x65c>
 800de3a:	9b00      	ldr	r3, [sp, #0]
 800de3c:	9d48      	ldr	r5, [sp, #288]	; 0x120
 800de3e:	9849      	ldr	r0, [sp, #292]	; 0x124
 800de40:	9c4a      	ldr	r4, [sp, #296]	; 0x128
 800de42:	994b      	ldr	r1, [sp, #300]	; 0x12c
 800de44:	2b00      	cmp	r3, #0
 800de46:	f040 80b5 	bne.w	800dfb4 <__kernel_rem_pio2+0x670>
 800de4a:	4603      	mov	r3, r0
 800de4c:	462a      	mov	r2, r5
 800de4e:	9804      	ldr	r0, [sp, #16]
 800de50:	e9c0 2300 	strd	r2, r3, [r0]
 800de54:	4622      	mov	r2, r4
 800de56:	460b      	mov	r3, r1
 800de58:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800de5c:	463a      	mov	r2, r7
 800de5e:	4633      	mov	r3, r6
 800de60:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800de64:	e03b      	b.n	800dede <__kernel_rem_pio2+0x59a>
 800de66:	f04f 0c00 	mov.w	ip, #0
 800de6a:	4626      	mov	r6, r4
 800de6c:	4667      	mov	r7, ip
 800de6e:	9d06      	ldr	r5, [sp, #24]
 800de70:	ab48      	add	r3, sp, #288	; 0x120
 800de72:	3508      	adds	r5, #8
 800de74:	441d      	add	r5, r3
 800de76:	2e00      	cmp	r6, #0
 800de78:	da42      	bge.n	800df00 <__kernel_rem_pio2+0x5bc>
 800de7a:	9b00      	ldr	r3, [sp, #0]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d049      	beq.n	800df14 <__kernel_rem_pio2+0x5d0>
 800de80:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 800de84:	4662      	mov	r2, ip
 800de86:	460b      	mov	r3, r1
 800de88:	9904      	ldr	r1, [sp, #16]
 800de8a:	2601      	movs	r6, #1
 800de8c:	e9c1 2300 	strd	r2, r3, [r1]
 800de90:	a948      	add	r1, sp, #288	; 0x120
 800de92:	463b      	mov	r3, r7
 800de94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de98:	f7f2 f95e 	bl	8000158 <__aeabi_dsub>
 800de9c:	4684      	mov	ip, r0
 800de9e:	460f      	mov	r7, r1
 800dea0:	ad48      	add	r5, sp, #288	; 0x120
 800dea2:	42b4      	cmp	r4, r6
 800dea4:	da38      	bge.n	800df18 <__kernel_rem_pio2+0x5d4>
 800dea6:	9b00      	ldr	r3, [sp, #0]
 800dea8:	b10b      	cbz	r3, 800deae <__kernel_rem_pio2+0x56a>
 800deaa:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 800deae:	4662      	mov	r2, ip
 800deb0:	463b      	mov	r3, r7
 800deb2:	9904      	ldr	r1, [sp, #16]
 800deb4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800deb8:	e011      	b.n	800dede <__kernel_rem_pio2+0x59a>
 800deba:	2700      	movs	r7, #0
 800debc:	463d      	mov	r5, r7
 800debe:	9b06      	ldr	r3, [sp, #24]
 800dec0:	aa98      	add	r2, sp, #608	; 0x260
 800dec2:	4413      	add	r3, r2
 800dec4:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 800dec8:	2c00      	cmp	r4, #0
 800deca:	da0f      	bge.n	800deec <__kernel_rem_pio2+0x5a8>
 800decc:	9b00      	ldr	r3, [sp, #0]
 800dece:	b10b      	cbz	r3, 800ded4 <__kernel_rem_pio2+0x590>
 800ded0:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 800ded4:	463a      	mov	r2, r7
 800ded6:	462b      	mov	r3, r5
 800ded8:	9904      	ldr	r1, [sp, #16]
 800deda:	e9c1 2300 	strd	r2, r3, [r1]
 800dede:	9b05      	ldr	r3, [sp, #20]
 800dee0:	f003 0007 	and.w	r0, r3, #7
 800dee4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800dee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deec:	4638      	mov	r0, r7
 800deee:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800def2:	4629      	mov	r1, r5
 800def4:	f7f2 f932 	bl	800015c <__adddf3>
 800def8:	3c01      	subs	r4, #1
 800defa:	4607      	mov	r7, r0
 800defc:	460d      	mov	r5, r1
 800defe:	e7e3      	b.n	800dec8 <__kernel_rem_pio2+0x584>
 800df00:	4660      	mov	r0, ip
 800df02:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800df06:	4639      	mov	r1, r7
 800df08:	f7f2 f928 	bl	800015c <__adddf3>
 800df0c:	3e01      	subs	r6, #1
 800df0e:	4684      	mov	ip, r0
 800df10:	460f      	mov	r7, r1
 800df12:	e7b0      	b.n	800de76 <__kernel_rem_pio2+0x532>
 800df14:	4639      	mov	r1, r7
 800df16:	e7b5      	b.n	800de84 <__kernel_rem_pio2+0x540>
 800df18:	4660      	mov	r0, ip
 800df1a:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 800df1e:	4639      	mov	r1, r7
 800df20:	f7f2 f91c 	bl	800015c <__adddf3>
 800df24:	3601      	adds	r6, #1
 800df26:	4684      	mov	ip, r0
 800df28:	460f      	mov	r7, r1
 800df2a:	e7ba      	b.n	800dea2 <__kernel_rem_pio2+0x55e>
 800df2c:	e97a 8902 	ldrd	r8, r9, [sl, #-8]!
 800df30:	e9da 2302 	ldrd	r2, r3, [sl, #8]
 800df34:	4640      	mov	r0, r8
 800df36:	4649      	mov	r1, r9
 800df38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800df3c:	f7f2 f90e 	bl	800015c <__adddf3>
 800df40:	4602      	mov	r2, r0
 800df42:	460b      	mov	r3, r1
 800df44:	4606      	mov	r6, r0
 800df46:	460f      	mov	r7, r1
 800df48:	4640      	mov	r0, r8
 800df4a:	4649      	mov	r1, r9
 800df4c:	f7f2 f904 	bl	8000158 <__aeabi_dsub>
 800df50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800df54:	f7f2 f902 	bl	800015c <__adddf3>
 800df58:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800df5c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800df60:	e9ca 6700 	strd	r6, r7, [sl]
 800df64:	e757      	b.n	800de16 <__kernel_rem_pio2+0x4d2>
 800df66:	e975 6702 	ldrd	r6, r7, [r5, #-8]!
 800df6a:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 800df6e:	4630      	mov	r0, r6
 800df70:	4639      	mov	r1, r7
 800df72:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800df76:	f7f2 f8f1 	bl	800015c <__adddf3>
 800df7a:	4602      	mov	r2, r0
 800df7c:	460b      	mov	r3, r1
 800df7e:	4680      	mov	r8, r0
 800df80:	4689      	mov	r9, r1
 800df82:	4630      	mov	r0, r6
 800df84:	4639      	mov	r1, r7
 800df86:	f7f2 f8e7 	bl	8000158 <__aeabi_dsub>
 800df8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800df8e:	f7f2 f8e5 	bl	800015c <__adddf3>
 800df92:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800df96:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800df9a:	e9c5 8900 	strd	r8, r9, [r5]
 800df9e:	e73f      	b.n	800de20 <__kernel_rem_pio2+0x4dc>
 800dfa0:	4638      	mov	r0, r7
 800dfa2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800dfa6:	4631      	mov	r1, r6
 800dfa8:	f7f2 f8d8 	bl	800015c <__adddf3>
 800dfac:	3c01      	subs	r4, #1
 800dfae:	4607      	mov	r7, r0
 800dfb0:	460e      	mov	r6, r1
 800dfb2:	e73f      	b.n	800de34 <__kernel_rem_pio2+0x4f0>
 800dfb4:	9b04      	ldr	r3, [sp, #16]
 800dfb6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800dfba:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 800dfbe:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 800dfc2:	601d      	str	r5, [r3, #0]
 800dfc4:	e9c3 0401 	strd	r0, r4, [r3, #4]
 800dfc8:	e9c3 1703 	strd	r1, r7, [r3, #12]
 800dfcc:	615e      	str	r6, [r3, #20]
 800dfce:	e786      	b.n	800dede <__kernel_rem_pio2+0x59a>
 800dfd0:	41700000 	.word	0x41700000
 800dfd4:	3e700000 	.word	0x3e700000

0800dfd8 <__kernel_sin>:
 800dfd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfdc:	b086      	sub	sp, #24
 800dfde:	e9cd 2300 	strd	r2, r3, [sp]
 800dfe2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dfe6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800dfea:	4682      	mov	sl, r0
 800dfec:	460c      	mov	r4, r1
 800dfee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 800dff0:	da03      	bge.n	800dffa <__kernel_sin+0x22>
 800dff2:	f7f2 fd19 	bl	8000a28 <__aeabi_d2iz>
 800dff6:	2800      	cmp	r0, #0
 800dff8:	d050      	beq.n	800e09c <__kernel_sin+0xc4>
 800dffa:	4652      	mov	r2, sl
 800dffc:	4623      	mov	r3, r4
 800dffe:	4650      	mov	r0, sl
 800e000:	4621      	mov	r1, r4
 800e002:	f7f2 fa61 	bl	80004c8 <__aeabi_dmul>
 800e006:	4606      	mov	r6, r0
 800e008:	460f      	mov	r7, r1
 800e00a:	4602      	mov	r2, r0
 800e00c:	460b      	mov	r3, r1
 800e00e:	4650      	mov	r0, sl
 800e010:	4621      	mov	r1, r4
 800e012:	f7f2 fa59 	bl	80004c8 <__aeabi_dmul>
 800e016:	a33e      	add	r3, pc, #248	; (adr r3, 800e110 <__kernel_sin+0x138>)
 800e018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01c:	4680      	mov	r8, r0
 800e01e:	4689      	mov	r9, r1
 800e020:	4630      	mov	r0, r6
 800e022:	4639      	mov	r1, r7
 800e024:	f7f2 fa50 	bl	80004c8 <__aeabi_dmul>
 800e028:	a33b      	add	r3, pc, #236	; (adr r3, 800e118 <__kernel_sin+0x140>)
 800e02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e02e:	f7f2 f893 	bl	8000158 <__aeabi_dsub>
 800e032:	4632      	mov	r2, r6
 800e034:	463b      	mov	r3, r7
 800e036:	f7f2 fa47 	bl	80004c8 <__aeabi_dmul>
 800e03a:	a339      	add	r3, pc, #228	; (adr r3, 800e120 <__kernel_sin+0x148>)
 800e03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e040:	f7f2 f88c 	bl	800015c <__adddf3>
 800e044:	4632      	mov	r2, r6
 800e046:	463b      	mov	r3, r7
 800e048:	f7f2 fa3e 	bl	80004c8 <__aeabi_dmul>
 800e04c:	a336      	add	r3, pc, #216	; (adr r3, 800e128 <__kernel_sin+0x150>)
 800e04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e052:	f7f2 f881 	bl	8000158 <__aeabi_dsub>
 800e056:	4632      	mov	r2, r6
 800e058:	463b      	mov	r3, r7
 800e05a:	f7f2 fa35 	bl	80004c8 <__aeabi_dmul>
 800e05e:	a334      	add	r3, pc, #208	; (adr r3, 800e130 <__kernel_sin+0x158>)
 800e060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e064:	f7f2 f87a 	bl	800015c <__adddf3>
 800e068:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e06c:	b9dd      	cbnz	r5, 800e0a6 <__kernel_sin+0xce>
 800e06e:	4602      	mov	r2, r0
 800e070:	460b      	mov	r3, r1
 800e072:	4630      	mov	r0, r6
 800e074:	4639      	mov	r1, r7
 800e076:	f7f2 fa27 	bl	80004c8 <__aeabi_dmul>
 800e07a:	a32f      	add	r3, pc, #188	; (adr r3, 800e138 <__kernel_sin+0x160>)
 800e07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e080:	f7f2 f86a 	bl	8000158 <__aeabi_dsub>
 800e084:	4642      	mov	r2, r8
 800e086:	464b      	mov	r3, r9
 800e088:	f7f2 fa1e 	bl	80004c8 <__aeabi_dmul>
 800e08c:	4602      	mov	r2, r0
 800e08e:	460b      	mov	r3, r1
 800e090:	4650      	mov	r0, sl
 800e092:	4621      	mov	r1, r4
 800e094:	f7f2 f862 	bl	800015c <__adddf3>
 800e098:	4682      	mov	sl, r0
 800e09a:	460c      	mov	r4, r1
 800e09c:	4650      	mov	r0, sl
 800e09e:	4621      	mov	r1, r4
 800e0a0:	b006      	add	sp, #24
 800e0a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e0ac:	4b24      	ldr	r3, [pc, #144]	; (800e140 <__kernel_sin+0x168>)
 800e0ae:	f7f2 fa0b 	bl	80004c8 <__aeabi_dmul>
 800e0b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e0b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e0ba:	4640      	mov	r0, r8
 800e0bc:	4649      	mov	r1, r9
 800e0be:	f7f2 fa03 	bl	80004c8 <__aeabi_dmul>
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	460b      	mov	r3, r1
 800e0c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e0ca:	f7f2 f845 	bl	8000158 <__aeabi_dsub>
 800e0ce:	4632      	mov	r2, r6
 800e0d0:	463b      	mov	r3, r7
 800e0d2:	f7f2 f9f9 	bl	80004c8 <__aeabi_dmul>
 800e0d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0da:	f7f2 f83d 	bl	8000158 <__aeabi_dsub>
 800e0de:	a316      	add	r3, pc, #88	; (adr r3, 800e138 <__kernel_sin+0x160>)
 800e0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e4:	4606      	mov	r6, r0
 800e0e6:	460f      	mov	r7, r1
 800e0e8:	4640      	mov	r0, r8
 800e0ea:	4649      	mov	r1, r9
 800e0ec:	f7f2 f9ec 	bl	80004c8 <__aeabi_dmul>
 800e0f0:	4602      	mov	r2, r0
 800e0f2:	460b      	mov	r3, r1
 800e0f4:	4630      	mov	r0, r6
 800e0f6:	4639      	mov	r1, r7
 800e0f8:	f7f2 f830 	bl	800015c <__adddf3>
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	460b      	mov	r3, r1
 800e100:	4650      	mov	r0, sl
 800e102:	4621      	mov	r1, r4
 800e104:	f7f2 f828 	bl	8000158 <__aeabi_dsub>
 800e108:	e7c6      	b.n	800e098 <__kernel_sin+0xc0>
 800e10a:	bf00      	nop
 800e10c:	f3af 8000 	nop.w
 800e110:	5acfd57c 	.word	0x5acfd57c
 800e114:	3de5d93a 	.word	0x3de5d93a
 800e118:	8a2b9ceb 	.word	0x8a2b9ceb
 800e11c:	3e5ae5e6 	.word	0x3e5ae5e6
 800e120:	57b1fe7d 	.word	0x57b1fe7d
 800e124:	3ec71de3 	.word	0x3ec71de3
 800e128:	19c161d5 	.word	0x19c161d5
 800e12c:	3f2a01a0 	.word	0x3f2a01a0
 800e130:	1110f8a6 	.word	0x1110f8a6
 800e134:	3f811111 	.word	0x3f811111
 800e138:	55555549 	.word	0x55555549
 800e13c:	3fc55555 	.word	0x3fc55555
 800e140:	3fe00000 	.word	0x3fe00000

0800e144 <__kernel_cosf>:
 800e144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e148:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800e14c:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800e150:	4606      	mov	r6, r0
 800e152:	4688      	mov	r8, r1
 800e154:	da03      	bge.n	800e15e <__kernel_cosf+0x1a>
 800e156:	f7f2 ffc9 	bl	80010ec <__aeabi_f2iz>
 800e15a:	2800      	cmp	r0, #0
 800e15c:	d05c      	beq.n	800e218 <__kernel_cosf+0xd4>
 800e15e:	4631      	mov	r1, r6
 800e160:	4630      	mov	r0, r6
 800e162:	f7f2 fde7 	bl	8000d34 <__aeabi_fmul>
 800e166:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e16a:	4605      	mov	r5, r0
 800e16c:	f7f2 fde2 	bl	8000d34 <__aeabi_fmul>
 800e170:	492b      	ldr	r1, [pc, #172]	; (800e220 <__kernel_cosf+0xdc>)
 800e172:	4607      	mov	r7, r0
 800e174:	4628      	mov	r0, r5
 800e176:	f7f2 fddd 	bl	8000d34 <__aeabi_fmul>
 800e17a:	492a      	ldr	r1, [pc, #168]	; (800e224 <__kernel_cosf+0xe0>)
 800e17c:	f7f2 fcd2 	bl	8000b24 <__addsf3>
 800e180:	4629      	mov	r1, r5
 800e182:	f7f2 fdd7 	bl	8000d34 <__aeabi_fmul>
 800e186:	4928      	ldr	r1, [pc, #160]	; (800e228 <__kernel_cosf+0xe4>)
 800e188:	f7f2 fcca 	bl	8000b20 <__aeabi_fsub>
 800e18c:	4629      	mov	r1, r5
 800e18e:	f7f2 fdd1 	bl	8000d34 <__aeabi_fmul>
 800e192:	4926      	ldr	r1, [pc, #152]	; (800e22c <__kernel_cosf+0xe8>)
 800e194:	f7f2 fcc6 	bl	8000b24 <__addsf3>
 800e198:	4629      	mov	r1, r5
 800e19a:	f7f2 fdcb 	bl	8000d34 <__aeabi_fmul>
 800e19e:	4924      	ldr	r1, [pc, #144]	; (800e230 <__kernel_cosf+0xec>)
 800e1a0:	f7f2 fcbe 	bl	8000b20 <__aeabi_fsub>
 800e1a4:	4629      	mov	r1, r5
 800e1a6:	f7f2 fdc5 	bl	8000d34 <__aeabi_fmul>
 800e1aa:	4922      	ldr	r1, [pc, #136]	; (800e234 <__kernel_cosf+0xf0>)
 800e1ac:	f7f2 fcba 	bl	8000b24 <__addsf3>
 800e1b0:	4629      	mov	r1, r5
 800e1b2:	f7f2 fdbf 	bl	8000d34 <__aeabi_fmul>
 800e1b6:	4629      	mov	r1, r5
 800e1b8:	f7f2 fdbc 	bl	8000d34 <__aeabi_fmul>
 800e1bc:	4641      	mov	r1, r8
 800e1be:	4605      	mov	r5, r0
 800e1c0:	4630      	mov	r0, r6
 800e1c2:	f7f2 fdb7 	bl	8000d34 <__aeabi_fmul>
 800e1c6:	4601      	mov	r1, r0
 800e1c8:	4628      	mov	r0, r5
 800e1ca:	f7f2 fca9 	bl	8000b20 <__aeabi_fsub>
 800e1ce:	4b1a      	ldr	r3, [pc, #104]	; (800e238 <__kernel_cosf+0xf4>)
 800e1d0:	4605      	mov	r5, r0
 800e1d2:	429c      	cmp	r4, r3
 800e1d4:	dc0a      	bgt.n	800e1ec <__kernel_cosf+0xa8>
 800e1d6:	4601      	mov	r1, r0
 800e1d8:	4638      	mov	r0, r7
 800e1da:	f7f2 fca1 	bl	8000b20 <__aeabi_fsub>
 800e1de:	4601      	mov	r1, r0
 800e1e0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e1e4:	f7f2 fc9c 	bl	8000b20 <__aeabi_fsub>
 800e1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1ec:	4b13      	ldr	r3, [pc, #76]	; (800e23c <__kernel_cosf+0xf8>)
 800e1ee:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e1f2:	429c      	cmp	r4, r3
 800e1f4:	bfcc      	ite	gt
 800e1f6:	4c12      	ldrgt	r4, [pc, #72]	; (800e240 <__kernel_cosf+0xfc>)
 800e1f8:	f104 447f 	addle.w	r4, r4, #4278190080	; 0xff000000
 800e1fc:	4621      	mov	r1, r4
 800e1fe:	f7f2 fc8f 	bl	8000b20 <__aeabi_fsub>
 800e202:	4621      	mov	r1, r4
 800e204:	4606      	mov	r6, r0
 800e206:	4638      	mov	r0, r7
 800e208:	f7f2 fc8a 	bl	8000b20 <__aeabi_fsub>
 800e20c:	4629      	mov	r1, r5
 800e20e:	f7f2 fc87 	bl	8000b20 <__aeabi_fsub>
 800e212:	4601      	mov	r1, r0
 800e214:	4630      	mov	r0, r6
 800e216:	e7e5      	b.n	800e1e4 <__kernel_cosf+0xa0>
 800e218:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e21c:	e7e4      	b.n	800e1e8 <__kernel_cosf+0xa4>
 800e21e:	bf00      	nop
 800e220:	ad47d74e 	.word	0xad47d74e
 800e224:	310f74f6 	.word	0x310f74f6
 800e228:	3493f27c 	.word	0x3493f27c
 800e22c:	37d00d01 	.word	0x37d00d01
 800e230:	3ab60b61 	.word	0x3ab60b61
 800e234:	3d2aaaab 	.word	0x3d2aaaab
 800e238:	3e999999 	.word	0x3e999999
 800e23c:	3f480000 	.word	0x3f480000
 800e240:	3e900000 	.word	0x3e900000

0800e244 <__kernel_rem_pio2f>:
 800e244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e248:	b0d9      	sub	sp, #356	; 0x164
 800e24a:	9304      	str	r3, [sp, #16]
 800e24c:	9101      	str	r1, [sp, #4]
 800e24e:	4bc3      	ldr	r3, [pc, #780]	; (800e55c <__kernel_rem_pio2f+0x318>)
 800e250:	9962      	ldr	r1, [sp, #392]	; 0x188
 800e252:	1ed4      	subs	r4, r2, #3
 800e254:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e258:	2500      	movs	r5, #0
 800e25a:	9302      	str	r3, [sp, #8]
 800e25c:	9b04      	ldr	r3, [sp, #16]
 800e25e:	f04f 0a00 	mov.w	sl, #0
 800e262:	3b01      	subs	r3, #1
 800e264:	9303      	str	r3, [sp, #12]
 800e266:	2308      	movs	r3, #8
 800e268:	fb94 f4f3 	sdiv	r4, r4, r3
 800e26c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800e270:	1c66      	adds	r6, r4, #1
 800e272:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
 800e276:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800e27a:	eb03 0802 	add.w	r8, r3, r2
 800e27e:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800e280:	1aa7      	subs	r7, r4, r2
 800e282:	9005      	str	r0, [sp, #20]
 800e284:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e288:	f10d 0b70 	add.w	fp, sp, #112	; 0x70
 800e28c:	4545      	cmp	r5, r8
 800e28e:	dd7f      	ble.n	800e390 <__kernel_rem_pio2f+0x14c>
 800e290:	f04f 0800 	mov.w	r8, #0
 800e294:	f04f 0a00 	mov.w	sl, #0
 800e298:	f06f 0b03 	mvn.w	fp, #3
 800e29c:	9b04      	ldr	r3, [sp, #16]
 800e29e:	aa1c      	add	r2, sp, #112	; 0x70
 800e2a0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800e2a4:	ab44      	add	r3, sp, #272	; 0x110
 800e2a6:	9a02      	ldr	r2, [sp, #8]
 800e2a8:	4590      	cmp	r8, r2
 800e2aa:	f340 8097 	ble.w	800e3dc <__kernel_rem_pio2f+0x198>
 800e2ae:	4613      	mov	r3, r2
 800e2b0:	aa08      	add	r2, sp, #32
 800e2b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e2b6:	9307      	str	r3, [sp, #28]
 800e2b8:	9b63      	ldr	r3, [sp, #396]	; 0x18c
 800e2ba:	9f02      	ldr	r7, [sp, #8]
 800e2bc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e2c0:	9306      	str	r3, [sp, #24]
 800e2c2:	46ba      	mov	sl, r7
 800e2c4:	f04f 4887 	mov.w	r8, #1132462080	; 0x43800000
 800e2c8:	ab58      	add	r3, sp, #352	; 0x160
 800e2ca:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 800e2ce:	f853 4c50 	ldr.w	r4, [r3, #-80]
 800e2d2:	ad07      	add	r5, sp, #28
 800e2d4:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800e2d8:	f1ba 0f00 	cmp.w	sl, #0
 800e2dc:	f300 8081 	bgt.w	800e3e2 <__kernel_rem_pio2f+0x19e>
 800e2e0:	4631      	mov	r1, r6
 800e2e2:	4620      	mov	r0, r4
 800e2e4:	f000 ff8a 	bl	800f1fc <scalbnf>
 800e2e8:	f04f 5178 	mov.w	r1, #1040187392	; 0x3e000000
 800e2ec:	4604      	mov	r4, r0
 800e2ee:	f7f2 fd21 	bl	8000d34 <__aeabi_fmul>
 800e2f2:	f000 feef 	bl	800f0d4 <floorf>
 800e2f6:	f04f 4182 	mov.w	r1, #1090519040	; 0x41000000
 800e2fa:	f7f2 fd1b 	bl	8000d34 <__aeabi_fmul>
 800e2fe:	4601      	mov	r1, r0
 800e300:	4620      	mov	r0, r4
 800e302:	f7f2 fc0d 	bl	8000b20 <__aeabi_fsub>
 800e306:	4604      	mov	r4, r0
 800e308:	f7f2 fef0 	bl	80010ec <__aeabi_f2iz>
 800e30c:	4681      	mov	r9, r0
 800e30e:	f7f2 fcbd 	bl	8000c8c <__aeabi_i2f>
 800e312:	4601      	mov	r1, r0
 800e314:	4620      	mov	r0, r4
 800e316:	f7f2 fc03 	bl	8000b20 <__aeabi_fsub>
 800e31a:	2e00      	cmp	r6, #0
 800e31c:	4604      	mov	r4, r0
 800e31e:	dd7e      	ble.n	800e41e <__kernel_rem_pio2f+0x1da>
 800e320:	1e7b      	subs	r3, r7, #1
 800e322:	aa08      	add	r2, sp, #32
 800e324:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800e328:	f1c6 0208 	rsb	r2, r6, #8
 800e32c:	fa45 f002 	asr.w	r0, r5, r2
 800e330:	4481      	add	r9, r0
 800e332:	4090      	lsls	r0, r2
 800e334:	1a2d      	subs	r5, r5, r0
 800e336:	aa08      	add	r2, sp, #32
 800e338:	f1c6 0007 	rsb	r0, r6, #7
 800e33c:	f842 5023 	str.w	r5, [r2, r3, lsl #2]
 800e340:	4105      	asrs	r5, r0
 800e342:	2d00      	cmp	r5, #0
 800e344:	dd79      	ble.n	800e43a <__kernel_rem_pio2f+0x1f6>
 800e346:	2200      	movs	r2, #0
 800e348:	4690      	mov	r8, r2
 800e34a:	f109 0901 	add.w	r9, r9, #1
 800e34e:	4297      	cmp	r7, r2
 800e350:	f300 80ae 	bgt.w	800e4b0 <__kernel_rem_pio2f+0x26c>
 800e354:	2e00      	cmp	r6, #0
 800e356:	dd05      	ble.n	800e364 <__kernel_rem_pio2f+0x120>
 800e358:	2e01      	cmp	r6, #1
 800e35a:	f000 80c0 	beq.w	800e4de <__kernel_rem_pio2f+0x29a>
 800e35e:	2e02      	cmp	r6, #2
 800e360:	f000 80c7 	beq.w	800e4f2 <__kernel_rem_pio2f+0x2ae>
 800e364:	2d02      	cmp	r5, #2
 800e366:	d168      	bne.n	800e43a <__kernel_rem_pio2f+0x1f6>
 800e368:	4621      	mov	r1, r4
 800e36a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e36e:	f7f2 fbd7 	bl	8000b20 <__aeabi_fsub>
 800e372:	4604      	mov	r4, r0
 800e374:	f1b8 0f00 	cmp.w	r8, #0
 800e378:	d05f      	beq.n	800e43a <__kernel_rem_pio2f+0x1f6>
 800e37a:	4631      	mov	r1, r6
 800e37c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e380:	f000 ff3c 	bl	800f1fc <scalbnf>
 800e384:	4601      	mov	r1, r0
 800e386:	4620      	mov	r0, r4
 800e388:	f7f2 fbca 	bl	8000b20 <__aeabi_fsub>
 800e38c:	4604      	mov	r4, r0
 800e38e:	e054      	b.n	800e43a <__kernel_rem_pio2f+0x1f6>
 800e390:	42ef      	cmn	r7, r5
 800e392:	d407      	bmi.n	800e3a4 <__kernel_rem_pio2f+0x160>
 800e394:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e398:	f7f2 fc78 	bl	8000c8c <__aeabi_i2f>
 800e39c:	f84b 0025 	str.w	r0, [fp, r5, lsl #2]
 800e3a0:	3501      	adds	r5, #1
 800e3a2:	e773      	b.n	800e28c <__kernel_rem_pio2f+0x48>
 800e3a4:	4650      	mov	r0, sl
 800e3a6:	e7f9      	b.n	800e39c <__kernel_rem_pio2f+0x158>
 800e3a8:	fb0b 5207 	mla	r2, fp, r7, r5
 800e3ac:	9306      	str	r3, [sp, #24]
 800e3ae:	9b05      	ldr	r3, [sp, #20]
 800e3b0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800e3b4:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 800e3b8:	f7f2 fcbc 	bl	8000d34 <__aeabi_fmul>
 800e3bc:	4601      	mov	r1, r0
 800e3be:	4648      	mov	r0, r9
 800e3c0:	f7f2 fbb0 	bl	8000b24 <__addsf3>
 800e3c4:	4681      	mov	r9, r0
 800e3c6:	9b06      	ldr	r3, [sp, #24]
 800e3c8:	3701      	adds	r7, #1
 800e3ca:	9a03      	ldr	r2, [sp, #12]
 800e3cc:	4297      	cmp	r7, r2
 800e3ce:	ddeb      	ble.n	800e3a8 <__kernel_rem_pio2f+0x164>
 800e3d0:	f843 9028 	str.w	r9, [r3, r8, lsl #2]
 800e3d4:	3504      	adds	r5, #4
 800e3d6:	f108 0801 	add.w	r8, r8, #1
 800e3da:	e764      	b.n	800e2a6 <__kernel_rem_pio2f+0x62>
 800e3dc:	46d1      	mov	r9, sl
 800e3de:	2700      	movs	r7, #0
 800e3e0:	e7f3      	b.n	800e3ca <__kernel_rem_pio2f+0x186>
 800e3e2:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800e3e6:	4620      	mov	r0, r4
 800e3e8:	f7f2 fca4 	bl	8000d34 <__aeabi_fmul>
 800e3ec:	f7f2 fe7e 	bl	80010ec <__aeabi_f2iz>
 800e3f0:	f7f2 fc4c 	bl	8000c8c <__aeabi_i2f>
 800e3f4:	4641      	mov	r1, r8
 800e3f6:	4683      	mov	fp, r0
 800e3f8:	f7f2 fc9c 	bl	8000d34 <__aeabi_fmul>
 800e3fc:	4601      	mov	r1, r0
 800e3fe:	4620      	mov	r0, r4
 800e400:	f7f2 fb8e 	bl	8000b20 <__aeabi_fsub>
 800e404:	f7f2 fe72 	bl	80010ec <__aeabi_f2iz>
 800e408:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e40c:	f845 0f04 	str.w	r0, [r5, #4]!
 800e410:	f859 102a 	ldr.w	r1, [r9, sl, lsl #2]
 800e414:	4658      	mov	r0, fp
 800e416:	f7f2 fb85 	bl	8000b24 <__addsf3>
 800e41a:	4604      	mov	r4, r0
 800e41c:	e75c      	b.n	800e2d8 <__kernel_rem_pio2f+0x94>
 800e41e:	d105      	bne.n	800e42c <__kernel_rem_pio2f+0x1e8>
 800e420:	1e7b      	subs	r3, r7, #1
 800e422:	aa08      	add	r2, sp, #32
 800e424:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800e428:	122d      	asrs	r5, r5, #8
 800e42a:	e78a      	b.n	800e342 <__kernel_rem_pio2f+0xfe>
 800e42c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e430:	f7f2 fe32 	bl	8001098 <__aeabi_fcmpge>
 800e434:	2800      	cmp	r0, #0
 800e436:	d139      	bne.n	800e4ac <__kernel_rem_pio2f+0x268>
 800e438:	4605      	mov	r5, r0
 800e43a:	2100      	movs	r1, #0
 800e43c:	4620      	mov	r0, r4
 800e43e:	f7f2 fe0d 	bl	800105c <__aeabi_fcmpeq>
 800e442:	2800      	cmp	r0, #0
 800e444:	f000 80a0 	beq.w	800e588 <__kernel_rem_pio2f+0x344>
 800e448:	1e7c      	subs	r4, r7, #1
 800e44a:	4623      	mov	r3, r4
 800e44c:	2200      	movs	r2, #0
 800e44e:	9902      	ldr	r1, [sp, #8]
 800e450:	428b      	cmp	r3, r1
 800e452:	da55      	bge.n	800e500 <__kernel_rem_pio2f+0x2bc>
 800e454:	2a00      	cmp	r2, #0
 800e456:	d07e      	beq.n	800e556 <__kernel_rem_pio2f+0x312>
 800e458:	ab08      	add	r3, sp, #32
 800e45a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e45e:	3e08      	subs	r6, #8
 800e460:	2b00      	cmp	r3, #0
 800e462:	f000 808f 	beq.w	800e584 <__kernel_rem_pio2f+0x340>
 800e466:	4631      	mov	r1, r6
 800e468:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800e46c:	f000 fec6 	bl	800f1fc <scalbnf>
 800e470:	46a0      	mov	r8, r4
 800e472:	4682      	mov	sl, r0
 800e474:	f04f 566e 	mov.w	r6, #998244352	; 0x3b800000
 800e478:	af44      	add	r7, sp, #272	; 0x110
 800e47a:	f1b8 0f00 	cmp.w	r8, #0
 800e47e:	f280 80b5 	bge.w	800e5ec <__kernel_rem_pio2f+0x3a8>
 800e482:	f04f 0a00 	mov.w	sl, #0
 800e486:	2300      	movs	r3, #0
 800e488:	00a6      	lsls	r6, r4, #2
 800e48a:	4a35      	ldr	r2, [pc, #212]	; (800e560 <__kernel_rem_pio2f+0x31c>)
 800e48c:	4437      	add	r7, r6
 800e48e:	eba4 010a 	sub.w	r1, r4, sl
 800e492:	2900      	cmp	r1, #0
 800e494:	f280 80db 	bge.w	800e64e <__kernel_rem_pio2f+0x40a>
 800e498:	9b62      	ldr	r3, [sp, #392]	; 0x188
 800e49a:	2b03      	cmp	r3, #3
 800e49c:	f200 80ff 	bhi.w	800e69e <__kernel_rem_pio2f+0x45a>
 800e4a0:	e8df f013 	tbh	[pc, r3, lsl #1]
 800e4a4:	01200102 	.word	0x01200102
 800e4a8:	00d90120 	.word	0x00d90120
 800e4ac:	2502      	movs	r5, #2
 800e4ae:	e74a      	b.n	800e346 <__kernel_rem_pio2f+0x102>
 800e4b0:	ab08      	add	r3, sp, #32
 800e4b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4b6:	f1b8 0f00 	cmp.w	r8, #0
 800e4ba:	d109      	bne.n	800e4d0 <__kernel_rem_pio2f+0x28c>
 800e4bc:	b12b      	cbz	r3, 800e4ca <__kernel_rem_pio2f+0x286>
 800e4be:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800e4c2:	a908      	add	r1, sp, #32
 800e4c4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	3201      	adds	r2, #1
 800e4cc:	4698      	mov	r8, r3
 800e4ce:	e73e      	b.n	800e34e <__kernel_rem_pio2f+0x10a>
 800e4d0:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800e4d4:	a908      	add	r1, sp, #32
 800e4d6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e4da:	4643      	mov	r3, r8
 800e4dc:	e7f5      	b.n	800e4ca <__kernel_rem_pio2f+0x286>
 800e4de:	1e7a      	subs	r2, r7, #1
 800e4e0:	ab08      	add	r3, sp, #32
 800e4e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4ea:	a908      	add	r1, sp, #32
 800e4ec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e4f0:	e738      	b.n	800e364 <__kernel_rem_pio2f+0x120>
 800e4f2:	1e7a      	subs	r2, r7, #1
 800e4f4:	ab08      	add	r3, sp, #32
 800e4f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e4fe:	e7f4      	b.n	800e4ea <__kernel_rem_pio2f+0x2a6>
 800e500:	a908      	add	r1, sp, #32
 800e502:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e506:	3b01      	subs	r3, #1
 800e508:	430a      	orrs	r2, r1
 800e50a:	e7a0      	b.n	800e44e <__kernel_rem_pio2f+0x20a>
 800e50c:	3301      	adds	r3, #1
 800e50e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e512:	2900      	cmp	r1, #0
 800e514:	d0fa      	beq.n	800e50c <__kernel_rem_pio2f+0x2c8>
 800e516:	f06f 0803 	mvn.w	r8, #3
 800e51a:	9a04      	ldr	r2, [sp, #16]
 800e51c:	1c7d      	adds	r5, r7, #1
 800e51e:	18bc      	adds	r4, r7, r2
 800e520:	aa1c      	add	r2, sp, #112	; 0x70
 800e522:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800e526:	441f      	add	r7, r3
 800e528:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 800e52c:	42af      	cmp	r7, r5
 800e52e:	f6ff aec8 	blt.w	800e2c2 <__kernel_rem_pio2f+0x7e>
 800e532:	9b06      	ldr	r3, [sp, #24]
 800e534:	f04f 0a00 	mov.w	sl, #0
 800e538:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e53c:	f7f2 fba6 	bl	8000c8c <__aeabi_i2f>
 800e540:	f04f 0b00 	mov.w	fp, #0
 800e544:	6020      	str	r0, [r4, #0]
 800e546:	9b03      	ldr	r3, [sp, #12]
 800e548:	459a      	cmp	sl, r3
 800e54a:	dd0b      	ble.n	800e564 <__kernel_rem_pio2f+0x320>
 800e54c:	f849 b025 	str.w	fp, [r9, r5, lsl #2]
 800e550:	3404      	adds	r4, #4
 800e552:	3501      	adds	r5, #1
 800e554:	e7ea      	b.n	800e52c <__kernel_rem_pio2f+0x2e8>
 800e556:	9a07      	ldr	r2, [sp, #28]
 800e558:	2301      	movs	r3, #1
 800e55a:	e7d8      	b.n	800e50e <__kernel_rem_pio2f+0x2ca>
 800e55c:	0800f954 	.word	0x0800f954
 800e560:	0800f928 	.word	0x0800f928
 800e564:	fb08 f30a 	mul.w	r3, r8, sl
 800e568:	9a05      	ldr	r2, [sp, #20]
 800e56a:	58e0      	ldr	r0, [r4, r3]
 800e56c:	f852 102a 	ldr.w	r1, [r2, sl, lsl #2]
 800e570:	f7f2 fbe0 	bl	8000d34 <__aeabi_fmul>
 800e574:	4601      	mov	r1, r0
 800e576:	4658      	mov	r0, fp
 800e578:	f7f2 fad4 	bl	8000b24 <__addsf3>
 800e57c:	f10a 0a01 	add.w	sl, sl, #1
 800e580:	4683      	mov	fp, r0
 800e582:	e7e0      	b.n	800e546 <__kernel_rem_pio2f+0x302>
 800e584:	3c01      	subs	r4, #1
 800e586:	e767      	b.n	800e458 <__kernel_rem_pio2f+0x214>
 800e588:	4271      	negs	r1, r6
 800e58a:	4620      	mov	r0, r4
 800e58c:	f000 fe36 	bl	800f1fc <scalbnf>
 800e590:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e594:	4604      	mov	r4, r0
 800e596:	f7f2 fd7f 	bl	8001098 <__aeabi_fcmpge>
 800e59a:	b1f8      	cbz	r0, 800e5dc <__kernel_rem_pio2f+0x398>
 800e59c:	f04f 516e 	mov.w	r1, #998244352	; 0x3b800000
 800e5a0:	4620      	mov	r0, r4
 800e5a2:	f7f2 fbc7 	bl	8000d34 <__aeabi_fmul>
 800e5a6:	f7f2 fda1 	bl	80010ec <__aeabi_f2iz>
 800e5aa:	f7f2 fb6f 	bl	8000c8c <__aeabi_i2f>
 800e5ae:	f04f 4187 	mov.w	r1, #1132462080	; 0x43800000
 800e5b2:	4680      	mov	r8, r0
 800e5b4:	f7f2 fbbe 	bl	8000d34 <__aeabi_fmul>
 800e5b8:	4601      	mov	r1, r0
 800e5ba:	4620      	mov	r0, r4
 800e5bc:	f7f2 fab0 	bl	8000b20 <__aeabi_fsub>
 800e5c0:	f7f2 fd94 	bl	80010ec <__aeabi_f2iz>
 800e5c4:	ab08      	add	r3, sp, #32
 800e5c6:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800e5ca:	4640      	mov	r0, r8
 800e5cc:	f7f2 fd8e 	bl	80010ec <__aeabi_f2iz>
 800e5d0:	1c7c      	adds	r4, r7, #1
 800e5d2:	ab08      	add	r3, sp, #32
 800e5d4:	3608      	adds	r6, #8
 800e5d6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e5da:	e744      	b.n	800e466 <__kernel_rem_pio2f+0x222>
 800e5dc:	4620      	mov	r0, r4
 800e5de:	f7f2 fd85 	bl	80010ec <__aeabi_f2iz>
 800e5e2:	ab08      	add	r3, sp, #32
 800e5e4:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800e5e8:	463c      	mov	r4, r7
 800e5ea:	e73c      	b.n	800e466 <__kernel_rem_pio2f+0x222>
 800e5ec:	ab08      	add	r3, sp, #32
 800e5ee:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800e5f2:	f7f2 fb4b 	bl	8000c8c <__aeabi_i2f>
 800e5f6:	4651      	mov	r1, sl
 800e5f8:	f7f2 fb9c 	bl	8000d34 <__aeabi_fmul>
 800e5fc:	4631      	mov	r1, r6
 800e5fe:	f847 0028 	str.w	r0, [r7, r8, lsl #2]
 800e602:	4650      	mov	r0, sl
 800e604:	f7f2 fb96 	bl	8000d34 <__aeabi_fmul>
 800e608:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e60c:	4682      	mov	sl, r0
 800e60e:	e734      	b.n	800e47a <__kernel_rem_pio2f+0x236>
 800e610:	f852 0028 	ldr.w	r0, [r2, r8, lsl #2]
 800e614:	f857 1028 	ldr.w	r1, [r7, r8, lsl #2]
 800e618:	9304      	str	r3, [sp, #16]
 800e61a:	9203      	str	r2, [sp, #12]
 800e61c:	f7f2 fb8a 	bl	8000d34 <__aeabi_fmul>
 800e620:	4601      	mov	r1, r0
 800e622:	4658      	mov	r0, fp
 800e624:	f7f2 fa7e 	bl	8000b24 <__addsf3>
 800e628:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 800e62c:	4683      	mov	fp, r0
 800e62e:	f108 0801 	add.w	r8, r8, #1
 800e632:	9902      	ldr	r1, [sp, #8]
 800e634:	4588      	cmp	r8, r1
 800e636:	dc01      	bgt.n	800e63c <__kernel_rem_pio2f+0x3f8>
 800e638:	45c2      	cmp	sl, r8
 800e63a:	dae9      	bge.n	800e610 <__kernel_rem_pio2f+0x3cc>
 800e63c:	a958      	add	r1, sp, #352	; 0x160
 800e63e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e642:	f841 bca0 	str.w	fp, [r1, #-160]
 800e646:	f10a 0a01 	add.w	sl, sl, #1
 800e64a:	3f04      	subs	r7, #4
 800e64c:	e71f      	b.n	800e48e <__kernel_rem_pio2f+0x24a>
 800e64e:	469b      	mov	fp, r3
 800e650:	f04f 0800 	mov.w	r8, #0
 800e654:	e7ed      	b.n	800e632 <__kernel_rem_pio2f+0x3ee>
 800e656:	f10d 0ac0 	add.w	sl, sp, #192	; 0xc0
 800e65a:	4456      	add	r6, sl
 800e65c:	4637      	mov	r7, r6
 800e65e:	46a0      	mov	r8, r4
 800e660:	f1b8 0f00 	cmp.w	r8, #0
 800e664:	dc4a      	bgt.n	800e6fc <__kernel_rem_pio2f+0x4b8>
 800e666:	4627      	mov	r7, r4
 800e668:	2f01      	cmp	r7, #1
 800e66a:	dc60      	bgt.n	800e72e <__kernel_rem_pio2f+0x4ea>
 800e66c:	2000      	movs	r0, #0
 800e66e:	2c01      	cmp	r4, #1
 800e670:	dc74      	bgt.n	800e75c <__kernel_rem_pio2f+0x518>
 800e672:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800e674:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800e676:	2d00      	cmp	r5, #0
 800e678:	d176      	bne.n	800e768 <__kernel_rem_pio2f+0x524>
 800e67a:	9901      	ldr	r1, [sp, #4]
 800e67c:	600a      	str	r2, [r1, #0]
 800e67e:	460a      	mov	r2, r1
 800e680:	604b      	str	r3, [r1, #4]
 800e682:	6090      	str	r0, [r2, #8]
 800e684:	e00b      	b.n	800e69e <__kernel_rem_pio2f+0x45a>
 800e686:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 800e68a:	f7f2 fa4b 	bl	8000b24 <__addsf3>
 800e68e:	3c01      	subs	r4, #1
 800e690:	2c00      	cmp	r4, #0
 800e692:	daf8      	bge.n	800e686 <__kernel_rem_pio2f+0x442>
 800e694:	b10d      	cbz	r5, 800e69a <__kernel_rem_pio2f+0x456>
 800e696:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e69a:	9b01      	ldr	r3, [sp, #4]
 800e69c:	6018      	str	r0, [r3, #0]
 800e69e:	f009 0007 	and.w	r0, r9, #7
 800e6a2:	b059      	add	sp, #356	; 0x164
 800e6a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6a8:	2000      	movs	r0, #0
 800e6aa:	ae30      	add	r6, sp, #192	; 0xc0
 800e6ac:	e7f0      	b.n	800e690 <__kernel_rem_pio2f+0x44c>
 800e6ae:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800e6b2:	f7f2 fa37 	bl	8000b24 <__addsf3>
 800e6b6:	3e01      	subs	r6, #1
 800e6b8:	2e00      	cmp	r6, #0
 800e6ba:	daf8      	bge.n	800e6ae <__kernel_rem_pio2f+0x46a>
 800e6bc:	b1b5      	cbz	r5, 800e6ec <__kernel_rem_pio2f+0x4a8>
 800e6be:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
 800e6c2:	9a01      	ldr	r2, [sp, #4]
 800e6c4:	af58      	add	r7, sp, #352	; 0x160
 800e6c6:	4601      	mov	r1, r0
 800e6c8:	6013      	str	r3, [r2, #0]
 800e6ca:	f857 0da0 	ldr.w	r0, [r7, #-160]!
 800e6ce:	f7f2 fa27 	bl	8000b20 <__aeabi_fsub>
 800e6d2:	2601      	movs	r6, #1
 800e6d4:	42b4      	cmp	r4, r6
 800e6d6:	da0b      	bge.n	800e6f0 <__kernel_rem_pio2f+0x4ac>
 800e6d8:	b10d      	cbz	r5, 800e6de <__kernel_rem_pio2f+0x49a>
 800e6da:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e6de:	9b01      	ldr	r3, [sp, #4]
 800e6e0:	6058      	str	r0, [r3, #4]
 800e6e2:	e7dc      	b.n	800e69e <__kernel_rem_pio2f+0x45a>
 800e6e4:	4626      	mov	r6, r4
 800e6e6:	2000      	movs	r0, #0
 800e6e8:	af30      	add	r7, sp, #192	; 0xc0
 800e6ea:	e7e5      	b.n	800e6b8 <__kernel_rem_pio2f+0x474>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	e7e8      	b.n	800e6c2 <__kernel_rem_pio2f+0x47e>
 800e6f0:	f857 1026 	ldr.w	r1, [r7, r6, lsl #2]
 800e6f4:	f7f2 fa16 	bl	8000b24 <__addsf3>
 800e6f8:	3601      	adds	r6, #1
 800e6fa:	e7eb      	b.n	800e6d4 <__kernel_rem_pio2f+0x490>
 800e6fc:	f857 2d04 	ldr.w	r2, [r7, #-4]!
 800e700:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	4610      	mov	r0, r2
 800e708:	4619      	mov	r1, r3
 800e70a:	9303      	str	r3, [sp, #12]
 800e70c:	9202      	str	r2, [sp, #8]
 800e70e:	f7f2 fa09 	bl	8000b24 <__addsf3>
 800e712:	9a02      	ldr	r2, [sp, #8]
 800e714:	4601      	mov	r1, r0
 800e716:	4683      	mov	fp, r0
 800e718:	4610      	mov	r0, r2
 800e71a:	f7f2 fa01 	bl	8000b20 <__aeabi_fsub>
 800e71e:	9b03      	ldr	r3, [sp, #12]
 800e720:	4619      	mov	r1, r3
 800e722:	f7f2 f9ff 	bl	8000b24 <__addsf3>
 800e726:	f8c7 b000 	str.w	fp, [r7]
 800e72a:	6078      	str	r0, [r7, #4]
 800e72c:	e798      	b.n	800e660 <__kernel_rem_pio2f+0x41c>
 800e72e:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 800e732:	3f01      	subs	r7, #1
 800e734:	f8d6 b004 	ldr.w	fp, [r6, #4]
 800e738:	4618      	mov	r0, r3
 800e73a:	4659      	mov	r1, fp
 800e73c:	9302      	str	r3, [sp, #8]
 800e73e:	f7f2 f9f1 	bl	8000b24 <__addsf3>
 800e742:	9b02      	ldr	r3, [sp, #8]
 800e744:	4601      	mov	r1, r0
 800e746:	4680      	mov	r8, r0
 800e748:	4618      	mov	r0, r3
 800e74a:	f7f2 f9e9 	bl	8000b20 <__aeabi_fsub>
 800e74e:	4659      	mov	r1, fp
 800e750:	f7f2 f9e8 	bl	8000b24 <__addsf3>
 800e754:	f8c6 8000 	str.w	r8, [r6]
 800e758:	6070      	str	r0, [r6, #4]
 800e75a:	e785      	b.n	800e668 <__kernel_rem_pio2f+0x424>
 800e75c:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 800e760:	f7f2 f9e0 	bl	8000b24 <__addsf3>
 800e764:	3c01      	subs	r4, #1
 800e766:	e782      	b.n	800e66e <__kernel_rem_pio2f+0x42a>
 800e768:	9901      	ldr	r1, [sp, #4]
 800e76a:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 800e76e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e772:	600a      	str	r2, [r1, #0]
 800e774:	604b      	str	r3, [r1, #4]
 800e776:	460a      	mov	r2, r1
 800e778:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 800e77c:	e781      	b.n	800e682 <__kernel_rem_pio2f+0x43e>
 800e77e:	bf00      	nop

0800e780 <__kernel_sinf>:
 800e780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e784:	f020 4300 	bic.w	r3, r0, #2147483648	; 0x80000000
 800e788:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800e78c:	4604      	mov	r4, r0
 800e78e:	460f      	mov	r7, r1
 800e790:	4691      	mov	r9, r2
 800e792:	da03      	bge.n	800e79c <__kernel_sinf+0x1c>
 800e794:	f7f2 fcaa 	bl	80010ec <__aeabi_f2iz>
 800e798:	2800      	cmp	r0, #0
 800e79a:	d035      	beq.n	800e808 <__kernel_sinf+0x88>
 800e79c:	4621      	mov	r1, r4
 800e79e:	4620      	mov	r0, r4
 800e7a0:	f7f2 fac8 	bl	8000d34 <__aeabi_fmul>
 800e7a4:	4605      	mov	r5, r0
 800e7a6:	4601      	mov	r1, r0
 800e7a8:	4620      	mov	r0, r4
 800e7aa:	f7f2 fac3 	bl	8000d34 <__aeabi_fmul>
 800e7ae:	4929      	ldr	r1, [pc, #164]	; (800e854 <__kernel_sinf+0xd4>)
 800e7b0:	4606      	mov	r6, r0
 800e7b2:	4628      	mov	r0, r5
 800e7b4:	f7f2 fabe 	bl	8000d34 <__aeabi_fmul>
 800e7b8:	4927      	ldr	r1, [pc, #156]	; (800e858 <__kernel_sinf+0xd8>)
 800e7ba:	f7f2 f9b1 	bl	8000b20 <__aeabi_fsub>
 800e7be:	4629      	mov	r1, r5
 800e7c0:	f7f2 fab8 	bl	8000d34 <__aeabi_fmul>
 800e7c4:	4925      	ldr	r1, [pc, #148]	; (800e85c <__kernel_sinf+0xdc>)
 800e7c6:	f7f2 f9ad 	bl	8000b24 <__addsf3>
 800e7ca:	4629      	mov	r1, r5
 800e7cc:	f7f2 fab2 	bl	8000d34 <__aeabi_fmul>
 800e7d0:	4923      	ldr	r1, [pc, #140]	; (800e860 <__kernel_sinf+0xe0>)
 800e7d2:	f7f2 f9a5 	bl	8000b20 <__aeabi_fsub>
 800e7d6:	4629      	mov	r1, r5
 800e7d8:	f7f2 faac 	bl	8000d34 <__aeabi_fmul>
 800e7dc:	4921      	ldr	r1, [pc, #132]	; (800e864 <__kernel_sinf+0xe4>)
 800e7de:	f7f2 f9a1 	bl	8000b24 <__addsf3>
 800e7e2:	4680      	mov	r8, r0
 800e7e4:	f1b9 0f00 	cmp.w	r9, #0
 800e7e8:	d111      	bne.n	800e80e <__kernel_sinf+0x8e>
 800e7ea:	4601      	mov	r1, r0
 800e7ec:	4628      	mov	r0, r5
 800e7ee:	f7f2 faa1 	bl	8000d34 <__aeabi_fmul>
 800e7f2:	491d      	ldr	r1, [pc, #116]	; (800e868 <__kernel_sinf+0xe8>)
 800e7f4:	f7f2 f994 	bl	8000b20 <__aeabi_fsub>
 800e7f8:	4631      	mov	r1, r6
 800e7fa:	f7f2 fa9b 	bl	8000d34 <__aeabi_fmul>
 800e7fe:	4601      	mov	r1, r0
 800e800:	4620      	mov	r0, r4
 800e802:	f7f2 f98f 	bl	8000b24 <__addsf3>
 800e806:	4604      	mov	r4, r0
 800e808:	4620      	mov	r0, r4
 800e80a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e80e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 800e812:	4638      	mov	r0, r7
 800e814:	f7f2 fa8e 	bl	8000d34 <__aeabi_fmul>
 800e818:	4641      	mov	r1, r8
 800e81a:	4681      	mov	r9, r0
 800e81c:	4630      	mov	r0, r6
 800e81e:	f7f2 fa89 	bl	8000d34 <__aeabi_fmul>
 800e822:	4601      	mov	r1, r0
 800e824:	4648      	mov	r0, r9
 800e826:	f7f2 f97b 	bl	8000b20 <__aeabi_fsub>
 800e82a:	4629      	mov	r1, r5
 800e82c:	f7f2 fa82 	bl	8000d34 <__aeabi_fmul>
 800e830:	4639      	mov	r1, r7
 800e832:	f7f2 f975 	bl	8000b20 <__aeabi_fsub>
 800e836:	490c      	ldr	r1, [pc, #48]	; (800e868 <__kernel_sinf+0xe8>)
 800e838:	4605      	mov	r5, r0
 800e83a:	4630      	mov	r0, r6
 800e83c:	f7f2 fa7a 	bl	8000d34 <__aeabi_fmul>
 800e840:	4601      	mov	r1, r0
 800e842:	4628      	mov	r0, r5
 800e844:	f7f2 f96e 	bl	8000b24 <__addsf3>
 800e848:	4601      	mov	r1, r0
 800e84a:	4620      	mov	r0, r4
 800e84c:	f7f2 f968 	bl	8000b20 <__aeabi_fsub>
 800e850:	e7d9      	b.n	800e806 <__kernel_sinf+0x86>
 800e852:	bf00      	nop
 800e854:	2f2ec9d3 	.word	0x2f2ec9d3
 800e858:	32d72f34 	.word	0x32d72f34
 800e85c:	3638ef1b 	.word	0x3638ef1b
 800e860:	39500d01 	.word	0x39500d01
 800e864:	3c088889 	.word	0x3c088889
 800e868:	3e2aaaab 	.word	0x3e2aaaab
 800e86c:	00000000 	.word	0x00000000

0800e870 <atan>:
 800e870:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e874:	4bb6      	ldr	r3, [pc, #728]	; (800eb50 <atan+0x2e0>)
 800e876:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800e87a:	429e      	cmp	r6, r3
 800e87c:	4604      	mov	r4, r0
 800e87e:	460d      	mov	r5, r1
 800e880:	468b      	mov	fp, r1
 800e882:	dd17      	ble.n	800e8b4 <atan+0x44>
 800e884:	4bb3      	ldr	r3, [pc, #716]	; (800eb54 <atan+0x2e4>)
 800e886:	429e      	cmp	r6, r3
 800e888:	dc01      	bgt.n	800e88e <atan+0x1e>
 800e88a:	d109      	bne.n	800e8a0 <atan+0x30>
 800e88c:	b140      	cbz	r0, 800e8a0 <atan+0x30>
 800e88e:	4622      	mov	r2, r4
 800e890:	462b      	mov	r3, r5
 800e892:	4620      	mov	r0, r4
 800e894:	4629      	mov	r1, r5
 800e896:	f7f1 fc61 	bl	800015c <__adddf3>
 800e89a:	4604      	mov	r4, r0
 800e89c:	460d      	mov	r5, r1
 800e89e:	e005      	b.n	800e8ac <atan+0x3c>
 800e8a0:	f1bb 0f00 	cmp.w	fp, #0
 800e8a4:	4cac      	ldr	r4, [pc, #688]	; (800eb58 <atan+0x2e8>)
 800e8a6:	f340 8121 	ble.w	800eaec <atan+0x27c>
 800e8aa:	4dac      	ldr	r5, [pc, #688]	; (800eb5c <atan+0x2ec>)
 800e8ac:	4620      	mov	r0, r4
 800e8ae:	4629      	mov	r1, r5
 800e8b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8b4:	4baa      	ldr	r3, [pc, #680]	; (800eb60 <atan+0x2f0>)
 800e8b6:	429e      	cmp	r6, r3
 800e8b8:	dc11      	bgt.n	800e8de <atan+0x6e>
 800e8ba:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800e8be:	429e      	cmp	r6, r3
 800e8c0:	dc0a      	bgt.n	800e8d8 <atan+0x68>
 800e8c2:	a38b      	add	r3, pc, #556	; (adr r3, 800eaf0 <atan+0x280>)
 800e8c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c8:	f7f1 fc48 	bl	800015c <__adddf3>
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	4ba5      	ldr	r3, [pc, #660]	; (800eb64 <atan+0x2f4>)
 800e8d0:	f7f2 f88a 	bl	80009e8 <__aeabi_dcmpgt>
 800e8d4:	2800      	cmp	r0, #0
 800e8d6:	d1e9      	bne.n	800e8ac <atan+0x3c>
 800e8d8:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800e8dc:	e027      	b.n	800e92e <atan+0xbe>
 800e8de:	f000 f951 	bl	800eb84 <fabs>
 800e8e2:	4ba1      	ldr	r3, [pc, #644]	; (800eb68 <atan+0x2f8>)
 800e8e4:	4604      	mov	r4, r0
 800e8e6:	429e      	cmp	r6, r3
 800e8e8:	460d      	mov	r5, r1
 800e8ea:	f300 80b8 	bgt.w	800ea5e <atan+0x1ee>
 800e8ee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800e8f2:	429e      	cmp	r6, r3
 800e8f4:	f300 809c 	bgt.w	800ea30 <atan+0x1c0>
 800e8f8:	4602      	mov	r2, r0
 800e8fa:	460b      	mov	r3, r1
 800e8fc:	f7f1 fc2e 	bl	800015c <__adddf3>
 800e900:	2200      	movs	r2, #0
 800e902:	4b98      	ldr	r3, [pc, #608]	; (800eb64 <atan+0x2f4>)
 800e904:	f7f1 fc28 	bl	8000158 <__aeabi_dsub>
 800e908:	2200      	movs	r2, #0
 800e90a:	4606      	mov	r6, r0
 800e90c:	460f      	mov	r7, r1
 800e90e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e912:	4620      	mov	r0, r4
 800e914:	4629      	mov	r1, r5
 800e916:	f7f1 fc21 	bl	800015c <__adddf3>
 800e91a:	4602      	mov	r2, r0
 800e91c:	460b      	mov	r3, r1
 800e91e:	4630      	mov	r0, r6
 800e920:	4639      	mov	r1, r7
 800e922:	f7f1 fefb 	bl	800071c <__aeabi_ddiv>
 800e926:	f04f 0a00 	mov.w	sl, #0
 800e92a:	4604      	mov	r4, r0
 800e92c:	460d      	mov	r5, r1
 800e92e:	4622      	mov	r2, r4
 800e930:	462b      	mov	r3, r5
 800e932:	4620      	mov	r0, r4
 800e934:	4629      	mov	r1, r5
 800e936:	f7f1 fdc7 	bl	80004c8 <__aeabi_dmul>
 800e93a:	4602      	mov	r2, r0
 800e93c:	460b      	mov	r3, r1
 800e93e:	4680      	mov	r8, r0
 800e940:	4689      	mov	r9, r1
 800e942:	f7f1 fdc1 	bl	80004c8 <__aeabi_dmul>
 800e946:	a36c      	add	r3, pc, #432	; (adr r3, 800eaf8 <atan+0x288>)
 800e948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e94c:	4606      	mov	r6, r0
 800e94e:	460f      	mov	r7, r1
 800e950:	f7f1 fdba 	bl	80004c8 <__aeabi_dmul>
 800e954:	a36a      	add	r3, pc, #424	; (adr r3, 800eb00 <atan+0x290>)
 800e956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e95a:	f7f1 fbff 	bl	800015c <__adddf3>
 800e95e:	4632      	mov	r2, r6
 800e960:	463b      	mov	r3, r7
 800e962:	f7f1 fdb1 	bl	80004c8 <__aeabi_dmul>
 800e966:	a368      	add	r3, pc, #416	; (adr r3, 800eb08 <atan+0x298>)
 800e968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e96c:	f7f1 fbf6 	bl	800015c <__adddf3>
 800e970:	4632      	mov	r2, r6
 800e972:	463b      	mov	r3, r7
 800e974:	f7f1 fda8 	bl	80004c8 <__aeabi_dmul>
 800e978:	a365      	add	r3, pc, #404	; (adr r3, 800eb10 <atan+0x2a0>)
 800e97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e97e:	f7f1 fbed 	bl	800015c <__adddf3>
 800e982:	4632      	mov	r2, r6
 800e984:	463b      	mov	r3, r7
 800e986:	f7f1 fd9f 	bl	80004c8 <__aeabi_dmul>
 800e98a:	a363      	add	r3, pc, #396	; (adr r3, 800eb18 <atan+0x2a8>)
 800e98c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e990:	f7f1 fbe4 	bl	800015c <__adddf3>
 800e994:	4632      	mov	r2, r6
 800e996:	463b      	mov	r3, r7
 800e998:	f7f1 fd96 	bl	80004c8 <__aeabi_dmul>
 800e99c:	a360      	add	r3, pc, #384	; (adr r3, 800eb20 <atan+0x2b0>)
 800e99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a2:	f7f1 fbdb 	bl	800015c <__adddf3>
 800e9a6:	4642      	mov	r2, r8
 800e9a8:	464b      	mov	r3, r9
 800e9aa:	f7f1 fd8d 	bl	80004c8 <__aeabi_dmul>
 800e9ae:	a35e      	add	r3, pc, #376	; (adr r3, 800eb28 <atan+0x2b8>)
 800e9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b4:	4680      	mov	r8, r0
 800e9b6:	4689      	mov	r9, r1
 800e9b8:	4630      	mov	r0, r6
 800e9ba:	4639      	mov	r1, r7
 800e9bc:	f7f1 fd84 	bl	80004c8 <__aeabi_dmul>
 800e9c0:	a35b      	add	r3, pc, #364	; (adr r3, 800eb30 <atan+0x2c0>)
 800e9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c6:	f7f1 fbc7 	bl	8000158 <__aeabi_dsub>
 800e9ca:	4632      	mov	r2, r6
 800e9cc:	463b      	mov	r3, r7
 800e9ce:	f7f1 fd7b 	bl	80004c8 <__aeabi_dmul>
 800e9d2:	a359      	add	r3, pc, #356	; (adr r3, 800eb38 <atan+0x2c8>)
 800e9d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d8:	f7f1 fbbe 	bl	8000158 <__aeabi_dsub>
 800e9dc:	4632      	mov	r2, r6
 800e9de:	463b      	mov	r3, r7
 800e9e0:	f7f1 fd72 	bl	80004c8 <__aeabi_dmul>
 800e9e4:	a356      	add	r3, pc, #344	; (adr r3, 800eb40 <atan+0x2d0>)
 800e9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ea:	f7f1 fbb5 	bl	8000158 <__aeabi_dsub>
 800e9ee:	4632      	mov	r2, r6
 800e9f0:	463b      	mov	r3, r7
 800e9f2:	f7f1 fd69 	bl	80004c8 <__aeabi_dmul>
 800e9f6:	a354      	add	r3, pc, #336	; (adr r3, 800eb48 <atan+0x2d8>)
 800e9f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9fc:	f7f1 fbac 	bl	8000158 <__aeabi_dsub>
 800ea00:	4632      	mov	r2, r6
 800ea02:	463b      	mov	r3, r7
 800ea04:	f7f1 fd60 	bl	80004c8 <__aeabi_dmul>
 800ea08:	4602      	mov	r2, r0
 800ea0a:	460b      	mov	r3, r1
 800ea0c:	4640      	mov	r0, r8
 800ea0e:	4649      	mov	r1, r9
 800ea10:	f7f1 fba4 	bl	800015c <__adddf3>
 800ea14:	4622      	mov	r2, r4
 800ea16:	462b      	mov	r3, r5
 800ea18:	f7f1 fd56 	bl	80004c8 <__aeabi_dmul>
 800ea1c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 800ea20:	4602      	mov	r2, r0
 800ea22:	460b      	mov	r3, r1
 800ea24:	d144      	bne.n	800eab0 <atan+0x240>
 800ea26:	4620      	mov	r0, r4
 800ea28:	4629      	mov	r1, r5
 800ea2a:	f7f1 fb95 	bl	8000158 <__aeabi_dsub>
 800ea2e:	e734      	b.n	800e89a <atan+0x2a>
 800ea30:	2200      	movs	r2, #0
 800ea32:	4b4c      	ldr	r3, [pc, #304]	; (800eb64 <atan+0x2f4>)
 800ea34:	f7f1 fb90 	bl	8000158 <__aeabi_dsub>
 800ea38:	2200      	movs	r2, #0
 800ea3a:	4606      	mov	r6, r0
 800ea3c:	460f      	mov	r7, r1
 800ea3e:	4b49      	ldr	r3, [pc, #292]	; (800eb64 <atan+0x2f4>)
 800ea40:	4620      	mov	r0, r4
 800ea42:	4629      	mov	r1, r5
 800ea44:	f7f1 fb8a 	bl	800015c <__adddf3>
 800ea48:	4602      	mov	r2, r0
 800ea4a:	460b      	mov	r3, r1
 800ea4c:	4630      	mov	r0, r6
 800ea4e:	4639      	mov	r1, r7
 800ea50:	f7f1 fe64 	bl	800071c <__aeabi_ddiv>
 800ea54:	f04f 0a01 	mov.w	sl, #1
 800ea58:	4604      	mov	r4, r0
 800ea5a:	460d      	mov	r5, r1
 800ea5c:	e767      	b.n	800e92e <atan+0xbe>
 800ea5e:	4b43      	ldr	r3, [pc, #268]	; (800eb6c <atan+0x2fc>)
 800ea60:	429e      	cmp	r6, r3
 800ea62:	dc1a      	bgt.n	800ea9a <atan+0x22a>
 800ea64:	2200      	movs	r2, #0
 800ea66:	4b42      	ldr	r3, [pc, #264]	; (800eb70 <atan+0x300>)
 800ea68:	f7f1 fb76 	bl	8000158 <__aeabi_dsub>
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	4606      	mov	r6, r0
 800ea70:	460f      	mov	r7, r1
 800ea72:	4b3f      	ldr	r3, [pc, #252]	; (800eb70 <atan+0x300>)
 800ea74:	4620      	mov	r0, r4
 800ea76:	4629      	mov	r1, r5
 800ea78:	f7f1 fd26 	bl	80004c8 <__aeabi_dmul>
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	4b39      	ldr	r3, [pc, #228]	; (800eb64 <atan+0x2f4>)
 800ea80:	f7f1 fb6c 	bl	800015c <__adddf3>
 800ea84:	4602      	mov	r2, r0
 800ea86:	460b      	mov	r3, r1
 800ea88:	4630      	mov	r0, r6
 800ea8a:	4639      	mov	r1, r7
 800ea8c:	f7f1 fe46 	bl	800071c <__aeabi_ddiv>
 800ea90:	f04f 0a02 	mov.w	sl, #2
 800ea94:	4604      	mov	r4, r0
 800ea96:	460d      	mov	r5, r1
 800ea98:	e749      	b.n	800e92e <atan+0xbe>
 800ea9a:	4602      	mov	r2, r0
 800ea9c:	460b      	mov	r3, r1
 800ea9e:	2000      	movs	r0, #0
 800eaa0:	4934      	ldr	r1, [pc, #208]	; (800eb74 <atan+0x304>)
 800eaa2:	f7f1 fe3b 	bl	800071c <__aeabi_ddiv>
 800eaa6:	f04f 0a03 	mov.w	sl, #3
 800eaaa:	4604      	mov	r4, r0
 800eaac:	460d      	mov	r5, r1
 800eaae:	e73e      	b.n	800e92e <atan+0xbe>
 800eab0:	4b31      	ldr	r3, [pc, #196]	; (800eb78 <atan+0x308>)
 800eab2:	4e32      	ldr	r6, [pc, #200]	; (800eb7c <atan+0x30c>)
 800eab4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 800eab8:	4456      	add	r6, sl
 800eaba:	449a      	add	sl, r3
 800eabc:	e9da 2300 	ldrd	r2, r3, [sl]
 800eac0:	f7f1 fb4a 	bl	8000158 <__aeabi_dsub>
 800eac4:	4622      	mov	r2, r4
 800eac6:	462b      	mov	r3, r5
 800eac8:	f7f1 fb46 	bl	8000158 <__aeabi_dsub>
 800eacc:	4602      	mov	r2, r0
 800eace:	460b      	mov	r3, r1
 800ead0:	e9d6 0100 	ldrd	r0, r1, [r6]
 800ead4:	f7f1 fb40 	bl	8000158 <__aeabi_dsub>
 800ead8:	f1bb 0f00 	cmp.w	fp, #0
 800eadc:	4604      	mov	r4, r0
 800eade:	460d      	mov	r5, r1
 800eae0:	f6bf aee4 	bge.w	800e8ac <atan+0x3c>
 800eae4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eae8:	461d      	mov	r5, r3
 800eaea:	e6df      	b.n	800e8ac <atan+0x3c>
 800eaec:	4d24      	ldr	r5, [pc, #144]	; (800eb80 <atan+0x310>)
 800eaee:	e6dd      	b.n	800e8ac <atan+0x3c>
 800eaf0:	8800759c 	.word	0x8800759c
 800eaf4:	7e37e43c 	.word	0x7e37e43c
 800eaf8:	e322da11 	.word	0xe322da11
 800eafc:	3f90ad3a 	.word	0x3f90ad3a
 800eb00:	24760deb 	.word	0x24760deb
 800eb04:	3fa97b4b 	.word	0x3fa97b4b
 800eb08:	a0d03d51 	.word	0xa0d03d51
 800eb0c:	3fb10d66 	.word	0x3fb10d66
 800eb10:	c54c206e 	.word	0xc54c206e
 800eb14:	3fb745cd 	.word	0x3fb745cd
 800eb18:	920083ff 	.word	0x920083ff
 800eb1c:	3fc24924 	.word	0x3fc24924
 800eb20:	5555550d 	.word	0x5555550d
 800eb24:	3fd55555 	.word	0x3fd55555
 800eb28:	2c6a6c2f 	.word	0x2c6a6c2f
 800eb2c:	bfa2b444 	.word	0xbfa2b444
 800eb30:	52defd9a 	.word	0x52defd9a
 800eb34:	3fadde2d 	.word	0x3fadde2d
 800eb38:	af749a6d 	.word	0xaf749a6d
 800eb3c:	3fb3b0f2 	.word	0x3fb3b0f2
 800eb40:	fe231671 	.word	0xfe231671
 800eb44:	3fbc71c6 	.word	0x3fbc71c6
 800eb48:	9998ebc4 	.word	0x9998ebc4
 800eb4c:	3fc99999 	.word	0x3fc99999
 800eb50:	440fffff 	.word	0x440fffff
 800eb54:	7ff00000 	.word	0x7ff00000
 800eb58:	54442d18 	.word	0x54442d18
 800eb5c:	3ff921fb 	.word	0x3ff921fb
 800eb60:	3fdbffff 	.word	0x3fdbffff
 800eb64:	3ff00000 	.word	0x3ff00000
 800eb68:	3ff2ffff 	.word	0x3ff2ffff
 800eb6c:	40037fff 	.word	0x40037fff
 800eb70:	3ff80000 	.word	0x3ff80000
 800eb74:	bff00000 	.word	0xbff00000
 800eb78:	0800f980 	.word	0x0800f980
 800eb7c:	0800f960 	.word	0x0800f960
 800eb80:	bff921fb 	.word	0xbff921fb

0800eb84 <fabs>:
 800eb84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eb88:	4619      	mov	r1, r3
 800eb8a:	4770      	bx	lr

0800eb8c <finite>:
 800eb8c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800eb90:	f501 1080 	add.w	r0, r1, #1048576	; 0x100000
 800eb94:	0fc0      	lsrs	r0, r0, #31
 800eb96:	4770      	bx	lr

0800eb98 <floor>:
 800eb98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb9c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 800eba0:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800eba4:	2e13      	cmp	r6, #19
 800eba6:	4607      	mov	r7, r0
 800eba8:	460b      	mov	r3, r1
 800ebaa:	460c      	mov	r4, r1
 800ebac:	4605      	mov	r5, r0
 800ebae:	dc35      	bgt.n	800ec1c <floor+0x84>
 800ebb0:	2e00      	cmp	r6, #0
 800ebb2:	da16      	bge.n	800ebe2 <floor+0x4a>
 800ebb4:	a336      	add	r3, pc, #216	; (adr r3, 800ec90 <floor+0xf8>)
 800ebb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebba:	f7f1 facf 	bl	800015c <__adddf3>
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	f7f1 ff11 	bl	80009e8 <__aeabi_dcmpgt>
 800ebc6:	b148      	cbz	r0, 800ebdc <floor+0x44>
 800ebc8:	2c00      	cmp	r4, #0
 800ebca:	da5b      	bge.n	800ec84 <floor+0xec>
 800ebcc:	2500      	movs	r5, #0
 800ebce:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ebd2:	4a31      	ldr	r2, [pc, #196]	; (800ec98 <floor+0x100>)
 800ebd4:	433b      	orrs	r3, r7
 800ebd6:	42ab      	cmp	r3, r5
 800ebd8:	bf18      	it	ne
 800ebda:	4614      	movne	r4, r2
 800ebdc:	4623      	mov	r3, r4
 800ebde:	462f      	mov	r7, r5
 800ebe0:	e026      	b.n	800ec30 <floor+0x98>
 800ebe2:	4a2e      	ldr	r2, [pc, #184]	; (800ec9c <floor+0x104>)
 800ebe4:	fa42 f806 	asr.w	r8, r2, r6
 800ebe8:	ea01 0208 	and.w	r2, r1, r8
 800ebec:	4302      	orrs	r2, r0
 800ebee:	d01f      	beq.n	800ec30 <floor+0x98>
 800ebf0:	a327      	add	r3, pc, #156	; (adr r3, 800ec90 <floor+0xf8>)
 800ebf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf6:	f7f1 fab1 	bl	800015c <__adddf3>
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	2300      	movs	r3, #0
 800ebfe:	f7f1 fef3 	bl	80009e8 <__aeabi_dcmpgt>
 800ec02:	2800      	cmp	r0, #0
 800ec04:	d0ea      	beq.n	800ebdc <floor+0x44>
 800ec06:	2c00      	cmp	r4, #0
 800ec08:	bfbe      	ittt	lt
 800ec0a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ec0e:	fa43 f606 	asrlt.w	r6, r3, r6
 800ec12:	19a4      	addlt	r4, r4, r6
 800ec14:	ea24 0408 	bic.w	r4, r4, r8
 800ec18:	2500      	movs	r5, #0
 800ec1a:	e7df      	b.n	800ebdc <floor+0x44>
 800ec1c:	2e33      	cmp	r6, #51	; 0x33
 800ec1e:	dd0b      	ble.n	800ec38 <floor+0xa0>
 800ec20:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ec24:	d104      	bne.n	800ec30 <floor+0x98>
 800ec26:	4602      	mov	r2, r0
 800ec28:	f7f1 fa98 	bl	800015c <__adddf3>
 800ec2c:	4607      	mov	r7, r0
 800ec2e:	460b      	mov	r3, r1
 800ec30:	4638      	mov	r0, r7
 800ec32:	4619      	mov	r1, r3
 800ec34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ec3c:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800ec40:	fa22 f808 	lsr.w	r8, r2, r8
 800ec44:	ea18 0f00 	tst.w	r8, r0
 800ec48:	d0f2      	beq.n	800ec30 <floor+0x98>
 800ec4a:	a311      	add	r3, pc, #68	; (adr r3, 800ec90 <floor+0xf8>)
 800ec4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec50:	f7f1 fa84 	bl	800015c <__adddf3>
 800ec54:	2200      	movs	r2, #0
 800ec56:	2300      	movs	r3, #0
 800ec58:	f7f1 fec6 	bl	80009e8 <__aeabi_dcmpgt>
 800ec5c:	2800      	cmp	r0, #0
 800ec5e:	d0bd      	beq.n	800ebdc <floor+0x44>
 800ec60:	2c00      	cmp	r4, #0
 800ec62:	da02      	bge.n	800ec6a <floor+0xd2>
 800ec64:	2e14      	cmp	r6, #20
 800ec66:	d103      	bne.n	800ec70 <floor+0xd8>
 800ec68:	3401      	adds	r4, #1
 800ec6a:	ea25 0508 	bic.w	r5, r5, r8
 800ec6e:	e7b5      	b.n	800ebdc <floor+0x44>
 800ec70:	2301      	movs	r3, #1
 800ec72:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ec76:	fa03 f606 	lsl.w	r6, r3, r6
 800ec7a:	4435      	add	r5, r6
 800ec7c:	42bd      	cmp	r5, r7
 800ec7e:	bf38      	it	cc
 800ec80:	18e4      	addcc	r4, r4, r3
 800ec82:	e7f2      	b.n	800ec6a <floor+0xd2>
 800ec84:	2500      	movs	r5, #0
 800ec86:	462c      	mov	r4, r5
 800ec88:	e7a8      	b.n	800ebdc <floor+0x44>
 800ec8a:	bf00      	nop
 800ec8c:	f3af 8000 	nop.w
 800ec90:	8800759c 	.word	0x8800759c
 800ec94:	7e37e43c 	.word	0x7e37e43c
 800ec98:	bff00000 	.word	0xbff00000
 800ec9c:	000fffff 	.word	0x000fffff

0800eca0 <matherr>:
 800eca0:	2000      	movs	r0, #0
 800eca2:	4770      	bx	lr

0800eca4 <nan>:
 800eca4:	2000      	movs	r0, #0
 800eca6:	4901      	ldr	r1, [pc, #4]	; (800ecac <nan+0x8>)
 800eca8:	4770      	bx	lr
 800ecaa:	bf00      	nop
 800ecac:	7ff80000 	.word	0x7ff80000

0800ecb0 <rint>:
 800ecb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ecb2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ecb6:	f2a2 3cff 	subw	ip, r2, #1023	; 0x3ff
 800ecba:	f1bc 0f13 	cmp.w	ip, #19
 800ecbe:	4604      	mov	r4, r0
 800ecc0:	460d      	mov	r5, r1
 800ecc2:	460b      	mov	r3, r1
 800ecc4:	4606      	mov	r6, r0
 800ecc6:	ea4f 77d1 	mov.w	r7, r1, lsr #31
 800ecca:	dc5a      	bgt.n	800ed82 <rint+0xd2>
 800eccc:	f1bc 0f00 	cmp.w	ip, #0
 800ecd0:	da2b      	bge.n	800ed2a <rint+0x7a>
 800ecd2:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ecd6:	4302      	orrs	r2, r0
 800ecd8:	d023      	beq.n	800ed22 <rint+0x72>
 800ecda:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800ecde:	4302      	orrs	r2, r0
 800ece0:	4256      	negs	r6, r2
 800ece2:	4316      	orrs	r6, r2
 800ece4:	0c4b      	lsrs	r3, r1, #17
 800ece6:	0b36      	lsrs	r6, r6, #12
 800ece8:	4934      	ldr	r1, [pc, #208]	; (800edbc <rint+0x10c>)
 800ecea:	045b      	lsls	r3, r3, #17
 800ecec:	f406 2600 	and.w	r6, r6, #524288	; 0x80000
 800ecf0:	ea46 0503 	orr.w	r5, r6, r3
 800ecf4:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800ecf8:	4602      	mov	r2, r0
 800ecfa:	462b      	mov	r3, r5
 800ecfc:	e9d1 4500 	ldrd	r4, r5, [r1]
 800ed00:	4620      	mov	r0, r4
 800ed02:	4629      	mov	r1, r5
 800ed04:	f7f1 fa2a 	bl	800015c <__adddf3>
 800ed08:	e9cd 0100 	strd	r0, r1, [sp]
 800ed0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed10:	462b      	mov	r3, r5
 800ed12:	4622      	mov	r2, r4
 800ed14:	f7f1 fa20 	bl	8000158 <__aeabi_dsub>
 800ed18:	4604      	mov	r4, r0
 800ed1a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ed1e:	ea43 75c7 	orr.w	r5, r3, r7, lsl #31
 800ed22:	4620      	mov	r0, r4
 800ed24:	4629      	mov	r1, r5
 800ed26:	b003      	add	sp, #12
 800ed28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed2a:	4a25      	ldr	r2, [pc, #148]	; (800edc0 <rint+0x110>)
 800ed2c:	fa42 f20c 	asr.w	r2, r2, ip
 800ed30:	4011      	ands	r1, r2
 800ed32:	4301      	orrs	r1, r0
 800ed34:	d0f5      	beq.n	800ed22 <rint+0x72>
 800ed36:	0852      	lsrs	r2, r2, #1
 800ed38:	ea05 0102 	and.w	r1, r5, r2
 800ed3c:	ea50 0601 	orrs.w	r6, r0, r1
 800ed40:	d00c      	beq.n	800ed5c <rint+0xac>
 800ed42:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800ed46:	f1bc 0f13 	cmp.w	ip, #19
 800ed4a:	bf0c      	ite	eq
 800ed4c:	f04f 4600 	moveq.w	r6, #2147483648	; 0x80000000
 800ed50:	2600      	movne	r6, #0
 800ed52:	ea25 0202 	bic.w	r2, r5, r2
 800ed56:	fa43 f30c 	asr.w	r3, r3, ip
 800ed5a:	4313      	orrs	r3, r2
 800ed5c:	4917      	ldr	r1, [pc, #92]	; (800edbc <rint+0x10c>)
 800ed5e:	4632      	mov	r2, r6
 800ed60:	eb01 07c7 	add.w	r7, r1, r7, lsl #3
 800ed64:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ed68:	4620      	mov	r0, r4
 800ed6a:	4629      	mov	r1, r5
 800ed6c:	f7f1 f9f6 	bl	800015c <__adddf3>
 800ed70:	e9cd 0100 	strd	r0, r1, [sp]
 800ed74:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed78:	4622      	mov	r2, r4
 800ed7a:	462b      	mov	r3, r5
 800ed7c:	f7f1 f9ec 	bl	8000158 <__aeabi_dsub>
 800ed80:	e008      	b.n	800ed94 <rint+0xe4>
 800ed82:	f1bc 0f33 	cmp.w	ip, #51	; 0x33
 800ed86:	dd08      	ble.n	800ed9a <rint+0xea>
 800ed88:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 800ed8c:	d1c9      	bne.n	800ed22 <rint+0x72>
 800ed8e:	4602      	mov	r2, r0
 800ed90:	f7f1 f9e4 	bl	800015c <__adddf3>
 800ed94:	4604      	mov	r4, r0
 800ed96:	460d      	mov	r5, r1
 800ed98:	e7c3      	b.n	800ed22 <rint+0x72>
 800ed9a:	f2a2 4113 	subw	r1, r2, #1043	; 0x413
 800ed9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eda2:	40ca      	lsrs	r2, r1
 800eda4:	4210      	tst	r0, r2
 800eda6:	d0bc      	beq.n	800ed22 <rint+0x72>
 800eda8:	0852      	lsrs	r2, r2, #1
 800edaa:	4210      	tst	r0, r2
 800edac:	bf1f      	itttt	ne
 800edae:	f04f 4680 	movne.w	r6, #1073741824	; 0x40000000
 800edb2:	ea20 0202 	bicne.w	r2, r0, r2
 800edb6:	410e      	asrne	r6, r1
 800edb8:	4316      	orrne	r6, r2
 800edba:	e7cf      	b.n	800ed5c <rint+0xac>
 800edbc:	0800f9a0 	.word	0x0800f9a0
 800edc0:	000fffff 	.word	0x000fffff
 800edc4:	00000000 	.word	0x00000000

0800edc8 <scalbn>:
 800edc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edca:	4616      	mov	r6, r2
 800edcc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800edd0:	4604      	mov	r4, r0
 800edd2:	460d      	mov	r5, r1
 800edd4:	460b      	mov	r3, r1
 800edd6:	b982      	cbnz	r2, 800edfa <scalbn+0x32>
 800edd8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eddc:	4303      	orrs	r3, r0
 800edde:	d034      	beq.n	800ee4a <scalbn+0x82>
 800ede0:	4b2d      	ldr	r3, [pc, #180]	; (800ee98 <scalbn+0xd0>)
 800ede2:	2200      	movs	r2, #0
 800ede4:	f7f1 fb70 	bl	80004c8 <__aeabi_dmul>
 800ede8:	4b2c      	ldr	r3, [pc, #176]	; (800ee9c <scalbn+0xd4>)
 800edea:	4604      	mov	r4, r0
 800edec:	429e      	cmp	r6, r3
 800edee:	460d      	mov	r5, r1
 800edf0:	da0d      	bge.n	800ee0e <scalbn+0x46>
 800edf2:	a325      	add	r3, pc, #148	; (adr r3, 800ee88 <scalbn+0xc0>)
 800edf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edf8:	e01c      	b.n	800ee34 <scalbn+0x6c>
 800edfa:	f240 77ff 	movw	r7, #2047	; 0x7ff
 800edfe:	42ba      	cmp	r2, r7
 800ee00:	d109      	bne.n	800ee16 <scalbn+0x4e>
 800ee02:	4602      	mov	r2, r0
 800ee04:	f7f1 f9aa 	bl	800015c <__adddf3>
 800ee08:	4604      	mov	r4, r0
 800ee0a:	460d      	mov	r5, r1
 800ee0c:	e01d      	b.n	800ee4a <scalbn+0x82>
 800ee0e:	460b      	mov	r3, r1
 800ee10:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ee14:	3a36      	subs	r2, #54	; 0x36
 800ee16:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ee1a:	4432      	add	r2, r6
 800ee1c:	428a      	cmp	r2, r1
 800ee1e:	dd0c      	ble.n	800ee3a <scalbn+0x72>
 800ee20:	4622      	mov	r2, r4
 800ee22:	462b      	mov	r3, r5
 800ee24:	a11a      	add	r1, pc, #104	; (adr r1, 800ee90 <scalbn+0xc8>)
 800ee26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee2a:	f000 fa33 	bl	800f294 <copysign>
 800ee2e:	a318      	add	r3, pc, #96	; (adr r3, 800ee90 <scalbn+0xc8>)
 800ee30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee34:	f7f1 fb48 	bl	80004c8 <__aeabi_dmul>
 800ee38:	e7e6      	b.n	800ee08 <scalbn+0x40>
 800ee3a:	2a00      	cmp	r2, #0
 800ee3c:	dd08      	ble.n	800ee50 <scalbn+0x88>
 800ee3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ee42:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ee46:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ee4a:	4620      	mov	r0, r4
 800ee4c:	4629      	mov	r1, r5
 800ee4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee50:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ee54:	da0b      	bge.n	800ee6e <scalbn+0xa6>
 800ee56:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ee5a:	429e      	cmp	r6, r3
 800ee5c:	4622      	mov	r2, r4
 800ee5e:	462b      	mov	r3, r5
 800ee60:	dce0      	bgt.n	800ee24 <scalbn+0x5c>
 800ee62:	a109      	add	r1, pc, #36	; (adr r1, 800ee88 <scalbn+0xc0>)
 800ee64:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee68:	f000 fa14 	bl	800f294 <copysign>
 800ee6c:	e7c1      	b.n	800edf2 <scalbn+0x2a>
 800ee6e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ee72:	3236      	adds	r2, #54	; 0x36
 800ee74:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ee78:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ee7c:	4620      	mov	r0, r4
 800ee7e:	4629      	mov	r1, r5
 800ee80:	2200      	movs	r2, #0
 800ee82:	4b07      	ldr	r3, [pc, #28]	; (800eea0 <scalbn+0xd8>)
 800ee84:	e7d6      	b.n	800ee34 <scalbn+0x6c>
 800ee86:	bf00      	nop
 800ee88:	c2f8f359 	.word	0xc2f8f359
 800ee8c:	01a56e1f 	.word	0x01a56e1f
 800ee90:	8800759c 	.word	0x8800759c
 800ee94:	7e37e43c 	.word	0x7e37e43c
 800ee98:	43500000 	.word	0x43500000
 800ee9c:	ffff3cb0 	.word	0xffff3cb0
 800eea0:	3c900000 	.word	0x3c900000

0800eea4 <atanf>:
 800eea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eea8:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 800eeac:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 800eeb0:	4604      	mov	r4, r0
 800eeb2:	4607      	mov	r7, r0
 800eeb4:	db0e      	blt.n	800eed4 <atanf+0x30>
 800eeb6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800eeba:	dd04      	ble.n	800eec6 <atanf+0x22>
 800eebc:	4601      	mov	r1, r0
 800eebe:	f7f1 fe31 	bl	8000b24 <__addsf3>
 800eec2:	4604      	mov	r4, r0
 800eec4:	e003      	b.n	800eece <atanf+0x2a>
 800eec6:	2800      	cmp	r0, #0
 800eec8:	f340 80cd 	ble.w	800f066 <atanf+0x1c2>
 800eecc:	4c67      	ldr	r4, [pc, #412]	; (800f06c <atanf+0x1c8>)
 800eece:	4620      	mov	r0, r4
 800eed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eed4:	4b66      	ldr	r3, [pc, #408]	; (800f070 <atanf+0x1cc>)
 800eed6:	429d      	cmp	r5, r3
 800eed8:	dc0e      	bgt.n	800eef8 <atanf+0x54>
 800eeda:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 800eede:	da08      	bge.n	800eef2 <atanf+0x4e>
 800eee0:	4964      	ldr	r1, [pc, #400]	; (800f074 <atanf+0x1d0>)
 800eee2:	f7f1 fe1f 	bl	8000b24 <__addsf3>
 800eee6:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800eeea:	f7f2 f8df 	bl	80010ac <__aeabi_fcmpgt>
 800eeee:	2800      	cmp	r0, #0
 800eef0:	d1ed      	bne.n	800eece <atanf+0x2a>
 800eef2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800eef6:	e01c      	b.n	800ef32 <atanf+0x8e>
 800eef8:	f000 f8e0 	bl	800f0bc <fabsf>
 800eefc:	4b5e      	ldr	r3, [pc, #376]	; (800f078 <atanf+0x1d4>)
 800eefe:	4604      	mov	r4, r0
 800ef00:	429d      	cmp	r5, r3
 800ef02:	dc7c      	bgt.n	800effe <atanf+0x15a>
 800ef04:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800ef08:	429d      	cmp	r5, r3
 800ef0a:	dc67      	bgt.n	800efdc <atanf+0x138>
 800ef0c:	4601      	mov	r1, r0
 800ef0e:	f7f1 fe09 	bl	8000b24 <__addsf3>
 800ef12:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800ef16:	f7f1 fe03 	bl	8000b20 <__aeabi_fsub>
 800ef1a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ef1e:	4605      	mov	r5, r0
 800ef20:	4620      	mov	r0, r4
 800ef22:	f7f1 fdff 	bl	8000b24 <__addsf3>
 800ef26:	4601      	mov	r1, r0
 800ef28:	4628      	mov	r0, r5
 800ef2a:	f7f1 ffb7 	bl	8000e9c <__aeabi_fdiv>
 800ef2e:	2600      	movs	r6, #0
 800ef30:	4604      	mov	r4, r0
 800ef32:	4621      	mov	r1, r4
 800ef34:	4620      	mov	r0, r4
 800ef36:	f7f1 fefd 	bl	8000d34 <__aeabi_fmul>
 800ef3a:	4601      	mov	r1, r0
 800ef3c:	4680      	mov	r8, r0
 800ef3e:	f7f1 fef9 	bl	8000d34 <__aeabi_fmul>
 800ef42:	4605      	mov	r5, r0
 800ef44:	494d      	ldr	r1, [pc, #308]	; (800f07c <atanf+0x1d8>)
 800ef46:	f7f1 fef5 	bl	8000d34 <__aeabi_fmul>
 800ef4a:	494d      	ldr	r1, [pc, #308]	; (800f080 <atanf+0x1dc>)
 800ef4c:	f7f1 fdea 	bl	8000b24 <__addsf3>
 800ef50:	4629      	mov	r1, r5
 800ef52:	f7f1 feef 	bl	8000d34 <__aeabi_fmul>
 800ef56:	494b      	ldr	r1, [pc, #300]	; (800f084 <atanf+0x1e0>)
 800ef58:	f7f1 fde4 	bl	8000b24 <__addsf3>
 800ef5c:	4629      	mov	r1, r5
 800ef5e:	f7f1 fee9 	bl	8000d34 <__aeabi_fmul>
 800ef62:	4949      	ldr	r1, [pc, #292]	; (800f088 <atanf+0x1e4>)
 800ef64:	f7f1 fdde 	bl	8000b24 <__addsf3>
 800ef68:	4629      	mov	r1, r5
 800ef6a:	f7f1 fee3 	bl	8000d34 <__aeabi_fmul>
 800ef6e:	4947      	ldr	r1, [pc, #284]	; (800f08c <atanf+0x1e8>)
 800ef70:	f7f1 fdd8 	bl	8000b24 <__addsf3>
 800ef74:	4629      	mov	r1, r5
 800ef76:	f7f1 fedd 	bl	8000d34 <__aeabi_fmul>
 800ef7a:	4945      	ldr	r1, [pc, #276]	; (800f090 <atanf+0x1ec>)
 800ef7c:	f7f1 fdd2 	bl	8000b24 <__addsf3>
 800ef80:	4641      	mov	r1, r8
 800ef82:	f7f1 fed7 	bl	8000d34 <__aeabi_fmul>
 800ef86:	4943      	ldr	r1, [pc, #268]	; (800f094 <atanf+0x1f0>)
 800ef88:	4680      	mov	r8, r0
 800ef8a:	4628      	mov	r0, r5
 800ef8c:	f7f1 fed2 	bl	8000d34 <__aeabi_fmul>
 800ef90:	4941      	ldr	r1, [pc, #260]	; (800f098 <atanf+0x1f4>)
 800ef92:	f7f1 fdc5 	bl	8000b20 <__aeabi_fsub>
 800ef96:	4629      	mov	r1, r5
 800ef98:	f7f1 fecc 	bl	8000d34 <__aeabi_fmul>
 800ef9c:	493f      	ldr	r1, [pc, #252]	; (800f09c <atanf+0x1f8>)
 800ef9e:	f7f1 fdbf 	bl	8000b20 <__aeabi_fsub>
 800efa2:	4629      	mov	r1, r5
 800efa4:	f7f1 fec6 	bl	8000d34 <__aeabi_fmul>
 800efa8:	493d      	ldr	r1, [pc, #244]	; (800f0a0 <atanf+0x1fc>)
 800efaa:	f7f1 fdb9 	bl	8000b20 <__aeabi_fsub>
 800efae:	4629      	mov	r1, r5
 800efb0:	f7f1 fec0 	bl	8000d34 <__aeabi_fmul>
 800efb4:	493b      	ldr	r1, [pc, #236]	; (800f0a4 <atanf+0x200>)
 800efb6:	f7f1 fdb3 	bl	8000b20 <__aeabi_fsub>
 800efba:	4629      	mov	r1, r5
 800efbc:	f7f1 feba 	bl	8000d34 <__aeabi_fmul>
 800efc0:	4601      	mov	r1, r0
 800efc2:	4640      	mov	r0, r8
 800efc4:	f7f1 fdae 	bl	8000b24 <__addsf3>
 800efc8:	4621      	mov	r1, r4
 800efca:	f7f1 feb3 	bl	8000d34 <__aeabi_fmul>
 800efce:	1c73      	adds	r3, r6, #1
 800efd0:	4601      	mov	r1, r0
 800efd2:	d133      	bne.n	800f03c <atanf+0x198>
 800efd4:	4620      	mov	r0, r4
 800efd6:	f7f1 fda3 	bl	8000b20 <__aeabi_fsub>
 800efda:	e772      	b.n	800eec2 <atanf+0x1e>
 800efdc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800efe0:	f7f1 fd9e 	bl	8000b20 <__aeabi_fsub>
 800efe4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800efe8:	4605      	mov	r5, r0
 800efea:	4620      	mov	r0, r4
 800efec:	f7f1 fd9a 	bl	8000b24 <__addsf3>
 800eff0:	4601      	mov	r1, r0
 800eff2:	4628      	mov	r0, r5
 800eff4:	f7f1 ff52 	bl	8000e9c <__aeabi_fdiv>
 800eff8:	2601      	movs	r6, #1
 800effa:	4604      	mov	r4, r0
 800effc:	e799      	b.n	800ef32 <atanf+0x8e>
 800effe:	4b2a      	ldr	r3, [pc, #168]	; (800f0a8 <atanf+0x204>)
 800f000:	429d      	cmp	r5, r3
 800f002:	dc14      	bgt.n	800f02e <atanf+0x18a>
 800f004:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800f008:	f7f1 fd8a 	bl	8000b20 <__aeabi_fsub>
 800f00c:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 800f010:	4605      	mov	r5, r0
 800f012:	4620      	mov	r0, r4
 800f014:	f7f1 fe8e 	bl	8000d34 <__aeabi_fmul>
 800f018:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800f01c:	f7f1 fd82 	bl	8000b24 <__addsf3>
 800f020:	4601      	mov	r1, r0
 800f022:	4628      	mov	r0, r5
 800f024:	f7f1 ff3a 	bl	8000e9c <__aeabi_fdiv>
 800f028:	2602      	movs	r6, #2
 800f02a:	4604      	mov	r4, r0
 800f02c:	e781      	b.n	800ef32 <atanf+0x8e>
 800f02e:	4601      	mov	r1, r0
 800f030:	481e      	ldr	r0, [pc, #120]	; (800f0ac <atanf+0x208>)
 800f032:	f7f1 ff33 	bl	8000e9c <__aeabi_fdiv>
 800f036:	2603      	movs	r6, #3
 800f038:	4604      	mov	r4, r0
 800f03a:	e77a      	b.n	800ef32 <atanf+0x8e>
 800f03c:	4b1c      	ldr	r3, [pc, #112]	; (800f0b0 <atanf+0x20c>)
 800f03e:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 800f042:	f7f1 fd6d 	bl	8000b20 <__aeabi_fsub>
 800f046:	4621      	mov	r1, r4
 800f048:	f7f1 fd6a 	bl	8000b20 <__aeabi_fsub>
 800f04c:	4b19      	ldr	r3, [pc, #100]	; (800f0b4 <atanf+0x210>)
 800f04e:	4601      	mov	r1, r0
 800f050:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f054:	f7f1 fd64 	bl	8000b20 <__aeabi_fsub>
 800f058:	2f00      	cmp	r7, #0
 800f05a:	4604      	mov	r4, r0
 800f05c:	f6bf af37 	bge.w	800eece <atanf+0x2a>
 800f060:	f100 4400 	add.w	r4, r0, #2147483648	; 0x80000000
 800f064:	e733      	b.n	800eece <atanf+0x2a>
 800f066:	4c14      	ldr	r4, [pc, #80]	; (800f0b8 <atanf+0x214>)
 800f068:	e731      	b.n	800eece <atanf+0x2a>
 800f06a:	bf00      	nop
 800f06c:	3fc90fdb 	.word	0x3fc90fdb
 800f070:	3edfffff 	.word	0x3edfffff
 800f074:	7149f2ca 	.word	0x7149f2ca
 800f078:	3f97ffff 	.word	0x3f97ffff
 800f07c:	3c8569d7 	.word	0x3c8569d7
 800f080:	3d4bda59 	.word	0x3d4bda59
 800f084:	3d886b35 	.word	0x3d886b35
 800f088:	3dba2e6e 	.word	0x3dba2e6e
 800f08c:	3e124925 	.word	0x3e124925
 800f090:	3eaaaaab 	.word	0x3eaaaaab
 800f094:	bd15a221 	.word	0xbd15a221
 800f098:	3d6ef16b 	.word	0x3d6ef16b
 800f09c:	3d9d8795 	.word	0x3d9d8795
 800f0a0:	3de38e38 	.word	0x3de38e38
 800f0a4:	3e4ccccd 	.word	0x3e4ccccd
 800f0a8:	401bffff 	.word	0x401bffff
 800f0ac:	bf800000 	.word	0xbf800000
 800f0b0:	0800f9c0 	.word	0x0800f9c0
 800f0b4:	0800f9b0 	.word	0x0800f9b0
 800f0b8:	bfc90fdb 	.word	0xbfc90fdb

0800f0bc <fabsf>:
 800f0bc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f0c0:	4770      	bx	lr

0800f0c2 <finitef>:
 800f0c2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f0c6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800f0ca:	bfac      	ite	ge
 800f0cc:	2000      	movge	r0, #0
 800f0ce:	2001      	movlt	r0, #1
 800f0d0:	4770      	bx	lr
	...

0800f0d4 <floorf>:
 800f0d4:	b570      	push	{r4, r5, r6, lr}
 800f0d6:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 800f0da:	0df5      	lsrs	r5, r6, #23
 800f0dc:	3d7f      	subs	r5, #127	; 0x7f
 800f0de:	2d16      	cmp	r5, #22
 800f0e0:	4601      	mov	r1, r0
 800f0e2:	4604      	mov	r4, r0
 800f0e4:	dc26      	bgt.n	800f134 <floorf+0x60>
 800f0e6:	2d00      	cmp	r5, #0
 800f0e8:	da0e      	bge.n	800f108 <floorf+0x34>
 800f0ea:	4917      	ldr	r1, [pc, #92]	; (800f148 <floorf+0x74>)
 800f0ec:	f7f1 fd1a 	bl	8000b24 <__addsf3>
 800f0f0:	2100      	movs	r1, #0
 800f0f2:	f7f1 ffdb 	bl	80010ac <__aeabi_fcmpgt>
 800f0f6:	b128      	cbz	r0, 800f104 <floorf+0x30>
 800f0f8:	2c00      	cmp	r4, #0
 800f0fa:	da23      	bge.n	800f144 <floorf+0x70>
 800f0fc:	4b13      	ldr	r3, [pc, #76]	; (800f14c <floorf+0x78>)
 800f0fe:	2e00      	cmp	r6, #0
 800f100:	bf18      	it	ne
 800f102:	461c      	movne	r4, r3
 800f104:	4621      	mov	r1, r4
 800f106:	e01b      	b.n	800f140 <floorf+0x6c>
 800f108:	4e11      	ldr	r6, [pc, #68]	; (800f150 <floorf+0x7c>)
 800f10a:	412e      	asrs	r6, r5
 800f10c:	4230      	tst	r0, r6
 800f10e:	d017      	beq.n	800f140 <floorf+0x6c>
 800f110:	490d      	ldr	r1, [pc, #52]	; (800f148 <floorf+0x74>)
 800f112:	f7f1 fd07 	bl	8000b24 <__addsf3>
 800f116:	2100      	movs	r1, #0
 800f118:	f7f1 ffc8 	bl	80010ac <__aeabi_fcmpgt>
 800f11c:	2800      	cmp	r0, #0
 800f11e:	d0f1      	beq.n	800f104 <floorf+0x30>
 800f120:	2c00      	cmp	r4, #0
 800f122:	bfbe      	ittt	lt
 800f124:	f44f 0300 	movlt.w	r3, #8388608	; 0x800000
 800f128:	fa43 f505 	asrlt.w	r5, r3, r5
 800f12c:	1964      	addlt	r4, r4, r5
 800f12e:	ea24 0406 	bic.w	r4, r4, r6
 800f132:	e7e7      	b.n	800f104 <floorf+0x30>
 800f134:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 800f138:	d302      	bcc.n	800f140 <floorf+0x6c>
 800f13a:	f7f1 fcf3 	bl	8000b24 <__addsf3>
 800f13e:	4601      	mov	r1, r0
 800f140:	4608      	mov	r0, r1
 800f142:	bd70      	pop	{r4, r5, r6, pc}
 800f144:	2400      	movs	r4, #0
 800f146:	e7dd      	b.n	800f104 <floorf+0x30>
 800f148:	7149f2ca 	.word	0x7149f2ca
 800f14c:	bf800000 	.word	0xbf800000
 800f150:	007fffff 	.word	0x007fffff

0800f154 <nanf>:
 800f154:	4800      	ldr	r0, [pc, #0]	; (800f158 <nanf+0x4>)
 800f156:	4770      	bx	lr
 800f158:	7fc00000 	.word	0x7fc00000

0800f15c <rintf>:
 800f15c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f15e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800f162:	0dd5      	lsrs	r5, r2, #23
 800f164:	3d7f      	subs	r5, #127	; 0x7f
 800f166:	2d16      	cmp	r5, #22
 800f168:	4601      	mov	r1, r0
 800f16a:	dc3b      	bgt.n	800f1e4 <rintf+0x88>
 800f16c:	b1e2      	cbz	r2, 800f1a8 <rintf+0x4c>
 800f16e:	2d00      	cmp	r5, #0
 800f170:	4602      	mov	r2, r0
 800f172:	ea4f 74d0 	mov.w	r4, r0, lsr #31
 800f176:	da1a      	bge.n	800f1ae <rintf+0x52>
 800f178:	4a1e      	ldr	r2, [pc, #120]	; (800f1f4 <rintf+0x98>)
 800f17a:	f3c0 0116 	ubfx	r1, r0, #0, #23
 800f17e:	4249      	negs	r1, r1
 800f180:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 800f184:	0d03      	lsrs	r3, r0, #20
 800f186:	0a49      	lsrs	r1, r1, #9
 800f188:	051b      	lsls	r3, r3, #20
 800f18a:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800f18e:	4319      	orrs	r1, r3
 800f190:	4628      	mov	r0, r5
 800f192:	f7f1 fcc7 	bl	8000b24 <__addsf3>
 800f196:	9001      	str	r0, [sp, #4]
 800f198:	4629      	mov	r1, r5
 800f19a:	9801      	ldr	r0, [sp, #4]
 800f19c:	f7f1 fcc0 	bl	8000b20 <__aeabi_fsub>
 800f1a0:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 800f1a4:	ea41 71c4 	orr.w	r1, r1, r4, lsl #31
 800f1a8:	4608      	mov	r0, r1
 800f1aa:	b003      	add	sp, #12
 800f1ac:	bd30      	pop	{r4, r5, pc}
 800f1ae:	4b12      	ldr	r3, [pc, #72]	; (800f1f8 <rintf+0x9c>)
 800f1b0:	412b      	asrs	r3, r5
 800f1b2:	4218      	tst	r0, r3
 800f1b4:	d0f8      	beq.n	800f1a8 <rintf+0x4c>
 800f1b6:	0859      	lsrs	r1, r3, #1
 800f1b8:	4208      	tst	r0, r1
 800f1ba:	d006      	beq.n	800f1ca <rintf+0x6e>
 800f1bc:	ea20 0201 	bic.w	r2, r0, r1
 800f1c0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f1c4:	fa41 f505 	asr.w	r5, r1, r5
 800f1c8:	432a      	orrs	r2, r5
 800f1ca:	4b0a      	ldr	r3, [pc, #40]	; (800f1f4 <rintf+0x98>)
 800f1cc:	4611      	mov	r1, r2
 800f1ce:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 800f1d2:	4620      	mov	r0, r4
 800f1d4:	f7f1 fca6 	bl	8000b24 <__addsf3>
 800f1d8:	9001      	str	r0, [sp, #4]
 800f1da:	9801      	ldr	r0, [sp, #4]
 800f1dc:	4621      	mov	r1, r4
 800f1de:	f7f1 fc9f 	bl	8000b20 <__aeabi_fsub>
 800f1e2:	e004      	b.n	800f1ee <rintf+0x92>
 800f1e4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800f1e8:	d3de      	bcc.n	800f1a8 <rintf+0x4c>
 800f1ea:	f7f1 fc9b 	bl	8000b24 <__addsf3>
 800f1ee:	4601      	mov	r1, r0
 800f1f0:	e7da      	b.n	800f1a8 <rintf+0x4c>
 800f1f2:	bf00      	nop
 800f1f4:	0800f9d0 	.word	0x0800f9d0
 800f1f8:	007fffff 	.word	0x007fffff

0800f1fc <scalbnf>:
 800f1fc:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 800f200:	b510      	push	{r4, lr}
 800f202:	4602      	mov	r2, r0
 800f204:	460c      	mov	r4, r1
 800f206:	4601      	mov	r1, r0
 800f208:	d027      	beq.n	800f25a <scalbnf+0x5e>
 800f20a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800f20e:	d303      	bcc.n	800f218 <scalbnf+0x1c>
 800f210:	f7f1 fc88 	bl	8000b24 <__addsf3>
 800f214:	4602      	mov	r2, r0
 800f216:	e020      	b.n	800f25a <scalbnf+0x5e>
 800f218:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f21c:	d215      	bcs.n	800f24a <scalbnf+0x4e>
 800f21e:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800f222:	f7f1 fd87 	bl	8000d34 <__aeabi_fmul>
 800f226:	4b18      	ldr	r3, [pc, #96]	; (800f288 <scalbnf+0x8c>)
 800f228:	4602      	mov	r2, r0
 800f22a:	429c      	cmp	r4, r3
 800f22c:	db22      	blt.n	800f274 <scalbnf+0x78>
 800f22e:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f232:	3b19      	subs	r3, #25
 800f234:	4423      	add	r3, r4
 800f236:	2bfe      	cmp	r3, #254	; 0xfe
 800f238:	dd09      	ble.n	800f24e <scalbnf+0x52>
 800f23a:	4611      	mov	r1, r2
 800f23c:	4813      	ldr	r0, [pc, #76]	; (800f28c <scalbnf+0x90>)
 800f23e:	f000 f832 	bl	800f2a6 <copysignf>
 800f242:	4912      	ldr	r1, [pc, #72]	; (800f28c <scalbnf+0x90>)
 800f244:	f7f1 fd76 	bl	8000d34 <__aeabi_fmul>
 800f248:	e7e4      	b.n	800f214 <scalbnf+0x18>
 800f24a:	0ddb      	lsrs	r3, r3, #23
 800f24c:	e7f2      	b.n	800f234 <scalbnf+0x38>
 800f24e:	2b00      	cmp	r3, #0
 800f250:	dd05      	ble.n	800f25e <scalbnf+0x62>
 800f252:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800f256:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 800f25a:	4610      	mov	r0, r2
 800f25c:	bd10      	pop	{r4, pc}
 800f25e:	f113 0f16 	cmn.w	r3, #22
 800f262:	da09      	bge.n	800f278 <scalbnf+0x7c>
 800f264:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f268:	429c      	cmp	r4, r3
 800f26a:	4611      	mov	r1, r2
 800f26c:	dce6      	bgt.n	800f23c <scalbnf+0x40>
 800f26e:	4808      	ldr	r0, [pc, #32]	; (800f290 <scalbnf+0x94>)
 800f270:	f000 f819 	bl	800f2a6 <copysignf>
 800f274:	4906      	ldr	r1, [pc, #24]	; (800f290 <scalbnf+0x94>)
 800f276:	e7e5      	b.n	800f244 <scalbnf+0x48>
 800f278:	3319      	adds	r3, #25
 800f27a:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800f27e:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 800f282:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800f286:	e7dd      	b.n	800f244 <scalbnf+0x48>
 800f288:	ffff3cb0 	.word	0xffff3cb0
 800f28c:	7149f2ca 	.word	0x7149f2ca
 800f290:	0da24260 	.word	0x0da24260

0800f294 <copysign>:
 800f294:	b530      	push	{r4, r5, lr}
 800f296:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800f29a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f29e:	ea42 0503 	orr.w	r5, r2, r3
 800f2a2:	4629      	mov	r1, r5
 800f2a4:	bd30      	pop	{r4, r5, pc}

0800f2a6 <copysignf>:
 800f2a6:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800f2aa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800f2ae:	4308      	orrs	r0, r1
 800f2b0:	4770      	bx	lr
	...

0800f2b4 <_init>:
 800f2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2b6:	bf00      	nop
 800f2b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2ba:	bc08      	pop	{r3}
 800f2bc:	469e      	mov	lr, r3
 800f2be:	4770      	bx	lr

0800f2c0 <_fini>:
 800f2c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2c2:	bf00      	nop
 800f2c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2c6:	bc08      	pop	{r3}
 800f2c8:	469e      	mov	lr, r3
 800f2ca:	4770      	bx	lr
